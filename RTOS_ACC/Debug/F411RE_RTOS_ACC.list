
F411RE_RTOS_ACC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d460  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  0800d600  0800d600  0000e600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc48  0800dc48  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc48  0800dc48  0000ec48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc50  0800dc50  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc50  0800dc50  0000ec50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc54  0800dc54  0000ec54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800dc58  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005614  200001d8  0800de30  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057ec  0800de30  0000f7ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a708  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c9  00000000  00000000  00029910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  0002d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001232  00000000  00000000  0002ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001947f  00000000  00000000  0002fc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e30  00000000  00000000  000490f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cfbc  00000000  00000000  00061f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000feee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007918  00000000  00000000  000fef28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00106840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d5e8 	.word	0x0800d5e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800d5e8 	.word	0x0800d5e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <ADXL355_Init>:

/**
   @brief Initialization the accelerometer sensor
   @return none
**/
void ADXL355_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
//   DioPulPin(DATARDYACC_PORT, DATARDYACC_PIN_NUMBER, 0);         /* Disable the internal pull up on INT2ACC pin */
//   DioOenPin(DATARDYACC_PORT, DATARDYACC_PIN_NUMBER, 0);         /* Set INT2ACC pin as input */

	/* Quick verification test for boards */

   uint32_t volatile ui32test = ADXL355_SPI_Read(DEVID_AD);                  /* Read the ID register */
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 faf6 	bl	80015ec <ADXL355_SPI_Read>
 8001000:	4603      	mov	r3, r0
 8001002:	60fb      	str	r3, [r7, #12]
   uint32_t volatile ui32test2 = ADXL355_SPI_Read(DEVID_MST);                  /* Read the ID register */
 8001004:	2001      	movs	r0, #1
 8001006:	f000 faf1 	bl	80015ec <ADXL355_SPI_Read>
 800100a:	4603      	mov	r3, r0
 800100c:	60bb      	str	r3, [r7, #8]
   uint32_t volatile ui32test3 = ADXL355_SPI_Read(PARTID);                  /* Read the ID register */
 800100e:	2002      	movs	r0, #2
 8001010:	f000 faec 	bl	80015ec <ADXL355_SPI_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	607b      	str	r3, [r7, #4]
   uint32_t volatile ui32test4 = ADXL355_SPI_Read(REVID);                 /* Read the ID register */
 8001018:	2003      	movs	r0, #3
 800101a:	f000 fae7 	bl	80015ec <ADXL355_SPI_Read>
 800101e:	4603      	mov	r3, r0
 8001020:	603b      	str	r3, [r7, #0]

   if ((ui32test == 0xAD) && (ui32test2 == 0x1D) && (ui32test3 == 0xED) && (ui32test4 == 0x01)) {
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2bad      	cmp	r3, #173	@ 0xad
 8001026:	d111      	bne.n	800104c <ADXL355_Init+0x58>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b1d      	cmp	r3, #29
 800102c:	d10e      	bne.n	800104c <ADXL355_Init+0x58>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2bed      	cmp	r3, #237	@ 0xed
 8001032:	d10b      	bne.n	800104c <ADXL355_Init+0x58>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <ADXL355_Init+0x58>
	   kappa("\n\rReset and initialized.\n\r");
 800103a:	4808      	ldr	r0, [pc, #32]	@ (800105c <ADXL355_Init+0x68>)
 800103c:	f000 f850 	bl	80010e0 <kappa>
	   ADXL355_SPI_Write(0x2F, 0x52, 1); //reset
 8001040:	2201      	movs	r2, #1
 8001042:	2152      	movs	r1, #82	@ 0x52
 8001044:	202f      	movs	r0, #47	@ 0x2f
 8001046:	f000 fb0d 	bl	8001664 <ADXL355_SPI_Write>
   if ((ui32test == 0xAD) && (ui32test2 == 0x1D) && (ui32test3 == 0xED) && (ui32test4 == 0x01)) {
 800104a:	e003      	b.n	8001054 <ADXL355_Init+0x60>
   }
   else
	   kappa("Error initializing\n\r");
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <ADXL355_Init+0x6c>)
 800104e:	f000 f847 	bl	80010e0 <kappa>
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0800d600 	.word	0x0800d600
 8001060:	0800d61c 	.word	0x0800d61c

08001064 <ADXL355_Start_Sensor>:

/**
   @brief Turns on accelerometer measurement mode.
   @return none
**/
void ADXL355_Start_Sensor(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
   uint8_t ui8temp;

   ui8temp = (uint8_t)ADXL355_SPI_Read(POWER_CTL);       /* Read POWER_CTL register, before modifying it */
 800106a:	202d      	movs	r0, #45	@ 0x2d
 800106c:	f000 fabe 	bl	80015ec <ADXL355_SPI_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]

   ui8temp = ui8temp & 0xFE;                                          /* Set measurement bit in POWER_CTL register */
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f023 0301 	bic.w	r3, r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]

   ADXL355_SPI_Write(POWER_CTL, ui8temp, SPI_WRITE_ONE_REG);                    /* Write the new value to POWER_CTL register */
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	202d      	movs	r0, #45	@ 0x2d
 8001084:	f000 faee 	bl	8001664 <ADXL355_SPI_Write>

   kappa("\n\rSensors started.\n\r");
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <ADXL355_Start_Sensor+0x34>)
 800108a:	f000 f829 	bl	80010e0 <kappa>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	0800d634 	.word	0x0800d634

0800109c <ADXL355_Acceleration_Data_Conversion>:
   @brief Convert the two's complement data in X,Y,Z registers to signed integers
   @param ui32SensorData - raw data from register
   @return int32_t - signed integer data
**/
int32_t ADXL355_Acceleration_Data_Conversion (uint32_t ui32SensorData)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
   int32_t volatile i32Conversion = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]

   ui32SensorData = ( ui32SensorData >> 4);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	607b      	str	r3, [r7, #4]

   ui32SensorData = (ui32SensorData & 0x000FFFFF);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010b4:	607b      	str	r3, [r7, #4]

   if((ui32SensorData & 0x00080000)  == 0x00080000){ //checking if most sig bit is set
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <ADXL355_Acceleration_Data_Conversion+0x32>
         i32Conversion = (ui32SensorData | 0xFFF00000); //if its set, we try to make it negative
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80010c6:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e001      	b.n	80010d2 <ADXL355_Acceleration_Data_Conversion+0x36>
   }
   else{
         i32Conversion = ui32SensorData;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]
   }

   return i32Conversion;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <kappa>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void kappa(const char *fmt, ...)
{
 80010e0:	b40f      	push	{r0, r1, r2, r3}
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f6:	480b      	ldr	r0, [pc, #44]	@ (8001124 <kappa+0x44>)
 80010f8:	f008 fd98 	bl	8009c2c <vsniprintf>
	va_end(args);
	int len = strlen(buffer);
 80010fc:	4809      	ldr	r0, [pc, #36]	@ (8001124 <kappa+0x44>)
 80010fe:	f7ff f8bf 	bl	8000280 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	b29a      	uxth	r2, r3
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800110e:	4905      	ldr	r1, [pc, #20]	@ (8001124 <kappa+0x44>)
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <kappa+0x48>)
 8001112:	f003 fee6 	bl	8004ee2 <HAL_UART_Transmit>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr
 8001124:	20000bb0 	.word	0x20000bb0
 8001128:	20000354 	.word	0x20000354

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f000 fec2 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f850 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f000 f962 	bl	8001400 <MX_GPIO_Init>
  MX_DMA_Init();
 800113c:	f000 f938 	bl	80013b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001140:	f000 f90c 	bl	800135c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001144:	f000 f8b0 	bl	80012a8 <MX_SPI2_Init>
  MX_TIM10_Init();
 8001148:	f000 f8e4 	bl	8001314 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800114c:	f004 fa72 	bl	8005634 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sem_SPI_DMA */
  sem_SPI_DMAHandle = osSemaphoreNew(1, 0, &sem_SPI_DMA_attributes);
 8001150:	4a15      	ldr	r2, [pc, #84]	@ (80011a8 <main+0x7c>)
 8001152:	2100      	movs	r1, #0
 8001154:	2001      	movs	r0, #1
 8001156:	f004 fb49 	bl	80057ec <osSemaphoreNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <main+0x80>)
 800115e:	6013      	str	r3, [r2, #0]

  /* creation of sem_processing */
  sem_processingHandle = osSemaphoreNew(1, 0, &sem_processing_attributes);
 8001160:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <main+0x84>)
 8001162:	2100      	movs	r1, #0
 8001164:	2001      	movs	r0, #1
 8001166:	f004 fb41 	bl	80057ec <osSemaphoreNew>
 800116a:	4603      	mov	r3, r0
 800116c:	4a11      	ldr	r2, [pc, #68]	@ (80011b4 <main+0x88>)
 800116e:	6013      	str	r3, [r2, #0]

  /* creation of sem_sampling */
  sem_samplingHandle = osSemaphoreNew(1, 0, &sem_sampling_attributes);
 8001170:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <main+0x8c>)
 8001172:	2100      	movs	r1, #0
 8001174:	2001      	movs	r0, #1
 8001176:	f004 fb39 	bl	80057ec <osSemaphoreNew>
 800117a:	4603      	mov	r3, r0
 800117c:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <main+0x90>)
 800117e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(taskMain, NULL, &mainTask_attributes);
 8001180:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <main+0x94>)
 8001182:	2100      	movs	r1, #0
 8001184:	480f      	ldr	r0, [pc, #60]	@ (80011c4 <main+0x98>)
 8001186:	f004 fa9f 	bl	80056c8 <osThreadNew>
 800118a:	4603      	mov	r3, r0
 800118c:	4a0e      	ldr	r2, [pc, #56]	@ (80011c8 <main+0x9c>)
 800118e:	6013      	str	r3, [r2, #0]

  /* creation of sampling */
  samplingHandle = osThreadNew(samplingTask, NULL, &sampling_attributes);
 8001190:	4a0e      	ldr	r2, [pc, #56]	@ (80011cc <main+0xa0>)
 8001192:	2100      	movs	r1, #0
 8001194:	480e      	ldr	r0, [pc, #56]	@ (80011d0 <main+0xa4>)
 8001196:	f004 fa97 	bl	80056c8 <osThreadNew>
 800119a:	4603      	mov	r3, r0
 800119c:	4a0d      	ldr	r2, [pc, #52]	@ (80011d4 <main+0xa8>)
 800119e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011a0:	f004 fa6c 	bl	800567c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <main+0x78>
 80011a8:	0800d7c0 	.word	0x0800d7c0
 80011ac:	200003a0 	.word	0x200003a0
 80011b0:	0800d7d0 	.word	0x0800d7d0
 80011b4:	200003a4 	.word	0x200003a4
 80011b8:	0800d7e0 	.word	0x0800d7e0
 80011bc:	200003a8 	.word	0x200003a8
 80011c0:	0800d778 	.word	0x0800d778
 80011c4:	08001801 	.word	0x08001801
 80011c8:	20000398 	.word	0x20000398
 80011cc:	0800d79c 	.word	0x0800d79c
 80011d0:	080018ed 	.word	0x080018ed
 80011d4:	2000039c 	.word	0x2000039c

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	@ 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2230      	movs	r2, #48	@ 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f008 fdc2 	bl	8009d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <SystemClock_Config+0xc8>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	4a26      	ldr	r2, [pc, #152]	@ (80012a0 <SystemClock_Config+0xc8>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	@ 0x40
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <SystemClock_Config+0xc8>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <SystemClock_Config+0xcc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a20      	ldr	r2, [pc, #128]	@ (80012a4 <SystemClock_Config+0xcc>)
 8001222:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <SystemClock_Config+0xcc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001234:	2301      	movs	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001238:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001248:	2304      	movs	r3, #4
 800124a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 800124c:	233c      	movs	r3, #60	@ 0x3c
 800124e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001250:	2302      	movs	r3, #2
 8001252:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001254:	2304      	movs	r3, #4
 8001256:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	4618      	mov	r0, r3
 800125e:	f001 fd21 	bl	8002ca4 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001268:	f000 fb68 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f001 ff84 	bl	8003194 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001292:	f000 fb53 	bl	800193c <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	@ 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012ac:	4b17      	ldr	r3, [pc, #92]	@ (800130c <MX_SPI2_Init+0x64>)
 80012ae:	4a18      	ldr	r2, [pc, #96]	@ (8001310 <MX_SPI2_Init+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_SPI2_Init+0x64>)
 80012b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_SPI2_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_SPI2_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_SPI2_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_SPI2_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_SPI2_Init+0x64>)
 80012d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_SPI2_Init+0x64>)
 80012dc:	2230      	movs	r2, #48	@ 0x30
 80012de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <MX_SPI2_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_SPI2_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	@ (800130c <MX_SPI2_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_SPI2_Init+0x64>)
 80012f4:	220a      	movs	r2, #10
 80012f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_SPI2_Init+0x64>)
 80012fa:	f002 f96b 	bl	80035d4 <HAL_SPI_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001304:	f000 fb1a 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200001f4 	.word	0x200001f4
 8001310:	40003800 	.word	0x40003800

08001314 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001318:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_TIM10_Init+0x40>)
 800131a:	4a0f      	ldr	r2, [pc, #60]	@ (8001358 <MX_TIM10_Init+0x44>)
 800131c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800131e:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <MX_TIM10_Init+0x40>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MX_TIM10_Init+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 58593;
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <MX_TIM10_Init+0x40>)
 800132c:	f24e 42e1 	movw	r2, #58593	@ 0xe4e1
 8001330:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_TIM10_Init+0x40>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_TIM10_Init+0x40>)
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_TIM10_Init+0x40>)
 8001340:	f003 fadc 	bl	80048fc <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800134a:	f000 faf7 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000030c 	.word	0x2000030c
 8001358:	40014400 	.word	0x40014400

0800135c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <MX_USART2_UART_Init+0x48>)
 8001362:	4a11      	ldr	r2, [pc, #68]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 400000;
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <MX_USART2_UART_Init+0x48>)
 8001368:	4a10      	ldr	r2, [pc, #64]	@ (80013ac <MX_USART2_UART_Init+0x50>)
 800136a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <MX_USART2_UART_Init+0x48>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <MX_USART2_UART_Init+0x48>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <MX_USART2_UART_Init+0x48>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <MX_USART2_UART_Init+0x48>)
 8001380:	220c      	movs	r2, #12
 8001382:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <MX_USART2_UART_Init+0x48>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <MX_USART2_UART_Init+0x48>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <MX_USART2_UART_Init+0x48>)
 8001392:	f003 fd59 	bl	8004e48 <HAL_UART_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800139c:	f000 face 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000354 	.word	0x20000354
 80013a8:	40004400 	.word	0x40004400
 80013ac:	00061a80 	.word	0x00061a80

080013b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <MX_DMA_Init+0x4c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <MX_DMA_Init+0x4c>)
 80013c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <MX_DMA_Init+0x4c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2105      	movs	r1, #5
 80013d6:	200e      	movs	r0, #14
 80013d8:	f000 fedf 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80013dc:	200e      	movs	r0, #14
 80013de:	f000 fef8 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	200f      	movs	r0, #15
 80013e8:	f000 fed7 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80013ec:	200f      	movs	r0, #15
 80013ee:	f000 fef0 	bl	80021d2 <HAL_NVIC_EnableIRQ>

}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b3b      	ldr	r3, [pc, #236]	@ (8001508 <MX_GPIO_Init+0x108>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a3a      	ldr	r2, [pc, #232]	@ (8001508 <MX_GPIO_Init+0x108>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b38      	ldr	r3, [pc, #224]	@ (8001508 <MX_GPIO_Init+0x108>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <MX_GPIO_Init+0x108>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a33      	ldr	r2, [pc, #204]	@ (8001508 <MX_GPIO_Init+0x108>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <MX_GPIO_Init+0x108>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <MX_GPIO_Init+0x108>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a2c      	ldr	r2, [pc, #176]	@ (8001508 <MX_GPIO_Init+0x108>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <MX_GPIO_Init+0x108>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <MX_GPIO_Init+0x108>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a25      	ldr	r2, [pc, #148]	@ (8001508 <MX_GPIO_Init+0x108>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b23      	ldr	r3, [pc, #140]	@ (8001508 <MX_GPIO_Init+0x108>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2101      	movs	r1, #1
 800148a:	4820      	ldr	r0, [pc, #128]	@ (800150c <MX_GPIO_Init+0x10c>)
 800148c:	f001 fbbe 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2120      	movs	r1, #32
 8001494:	481e      	ldr	r0, [pc, #120]	@ (8001510 <MX_GPIO_Init+0x110>)
 8001496:	f001 fbb9 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4816      	ldr	r0, [pc, #88]	@ (800150c <MX_GPIO_Init+0x10c>)
 80014b2:	f001 fa27 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	480f      	ldr	r0, [pc, #60]	@ (800150c <MX_GPIO_Init+0x10c>)
 80014ce:	f001 fa19 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014d2:	2320      	movs	r3, #32
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4809      	ldr	r0, [pc, #36]	@ (8001510 <MX_GPIO_Init+0x110>)
 80014ea:	f001 fa0b 	bl	8002904 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2105      	movs	r1, #5
 80014f2:	2028      	movs	r0, #40	@ 0x28
 80014f4:	f000 fe51 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014f8:	2028      	movs	r0, #40	@ 0x28
 80014fa:	f000 fe6a 	bl	80021d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	@ 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40020800 	.word	0x40020800
 8001510:	40020000 	.word	0x40020000

08001514 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(sem_SPI_DMAHandle);
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <HAL_SPI_TxCpltCallback+0x1c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f004 fa3f 	bl	80059a4 <osSemaphoreRelease>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200003a0 	.word	0x200003a0

08001534 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(sem_SPI_DMAHandle);
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <HAL_SPI_RxCpltCallback+0x1c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f004 fa2f 	bl	80059a4 <osSemaphoreRelease>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200003a0 	.word	0x200003a0

08001554 <ADXL355_SPI_Read_DMA>:

uint32_t ADXL355_SPI_Read_DMA(uint8_t ui8address) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;
	uint8_t recieveData;
	uint8_t txData;

	txData = (ui8address << 1) | 1 ;
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	b25b      	sxtb	r3, r3
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	b25b      	sxtb	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); //ON
 800156e:	2200      	movs	r2, #0
 8001570:	2101      	movs	r1, #1
 8001572:	481a      	ldr	r0, [pc, #104]	@ (80015dc <ADXL355_SPI_Read_DMA+0x88>)
 8001574:	f001 fb4a 	bl	8002c0c <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit_DMA(&hspi2, &txData, 1);
 8001578:	f107 030d 	add.w	r3, r7, #13
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	4817      	ldr	r0, [pc, #92]	@ (80015e0 <ADXL355_SPI_Read_DMA+0x8c>)
 8001582:	f002 fc9f 	bl	8003ec4 <HAL_SPI_Transmit_DMA>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
	osSemaphoreAcquire(sem_SPI_DMAHandle, osWaitForever);
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <ADXL355_SPI_Read_DMA+0x90>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001592:	4618      	mov	r0, r3
 8001594:	f004 f9b4 	bl	8005900 <osSemaphoreAcquire>

	status = HAL_SPI_Receive_DMA(&hspi2, &recieveData, 1);
 8001598:	f107 030e 	add.w	r3, r7, #14
 800159c:	2201      	movs	r2, #1
 800159e:	4619      	mov	r1, r3
 80015a0:	480f      	ldr	r0, [pc, #60]	@ (80015e0 <ADXL355_SPI_Read_DMA+0x8c>)
 80015a2:	f002 fd45 	bl	8004030 <HAL_SPI_Receive_DMA>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]
	osSemaphoreAcquire(sem_SPI_DMAHandle, osWaitForever);
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <ADXL355_SPI_Read_DMA+0x90>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 f9a4 	bl	8005900 <osSemaphoreAcquire>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //OFF
 80015b8:	2201      	movs	r2, #1
 80015ba:	2101      	movs	r1, #1
 80015bc:	4807      	ldr	r0, [pc, #28]	@ (80015dc <ADXL355_SPI_Read_DMA+0x88>)
 80015be:	f001 fb25 	bl	8002c0c <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <ADXL355_SPI_Read_DMA+0x78>
		return recieveData;
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
 80015ca:	e003      	b.n	80015d4 <ADXL355_SPI_Read_DMA+0x80>
	else
		printf("\r\nError Reading: Invalid HAL_STATUS\r\n");
 80015cc:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <ADXL355_SPI_Read_DMA+0x94>)
 80015ce:	f008 fa97 	bl	8009b00 <puts>

	return 255;
 80015d2:	23ff      	movs	r3, #255	@ 0xff
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020800 	.word	0x40020800
 80015e0:	200001f4 	.word	0x200001f4
 80015e4:	200003a0 	.word	0x200003a0
 80015e8:	0800d6dc 	.word	0x0800d6dc

080015ec <ADXL355_SPI_Read>:

uint32_t ADXL355_SPI_Read(uint8_t ui8address) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;
	uint8_t recieveData;
	uint8_t txData;

	txData = (ui8address << 1) | 1 ;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	b25b      	sxtb	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); //ON
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	4813      	ldr	r0, [pc, #76]	@ (8001658 <ADXL355_SPI_Read+0x6c>)
 800160c:	f001 fafe 	bl	8002c0c <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit (&hspi2, &txData, 1, 100);
 8001610:	f107 010d 	add.w	r1, r7, #13
 8001614:	2364      	movs	r3, #100	@ 0x64
 8001616:	2201      	movs	r2, #1
 8001618:	4810      	ldr	r0, [pc, #64]	@ (800165c <ADXL355_SPI_Read+0x70>)
 800161a:	f002 f864 	bl	80036e6 <HAL_SPI_Transmit>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Receive (&hspi2, &recieveData, 1, 100);
 8001622:	f107 010e 	add.w	r1, r7, #14
 8001626:	2364      	movs	r3, #100	@ 0x64
 8001628:	2201      	movs	r2, #1
 800162a:	480c      	ldr	r0, [pc, #48]	@ (800165c <ADXL355_SPI_Read+0x70>)
 800162c:	f002 f997 	bl	800395e <HAL_SPI_Receive>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //OFF
 8001634:	2201      	movs	r2, #1
 8001636:	2101      	movs	r1, #1
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <ADXL355_SPI_Read+0x6c>)
 800163a:	f001 fae7 	bl	8002c0c <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <ADXL355_SPI_Read+0x5c>
		return recieveData;
 8001644:	7bbb      	ldrb	r3, [r7, #14]
 8001646:	e003      	b.n	8001650 <ADXL355_SPI_Read+0x64>
	else
		printf("\r\nError Reading: Invalid HAL_STATUS\r\n");
 8001648:	4805      	ldr	r0, [pc, #20]	@ (8001660 <ADXL355_SPI_Read+0x74>)
 800164a:	f008 fa59 	bl	8009b00 <puts>

	return 255;
 800164e:	23ff      	movs	r3, #255	@ 0xff
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40020800 	.word	0x40020800
 800165c:	200001f4 	.word	0x200001f4
 8001660:	0800d6dc 	.word	0x0800d6dc

08001664 <ADXL355_SPI_Write>:
 * @param : enMode - regarding how many bytes of data you will write, i chose to not really use this and hardcoded a
 *                   1 for '1 byte' in every write I ever used
 *
 * This function is a callback for the accelerometer write
 */
void ADXL355_SPI_Write(uint8_t ui8address, uint8_t ui8Data, enWriteData enMode) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
 800166e:	460b      	mov	r3, r1
 8001670:	71bb      	strb	r3, [r7, #6]
 8001672:	4613      	mov	r3, r2
 8001674:	717b      	strb	r3, [r7, #5]

	HAL_StatusTypeDef status;
	uint8_t address;

	address = ((ui8address << 1) & 0xFE);
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); //ON
 800167e:	2200      	movs	r2, #0
 8001680:	2101      	movs	r1, #1
 8001682:	4811      	ldr	r0, [pc, #68]	@ (80016c8 <ADXL355_SPI_Write+0x64>)
 8001684:	f001 fac2 	bl	8002c0c <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit (&hspi2, &address, 1, 100);
 8001688:	f107 010e 	add.w	r1, r7, #14
 800168c:	2364      	movs	r3, #100	@ 0x64
 800168e:	2201      	movs	r2, #1
 8001690:	480e      	ldr	r0, [pc, #56]	@ (80016cc <ADXL355_SPI_Write+0x68>)
 8001692:	f002 f828 	bl	80036e6 <HAL_SPI_Transmit>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit (&hspi2, &ui8Data, 1, 100);
 800169a:	1db9      	adds	r1, r7, #6
 800169c:	2364      	movs	r3, #100	@ 0x64
 800169e:	2201      	movs	r2, #1
 80016a0:	480a      	ldr	r0, [pc, #40]	@ (80016cc <ADXL355_SPI_Write+0x68>)
 80016a2:	f002 f820 	bl	80036e6 <HAL_SPI_Transmit>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //OFF
 80016aa:	2201      	movs	r2, #1
 80016ac:	2101      	movs	r1, #1
 80016ae:	4806      	ldr	r0, [pc, #24]	@ (80016c8 <ADXL355_SPI_Write+0x64>)
 80016b0:	f001 faac 	bl	8002c0c <HAL_GPIO_WritePin>

	if (status != HAL_OK)
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <ADXL355_SPI_Write+0x5c>
		printf("\r\nError writing: Invalid HAL STATUS\r\n");
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <ADXL355_SPI_Write+0x6c>)
 80016bc:	f008 fa20 	bl	8009b00 <puts>
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40020800 	.word	0x40020800
 80016cc:	200001f4 	.word	0x200001f4
 80016d0:	0800d704 	.word	0x0800d704

080016d4 <ADXL355_SPI_READ_ACC>:

int32_t ADXL355_SPI_READ_ACC(uint8_t axis)	//Axis = 0x00 - x, 0x01 - y, 0x02 - z
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint32_t acc_val_raw3 = 0, acc_val_raw2 = 0, acc_val_raw1 = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
	int32_t acc_val = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]

	switch(axis)
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d020      	beq.n	8001736 <ADXL355_SPI_READ_ACC+0x62>
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	dc2b      	bgt.n	8001750 <ADXL355_SPI_READ_ACC+0x7c>
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <ADXL355_SPI_READ_ACC+0x2e>
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d00d      	beq.n	800171c <ADXL355_SPI_READ_ACC+0x48>
 8001700:	e026      	b.n	8001750 <ADXL355_SPI_READ_ACC+0x7c>
	{
		case 0x00:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(XDATA3);
 8001702:	2008      	movs	r0, #8
 8001704:	f7ff ff26 	bl	8001554 <ADXL355_SPI_Read_DMA>
 8001708:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(XDATA2);
 800170a:	2009      	movs	r0, #9
 800170c:	f7ff ff22 	bl	8001554 <ADXL355_SPI_Read_DMA>
 8001710:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(XDATA1);
 8001712:	200a      	movs	r0, #10
 8001714:	f7ff ff1e 	bl	8001554 <ADXL355_SPI_Read_DMA>
 8001718:	60f8      	str	r0, [r7, #12]
		break;
 800171a:	e019      	b.n	8001750 <ADXL355_SPI_READ_ACC+0x7c>

		case 0x01:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(YDATA3);
 800171c:	200b      	movs	r0, #11
 800171e:	f7ff ff19 	bl	8001554 <ADXL355_SPI_Read_DMA>
 8001722:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(YDATA2);
 8001724:	200c      	movs	r0, #12
 8001726:	f7ff ff15 	bl	8001554 <ADXL355_SPI_Read_DMA>
 800172a:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(YDATA1);
 800172c:	200d      	movs	r0, #13
 800172e:	f7ff ff11 	bl	8001554 <ADXL355_SPI_Read_DMA>
 8001732:	60f8      	str	r0, [r7, #12]
		break;
 8001734:	e00c      	b.n	8001750 <ADXL355_SPI_READ_ACC+0x7c>

		case 0x02:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(ZDATA3);
 8001736:	200e      	movs	r0, #14
 8001738:	f7ff ff0c 	bl	8001554 <ADXL355_SPI_Read_DMA>
 800173c:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(ZDATA2);
 800173e:	200f      	movs	r0, #15
 8001740:	f7ff ff08 	bl	8001554 <ADXL355_SPI_Read_DMA>
 8001744:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(ZDATA1);
 8001746:	2010      	movs	r0, #16
 8001748:	f7ff ff04 	bl	8001554 <ADXL355_SPI_Read_DMA>
 800174c:	60f8      	str	r0, [r7, #12]

			/*acc_val_raw3 = ADXL355_SPI_Read(ZDATA3);
			acc_val_raw2 = ADXL355_SPI_Read(ZDATA2);
			acc_val_raw1 = ADXL355_SPI_Read(ZDATA1);*/
		break;
 800174e:	bf00      	nop
	}

	acc_val = ADXL355_Acceleration_Data_Conversion(
							((acc_val_raw3<<16) & 0x00FF0000) |
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	041b      	lsls	r3, r3, #16
 8001754:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
									((acc_val_raw2<<8) & 0x0000FF00) |
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b29b      	uxth	r3, r3
							((acc_val_raw3<<16) & 0x00FF0000) |
 800175e:	431a      	orrs	r2, r3
											(acc_val_raw1 & 0x000000FF));
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	b2db      	uxtb	r3, r3
	acc_val = ADXL355_Acceleration_Data_Conversion(
 8001764:	4313      	orrs	r3, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fc98 	bl	800109c <ADXL355_Acceleration_Data_Conversion>
 800176c:	60b8      	str	r0, [r7, #8]
	return acc_val;
 800176e:	68bb      	ldr	r3, [r7, #8]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001788:	d10b      	bne.n	80017a2 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800178a:	2028      	movs	r0, #40	@ 0x28
 800178c:	f000 fd2f 	bl	80021ee <HAL_NVIC_DisableIRQ>
		data_ctr = 0;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_GPIO_EXTI_Callback+0x34>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]

		HAL_TIM_Base_Start_IT(&htim10);
 8001796:	4806      	ldr	r0, [pc, #24]	@ (80017b0 <HAL_GPIO_EXTI_Callback+0x38>)
 8001798:	f003 f900 	bl	800499c <HAL_TIM_Base_Start_IT>
		kappa("Iniciado\r\n");
 800179c:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <HAL_GPIO_EXTI_Callback+0x3c>)
 800179e:	f7ff fc9f 	bl	80010e0 <kappa>
	}
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200003ac 	.word	0x200003ac
 80017b0:	2000030c 	.word	0x2000030c
 80017b4:	0800d72c 	.word	0x0800d72c

080017b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	//kappa("Timer\r\n");
	if(data_ctr < data_len)
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017c8:	d205      	bcs.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		osSemaphoreRelease(sem_samplingHandle);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f004 f8e8 	bl	80059a4 <osSemaphoreRelease>
	}else
	{
		HAL_TIM_Base_Stop_IT(&htim10);
		osSemaphoreRelease(sem_processingHandle);
	}
}
 80017d4:	e007      	b.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_Base_Stop_IT(&htim10);
 80017d6:	4808      	ldr	r0, [pc, #32]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017d8:	f003 f942 	bl	8004a60 <HAL_TIM_Base_Stop_IT>
		osSemaphoreRelease(sem_processingHandle);
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 f8df 	bl	80059a4 <osSemaphoreRelease>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200003ac 	.word	0x200003ac
 80017f4:	200003a8 	.word	0x200003a8
 80017f8:	2000030c 	.word	0x2000030c
 80017fc:	200003a4 	.word	0x200003a4

08001800 <taskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_taskMain */
void taskMain(void *argument)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	ed2d 8b02 	vpush	{d8}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int32_t acc_val;
	float acc_val_flt;
	vTaskDelay(1000);
 800180c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001810:	f005 fbde 	bl	8006fd0 <vTaskDelay>
	kappa("Program started!\r\n");
 8001814:	482e      	ldr	r0, [pc, #184]	@ (80018d0 <taskMain+0xd0>)
 8001816:	f7ff fc63 	bl	80010e0 <kappa>
	ADXL355_Init();
 800181a:	f7ff fbeb 	bl	8000ff4 <ADXL355_Init>
	vTaskDelay(100);
 800181e:	2064      	movs	r0, #100	@ 0x64
 8001820:	f005 fbd6 	bl	8006fd0 <vTaskDelay>
	ADXL355_Start_Sensor();
 8001824:	f7ff fc1e 	bl	8001064 <ADXL355_Start_Sensor>
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(sem_processingHandle, osWaitForever);
 8001828:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <taskMain+0xd4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001830:	4618      	mov	r0, r3
 8001832:	f004 f865 	bl	8005900 <osSemaphoreAcquire>
		for(int ii=0;ii<data_len;ii++)
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e033      	b.n	80018a4 <taskMain+0xa4>
		{
			acc_val_flt = data_array[ii] / 26214.4;
 800183c:	4a26      	ldr	r2, [pc, #152]	@ (80018d8 <taskMain+0xd8>)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe75 	bl	8000534 <__aeabi_i2d>
 800184a:	a31f      	add	r3, pc, #124	@ (adr r3, 80018c8 <taskMain+0xc8>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7ff f804 	bl	800085c <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f9cc 	bl	8000bf8 <__aeabi_d2f>
 8001860:	4603      	mov	r3, r0
 8001862:	60bb      	str	r3, [r7, #8]
			kappa("%d.%d\r\n", (int) acc_val_flt, (int) (fmodf(fabs(acc_val_flt), 1.0)*1000));
 8001864:	edd7 7a02 	vldr	s15, [r7, #8]
 8001868:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 800186c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001870:	eef0 7ae7 	vabs.f32	s15, s15
 8001874:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001878:	eeb0 0a67 	vmov.f32	s0, s15
 800187c:	f00b fe12 	bl	800d4a4 <fmodf>
 8001880:	eef0 7a40 	vmov.f32	s15, s0
 8001884:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80018dc <taskMain+0xdc>
 8001888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001890:	ee17 2a90 	vmov	r2, s15
 8001894:	ee18 1a10 	vmov	r1, s16
 8001898:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <taskMain+0xe0>)
 800189a:	f7ff fc21 	bl	80010e0 <kappa>
		for(int ii=0;ii<data_len;ii++)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018aa:	dbc7      	blt.n	800183c <taskMain+0x3c>
		}
		kappa("\r\nDone!\r\n");
 80018ac:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <taskMain+0xe4>)
 80018ae:	f7ff fc17 	bl	80010e0 <kappa>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <taskMain+0xe8>)
 80018b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b8:	615a      	str	r2, [r3, #20]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018ba:	2028      	movs	r0, #40	@ 0x28
 80018bc:	f000 fc89 	bl	80021d2 <HAL_NVIC_EnableIRQ>
		osSemaphoreAcquire(sem_processingHandle, osWaitForever);
 80018c0:	e7b2      	b.n	8001828 <taskMain+0x28>
 80018c2:	bf00      	nop
 80018c4:	f3af 8000 	nop.w
 80018c8:	9999999a 	.word	0x9999999a
 80018cc:	40d99999 	.word	0x40d99999
 80018d0:	0800d738 	.word	0x0800d738
 80018d4:	200003a4 	.word	0x200003a4
 80018d8:	200003b0 	.word	0x200003b0
 80018dc:	447a0000 	.word	0x447a0000
 80018e0:	0800d74c 	.word	0x0800d74c
 80018e4:	0800d754 	.word	0x0800d754
 80018e8:	40013c00 	.word	0x40013c00

080018ec <samplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_samplingTask */
void samplingTask(void *argument)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN samplingTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(sem_samplingHandle, osWaitForever);
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <samplingTask+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 ffff 	bl	8005900 <osSemaphoreAcquire>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001902:	2120      	movs	r1, #32
 8001904:	480a      	ldr	r0, [pc, #40]	@ (8001930 <samplingTask+0x44>)
 8001906:	f001 f99a 	bl	8002c3e <HAL_GPIO_TogglePin>
	  data_array[data_ctr] = ADXL355_SPI_READ_ACC(2);
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <samplingTask+0x48>)
 800190c:	681c      	ldr	r4, [r3, #0]
 800190e:	2002      	movs	r0, #2
 8001910:	f7ff fee0 	bl	80016d4 <ADXL355_SPI_READ_ACC>
 8001914:	4603      	mov	r3, r0
 8001916:	4a08      	ldr	r2, [pc, #32]	@ (8001938 <samplingTask+0x4c>)
 8001918:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  data_ctr++;
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <samplingTask+0x48>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <samplingTask+0x48>)
 8001924:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(sem_samplingHandle, osWaitForever);
 8001926:	bf00      	nop
 8001928:	e7e4      	b.n	80018f4 <samplingTask+0x8>
 800192a:	bf00      	nop
 800192c:	200003a8 	.word	0x200003a8
 8001930:	40020000 	.word	0x40020000
 8001934:	200003ac 	.word	0x200003ac
 8001938:	200003b0 	.word	0x200003b0

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <Error_Handler+0x8>

08001948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_MspInit+0x54>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	4a11      	ldr	r2, [pc, #68]	@ (800199c <HAL_MspInit+0x54>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800195c:	6453      	str	r3, [r2, #68]	@ 0x44
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_MspInit+0x54>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_MspInit+0x54>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <HAL_MspInit+0x54>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <HAL_MspInit+0x54>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	210f      	movs	r1, #15
 800198a:	f06f 0001 	mvn.w	r0, #1
 800198e:	f000 fc04 	bl	800219a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a56      	ldr	r2, [pc, #344]	@ (8001b18 <HAL_SPI_MspInit+0x178>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	f040 80a5 	bne.w	8001b0e <HAL_SPI_MspInit+0x16e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	4b54      	ldr	r3, [pc, #336]	@ (8001b1c <HAL_SPI_MspInit+0x17c>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	4a53      	ldr	r2, [pc, #332]	@ (8001b1c <HAL_SPI_MspInit+0x17c>)
 80019ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d4:	4b51      	ldr	r3, [pc, #324]	@ (8001b1c <HAL_SPI_MspInit+0x17c>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	4b4d      	ldr	r3, [pc, #308]	@ (8001b1c <HAL_SPI_MspInit+0x17c>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	4a4c      	ldr	r2, [pc, #304]	@ (8001b1c <HAL_SPI_MspInit+0x17c>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f0:	4b4a      	ldr	r3, [pc, #296]	@ (8001b1c <HAL_SPI_MspInit+0x17c>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	4b46      	ldr	r3, [pc, #280]	@ (8001b1c <HAL_SPI_MspInit+0x17c>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a04:	4a45      	ldr	r2, [pc, #276]	@ (8001b1c <HAL_SPI_MspInit+0x17c>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0c:	4b43      	ldr	r3, [pc, #268]	@ (8001b1c <HAL_SPI_MspInit+0x17c>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a18:	230c      	movs	r3, #12
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a28:	2305      	movs	r3, #5
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	483b      	ldr	r0, [pc, #236]	@ (8001b20 <HAL_SPI_MspInit+0x180>)
 8001a34:	f000 ff66 	bl	8002904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4833      	ldr	r0, [pc, #204]	@ (8001b24 <HAL_SPI_MspInit+0x184>)
 8001a56:	f000 ff55 	bl	8002904 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001a5a:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a5c:	4a33      	ldr	r2, [pc, #204]	@ (8001b2c <HAL_SPI_MspInit+0x18c>)
 8001a5e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001a60:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a66:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a72:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a78:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001a86:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a8c:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a92:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001a98:	4823      	ldr	r0, [pc, #140]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001a9a:	f000 fbc3 	bl	8002224 <HAL_DMA_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001aa4:	f7ff ff4a 	bl	800193c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001aac:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001aae:	4a1e      	ldr	r2, [pc, #120]	@ (8001b28 <HAL_SPI_MspInit+0x188>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b34 <HAL_SPI_MspInit+0x194>)
 8001ab8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001ac2:	2240      	movs	r2, #64	@ 0x40
 8001ac4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ad2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001af2:	480f      	ldr	r0, [pc, #60]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001af4:	f000 fb96 	bl	8002224 <HAL_DMA_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8001afe:	f7ff ff1d 	bl	800193c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001b06:	649a      	str	r2, [r3, #72]	@ 0x48
 8001b08:	4a09      	ldr	r2, [pc, #36]	@ (8001b30 <HAL_SPI_MspInit+0x190>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	@ 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40003800 	.word	0x40003800
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020400 	.word	0x40020400
 8001b28:	2000024c 	.word	0x2000024c
 8001b2c:	40026058 	.word	0x40026058
 8001b30:	200002ac 	.word	0x200002ac
 8001b34:	40026070 	.word	0x40026070

08001b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0e      	ldr	r2, [pc, #56]	@ (8001b80 <HAL_TIM_Base_MspInit+0x48>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d115      	bne.n	8001b76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <HAL_TIM_Base_MspInit+0x4c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a0c      	ldr	r2, [pc, #48]	@ (8001b84 <HAL_TIM_Base_MspInit+0x4c>)
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_TIM_Base_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	2019      	movs	r0, #25
 8001b6c:	f000 fb15 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b70:	2019      	movs	r0, #25
 8001b72:	f000 fb2e 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40014400 	.word	0x40014400
 8001b84:	40023800 	.word	0x40023800

08001b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <HAL_UART_MspInit+0x84>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12b      	bne.n	8001c02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a10      	ldr	r2, [pc, #64]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001be2:	230c      	movs	r3, #12
 8001be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bfe:	f000 fe81 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	@ 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40004400 	.word	0x40004400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020000 	.word	0x40020000

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <NMI_Handler+0x4>

08001c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <MemManage_Handler+0x4>

08001c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c52:	f000 f983 	bl	8001f5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c56:	f005 fe55 	bl	8007904 <xTaskGetSchedulerState>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d001      	beq.n	8001c64 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c60:	f006 fd4a 	bl	80086f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <DMA1_Stream3_IRQHandler+0x10>)
 8001c6e:	f000 fbdf 	bl	8002430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000024c 	.word	0x2000024c

08001c7c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <DMA1_Stream4_IRQHandler+0x10>)
 8001c82:	f000 fbd5 	bl	8002430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200002ac 	.word	0x200002ac

08001c90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001c94:	4802      	ldr	r0, [pc, #8]	@ (8001ca0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c96:	f002 ff12 	bl	8004abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000030c 	.word	0x2000030c

08001ca4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ca8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cac:	f000 ffe2 	bl	8002c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_kill>:

int _kill(int pid, int sig)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cce:	f008 f8f7 	bl	8009ec0 <__errno>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2216      	movs	r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_exit>:

void _exit (int status)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ffe7 	bl	8001cc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf6:	bf00      	nop
 8001cf8:	e7fd      	b.n	8001cf6 <_exit+0x12>

08001cfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e00a      	b.n	8001d22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d0c:	f3af 8000 	nop.w
 8001d10:	4601      	mov	r1, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	60ba      	str	r2, [r7, #8]
 8001d18:	b2ca      	uxtb	r2, r1
 8001d1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbf0      	blt.n	8001d0c <_read+0x12>
  }

  return len;
 8001d2a:	687b      	ldr	r3, [r7, #4]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e009      	b.n	8001d5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	60ba      	str	r2, [r7, #8]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3301      	adds	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dbf1      	blt.n	8001d46 <_write+0x12>
  }
  return len;
 8001d62:	687b      	ldr	r3, [r7, #4]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_close>:

int _close(int file)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d94:	605a      	str	r2, [r3, #4]
  return 0;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_isatty>:

int _isatty(int file)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f008 f85c 	bl	8009ec0 <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20020000 	.word	0x20020000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	20000cb0 	.word	0x20000cb0
 8001e3c:	200057f0 	.word	0x200057f0

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <SystemInit+0x20>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <SystemInit+0x20>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e68:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e6a:	490e      	ldr	r1, [pc, #56]	@ (8001ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e80:	4c0b      	ldr	r4, [pc, #44]	@ (8001eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8e:	f7ff ffd7 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f008 f81b 	bl	8009ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7ff f949 	bl	800112c <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ea8:	0800dc58 	.word	0x0800dc58
  ldr r2, =_sbss
 8001eac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001eb0:	200057ec 	.word	0x200057ec

08001eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <HAL_Init+0x40>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <HAL_Init+0x40>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <HAL_Init+0x40>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f94f 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f000 f808 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fd2c 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_InitTick+0x54>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_InitTick+0x58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f975 	bl	800220a <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f38:	f000 f92f 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	@ (8001f58 <HAL_InitTick+0x5c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_IncTick+0x20>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_IncTick+0x24>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <HAL_IncTick+0x24>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000008 	.word	0x20000008
 8001f80:	20000cb4 	.word	0x20000cb4

08001f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return uwTick;
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <HAL_GetTick+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000cb4 	.word	0x20000cb4

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db12      	blt.n	8002074 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	490a      	ldr	r1, [pc, #40]	@ (8002080 <__NVIC_DisableIRQ+0x44>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2001      	movs	r0, #1
 800205e:	fa00 f202 	lsl.w	r2, r0, r2
 8002062:	3320      	adds	r3, #32
 8002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002068:	f3bf 8f4f 	dsb	sy
}
 800206c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800206e:	f3bf 8f6f 	isb	sy
}
 8002072:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	@ (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	@ (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff05 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff1a 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff0d 	bl	8002000 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff1d 	bl	800203c <__NVIC_DisableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff94 	bl	8002140 <SysTick_Config>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff fea8 	bl	8001f84 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e099      	b.n	8002374 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002260:	e00f      	b.n	8002282 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002262:	f7ff fe8f 	bl	8001f84 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b05      	cmp	r3, #5
 800226e:	d908      	bls.n	8002282 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e078      	b.n	8002374 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e8      	bne.n	8002262 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <HAL_DMA_Init+0x158>)
 800229c:	4013      	ands	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d107      	bne.n	80022ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	4313      	orrs	r3, r2
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f023 0307 	bic.w	r3, r3, #7
 8002302:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	2b04      	cmp	r3, #4
 8002314:	d117      	bne.n	8002346 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fa6f 	bl	800280c <DMA_CheckFifoParam>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2240      	movs	r2, #64	@ 0x40
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002342:	2301      	movs	r3, #1
 8002344:	e016      	b.n	8002374 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fa26 	bl	80027a0 <DMA_CalcBaseAndBitshift>
 8002354:	4603      	mov	r3, r0
 8002356:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	223f      	movs	r2, #63	@ 0x3f
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	f010803f 	.word	0xf010803f

08002380 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_Start_IT+0x26>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e040      	b.n	8002428 <HAL_DMA_Start_IT+0xa8>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d12f      	bne.n	800241a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f9b8 	bl	8002744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d8:	223f      	movs	r2, #63	@ 0x3f
 80023da:	409a      	lsls	r2, r3
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0216 	orr.w	r2, r2, #22
 80023ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0208 	orr.w	r2, r2, #8
 8002406:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e005      	b.n	8002426 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002422:	2302      	movs	r3, #2
 8002424:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002426:	7dfb      	ldrb	r3, [r7, #23]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800243c:	4b8e      	ldr	r3, [pc, #568]	@ (8002678 <HAL_DMA_IRQHandler+0x248>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a8e      	ldr	r2, [pc, #568]	@ (800267c <HAL_DMA_IRQHandler+0x24c>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245a:	2208      	movs	r2, #8
 800245c:	409a      	lsls	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01a      	beq.n	800249c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0204 	bic.w	r2, r2, #4
 8002482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002488:	2208      	movs	r2, #8
 800248a:	409a      	lsls	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a0:	2201      	movs	r2, #1
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	2201      	movs	r2, #1
 80024c0:	409a      	lsls	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ca:	f043 0202 	orr.w	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d6:	2204      	movs	r2, #4
 80024d8:	409a      	lsls	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d012      	beq.n	8002508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f4:	2204      	movs	r2, #4
 80024f6:	409a      	lsls	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002500:	f043 0204 	orr.w	r2, r3, #4
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250c:	2210      	movs	r2, #16
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d043      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d03c      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	2210      	movs	r2, #16
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d018      	beq.n	8002572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d024      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
 800255e:	e01f      	b.n	80025a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
 8002570:	e016      	b.n	80025a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d107      	bne.n	8002590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0208 	bic.w	r2, r2, #8
 800258e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a4:	2220      	movs	r2, #32
 80025a6:	409a      	lsls	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 808f 	beq.w	80026d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8087 	beq.w	80026d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c6:	2220      	movs	r2, #32
 80025c8:	409a      	lsls	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d136      	bne.n	8002648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0216 	bic.w	r2, r2, #22
 80025e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_DMA_IRQHandler+0x1da>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0208 	bic.w	r2, r2, #8
 8002618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261e:	223f      	movs	r2, #63	@ 0x3f
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263a:	2b00      	cmp	r3, #0
 800263c:	d07e      	beq.n	800273c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
        }
        return;
 8002646:	e079      	b.n	800273c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01d      	beq.n	8002692 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002668:	2b00      	cmp	r3, #0
 800266a:	d031      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	4798      	blx	r3
 8002674:	e02c      	b.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
 8002676:	bf00      	nop
 8002678:	20000000 	.word	0x20000000
 800267c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d023      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
 8002690:	e01e      	b.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10f      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0210 	bic.w	r2, r2, #16
 80026ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d032      	beq.n	800273e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d022      	beq.n	800272a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2205      	movs	r2, #5
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3301      	adds	r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	d307      	bcc.n	8002718 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f2      	bne.n	80026fc <HAL_DMA_IRQHandler+0x2cc>
 8002716:	e000      	b.n	800271a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002718:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
 800273a:	e000      	b.n	800273e <HAL_DMA_IRQHandler+0x30e>
        return;
 800273c:	bf00      	nop
    }
  }
}
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b40      	cmp	r3, #64	@ 0x40
 8002770:	d108      	bne.n	8002784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002782:	e007      	b.n	8002794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	60da      	str	r2, [r3, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	3b10      	subs	r3, #16
 80027b0:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <DMA_CalcBaseAndBitshift+0x64>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ba:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <DMA_CalcBaseAndBitshift+0x68>)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d909      	bls.n	80027e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027d6:	f023 0303 	bic.w	r3, r3, #3
 80027da:	1d1a      	adds	r2, r3, #4
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	659a      	str	r2, [r3, #88]	@ 0x58
 80027e0:	e007      	b.n	80027f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027ea:	f023 0303 	bic.w	r3, r3, #3
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	aaaaaaab 	.word	0xaaaaaaab
 8002808:	0800d808 	.word	0x0800d808

0800280c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d11f      	bne.n	8002866 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d856      	bhi.n	80028da <DMA_CheckFifoParam+0xce>
 800282c:	a201      	add	r2, pc, #4	@ (adr r2, 8002834 <DMA_CheckFifoParam+0x28>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002845 	.word	0x08002845
 8002838:	08002857 	.word	0x08002857
 800283c:	08002845 	.word	0x08002845
 8002840:	080028db 	.word	0x080028db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d046      	beq.n	80028de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002854:	e043      	b.n	80028de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800285e:	d140      	bne.n	80028e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002864:	e03d      	b.n	80028e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800286e:	d121      	bne.n	80028b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b03      	cmp	r3, #3
 8002874:	d837      	bhi.n	80028e6 <DMA_CheckFifoParam+0xda>
 8002876:	a201      	add	r2, pc, #4	@ (adr r2, 800287c <DMA_CheckFifoParam+0x70>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	0800288d 	.word	0x0800288d
 8002880:	08002893 	.word	0x08002893
 8002884:	0800288d 	.word	0x0800288d
 8002888:	080028a5 	.word	0x080028a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      break;
 8002890:	e030      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d025      	beq.n	80028ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a2:	e022      	b.n	80028ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028ac:	d11f      	bne.n	80028ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028b2:	e01c      	b.n	80028ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d903      	bls.n	80028c2 <DMA_CheckFifoParam+0xb6>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d003      	beq.n	80028c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028c0:	e018      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
      break;
 80028c6:	e015      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00e      	beq.n	80028f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      break;
 80028d8:	e00b      	b.n	80028f2 <DMA_CheckFifoParam+0xe6>
      break;
 80028da:	bf00      	nop
 80028dc:	e00a      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e008      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e006      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
 80028e8:	e004      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
 80028ec:	e002      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ee:	bf00      	nop
 80028f0:	e000      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;
 80028f2:	bf00      	nop
    }
  } 
  
  return status; 
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	@ 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	e159      	b.n	8002bd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	f040 8148 	bne.w	8002bce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d005      	beq.n	8002956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002952:	2b02      	cmp	r3, #2
 8002954:	d130      	bne.n	80029b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 0201 	and.w	r2, r3, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d017      	beq.n	80029f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d123      	bne.n	8002a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	08da      	lsrs	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3208      	adds	r2, #8
 8002a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0203 	and.w	r2, r3, #3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80a2 	beq.w	8002bce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b57      	ldr	r3, [pc, #348]	@ (8002bec <HAL_GPIO_Init+0x2e8>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	4a56      	ldr	r2, [pc, #344]	@ (8002bec <HAL_GPIO_Init+0x2e8>)
 8002a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a9a:	4b54      	ldr	r3, [pc, #336]	@ (8002bec <HAL_GPIO_Init+0x2e8>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa6:	4a52      	ldr	r2, [pc, #328]	@ (8002bf0 <HAL_GPIO_Init+0x2ec>)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a49      	ldr	r2, [pc, #292]	@ (8002bf4 <HAL_GPIO_Init+0x2f0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x202>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a48      	ldr	r2, [pc, #288]	@ (8002bf8 <HAL_GPIO_Init+0x2f4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x1fe>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a47      	ldr	r2, [pc, #284]	@ (8002bfc <HAL_GPIO_Init+0x2f8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x1fa>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a46      	ldr	r2, [pc, #280]	@ (8002c00 <HAL_GPIO_Init+0x2fc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x1f6>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a45      	ldr	r2, [pc, #276]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x1f2>
 8002af2:	2304      	movs	r3, #4
 8002af4:	e008      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002af6:	2307      	movs	r3, #7
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002afa:	2303      	movs	r3, #3
 8002afc:	e004      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e002      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_GPIO_Init+0x204>
 8002b06:	2300      	movs	r3, #0
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f002 0203 	and.w	r2, r2, #3
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	4093      	lsls	r3, r2
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b18:	4935      	ldr	r1, [pc, #212]	@ (8002bf0 <HAL_GPIO_Init+0x2ec>)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b26:	4b38      	ldr	r3, [pc, #224]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b50:	4b2d      	ldr	r3, [pc, #180]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b74:	4a24      	ldr	r2, [pc, #144]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b7a:	4b23      	ldr	r3, [pc, #140]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	f67f aea2 	bls.w	8002920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3724      	adds	r7, #36	@ 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020c00 	.word	0x40020c00
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40013c00 	.word	0x40013c00

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c28:	e003      	b.n	8002c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	041a      	lsls	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c50:	887a      	ldrh	r2, [r7, #2]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	041a      	lsls	r2, r3, #16
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	43d9      	mvns	r1, r3
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	400b      	ands	r3, r1
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fd70 	bl	8001778 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40013c00 	.word	0x40013c00

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e267      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d075      	beq.n	8002dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc2:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4b85      	ldr	r3, [pc, #532]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d112      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cda:	4b82      	ldr	r3, [pc, #520]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ce6:	d10b      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05b      	beq.n	8002dac <HAL_RCC_OscConfig+0x108>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d157      	bne.n	8002dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e242      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x74>
 8002d0a:	4b76      	ldr	r3, [pc, #472]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a75      	ldr	r2, [pc, #468]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x98>
 8002d22:	4b70      	ldr	r3, [pc, #448]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6f      	ldr	r2, [pc, #444]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6c      	ldr	r2, [pc, #432]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d3c:	4b69      	ldr	r3, [pc, #420]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a68      	ldr	r2, [pc, #416]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b66      	ldr	r3, [pc, #408]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a65      	ldr	r2, [pc, #404]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7ff f912 	bl	8001f84 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d64:	f7ff f90e 	bl	8001f84 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	@ 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e207      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xc0>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7ff f8fe 	bl	8001f84 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7ff f8fa 	bl	8001f84 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	@ 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1f3      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	4b51      	ldr	r3, [pc, #324]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0xe8>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d063      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b44      	ldr	r3, [pc, #272]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b41      	ldr	r3, [pc, #260]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1c7      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4937      	ldr	r1, [pc, #220]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e03a      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCC_OscConfig+0x244>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7ff f8b3 	bl	8001f84 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e22:	f7ff f8af 	bl	8001f84 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1a8      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4925      	ldr	r1, [pc, #148]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <HAL_RCC_OscConfig+0x244>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7ff f892 	bl	8001f84 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e64:	f7ff f88e 	bl	8001f84 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e187      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d036      	beq.n	8002efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_RCC_OscConfig+0x248>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7ff f872 	bl	8001f84 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7ff f86e 	bl	8001f84 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e167      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x200>
 8002ec2:	e01b      	b.n	8002efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec4:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0x248>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7ff f85b 	bl	8001f84 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	e00e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7ff f857 	bl	8001f84 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d907      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e150      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	42470000 	.word	0x42470000
 8002eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b88      	ldr	r3, [pc, #544]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ea      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8097 	beq.w	8003038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b81      	ldr	r3, [pc, #516]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4a7c      	ldr	r2, [pc, #496]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b77      	ldr	r3, [pc, #476]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b74      	ldr	r3, [pc, #464]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a73      	ldr	r2, [pc, #460]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7ff f817 	bl	8001f84 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7ff f813 	bl	8001f84 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e10c      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x2ea>
 8002f80:	4b64      	ldr	r3, [pc, #400]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	4a63      	ldr	r2, [pc, #396]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8c:	e01c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x324>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x30c>
 8002f96:	4b5f      	ldr	r3, [pc, #380]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x324>
 8002fb0:	4b58      	ldr	r3, [pc, #352]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	4a57      	ldr	r2, [pc, #348]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbc:	4b55      	ldr	r3, [pc, #340]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc0:	4a54      	ldr	r2, [pc, #336]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	f023 0304 	bic.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe ffd8 	bl	8001f84 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe ffd4 	bl	8001f84 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0cb      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	4b49      	ldr	r3, [pc, #292]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0ee      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x334>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffc:	f7fe ffc2 	bl	8001f84 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe ffbe 	bl	8001f84 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0b5      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	4b3e      	ldr	r3, [pc, #248]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ee      	bne.n	8003004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	4a38      	ldr	r2, [pc, #224]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80a1 	beq.w	8003184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003042:	4b34      	ldr	r3, [pc, #208]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d05c      	beq.n	8003108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d141      	bne.n	80030da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_RCC_OscConfig+0x478>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe ff92 	bl	8001f84 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe ff8e 	bl	8001f84 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e087      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	4b27      	ldr	r3, [pc, #156]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	019b      	lsls	r3, r3, #6
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	491b      	ldr	r1, [pc, #108]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_RCC_OscConfig+0x478>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fe ff67 	bl	8001f84 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe ff63 	bl	8001f84 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e05c      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x416>
 80030d8:	e054      	b.n	8003184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b10      	ldr	r3, [pc, #64]	@ (800311c <HAL_RCC_OscConfig+0x478>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe ff50 	bl	8001f84 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe ff4c 	bl	8001f84 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e045      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x444>
 8003106:	e03d      	b.n	8003184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e038      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
 8003114:	40023800 	.word	0x40023800
 8003118:	40007000 	.word	0x40007000
 800311c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003120:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_RCC_OscConfig+0x4ec>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d028      	beq.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d121      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d11a      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003158:	4293      	cmp	r3, r2
 800315a:	d111      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	3b01      	subs	r3, #1
 800316a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800

08003194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0cc      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a8:	4b68      	ldr	r3, [pc, #416]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d90c      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b65      	ldr	r3, [pc, #404]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a58      	ldr	r2, [pc, #352]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a52      	ldr	r2, [pc, #328]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800320a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d044      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d119      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324e:	2b03      	cmp	r3, #3
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003252:	4b3f      	ldr	r3, [pc, #252]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e067      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b37      	ldr	r3, [pc, #220]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4934      	ldr	r1, [pc, #208]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7fe fe7e 	bl	8001f84 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fe fe7a 	bl	8001f84 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d20c      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b22      	ldr	r3, [pc, #136]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f821 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	@ (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fdde 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00
 8003350:	40023800 	.word	0x40023800
 8003354:	0800d7f0 	.word	0x0800d7f0
 8003358:	20000000 	.word	0x20000000
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003364:	b094      	sub	sp, #80	@ 0x50
 8003366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	647b      	str	r3, [r7, #68]	@ 0x44
 800336c:	2300      	movs	r3, #0
 800336e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003370:	2300      	movs	r3, #0
 8003372:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003378:	4b79      	ldr	r3, [pc, #484]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d00d      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003384:	2b08      	cmp	r3, #8
 8003386:	f200 80e1 	bhi.w	800354c <HAL_RCC_GetSysClockFreq+0x1ec>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x3a>
 8003392:	e0db      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b73      	ldr	r3, [pc, #460]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x204>)
 8003396:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003398:	e0db      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b73      	ldr	r3, [pc, #460]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x208>)
 800339c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800339e:	e0d8      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	2200      	movs	r2, #0
 80033be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033d2:	4622      	mov	r2, r4
 80033d4:	462b      	mov	r3, r5
 80033d6:	f04f 0000 	mov.w	r0, #0
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	0159      	lsls	r1, r3, #5
 80033e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e4:	0150      	lsls	r0, r2, #5
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4621      	mov	r1, r4
 80033ec:	1a51      	subs	r1, r2, r1
 80033ee:	6139      	str	r1, [r7, #16]
 80033f0:	4629      	mov	r1, r5
 80033f2:	eb63 0301 	sbc.w	r3, r3, r1
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003404:	4659      	mov	r1, fp
 8003406:	018b      	lsls	r3, r1, #6
 8003408:	4651      	mov	r1, sl
 800340a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800340e:	4651      	mov	r1, sl
 8003410:	018a      	lsls	r2, r1, #6
 8003412:	4651      	mov	r1, sl
 8003414:	ebb2 0801 	subs.w	r8, r2, r1
 8003418:	4659      	mov	r1, fp
 800341a:	eb63 0901 	sbc.w	r9, r3, r1
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003432:	4690      	mov	r8, r2
 8003434:	4699      	mov	r9, r3
 8003436:	4623      	mov	r3, r4
 8003438:	eb18 0303 	adds.w	r3, r8, r3
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	462b      	mov	r3, r5
 8003440:	eb49 0303 	adc.w	r3, r9, r3
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003452:	4629      	mov	r1, r5
 8003454:	024b      	lsls	r3, r1, #9
 8003456:	4621      	mov	r1, r4
 8003458:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800345c:	4621      	mov	r1, r4
 800345e:	024a      	lsls	r2, r1, #9
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003466:	2200      	movs	r2, #0
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800346a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800346c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003470:	f7fd fc12 	bl	8000c98 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800347c:	e058      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b38      	ldr	r3, [pc, #224]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	2200      	movs	r2, #0
 8003486:	4618      	mov	r0, r3
 8003488:	4611      	mov	r1, r2
 800348a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	2300      	movs	r3, #0
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
 8003494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	f04f 0000 	mov.w	r0, #0
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	0159      	lsls	r1, r3, #5
 80034a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034aa:	0150      	lsls	r0, r2, #5
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4641      	mov	r1, r8
 80034b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034d0:	ebb2 040a 	subs.w	r4, r2, sl
 80034d4:	eb63 050b 	sbc.w	r5, r3, fp
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	00eb      	lsls	r3, r5, #3
 80034e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e6:	00e2      	lsls	r2, r4, #3
 80034e8:	4614      	mov	r4, r2
 80034ea:	461d      	mov	r5, r3
 80034ec:	4643      	mov	r3, r8
 80034ee:	18e3      	adds	r3, r4, r3
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	464b      	mov	r3, r9
 80034f4:	eb45 0303 	adc.w	r3, r5, r3
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003506:	4629      	mov	r1, r5
 8003508:	028b      	lsls	r3, r1, #10
 800350a:	4621      	mov	r1, r4
 800350c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003510:	4621      	mov	r1, r4
 8003512:	028a      	lsls	r2, r1, #10
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800351a:	2200      	movs	r2, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	61fa      	str	r2, [r7, #28]
 8003520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003524:	f7fd fbb8 	bl	8000c98 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003530:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	3301      	adds	r3, #1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003540:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800354a:	e002      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x204>)
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003554:	4618      	mov	r0, r3
 8003556:	3750      	adds	r7, #80	@ 0x50
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000000 	.word	0x20000000

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003588:	f7ff fff0 	bl	800356c <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0a9b      	lsrs	r3, r3, #10
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	@ (80035a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	0800d800 	.word	0x0800d800

080035ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035b0:	f7ff ffdc 	bl	800356c <HAL_RCC_GetHCLKFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	0b5b      	lsrs	r3, r3, #13
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4903      	ldr	r1, [pc, #12]	@ (80035d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40023800 	.word	0x40023800
 80035d0:	0800d800 	.word	0x0800d800

080035d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07b      	b.n	80036de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d108      	bne.n	8003600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035f6:	d009      	beq.n	800360c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	61da      	str	r2, [r3, #28]
 80035fe:	e005      	b.n	800360c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fe f9ba 	bl	80019a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003642:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003690:	ea42 0103 	orr.w	r1, r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	f003 0104 	and.w	r1, r3, #4
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	f003 0210 	and.w	r2, r3, #16
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b088      	sub	sp, #32
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_SPI_Transmit+0x22>
 8003704:	2302      	movs	r3, #2
 8003706:	e126      	b.n	8003956 <HAL_SPI_Transmit+0x270>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003710:	f7fe fc38 	bl	8001f84 <HAL_GetTick>
 8003714:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d002      	beq.n	800372c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003726:	2302      	movs	r3, #2
 8003728:	77fb      	strb	r3, [r7, #31]
    goto error;
 800372a:	e10b      	b.n	8003944 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_SPI_Transmit+0x52>
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800373c:	e102      	b.n	8003944 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2203      	movs	r2, #3
 8003742:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003784:	d10f      	bne.n	80037a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003794:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b0:	2b40      	cmp	r3, #64	@ 0x40
 80037b2:	d007      	beq.n	80037c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037cc:	d14b      	bne.n	8003866 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_SPI_Transmit+0xf6>
 80037d6:	8afb      	ldrh	r3, [r7, #22]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d13e      	bne.n	800385a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e0:	881a      	ldrh	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ec:	1c9a      	adds	r2, r3, #2
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003800:	e02b      	b.n	800385a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d112      	bne.n	8003836 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	881a      	ldrh	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003820:	1c9a      	adds	r2, r3, #2
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003834:	e011      	b.n	800385a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003836:	f7fe fba5 	bl	8001f84 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d803      	bhi.n	800384e <HAL_SPI_Transmit+0x168>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800384c:	d102      	bne.n	8003854 <HAL_SPI_Transmit+0x16e>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003858:	e074      	b.n	8003944 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ce      	bne.n	8003802 <HAL_SPI_Transmit+0x11c>
 8003864:	e04c      	b.n	8003900 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_SPI_Transmit+0x18e>
 800386e:	8afb      	ldrh	r3, [r7, #22]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d140      	bne.n	80038f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	7812      	ldrb	r2, [r2, #0]
 8003880:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800389a:	e02c      	b.n	80038f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d113      	bne.n	80038d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038d0:	e011      	b.n	80038f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038d2:	f7fe fb57 	bl	8001f84 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d803      	bhi.n	80038ea <HAL_SPI_Transmit+0x204>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038e8:	d102      	bne.n	80038f0 <HAL_SPI_Transmit+0x20a>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038f4:	e026      	b.n	8003944 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1cd      	bne.n	800389c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	6839      	ldr	r1, [r7, #0]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 ffb7 	bl	8004878 <SPI_EndRxTxTransaction>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800391e:	2300      	movs	r3, #0
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e000      	b.n	8003944 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003942:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003954:	7ffb      	ldrb	r3, [r7, #31]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b088      	sub	sp, #32
 8003962:	af02      	add	r7, sp, #8
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800397a:	d112      	bne.n	80039a2 <HAL_SPI_Receive+0x44>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10e      	bne.n	80039a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2204      	movs	r2, #4
 8003988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800398c:	88fa      	ldrh	r2, [r7, #6]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f8f1 	bl	8003b80 <HAL_SPI_TransmitReceive>
 800399e:	4603      	mov	r3, r0
 80039a0:	e0ea      	b.n	8003b78 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_SPI_Receive+0x52>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e0e3      	b.n	8003b78 <HAL_SPI_Receive+0x21a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b8:	f7fe fae4 	bl	8001f84 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d002      	beq.n	80039d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80039ca:	2302      	movs	r3, #2
 80039cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039ce:	e0ca      	b.n	8003b66 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_SPI_Receive+0x7e>
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039e0:	e0c1      	b.n	8003b66 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2204      	movs	r2, #4
 80039e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a28:	d10f      	bne.n	8003a4a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a54:	2b40      	cmp	r3, #64	@ 0x40
 8003a56:	d007      	beq.n	8003a68 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d162      	bne.n	8003b36 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a70:	e02e      	b.n	8003ad0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d115      	bne.n	8003aac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f103 020c 	add.w	r2, r3, #12
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8c:	7812      	ldrb	r2, [r2, #0]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003aaa:	e011      	b.n	8003ad0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aac:	f7fe fa6a 	bl	8001f84 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d803      	bhi.n	8003ac4 <HAL_SPI_Receive+0x166>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ac2:	d102      	bne.n	8003aca <HAL_SPI_Receive+0x16c>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ace:	e04a      	b.n	8003b66 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1cb      	bne.n	8003a72 <HAL_SPI_Receive+0x114>
 8003ada:	e031      	b.n	8003b40 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d113      	bne.n	8003b12 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	b292      	uxth	r2, r2
 8003af6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	1c9a      	adds	r2, r3, #2
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b10:	e011      	b.n	8003b36 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b12:	f7fe fa37 	bl	8001f84 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d803      	bhi.n	8003b2a <HAL_SPI_Receive+0x1cc>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b28:	d102      	bne.n	8003b30 <HAL_SPI_Receive+0x1d2>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b34:	e017      	b.n	8003b66 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1cd      	bne.n	8003adc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	6839      	ldr	r1, [r7, #0]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fe31 	bl	80047ac <SPI_EndRxTransaction>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
 8003b62:	e000      	b.n	8003b66 <HAL_SPI_Receive+0x208>
  }

error :
 8003b64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	@ 0x30
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x26>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e18a      	b.n	8003ebc <HAL_SPI_TransmitReceive+0x33c>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bae:	f7fe f9e9 	bl	8001f84 <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d00f      	beq.n	8003bf0 <HAL_SPI_TransmitReceive+0x70>
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bd6:	d107      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x68>
 8003be0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d003      	beq.n	8003bf0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003bee:	e15b      	b.n	8003ea8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_SPI_TransmitReceive+0x82>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_SPI_TransmitReceive+0x82>
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d103      	bne.n	8003c0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c08:	e14e      	b.n	8003ea8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d003      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2205      	movs	r2, #5
 8003c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	887a      	ldrh	r2, [r7, #2]
 8003c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	887a      	ldrh	r2, [r7, #2]
 8003c40:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	887a      	ldrh	r2, [r7, #2]
 8003c46:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5e:	2b40      	cmp	r3, #64	@ 0x40
 8003c60:	d007      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c7a:	d178      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_SPI_TransmitReceive+0x10a>
 8003c84:	8b7b      	ldrh	r3, [r7, #26]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d166      	bne.n	8003d58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8e:	881a      	ldrh	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cae:	e053      	b.n	8003d58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d11b      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x176>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d016      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x176>
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d113      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	881a      	ldrh	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d119      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x1b8>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d014      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	b292      	uxth	r2, r2
 8003d1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d20:	1c9a      	adds	r2, r3, #2
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d34:	2301      	movs	r3, #1
 8003d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d38:	f7fe f924 	bl	8001f84 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d807      	bhi.n	8003d58 <HAL_SPI_TransmitReceive+0x1d8>
 8003d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d4e:	d003      	beq.n	8003d58 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8003d56:	e0a7      	b.n	8003ea8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1a6      	bne.n	8003cb0 <HAL_SPI_TransmitReceive+0x130>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1a1      	bne.n	8003cb0 <HAL_SPI_TransmitReceive+0x130>
 8003d6c:	e07c      	b.n	8003e68 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_TransmitReceive+0x1fc>
 8003d76:	8b7b      	ldrh	r3, [r7, #26]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d16b      	bne.n	8003e54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	7812      	ldrb	r2, [r2, #0]
 8003d88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003da2:	e057      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d11c      	bne.n	8003dec <HAL_SPI_TransmitReceive+0x26c>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d017      	beq.n	8003dec <HAL_SPI_TransmitReceive+0x26c>
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d114      	bne.n	8003dec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	7812      	ldrb	r2, [r2, #0]
 8003dce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d119      	bne.n	8003e2e <HAL_SPI_TransmitReceive+0x2ae>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d014      	beq.n	8003e2e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e2e:	f7fe f8a9 	bl	8001f84 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d803      	bhi.n	8003e46 <HAL_SPI_TransmitReceive+0x2c6>
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e44:	d102      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x2cc>
 8003e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d103      	bne.n	8003e54 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8003e52:	e029      	b.n	8003ea8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1a2      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x224>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d19d      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fd03 	bl	8004878 <SPI_EndRxTxTransaction>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d006      	beq.n	8003e86 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003e84:	e010      	b.n	8003ea8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10b      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	e000      	b.n	8003ea8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ea6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3730      	adds	r7, #48	@ 0x30
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_SPI_Transmit_DMA+0x20>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e09b      	b.n	800401c <HAL_SPI_Transmit_DMA+0x158>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d002      	beq.n	8003efe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003efc:	e089      	b.n	8004012 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_SPI_Transmit_DMA+0x46>
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f0e:	e080      	b.n	8004012 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2203      	movs	r2, #3
 8003f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	88fa      	ldrh	r2, [r7, #6]
 8003f2e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f56:	d10f      	bne.n	8003f78 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7c:	4a29      	ldr	r2, [pc, #164]	@ (8004024 <HAL_SPI_Transmit_DMA+0x160>)
 8003f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	4a28      	ldr	r2, [pc, #160]	@ (8004028 <HAL_SPI_Transmit_DMA+0x164>)
 8003f86:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f8c:	4a27      	ldr	r2, [pc, #156]	@ (800402c <HAL_SPI_Transmit_DMA+0x168>)
 8003f8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f94:	2200      	movs	r2, #0
 8003f96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003fb0:	f7fe f9e6 	bl	8002380 <HAL_DMA_Start_IT>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbe:	f043 0210 	orr.w	r2, r3, #16
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8003fd2:	e01e      	b.n	8004012 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fde:	2b40      	cmp	r3, #64	@ 0x40
 8003fe0:	d007      	beq.n	8003ff2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0220 	orr.w	r2, r2, #32
 8004000:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0202 	orr.w	r2, r2, #2
 8004010:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800401a:	7dfb      	ldrb	r3, [r7, #23]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	08004609 	.word	0x08004609
 8004028:	08004429 	.word	0x08004429
 800402c:	0800465d 	.word	0x0800465d

08004030 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d110      	bne.n	800406c <HAL_SPI_Receive_DMA+0x3c>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004052:	d10b      	bne.n	800406c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2204      	movs	r2, #4
 8004058:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f8ac 	bl	80041c0 <HAL_SPI_TransmitReceive_DMA>
 8004068:	4603      	mov	r3, r0
 800406a:	e09f      	b.n	80041ac <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_SPI_Receive_DMA+0x4a>
 8004076:	2302      	movs	r3, #2
 8004078:	e098      	b.n	80041ac <HAL_SPI_Receive_DMA+0x17c>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	d002      	beq.n	8004094 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800408e:	2302      	movs	r3, #2
 8004090:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004092:	e086      	b.n	80041a2 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_SPI_Receive_DMA+0x70>
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040a4:	e07d      	b.n	80041a2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2204      	movs	r2, #4
 80040aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e6:	d10f      	bne.n	8004108 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004106:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410c:	4a29      	ldr	r2, [pc, #164]	@ (80041b4 <HAL_SPI_Receive_DMA+0x184>)
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004114:	4a28      	ldr	r2, [pc, #160]	@ (80041b8 <HAL_SPI_Receive_DMA+0x188>)
 8004116:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411c:	4a27      	ldr	r2, [pc, #156]	@ (80041bc <HAL_SPI_Receive_DMA+0x18c>)
 800411e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004124:	2200      	movs	r2, #0
 8004126:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	4619      	mov	r1, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004140:	f7fe f91e 	bl	8002380 <HAL_DMA_Start_IT>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00c      	beq.n	8004164 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	f043 0210 	orr.w	r2, r3, #16
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8004162:	e01e      	b.n	80041a2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416e:	2b40      	cmp	r3, #64	@ 0x40
 8004170:	d007      	beq.n	8004182 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004180:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0220 	orr.w	r2, r2, #32
 8004190:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	08004625 	.word	0x08004625
 80041b8:	080044d1 	.word	0x080044d1
 80041bc:	0800465d 	.word	0x0800465d

080041c0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80041dc:	2302      	movs	r3, #2
 80041de:	e0e3      	b.n	80043a8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80041f6:	7dbb      	ldrb	r3, [r7, #22]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d00d      	beq.n	8004218 <HAL_SPI_TransmitReceive_DMA+0x58>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004202:	d106      	bne.n	8004212 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <HAL_SPI_TransmitReceive_DMA+0x52>
 800420c:	7dbb      	ldrb	r3, [r7, #22]
 800420e:	2b04      	cmp	r3, #4
 8004210:	d002      	beq.n	8004218 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004212:	2302      	movs	r3, #2
 8004214:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004216:	e0c2      	b.n	800439e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d102      	bne.n	8004230 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800422e:	e0b6      	b.n	800439e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b04      	cmp	r3, #4
 800423a:	d003      	beq.n	8004244 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2205      	movs	r2, #5
 8004240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	887a      	ldrh	r2, [r7, #2]
 800425a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	887a      	ldrh	r2, [r7, #2]
 8004266:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b04      	cmp	r3, #4
 8004284:	d108      	bne.n	8004298 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	4a49      	ldr	r2, [pc, #292]	@ (80043b0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800428c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	4a48      	ldr	r2, [pc, #288]	@ (80043b4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004294:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004296:	e007      	b.n	80042a8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429c:	4a46      	ldr	r2, [pc, #280]	@ (80043b8 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800429e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a4:	4a45      	ldr	r2, [pc, #276]	@ (80043bc <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80042a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ac:	4a44      	ldr	r2, [pc, #272]	@ (80043c0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80042ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b4:	2200      	movs	r2, #0
 80042b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	4619      	mov	r1, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042d0:	f7fe f856 	bl	8002380 <HAL_DMA_Start_IT>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042de:	f043 0210 	orr.w	r2, r3, #16
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80042f2:	e054      	b.n	800439e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004308:	2200      	movs	r2, #0
 800430a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004310:	2200      	movs	r2, #0
 8004312:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004318:	2200      	movs	r2, #0
 800431a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004320:	2200      	movs	r2, #0
 8004322:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	4619      	mov	r1, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800433a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800433c:	f7fe f820 	bl	8002380 <HAL_DMA_Start_IT>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434a:	f043 0210 	orr.w	r2, r3, #16
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 800435e:	e01e      	b.n	800439e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436a:	2b40      	cmp	r3, #64	@ 0x40
 800436c:	d007      	beq.n	800437e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800437c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0220 	orr.w	r2, r2, #32
 800438c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0202 	orr.w	r2, r2, #2
 800439c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	08004625 	.word	0x08004625
 80043b4:	080044d1 	.word	0x080044d1
 80043b8:	08004641 	.word	0x08004641
 80043bc:	08004579 	.word	0x08004579
 80043c0:	0800465d 	.word	0x0800465d

080043c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004436:	f7fd fda5 	bl	8001f84 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800444a:	d03b      	beq.n	80044c4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0220 	bic.w	r2, r2, #32
 800445a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0202 	bic.w	r2, r2, #2
 800446a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	2164      	movs	r1, #100	@ 0x64
 8004470:	6978      	ldr	r0, [r7, #20]
 8004472:	f000 fa01 	bl	8004878 <SPI_EndRxTxTransaction>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2200      	movs	r2, #0
 80044aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80044bc:	6978      	ldr	r0, [r7, #20]
 80044be:	f7ff ffa9 	bl	8004414 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80044c2:	e002      	b.n	80044ca <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80044c4:	6978      	ldr	r0, [r7, #20]
 80044c6:	f7fd f825 	bl	8001514 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044de:	f7fd fd51 	bl	8001f84 <HAL_GetTick>
 80044e2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f2:	d03b      	beq.n	800456c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0220 	bic.w	r2, r2, #32
 8004502:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10d      	bne.n	8004528 <SPI_DMAReceiveCplt+0x58>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004514:	d108      	bne.n	8004528 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0203 	bic.w	r2, r2, #3
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	e007      	b.n	8004538 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	2164      	movs	r1, #100	@ 0x64
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f935 	bl	80047ac <SPI_EndRxTransaction>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff ff55 	bl	8004414 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800456a:	e002      	b.n	8004572 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7fc ffe1 	bl	8001534 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004584:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004586:	f7fd fcfd 	bl	8001f84 <HAL_GetTick>
 800458a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459a:	d02f      	beq.n	80045fc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0220 	bic.w	r2, r2, #32
 80045aa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	2164      	movs	r1, #100	@ 0x64
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f961 	bl	8004878 <SPI_EndRxTxTransaction>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0203 	bic.w	r2, r2, #3
 80045d6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff ff0d 	bl	8004414 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80045fa:	e002      	b.n	8004602 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff fee1 	bl	80043c4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff fede 	bl	80043d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004630:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f7ff feda 	bl	80043ec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff fed6 	bl	8004400 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0203 	bic.w	r2, r2, #3
 8004678:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467e:	f043 0210 	orr.w	r2, r3, #16
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff fec0 	bl	8004414 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046ac:	f7fd fc6a 	bl	8001f84 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	4413      	add	r3, r2
 80046ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046bc:	f7fd fc62 	bl	8001f84 <HAL_GetTick>
 80046c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046c2:	4b39      	ldr	r3, [pc, #228]	@ (80047a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	015b      	lsls	r3, r3, #5
 80046c8:	0d1b      	lsrs	r3, r3, #20
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046d2:	e054      	b.n	800477e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046da:	d050      	beq.n	800477e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046dc:	f7fd fc52 	bl	8001f84 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d902      	bls.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d13d      	bne.n	800476e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800470a:	d111      	bne.n	8004730 <SPI_WaitFlagStateUntilTimeout+0x94>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004714:	d004      	beq.n	8004720 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800471e:	d107      	bne.n	8004730 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800472e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004738:	d10f      	bne.n	800475a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e017      	b.n	800479e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	3b01      	subs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	429a      	cmp	r2, r3
 800479a:	d19b      	bne.n	80046d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3720      	adds	r7, #32
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000000 	.word	0x20000000

080047ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047c0:	d111      	bne.n	80047e6 <SPI_EndRxTransaction+0x3a>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ca:	d004      	beq.n	80047d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d4:	d107      	bne.n	80047e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ee:	d12a      	bne.n	8004846 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f8:	d012      	beq.n	8004820 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	2180      	movs	r1, #128	@ 0x80
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff ff49 	bl	800469c <SPI_WaitFlagStateUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02d      	beq.n	800486c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e026      	b.n	800486e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2200      	movs	r2, #0
 8004828:	2101      	movs	r1, #1
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff ff36 	bl	800469c <SPI_WaitFlagStateUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01a      	beq.n	800486c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483a:	f043 0220 	orr.w	r2, r3, #32
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e013      	b.n	800486e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2200      	movs	r2, #0
 800484e:	2101      	movs	r1, #1
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff ff23 	bl	800469c <SPI_WaitFlagStateUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e000      	b.n	800486e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004884:	4b1b      	ldr	r3, [pc, #108]	@ (80048f4 <SPI_EndRxTxTransaction+0x7c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1b      	ldr	r2, [pc, #108]	@ (80048f8 <SPI_EndRxTxTransaction+0x80>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	0d5b      	lsrs	r3, r3, #21
 8004890:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004894:	fb02 f303 	mul.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048a2:	d112      	bne.n	80048ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	2180      	movs	r1, #128	@ 0x80
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff fef4 	bl	800469c <SPI_WaitFlagStateUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e00f      	b.n	80048ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e0:	2b80      	cmp	r3, #128	@ 0x80
 80048e2:	d0f2      	beq.n	80048ca <SPI_EndRxTxTransaction+0x52>
 80048e4:	e000      	b.n	80048e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80048e6:	bf00      	nop
  }

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000000 	.word	0x20000000
 80048f8:	165e9f81 	.word	0x165e9f81

080048fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e041      	b.n	8004992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fd f908 	bl	8001b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f000 f9f0 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d001      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e044      	b.n	8004a3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a4c <HAL_TIM_Base_Start_IT+0xb0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d018      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x6c>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049de:	d013      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x6c>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a50 <HAL_TIM_Base_Start_IT+0xb4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x6c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a19      	ldr	r2, [pc, #100]	@ (8004a54 <HAL_TIM_Base_Start_IT+0xb8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x6c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a17      	ldr	r2, [pc, #92]	@ (8004a58 <HAL_TIM_Base_Start_IT+0xbc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x6c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a16      	ldr	r2, [pc, #88]	@ (8004a5c <HAL_TIM_Base_Start_IT+0xc0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d111      	bne.n	8004a2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d010      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	e007      	b.n	8004a3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40000c00 	.word	0x40000c00
 8004a5c:	40014000 	.word	0x40014000

08004a60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6a1a      	ldr	r2, [r3, #32]
 8004a7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10f      	bne.n	8004aa8 <HAL_TIM_Base_Stop_IT+0x48>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d107      	bne.n	8004aa8 <HAL_TIM_Base_Stop_IT+0x48>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d122      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d11b      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f06f 0202 	mvn.w	r2, #2
 8004aea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f8ee 	bl	8004ce2 <HAL_TIM_IC_CaptureCallback>
 8004b06:	e005      	b.n	8004b14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f8e0 	bl	8004cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f8f1 	bl	8004cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d122      	bne.n	8004b6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d11b      	bne.n	8004b6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f06f 0204 	mvn.w	r2, #4
 8004b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f8c4 	bl	8004ce2 <HAL_TIM_IC_CaptureCallback>
 8004b5a:	e005      	b.n	8004b68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8b6 	bl	8004cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8c7 	bl	8004cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d122      	bne.n	8004bc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d11b      	bne.n	8004bc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f06f 0208 	mvn.w	r2, #8
 8004b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2204      	movs	r2, #4
 8004b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f89a 	bl	8004ce2 <HAL_TIM_IC_CaptureCallback>
 8004bae:	e005      	b.n	8004bbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f88c 	bl	8004cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f89d 	bl	8004cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d122      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d11b      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f06f 0210 	mvn.w	r2, #16
 8004be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2208      	movs	r2, #8
 8004bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f870 	bl	8004ce2 <HAL_TIM_IC_CaptureCallback>
 8004c02:	e005      	b.n	8004c10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f862 	bl	8004cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f873 	bl	8004cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10e      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0201 	mvn.w	r2, #1
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fc fdbb 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4c:	2b80      	cmp	r3, #128	@ 0x80
 8004c4e:	d10e      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b80      	cmp	r3, #128	@ 0x80
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8e3 	bl	8004e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c78:	2b40      	cmp	r3, #64	@ 0x40
 8004c7a:	d10e      	bne.n	8004c9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c86:	2b40      	cmp	r3, #64	@ 0x40
 8004c88:	d107      	bne.n	8004c9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f838 	bl	8004d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d10e      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d107      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f06f 0220 	mvn.w	r2, #32
 8004cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f8ad 	bl	8004e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a34      	ldr	r2, [pc, #208]	@ (8004e04 <TIM_Base_SetConfig+0xe4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00f      	beq.n	8004d58 <TIM_Base_SetConfig+0x38>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3e:	d00b      	beq.n	8004d58 <TIM_Base_SetConfig+0x38>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a31      	ldr	r2, [pc, #196]	@ (8004e08 <TIM_Base_SetConfig+0xe8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_Base_SetConfig+0x38>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a30      	ldr	r2, [pc, #192]	@ (8004e0c <TIM_Base_SetConfig+0xec>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0x38>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a2f      	ldr	r2, [pc, #188]	@ (8004e10 <TIM_Base_SetConfig+0xf0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d108      	bne.n	8004d6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a25      	ldr	r2, [pc, #148]	@ (8004e04 <TIM_Base_SetConfig+0xe4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01b      	beq.n	8004daa <TIM_Base_SetConfig+0x8a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d78:	d017      	beq.n	8004daa <TIM_Base_SetConfig+0x8a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <TIM_Base_SetConfig+0xe8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <TIM_Base_SetConfig+0x8a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a21      	ldr	r2, [pc, #132]	@ (8004e0c <TIM_Base_SetConfig+0xec>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00f      	beq.n	8004daa <TIM_Base_SetConfig+0x8a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a20      	ldr	r2, [pc, #128]	@ (8004e10 <TIM_Base_SetConfig+0xf0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00b      	beq.n	8004daa <TIM_Base_SetConfig+0x8a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1f      	ldr	r2, [pc, #124]	@ (8004e14 <TIM_Base_SetConfig+0xf4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d007      	beq.n	8004daa <TIM_Base_SetConfig+0x8a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e18 <TIM_Base_SetConfig+0xf8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d003      	beq.n	8004daa <TIM_Base_SetConfig+0x8a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e1c <TIM_Base_SetConfig+0xfc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d108      	bne.n	8004dbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a08      	ldr	r2, [pc, #32]	@ (8004e04 <TIM_Base_SetConfig+0xe4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d103      	bne.n	8004df0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	615a      	str	r2, [r3, #20]
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40000400 	.word	0x40000400
 8004e0c:	40000800 	.word	0x40000800
 8004e10:	40000c00 	.word	0x40000c00
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40014400 	.word	0x40014400
 8004e1c:	40014800 	.word	0x40014800

08004e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e03f      	b.n	8004eda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc fe8a 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	@ 0x24
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f929 	bl	80050e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b08a      	sub	sp, #40	@ 0x28
 8004ee6:	af02      	add	r7, sp, #8
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d17c      	bne.n	8004ffc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_UART_Transmit+0x2c>
 8004f08:	88fb      	ldrh	r3, [r7, #6]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e075      	b.n	8004ffe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_UART_Transmit+0x3e>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e06e      	b.n	8004ffe <HAL_UART_Transmit+0x11c>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2221      	movs	r2, #33	@ 0x21
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f36:	f7fd f825 	bl	8001f84 <HAL_GetTick>
 8004f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	88fa      	ldrh	r2, [r7, #6]
 8004f40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	88fa      	ldrh	r2, [r7, #6]
 8004f46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f50:	d108      	bne.n	8004f64 <HAL_UART_Transmit+0x82>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d104      	bne.n	8004f64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	e003      	b.n	8004f6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004f74:	e02a      	b.n	8004fcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2180      	movs	r1, #128	@ 0x80
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f840 	bl	8005006 <UART_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e036      	b.n	8004ffe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	3302      	adds	r3, #2
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	e007      	b.n	8004fbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	781a      	ldrb	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1cf      	bne.n	8004f76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2140      	movs	r1, #64	@ 0x40
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f810 	bl	8005006 <UART_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e006      	b.n	8004ffe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b090      	sub	sp, #64	@ 0x40
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	4613      	mov	r3, r2
 8005014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005016:	e050      	b.n	80050ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800501e:	d04c      	beq.n	80050ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <UART_WaitOnFlagUntilTimeout+0x30>
 8005026:	f7fc ffad 	bl	8001f84 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005032:	429a      	cmp	r2, r3
 8005034:	d241      	bcs.n	80050ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	330c      	adds	r3, #12
 800503c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800504c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	330c      	adds	r3, #12
 8005054:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005056:	637a      	str	r2, [r7, #52]	@ 0x34
 8005058:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800505c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e5      	bne.n	8005036 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3314      	adds	r3, #20
 8005070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	613b      	str	r3, [r7, #16]
   return(result);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3314      	adds	r3, #20
 8005088:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800508a:	623a      	str	r2, [r7, #32]
 800508c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	69f9      	ldr	r1, [r7, #28]
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	61bb      	str	r3, [r7, #24]
   return(result);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e5      	bne.n	800506a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e00f      	b.n	80050da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4013      	ands	r3, r2
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	bf0c      	ite	eq
 80050ca:	2301      	moveq	r3, #1
 80050cc:	2300      	movne	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d09f      	beq.n	8005018 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3740      	adds	r7, #64	@ 0x40
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e8:	b0c0      	sub	sp, #256	@ 0x100
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	68d9      	ldr	r1, [r3, #12]
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	ea40 0301 	orr.w	r3, r0, r1
 800510c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	431a      	orrs	r2, r3
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	431a      	orrs	r2, r3
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800513c:	f021 010c 	bic.w	r1, r1, #12
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800514a:	430b      	orrs	r3, r1
 800514c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515e:	6999      	ldr	r1, [r3, #24]
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	ea40 0301 	orr.w	r3, r0, r1
 800516a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b8f      	ldr	r3, [pc, #572]	@ (80053b0 <UART_SetConfig+0x2cc>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d005      	beq.n	8005184 <UART_SetConfig+0xa0>
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b8d      	ldr	r3, [pc, #564]	@ (80053b4 <UART_SetConfig+0x2d0>)
 8005180:	429a      	cmp	r2, r3
 8005182:	d104      	bne.n	800518e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7fe fa12 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8005188:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800518c:	e003      	b.n	8005196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800518e:	f7fe f9f9 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8005192:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a0:	f040 810c 	bne.w	80053bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80051b6:	4622      	mov	r2, r4
 80051b8:	462b      	mov	r3, r5
 80051ba:	1891      	adds	r1, r2, r2
 80051bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051be:	415b      	adcs	r3, r3
 80051c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051c6:	4621      	mov	r1, r4
 80051c8:	eb12 0801 	adds.w	r8, r2, r1
 80051cc:	4629      	mov	r1, r5
 80051ce:	eb43 0901 	adc.w	r9, r3, r1
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051e6:	4690      	mov	r8, r2
 80051e8:	4699      	mov	r9, r3
 80051ea:	4623      	mov	r3, r4
 80051ec:	eb18 0303 	adds.w	r3, r8, r3
 80051f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051f4:	462b      	mov	r3, r5
 80051f6:	eb49 0303 	adc.w	r3, r9, r3
 80051fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800520a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800520e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005212:	460b      	mov	r3, r1
 8005214:	18db      	adds	r3, r3, r3
 8005216:	653b      	str	r3, [r7, #80]	@ 0x50
 8005218:	4613      	mov	r3, r2
 800521a:	eb42 0303 	adc.w	r3, r2, r3
 800521e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005228:	f7fb fd36 	bl	8000c98 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4b61      	ldr	r3, [pc, #388]	@ (80053b8 <UART_SetConfig+0x2d4>)
 8005232:	fba3 2302 	umull	r2, r3, r3, r2
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	011c      	lsls	r4, r3, #4
 800523a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800523e:	2200      	movs	r2, #0
 8005240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005244:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800524c:	4642      	mov	r2, r8
 800524e:	464b      	mov	r3, r9
 8005250:	1891      	adds	r1, r2, r2
 8005252:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005254:	415b      	adcs	r3, r3
 8005256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800525c:	4641      	mov	r1, r8
 800525e:	eb12 0a01 	adds.w	sl, r2, r1
 8005262:	4649      	mov	r1, r9
 8005264:	eb43 0b01 	adc.w	fp, r3, r1
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800527c:	4692      	mov	sl, r2
 800527e:	469b      	mov	fp, r3
 8005280:	4643      	mov	r3, r8
 8005282:	eb1a 0303 	adds.w	r3, sl, r3
 8005286:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800528a:	464b      	mov	r3, r9
 800528c:	eb4b 0303 	adc.w	r3, fp, r3
 8005290:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052a8:	460b      	mov	r3, r1
 80052aa:	18db      	adds	r3, r3, r3
 80052ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80052ae:	4613      	mov	r3, r2
 80052b0:	eb42 0303 	adc.w	r3, r2, r3
 80052b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052be:	f7fb fceb 	bl	8000c98 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	4b3b      	ldr	r3, [pc, #236]	@ (80053b8 <UART_SetConfig+0x2d4>)
 80052ca:	fba3 2301 	umull	r2, r3, r3, r1
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2264      	movs	r2, #100	@ 0x64
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	1acb      	subs	r3, r1, r3
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052de:	4b36      	ldr	r3, [pc, #216]	@ (80053b8 <UART_SetConfig+0x2d4>)
 80052e0:	fba3 2302 	umull	r2, r3, r3, r2
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052ec:	441c      	add	r4, r3
 80052ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005300:	4642      	mov	r2, r8
 8005302:	464b      	mov	r3, r9
 8005304:	1891      	adds	r1, r2, r2
 8005306:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005308:	415b      	adcs	r3, r3
 800530a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800530c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005310:	4641      	mov	r1, r8
 8005312:	1851      	adds	r1, r2, r1
 8005314:	6339      	str	r1, [r7, #48]	@ 0x30
 8005316:	4649      	mov	r1, r9
 8005318:	414b      	adcs	r3, r1
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005328:	4659      	mov	r1, fp
 800532a:	00cb      	lsls	r3, r1, #3
 800532c:	4651      	mov	r1, sl
 800532e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005332:	4651      	mov	r1, sl
 8005334:	00ca      	lsls	r2, r1, #3
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	4603      	mov	r3, r0
 800533c:	4642      	mov	r2, r8
 800533e:	189b      	adds	r3, r3, r2
 8005340:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005344:	464b      	mov	r3, r9
 8005346:	460a      	mov	r2, r1
 8005348:	eb42 0303 	adc.w	r3, r2, r3
 800534c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800535c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005364:	460b      	mov	r3, r1
 8005366:	18db      	adds	r3, r3, r3
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800536a:	4613      	mov	r3, r2
 800536c:	eb42 0303 	adc.w	r3, r2, r3
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800537a:	f7fb fc8d 	bl	8000c98 <__aeabi_uldivmod>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <UART_SetConfig+0x2d4>)
 8005384:	fba3 1302 	umull	r1, r3, r3, r2
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	2164      	movs	r1, #100	@ 0x64
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	3332      	adds	r3, #50	@ 0x32
 8005396:	4a08      	ldr	r2, [pc, #32]	@ (80053b8 <UART_SetConfig+0x2d4>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	f003 0207 	and.w	r2, r3, #7
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4422      	add	r2, r4
 80053aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053ac:	e106      	b.n	80055bc <UART_SetConfig+0x4d8>
 80053ae:	bf00      	nop
 80053b0:	40011000 	.word	0x40011000
 80053b4:	40011400 	.word	0x40011400
 80053b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80053ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80053ce:	4642      	mov	r2, r8
 80053d0:	464b      	mov	r3, r9
 80053d2:	1891      	adds	r1, r2, r2
 80053d4:	6239      	str	r1, [r7, #32]
 80053d6:	415b      	adcs	r3, r3
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053de:	4641      	mov	r1, r8
 80053e0:	1854      	adds	r4, r2, r1
 80053e2:	4649      	mov	r1, r9
 80053e4:	eb43 0501 	adc.w	r5, r3, r1
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	00eb      	lsls	r3, r5, #3
 80053f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053f6:	00e2      	lsls	r2, r4, #3
 80053f8:	4614      	mov	r4, r2
 80053fa:	461d      	mov	r5, r3
 80053fc:	4643      	mov	r3, r8
 80053fe:	18e3      	adds	r3, r4, r3
 8005400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005404:	464b      	mov	r3, r9
 8005406:	eb45 0303 	adc.w	r3, r5, r3
 800540a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800541a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800542a:	4629      	mov	r1, r5
 800542c:	008b      	lsls	r3, r1, #2
 800542e:	4621      	mov	r1, r4
 8005430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005434:	4621      	mov	r1, r4
 8005436:	008a      	lsls	r2, r1, #2
 8005438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800543c:	f7fb fc2c 	bl	8000c98 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4b60      	ldr	r3, [pc, #384]	@ (80055c8 <UART_SetConfig+0x4e4>)
 8005446:	fba3 2302 	umull	r2, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	011c      	lsls	r4, r3, #4
 800544e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005452:	2200      	movs	r2, #0
 8005454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005458:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800545c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005460:	4642      	mov	r2, r8
 8005462:	464b      	mov	r3, r9
 8005464:	1891      	adds	r1, r2, r2
 8005466:	61b9      	str	r1, [r7, #24]
 8005468:	415b      	adcs	r3, r3
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005470:	4641      	mov	r1, r8
 8005472:	1851      	adds	r1, r2, r1
 8005474:	6139      	str	r1, [r7, #16]
 8005476:	4649      	mov	r1, r9
 8005478:	414b      	adcs	r3, r1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005488:	4659      	mov	r1, fp
 800548a:	00cb      	lsls	r3, r1, #3
 800548c:	4651      	mov	r1, sl
 800548e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005492:	4651      	mov	r1, sl
 8005494:	00ca      	lsls	r2, r1, #3
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	4603      	mov	r3, r0
 800549c:	4642      	mov	r2, r8
 800549e:	189b      	adds	r3, r3, r2
 80054a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054a4:	464b      	mov	r3, r9
 80054a6:	460a      	mov	r2, r1
 80054a8:	eb42 0303 	adc.w	r3, r2, r3
 80054ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80054c8:	4649      	mov	r1, r9
 80054ca:	008b      	lsls	r3, r1, #2
 80054cc:	4641      	mov	r1, r8
 80054ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d2:	4641      	mov	r1, r8
 80054d4:	008a      	lsls	r2, r1, #2
 80054d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054da:	f7fb fbdd 	bl	8000c98 <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	4b38      	ldr	r3, [pc, #224]	@ (80055c8 <UART_SetConfig+0x4e4>)
 80054e6:	fba3 2301 	umull	r2, r3, r3, r1
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	2264      	movs	r2, #100	@ 0x64
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	1acb      	subs	r3, r1, r3
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	3332      	adds	r3, #50	@ 0x32
 80054f8:	4a33      	ldr	r2, [pc, #204]	@ (80055c8 <UART_SetConfig+0x4e4>)
 80054fa:	fba2 2303 	umull	r2, r3, r2, r3
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005504:	441c      	add	r4, r3
 8005506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550a:	2200      	movs	r2, #0
 800550c:	673b      	str	r3, [r7, #112]	@ 0x70
 800550e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005510:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005514:	4642      	mov	r2, r8
 8005516:	464b      	mov	r3, r9
 8005518:	1891      	adds	r1, r2, r2
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	415b      	adcs	r3, r3
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005524:	4641      	mov	r1, r8
 8005526:	1851      	adds	r1, r2, r1
 8005528:	6039      	str	r1, [r7, #0]
 800552a:	4649      	mov	r1, r9
 800552c:	414b      	adcs	r3, r1
 800552e:	607b      	str	r3, [r7, #4]
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800553c:	4659      	mov	r1, fp
 800553e:	00cb      	lsls	r3, r1, #3
 8005540:	4651      	mov	r1, sl
 8005542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005546:	4651      	mov	r1, sl
 8005548:	00ca      	lsls	r2, r1, #3
 800554a:	4610      	mov	r0, r2
 800554c:	4619      	mov	r1, r3
 800554e:	4603      	mov	r3, r0
 8005550:	4642      	mov	r2, r8
 8005552:	189b      	adds	r3, r3, r2
 8005554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005556:	464b      	mov	r3, r9
 8005558:	460a      	mov	r2, r1
 800555a:	eb42 0303 	adc.w	r3, r2, r3
 800555e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	663b      	str	r3, [r7, #96]	@ 0x60
 800556a:	667a      	str	r2, [r7, #100]	@ 0x64
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005578:	4649      	mov	r1, r9
 800557a:	008b      	lsls	r3, r1, #2
 800557c:	4641      	mov	r1, r8
 800557e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005582:	4641      	mov	r1, r8
 8005584:	008a      	lsls	r2, r1, #2
 8005586:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800558a:	f7fb fb85 	bl	8000c98 <__aeabi_uldivmod>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4b0d      	ldr	r3, [pc, #52]	@ (80055c8 <UART_SetConfig+0x4e4>)
 8005594:	fba3 1302 	umull	r1, r3, r3, r2
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	2164      	movs	r1, #100	@ 0x64
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	3332      	adds	r3, #50	@ 0x32
 80055a6:	4a08      	ldr	r2, [pc, #32]	@ (80055c8 <UART_SetConfig+0x4e4>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	f003 020f 	and.w	r2, r3, #15
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4422      	add	r2, r4
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	bf00      	nop
 80055be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055c2:	46bd      	mov	sp, r7
 80055c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c8:	51eb851f 	.word	0x51eb851f

080055cc <__NVIC_SetPriority>:
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	6039      	str	r1, [r7, #0]
 80055d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	db0a      	blt.n	80055f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	490c      	ldr	r1, [pc, #48]	@ (8005618 <__NVIC_SetPriority+0x4c>)
 80055e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ea:	0112      	lsls	r2, r2, #4
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	440b      	add	r3, r1
 80055f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80055f4:	e00a      	b.n	800560c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	4908      	ldr	r1, [pc, #32]	@ (800561c <__NVIC_SetPriority+0x50>)
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	3b04      	subs	r3, #4
 8005604:	0112      	lsls	r2, r2, #4
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	440b      	add	r3, r1
 800560a:	761a      	strb	r2, [r3, #24]
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	e000e100 	.word	0xe000e100
 800561c:	e000ed00 	.word	0xe000ed00

08005620 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005624:	2100      	movs	r1, #0
 8005626:	f06f 0004 	mvn.w	r0, #4
 800562a:	f7ff ffcf 	bl	80055cc <__NVIC_SetPriority>
#endif
}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800563a:	f3ef 8305 	mrs	r3, IPSR
 800563e:	603b      	str	r3, [r7, #0]
  return(result);
 8005640:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005646:	f06f 0305 	mvn.w	r3, #5
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	e00c      	b.n	8005668 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800564e:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <osKernelInitialize+0x44>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d105      	bne.n	8005662 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005656:	4b08      	ldr	r3, [pc, #32]	@ (8005678 <osKernelInitialize+0x44>)
 8005658:	2201      	movs	r2, #1
 800565a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800565c:	2300      	movs	r3, #0
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	e002      	b.n	8005668 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005668:	687b      	ldr	r3, [r7, #4]
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20000cb8 	.word	0x20000cb8

0800567c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005682:	f3ef 8305 	mrs	r3, IPSR
 8005686:	603b      	str	r3, [r7, #0]
  return(result);
 8005688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <osKernelStart+0x1a>
    stat = osErrorISR;
 800568e:	f06f 0305 	mvn.w	r3, #5
 8005692:	607b      	str	r3, [r7, #4]
 8005694:	e010      	b.n	80056b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <osKernelStart+0x48>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d109      	bne.n	80056b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800569e:	f7ff ffbf 	bl	8005620 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056a2:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <osKernelStart+0x48>)
 80056a4:	2202      	movs	r2, #2
 80056a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056a8:	f001 fcc8 	bl	800703c <vTaskStartScheduler>
      stat = osOK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	607b      	str	r3, [r7, #4]
 80056b0:	e002      	b.n	80056b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056b8:	687b      	ldr	r3, [r7, #4]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000cb8 	.word	0x20000cb8

080056c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	@ 0x38
 80056cc:	af04      	add	r7, sp, #16
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d8:	f3ef 8305 	mrs	r3, IPSR
 80056dc:	617b      	str	r3, [r7, #20]
  return(result);
 80056de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d17e      	bne.n	80057e2 <osThreadNew+0x11a>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d07b      	beq.n	80057e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80056ea:	2380      	movs	r3, #128	@ 0x80
 80056ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056ee:	2318      	movs	r3, #24
 80056f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80056f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d045      	beq.n	800578e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <osThreadNew+0x48>
        name = attr->name;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <osThreadNew+0x6e>
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b38      	cmp	r3, #56	@ 0x38
 8005728:	d805      	bhi.n	8005736 <osThreadNew+0x6e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <osThreadNew+0x72>
        return (NULL);
 8005736:	2300      	movs	r3, #0
 8005738:	e054      	b.n	80057e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	089b      	lsrs	r3, r3, #2
 8005748:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00e      	beq.n	8005770 <osThreadNew+0xa8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2ba7      	cmp	r3, #167	@ 0xa7
 8005758:	d90a      	bls.n	8005770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800575e:	2b00      	cmp	r3, #0
 8005760:	d006      	beq.n	8005770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <osThreadNew+0xa8>
        mem = 1;
 800576a:	2301      	movs	r3, #1
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	e010      	b.n	8005792 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10c      	bne.n	8005792 <osThreadNew+0xca>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d108      	bne.n	8005792 <osThreadNew+0xca>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d104      	bne.n	8005792 <osThreadNew+0xca>
          mem = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e001      	b.n	8005792 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d110      	bne.n	80057ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057a0:	9202      	str	r2, [sp, #8]
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6a3a      	ldr	r2, [r7, #32]
 80057ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f001 fa50 	bl	8006c54 <xTaskCreateStatic>
 80057b4:	4603      	mov	r3, r0
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	e013      	b.n	80057e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d110      	bne.n	80057e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	f107 0310 	add.w	r3, r7, #16
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f001 fa9e 	bl	8006d14 <xTaskCreate>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d001      	beq.n	80057e2 <osThreadNew+0x11a>
            hTask = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057e2:	693b      	ldr	r3, [r7, #16]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3728      	adds	r7, #40	@ 0x28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	@ 0x28
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057fc:	f3ef 8305 	mrs	r3, IPSR
 8005800:	613b      	str	r3, [r7, #16]
  return(result);
 8005802:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005804:	2b00      	cmp	r3, #0
 8005806:	d175      	bne.n	80058f4 <osSemaphoreNew+0x108>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d072      	beq.n	80058f4 <osSemaphoreNew+0x108>
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	429a      	cmp	r2, r3
 8005814:	d86e      	bhi.n	80058f4 <osSemaphoreNew+0x108>
    mem = -1;
 8005816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800581a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d015      	beq.n	800584e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d006      	beq.n	8005838 <osSemaphoreNew+0x4c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005830:	d902      	bls.n	8005838 <osSemaphoreNew+0x4c>
        mem = 1;
 8005832:	2301      	movs	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e00c      	b.n	8005852 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d108      	bne.n	8005852 <osSemaphoreNew+0x66>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d104      	bne.n	8005852 <osSemaphoreNew+0x66>
          mem = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]
 800584c:	e001      	b.n	8005852 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005858:	d04c      	beq.n	80058f4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d128      	bne.n	80058b2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d10a      	bne.n	800587c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2203      	movs	r2, #3
 800586c:	9200      	str	r2, [sp, #0]
 800586e:	2200      	movs	r2, #0
 8005870:	2100      	movs	r1, #0
 8005872:	2001      	movs	r0, #1
 8005874:	f000 fa2c 	bl	8005cd0 <xQueueGenericCreateStatic>
 8005878:	61f8      	str	r0, [r7, #28]
 800587a:	e005      	b.n	8005888 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800587c:	2203      	movs	r2, #3
 800587e:	2100      	movs	r1, #0
 8005880:	2001      	movs	r0, #1
 8005882:	f000 faa2 	bl	8005dca <xQueueGenericCreate>
 8005886:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d022      	beq.n	80058d4 <osSemaphoreNew+0xe8>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01f      	beq.n	80058d4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005894:	2300      	movs	r3, #0
 8005896:	2200      	movs	r2, #0
 8005898:	2100      	movs	r1, #0
 800589a:	69f8      	ldr	r0, [r7, #28]
 800589c:	f000 fb62 	bl	8005f64 <xQueueGenericSend>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d016      	beq.n	80058d4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80058a6:	69f8      	ldr	r0, [r7, #28]
 80058a8:	f001 f800 	bl	80068ac <vQueueDelete>
            hSemaphore = NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	e010      	b.n	80058d4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d108      	bne.n	80058ca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	461a      	mov	r2, r3
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fae0 	bl	8005e86 <xQueueCreateCountingSemaphoreStatic>
 80058c6:	61f8      	str	r0, [r7, #28]
 80058c8:	e004      	b.n	80058d4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fb13 	bl	8005ef8 <xQueueCreateCountingSemaphore>
 80058d2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	e001      	b.n	80058ec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80058ec:	6979      	ldr	r1, [r7, #20]
 80058ee:	69f8      	ldr	r0, [r7, #28]
 80058f0:	f001 f928 	bl	8006b44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80058f4:	69fb      	ldr	r3, [r7, #28]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005918:	f06f 0303 	mvn.w	r3, #3
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e039      	b.n	8005994 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005920:	f3ef 8305 	mrs	r3, IPSR
 8005924:	60fb      	str	r3, [r7, #12]
  return(result);
 8005926:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005928:	2b00      	cmp	r3, #0
 800592a:	d022      	beq.n	8005972 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005932:	f06f 0303 	mvn.w	r3, #3
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e02c      	b.n	8005994 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800593a:	2300      	movs	r3, #0
 800593c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800593e:	f107 0308 	add.w	r3, r7, #8
 8005942:	461a      	mov	r2, r3
 8005944:	2100      	movs	r1, #0
 8005946:	6938      	ldr	r0, [r7, #16]
 8005948:	f000 ff2e 	bl	80067a8 <xQueueReceiveFromISR>
 800594c:	4603      	mov	r3, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	d003      	beq.n	800595a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005952:	f06f 0302 	mvn.w	r3, #2
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	e01c      	b.n	8005994 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d019      	beq.n	8005994 <osSemaphoreAcquire+0x94>
 8005960:	4b0f      	ldr	r3, [pc, #60]	@ (80059a0 <osSemaphoreAcquire+0xa0>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	e010      	b.n	8005994 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6938      	ldr	r0, [r7, #16]
 8005976:	f000 fe07 	bl	8006588 <xQueueSemaphoreTake>
 800597a:	4603      	mov	r3, r0
 800597c:	2b01      	cmp	r3, #1
 800597e:	d009      	beq.n	8005994 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005986:	f06f 0301 	mvn.w	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e002      	b.n	8005994 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800598e:	f06f 0302 	mvn.w	r3, #2
 8005992:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005994:	697b      	ldr	r3, [r7, #20]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80059ba:	f06f 0303 	mvn.w	r3, #3
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e02c      	b.n	8005a1c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c2:	f3ef 8305 	mrs	r3, IPSR
 80059c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80059c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01a      	beq.n	8005a04 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	4619      	mov	r1, r3
 80059d8:	6938      	ldr	r0, [r7, #16]
 80059da:	f000 fc63 	bl	80062a4 <xQueueGiveFromISR>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d003      	beq.n	80059ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80059e4:	f06f 0302 	mvn.w	r3, #2
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	e017      	b.n	8005a1c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d014      	beq.n	8005a1c <osSemaphoreRelease+0x78>
 80059f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005a28 <osSemaphoreRelease+0x84>)
 80059f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	e00b      	b.n	8005a1c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a04:	2300      	movs	r3, #0
 8005a06:	2200      	movs	r2, #0
 8005a08:	2100      	movs	r1, #0
 8005a0a:	6938      	ldr	r0, [r7, #16]
 8005a0c:	f000 faaa 	bl	8005f64 <xQueueGenericSend>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d002      	beq.n	8005a1c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005a16:	f06f 0302 	mvn.w	r3, #2
 8005a1a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005a1c:	697b      	ldr	r3, [r7, #20]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4a07      	ldr	r2, [pc, #28]	@ (8005a58 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4a06      	ldr	r2, [pc, #24]	@ (8005a5c <vApplicationGetIdleTaskMemory+0x30>)
 8005a42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2280      	movs	r2, #128	@ 0x80
 8005a48:	601a      	str	r2, [r3, #0]
}
 8005a4a:	bf00      	nop
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000cbc 	.word	0x20000cbc
 8005a5c:	20000d64 	.word	0x20000d64

08005a60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a07      	ldr	r2, [pc, #28]	@ (8005a8c <vApplicationGetTimerTaskMemory+0x2c>)
 8005a70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4a06      	ldr	r2, [pc, #24]	@ (8005a90 <vApplicationGetTimerTaskMemory+0x30>)
 8005a76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a7e:	601a      	str	r2, [r3, #0]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20000f64 	.word	0x20000f64
 8005a90:	2000100c 	.word	0x2000100c

08005a94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f103 0208 	add.w	r2, r3, #8
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005aac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f103 0208 	add.w	r2, r3, #8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f103 0208 	add.w	r2, r3, #8
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	601a      	str	r2, [r3, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b4c:	d103      	bne.n	8005b56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	e00c      	b.n	8005b70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3308      	adds	r3, #8
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e002      	b.n	8005b64 <vListInsert+0x2e>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d2f6      	bcs.n	8005b5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6892      	ldr	r2, [r2, #8]
 8005bbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6852      	ldr	r2, [r2, #4]
 8005bc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d103      	bne.n	8005bdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	1e5a      	subs	r2, r3, #1
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10b      	bne.n	8005c28 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	e7fd      	b.n	8005c24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c28:	f002 fcd6 	bl	80085d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c34:	68f9      	ldr	r1, [r7, #12]
 8005c36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	441a      	add	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	441a      	add	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	22ff      	movs	r2, #255	@ 0xff
 8005c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	22ff      	movs	r2, #255	@ 0xff
 8005c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d114      	bne.n	8005ca8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01a      	beq.n	8005cbc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3310      	adds	r3, #16
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 fc74 	bl	8007578 <xTaskRemoveFromEventList>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d012      	beq.n	8005cbc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ccc <xQueueGenericReset+0xd0>)
 8005c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	e009      	b.n	8005cbc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3310      	adds	r3, #16
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff fef1 	bl	8005a94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3324      	adds	r3, #36	@ 0x24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff feec 	bl	8005a94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cbc:	f002 fcbe 	bl	800863c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cc0:	2301      	movs	r3, #1
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	e000ed04 	.word	0xe000ed04

08005cd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08e      	sub	sp, #56	@ 0x38
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10b      	bne.n	8005cfc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
 8005d18:	e7fd      	b.n	8005d16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <xQueueGenericCreateStatic+0x56>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <xQueueGenericCreateStatic+0x5a>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <xQueueGenericCreateStatic+0x5c>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10b      	bne.n	8005d48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	623b      	str	r3, [r7, #32]
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	e7fd      	b.n	8005d44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <xQueueGenericCreateStatic+0x84>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <xQueueGenericCreateStatic+0x88>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <xQueueGenericCreateStatic+0x8a>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	61fb      	str	r3, [r7, #28]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d76:	2350      	movs	r3, #80	@ 0x50
 8005d78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b50      	cmp	r3, #80	@ 0x50
 8005d7e:	d00b      	beq.n	8005d98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	61bb      	str	r3, [r7, #24]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00d      	beq.n	8005dc0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f840 	bl	8005e40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3730      	adds	r7, #48	@ 0x30
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b08a      	sub	sp, #40	@ 0x28
 8005dce:	af02      	add	r7, sp, #8
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10b      	bne.n	8005df6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	613b      	str	r3, [r7, #16]
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	e7fd      	b.n	8005df2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
 8005dfe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	3350      	adds	r3, #80	@ 0x50
 8005e04:	4618      	mov	r0, r3
 8005e06:	f002 fd09 	bl	800881c <pvPortMalloc>
 8005e0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d011      	beq.n	8005e36 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	3350      	adds	r3, #80	@ 0x50
 8005e1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e24:	79fa      	ldrb	r2, [r7, #7]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f805 	bl	8005e40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e36:	69bb      	ldr	r3, [r7, #24]
	}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d103      	bne.n	8005e5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e002      	b.n	8005e62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e6e:	2101      	movs	r1, #1
 8005e70:	69b8      	ldr	r0, [r7, #24]
 8005e72:	f7ff fec3 	bl	8005bfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b08a      	sub	sp, #40	@ 0x28
 8005e8a:	af02      	add	r7, sp, #8
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	61bb      	str	r3, [r7, #24]
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	e7fd      	b.n	8005eac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d90b      	bls.n	8005ed0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	617b      	str	r3, [r7, #20]
}
 8005eca:	bf00      	nop
 8005ecc:	bf00      	nop
 8005ece:	e7fd      	b.n	8005ecc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2100      	movs	r1, #0
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7ff fef8 	bl	8005cd0 <xQueueGenericCreateStatic>
 8005ee0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005eee:	69fb      	ldr	r3, [r7, #28]
	}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3720      	adds	r7, #32
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10b      	bne.n	8005f20 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	613b      	str	r3, [r7, #16]
}
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
 8005f1e:	e7fd      	b.n	8005f1c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d90b      	bls.n	8005f40 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	60fb      	str	r3, [r7, #12]
}
 8005f3a:	bf00      	nop
 8005f3c:	bf00      	nop
 8005f3e:	e7fd      	b.n	8005f3c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f40:	2202      	movs	r2, #2
 8005f42:	2100      	movs	r1, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff ff40 	bl	8005dca <xQueueGenericCreate>
 8005f4a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f58:	697b      	ldr	r3, [r7, #20]
	}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08e      	sub	sp, #56	@ 0x38
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f72:	2300      	movs	r3, #0
 8005f74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10b      	bne.n	8005f98 <xQueueGenericSend+0x34>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f92:	bf00      	nop
 8005f94:	bf00      	nop
 8005f96:	e7fd      	b.n	8005f94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <xQueueGenericSend+0x42>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <xQueueGenericSend+0x46>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <xQueueGenericSend+0x48>
 8005faa:	2300      	movs	r3, #0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <xQueueGenericSend+0x64>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	e7fd      	b.n	8005fc4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d103      	bne.n	8005fd6 <xQueueGenericSend+0x72>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <xQueueGenericSend+0x76>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <xQueueGenericSend+0x78>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10b      	bne.n	8005ff8 <xQueueGenericSend+0x94>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	623b      	str	r3, [r7, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	e7fd      	b.n	8005ff4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ff8:	f001 fc84 	bl	8007904 <xTaskGetSchedulerState>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d102      	bne.n	8006008 <xQueueGenericSend+0xa4>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <xQueueGenericSend+0xa8>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <xQueueGenericSend+0xaa>
 800600c:	2300      	movs	r3, #0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10b      	bne.n	800602a <xQueueGenericSend+0xc6>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	61fb      	str	r3, [r7, #28]
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	e7fd      	b.n	8006026 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800602a:	f002 fad5 	bl	80085d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <xQueueGenericSend+0xdc>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b02      	cmp	r3, #2
 800603e:	d129      	bne.n	8006094 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006046:	f000 fc6d 	bl	8006924 <prvCopyDataToQueue>
 800604a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	d010      	beq.n	8006076 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006056:	3324      	adds	r3, #36	@ 0x24
 8006058:	4618      	mov	r0, r3
 800605a:	f001 fa8d 	bl	8007578 <xTaskRemoveFromEventList>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d013      	beq.n	800608c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006064:	4b3f      	ldr	r3, [pc, #252]	@ (8006164 <xQueueGenericSend+0x200>)
 8006066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	e00a      	b.n	800608c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d007      	beq.n	800608c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800607c:	4b39      	ldr	r3, [pc, #228]	@ (8006164 <xQueueGenericSend+0x200>)
 800607e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800608c:	f002 fad6 	bl	800863c <vPortExitCritical>
				return pdPASS;
 8006090:	2301      	movs	r3, #1
 8006092:	e063      	b.n	800615c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800609a:	f002 facf 	bl	800863c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	e05c      	b.n	800615c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060a8:	f107 0314 	add.w	r3, r7, #20
 80060ac:	4618      	mov	r0, r3
 80060ae:	f001 fac7 	bl	8007640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060b2:	2301      	movs	r3, #1
 80060b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060b6:	f002 fac1 	bl	800863c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060ba:	f001 f82f 	bl	800711c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060be:	f002 fa8b 	bl	80085d8 <vPortEnterCritical>
 80060c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060c8:	b25b      	sxtb	r3, r3
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060ce:	d103      	bne.n	80060d8 <xQueueGenericSend+0x174>
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060de:	b25b      	sxtb	r3, r3
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060e4:	d103      	bne.n	80060ee <xQueueGenericSend+0x18a>
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060ee:	f002 faa5 	bl	800863c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060f2:	1d3a      	adds	r2, r7, #4
 80060f4:	f107 0314 	add.w	r3, r7, #20
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fab6 	bl	800766c <xTaskCheckForTimeOut>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d124      	bne.n	8006150 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006106:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006108:	f000 fd04 	bl	8006b14 <prvIsQueueFull>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d018      	beq.n	8006144 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	3310      	adds	r3, #16
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f001 f9da 	bl	80074d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006122:	f000 fc8f 	bl	8006a44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006126:	f001 f807 	bl	8007138 <xTaskResumeAll>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	f47f af7c 	bne.w	800602a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006132:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <xQueueGenericSend+0x200>)
 8006134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	e772      	b.n	800602a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006146:	f000 fc7d 	bl	8006a44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800614a:	f000 fff5 	bl	8007138 <xTaskResumeAll>
 800614e:	e76c      	b.n	800602a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006152:	f000 fc77 	bl	8006a44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006156:	f000 ffef 	bl	8007138 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800615a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800615c:	4618      	mov	r0, r3
 800615e:	3738      	adds	r7, #56	@ 0x38
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b090      	sub	sp, #64	@ 0x40
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800617a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10b      	bne.n	8006198 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d103      	bne.n	80061a6 <xQueueGenericSendFromISR+0x3e>
 800619e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <xQueueGenericSendFromISR+0x42>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <xQueueGenericSendFromISR+0x44>
 80061aa:	2300      	movs	r3, #0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10b      	bne.n	80061c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	e7fd      	b.n	80061c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d103      	bne.n	80061d6 <xQueueGenericSendFromISR+0x6e>
 80061ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <xQueueGenericSendFromISR+0x72>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <xQueueGenericSendFromISR+0x74>
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	623b      	str	r3, [r7, #32]
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061f8:	f002 face 	bl	8008798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061fc:	f3ef 8211 	mrs	r2, BASEPRI
 8006200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	61fa      	str	r2, [r7, #28]
 8006212:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006214:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006216:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006220:	429a      	cmp	r2, r3
 8006222:	d302      	bcc.n	800622a <xQueueGenericSendFromISR+0xc2>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d12f      	bne.n	800628a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800622a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006230:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006238:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006240:	f000 fb70 	bl	8006924 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006244:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800624c:	d112      	bne.n	8006274 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800624e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006258:	3324      	adds	r3, #36	@ 0x24
 800625a:	4618      	mov	r0, r3
 800625c:	f001 f98c 	bl	8007578 <xTaskRemoveFromEventList>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00e      	beq.n	8006284 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	e007      	b.n	8006284 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006274:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006278:	3301      	adds	r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	b25a      	sxtb	r2, r3
 800627e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006284:	2301      	movs	r3, #1
 8006286:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006288:	e001      	b.n	800628e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800628a:	2300      	movs	r3, #0
 800628c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800628e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006290:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006298:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800629a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800629c:	4618      	mov	r0, r3
 800629e:	3740      	adds	r7, #64	@ 0x40
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08e      	sub	sp, #56	@ 0x38
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10b      	bne.n	80062d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	623b      	str	r3, [r7, #32]
}
 80062ca:	bf00      	nop
 80062cc:	bf00      	nop
 80062ce:	e7fd      	b.n	80062cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	61fb      	str	r3, [r7, #28]
}
 80062ea:	bf00      	nop
 80062ec:	bf00      	nop
 80062ee:	e7fd      	b.n	80062ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <xQueueGiveFromISR+0x5c>
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <xQueueGiveFromISR+0x60>
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <xQueueGiveFromISR+0x62>
 8006304:	2300      	movs	r3, #0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10b      	bne.n	8006322 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	61bb      	str	r3, [r7, #24]
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	e7fd      	b.n	800631e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006322:	f002 fa39 	bl	8008798 <vPortValidateInterruptPriority>
	__asm volatile
 8006326:	f3ef 8211 	mrs	r2, BASEPRI
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	617a      	str	r2, [r7, #20]
 800633c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800633e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006340:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006346:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800634e:	429a      	cmp	r2, r3
 8006350:	d22b      	bcs.n	80063aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800635c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006364:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800636c:	d112      	bne.n	8006394 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	2b00      	cmp	r3, #0
 8006374:	d016      	beq.n	80063a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	3324      	adds	r3, #36	@ 0x24
 800637a:	4618      	mov	r0, r3
 800637c:	f001 f8fc 	bl	8007578 <xTaskRemoveFromEventList>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00e      	beq.n	80063a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e007      	b.n	80063a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006398:	3301      	adds	r3, #1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	b25a      	sxtb	r2, r3
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80063a4:	2301      	movs	r3, #1
 80063a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a8:	e001      	b.n	80063ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f383 8811 	msr	BASEPRI, r3
}
 80063b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3738      	adds	r7, #56	@ 0x38
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08c      	sub	sp, #48	@ 0x30
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063d0:	2300      	movs	r3, #0
 80063d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10b      	bne.n	80063f6 <xQueueReceive+0x32>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	623b      	str	r3, [r7, #32]
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	e7fd      	b.n	80063f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d103      	bne.n	8006404 <xQueueReceive+0x40>
 80063fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <xQueueReceive+0x44>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <xQueueReceive+0x46>
 8006408:	2300      	movs	r3, #0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <xQueueReceive+0x62>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	61fb      	str	r3, [r7, #28]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006426:	f001 fa6d 	bl	8007904 <xTaskGetSchedulerState>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <xQueueReceive+0x72>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <xQueueReceive+0x76>
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <xQueueReceive+0x78>
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <xQueueReceive+0x94>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	61bb      	str	r3, [r7, #24]
}
 8006452:	bf00      	nop
 8006454:	bf00      	nop
 8006456:	e7fd      	b.n	8006454 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006458:	f002 f8be 	bl	80085d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01f      	beq.n	80064a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800646c:	f000 fac4 	bl	80069f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	1e5a      	subs	r2, r3, #1
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00f      	beq.n	80064a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006482:	3310      	adds	r3, #16
 8006484:	4618      	mov	r0, r3
 8006486:	f001 f877 	bl	8007578 <xTaskRemoveFromEventList>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006490:	4b3c      	ldr	r3, [pc, #240]	@ (8006584 <xQueueReceive+0x1c0>)
 8006492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064a0:	f002 f8cc 	bl	800863c <vPortExitCritical>
				return pdPASS;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e069      	b.n	800657c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d103      	bne.n	80064b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064ae:	f002 f8c5 	bl	800863c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e062      	b.n	800657c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d106      	bne.n	80064ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064bc:	f107 0310 	add.w	r3, r7, #16
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 f8bd 	bl	8007640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064c6:	2301      	movs	r3, #1
 80064c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ca:	f002 f8b7 	bl	800863c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064ce:	f000 fe25 	bl	800711c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064d2:	f002 f881 	bl	80085d8 <vPortEnterCritical>
 80064d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064dc:	b25b      	sxtb	r3, r3
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064e2:	d103      	bne.n	80064ec <xQueueReceive+0x128>
 80064e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064f2:	b25b      	sxtb	r3, r3
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064f8:	d103      	bne.n	8006502 <xQueueReceive+0x13e>
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006502:	f002 f89b 	bl	800863c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006506:	1d3a      	adds	r2, r7, #4
 8006508:	f107 0310 	add.w	r3, r7, #16
 800650c:	4611      	mov	r1, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f001 f8ac 	bl	800766c <xTaskCheckForTimeOut>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d123      	bne.n	8006562 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800651a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800651c:	f000 fae4 	bl	8006ae8 <prvIsQueueEmpty>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d017      	beq.n	8006556 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	3324      	adds	r3, #36	@ 0x24
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	4611      	mov	r1, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f000 ffd0 	bl	80074d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006534:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006536:	f000 fa85 	bl	8006a44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800653a:	f000 fdfd 	bl	8007138 <xTaskResumeAll>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d189      	bne.n	8006458 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006544:	4b0f      	ldr	r3, [pc, #60]	@ (8006584 <xQueueReceive+0x1c0>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	e780      	b.n	8006458 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006558:	f000 fa74 	bl	8006a44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800655c:	f000 fdec 	bl	8007138 <xTaskResumeAll>
 8006560:	e77a      	b.n	8006458 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006564:	f000 fa6e 	bl	8006a44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006568:	f000 fde6 	bl	8007138 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800656c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800656e:	f000 fabb 	bl	8006ae8 <prvIsQueueEmpty>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	f43f af6f 	beq.w	8006458 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800657a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800657c:	4618      	mov	r0, r3
 800657e:	3730      	adds	r7, #48	@ 0x30
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	e000ed04 	.word	0xe000ed04

08006588 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08e      	sub	sp, #56	@ 0x38
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006592:	2300      	movs	r3, #0
 8006594:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800659e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10b      	bne.n	80065bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	623b      	str	r3, [r7, #32]
}
 80065b6:	bf00      	nop
 80065b8:	bf00      	nop
 80065ba:	e7fd      	b.n	80065b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	61fb      	str	r3, [r7, #28]
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	e7fd      	b.n	80065d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065dc:	f001 f992 	bl	8007904 <xTaskGetSchedulerState>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d102      	bne.n	80065ec <xQueueSemaphoreTake+0x64>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <xQueueSemaphoreTake+0x68>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <xQueueSemaphoreTake+0x6a>
 80065f0:	2300      	movs	r3, #0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10b      	bne.n	800660e <xQueueSemaphoreTake+0x86>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	61bb      	str	r3, [r7, #24]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800660e:	f001 ffe3 	bl	80085d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d024      	beq.n	8006668 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800661e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006620:	1e5a      	subs	r2, r3, #1
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800662e:	f001 fae3 	bl	8007bf8 <pvTaskIncrementMutexHeldCount>
 8006632:	4602      	mov	r2, r0
 8006634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006636:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00f      	beq.n	8006660 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006642:	3310      	adds	r3, #16
 8006644:	4618      	mov	r0, r3
 8006646:	f000 ff97 	bl	8007578 <xTaskRemoveFromEventList>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006650:	4b54      	ldr	r3, [pc, #336]	@ (80067a4 <xQueueSemaphoreTake+0x21c>)
 8006652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006660:	f001 ffec 	bl	800863c <vPortExitCritical>
				return pdPASS;
 8006664:	2301      	movs	r3, #1
 8006666:	e098      	b.n	800679a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d112      	bne.n	8006694 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	617b      	str	r3, [r7, #20]
}
 8006686:	bf00      	nop
 8006688:	bf00      	nop
 800668a:	e7fd      	b.n	8006688 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800668c:	f001 ffd6 	bl	800863c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006690:	2300      	movs	r3, #0
 8006692:	e082      	b.n	800679a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800669a:	f107 030c 	add.w	r3, r7, #12
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 ffce 	bl	8007640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066a8:	f001 ffc8 	bl	800863c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066ac:	f000 fd36 	bl	800711c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066b0:	f001 ff92 	bl	80085d8 <vPortEnterCritical>
 80066b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066ba:	b25b      	sxtb	r3, r3
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066c0:	d103      	bne.n	80066ca <xQueueSemaphoreTake+0x142>
 80066c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066d0:	b25b      	sxtb	r3, r3
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066d6:	d103      	bne.n	80066e0 <xQueueSemaphoreTake+0x158>
 80066d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066e0:	f001 ffac 	bl	800863c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066e4:	463a      	mov	r2, r7
 80066e6:	f107 030c 	add.w	r3, r7, #12
 80066ea:	4611      	mov	r1, r2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 ffbd 	bl	800766c <xTaskCheckForTimeOut>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d132      	bne.n	800675e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066fa:	f000 f9f5 	bl	8006ae8 <prvIsQueueEmpty>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d026      	beq.n	8006752 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d109      	bne.n	8006720 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800670c:	f001 ff64 	bl	80085d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4618      	mov	r0, r3
 8006716:	f001 f913 	bl	8007940 <xTaskPriorityInherit>
 800671a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800671c:	f001 ff8e 	bl	800863c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	3324      	adds	r3, #36	@ 0x24
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	4611      	mov	r1, r2
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fed3 	bl	80074d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800672e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006730:	f000 f988 	bl	8006a44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006734:	f000 fd00 	bl	8007138 <xTaskResumeAll>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	f47f af67 	bne.w	800660e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006740:	4b18      	ldr	r3, [pc, #96]	@ (80067a4 <xQueueSemaphoreTake+0x21c>)
 8006742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	e75d      	b.n	800660e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006752:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006754:	f000 f976 	bl	8006a44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006758:	f000 fcee 	bl	8007138 <xTaskResumeAll>
 800675c:	e757      	b.n	800660e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800675e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006760:	f000 f970 	bl	8006a44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006764:	f000 fce8 	bl	8007138 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006768:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800676a:	f000 f9bd 	bl	8006ae8 <prvIsQueueEmpty>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	f43f af4c 	beq.w	800660e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00d      	beq.n	8006798 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800677c:	f001 ff2c 	bl	80085d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006780:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006782:	f000 f8b7 	bl	80068f4 <prvGetDisinheritPriorityAfterTimeout>
 8006786:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800678e:	4618      	mov	r0, r3
 8006790:	f001 f9ae 	bl	8007af0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006794:	f001 ff52 	bl	800863c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800679a:	4618      	mov	r0, r3
 800679c:	3738      	adds	r7, #56	@ 0x38
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	e000ed04 	.word	0xe000ed04

080067a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08e      	sub	sp, #56	@ 0x38
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10b      	bne.n	80067d6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	623b      	str	r3, [r7, #32]
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	e7fd      	b.n	80067d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d103      	bne.n	80067e4 <xQueueReceiveFromISR+0x3c>
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <xQueueReceiveFromISR+0x40>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <xQueueReceiveFromISR+0x42>
 80067e8:	2300      	movs	r3, #0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10b      	bne.n	8006806 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	61fb      	str	r3, [r7, #28]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006806:	f001 ffc7 	bl	8008798 <vPortValidateInterruptPriority>
	__asm volatile
 800680a:	f3ef 8211 	mrs	r2, BASEPRI
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	61ba      	str	r2, [r7, #24]
 8006820:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006822:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006824:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800682c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d02f      	beq.n	8006892 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800683c:	68b9      	ldr	r1, [r7, #8]
 800683e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006840:	f000 f8da 	bl	80069f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	1e5a      	subs	r2, r3, #1
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800684c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006854:	d112      	bne.n	800687c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	3310      	adds	r3, #16
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fe88 	bl	8007578 <xTaskRemoveFromEventList>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e007      	b.n	800688c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800687c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006880:	3301      	adds	r3, #1
 8006882:	b2db      	uxtb	r3, r3
 8006884:	b25a      	sxtb	r2, r3
 8006886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800688c:	2301      	movs	r3, #1
 800688e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006890:	e001      	b.n	8006896 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006892:	2300      	movs	r3, #0
 8006894:	637b      	str	r3, [r7, #52]	@ 0x34
 8006896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006898:	613b      	str	r3, [r7, #16]
	__asm volatile
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f383 8811 	msr	BASEPRI, r3
}
 80068a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3738      	adds	r7, #56	@ 0x38
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10b      	bne.n	80068d6 <vQueueDelete+0x2a>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	60bb      	str	r3, [r7, #8]
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	e7fd      	b.n	80068d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f95e 	bl	8006b98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f002 f866 	bl	80089b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	d006      	beq.n	8006912 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e001      	b.n	8006916 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006916:	68fb      	ldr	r3, [r7, #12]
	}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006938:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10d      	bne.n	800695e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d14d      	bne.n	80069e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	4618      	mov	r0, r3
 8006950:	f001 f85e 	bl	8007a10 <xTaskPriorityDisinherit>
 8006954:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	609a      	str	r2, [r3, #8]
 800695c:	e043      	b.n	80069e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d119      	bne.n	8006998 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6858      	ldr	r0, [r3, #4]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696c:	461a      	mov	r2, r3
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	f003 fad3 	bl	8009f1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697c:	441a      	add	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	429a      	cmp	r2, r3
 800698c:	d32b      	bcc.n	80069e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	605a      	str	r2, [r3, #4]
 8006996:	e026      	b.n	80069e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	68d8      	ldr	r0, [r3, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a0:	461a      	mov	r2, r3
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	f003 fab9 	bl	8009f1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	425b      	negs	r3, r3
 80069b2:	441a      	add	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d207      	bcs.n	80069d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	425b      	negs	r3, r3
 80069ce:	441a      	add	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d105      	bne.n	80069e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80069ee:	697b      	ldr	r3, [r7, #20]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d018      	beq.n	8006a3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	441a      	add	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68da      	ldr	r2, [r3, #12]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d303      	bcc.n	8006a2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68d9      	ldr	r1, [r3, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a34:	461a      	mov	r2, r3
 8006a36:	6838      	ldr	r0, [r7, #0]
 8006a38:	f003 fa6f 	bl	8009f1a <memcpy>
	}
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a4c:	f001 fdc4 	bl	80085d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a58:	e011      	b.n	8006a7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d012      	beq.n	8006a88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3324      	adds	r3, #36	@ 0x24
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fd86 	bl	8007578 <xTaskRemoveFromEventList>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a72:	f000 fe5f 	bl	8007734 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	dce9      	bgt.n	8006a5a <prvUnlockQueue+0x16>
 8006a86:	e000      	b.n	8006a8a <prvUnlockQueue+0x46>
					break;
 8006a88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	22ff      	movs	r2, #255	@ 0xff
 8006a8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a92:	f001 fdd3 	bl	800863c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a96:	f001 fd9f 	bl	80085d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006aa2:	e011      	b.n	8006ac8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d012      	beq.n	8006ad2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3310      	adds	r3, #16
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fd61 	bl	8007578 <xTaskRemoveFromEventList>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006abc:	f000 fe3a 	bl	8007734 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dce9      	bgt.n	8006aa4 <prvUnlockQueue+0x60>
 8006ad0:	e000      	b.n	8006ad4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ad2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	22ff      	movs	r2, #255	@ 0xff
 8006ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006adc:	f001 fdae 	bl	800863c <vPortExitCritical>
}
 8006ae0:	bf00      	nop
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006af0:	f001 fd72 	bl	80085d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d102      	bne.n	8006b02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	e001      	b.n	8006b06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b06:	f001 fd99 	bl	800863c <vPortExitCritical>

	return xReturn;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b1c:	f001 fd5c 	bl	80085d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d102      	bne.n	8006b32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e001      	b.n	8006b36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b36:	f001 fd81 	bl	800863c <vPortExitCritical>

	return xReturn;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	e014      	b.n	8006b7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b54:	4a0f      	ldr	r2, [pc, #60]	@ (8006b94 <vQueueAddToRegistry+0x50>)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10b      	bne.n	8006b78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b60:	490c      	ldr	r1, [pc, #48]	@ (8006b94 <vQueueAddToRegistry+0x50>)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b94 <vQueueAddToRegistry+0x50>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	4413      	add	r3, r2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b76:	e006      	b.n	8006b86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b07      	cmp	r3, #7
 8006b82:	d9e7      	bls.n	8006b54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	2000140c 	.word	0x2000140c

08006b98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	e016      	b.n	8006bd4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006ba6:	4a10      	ldr	r2, [pc, #64]	@ (8006be8 <vQueueUnregisterQueue+0x50>)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	4413      	add	r3, r2
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d10b      	bne.n	8006bce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8006be8 <vQueueUnregisterQueue+0x50>)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2100      	movs	r1, #0
 8006bbc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006bc0:	4a09      	ldr	r2, [pc, #36]	@ (8006be8 <vQueueUnregisterQueue+0x50>)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	2200      	movs	r2, #0
 8006bca:	605a      	str	r2, [r3, #4]
				break;
 8006bcc:	e006      	b.n	8006bdc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b07      	cmp	r3, #7
 8006bd8:	d9e5      	bls.n	8006ba6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006bda:	bf00      	nop
 8006bdc:	bf00      	nop
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	2000140c 	.word	0x2000140c

08006bec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006bfc:	f001 fcec 	bl	80085d8 <vPortEnterCritical>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c06:	b25b      	sxtb	r3, r3
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c0c:	d103      	bne.n	8006c16 <vQueueWaitForMessageRestricted+0x2a>
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c1c:	b25b      	sxtb	r3, r3
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c22:	d103      	bne.n	8006c2c <vQueueWaitForMessageRestricted+0x40>
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c2c:	f001 fd06 	bl	800863c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d106      	bne.n	8006c46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	3324      	adds	r3, #36	@ 0x24
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fc6d 	bl	8007520 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c46:	6978      	ldr	r0, [r7, #20]
 8006c48:	f7ff fefc 	bl	8006a44 <prvUnlockQueue>
	}
 8006c4c:	bf00      	nop
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08e      	sub	sp, #56	@ 0x38
 8006c58:	af04      	add	r7, sp, #16
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	623b      	str	r3, [r7, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	e7fd      	b.n	8006c7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	61fb      	str	r3, [r7, #28]
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	e7fd      	b.n	8006c9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c9e:	23a8      	movs	r3, #168	@ 0xa8
 8006ca0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2ba8      	cmp	r3, #168	@ 0xa8
 8006ca6:	d00b      	beq.n	8006cc0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	61bb      	str	r3, [r7, #24]
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	e7fd      	b.n	8006cbc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006cc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d01e      	beq.n	8006d06 <xTaskCreateStatic+0xb2>
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01b      	beq.n	8006d06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cd6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9303      	str	r3, [sp, #12]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	9302      	str	r3, [sp, #8]
 8006ce8:	f107 0314 	add.w	r3, r7, #20
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f851 	bl	8006da0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d00:	f000 f8f6 	bl	8006ef0 <prvAddNewTaskToReadyList>
 8006d04:	e001      	b.n	8006d0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d0a:	697b      	ldr	r3, [r7, #20]
	}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3728      	adds	r7, #40	@ 0x28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	@ 0x30
 8006d18:	af04      	add	r7, sp, #16
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	4613      	mov	r3, r2
 8006d22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 fd77 	bl	800881c <pvPortMalloc>
 8006d2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00e      	beq.n	8006d54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d36:	20a8      	movs	r0, #168	@ 0xa8
 8006d38:	f001 fd70 	bl	800881c <pvPortMalloc>
 8006d3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d4a:	e005      	b.n	8006d58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d4c:	6978      	ldr	r0, [r7, #20]
 8006d4e:	f001 fe33 	bl	80089b8 <vPortFree>
 8006d52:	e001      	b.n	8006d58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d017      	beq.n	8006d8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	9302      	str	r3, [sp, #8]
 8006d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f80f 	bl	8006da0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d82:	69f8      	ldr	r0, [r7, #28]
 8006d84:	f000 f8b4 	bl	8006ef0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	e002      	b.n	8006d94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d94:	69bb      	ldr	r3, [r7, #24]
	}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	461a      	mov	r2, r3
 8006db8:	21a5      	movs	r1, #165	@ 0xa5
 8006dba:	f002 ffd9 	bl	8009d70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	f023 0307 	bic.w	r3, r3, #7
 8006dd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	617b      	str	r3, [r7, #20]
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	e7fd      	b.n	8006df6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01f      	beq.n	8006e40 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e00:	2300      	movs	r3, #0
 8006e02:	61fb      	str	r3, [r7, #28]
 8006e04:	e012      	b.n	8006e2c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	7819      	ldrb	r1, [r3, #0]
 8006e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	4413      	add	r3, r2
 8006e14:	3334      	adds	r3, #52	@ 0x34
 8006e16:	460a      	mov	r2, r1
 8006e18:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	4413      	add	r3, r2
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d006      	beq.n	8006e34 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2b0f      	cmp	r3, #15
 8006e30:	d9e9      	bls.n	8006e06 <prvInitialiseNewTask+0x66>
 8006e32:	e000      	b.n	8006e36 <prvInitialiseNewTask+0x96>
			{
				break;
 8006e34:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e3e:	e003      	b.n	8006e48 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	2b37      	cmp	r3, #55	@ 0x37
 8006e4c:	d901      	bls.n	8006e52 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e4e:	2337      	movs	r3, #55	@ 0x37
 8006e50:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e56:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e5c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	2200      	movs	r2, #0
 8006e62:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e66:	3304      	adds	r3, #4
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe fe33 	bl	8005ad4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	3318      	adds	r3, #24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fe2e 	bl	8005ad4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e8c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	2200      	movs	r2, #0
 8006e92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	3354      	adds	r3, #84	@ 0x54
 8006ea2:	224c      	movs	r2, #76	@ 0x4c
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f002 ff62 	bl	8009d70 <memset>
 8006eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eae:	4a0d      	ldr	r2, [pc, #52]	@ (8006ee4 <prvInitialiseNewTask+0x144>)
 8006eb0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee8 <prvInitialiseNewTask+0x148>)
 8006eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	4a0c      	ldr	r2, [pc, #48]	@ (8006eec <prvInitialiseNewTask+0x14c>)
 8006ebc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	68f9      	ldr	r1, [r7, #12]
 8006ec2:	69b8      	ldr	r0, [r7, #24]
 8006ec4:	f001 fa5a 	bl	800837c <pxPortInitialiseStack>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ecc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ed8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eda:	bf00      	nop
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	200056a0 	.word	0x200056a0
 8006ee8:	20005708 	.word	0x20005708
 8006eec:	20005770 	.word	0x20005770

08006ef0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ef8:	f001 fb6e 	bl	80085d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006efc:	4b2d      	ldr	r3, [pc, #180]	@ (8006fb4 <prvAddNewTaskToReadyList+0xc4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3301      	adds	r3, #1
 8006f02:	4a2c      	ldr	r2, [pc, #176]	@ (8006fb4 <prvAddNewTaskToReadyList+0xc4>)
 8006f04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f06:	4b2c      	ldr	r3, [pc, #176]	@ (8006fb8 <prvAddNewTaskToReadyList+0xc8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fb8 <prvAddNewTaskToReadyList+0xc8>)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f14:	4b27      	ldr	r3, [pc, #156]	@ (8006fb4 <prvAddNewTaskToReadyList+0xc4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d110      	bne.n	8006f3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f1c:	f000 fc2e 	bl	800777c <prvInitialiseTaskLists>
 8006f20:	e00d      	b.n	8006f3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f22:	4b26      	ldr	r3, [pc, #152]	@ (8006fbc <prvAddNewTaskToReadyList+0xcc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f2a:	4b23      	ldr	r3, [pc, #140]	@ (8006fb8 <prvAddNewTaskToReadyList+0xc8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d802      	bhi.n	8006f3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f38:	4a1f      	ldr	r2, [pc, #124]	@ (8006fb8 <prvAddNewTaskToReadyList+0xc8>)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f3e:	4b20      	ldr	r3, [pc, #128]	@ (8006fc0 <prvAddNewTaskToReadyList+0xd0>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	4a1e      	ldr	r2, [pc, #120]	@ (8006fc0 <prvAddNewTaskToReadyList+0xd0>)
 8006f46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f48:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc0 <prvAddNewTaskToReadyList+0xd0>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f54:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc4 <prvAddNewTaskToReadyList+0xd4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d903      	bls.n	8006f64 <prvAddNewTaskToReadyList+0x74>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f60:	4a18      	ldr	r2, [pc, #96]	@ (8006fc4 <prvAddNewTaskToReadyList+0xd4>)
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4a15      	ldr	r2, [pc, #84]	@ (8006fc8 <prvAddNewTaskToReadyList+0xd8>)
 8006f72:	441a      	add	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	f7fe fdb7 	bl	8005aee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f80:	f001 fb5c 	bl	800863c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f84:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <prvAddNewTaskToReadyList+0xcc>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00e      	beq.n	8006faa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb8 <prvAddNewTaskToReadyList+0xc8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d207      	bcs.n	8006faa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fcc <prvAddNewTaskToReadyList+0xdc>)
 8006f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20001920 	.word	0x20001920
 8006fb8:	2000144c 	.word	0x2000144c
 8006fbc:	2000192c 	.word	0x2000192c
 8006fc0:	2000193c 	.word	0x2000193c
 8006fc4:	20001928 	.word	0x20001928
 8006fc8:	20001450 	.word	0x20001450
 8006fcc:	e000ed04 	.word	0xe000ed04

08006fd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d018      	beq.n	8007014 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fe2:	4b14      	ldr	r3, [pc, #80]	@ (8007034 <vTaskDelay+0x64>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00b      	beq.n	8007002 <vTaskDelay+0x32>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	60bb      	str	r3, [r7, #8]
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	e7fd      	b.n	8006ffe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007002:	f000 f88b 	bl	800711c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007006:	2100      	movs	r1, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fe09 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800700e:	f000 f893 	bl	8007138 <xTaskResumeAll>
 8007012:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d107      	bne.n	800702a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800701a:	4b07      	ldr	r3, [pc, #28]	@ (8007038 <vTaskDelay+0x68>)
 800701c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20001948 	.word	0x20001948
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	@ 0x28
 8007040:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007042:	2300      	movs	r3, #0
 8007044:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800704a:	463a      	mov	r2, r7
 800704c:	1d39      	adds	r1, r7, #4
 800704e:	f107 0308 	add.w	r3, r7, #8
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fcea 	bl	8005a2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	9202      	str	r2, [sp, #8]
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	2300      	movs	r3, #0
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	2300      	movs	r3, #0
 8007068:	460a      	mov	r2, r1
 800706a:	4924      	ldr	r1, [pc, #144]	@ (80070fc <vTaskStartScheduler+0xc0>)
 800706c:	4824      	ldr	r0, [pc, #144]	@ (8007100 <vTaskStartScheduler+0xc4>)
 800706e:	f7ff fdf1 	bl	8006c54 <xTaskCreateStatic>
 8007072:	4603      	mov	r3, r0
 8007074:	4a23      	ldr	r2, [pc, #140]	@ (8007104 <vTaskStartScheduler+0xc8>)
 8007076:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007078:	4b22      	ldr	r3, [pc, #136]	@ (8007104 <vTaskStartScheduler+0xc8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007080:	2301      	movs	r3, #1
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	e001      	b.n	800708a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007086:	2300      	movs	r3, #0
 8007088:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d102      	bne.n	8007096 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007090:	f000 fe1a 	bl	8007cc8 <xTimerCreateTimerTask>
 8007094:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d11b      	bne.n	80070d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	613b      	str	r3, [r7, #16]
}
 80070ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070b0:	4b15      	ldr	r3, [pc, #84]	@ (8007108 <vTaskStartScheduler+0xcc>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3354      	adds	r3, #84	@ 0x54
 80070b6:	4a15      	ldr	r2, [pc, #84]	@ (800710c <vTaskStartScheduler+0xd0>)
 80070b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070ba:	4b15      	ldr	r3, [pc, #84]	@ (8007110 <vTaskStartScheduler+0xd4>)
 80070bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070c2:	4b14      	ldr	r3, [pc, #80]	@ (8007114 <vTaskStartScheduler+0xd8>)
 80070c4:	2201      	movs	r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070c8:	4b13      	ldr	r3, [pc, #76]	@ (8007118 <vTaskStartScheduler+0xdc>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070ce:	f001 f9df 	bl	8008490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070d2:	e00f      	b.n	80070f4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070da:	d10b      	bne.n	80070f4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	60fb      	str	r3, [r7, #12]
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	e7fd      	b.n	80070f0 <vTaskStartScheduler+0xb4>
}
 80070f4:	bf00      	nop
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	0800d760 	.word	0x0800d760
 8007100:	0800774d 	.word	0x0800774d
 8007104:	20001944 	.word	0x20001944
 8007108:	2000144c 	.word	0x2000144c
 800710c:	2000001c 	.word	0x2000001c
 8007110:	20001940 	.word	0x20001940
 8007114:	2000192c 	.word	0x2000192c
 8007118:	20001924 	.word	0x20001924

0800711c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007120:	4b04      	ldr	r3, [pc, #16]	@ (8007134 <vTaskSuspendAll+0x18>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	4a03      	ldr	r2, [pc, #12]	@ (8007134 <vTaskSuspendAll+0x18>)
 8007128:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800712a:	bf00      	nop
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	20001948 	.word	0x20001948

08007138 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007142:	2300      	movs	r3, #0
 8007144:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007146:	4b42      	ldr	r3, [pc, #264]	@ (8007250 <xTaskResumeAll+0x118>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10b      	bne.n	8007166 <xTaskResumeAll+0x2e>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	603b      	str	r3, [r7, #0]
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	e7fd      	b.n	8007162 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007166:	f001 fa37 	bl	80085d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800716a:	4b39      	ldr	r3, [pc, #228]	@ (8007250 <xTaskResumeAll+0x118>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3b01      	subs	r3, #1
 8007170:	4a37      	ldr	r2, [pc, #220]	@ (8007250 <xTaskResumeAll+0x118>)
 8007172:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007174:	4b36      	ldr	r3, [pc, #216]	@ (8007250 <xTaskResumeAll+0x118>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d162      	bne.n	8007242 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800717c:	4b35      	ldr	r3, [pc, #212]	@ (8007254 <xTaskResumeAll+0x11c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d05e      	beq.n	8007242 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007184:	e02f      	b.n	80071e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007186:	4b34      	ldr	r3, [pc, #208]	@ (8007258 <xTaskResumeAll+0x120>)
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3318      	adds	r3, #24
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fd08 	bl	8005ba8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3304      	adds	r3, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe fd03 	bl	8005ba8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a6:	4b2d      	ldr	r3, [pc, #180]	@ (800725c <xTaskResumeAll+0x124>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d903      	bls.n	80071b6 <xTaskResumeAll+0x7e>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	4a2a      	ldr	r2, [pc, #168]	@ (800725c <xTaskResumeAll+0x124>)
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4a27      	ldr	r2, [pc, #156]	@ (8007260 <xTaskResumeAll+0x128>)
 80071c4:	441a      	add	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f7fe fc8e 	bl	8005aee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d6:	4b23      	ldr	r3, [pc, #140]	@ (8007264 <xTaskResumeAll+0x12c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	429a      	cmp	r2, r3
 80071de:	d302      	bcc.n	80071e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80071e0:	4b21      	ldr	r3, [pc, #132]	@ (8007268 <xTaskResumeAll+0x130>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071e6:	4b1c      	ldr	r3, [pc, #112]	@ (8007258 <xTaskResumeAll+0x120>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1cb      	bne.n	8007186 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071f4:	f000 fb66 	bl	80078c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80071f8:	4b1c      	ldr	r3, [pc, #112]	@ (800726c <xTaskResumeAll+0x134>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d010      	beq.n	8007226 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007204:	f000 f846 	bl	8007294 <xTaskIncrementTick>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800720e:	4b16      	ldr	r3, [pc, #88]	@ (8007268 <xTaskResumeAll+0x130>)
 8007210:	2201      	movs	r2, #1
 8007212:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3b01      	subs	r3, #1
 8007218:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1f1      	bne.n	8007204 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007220:	4b12      	ldr	r3, [pc, #72]	@ (800726c <xTaskResumeAll+0x134>)
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007226:	4b10      	ldr	r3, [pc, #64]	@ (8007268 <xTaskResumeAll+0x130>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007232:	4b0f      	ldr	r3, [pc, #60]	@ (8007270 <xTaskResumeAll+0x138>)
 8007234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007242:	f001 f9fb 	bl	800863c <vPortExitCritical>

	return xAlreadyYielded;
 8007246:	68bb      	ldr	r3, [r7, #8]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20001948 	.word	0x20001948
 8007254:	20001920 	.word	0x20001920
 8007258:	200018e0 	.word	0x200018e0
 800725c:	20001928 	.word	0x20001928
 8007260:	20001450 	.word	0x20001450
 8007264:	2000144c 	.word	0x2000144c
 8007268:	20001934 	.word	0x20001934
 800726c:	20001930 	.word	0x20001930
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800727a:	4b05      	ldr	r3, [pc, #20]	@ (8007290 <xTaskGetTickCount+0x1c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007280:	687b      	ldr	r3, [r7, #4]
}
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20001924 	.word	0x20001924

08007294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800729e:	4b4f      	ldr	r3, [pc, #316]	@ (80073dc <xTaskIncrementTick+0x148>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f040 8090 	bne.w	80073c8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072a8:	4b4d      	ldr	r3, [pc, #308]	@ (80073e0 <xTaskIncrementTick+0x14c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3301      	adds	r3, #1
 80072ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072b0:	4a4b      	ldr	r2, [pc, #300]	@ (80073e0 <xTaskIncrementTick+0x14c>)
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d121      	bne.n	8007300 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80072bc:	4b49      	ldr	r3, [pc, #292]	@ (80073e4 <xTaskIncrementTick+0x150>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00b      	beq.n	80072de <xTaskIncrementTick+0x4a>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	603b      	str	r3, [r7, #0]
}
 80072d8:	bf00      	nop
 80072da:	bf00      	nop
 80072dc:	e7fd      	b.n	80072da <xTaskIncrementTick+0x46>
 80072de:	4b41      	ldr	r3, [pc, #260]	@ (80073e4 <xTaskIncrementTick+0x150>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	4b40      	ldr	r3, [pc, #256]	@ (80073e8 <xTaskIncrementTick+0x154>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a3e      	ldr	r2, [pc, #248]	@ (80073e4 <xTaskIncrementTick+0x150>)
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	4a3e      	ldr	r2, [pc, #248]	@ (80073e8 <xTaskIncrementTick+0x154>)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	4b3e      	ldr	r3, [pc, #248]	@ (80073ec <xTaskIncrementTick+0x158>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3301      	adds	r3, #1
 80072f8:	4a3c      	ldr	r2, [pc, #240]	@ (80073ec <xTaskIncrementTick+0x158>)
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	f000 fae2 	bl	80078c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007300:	4b3b      	ldr	r3, [pc, #236]	@ (80073f0 <xTaskIncrementTick+0x15c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	429a      	cmp	r2, r3
 8007308:	d349      	bcc.n	800739e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800730a:	4b36      	ldr	r3, [pc, #216]	@ (80073e4 <xTaskIncrementTick+0x150>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d104      	bne.n	800731e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007314:	4b36      	ldr	r3, [pc, #216]	@ (80073f0 <xTaskIncrementTick+0x15c>)
 8007316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800731a:	601a      	str	r2, [r3, #0]
					break;
 800731c:	e03f      	b.n	800739e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800731e:	4b31      	ldr	r3, [pc, #196]	@ (80073e4 <xTaskIncrementTick+0x150>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	429a      	cmp	r2, r3
 8007334:	d203      	bcs.n	800733e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007336:	4a2e      	ldr	r2, [pc, #184]	@ (80073f0 <xTaskIncrementTick+0x15c>)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800733c:	e02f      	b.n	800739e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	3304      	adds	r3, #4
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fc30 	bl	8005ba8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	3318      	adds	r3, #24
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fc27 	bl	8005ba8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800735e:	4b25      	ldr	r3, [pc, #148]	@ (80073f4 <xTaskIncrementTick+0x160>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d903      	bls.n	800736e <xTaskIncrementTick+0xda>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	4a22      	ldr	r2, [pc, #136]	@ (80073f4 <xTaskIncrementTick+0x160>)
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4a1f      	ldr	r2, [pc, #124]	@ (80073f8 <xTaskIncrementTick+0x164>)
 800737c:	441a      	add	r2, r3
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	3304      	adds	r3, #4
 8007382:	4619      	mov	r1, r3
 8007384:	4610      	mov	r0, r2
 8007386:	f7fe fbb2 	bl	8005aee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738e:	4b1b      	ldr	r3, [pc, #108]	@ (80073fc <xTaskIncrementTick+0x168>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007394:	429a      	cmp	r2, r3
 8007396:	d3b8      	bcc.n	800730a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007398:	2301      	movs	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800739c:	e7b5      	b.n	800730a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800739e:	4b17      	ldr	r3, [pc, #92]	@ (80073fc <xTaskIncrementTick+0x168>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a4:	4914      	ldr	r1, [pc, #80]	@ (80073f8 <xTaskIncrementTick+0x164>)
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	440b      	add	r3, r1
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d901      	bls.n	80073ba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80073b6:	2301      	movs	r3, #1
 80073b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80073ba:	4b11      	ldr	r3, [pc, #68]	@ (8007400 <xTaskIncrementTick+0x16c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d007      	beq.n	80073d2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80073c2:	2301      	movs	r3, #1
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	e004      	b.n	80073d2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007404 <xTaskIncrementTick+0x170>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	4a0d      	ldr	r2, [pc, #52]	@ (8007404 <xTaskIncrementTick+0x170>)
 80073d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80073d2:	697b      	ldr	r3, [r7, #20]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	20001948 	.word	0x20001948
 80073e0:	20001924 	.word	0x20001924
 80073e4:	200018d8 	.word	0x200018d8
 80073e8:	200018dc 	.word	0x200018dc
 80073ec:	20001938 	.word	0x20001938
 80073f0:	20001940 	.word	0x20001940
 80073f4:	20001928 	.word	0x20001928
 80073f8:	20001450 	.word	0x20001450
 80073fc:	2000144c 	.word	0x2000144c
 8007400:	20001934 	.word	0x20001934
 8007404:	20001930 	.word	0x20001930

08007408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800740e:	4b2b      	ldr	r3, [pc, #172]	@ (80074bc <vTaskSwitchContext+0xb4>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007416:	4b2a      	ldr	r3, [pc, #168]	@ (80074c0 <vTaskSwitchContext+0xb8>)
 8007418:	2201      	movs	r2, #1
 800741a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800741c:	e047      	b.n	80074ae <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800741e:	4b28      	ldr	r3, [pc, #160]	@ (80074c0 <vTaskSwitchContext+0xb8>)
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007424:	4b27      	ldr	r3, [pc, #156]	@ (80074c4 <vTaskSwitchContext+0xbc>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	e011      	b.n	8007450 <vTaskSwitchContext+0x48>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10b      	bne.n	800744a <vTaskSwitchContext+0x42>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	607b      	str	r3, [r7, #4]
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	e7fd      	b.n	8007446 <vTaskSwitchContext+0x3e>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3b01      	subs	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	491d      	ldr	r1, [pc, #116]	@ (80074c8 <vTaskSwitchContext+0xc0>)
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0e3      	beq.n	800742c <vTaskSwitchContext+0x24>
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4a16      	ldr	r2, [pc, #88]	@ (80074c8 <vTaskSwitchContext+0xc0>)
 8007470:	4413      	add	r3, r2
 8007472:	60bb      	str	r3, [r7, #8]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	605a      	str	r2, [r3, #4]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	3308      	adds	r3, #8
 8007486:	429a      	cmp	r2, r3
 8007488:	d104      	bne.n	8007494 <vTaskSwitchContext+0x8c>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	605a      	str	r2, [r3, #4]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	4a0c      	ldr	r2, [pc, #48]	@ (80074cc <vTaskSwitchContext+0xc4>)
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	4a09      	ldr	r2, [pc, #36]	@ (80074c4 <vTaskSwitchContext+0xbc>)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074a4:	4b09      	ldr	r3, [pc, #36]	@ (80074cc <vTaskSwitchContext+0xc4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3354      	adds	r3, #84	@ 0x54
 80074aa:	4a09      	ldr	r2, [pc, #36]	@ (80074d0 <vTaskSwitchContext+0xc8>)
 80074ac:	6013      	str	r3, [r2, #0]
}
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	20001948 	.word	0x20001948
 80074c0:	20001934 	.word	0x20001934
 80074c4:	20001928 	.word	0x20001928
 80074c8:	20001450 	.word	0x20001450
 80074cc:	2000144c 	.word	0x2000144c
 80074d0:	2000001c 	.word	0x2000001c

080074d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10b      	bne.n	80074fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	60fb      	str	r3, [r7, #12]
}
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	e7fd      	b.n	80074f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074fc:	4b07      	ldr	r3, [pc, #28]	@ (800751c <vTaskPlaceOnEventList+0x48>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3318      	adds	r3, #24
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7fe fb16 	bl	8005b36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800750a:	2101      	movs	r1, #1
 800750c:	6838      	ldr	r0, [r7, #0]
 800750e:	f000 fb87 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	2000144c 	.word	0x2000144c

08007520 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10b      	bne.n	800754a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	617b      	str	r3, [r7, #20]
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800754a:	4b0a      	ldr	r3, [pc, #40]	@ (8007574 <vTaskPlaceOnEventListRestricted+0x54>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3318      	adds	r3, #24
 8007550:	4619      	mov	r1, r3
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7fe facb 	bl	8005aee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800755e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007562:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	68b8      	ldr	r0, [r7, #8]
 8007568:	f000 fb5a 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
	}
 800756c:	bf00      	nop
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	2000144c 	.word	0x2000144c

08007578 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10b      	bne.n	80075a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	60fb      	str	r3, [r7, #12]
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	e7fd      	b.n	80075a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3318      	adds	r3, #24
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fafc 	bl	8005ba8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007628 <xTaskRemoveFromEventList+0xb0>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d11d      	bne.n	80075f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe faf3 	bl	8005ba8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c6:	4b19      	ldr	r3, [pc, #100]	@ (800762c <xTaskRemoveFromEventList+0xb4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d903      	bls.n	80075d6 <xTaskRemoveFromEventList+0x5e>
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d2:	4a16      	ldr	r2, [pc, #88]	@ (800762c <xTaskRemoveFromEventList+0xb4>)
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a13      	ldr	r2, [pc, #76]	@ (8007630 <xTaskRemoveFromEventList+0xb8>)
 80075e4:	441a      	add	r2, r3
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f7fe fa7e 	bl	8005aee <vListInsertEnd>
 80075f2:	e005      	b.n	8007600 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	3318      	adds	r3, #24
 80075f8:	4619      	mov	r1, r3
 80075fa:	480e      	ldr	r0, [pc, #56]	@ (8007634 <xTaskRemoveFromEventList+0xbc>)
 80075fc:	f7fe fa77 	bl	8005aee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007604:	4b0c      	ldr	r3, [pc, #48]	@ (8007638 <xTaskRemoveFromEventList+0xc0>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	429a      	cmp	r2, r3
 800760c:	d905      	bls.n	800761a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800760e:	2301      	movs	r3, #1
 8007610:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007612:	4b0a      	ldr	r3, [pc, #40]	@ (800763c <xTaskRemoveFromEventList+0xc4>)
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e001      	b.n	800761e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800761e:	697b      	ldr	r3, [r7, #20]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20001948 	.word	0x20001948
 800762c:	20001928 	.word	0x20001928
 8007630:	20001450 	.word	0x20001450
 8007634:	200018e0 	.word	0x200018e0
 8007638:	2000144c 	.word	0x2000144c
 800763c:	20001934 	.word	0x20001934

08007640 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007648:	4b06      	ldr	r3, [pc, #24]	@ (8007664 <vTaskInternalSetTimeOutState+0x24>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007650:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <vTaskInternalSetTimeOutState+0x28>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	605a      	str	r2, [r3, #4]
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	20001938 	.word	0x20001938
 8007668:	20001924 	.word	0x20001924

0800766c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10b      	bne.n	8007694 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	613b      	str	r3, [r7, #16]
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	e7fd      	b.n	8007690 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10b      	bne.n	80076b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	60fb      	str	r3, [r7, #12]
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	e7fd      	b.n	80076ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80076b2:	f000 ff91 	bl	80085d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076b6:	4b1d      	ldr	r3, [pc, #116]	@ (800772c <xTaskCheckForTimeOut+0xc0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076ce:	d102      	bne.n	80076d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61fb      	str	r3, [r7, #28]
 80076d4:	e023      	b.n	800771e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	4b15      	ldr	r3, [pc, #84]	@ (8007730 <xTaskCheckForTimeOut+0xc4>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d007      	beq.n	80076f2 <xTaskCheckForTimeOut+0x86>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d302      	bcc.n	80076f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076ec:	2301      	movs	r3, #1
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	e015      	b.n	800771e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d20b      	bcs.n	8007714 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	1ad2      	subs	r2, r2, r3
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff ff99 	bl	8007640 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	e004      	b.n	800771e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800771a:	2301      	movs	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800771e:	f000 ff8d 	bl	800863c <vPortExitCritical>

	return xReturn;
 8007722:	69fb      	ldr	r3, [r7, #28]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3720      	adds	r7, #32
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20001924 	.word	0x20001924
 8007730:	20001938 	.word	0x20001938

08007734 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007734:	b480      	push	{r7}
 8007736:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007738:	4b03      	ldr	r3, [pc, #12]	@ (8007748 <vTaskMissedYield+0x14>)
 800773a:	2201      	movs	r2, #1
 800773c:	601a      	str	r2, [r3, #0]
}
 800773e:	bf00      	nop
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	20001934 	.word	0x20001934

0800774c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007754:	f000 f852 	bl	80077fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007758:	4b06      	ldr	r3, [pc, #24]	@ (8007774 <prvIdleTask+0x28>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d9f9      	bls.n	8007754 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007760:	4b05      	ldr	r3, [pc, #20]	@ (8007778 <prvIdleTask+0x2c>)
 8007762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007770:	e7f0      	b.n	8007754 <prvIdleTask+0x8>
 8007772:	bf00      	nop
 8007774:	20001450 	.word	0x20001450
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007782:	2300      	movs	r3, #0
 8007784:	607b      	str	r3, [r7, #4]
 8007786:	e00c      	b.n	80077a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4a12      	ldr	r2, [pc, #72]	@ (80077dc <prvInitialiseTaskLists+0x60>)
 8007794:	4413      	add	r3, r2
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe f97c 	bl	8005a94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3301      	adds	r3, #1
 80077a0:	607b      	str	r3, [r7, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b37      	cmp	r3, #55	@ 0x37
 80077a6:	d9ef      	bls.n	8007788 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077a8:	480d      	ldr	r0, [pc, #52]	@ (80077e0 <prvInitialiseTaskLists+0x64>)
 80077aa:	f7fe f973 	bl	8005a94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077ae:	480d      	ldr	r0, [pc, #52]	@ (80077e4 <prvInitialiseTaskLists+0x68>)
 80077b0:	f7fe f970 	bl	8005a94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077b4:	480c      	ldr	r0, [pc, #48]	@ (80077e8 <prvInitialiseTaskLists+0x6c>)
 80077b6:	f7fe f96d 	bl	8005a94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077ba:	480c      	ldr	r0, [pc, #48]	@ (80077ec <prvInitialiseTaskLists+0x70>)
 80077bc:	f7fe f96a 	bl	8005a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077c0:	480b      	ldr	r0, [pc, #44]	@ (80077f0 <prvInitialiseTaskLists+0x74>)
 80077c2:	f7fe f967 	bl	8005a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077c6:	4b0b      	ldr	r3, [pc, #44]	@ (80077f4 <prvInitialiseTaskLists+0x78>)
 80077c8:	4a05      	ldr	r2, [pc, #20]	@ (80077e0 <prvInitialiseTaskLists+0x64>)
 80077ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077cc:	4b0a      	ldr	r3, [pc, #40]	@ (80077f8 <prvInitialiseTaskLists+0x7c>)
 80077ce:	4a05      	ldr	r2, [pc, #20]	@ (80077e4 <prvInitialiseTaskLists+0x68>)
 80077d0:	601a      	str	r2, [r3, #0]
}
 80077d2:	bf00      	nop
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20001450 	.word	0x20001450
 80077e0:	200018b0 	.word	0x200018b0
 80077e4:	200018c4 	.word	0x200018c4
 80077e8:	200018e0 	.word	0x200018e0
 80077ec:	200018f4 	.word	0x200018f4
 80077f0:	2000190c 	.word	0x2000190c
 80077f4:	200018d8 	.word	0x200018d8
 80077f8:	200018dc 	.word	0x200018dc

080077fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007802:	e019      	b.n	8007838 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007804:	f000 fee8 	bl	80085d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007808:	4b10      	ldr	r3, [pc, #64]	@ (800784c <prvCheckTasksWaitingTermination+0x50>)
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3304      	adds	r3, #4
 8007814:	4618      	mov	r0, r3
 8007816:	f7fe f9c7 	bl	8005ba8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800781a:	4b0d      	ldr	r3, [pc, #52]	@ (8007850 <prvCheckTasksWaitingTermination+0x54>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3b01      	subs	r3, #1
 8007820:	4a0b      	ldr	r2, [pc, #44]	@ (8007850 <prvCheckTasksWaitingTermination+0x54>)
 8007822:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007824:	4b0b      	ldr	r3, [pc, #44]	@ (8007854 <prvCheckTasksWaitingTermination+0x58>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3b01      	subs	r3, #1
 800782a:	4a0a      	ldr	r2, [pc, #40]	@ (8007854 <prvCheckTasksWaitingTermination+0x58>)
 800782c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800782e:	f000 ff05 	bl	800863c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f810 	bl	8007858 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007838:	4b06      	ldr	r3, [pc, #24]	@ (8007854 <prvCheckTasksWaitingTermination+0x58>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e1      	bne.n	8007804 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200018f4 	.word	0x200018f4
 8007850:	20001920 	.word	0x20001920
 8007854:	20001908 	.word	0x20001908

08007858 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3354      	adds	r3, #84	@ 0x54
 8007864:	4618      	mov	r0, r3
 8007866:	f002 fa9f 	bl	8009da8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007870:	2b00      	cmp	r3, #0
 8007872:	d108      	bne.n	8007886 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007878:	4618      	mov	r0, r3
 800787a:	f001 f89d 	bl	80089b8 <vPortFree>
				vPortFree( pxTCB );
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 f89a 	bl	80089b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007884:	e019      	b.n	80078ba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800788c:	2b01      	cmp	r3, #1
 800788e:	d103      	bne.n	8007898 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 f891 	bl	80089b8 <vPortFree>
	}
 8007896:	e010      	b.n	80078ba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d00b      	beq.n	80078ba <prvDeleteTCB+0x62>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60fb      	str	r3, [r7, #12]
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	e7fd      	b.n	80078b6 <prvDeleteTCB+0x5e>
	}
 80078ba:	bf00      	nop
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ca:	4b0c      	ldr	r3, [pc, #48]	@ (80078fc <prvResetNextTaskUnblockTime+0x38>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007900 <prvResetNextTaskUnblockTime+0x3c>)
 80078d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078dc:	e008      	b.n	80078f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078de:	4b07      	ldr	r3, [pc, #28]	@ (80078fc <prvResetNextTaskUnblockTime+0x38>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	4a04      	ldr	r2, [pc, #16]	@ (8007900 <prvResetNextTaskUnblockTime+0x3c>)
 80078ee:	6013      	str	r3, [r2, #0]
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	200018d8 	.word	0x200018d8
 8007900:	20001940 	.word	0x20001940

08007904 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800790a:	4b0b      	ldr	r3, [pc, #44]	@ (8007938 <xTaskGetSchedulerState+0x34>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007912:	2301      	movs	r3, #1
 8007914:	607b      	str	r3, [r7, #4]
 8007916:	e008      	b.n	800792a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007918:	4b08      	ldr	r3, [pc, #32]	@ (800793c <xTaskGetSchedulerState+0x38>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d102      	bne.n	8007926 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007920:	2302      	movs	r3, #2
 8007922:	607b      	str	r3, [r7, #4]
 8007924:	e001      	b.n	800792a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007926:	2300      	movs	r3, #0
 8007928:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800792a:	687b      	ldr	r3, [r7, #4]
	}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	2000192c 	.word	0x2000192c
 800793c:	20001948 	.word	0x20001948

08007940 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d051      	beq.n	80079fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795a:	4b2a      	ldr	r3, [pc, #168]	@ (8007a04 <xTaskPriorityInherit+0xc4>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007960:	429a      	cmp	r2, r3
 8007962:	d241      	bcs.n	80079e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	2b00      	cmp	r3, #0
 800796a:	db06      	blt.n	800797a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800796c:	4b25      	ldr	r3, [pc, #148]	@ (8007a04 <xTaskPriorityInherit+0xc4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007972:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6959      	ldr	r1, [r3, #20]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007982:	4613      	mov	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4a1f      	ldr	r2, [pc, #124]	@ (8007a08 <xTaskPriorityInherit+0xc8>)
 800798c:	4413      	add	r3, r2
 800798e:	4299      	cmp	r1, r3
 8007990:	d122      	bne.n	80079d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3304      	adds	r3, #4
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe f906 	bl	8005ba8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800799c:	4b19      	ldr	r3, [pc, #100]	@ (8007a04 <xTaskPriorityInherit+0xc4>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079aa:	4b18      	ldr	r3, [pc, #96]	@ (8007a0c <xTaskPriorityInherit+0xcc>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d903      	bls.n	80079ba <xTaskPriorityInherit+0x7a>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b6:	4a15      	ldr	r2, [pc, #84]	@ (8007a0c <xTaskPriorityInherit+0xcc>)
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079be:	4613      	mov	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4a10      	ldr	r2, [pc, #64]	@ (8007a08 <xTaskPriorityInherit+0xc8>)
 80079c8:	441a      	add	r2, r3
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	3304      	adds	r3, #4
 80079ce:	4619      	mov	r1, r3
 80079d0:	4610      	mov	r0, r2
 80079d2:	f7fe f88c 	bl	8005aee <vListInsertEnd>
 80079d6:	e004      	b.n	80079e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007a04 <xTaskPriorityInherit+0xc4>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079e2:	2301      	movs	r3, #1
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	e008      	b.n	80079fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079ec:	4b05      	ldr	r3, [pc, #20]	@ (8007a04 <xTaskPriorityInherit+0xc4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d201      	bcs.n	80079fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079f6:	2301      	movs	r3, #1
 80079f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079fa:	68fb      	ldr	r3, [r7, #12]
	}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	2000144c 	.word	0x2000144c
 8007a08:	20001450 	.word	0x20001450
 8007a0c:	20001928 	.word	0x20001928

08007a10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d058      	beq.n	8007ad8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a26:	4b2f      	ldr	r3, [pc, #188]	@ (8007ae4 <xTaskPriorityDisinherit+0xd4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d00b      	beq.n	8007a48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	60fb      	str	r3, [r7, #12]
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	e7fd      	b.n	8007a44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10b      	bne.n	8007a68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	60bb      	str	r3, [r7, #8]
}
 8007a62:	bf00      	nop
 8007a64:	bf00      	nop
 8007a66:	e7fd      	b.n	8007a64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a6c:	1e5a      	subs	r2, r3, #1
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d02c      	beq.n	8007ad8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d128      	bne.n	8007ad8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe f88c 	bl	8005ba8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae8 <xTaskPriorityDisinherit+0xd8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d903      	bls.n	8007ab8 <xTaskPriorityDisinherit+0xa8>
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae8 <xTaskPriorityDisinherit+0xd8>)
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4a09      	ldr	r2, [pc, #36]	@ (8007aec <xTaskPriorityDisinherit+0xdc>)
 8007ac6:	441a      	add	r2, r3
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f7fe f80d 	bl	8005aee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ad8:	697b      	ldr	r3, [r7, #20]
	}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	2000144c 	.word	0x2000144c
 8007ae8:	20001928 	.word	0x20001928
 8007aec:	20001450 	.word	0x20001450

08007af0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007afe:	2301      	movs	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d06c      	beq.n	8007be2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10b      	bne.n	8007b28 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	60fb      	str	r3, [r7, #12]
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	e7fd      	b.n	8007b24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d902      	bls.n	8007b38 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	e002      	b.n	8007b3e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d04c      	beq.n	8007be2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d147      	bne.n	8007be2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b52:	4b26      	ldr	r3, [pc, #152]	@ (8007bec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d10b      	bne.n	8007b74 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	60bb      	str	r3, [r7, #8]
}
 8007b6e:	bf00      	nop
 8007b70:	bf00      	nop
 8007b72:	e7fd      	b.n	8007b70 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	db04      	blt.n	8007b92 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	6959      	ldr	r1, [r3, #20]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4a13      	ldr	r2, [pc, #76]	@ (8007bf0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4299      	cmp	r1, r3
 8007ba6:	d11c      	bne.n	8007be2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	3304      	adds	r3, #4
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fd fffb 	bl	8005ba8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d903      	bls.n	8007bc6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8007bf4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4a07      	ldr	r2, [pc, #28]	@ (8007bf0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007bd4:	441a      	add	r2, r3
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4610      	mov	r0, r2
 8007bde:	f7fd ff86 	bl	8005aee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007be2:	bf00      	nop
 8007be4:	3720      	adds	r7, #32
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	2000144c 	.word	0x2000144c
 8007bf0:	20001450 	.word	0x20001450
 8007bf4:	20001928 	.word	0x20001928

08007bf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bfc:	4b07      	ldr	r3, [pc, #28]	@ (8007c1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c04:	4b05      	ldr	r3, [pc, #20]	@ (8007c1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c0a:	3201      	adds	r2, #1
 8007c0c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007c0e:	4b03      	ldr	r3, [pc, #12]	@ (8007c1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007c10:	681b      	ldr	r3, [r3, #0]
	}
 8007c12:	4618      	mov	r0, r3
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	2000144c 	.word	0x2000144c

08007c20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c2a:	4b21      	ldr	r3, [pc, #132]	@ (8007cb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c30:	4b20      	ldr	r3, [pc, #128]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fd ffb6 	bl	8005ba8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c42:	d10a      	bne.n	8007c5a <prvAddCurrentTaskToDelayedList+0x3a>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4819      	ldr	r0, [pc, #100]	@ (8007cb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c54:	f7fd ff4b 	bl	8005aee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c58:	e026      	b.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4413      	add	r3, r2
 8007c60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c62:	4b14      	ldr	r3, [pc, #80]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d209      	bcs.n	8007c86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c72:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f7fd ff59 	bl	8005b36 <vListInsert>
}
 8007c84:	e010      	b.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c86:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4619      	mov	r1, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	f7fd ff4f 	bl	8005b36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c98:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d202      	bcs.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ca2:	4a08      	ldr	r2, [pc, #32]	@ (8007cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6013      	str	r3, [r2, #0]
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20001924 	.word	0x20001924
 8007cb4:	2000144c 	.word	0x2000144c
 8007cb8:	2000190c 	.word	0x2000190c
 8007cbc:	200018dc 	.word	0x200018dc
 8007cc0:	200018d8 	.word	0x200018d8
 8007cc4:	20001940 	.word	0x20001940

08007cc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	@ 0x28
 8007ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cd2:	f000 fb13 	bl	80082fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d4c <xTimerCreateTimerTask+0x84>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d021      	beq.n	8007d22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ce6:	1d3a      	adds	r2, r7, #4
 8007ce8:	f107 0108 	add.w	r1, r7, #8
 8007cec:	f107 030c 	add.w	r3, r7, #12
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fd feb5 	bl	8005a60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	9202      	str	r2, [sp, #8]
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	2302      	movs	r3, #2
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	2300      	movs	r3, #0
 8007d06:	460a      	mov	r2, r1
 8007d08:	4911      	ldr	r1, [pc, #68]	@ (8007d50 <xTimerCreateTimerTask+0x88>)
 8007d0a:	4812      	ldr	r0, [pc, #72]	@ (8007d54 <xTimerCreateTimerTask+0x8c>)
 8007d0c:	f7fe ffa2 	bl	8006c54 <xTaskCreateStatic>
 8007d10:	4603      	mov	r3, r0
 8007d12:	4a11      	ldr	r2, [pc, #68]	@ (8007d58 <xTimerCreateTimerTask+0x90>)
 8007d14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d16:	4b10      	ldr	r3, [pc, #64]	@ (8007d58 <xTimerCreateTimerTask+0x90>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10b      	bne.n	8007d40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	613b      	str	r3, [r7, #16]
}
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
 8007d3e:	e7fd      	b.n	8007d3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d40:	697b      	ldr	r3, [r7, #20]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	2000197c 	.word	0x2000197c
 8007d50:	0800d768 	.word	0x0800d768
 8007d54:	08007e95 	.word	0x08007e95
 8007d58:	20001980 	.word	0x20001980

08007d5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	@ 0x28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10b      	bne.n	8007d8c <xTimerGenericCommand+0x30>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	623b      	str	r3, [r7, #32]
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	e7fd      	b.n	8007d88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d8c:	4b19      	ldr	r3, [pc, #100]	@ (8007df4 <xTimerGenericCommand+0x98>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d02a      	beq.n	8007dea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	dc18      	bgt.n	8007dd8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007da6:	f7ff fdad 	bl	8007904 <xTaskGetSchedulerState>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d109      	bne.n	8007dc4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007db0:	4b10      	ldr	r3, [pc, #64]	@ (8007df4 <xTimerGenericCommand+0x98>)
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	f107 0110 	add.w	r1, r7, #16
 8007db8:	2300      	movs	r3, #0
 8007dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dbc:	f7fe f8d2 	bl	8005f64 <xQueueGenericSend>
 8007dc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dc2:	e012      	b.n	8007dea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007df4 <xTimerGenericCommand+0x98>)
 8007dc6:	6818      	ldr	r0, [r3, #0]
 8007dc8:	f107 0110 	add.w	r1, r7, #16
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f7fe f8c8 	bl	8005f64 <xQueueGenericSend>
 8007dd4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dd6:	e008      	b.n	8007dea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dd8:	4b06      	ldr	r3, [pc, #24]	@ (8007df4 <xTimerGenericCommand+0x98>)
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	f107 0110 	add.w	r1, r7, #16
 8007de0:	2300      	movs	r3, #0
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	f7fe f9c0 	bl	8006168 <xQueueGenericSendFromISR>
 8007de8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3728      	adds	r7, #40	@ 0x28
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	2000197c 	.word	0x2000197c

08007df8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e02:	4b23      	ldr	r3, [pc, #140]	@ (8007e90 <prvProcessExpiredTimer+0x98>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fd fec9 	bl	8005ba8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d023      	beq.n	8007e6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	18d1      	adds	r1, r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	6978      	ldr	r0, [r7, #20]
 8007e32:	f000 f8d5 	bl	8007fe0 <prvInsertTimerInActiveList>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d020      	beq.n	8007e7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	2300      	movs	r3, #0
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	2100      	movs	r1, #0
 8007e46:	6978      	ldr	r0, [r7, #20]
 8007e48:	f7ff ff88 	bl	8007d5c <xTimerGenericCommand>
 8007e4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d114      	bne.n	8007e7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	60fb      	str	r3, [r7, #12]
}
 8007e66:	bf00      	nop
 8007e68:	bf00      	nop
 8007e6a:	e7fd      	b.n	8007e68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	6978      	ldr	r0, [r7, #20]
 8007e84:	4798      	blx	r3
}
 8007e86:	bf00      	nop
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20001974 	.word	0x20001974

08007e94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e9c:	f107 0308 	add.w	r3, r7, #8
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 f859 	bl	8007f58 <prvGetNextExpireTime>
 8007ea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f805 	bl	8007ebc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007eb2:	f000 f8d7 	bl	8008064 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007eb6:	bf00      	nop
 8007eb8:	e7f0      	b.n	8007e9c <prvTimerTask+0x8>
	...

08007ebc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ec6:	f7ff f929 	bl	800711c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007eca:	f107 0308 	add.w	r3, r7, #8
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f866 	bl	8007fa0 <prvSampleTimeNow>
 8007ed4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d130      	bne.n	8007f3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <prvProcessTimerOrBlockTask+0x3c>
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d806      	bhi.n	8007ef8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007eea:	f7ff f925 	bl	8007138 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff ff81 	bl	8007df8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ef6:	e024      	b.n	8007f42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d008      	beq.n	8007f10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007efe:	4b13      	ldr	r3, [pc, #76]	@ (8007f4c <prvProcessTimerOrBlockTask+0x90>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <prvProcessTimerOrBlockTask+0x50>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <prvProcessTimerOrBlockTask+0x52>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f10:	4b0f      	ldr	r3, [pc, #60]	@ (8007f50 <prvProcessTimerOrBlockTask+0x94>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	f7fe fe65 	bl	8006bec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f22:	f7ff f909 	bl	8007138 <xTaskResumeAll>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f2c:	4b09      	ldr	r3, [pc, #36]	@ (8007f54 <prvProcessTimerOrBlockTask+0x98>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
}
 8007f3c:	e001      	b.n	8007f42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f3e:	f7ff f8fb 	bl	8007138 <xTaskResumeAll>
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20001978 	.word	0x20001978
 8007f50:	2000197c 	.word	0x2000197c
 8007f54:	e000ed04 	.word	0xe000ed04

08007f58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f60:	4b0e      	ldr	r3, [pc, #56]	@ (8007f9c <prvGetNextExpireTime+0x44>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <prvGetNextExpireTime+0x16>
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	e000      	b.n	8007f70 <prvGetNextExpireTime+0x18>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f7c:	4b07      	ldr	r3, [pc, #28]	@ (8007f9c <prvGetNextExpireTime+0x44>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	e001      	b.n	8007f8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20001974 	.word	0x20001974

08007fa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fa8:	f7ff f964 	bl	8007274 <xTaskGetTickCount>
 8007fac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fae:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <prvSampleTimeNow+0x3c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d205      	bcs.n	8007fc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007fb8:	f000 f93a 	bl	8008230 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	e002      	b.n	8007fca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fca:	4a04      	ldr	r2, [pc, #16]	@ (8007fdc <prvSampleTimeNow+0x3c>)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20001984 	.word	0x20001984

08007fe0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d812      	bhi.n	800802c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	1ad2      	subs	r2, r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	429a      	cmp	r2, r3
 8008012:	d302      	bcc.n	800801a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008014:	2301      	movs	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	e01b      	b.n	8008052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800801a:	4b10      	ldr	r3, [pc, #64]	@ (800805c <prvInsertTimerInActiveList+0x7c>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3304      	adds	r3, #4
 8008022:	4619      	mov	r1, r3
 8008024:	4610      	mov	r0, r2
 8008026:	f7fd fd86 	bl	8005b36 <vListInsert>
 800802a:	e012      	b.n	8008052 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d206      	bcs.n	8008042 <prvInsertTimerInActiveList+0x62>
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	429a      	cmp	r2, r3
 800803a:	d302      	bcc.n	8008042 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	e007      	b.n	8008052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008042:	4b07      	ldr	r3, [pc, #28]	@ (8008060 <prvInsertTimerInActiveList+0x80>)
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f7fd fd72 	bl	8005b36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008052:	697b      	ldr	r3, [r7, #20]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20001978 	.word	0x20001978
 8008060:	20001974 	.word	0x20001974

08008064 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08e      	sub	sp, #56	@ 0x38
 8008068:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800806a:	e0ce      	b.n	800820a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	da19      	bge.n	80080a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008072:	1d3b      	adds	r3, r7, #4
 8008074:	3304      	adds	r3, #4
 8008076:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10b      	bne.n	8008096 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	61fb      	str	r3, [r7, #28]
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	e7fd      	b.n	8008092 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800809c:	6850      	ldr	r0, [r2, #4]
 800809e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080a0:	6892      	ldr	r2, [r2, #8]
 80080a2:	4611      	mov	r1, r2
 80080a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f2c0 80ae 	blt.w	800820a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d004      	beq.n	80080c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080bc:	3304      	adds	r3, #4
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fd fd72 	bl	8005ba8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080c4:	463b      	mov	r3, r7
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff ff6a 	bl	8007fa0 <prvSampleTimeNow>
 80080cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b09      	cmp	r3, #9
 80080d2:	f200 8097 	bhi.w	8008204 <prvProcessReceivedCommands+0x1a0>
 80080d6:	a201      	add	r2, pc, #4	@ (adr r2, 80080dc <prvProcessReceivedCommands+0x78>)
 80080d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080dc:	08008105 	.word	0x08008105
 80080e0:	08008105 	.word	0x08008105
 80080e4:	08008105 	.word	0x08008105
 80080e8:	0800817b 	.word	0x0800817b
 80080ec:	0800818f 	.word	0x0800818f
 80080f0:	080081db 	.word	0x080081db
 80080f4:	08008105 	.word	0x08008105
 80080f8:	08008105 	.word	0x08008105
 80080fc:	0800817b 	.word	0x0800817b
 8008100:	0800818f 	.word	0x0800818f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800810a:	f043 0301 	orr.w	r3, r3, #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	18d1      	adds	r1, r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008124:	f7ff ff5c 	bl	8007fe0 <prvInsertTimerInActiveList>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d06c      	beq.n	8008208 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008134:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d061      	beq.n	8008208 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	441a      	add	r2, r3
 800814c:	2300      	movs	r3, #0
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	2300      	movs	r3, #0
 8008152:	2100      	movs	r1, #0
 8008154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008156:	f7ff fe01 	bl	8007d5c <xTimerGenericCommand>
 800815a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d152      	bne.n	8008208 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	61bb      	str	r3, [r7, #24]
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	e7fd      	b.n	8008176 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	b2da      	uxtb	r2, r3
 8008186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008188:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800818c:	e03d      	b.n	800820a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800818e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008194:	f043 0301 	orr.w	r3, r3, #1
 8008198:	b2da      	uxtb	r2, r3
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10b      	bne.n	80081c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	617b      	str	r3, [r7, #20]
}
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
 80081c4:	e7fd      	b.n	80081c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	699a      	ldr	r2, [r3, #24]
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	18d1      	adds	r1, r2, r3
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081d4:	f7ff ff04 	bl	8007fe0 <prvInsertTimerInActiveList>
					break;
 80081d8:	e017      	b.n	800820a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80081e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ea:	f000 fbe5 	bl	80089b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081ee:	e00c      	b.n	800820a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081f6:	f023 0301 	bic.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008202:	e002      	b.n	800820a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008204:	bf00      	nop
 8008206:	e000      	b.n	800820a <prvProcessReceivedCommands+0x1a6>
					break;
 8008208:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800820a:	4b08      	ldr	r3, [pc, #32]	@ (800822c <prvProcessReceivedCommands+0x1c8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	1d39      	adds	r1, r7, #4
 8008210:	2200      	movs	r2, #0
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe f8d6 	bl	80063c4 <xQueueReceive>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	f47f af26 	bne.w	800806c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3730      	adds	r7, #48	@ 0x30
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	2000197c 	.word	0x2000197c

08008230 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008236:	e049      	b.n	80082cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008238:	4b2e      	ldr	r3, [pc, #184]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008242:	4b2c      	ldr	r3, [pc, #176]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3304      	adds	r3, #4
 8008250:	4618      	mov	r0, r3
 8008252:	f7fd fca9 	bl	8005ba8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d02f      	beq.n	80082cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	4413      	add	r3, r2
 8008274:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	429a      	cmp	r2, r3
 800827c:	d90e      	bls.n	800829c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800828a:	4b1a      	ldr	r3, [pc, #104]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3304      	adds	r3, #4
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f7fd fc4e 	bl	8005b36 <vListInsert>
 800829a:	e017      	b.n	80082cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800829c:	2300      	movs	r3, #0
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2300      	movs	r3, #0
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7ff fd58 	bl	8007d5c <xTimerGenericCommand>
 80082ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10b      	bne.n	80082cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	603b      	str	r3, [r7, #0]
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	e7fd      	b.n	80082c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082cc:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1b0      	bne.n	8008238 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082d6:	4b07      	ldr	r3, [pc, #28]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082dc:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <prvSwitchTimerLists+0xc8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a04      	ldr	r2, [pc, #16]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 80082e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082e4:	4a04      	ldr	r2, [pc, #16]	@ (80082f8 <prvSwitchTimerLists+0xc8>)
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	6013      	str	r3, [r2, #0]
}
 80082ea:	bf00      	nop
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20001974 	.word	0x20001974
 80082f8:	20001978 	.word	0x20001978

080082fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008302:	f000 f969 	bl	80085d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008306:	4b15      	ldr	r3, [pc, #84]	@ (800835c <prvCheckForValidListAndQueue+0x60>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d120      	bne.n	8008350 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800830e:	4814      	ldr	r0, [pc, #80]	@ (8008360 <prvCheckForValidListAndQueue+0x64>)
 8008310:	f7fd fbc0 	bl	8005a94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008314:	4813      	ldr	r0, [pc, #76]	@ (8008364 <prvCheckForValidListAndQueue+0x68>)
 8008316:	f7fd fbbd 	bl	8005a94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800831a:	4b13      	ldr	r3, [pc, #76]	@ (8008368 <prvCheckForValidListAndQueue+0x6c>)
 800831c:	4a10      	ldr	r2, [pc, #64]	@ (8008360 <prvCheckForValidListAndQueue+0x64>)
 800831e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008320:	4b12      	ldr	r3, [pc, #72]	@ (800836c <prvCheckForValidListAndQueue+0x70>)
 8008322:	4a10      	ldr	r2, [pc, #64]	@ (8008364 <prvCheckForValidListAndQueue+0x68>)
 8008324:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008326:	2300      	movs	r3, #0
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	4b11      	ldr	r3, [pc, #68]	@ (8008370 <prvCheckForValidListAndQueue+0x74>)
 800832c:	4a11      	ldr	r2, [pc, #68]	@ (8008374 <prvCheckForValidListAndQueue+0x78>)
 800832e:	2110      	movs	r1, #16
 8008330:	200a      	movs	r0, #10
 8008332:	f7fd fccd 	bl	8005cd0 <xQueueGenericCreateStatic>
 8008336:	4603      	mov	r3, r0
 8008338:	4a08      	ldr	r2, [pc, #32]	@ (800835c <prvCheckForValidListAndQueue+0x60>)
 800833a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800833c:	4b07      	ldr	r3, [pc, #28]	@ (800835c <prvCheckForValidListAndQueue+0x60>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d005      	beq.n	8008350 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008344:	4b05      	ldr	r3, [pc, #20]	@ (800835c <prvCheckForValidListAndQueue+0x60>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	490b      	ldr	r1, [pc, #44]	@ (8008378 <prvCheckForValidListAndQueue+0x7c>)
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fbfa 	bl	8006b44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008350:	f000 f974 	bl	800863c <vPortExitCritical>
}
 8008354:	bf00      	nop
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	2000197c 	.word	0x2000197c
 8008360:	2000194c 	.word	0x2000194c
 8008364:	20001960 	.word	0x20001960
 8008368:	20001974 	.word	0x20001974
 800836c:	20001978 	.word	0x20001978
 8008370:	20001a28 	.word	0x20001a28
 8008374:	20001988 	.word	0x20001988
 8008378:	0800d770 	.word	0x0800d770

0800837c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3b04      	subs	r3, #4
 800838c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3b04      	subs	r3, #4
 800839a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f023 0201 	bic.w	r2, r3, #1
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3b04      	subs	r3, #4
 80083aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083ac:	4a0c      	ldr	r2, [pc, #48]	@ (80083e0 <pxPortInitialiseStack+0x64>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3b14      	subs	r3, #20
 80083b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3b04      	subs	r3, #4
 80083c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f06f 0202 	mvn.w	r2, #2
 80083ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3b20      	subs	r3, #32
 80083d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083d2:	68fb      	ldr	r3, [r7, #12]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	080083e5 	.word	0x080083e5

080083e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083ee:	4b13      	ldr	r3, [pc, #76]	@ (800843c <prvTaskExitError+0x58>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083f6:	d00b      	beq.n	8008410 <prvTaskExitError+0x2c>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	60fb      	str	r3, [r7, #12]
}
 800840a:	bf00      	nop
 800840c:	bf00      	nop
 800840e:	e7fd      	b.n	800840c <prvTaskExitError+0x28>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	60bb      	str	r3, [r7, #8]
}
 8008422:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008424:	bf00      	nop
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0fc      	beq.n	8008426 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	2000000c 	.word	0x2000000c

08008440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008440:	4b07      	ldr	r3, [pc, #28]	@ (8008460 <pxCurrentTCBConst2>)
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	6808      	ldr	r0, [r1, #0]
 8008446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	f380 8809 	msr	PSP, r0
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f04f 0000 	mov.w	r0, #0
 8008456:	f380 8811 	msr	BASEPRI, r0
 800845a:	4770      	bx	lr
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst2>:
 8008460:	2000144c 	.word	0x2000144c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008468:	4808      	ldr	r0, [pc, #32]	@ (800848c <prvPortStartFirstTask+0x24>)
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	6800      	ldr	r0, [r0, #0]
 800846e:	f380 8808 	msr	MSP, r0
 8008472:	f04f 0000 	mov.w	r0, #0
 8008476:	f380 8814 	msr	CONTROL, r0
 800847a:	b662      	cpsie	i
 800847c:	b661      	cpsie	f
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	df00      	svc	0
 8008488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800848a:	bf00      	nop
 800848c:	e000ed08 	.word	0xe000ed08

08008490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008496:	4b47      	ldr	r3, [pc, #284]	@ (80085b4 <xPortStartScheduler+0x124>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a47      	ldr	r2, [pc, #284]	@ (80085b8 <xPortStartScheduler+0x128>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d10b      	bne.n	80084b8 <xPortStartScheduler+0x28>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	613b      	str	r3, [r7, #16]
}
 80084b2:	bf00      	nop
 80084b4:	bf00      	nop
 80084b6:	e7fd      	b.n	80084b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084b8:	4b3e      	ldr	r3, [pc, #248]	@ (80085b4 <xPortStartScheduler+0x124>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a3f      	ldr	r2, [pc, #252]	@ (80085bc <xPortStartScheduler+0x12c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d10b      	bne.n	80084da <xPortStartScheduler+0x4a>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	60fb      	str	r3, [r7, #12]
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	e7fd      	b.n	80084d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084da:	4b39      	ldr	r3, [pc, #228]	@ (80085c0 <xPortStartScheduler+0x130>)
 80084dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	22ff      	movs	r2, #255	@ 0xff
 80084ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	4b31      	ldr	r3, [pc, #196]	@ (80085c4 <xPortStartScheduler+0x134>)
 8008500:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008502:	4b31      	ldr	r3, [pc, #196]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008504:	2207      	movs	r2, #7
 8008506:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008508:	e009      	b.n	800851e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800850a:	4b2f      	ldr	r3, [pc, #188]	@ (80085c8 <xPortStartScheduler+0x138>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3b01      	subs	r3, #1
 8008510:	4a2d      	ldr	r2, [pc, #180]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008512:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	b2db      	uxtb	r3, r3
 800851c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008526:	2b80      	cmp	r3, #128	@ 0x80
 8008528:	d0ef      	beq.n	800850a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800852a:	4b27      	ldr	r3, [pc, #156]	@ (80085c8 <xPortStartScheduler+0x138>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f1c3 0307 	rsb	r3, r3, #7
 8008532:	2b04      	cmp	r3, #4
 8008534:	d00b      	beq.n	800854e <xPortStartScheduler+0xbe>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60bb      	str	r3, [r7, #8]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800854e:	4b1e      	ldr	r3, [pc, #120]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	021b      	lsls	r3, r3, #8
 8008554:	4a1c      	ldr	r2, [pc, #112]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008556:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008558:	4b1b      	ldr	r3, [pc, #108]	@ (80085c8 <xPortStartScheduler+0x138>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008560:	4a19      	ldr	r2, [pc, #100]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008562:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	b2da      	uxtb	r2, r3
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800856c:	4b17      	ldr	r3, [pc, #92]	@ (80085cc <xPortStartScheduler+0x13c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a16      	ldr	r2, [pc, #88]	@ (80085cc <xPortStartScheduler+0x13c>)
 8008572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008576:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008578:	4b14      	ldr	r3, [pc, #80]	@ (80085cc <xPortStartScheduler+0x13c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a13      	ldr	r2, [pc, #76]	@ (80085cc <xPortStartScheduler+0x13c>)
 800857e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008582:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008584:	f000 f8da 	bl	800873c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008588:	4b11      	ldr	r3, [pc, #68]	@ (80085d0 <xPortStartScheduler+0x140>)
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800858e:	f000 f8f9 	bl	8008784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008592:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <xPortStartScheduler+0x144>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a0f      	ldr	r2, [pc, #60]	@ (80085d4 <xPortStartScheduler+0x144>)
 8008598:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800859c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800859e:	f7ff ff63 	bl	8008468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085a2:	f7fe ff31 	bl	8007408 <vTaskSwitchContext>
	prvTaskExitError();
 80085a6:	f7ff ff1d 	bl	80083e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	e000ed00 	.word	0xe000ed00
 80085b8:	410fc271 	.word	0x410fc271
 80085bc:	410fc270 	.word	0x410fc270
 80085c0:	e000e400 	.word	0xe000e400
 80085c4:	20001a78 	.word	0x20001a78
 80085c8:	20001a7c 	.word	0x20001a7c
 80085cc:	e000ed20 	.word	0xe000ed20
 80085d0:	2000000c 	.word	0x2000000c
 80085d4:	e000ef34 	.word	0xe000ef34

080085d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	607b      	str	r3, [r7, #4]
}
 80085f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085f2:	4b10      	ldr	r3, [pc, #64]	@ (8008634 <vPortEnterCritical+0x5c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3301      	adds	r3, #1
 80085f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008634 <vPortEnterCritical+0x5c>)
 80085fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008634 <vPortEnterCritical+0x5c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d110      	bne.n	8008626 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008604:	4b0c      	ldr	r3, [pc, #48]	@ (8008638 <vPortEnterCritical+0x60>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <vPortEnterCritical+0x4e>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	603b      	str	r3, [r7, #0]
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	e7fd      	b.n	8008622 <vPortEnterCritical+0x4a>
	}
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	2000000c 	.word	0x2000000c
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008642:	4b12      	ldr	r3, [pc, #72]	@ (800868c <vPortExitCritical+0x50>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10b      	bne.n	8008662 <vPortExitCritical+0x26>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	607b      	str	r3, [r7, #4]
}
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	e7fd      	b.n	800865e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008662:	4b0a      	ldr	r3, [pc, #40]	@ (800868c <vPortExitCritical+0x50>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	4a08      	ldr	r2, [pc, #32]	@ (800868c <vPortExitCritical+0x50>)
 800866a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800866c:	4b07      	ldr	r3, [pc, #28]	@ (800868c <vPortExitCritical+0x50>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d105      	bne.n	8008680 <vPortExitCritical+0x44>
 8008674:	2300      	movs	r3, #0
 8008676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	f383 8811 	msr	BASEPRI, r3
}
 800867e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	2000000c 	.word	0x2000000c

08008690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008690:	f3ef 8009 	mrs	r0, PSP
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4b15      	ldr	r3, [pc, #84]	@ (80086f0 <pxCurrentTCBConst>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	f01e 0f10 	tst.w	lr, #16
 80086a0:	bf08      	it	eq
 80086a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	6010      	str	r0, [r2, #0]
 80086ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086b4:	f380 8811 	msr	BASEPRI, r0
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f7fe fea2 	bl	8007408 <vTaskSwitchContext>
 80086c4:	f04f 0000 	mov.w	r0, #0
 80086c8:	f380 8811 	msr	BASEPRI, r0
 80086cc:	bc09      	pop	{r0, r3}
 80086ce:	6819      	ldr	r1, [r3, #0]
 80086d0:	6808      	ldr	r0, [r1, #0]
 80086d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d6:	f01e 0f10 	tst.w	lr, #16
 80086da:	bf08      	it	eq
 80086dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086e0:	f380 8809 	msr	PSP, r0
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	f3af 8000 	nop.w

080086f0 <pxCurrentTCBConst>:
 80086f0:	2000144c 	.word	0x2000144c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop

080086f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	607b      	str	r3, [r7, #4]
}
 8008710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008712:	f7fe fdbf 	bl	8007294 <xTaskIncrementTick>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800871c:	4b06      	ldr	r3, [pc, #24]	@ (8008738 <xPortSysTickHandler+0x40>)
 800871e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	2300      	movs	r3, #0
 8008726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f383 8811 	msr	BASEPRI, r3
}
 800872e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008740:	4b0b      	ldr	r3, [pc, #44]	@ (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008746:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <vPortSetupTimerInterrupt+0x38>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800874c:	4b0a      	ldr	r3, [pc, #40]	@ (8008778 <vPortSetupTimerInterrupt+0x3c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a0a      	ldr	r2, [pc, #40]	@ (800877c <vPortSetupTimerInterrupt+0x40>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	099b      	lsrs	r3, r3, #6
 8008758:	4a09      	ldr	r2, [pc, #36]	@ (8008780 <vPortSetupTimerInterrupt+0x44>)
 800875a:	3b01      	subs	r3, #1
 800875c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800875e:	4b04      	ldr	r3, [pc, #16]	@ (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008760:	2207      	movs	r2, #7
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	e000e010 	.word	0xe000e010
 8008774:	e000e018 	.word	0xe000e018
 8008778:	20000000 	.word	0x20000000
 800877c:	10624dd3 	.word	0x10624dd3
 8008780:	e000e014 	.word	0xe000e014

08008784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008784:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008794 <vPortEnableVFP+0x10>
 8008788:	6801      	ldr	r1, [r0, #0]
 800878a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800878e:	6001      	str	r1, [r0, #0]
 8008790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008792:	bf00      	nop
 8008794:	e000ed88 	.word	0xe000ed88

08008798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800879e:	f3ef 8305 	mrs	r3, IPSR
 80087a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b0f      	cmp	r3, #15
 80087a8:	d915      	bls.n	80087d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087aa:	4a18      	ldr	r2, [pc, #96]	@ (800880c <vPortValidateInterruptPriority+0x74>)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087b4:	4b16      	ldr	r3, [pc, #88]	@ (8008810 <vPortValidateInterruptPriority+0x78>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	7afa      	ldrb	r2, [r7, #11]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d20b      	bcs.n	80087d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008814 <vPortValidateInterruptPriority+0x7c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80087de:	4b0e      	ldr	r3, [pc, #56]	@ (8008818 <vPortValidateInterruptPriority+0x80>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d90b      	bls.n	80087fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	603b      	str	r3, [r7, #0]
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	e7fd      	b.n	80087fa <vPortValidateInterruptPriority+0x62>
	}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	e000e3f0 	.word	0xe000e3f0
 8008810:	20001a78 	.word	0x20001a78
 8008814:	e000ed0c 	.word	0xe000ed0c
 8008818:	20001a7c 	.word	0x20001a7c

0800881c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	@ 0x28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008824:	2300      	movs	r3, #0
 8008826:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008828:	f7fe fc78 	bl	800711c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800882c:	4b5c      	ldr	r3, [pc, #368]	@ (80089a0 <pvPortMalloc+0x184>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008834:	f000 f924 	bl	8008a80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008838:	4b5a      	ldr	r3, [pc, #360]	@ (80089a4 <pvPortMalloc+0x188>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4013      	ands	r3, r2
 8008840:	2b00      	cmp	r3, #0
 8008842:	f040 8095 	bne.w	8008970 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01e      	beq.n	800888a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800884c:	2208      	movs	r2, #8
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d015      	beq.n	800888a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f023 0307 	bic.w	r3, r3, #7
 8008864:	3308      	adds	r3, #8
 8008866:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f003 0307 	and.w	r3, r3, #7
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <pvPortMalloc+0x6e>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	617b      	str	r3, [r7, #20]
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	e7fd      	b.n	8008886 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d06f      	beq.n	8008970 <pvPortMalloc+0x154>
 8008890:	4b45      	ldr	r3, [pc, #276]	@ (80089a8 <pvPortMalloc+0x18c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d86a      	bhi.n	8008970 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800889a:	4b44      	ldr	r3, [pc, #272]	@ (80089ac <pvPortMalloc+0x190>)
 800889c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800889e:	4b43      	ldr	r3, [pc, #268]	@ (80089ac <pvPortMalloc+0x190>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088a4:	e004      	b.n	80088b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d903      	bls.n	80088c2 <pvPortMalloc+0xa6>
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1f1      	bne.n	80088a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088c2:	4b37      	ldr	r3, [pc, #220]	@ (80089a0 <pvPortMalloc+0x184>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d051      	beq.n	8008970 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2208      	movs	r2, #8
 80088d2:	4413      	add	r3, r2
 80088d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	1ad2      	subs	r2, r2, r3
 80088e6:	2308      	movs	r3, #8
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d920      	bls.n	8008930 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4413      	add	r3, r2
 80088f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	f003 0307 	and.w	r3, r3, #7
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <pvPortMalloc+0xfc>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800892a:	69b8      	ldr	r0, [r7, #24]
 800892c:	f000 f90a 	bl	8008b44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008930:	4b1d      	ldr	r3, [pc, #116]	@ (80089a8 <pvPortMalloc+0x18c>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	4a1b      	ldr	r2, [pc, #108]	@ (80089a8 <pvPortMalloc+0x18c>)
 800893c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800893e:	4b1a      	ldr	r3, [pc, #104]	@ (80089a8 <pvPortMalloc+0x18c>)
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4b1b      	ldr	r3, [pc, #108]	@ (80089b0 <pvPortMalloc+0x194>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d203      	bcs.n	8008952 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800894a:	4b17      	ldr	r3, [pc, #92]	@ (80089a8 <pvPortMalloc+0x18c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a18      	ldr	r2, [pc, #96]	@ (80089b0 <pvPortMalloc+0x194>)
 8008950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <pvPortMalloc+0x188>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	431a      	orrs	r2, r3
 800895c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008966:	4b13      	ldr	r3, [pc, #76]	@ (80089b4 <pvPortMalloc+0x198>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3301      	adds	r3, #1
 800896c:	4a11      	ldr	r2, [pc, #68]	@ (80089b4 <pvPortMalloc+0x198>)
 800896e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008970:	f7fe fbe2 	bl	8007138 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00b      	beq.n	8008996 <pvPortMalloc+0x17a>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	60fb      	str	r3, [r7, #12]
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	e7fd      	b.n	8008992 <pvPortMalloc+0x176>
	return pvReturn;
 8008996:	69fb      	ldr	r3, [r7, #28]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3728      	adds	r7, #40	@ 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20005688 	.word	0x20005688
 80089a4:	2000569c 	.word	0x2000569c
 80089a8:	2000568c 	.word	0x2000568c
 80089ac:	20005680 	.word	0x20005680
 80089b0:	20005690 	.word	0x20005690
 80089b4:	20005694 	.word	0x20005694

080089b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d04f      	beq.n	8008a6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089ca:	2308      	movs	r3, #8
 80089cc:	425b      	negs	r3, r3
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4413      	add	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	4b25      	ldr	r3, [pc, #148]	@ (8008a74 <vPortFree+0xbc>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4013      	ands	r3, r2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10b      	bne.n	80089fe <vPortFree+0x46>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60fb      	str	r3, [r7, #12]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00b      	beq.n	8008a1e <vPortFree+0x66>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	60bb      	str	r3, [r7, #8]
}
 8008a18:	bf00      	nop
 8008a1a:	bf00      	nop
 8008a1c:	e7fd      	b.n	8008a1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	4b14      	ldr	r3, [pc, #80]	@ (8008a74 <vPortFree+0xbc>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4013      	ands	r3, r2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01e      	beq.n	8008a6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d11a      	bne.n	8008a6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	4b0e      	ldr	r3, [pc, #56]	@ (8008a74 <vPortFree+0xbc>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	401a      	ands	r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a44:	f7fe fb6a 	bl	800711c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a78 <vPortFree+0xc0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4413      	add	r3, r2
 8008a52:	4a09      	ldr	r2, [pc, #36]	@ (8008a78 <vPortFree+0xc0>)
 8008a54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a56:	6938      	ldr	r0, [r7, #16]
 8008a58:	f000 f874 	bl	8008b44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a5c:	4b07      	ldr	r3, [pc, #28]	@ (8008a7c <vPortFree+0xc4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3301      	adds	r3, #1
 8008a62:	4a06      	ldr	r2, [pc, #24]	@ (8008a7c <vPortFree+0xc4>)
 8008a64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a66:	f7fe fb67 	bl	8007138 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a6a:	bf00      	nop
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	2000569c 	.word	0x2000569c
 8008a78:	2000568c 	.word	0x2000568c
 8008a7c:	20005698 	.word	0x20005698

08008a80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008a8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a8c:	4b27      	ldr	r3, [pc, #156]	@ (8008b2c <prvHeapInit+0xac>)
 8008a8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00c      	beq.n	8008ab4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3307      	adds	r3, #7
 8008a9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0307 	bic.w	r3, r3, #7
 8008aa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	4a1f      	ldr	r2, [pc, #124]	@ (8008b2c <prvHeapInit+0xac>)
 8008ab0:	4413      	add	r3, r2
 8008ab2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b30 <prvHeapInit+0xb0>)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008abe:	4b1c      	ldr	r3, [pc, #112]	@ (8008b30 <prvHeapInit+0xb0>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	4413      	add	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008acc:	2208      	movs	r2, #8
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0307 	bic.w	r3, r3, #7
 8008ada:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4a15      	ldr	r2, [pc, #84]	@ (8008b34 <prvHeapInit+0xb4>)
 8008ae0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ae2:	4b14      	ldr	r3, [pc, #80]	@ (8008b34 <prvHeapInit+0xb4>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008aea:	4b12      	ldr	r3, [pc, #72]	@ (8008b34 <prvHeapInit+0xb4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	1ad2      	subs	r2, r2, r3
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b00:	4b0c      	ldr	r3, [pc, #48]	@ (8008b34 <prvHeapInit+0xb4>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b38 <prvHeapInit+0xb8>)
 8008b0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	4a09      	ldr	r2, [pc, #36]	@ (8008b3c <prvHeapInit+0xbc>)
 8008b16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b18:	4b09      	ldr	r3, [pc, #36]	@ (8008b40 <prvHeapInit+0xc0>)
 8008b1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b1e:	601a      	str	r2, [r3, #0]
}
 8008b20:	bf00      	nop
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20001a80 	.word	0x20001a80
 8008b30:	20005680 	.word	0x20005680
 8008b34:	20005688 	.word	0x20005688
 8008b38:	20005690 	.word	0x20005690
 8008b3c:	2000568c 	.word	0x2000568c
 8008b40:	2000569c 	.word	0x2000569c

08008b44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b4c:	4b28      	ldr	r3, [pc, #160]	@ (8008bf0 <prvInsertBlockIntoFreeList+0xac>)
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	e002      	b.n	8008b58 <prvInsertBlockIntoFreeList+0x14>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d8f7      	bhi.n	8008b52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d108      	bne.n	8008b86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	441a      	add	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d118      	bne.n	8008bcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4b15      	ldr	r3, [pc, #84]	@ (8008bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d00d      	beq.n	8008bc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	441a      	add	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	e008      	b.n	8008bd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e003      	b.n	8008bd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d002      	beq.n	8008be2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008be2:	bf00      	nop
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	20005680 	.word	0x20005680
 8008bf4:	20005688 	.word	0x20005688

08008bf8 <__cvt>:
 8008bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	ec57 6b10 	vmov	r6, r7, d0
 8008c00:	2f00      	cmp	r7, #0
 8008c02:	460c      	mov	r4, r1
 8008c04:	4619      	mov	r1, r3
 8008c06:	463b      	mov	r3, r7
 8008c08:	bfbb      	ittet	lt
 8008c0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008c0e:	461f      	movlt	r7, r3
 8008c10:	2300      	movge	r3, #0
 8008c12:	232d      	movlt	r3, #45	@ 0x2d
 8008c14:	700b      	strb	r3, [r1, #0]
 8008c16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008c1c:	4691      	mov	r9, r2
 8008c1e:	f023 0820 	bic.w	r8, r3, #32
 8008c22:	bfbc      	itt	lt
 8008c24:	4632      	movlt	r2, r6
 8008c26:	4616      	movlt	r6, r2
 8008c28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c2c:	d005      	beq.n	8008c3a <__cvt+0x42>
 8008c2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c32:	d100      	bne.n	8008c36 <__cvt+0x3e>
 8008c34:	3401      	adds	r4, #1
 8008c36:	2102      	movs	r1, #2
 8008c38:	e000      	b.n	8008c3c <__cvt+0x44>
 8008c3a:	2103      	movs	r1, #3
 8008c3c:	ab03      	add	r3, sp, #12
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	ab02      	add	r3, sp, #8
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	ec47 6b10 	vmov	d0, r6, r7
 8008c48:	4653      	mov	r3, sl
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	f001 fa04 	bl	800a058 <_dtoa_r>
 8008c50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c54:	4605      	mov	r5, r0
 8008c56:	d119      	bne.n	8008c8c <__cvt+0x94>
 8008c58:	f019 0f01 	tst.w	r9, #1
 8008c5c:	d00e      	beq.n	8008c7c <__cvt+0x84>
 8008c5e:	eb00 0904 	add.w	r9, r0, r4
 8008c62:	2200      	movs	r2, #0
 8008c64:	2300      	movs	r3, #0
 8008c66:	4630      	mov	r0, r6
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f7f7 ff35 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c6e:	b108      	cbz	r0, 8008c74 <__cvt+0x7c>
 8008c70:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c74:	2230      	movs	r2, #48	@ 0x30
 8008c76:	9b03      	ldr	r3, [sp, #12]
 8008c78:	454b      	cmp	r3, r9
 8008c7a:	d31e      	bcc.n	8008cba <__cvt+0xc2>
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c80:	1b5b      	subs	r3, r3, r5
 8008c82:	4628      	mov	r0, r5
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	b004      	add	sp, #16
 8008c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c90:	eb00 0904 	add.w	r9, r0, r4
 8008c94:	d1e5      	bne.n	8008c62 <__cvt+0x6a>
 8008c96:	7803      	ldrb	r3, [r0, #0]
 8008c98:	2b30      	cmp	r3, #48	@ 0x30
 8008c9a:	d10a      	bne.n	8008cb2 <__cvt+0xba>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	4639      	mov	r1, r7
 8008ca4:	f7f7 ff18 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ca8:	b918      	cbnz	r0, 8008cb2 <__cvt+0xba>
 8008caa:	f1c4 0401 	rsb	r4, r4, #1
 8008cae:	f8ca 4000 	str.w	r4, [sl]
 8008cb2:	f8da 3000 	ldr.w	r3, [sl]
 8008cb6:	4499      	add	r9, r3
 8008cb8:	e7d3      	b.n	8008c62 <__cvt+0x6a>
 8008cba:	1c59      	adds	r1, r3, #1
 8008cbc:	9103      	str	r1, [sp, #12]
 8008cbe:	701a      	strb	r2, [r3, #0]
 8008cc0:	e7d9      	b.n	8008c76 <__cvt+0x7e>

08008cc2 <__exponent>:
 8008cc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cc4:	2900      	cmp	r1, #0
 8008cc6:	bfba      	itte	lt
 8008cc8:	4249      	neglt	r1, r1
 8008cca:	232d      	movlt	r3, #45	@ 0x2d
 8008ccc:	232b      	movge	r3, #43	@ 0x2b
 8008cce:	2909      	cmp	r1, #9
 8008cd0:	7002      	strb	r2, [r0, #0]
 8008cd2:	7043      	strb	r3, [r0, #1]
 8008cd4:	dd29      	ble.n	8008d2a <__exponent+0x68>
 8008cd6:	f10d 0307 	add.w	r3, sp, #7
 8008cda:	461d      	mov	r5, r3
 8008cdc:	270a      	movs	r7, #10
 8008cde:	461a      	mov	r2, r3
 8008ce0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ce4:	fb07 1416 	mls	r4, r7, r6, r1
 8008ce8:	3430      	adds	r4, #48	@ 0x30
 8008cea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008cee:	460c      	mov	r4, r1
 8008cf0:	2c63      	cmp	r4, #99	@ 0x63
 8008cf2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	dcf1      	bgt.n	8008cde <__exponent+0x1c>
 8008cfa:	3130      	adds	r1, #48	@ 0x30
 8008cfc:	1e94      	subs	r4, r2, #2
 8008cfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d02:	1c41      	adds	r1, r0, #1
 8008d04:	4623      	mov	r3, r4
 8008d06:	42ab      	cmp	r3, r5
 8008d08:	d30a      	bcc.n	8008d20 <__exponent+0x5e>
 8008d0a:	f10d 0309 	add.w	r3, sp, #9
 8008d0e:	1a9b      	subs	r3, r3, r2
 8008d10:	42ac      	cmp	r4, r5
 8008d12:	bf88      	it	hi
 8008d14:	2300      	movhi	r3, #0
 8008d16:	3302      	adds	r3, #2
 8008d18:	4403      	add	r3, r0
 8008d1a:	1a18      	subs	r0, r3, r0
 8008d1c:	b003      	add	sp, #12
 8008d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d28:	e7ed      	b.n	8008d06 <__exponent+0x44>
 8008d2a:	2330      	movs	r3, #48	@ 0x30
 8008d2c:	3130      	adds	r1, #48	@ 0x30
 8008d2e:	7083      	strb	r3, [r0, #2]
 8008d30:	70c1      	strb	r1, [r0, #3]
 8008d32:	1d03      	adds	r3, r0, #4
 8008d34:	e7f1      	b.n	8008d1a <__exponent+0x58>
	...

08008d38 <_printf_float>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	b08d      	sub	sp, #52	@ 0x34
 8008d3e:	460c      	mov	r4, r1
 8008d40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008d44:	4616      	mov	r6, r2
 8008d46:	461f      	mov	r7, r3
 8008d48:	4605      	mov	r5, r0
 8008d4a:	f001 f819 	bl	8009d80 <_localeconv_r>
 8008d4e:	6803      	ldr	r3, [r0, #0]
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f7 fa94 	bl	8000280 <strlen>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d60:	9005      	str	r0, [sp, #20]
 8008d62:	3307      	adds	r3, #7
 8008d64:	f023 0307 	bic.w	r3, r3, #7
 8008d68:	f103 0208 	add.w	r2, r3, #8
 8008d6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d70:	f8d4 b000 	ldr.w	fp, [r4]
 8008d74:	f8c8 2000 	str.w	r2, [r8]
 8008d78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d80:	9307      	str	r3, [sp, #28]
 8008d82:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d8e:	4b9c      	ldr	r3, [pc, #624]	@ (8009000 <_printf_float+0x2c8>)
 8008d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d94:	f7f7 fed2 	bl	8000b3c <__aeabi_dcmpun>
 8008d98:	bb70      	cbnz	r0, 8008df8 <_printf_float+0xc0>
 8008d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d9e:	4b98      	ldr	r3, [pc, #608]	@ (8009000 <_printf_float+0x2c8>)
 8008da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008da4:	f7f7 feac 	bl	8000b00 <__aeabi_dcmple>
 8008da8:	bb30      	cbnz	r0, 8008df8 <_printf_float+0xc0>
 8008daa:	2200      	movs	r2, #0
 8008dac:	2300      	movs	r3, #0
 8008dae:	4640      	mov	r0, r8
 8008db0:	4649      	mov	r1, r9
 8008db2:	f7f7 fe9b 	bl	8000aec <__aeabi_dcmplt>
 8008db6:	b110      	cbz	r0, 8008dbe <_printf_float+0x86>
 8008db8:	232d      	movs	r3, #45	@ 0x2d
 8008dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dbe:	4a91      	ldr	r2, [pc, #580]	@ (8009004 <_printf_float+0x2cc>)
 8008dc0:	4b91      	ldr	r3, [pc, #580]	@ (8009008 <_printf_float+0x2d0>)
 8008dc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008dc6:	bf94      	ite	ls
 8008dc8:	4690      	movls	r8, r2
 8008dca:	4698      	movhi	r8, r3
 8008dcc:	2303      	movs	r3, #3
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	f02b 0304 	bic.w	r3, fp, #4
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	f04f 0900 	mov.w	r9, #0
 8008dda:	9700      	str	r7, [sp, #0]
 8008ddc:	4633      	mov	r3, r6
 8008dde:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008de0:	4621      	mov	r1, r4
 8008de2:	4628      	mov	r0, r5
 8008de4:	f000 f9d2 	bl	800918c <_printf_common>
 8008de8:	3001      	adds	r0, #1
 8008dea:	f040 808d 	bne.w	8008f08 <_printf_float+0x1d0>
 8008dee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008df2:	b00d      	add	sp, #52	@ 0x34
 8008df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df8:	4642      	mov	r2, r8
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	4649      	mov	r1, r9
 8008e00:	f7f7 fe9c 	bl	8000b3c <__aeabi_dcmpun>
 8008e04:	b140      	cbz	r0, 8008e18 <_printf_float+0xe0>
 8008e06:	464b      	mov	r3, r9
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bfbc      	itt	lt
 8008e0c:	232d      	movlt	r3, #45	@ 0x2d
 8008e0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e12:	4a7e      	ldr	r2, [pc, #504]	@ (800900c <_printf_float+0x2d4>)
 8008e14:	4b7e      	ldr	r3, [pc, #504]	@ (8009010 <_printf_float+0x2d8>)
 8008e16:	e7d4      	b.n	8008dc2 <_printf_float+0x8a>
 8008e18:	6863      	ldr	r3, [r4, #4]
 8008e1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008e1e:	9206      	str	r2, [sp, #24]
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	d13b      	bne.n	8008e9c <_printf_float+0x164>
 8008e24:	2306      	movs	r3, #6
 8008e26:	6063      	str	r3, [r4, #4]
 8008e28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	6022      	str	r2, [r4, #0]
 8008e30:	9303      	str	r3, [sp, #12]
 8008e32:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008e38:	ab09      	add	r3, sp, #36	@ 0x24
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	6861      	ldr	r1, [r4, #4]
 8008e3e:	ec49 8b10 	vmov	d0, r8, r9
 8008e42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008e46:	4628      	mov	r0, r5
 8008e48:	f7ff fed6 	bl	8008bf8 <__cvt>
 8008e4c:	9b06      	ldr	r3, [sp, #24]
 8008e4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e50:	2b47      	cmp	r3, #71	@ 0x47
 8008e52:	4680      	mov	r8, r0
 8008e54:	d129      	bne.n	8008eaa <_printf_float+0x172>
 8008e56:	1cc8      	adds	r0, r1, #3
 8008e58:	db02      	blt.n	8008e60 <_printf_float+0x128>
 8008e5a:	6863      	ldr	r3, [r4, #4]
 8008e5c:	4299      	cmp	r1, r3
 8008e5e:	dd41      	ble.n	8008ee4 <_printf_float+0x1ac>
 8008e60:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e64:	fa5f fa8a 	uxtb.w	sl, sl
 8008e68:	3901      	subs	r1, #1
 8008e6a:	4652      	mov	r2, sl
 8008e6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e70:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e72:	f7ff ff26 	bl	8008cc2 <__exponent>
 8008e76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e78:	1813      	adds	r3, r2, r0
 8008e7a:	2a01      	cmp	r2, #1
 8008e7c:	4681      	mov	r9, r0
 8008e7e:	6123      	str	r3, [r4, #16]
 8008e80:	dc02      	bgt.n	8008e88 <_printf_float+0x150>
 8008e82:	6822      	ldr	r2, [r4, #0]
 8008e84:	07d2      	lsls	r2, r2, #31
 8008e86:	d501      	bpl.n	8008e8c <_printf_float+0x154>
 8008e88:	3301      	adds	r3, #1
 8008e8a:	6123      	str	r3, [r4, #16]
 8008e8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0a2      	beq.n	8008dda <_printf_float+0xa2>
 8008e94:	232d      	movs	r3, #45	@ 0x2d
 8008e96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e9a:	e79e      	b.n	8008dda <_printf_float+0xa2>
 8008e9c:	9a06      	ldr	r2, [sp, #24]
 8008e9e:	2a47      	cmp	r2, #71	@ 0x47
 8008ea0:	d1c2      	bne.n	8008e28 <_printf_float+0xf0>
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1c0      	bne.n	8008e28 <_printf_float+0xf0>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e7bd      	b.n	8008e26 <_printf_float+0xee>
 8008eaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008eae:	d9db      	bls.n	8008e68 <_printf_float+0x130>
 8008eb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008eb4:	d118      	bne.n	8008ee8 <_printf_float+0x1b0>
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	6863      	ldr	r3, [r4, #4]
 8008eba:	dd0b      	ble.n	8008ed4 <_printf_float+0x19c>
 8008ebc:	6121      	str	r1, [r4, #16]
 8008ebe:	b913      	cbnz	r3, 8008ec6 <_printf_float+0x18e>
 8008ec0:	6822      	ldr	r2, [r4, #0]
 8008ec2:	07d0      	lsls	r0, r2, #31
 8008ec4:	d502      	bpl.n	8008ecc <_printf_float+0x194>
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	440b      	add	r3, r1
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008ece:	f04f 0900 	mov.w	r9, #0
 8008ed2:	e7db      	b.n	8008e8c <_printf_float+0x154>
 8008ed4:	b913      	cbnz	r3, 8008edc <_printf_float+0x1a4>
 8008ed6:	6822      	ldr	r2, [r4, #0]
 8008ed8:	07d2      	lsls	r2, r2, #31
 8008eda:	d501      	bpl.n	8008ee0 <_printf_float+0x1a8>
 8008edc:	3302      	adds	r3, #2
 8008ede:	e7f4      	b.n	8008eca <_printf_float+0x192>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e7f2      	b.n	8008eca <_printf_float+0x192>
 8008ee4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008ee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eea:	4299      	cmp	r1, r3
 8008eec:	db05      	blt.n	8008efa <_printf_float+0x1c2>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	6121      	str	r1, [r4, #16]
 8008ef2:	07d8      	lsls	r0, r3, #31
 8008ef4:	d5ea      	bpl.n	8008ecc <_printf_float+0x194>
 8008ef6:	1c4b      	adds	r3, r1, #1
 8008ef8:	e7e7      	b.n	8008eca <_printf_float+0x192>
 8008efa:	2900      	cmp	r1, #0
 8008efc:	bfd4      	ite	le
 8008efe:	f1c1 0202 	rsble	r2, r1, #2
 8008f02:	2201      	movgt	r2, #1
 8008f04:	4413      	add	r3, r2
 8008f06:	e7e0      	b.n	8008eca <_printf_float+0x192>
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	055a      	lsls	r2, r3, #21
 8008f0c:	d407      	bmi.n	8008f1e <_printf_float+0x1e6>
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	4642      	mov	r2, r8
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d12b      	bne.n	8008f74 <_printf_float+0x23c>
 8008f1c:	e767      	b.n	8008dee <_printf_float+0xb6>
 8008f1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f22:	f240 80dd 	bls.w	80090e0 <_printf_float+0x3a8>
 8008f26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f7f7 fdd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d033      	beq.n	8008f9e <_printf_float+0x266>
 8008f36:	4a37      	ldr	r2, [pc, #220]	@ (8009014 <_printf_float+0x2dc>)
 8008f38:	2301      	movs	r3, #1
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	47b8      	blx	r7
 8008f40:	3001      	adds	r0, #1
 8008f42:	f43f af54 	beq.w	8008dee <_printf_float+0xb6>
 8008f46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008f4a:	4543      	cmp	r3, r8
 8008f4c:	db02      	blt.n	8008f54 <_printf_float+0x21c>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	07d8      	lsls	r0, r3, #31
 8008f52:	d50f      	bpl.n	8008f74 <_printf_float+0x23c>
 8008f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	47b8      	blx	r7
 8008f5e:	3001      	adds	r0, #1
 8008f60:	f43f af45 	beq.w	8008dee <_printf_float+0xb6>
 8008f64:	f04f 0900 	mov.w	r9, #0
 8008f68:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008f6c:	f104 0a1a 	add.w	sl, r4, #26
 8008f70:	45c8      	cmp	r8, r9
 8008f72:	dc09      	bgt.n	8008f88 <_printf_float+0x250>
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	079b      	lsls	r3, r3, #30
 8008f78:	f100 8103 	bmi.w	8009182 <_printf_float+0x44a>
 8008f7c:	68e0      	ldr	r0, [r4, #12]
 8008f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f80:	4298      	cmp	r0, r3
 8008f82:	bfb8      	it	lt
 8008f84:	4618      	movlt	r0, r3
 8008f86:	e734      	b.n	8008df2 <_printf_float+0xba>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	4652      	mov	r2, sl
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b8      	blx	r7
 8008f92:	3001      	adds	r0, #1
 8008f94:	f43f af2b 	beq.w	8008dee <_printf_float+0xb6>
 8008f98:	f109 0901 	add.w	r9, r9, #1
 8008f9c:	e7e8      	b.n	8008f70 <_printf_float+0x238>
 8008f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	dc39      	bgt.n	8009018 <_printf_float+0x2e0>
 8008fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8009014 <_printf_float+0x2dc>)
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b8      	blx	r7
 8008fae:	3001      	adds	r0, #1
 8008fb0:	f43f af1d 	beq.w	8008dee <_printf_float+0xb6>
 8008fb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008fb8:	ea59 0303 	orrs.w	r3, r9, r3
 8008fbc:	d102      	bne.n	8008fc4 <_printf_float+0x28c>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	07d9      	lsls	r1, r3, #31
 8008fc2:	d5d7      	bpl.n	8008f74 <_printf_float+0x23c>
 8008fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fc8:	4631      	mov	r1, r6
 8008fca:	4628      	mov	r0, r5
 8008fcc:	47b8      	blx	r7
 8008fce:	3001      	adds	r0, #1
 8008fd0:	f43f af0d 	beq.w	8008dee <_printf_float+0xb6>
 8008fd4:	f04f 0a00 	mov.w	sl, #0
 8008fd8:	f104 0b1a 	add.w	fp, r4, #26
 8008fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fde:	425b      	negs	r3, r3
 8008fe0:	4553      	cmp	r3, sl
 8008fe2:	dc01      	bgt.n	8008fe8 <_printf_float+0x2b0>
 8008fe4:	464b      	mov	r3, r9
 8008fe6:	e793      	b.n	8008f10 <_printf_float+0x1d8>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	465a      	mov	r2, fp
 8008fec:	4631      	mov	r1, r6
 8008fee:	4628      	mov	r0, r5
 8008ff0:	47b8      	blx	r7
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	f43f aefb 	beq.w	8008dee <_printf_float+0xb6>
 8008ff8:	f10a 0a01 	add.w	sl, sl, #1
 8008ffc:	e7ee      	b.n	8008fdc <_printf_float+0x2a4>
 8008ffe:	bf00      	nop
 8009000:	7fefffff 	.word	0x7fefffff
 8009004:	0800d810 	.word	0x0800d810
 8009008:	0800d814 	.word	0x0800d814
 800900c:	0800d818 	.word	0x0800d818
 8009010:	0800d81c 	.word	0x0800d81c
 8009014:	0800d820 	.word	0x0800d820
 8009018:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800901a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800901e:	4553      	cmp	r3, sl
 8009020:	bfa8      	it	ge
 8009022:	4653      	movge	r3, sl
 8009024:	2b00      	cmp	r3, #0
 8009026:	4699      	mov	r9, r3
 8009028:	dc36      	bgt.n	8009098 <_printf_float+0x360>
 800902a:	f04f 0b00 	mov.w	fp, #0
 800902e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009032:	f104 021a 	add.w	r2, r4, #26
 8009036:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009038:	9306      	str	r3, [sp, #24]
 800903a:	eba3 0309 	sub.w	r3, r3, r9
 800903e:	455b      	cmp	r3, fp
 8009040:	dc31      	bgt.n	80090a6 <_printf_float+0x36e>
 8009042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009044:	459a      	cmp	sl, r3
 8009046:	dc3a      	bgt.n	80090be <_printf_float+0x386>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	07da      	lsls	r2, r3, #31
 800904c:	d437      	bmi.n	80090be <_printf_float+0x386>
 800904e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009050:	ebaa 0903 	sub.w	r9, sl, r3
 8009054:	9b06      	ldr	r3, [sp, #24]
 8009056:	ebaa 0303 	sub.w	r3, sl, r3
 800905a:	4599      	cmp	r9, r3
 800905c:	bfa8      	it	ge
 800905e:	4699      	movge	r9, r3
 8009060:	f1b9 0f00 	cmp.w	r9, #0
 8009064:	dc33      	bgt.n	80090ce <_printf_float+0x396>
 8009066:	f04f 0800 	mov.w	r8, #0
 800906a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800906e:	f104 0b1a 	add.w	fp, r4, #26
 8009072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009074:	ebaa 0303 	sub.w	r3, sl, r3
 8009078:	eba3 0309 	sub.w	r3, r3, r9
 800907c:	4543      	cmp	r3, r8
 800907e:	f77f af79 	ble.w	8008f74 <_printf_float+0x23c>
 8009082:	2301      	movs	r3, #1
 8009084:	465a      	mov	r2, fp
 8009086:	4631      	mov	r1, r6
 8009088:	4628      	mov	r0, r5
 800908a:	47b8      	blx	r7
 800908c:	3001      	adds	r0, #1
 800908e:	f43f aeae 	beq.w	8008dee <_printf_float+0xb6>
 8009092:	f108 0801 	add.w	r8, r8, #1
 8009096:	e7ec      	b.n	8009072 <_printf_float+0x33a>
 8009098:	4642      	mov	r2, r8
 800909a:	4631      	mov	r1, r6
 800909c:	4628      	mov	r0, r5
 800909e:	47b8      	blx	r7
 80090a0:	3001      	adds	r0, #1
 80090a2:	d1c2      	bne.n	800902a <_printf_float+0x2f2>
 80090a4:	e6a3      	b.n	8008dee <_printf_float+0xb6>
 80090a6:	2301      	movs	r3, #1
 80090a8:	4631      	mov	r1, r6
 80090aa:	4628      	mov	r0, r5
 80090ac:	9206      	str	r2, [sp, #24]
 80090ae:	47b8      	blx	r7
 80090b0:	3001      	adds	r0, #1
 80090b2:	f43f ae9c 	beq.w	8008dee <_printf_float+0xb6>
 80090b6:	9a06      	ldr	r2, [sp, #24]
 80090b8:	f10b 0b01 	add.w	fp, fp, #1
 80090bc:	e7bb      	b.n	8009036 <_printf_float+0x2fe>
 80090be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	d1c0      	bne.n	800904e <_printf_float+0x316>
 80090cc:	e68f      	b.n	8008dee <_printf_float+0xb6>
 80090ce:	9a06      	ldr	r2, [sp, #24]
 80090d0:	464b      	mov	r3, r9
 80090d2:	4442      	add	r2, r8
 80090d4:	4631      	mov	r1, r6
 80090d6:	4628      	mov	r0, r5
 80090d8:	47b8      	blx	r7
 80090da:	3001      	adds	r0, #1
 80090dc:	d1c3      	bne.n	8009066 <_printf_float+0x32e>
 80090de:	e686      	b.n	8008dee <_printf_float+0xb6>
 80090e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090e4:	f1ba 0f01 	cmp.w	sl, #1
 80090e8:	dc01      	bgt.n	80090ee <_printf_float+0x3b6>
 80090ea:	07db      	lsls	r3, r3, #31
 80090ec:	d536      	bpl.n	800915c <_printf_float+0x424>
 80090ee:	2301      	movs	r3, #1
 80090f0:	4642      	mov	r2, r8
 80090f2:	4631      	mov	r1, r6
 80090f4:	4628      	mov	r0, r5
 80090f6:	47b8      	blx	r7
 80090f8:	3001      	adds	r0, #1
 80090fa:	f43f ae78 	beq.w	8008dee <_printf_float+0xb6>
 80090fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	47b8      	blx	r7
 8009108:	3001      	adds	r0, #1
 800910a:	f43f ae70 	beq.w	8008dee <_printf_float+0xb6>
 800910e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009112:	2200      	movs	r2, #0
 8009114:	2300      	movs	r3, #0
 8009116:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800911a:	f7f7 fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800911e:	b9c0      	cbnz	r0, 8009152 <_printf_float+0x41a>
 8009120:	4653      	mov	r3, sl
 8009122:	f108 0201 	add.w	r2, r8, #1
 8009126:	4631      	mov	r1, r6
 8009128:	4628      	mov	r0, r5
 800912a:	47b8      	blx	r7
 800912c:	3001      	adds	r0, #1
 800912e:	d10c      	bne.n	800914a <_printf_float+0x412>
 8009130:	e65d      	b.n	8008dee <_printf_float+0xb6>
 8009132:	2301      	movs	r3, #1
 8009134:	465a      	mov	r2, fp
 8009136:	4631      	mov	r1, r6
 8009138:	4628      	mov	r0, r5
 800913a:	47b8      	blx	r7
 800913c:	3001      	adds	r0, #1
 800913e:	f43f ae56 	beq.w	8008dee <_printf_float+0xb6>
 8009142:	f108 0801 	add.w	r8, r8, #1
 8009146:	45d0      	cmp	r8, sl
 8009148:	dbf3      	blt.n	8009132 <_printf_float+0x3fa>
 800914a:	464b      	mov	r3, r9
 800914c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009150:	e6df      	b.n	8008f12 <_printf_float+0x1da>
 8009152:	f04f 0800 	mov.w	r8, #0
 8009156:	f104 0b1a 	add.w	fp, r4, #26
 800915a:	e7f4      	b.n	8009146 <_printf_float+0x40e>
 800915c:	2301      	movs	r3, #1
 800915e:	4642      	mov	r2, r8
 8009160:	e7e1      	b.n	8009126 <_printf_float+0x3ee>
 8009162:	2301      	movs	r3, #1
 8009164:	464a      	mov	r2, r9
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	f43f ae3e 	beq.w	8008dee <_printf_float+0xb6>
 8009172:	f108 0801 	add.w	r8, r8, #1
 8009176:	68e3      	ldr	r3, [r4, #12]
 8009178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800917a:	1a5b      	subs	r3, r3, r1
 800917c:	4543      	cmp	r3, r8
 800917e:	dcf0      	bgt.n	8009162 <_printf_float+0x42a>
 8009180:	e6fc      	b.n	8008f7c <_printf_float+0x244>
 8009182:	f04f 0800 	mov.w	r8, #0
 8009186:	f104 0919 	add.w	r9, r4, #25
 800918a:	e7f4      	b.n	8009176 <_printf_float+0x43e>

0800918c <_printf_common>:
 800918c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009190:	4616      	mov	r6, r2
 8009192:	4698      	mov	r8, r3
 8009194:	688a      	ldr	r2, [r1, #8]
 8009196:	690b      	ldr	r3, [r1, #16]
 8009198:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800919c:	4293      	cmp	r3, r2
 800919e:	bfb8      	it	lt
 80091a0:	4613      	movlt	r3, r2
 80091a2:	6033      	str	r3, [r6, #0]
 80091a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091a8:	4607      	mov	r7, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	b10a      	cbz	r2, 80091b2 <_printf_common+0x26>
 80091ae:	3301      	adds	r3, #1
 80091b0:	6033      	str	r3, [r6, #0]
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	0699      	lsls	r1, r3, #26
 80091b6:	bf42      	ittt	mi
 80091b8:	6833      	ldrmi	r3, [r6, #0]
 80091ba:	3302      	addmi	r3, #2
 80091bc:	6033      	strmi	r3, [r6, #0]
 80091be:	6825      	ldr	r5, [r4, #0]
 80091c0:	f015 0506 	ands.w	r5, r5, #6
 80091c4:	d106      	bne.n	80091d4 <_printf_common+0x48>
 80091c6:	f104 0a19 	add.w	sl, r4, #25
 80091ca:	68e3      	ldr	r3, [r4, #12]
 80091cc:	6832      	ldr	r2, [r6, #0]
 80091ce:	1a9b      	subs	r3, r3, r2
 80091d0:	42ab      	cmp	r3, r5
 80091d2:	dc26      	bgt.n	8009222 <_printf_common+0x96>
 80091d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091d8:	6822      	ldr	r2, [r4, #0]
 80091da:	3b00      	subs	r3, #0
 80091dc:	bf18      	it	ne
 80091de:	2301      	movne	r3, #1
 80091e0:	0692      	lsls	r2, r2, #26
 80091e2:	d42b      	bmi.n	800923c <_printf_common+0xb0>
 80091e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091e8:	4641      	mov	r1, r8
 80091ea:	4638      	mov	r0, r7
 80091ec:	47c8      	blx	r9
 80091ee:	3001      	adds	r0, #1
 80091f0:	d01e      	beq.n	8009230 <_printf_common+0xa4>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	6922      	ldr	r2, [r4, #16]
 80091f6:	f003 0306 	and.w	r3, r3, #6
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	bf02      	ittt	eq
 80091fe:	68e5      	ldreq	r5, [r4, #12]
 8009200:	6833      	ldreq	r3, [r6, #0]
 8009202:	1aed      	subeq	r5, r5, r3
 8009204:	68a3      	ldr	r3, [r4, #8]
 8009206:	bf0c      	ite	eq
 8009208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800920c:	2500      	movne	r5, #0
 800920e:	4293      	cmp	r3, r2
 8009210:	bfc4      	itt	gt
 8009212:	1a9b      	subgt	r3, r3, r2
 8009214:	18ed      	addgt	r5, r5, r3
 8009216:	2600      	movs	r6, #0
 8009218:	341a      	adds	r4, #26
 800921a:	42b5      	cmp	r5, r6
 800921c:	d11a      	bne.n	8009254 <_printf_common+0xc8>
 800921e:	2000      	movs	r0, #0
 8009220:	e008      	b.n	8009234 <_printf_common+0xa8>
 8009222:	2301      	movs	r3, #1
 8009224:	4652      	mov	r2, sl
 8009226:	4641      	mov	r1, r8
 8009228:	4638      	mov	r0, r7
 800922a:	47c8      	blx	r9
 800922c:	3001      	adds	r0, #1
 800922e:	d103      	bne.n	8009238 <_printf_common+0xac>
 8009230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009238:	3501      	adds	r5, #1
 800923a:	e7c6      	b.n	80091ca <_printf_common+0x3e>
 800923c:	18e1      	adds	r1, r4, r3
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	2030      	movs	r0, #48	@ 0x30
 8009242:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009246:	4422      	add	r2, r4
 8009248:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800924c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009250:	3302      	adds	r3, #2
 8009252:	e7c7      	b.n	80091e4 <_printf_common+0x58>
 8009254:	2301      	movs	r3, #1
 8009256:	4622      	mov	r2, r4
 8009258:	4641      	mov	r1, r8
 800925a:	4638      	mov	r0, r7
 800925c:	47c8      	blx	r9
 800925e:	3001      	adds	r0, #1
 8009260:	d0e6      	beq.n	8009230 <_printf_common+0xa4>
 8009262:	3601      	adds	r6, #1
 8009264:	e7d9      	b.n	800921a <_printf_common+0x8e>
	...

08009268 <_printf_i>:
 8009268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	7e0f      	ldrb	r7, [r1, #24]
 800926e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009270:	2f78      	cmp	r7, #120	@ 0x78
 8009272:	4691      	mov	r9, r2
 8009274:	4680      	mov	r8, r0
 8009276:	460c      	mov	r4, r1
 8009278:	469a      	mov	sl, r3
 800927a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800927e:	d807      	bhi.n	8009290 <_printf_i+0x28>
 8009280:	2f62      	cmp	r7, #98	@ 0x62
 8009282:	d80a      	bhi.n	800929a <_printf_i+0x32>
 8009284:	2f00      	cmp	r7, #0
 8009286:	f000 80d2 	beq.w	800942e <_printf_i+0x1c6>
 800928a:	2f58      	cmp	r7, #88	@ 0x58
 800928c:	f000 80b9 	beq.w	8009402 <_printf_i+0x19a>
 8009290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009294:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009298:	e03a      	b.n	8009310 <_printf_i+0xa8>
 800929a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800929e:	2b15      	cmp	r3, #21
 80092a0:	d8f6      	bhi.n	8009290 <_printf_i+0x28>
 80092a2:	a101      	add	r1, pc, #4	@ (adr r1, 80092a8 <_printf_i+0x40>)
 80092a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092a8:	08009301 	.word	0x08009301
 80092ac:	08009315 	.word	0x08009315
 80092b0:	08009291 	.word	0x08009291
 80092b4:	08009291 	.word	0x08009291
 80092b8:	08009291 	.word	0x08009291
 80092bc:	08009291 	.word	0x08009291
 80092c0:	08009315 	.word	0x08009315
 80092c4:	08009291 	.word	0x08009291
 80092c8:	08009291 	.word	0x08009291
 80092cc:	08009291 	.word	0x08009291
 80092d0:	08009291 	.word	0x08009291
 80092d4:	08009415 	.word	0x08009415
 80092d8:	0800933f 	.word	0x0800933f
 80092dc:	080093cf 	.word	0x080093cf
 80092e0:	08009291 	.word	0x08009291
 80092e4:	08009291 	.word	0x08009291
 80092e8:	08009437 	.word	0x08009437
 80092ec:	08009291 	.word	0x08009291
 80092f0:	0800933f 	.word	0x0800933f
 80092f4:	08009291 	.word	0x08009291
 80092f8:	08009291 	.word	0x08009291
 80092fc:	080093d7 	.word	0x080093d7
 8009300:	6833      	ldr	r3, [r6, #0]
 8009302:	1d1a      	adds	r2, r3, #4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6032      	str	r2, [r6, #0]
 8009308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800930c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009310:	2301      	movs	r3, #1
 8009312:	e09d      	b.n	8009450 <_printf_i+0x1e8>
 8009314:	6833      	ldr	r3, [r6, #0]
 8009316:	6820      	ldr	r0, [r4, #0]
 8009318:	1d19      	adds	r1, r3, #4
 800931a:	6031      	str	r1, [r6, #0]
 800931c:	0606      	lsls	r6, r0, #24
 800931e:	d501      	bpl.n	8009324 <_printf_i+0xbc>
 8009320:	681d      	ldr	r5, [r3, #0]
 8009322:	e003      	b.n	800932c <_printf_i+0xc4>
 8009324:	0645      	lsls	r5, r0, #25
 8009326:	d5fb      	bpl.n	8009320 <_printf_i+0xb8>
 8009328:	f9b3 5000 	ldrsh.w	r5, [r3]
 800932c:	2d00      	cmp	r5, #0
 800932e:	da03      	bge.n	8009338 <_printf_i+0xd0>
 8009330:	232d      	movs	r3, #45	@ 0x2d
 8009332:	426d      	negs	r5, r5
 8009334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009338:	4859      	ldr	r0, [pc, #356]	@ (80094a0 <_printf_i+0x238>)
 800933a:	230a      	movs	r3, #10
 800933c:	e011      	b.n	8009362 <_printf_i+0xfa>
 800933e:	6821      	ldr	r1, [r4, #0]
 8009340:	6833      	ldr	r3, [r6, #0]
 8009342:	0608      	lsls	r0, r1, #24
 8009344:	f853 5b04 	ldr.w	r5, [r3], #4
 8009348:	d402      	bmi.n	8009350 <_printf_i+0xe8>
 800934a:	0649      	lsls	r1, r1, #25
 800934c:	bf48      	it	mi
 800934e:	b2ad      	uxthmi	r5, r5
 8009350:	2f6f      	cmp	r7, #111	@ 0x6f
 8009352:	4853      	ldr	r0, [pc, #332]	@ (80094a0 <_printf_i+0x238>)
 8009354:	6033      	str	r3, [r6, #0]
 8009356:	bf14      	ite	ne
 8009358:	230a      	movne	r3, #10
 800935a:	2308      	moveq	r3, #8
 800935c:	2100      	movs	r1, #0
 800935e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009362:	6866      	ldr	r6, [r4, #4]
 8009364:	60a6      	str	r6, [r4, #8]
 8009366:	2e00      	cmp	r6, #0
 8009368:	bfa2      	ittt	ge
 800936a:	6821      	ldrge	r1, [r4, #0]
 800936c:	f021 0104 	bicge.w	r1, r1, #4
 8009370:	6021      	strge	r1, [r4, #0]
 8009372:	b90d      	cbnz	r5, 8009378 <_printf_i+0x110>
 8009374:	2e00      	cmp	r6, #0
 8009376:	d04b      	beq.n	8009410 <_printf_i+0x1a8>
 8009378:	4616      	mov	r6, r2
 800937a:	fbb5 f1f3 	udiv	r1, r5, r3
 800937e:	fb03 5711 	mls	r7, r3, r1, r5
 8009382:	5dc7      	ldrb	r7, [r0, r7]
 8009384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009388:	462f      	mov	r7, r5
 800938a:	42bb      	cmp	r3, r7
 800938c:	460d      	mov	r5, r1
 800938e:	d9f4      	bls.n	800937a <_printf_i+0x112>
 8009390:	2b08      	cmp	r3, #8
 8009392:	d10b      	bne.n	80093ac <_printf_i+0x144>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	07df      	lsls	r7, r3, #31
 8009398:	d508      	bpl.n	80093ac <_printf_i+0x144>
 800939a:	6923      	ldr	r3, [r4, #16]
 800939c:	6861      	ldr	r1, [r4, #4]
 800939e:	4299      	cmp	r1, r3
 80093a0:	bfde      	ittt	le
 80093a2:	2330      	movle	r3, #48	@ 0x30
 80093a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80093ac:	1b92      	subs	r2, r2, r6
 80093ae:	6122      	str	r2, [r4, #16]
 80093b0:	f8cd a000 	str.w	sl, [sp]
 80093b4:	464b      	mov	r3, r9
 80093b6:	aa03      	add	r2, sp, #12
 80093b8:	4621      	mov	r1, r4
 80093ba:	4640      	mov	r0, r8
 80093bc:	f7ff fee6 	bl	800918c <_printf_common>
 80093c0:	3001      	adds	r0, #1
 80093c2:	d14a      	bne.n	800945a <_printf_i+0x1f2>
 80093c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093c8:	b004      	add	sp, #16
 80093ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	f043 0320 	orr.w	r3, r3, #32
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	4833      	ldr	r0, [pc, #204]	@ (80094a4 <_printf_i+0x23c>)
 80093d8:	2778      	movs	r7, #120	@ 0x78
 80093da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	6831      	ldr	r1, [r6, #0]
 80093e2:	061f      	lsls	r7, r3, #24
 80093e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80093e8:	d402      	bmi.n	80093f0 <_printf_i+0x188>
 80093ea:	065f      	lsls	r7, r3, #25
 80093ec:	bf48      	it	mi
 80093ee:	b2ad      	uxthmi	r5, r5
 80093f0:	6031      	str	r1, [r6, #0]
 80093f2:	07d9      	lsls	r1, r3, #31
 80093f4:	bf44      	itt	mi
 80093f6:	f043 0320 	orrmi.w	r3, r3, #32
 80093fa:	6023      	strmi	r3, [r4, #0]
 80093fc:	b11d      	cbz	r5, 8009406 <_printf_i+0x19e>
 80093fe:	2310      	movs	r3, #16
 8009400:	e7ac      	b.n	800935c <_printf_i+0xf4>
 8009402:	4827      	ldr	r0, [pc, #156]	@ (80094a0 <_printf_i+0x238>)
 8009404:	e7e9      	b.n	80093da <_printf_i+0x172>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	f023 0320 	bic.w	r3, r3, #32
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	e7f6      	b.n	80093fe <_printf_i+0x196>
 8009410:	4616      	mov	r6, r2
 8009412:	e7bd      	b.n	8009390 <_printf_i+0x128>
 8009414:	6833      	ldr	r3, [r6, #0]
 8009416:	6825      	ldr	r5, [r4, #0]
 8009418:	6961      	ldr	r1, [r4, #20]
 800941a:	1d18      	adds	r0, r3, #4
 800941c:	6030      	str	r0, [r6, #0]
 800941e:	062e      	lsls	r6, r5, #24
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	d501      	bpl.n	8009428 <_printf_i+0x1c0>
 8009424:	6019      	str	r1, [r3, #0]
 8009426:	e002      	b.n	800942e <_printf_i+0x1c6>
 8009428:	0668      	lsls	r0, r5, #25
 800942a:	d5fb      	bpl.n	8009424 <_printf_i+0x1bc>
 800942c:	8019      	strh	r1, [r3, #0]
 800942e:	2300      	movs	r3, #0
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	4616      	mov	r6, r2
 8009434:	e7bc      	b.n	80093b0 <_printf_i+0x148>
 8009436:	6833      	ldr	r3, [r6, #0]
 8009438:	1d1a      	adds	r2, r3, #4
 800943a:	6032      	str	r2, [r6, #0]
 800943c:	681e      	ldr	r6, [r3, #0]
 800943e:	6862      	ldr	r2, [r4, #4]
 8009440:	2100      	movs	r1, #0
 8009442:	4630      	mov	r0, r6
 8009444:	f7f6 fecc 	bl	80001e0 <memchr>
 8009448:	b108      	cbz	r0, 800944e <_printf_i+0x1e6>
 800944a:	1b80      	subs	r0, r0, r6
 800944c:	6060      	str	r0, [r4, #4]
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	6123      	str	r3, [r4, #16]
 8009452:	2300      	movs	r3, #0
 8009454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009458:	e7aa      	b.n	80093b0 <_printf_i+0x148>
 800945a:	6923      	ldr	r3, [r4, #16]
 800945c:	4632      	mov	r2, r6
 800945e:	4649      	mov	r1, r9
 8009460:	4640      	mov	r0, r8
 8009462:	47d0      	blx	sl
 8009464:	3001      	adds	r0, #1
 8009466:	d0ad      	beq.n	80093c4 <_printf_i+0x15c>
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	079b      	lsls	r3, r3, #30
 800946c:	d413      	bmi.n	8009496 <_printf_i+0x22e>
 800946e:	68e0      	ldr	r0, [r4, #12]
 8009470:	9b03      	ldr	r3, [sp, #12]
 8009472:	4298      	cmp	r0, r3
 8009474:	bfb8      	it	lt
 8009476:	4618      	movlt	r0, r3
 8009478:	e7a6      	b.n	80093c8 <_printf_i+0x160>
 800947a:	2301      	movs	r3, #1
 800947c:	4632      	mov	r2, r6
 800947e:	4649      	mov	r1, r9
 8009480:	4640      	mov	r0, r8
 8009482:	47d0      	blx	sl
 8009484:	3001      	adds	r0, #1
 8009486:	d09d      	beq.n	80093c4 <_printf_i+0x15c>
 8009488:	3501      	adds	r5, #1
 800948a:	68e3      	ldr	r3, [r4, #12]
 800948c:	9903      	ldr	r1, [sp, #12]
 800948e:	1a5b      	subs	r3, r3, r1
 8009490:	42ab      	cmp	r3, r5
 8009492:	dcf2      	bgt.n	800947a <_printf_i+0x212>
 8009494:	e7eb      	b.n	800946e <_printf_i+0x206>
 8009496:	2500      	movs	r5, #0
 8009498:	f104 0619 	add.w	r6, r4, #25
 800949c:	e7f5      	b.n	800948a <_printf_i+0x222>
 800949e:	bf00      	nop
 80094a0:	0800d822 	.word	0x0800d822
 80094a4:	0800d833 	.word	0x0800d833

080094a8 <_scanf_float>:
 80094a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	b087      	sub	sp, #28
 80094ae:	4617      	mov	r7, r2
 80094b0:	9303      	str	r3, [sp, #12]
 80094b2:	688b      	ldr	r3, [r1, #8]
 80094b4:	1e5a      	subs	r2, r3, #1
 80094b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80094ba:	bf81      	itttt	hi
 80094bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80094c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80094c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80094c8:	608b      	strhi	r3, [r1, #8]
 80094ca:	680b      	ldr	r3, [r1, #0]
 80094cc:	460a      	mov	r2, r1
 80094ce:	f04f 0500 	mov.w	r5, #0
 80094d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80094d6:	f842 3b1c 	str.w	r3, [r2], #28
 80094da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80094de:	4680      	mov	r8, r0
 80094e0:	460c      	mov	r4, r1
 80094e2:	bf98      	it	ls
 80094e4:	f04f 0b00 	movls.w	fp, #0
 80094e8:	9201      	str	r2, [sp, #4]
 80094ea:	4616      	mov	r6, r2
 80094ec:	46aa      	mov	sl, r5
 80094ee:	46a9      	mov	r9, r5
 80094f0:	9502      	str	r5, [sp, #8]
 80094f2:	68a2      	ldr	r2, [r4, #8]
 80094f4:	b152      	cbz	r2, 800950c <_scanf_float+0x64>
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80094fc:	d864      	bhi.n	80095c8 <_scanf_float+0x120>
 80094fe:	2b40      	cmp	r3, #64	@ 0x40
 8009500:	d83c      	bhi.n	800957c <_scanf_float+0xd4>
 8009502:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009506:	b2c8      	uxtb	r0, r1
 8009508:	280e      	cmp	r0, #14
 800950a:	d93a      	bls.n	8009582 <_scanf_float+0xda>
 800950c:	f1b9 0f00 	cmp.w	r9, #0
 8009510:	d003      	beq.n	800951a <_scanf_float+0x72>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800951e:	f1ba 0f01 	cmp.w	sl, #1
 8009522:	f200 8117 	bhi.w	8009754 <_scanf_float+0x2ac>
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	429e      	cmp	r6, r3
 800952a:	f200 8108 	bhi.w	800973e <_scanf_float+0x296>
 800952e:	2001      	movs	r0, #1
 8009530:	b007      	add	sp, #28
 8009532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009536:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800953a:	2a0d      	cmp	r2, #13
 800953c:	d8e6      	bhi.n	800950c <_scanf_float+0x64>
 800953e:	a101      	add	r1, pc, #4	@ (adr r1, 8009544 <_scanf_float+0x9c>)
 8009540:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009544:	0800968b 	.word	0x0800968b
 8009548:	0800950d 	.word	0x0800950d
 800954c:	0800950d 	.word	0x0800950d
 8009550:	0800950d 	.word	0x0800950d
 8009554:	080096eb 	.word	0x080096eb
 8009558:	080096c3 	.word	0x080096c3
 800955c:	0800950d 	.word	0x0800950d
 8009560:	0800950d 	.word	0x0800950d
 8009564:	08009699 	.word	0x08009699
 8009568:	0800950d 	.word	0x0800950d
 800956c:	0800950d 	.word	0x0800950d
 8009570:	0800950d 	.word	0x0800950d
 8009574:	0800950d 	.word	0x0800950d
 8009578:	08009651 	.word	0x08009651
 800957c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009580:	e7db      	b.n	800953a <_scanf_float+0x92>
 8009582:	290e      	cmp	r1, #14
 8009584:	d8c2      	bhi.n	800950c <_scanf_float+0x64>
 8009586:	a001      	add	r0, pc, #4	@ (adr r0, 800958c <_scanf_float+0xe4>)
 8009588:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800958c:	08009641 	.word	0x08009641
 8009590:	0800950d 	.word	0x0800950d
 8009594:	08009641 	.word	0x08009641
 8009598:	080096d7 	.word	0x080096d7
 800959c:	0800950d 	.word	0x0800950d
 80095a0:	080095e9 	.word	0x080095e9
 80095a4:	08009627 	.word	0x08009627
 80095a8:	08009627 	.word	0x08009627
 80095ac:	08009627 	.word	0x08009627
 80095b0:	08009627 	.word	0x08009627
 80095b4:	08009627 	.word	0x08009627
 80095b8:	08009627 	.word	0x08009627
 80095bc:	08009627 	.word	0x08009627
 80095c0:	08009627 	.word	0x08009627
 80095c4:	08009627 	.word	0x08009627
 80095c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80095ca:	d809      	bhi.n	80095e0 <_scanf_float+0x138>
 80095cc:	2b60      	cmp	r3, #96	@ 0x60
 80095ce:	d8b2      	bhi.n	8009536 <_scanf_float+0x8e>
 80095d0:	2b54      	cmp	r3, #84	@ 0x54
 80095d2:	d07b      	beq.n	80096cc <_scanf_float+0x224>
 80095d4:	2b59      	cmp	r3, #89	@ 0x59
 80095d6:	d199      	bne.n	800950c <_scanf_float+0x64>
 80095d8:	2d07      	cmp	r5, #7
 80095da:	d197      	bne.n	800950c <_scanf_float+0x64>
 80095dc:	2508      	movs	r5, #8
 80095de:	e02c      	b.n	800963a <_scanf_float+0x192>
 80095e0:	2b74      	cmp	r3, #116	@ 0x74
 80095e2:	d073      	beq.n	80096cc <_scanf_float+0x224>
 80095e4:	2b79      	cmp	r3, #121	@ 0x79
 80095e6:	e7f6      	b.n	80095d6 <_scanf_float+0x12e>
 80095e8:	6821      	ldr	r1, [r4, #0]
 80095ea:	05c8      	lsls	r0, r1, #23
 80095ec:	d51b      	bpl.n	8009626 <_scanf_float+0x17e>
 80095ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80095f2:	6021      	str	r1, [r4, #0]
 80095f4:	f109 0901 	add.w	r9, r9, #1
 80095f8:	f1bb 0f00 	cmp.w	fp, #0
 80095fc:	d003      	beq.n	8009606 <_scanf_float+0x15e>
 80095fe:	3201      	adds	r2, #1
 8009600:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009604:	60a2      	str	r2, [r4, #8]
 8009606:	68a3      	ldr	r3, [r4, #8]
 8009608:	3b01      	subs	r3, #1
 800960a:	60a3      	str	r3, [r4, #8]
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	3301      	adds	r3, #1
 8009610:	6123      	str	r3, [r4, #16]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3b01      	subs	r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	607b      	str	r3, [r7, #4]
 800961a:	f340 8087 	ble.w	800972c <_scanf_float+0x284>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	3301      	adds	r3, #1
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	e765      	b.n	80094f2 <_scanf_float+0x4a>
 8009626:	eb1a 0105 	adds.w	r1, sl, r5
 800962a:	f47f af6f 	bne.w	800950c <_scanf_float+0x64>
 800962e:	6822      	ldr	r2, [r4, #0]
 8009630:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009634:	6022      	str	r2, [r4, #0]
 8009636:	460d      	mov	r5, r1
 8009638:	468a      	mov	sl, r1
 800963a:	f806 3b01 	strb.w	r3, [r6], #1
 800963e:	e7e2      	b.n	8009606 <_scanf_float+0x15e>
 8009640:	6822      	ldr	r2, [r4, #0]
 8009642:	0610      	lsls	r0, r2, #24
 8009644:	f57f af62 	bpl.w	800950c <_scanf_float+0x64>
 8009648:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800964c:	6022      	str	r2, [r4, #0]
 800964e:	e7f4      	b.n	800963a <_scanf_float+0x192>
 8009650:	f1ba 0f00 	cmp.w	sl, #0
 8009654:	d10e      	bne.n	8009674 <_scanf_float+0x1cc>
 8009656:	f1b9 0f00 	cmp.w	r9, #0
 800965a:	d10e      	bne.n	800967a <_scanf_float+0x1d2>
 800965c:	6822      	ldr	r2, [r4, #0]
 800965e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009662:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009666:	d108      	bne.n	800967a <_scanf_float+0x1d2>
 8009668:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800966c:	6022      	str	r2, [r4, #0]
 800966e:	f04f 0a01 	mov.w	sl, #1
 8009672:	e7e2      	b.n	800963a <_scanf_float+0x192>
 8009674:	f1ba 0f02 	cmp.w	sl, #2
 8009678:	d055      	beq.n	8009726 <_scanf_float+0x27e>
 800967a:	2d01      	cmp	r5, #1
 800967c:	d002      	beq.n	8009684 <_scanf_float+0x1dc>
 800967e:	2d04      	cmp	r5, #4
 8009680:	f47f af44 	bne.w	800950c <_scanf_float+0x64>
 8009684:	3501      	adds	r5, #1
 8009686:	b2ed      	uxtb	r5, r5
 8009688:	e7d7      	b.n	800963a <_scanf_float+0x192>
 800968a:	f1ba 0f01 	cmp.w	sl, #1
 800968e:	f47f af3d 	bne.w	800950c <_scanf_float+0x64>
 8009692:	f04f 0a02 	mov.w	sl, #2
 8009696:	e7d0      	b.n	800963a <_scanf_float+0x192>
 8009698:	b97d      	cbnz	r5, 80096ba <_scanf_float+0x212>
 800969a:	f1b9 0f00 	cmp.w	r9, #0
 800969e:	f47f af38 	bne.w	8009512 <_scanf_float+0x6a>
 80096a2:	6822      	ldr	r2, [r4, #0]
 80096a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80096a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80096ac:	f040 8108 	bne.w	80098c0 <_scanf_float+0x418>
 80096b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80096b4:	6022      	str	r2, [r4, #0]
 80096b6:	2501      	movs	r5, #1
 80096b8:	e7bf      	b.n	800963a <_scanf_float+0x192>
 80096ba:	2d03      	cmp	r5, #3
 80096bc:	d0e2      	beq.n	8009684 <_scanf_float+0x1dc>
 80096be:	2d05      	cmp	r5, #5
 80096c0:	e7de      	b.n	8009680 <_scanf_float+0x1d8>
 80096c2:	2d02      	cmp	r5, #2
 80096c4:	f47f af22 	bne.w	800950c <_scanf_float+0x64>
 80096c8:	2503      	movs	r5, #3
 80096ca:	e7b6      	b.n	800963a <_scanf_float+0x192>
 80096cc:	2d06      	cmp	r5, #6
 80096ce:	f47f af1d 	bne.w	800950c <_scanf_float+0x64>
 80096d2:	2507      	movs	r5, #7
 80096d4:	e7b1      	b.n	800963a <_scanf_float+0x192>
 80096d6:	6822      	ldr	r2, [r4, #0]
 80096d8:	0591      	lsls	r1, r2, #22
 80096da:	f57f af17 	bpl.w	800950c <_scanf_float+0x64>
 80096de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80096e2:	6022      	str	r2, [r4, #0]
 80096e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80096e8:	e7a7      	b.n	800963a <_scanf_float+0x192>
 80096ea:	6822      	ldr	r2, [r4, #0]
 80096ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80096f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80096f4:	d006      	beq.n	8009704 <_scanf_float+0x25c>
 80096f6:	0550      	lsls	r0, r2, #21
 80096f8:	f57f af08 	bpl.w	800950c <_scanf_float+0x64>
 80096fc:	f1b9 0f00 	cmp.w	r9, #0
 8009700:	f000 80de 	beq.w	80098c0 <_scanf_float+0x418>
 8009704:	0591      	lsls	r1, r2, #22
 8009706:	bf58      	it	pl
 8009708:	9902      	ldrpl	r1, [sp, #8]
 800970a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800970e:	bf58      	it	pl
 8009710:	eba9 0101 	subpl.w	r1, r9, r1
 8009714:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009718:	bf58      	it	pl
 800971a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800971e:	6022      	str	r2, [r4, #0]
 8009720:	f04f 0900 	mov.w	r9, #0
 8009724:	e789      	b.n	800963a <_scanf_float+0x192>
 8009726:	f04f 0a03 	mov.w	sl, #3
 800972a:	e786      	b.n	800963a <_scanf_float+0x192>
 800972c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009730:	4639      	mov	r1, r7
 8009732:	4640      	mov	r0, r8
 8009734:	4798      	blx	r3
 8009736:	2800      	cmp	r0, #0
 8009738:	f43f aedb 	beq.w	80094f2 <_scanf_float+0x4a>
 800973c:	e6e6      	b.n	800950c <_scanf_float+0x64>
 800973e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009746:	463a      	mov	r2, r7
 8009748:	4640      	mov	r0, r8
 800974a:	4798      	blx	r3
 800974c:	6923      	ldr	r3, [r4, #16]
 800974e:	3b01      	subs	r3, #1
 8009750:	6123      	str	r3, [r4, #16]
 8009752:	e6e8      	b.n	8009526 <_scanf_float+0x7e>
 8009754:	1e6b      	subs	r3, r5, #1
 8009756:	2b06      	cmp	r3, #6
 8009758:	d824      	bhi.n	80097a4 <_scanf_float+0x2fc>
 800975a:	2d02      	cmp	r5, #2
 800975c:	d836      	bhi.n	80097cc <_scanf_float+0x324>
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	429e      	cmp	r6, r3
 8009762:	f67f aee4 	bls.w	800952e <_scanf_float+0x86>
 8009766:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800976a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800976e:	463a      	mov	r2, r7
 8009770:	4640      	mov	r0, r8
 8009772:	4798      	blx	r3
 8009774:	6923      	ldr	r3, [r4, #16]
 8009776:	3b01      	subs	r3, #1
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	e7f0      	b.n	800975e <_scanf_float+0x2b6>
 800977c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009780:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009784:	463a      	mov	r2, r7
 8009786:	4640      	mov	r0, r8
 8009788:	4798      	blx	r3
 800978a:	6923      	ldr	r3, [r4, #16]
 800978c:	3b01      	subs	r3, #1
 800978e:	6123      	str	r3, [r4, #16]
 8009790:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009794:	fa5f fa8a 	uxtb.w	sl, sl
 8009798:	f1ba 0f02 	cmp.w	sl, #2
 800979c:	d1ee      	bne.n	800977c <_scanf_float+0x2d4>
 800979e:	3d03      	subs	r5, #3
 80097a0:	b2ed      	uxtb	r5, r5
 80097a2:	1b76      	subs	r6, r6, r5
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	05da      	lsls	r2, r3, #23
 80097a8:	d530      	bpl.n	800980c <_scanf_float+0x364>
 80097aa:	055b      	lsls	r3, r3, #21
 80097ac:	d511      	bpl.n	80097d2 <_scanf_float+0x32a>
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	429e      	cmp	r6, r3
 80097b2:	f67f aebc 	bls.w	800952e <_scanf_float+0x86>
 80097b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097be:	463a      	mov	r2, r7
 80097c0:	4640      	mov	r0, r8
 80097c2:	4798      	blx	r3
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	6123      	str	r3, [r4, #16]
 80097ca:	e7f0      	b.n	80097ae <_scanf_float+0x306>
 80097cc:	46aa      	mov	sl, r5
 80097ce:	46b3      	mov	fp, r6
 80097d0:	e7de      	b.n	8009790 <_scanf_float+0x2e8>
 80097d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	2965      	cmp	r1, #101	@ 0x65
 80097da:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80097de:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	d00c      	beq.n	8009800 <_scanf_float+0x358>
 80097e6:	2945      	cmp	r1, #69	@ 0x45
 80097e8:	d00a      	beq.n	8009800 <_scanf_float+0x358>
 80097ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097ee:	463a      	mov	r2, r7
 80097f0:	4640      	mov	r0, r8
 80097f2:	4798      	blx	r3
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	1eb5      	subs	r5, r6, #2
 80097fe:	6123      	str	r3, [r4, #16]
 8009800:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009804:	463a      	mov	r2, r7
 8009806:	4640      	mov	r0, r8
 8009808:	4798      	blx	r3
 800980a:	462e      	mov	r6, r5
 800980c:	6822      	ldr	r2, [r4, #0]
 800980e:	f012 0210 	ands.w	r2, r2, #16
 8009812:	d001      	beq.n	8009818 <_scanf_float+0x370>
 8009814:	2000      	movs	r0, #0
 8009816:	e68b      	b.n	8009530 <_scanf_float+0x88>
 8009818:	7032      	strb	r2, [r6, #0]
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009824:	d11c      	bne.n	8009860 <_scanf_float+0x3b8>
 8009826:	9b02      	ldr	r3, [sp, #8]
 8009828:	454b      	cmp	r3, r9
 800982a:	eba3 0209 	sub.w	r2, r3, r9
 800982e:	d123      	bne.n	8009878 <_scanf_float+0x3d0>
 8009830:	9901      	ldr	r1, [sp, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	4640      	mov	r0, r8
 8009836:	f002 fd87 	bl	800c348 <_strtod_r>
 800983a:	9b03      	ldr	r3, [sp, #12]
 800983c:	6821      	ldr	r1, [r4, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f011 0f02 	tst.w	r1, #2
 8009844:	ec57 6b10 	vmov	r6, r7, d0
 8009848:	f103 0204 	add.w	r2, r3, #4
 800984c:	d01f      	beq.n	800988e <_scanf_float+0x3e6>
 800984e:	9903      	ldr	r1, [sp, #12]
 8009850:	600a      	str	r2, [r1, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	e9c3 6700 	strd	r6, r7, [r3]
 8009858:	68e3      	ldr	r3, [r4, #12]
 800985a:	3301      	adds	r3, #1
 800985c:	60e3      	str	r3, [r4, #12]
 800985e:	e7d9      	b.n	8009814 <_scanf_float+0x36c>
 8009860:	9b04      	ldr	r3, [sp, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0e4      	beq.n	8009830 <_scanf_float+0x388>
 8009866:	9905      	ldr	r1, [sp, #20]
 8009868:	230a      	movs	r3, #10
 800986a:	3101      	adds	r1, #1
 800986c:	4640      	mov	r0, r8
 800986e:	f002 fdeb 	bl	800c448 <_strtol_r>
 8009872:	9b04      	ldr	r3, [sp, #16]
 8009874:	9e05      	ldr	r6, [sp, #20]
 8009876:	1ac2      	subs	r2, r0, r3
 8009878:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800987c:	429e      	cmp	r6, r3
 800987e:	bf28      	it	cs
 8009880:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009884:	4910      	ldr	r1, [pc, #64]	@ (80098c8 <_scanf_float+0x420>)
 8009886:	4630      	mov	r0, r6
 8009888:	f000 f942 	bl	8009b10 <siprintf>
 800988c:	e7d0      	b.n	8009830 <_scanf_float+0x388>
 800988e:	f011 0f04 	tst.w	r1, #4
 8009892:	9903      	ldr	r1, [sp, #12]
 8009894:	600a      	str	r2, [r1, #0]
 8009896:	d1dc      	bne.n	8009852 <_scanf_float+0x3aa>
 8009898:	681d      	ldr	r5, [r3, #0]
 800989a:	4632      	mov	r2, r6
 800989c:	463b      	mov	r3, r7
 800989e:	4630      	mov	r0, r6
 80098a0:	4639      	mov	r1, r7
 80098a2:	f7f7 f94b 	bl	8000b3c <__aeabi_dcmpun>
 80098a6:	b128      	cbz	r0, 80098b4 <_scanf_float+0x40c>
 80098a8:	4808      	ldr	r0, [pc, #32]	@ (80098cc <_scanf_float+0x424>)
 80098aa:	f000 fb45 	bl	8009f38 <nanf>
 80098ae:	ed85 0a00 	vstr	s0, [r5]
 80098b2:	e7d1      	b.n	8009858 <_scanf_float+0x3b0>
 80098b4:	4630      	mov	r0, r6
 80098b6:	4639      	mov	r1, r7
 80098b8:	f7f7 f99e 	bl	8000bf8 <__aeabi_d2f>
 80098bc:	6028      	str	r0, [r5, #0]
 80098be:	e7cb      	b.n	8009858 <_scanf_float+0x3b0>
 80098c0:	f04f 0900 	mov.w	r9, #0
 80098c4:	e629      	b.n	800951a <_scanf_float+0x72>
 80098c6:	bf00      	nop
 80098c8:	0800d844 	.word	0x0800d844
 80098cc:	0800dbdd 	.word	0x0800dbdd

080098d0 <std>:
 80098d0:	2300      	movs	r3, #0
 80098d2:	b510      	push	{r4, lr}
 80098d4:	4604      	mov	r4, r0
 80098d6:	e9c0 3300 	strd	r3, r3, [r0]
 80098da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098de:	6083      	str	r3, [r0, #8]
 80098e0:	8181      	strh	r1, [r0, #12]
 80098e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80098e4:	81c2      	strh	r2, [r0, #14]
 80098e6:	6183      	str	r3, [r0, #24]
 80098e8:	4619      	mov	r1, r3
 80098ea:	2208      	movs	r2, #8
 80098ec:	305c      	adds	r0, #92	@ 0x5c
 80098ee:	f000 fa3f 	bl	8009d70 <memset>
 80098f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009928 <std+0x58>)
 80098f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80098f6:	4b0d      	ldr	r3, [pc, #52]	@ (800992c <std+0x5c>)
 80098f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80098fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009930 <std+0x60>)
 80098fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80098fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009934 <std+0x64>)
 8009900:	6323      	str	r3, [r4, #48]	@ 0x30
 8009902:	4b0d      	ldr	r3, [pc, #52]	@ (8009938 <std+0x68>)
 8009904:	6224      	str	r4, [r4, #32]
 8009906:	429c      	cmp	r4, r3
 8009908:	d006      	beq.n	8009918 <std+0x48>
 800990a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800990e:	4294      	cmp	r4, r2
 8009910:	d002      	beq.n	8009918 <std+0x48>
 8009912:	33d0      	adds	r3, #208	@ 0xd0
 8009914:	429c      	cmp	r4, r3
 8009916:	d105      	bne.n	8009924 <std+0x54>
 8009918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800991c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009920:	f000 baf8 	b.w	8009f14 <__retarget_lock_init_recursive>
 8009924:	bd10      	pop	{r4, pc}
 8009926:	bf00      	nop
 8009928:	08009b51 	.word	0x08009b51
 800992c:	08009b73 	.word	0x08009b73
 8009930:	08009bab 	.word	0x08009bab
 8009934:	08009bcf 	.word	0x08009bcf
 8009938:	200056a0 	.word	0x200056a0

0800993c <stdio_exit_handler>:
 800993c:	4a02      	ldr	r2, [pc, #8]	@ (8009948 <stdio_exit_handler+0xc>)
 800993e:	4903      	ldr	r1, [pc, #12]	@ (800994c <stdio_exit_handler+0x10>)
 8009940:	4803      	ldr	r0, [pc, #12]	@ (8009950 <stdio_exit_handler+0x14>)
 8009942:	f000 b869 	b.w	8009a18 <_fwalk_sglue>
 8009946:	bf00      	nop
 8009948:	20000010 	.word	0x20000010
 800994c:	0800c805 	.word	0x0800c805
 8009950:	20000020 	.word	0x20000020

08009954 <cleanup_stdio>:
 8009954:	6841      	ldr	r1, [r0, #4]
 8009956:	4b0c      	ldr	r3, [pc, #48]	@ (8009988 <cleanup_stdio+0x34>)
 8009958:	4299      	cmp	r1, r3
 800995a:	b510      	push	{r4, lr}
 800995c:	4604      	mov	r4, r0
 800995e:	d001      	beq.n	8009964 <cleanup_stdio+0x10>
 8009960:	f002 ff50 	bl	800c804 <_fflush_r>
 8009964:	68a1      	ldr	r1, [r4, #8]
 8009966:	4b09      	ldr	r3, [pc, #36]	@ (800998c <cleanup_stdio+0x38>)
 8009968:	4299      	cmp	r1, r3
 800996a:	d002      	beq.n	8009972 <cleanup_stdio+0x1e>
 800996c:	4620      	mov	r0, r4
 800996e:	f002 ff49 	bl	800c804 <_fflush_r>
 8009972:	68e1      	ldr	r1, [r4, #12]
 8009974:	4b06      	ldr	r3, [pc, #24]	@ (8009990 <cleanup_stdio+0x3c>)
 8009976:	4299      	cmp	r1, r3
 8009978:	d004      	beq.n	8009984 <cleanup_stdio+0x30>
 800997a:	4620      	mov	r0, r4
 800997c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009980:	f002 bf40 	b.w	800c804 <_fflush_r>
 8009984:	bd10      	pop	{r4, pc}
 8009986:	bf00      	nop
 8009988:	200056a0 	.word	0x200056a0
 800998c:	20005708 	.word	0x20005708
 8009990:	20005770 	.word	0x20005770

08009994 <global_stdio_init.part.0>:
 8009994:	b510      	push	{r4, lr}
 8009996:	4b0b      	ldr	r3, [pc, #44]	@ (80099c4 <global_stdio_init.part.0+0x30>)
 8009998:	4c0b      	ldr	r4, [pc, #44]	@ (80099c8 <global_stdio_init.part.0+0x34>)
 800999a:	4a0c      	ldr	r2, [pc, #48]	@ (80099cc <global_stdio_init.part.0+0x38>)
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	4620      	mov	r0, r4
 80099a0:	2200      	movs	r2, #0
 80099a2:	2104      	movs	r1, #4
 80099a4:	f7ff ff94 	bl	80098d0 <std>
 80099a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099ac:	2201      	movs	r2, #1
 80099ae:	2109      	movs	r1, #9
 80099b0:	f7ff ff8e 	bl	80098d0 <std>
 80099b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099b8:	2202      	movs	r2, #2
 80099ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099be:	2112      	movs	r1, #18
 80099c0:	f7ff bf86 	b.w	80098d0 <std>
 80099c4:	200057d8 	.word	0x200057d8
 80099c8:	200056a0 	.word	0x200056a0
 80099cc:	0800993d 	.word	0x0800993d

080099d0 <__sfp_lock_acquire>:
 80099d0:	4801      	ldr	r0, [pc, #4]	@ (80099d8 <__sfp_lock_acquire+0x8>)
 80099d2:	f000 baa0 	b.w	8009f16 <__retarget_lock_acquire_recursive>
 80099d6:	bf00      	nop
 80099d8:	200057e1 	.word	0x200057e1

080099dc <__sfp_lock_release>:
 80099dc:	4801      	ldr	r0, [pc, #4]	@ (80099e4 <__sfp_lock_release+0x8>)
 80099de:	f000 ba9b 	b.w	8009f18 <__retarget_lock_release_recursive>
 80099e2:	bf00      	nop
 80099e4:	200057e1 	.word	0x200057e1

080099e8 <__sinit>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	4604      	mov	r4, r0
 80099ec:	f7ff fff0 	bl	80099d0 <__sfp_lock_acquire>
 80099f0:	6a23      	ldr	r3, [r4, #32]
 80099f2:	b11b      	cbz	r3, 80099fc <__sinit+0x14>
 80099f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099f8:	f7ff bff0 	b.w	80099dc <__sfp_lock_release>
 80099fc:	4b04      	ldr	r3, [pc, #16]	@ (8009a10 <__sinit+0x28>)
 80099fe:	6223      	str	r3, [r4, #32]
 8009a00:	4b04      	ldr	r3, [pc, #16]	@ (8009a14 <__sinit+0x2c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1f5      	bne.n	80099f4 <__sinit+0xc>
 8009a08:	f7ff ffc4 	bl	8009994 <global_stdio_init.part.0>
 8009a0c:	e7f2      	b.n	80099f4 <__sinit+0xc>
 8009a0e:	bf00      	nop
 8009a10:	08009955 	.word	0x08009955
 8009a14:	200057d8 	.word	0x200057d8

08009a18 <_fwalk_sglue>:
 8009a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	4688      	mov	r8, r1
 8009a20:	4614      	mov	r4, r2
 8009a22:	2600      	movs	r6, #0
 8009a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a28:	f1b9 0901 	subs.w	r9, r9, #1
 8009a2c:	d505      	bpl.n	8009a3a <_fwalk_sglue+0x22>
 8009a2e:	6824      	ldr	r4, [r4, #0]
 8009a30:	2c00      	cmp	r4, #0
 8009a32:	d1f7      	bne.n	8009a24 <_fwalk_sglue+0xc>
 8009a34:	4630      	mov	r0, r6
 8009a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3a:	89ab      	ldrh	r3, [r5, #12]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d907      	bls.n	8009a50 <_fwalk_sglue+0x38>
 8009a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a44:	3301      	adds	r3, #1
 8009a46:	d003      	beq.n	8009a50 <_fwalk_sglue+0x38>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	47c0      	blx	r8
 8009a4e:	4306      	orrs	r6, r0
 8009a50:	3568      	adds	r5, #104	@ 0x68
 8009a52:	e7e9      	b.n	8009a28 <_fwalk_sglue+0x10>

08009a54 <_puts_r>:
 8009a54:	6a03      	ldr	r3, [r0, #32]
 8009a56:	b570      	push	{r4, r5, r6, lr}
 8009a58:	6884      	ldr	r4, [r0, #8]
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	460e      	mov	r6, r1
 8009a5e:	b90b      	cbnz	r3, 8009a64 <_puts_r+0x10>
 8009a60:	f7ff ffc2 	bl	80099e8 <__sinit>
 8009a64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a66:	07db      	lsls	r3, r3, #31
 8009a68:	d405      	bmi.n	8009a76 <_puts_r+0x22>
 8009a6a:	89a3      	ldrh	r3, [r4, #12]
 8009a6c:	0598      	lsls	r0, r3, #22
 8009a6e:	d402      	bmi.n	8009a76 <_puts_r+0x22>
 8009a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a72:	f000 fa50 	bl	8009f16 <__retarget_lock_acquire_recursive>
 8009a76:	89a3      	ldrh	r3, [r4, #12]
 8009a78:	0719      	lsls	r1, r3, #28
 8009a7a:	d502      	bpl.n	8009a82 <_puts_r+0x2e>
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d135      	bne.n	8009aee <_puts_r+0x9a>
 8009a82:	4621      	mov	r1, r4
 8009a84:	4628      	mov	r0, r5
 8009a86:	f000 f91d 	bl	8009cc4 <__swsetup_r>
 8009a8a:	b380      	cbz	r0, 8009aee <_puts_r+0x9a>
 8009a8c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009a90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a92:	07da      	lsls	r2, r3, #31
 8009a94:	d405      	bmi.n	8009aa2 <_puts_r+0x4e>
 8009a96:	89a3      	ldrh	r3, [r4, #12]
 8009a98:	059b      	lsls	r3, r3, #22
 8009a9a:	d402      	bmi.n	8009aa2 <_puts_r+0x4e>
 8009a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a9e:	f000 fa3b 	bl	8009f18 <__retarget_lock_release_recursive>
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	bd70      	pop	{r4, r5, r6, pc}
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	da04      	bge.n	8009ab4 <_puts_r+0x60>
 8009aaa:	69a2      	ldr	r2, [r4, #24]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	dc17      	bgt.n	8009ae0 <_puts_r+0x8c>
 8009ab0:	290a      	cmp	r1, #10
 8009ab2:	d015      	beq.n	8009ae0 <_puts_r+0x8c>
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	6022      	str	r2, [r4, #0]
 8009aba:	7019      	strb	r1, [r3, #0]
 8009abc:	68a3      	ldr	r3, [r4, #8]
 8009abe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	60a3      	str	r3, [r4, #8]
 8009ac6:	2900      	cmp	r1, #0
 8009ac8:	d1ed      	bne.n	8009aa6 <_puts_r+0x52>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	da11      	bge.n	8009af2 <_puts_r+0x9e>
 8009ace:	4622      	mov	r2, r4
 8009ad0:	210a      	movs	r1, #10
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f000 f8b8 	bl	8009c48 <__swbuf_r>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d0d7      	beq.n	8009a8c <_puts_r+0x38>
 8009adc:	250a      	movs	r5, #10
 8009ade:	e7d7      	b.n	8009a90 <_puts_r+0x3c>
 8009ae0:	4622      	mov	r2, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 f8b0 	bl	8009c48 <__swbuf_r>
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d1e7      	bne.n	8009abc <_puts_r+0x68>
 8009aec:	e7ce      	b.n	8009a8c <_puts_r+0x38>
 8009aee:	3e01      	subs	r6, #1
 8009af0:	e7e4      	b.n	8009abc <_puts_r+0x68>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	6022      	str	r2, [r4, #0]
 8009af8:	220a      	movs	r2, #10
 8009afa:	701a      	strb	r2, [r3, #0]
 8009afc:	e7ee      	b.n	8009adc <_puts_r+0x88>
	...

08009b00 <puts>:
 8009b00:	4b02      	ldr	r3, [pc, #8]	@ (8009b0c <puts+0xc>)
 8009b02:	4601      	mov	r1, r0
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	f7ff bfa5 	b.w	8009a54 <_puts_r>
 8009b0a:	bf00      	nop
 8009b0c:	2000001c 	.word	0x2000001c

08009b10 <siprintf>:
 8009b10:	b40e      	push	{r1, r2, r3}
 8009b12:	b500      	push	{lr}
 8009b14:	b09c      	sub	sp, #112	@ 0x70
 8009b16:	ab1d      	add	r3, sp, #116	@ 0x74
 8009b18:	9002      	str	r0, [sp, #8]
 8009b1a:	9006      	str	r0, [sp, #24]
 8009b1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b20:	4809      	ldr	r0, [pc, #36]	@ (8009b48 <siprintf+0x38>)
 8009b22:	9107      	str	r1, [sp, #28]
 8009b24:	9104      	str	r1, [sp, #16]
 8009b26:	4909      	ldr	r1, [pc, #36]	@ (8009b4c <siprintf+0x3c>)
 8009b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2c:	9105      	str	r1, [sp, #20]
 8009b2e:	6800      	ldr	r0, [r0, #0]
 8009b30:	9301      	str	r3, [sp, #4]
 8009b32:	a902      	add	r1, sp, #8
 8009b34:	f002 fce6 	bl	800c504 <_svfiprintf_r>
 8009b38:	9b02      	ldr	r3, [sp, #8]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]
 8009b3e:	b01c      	add	sp, #112	@ 0x70
 8009b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b44:	b003      	add	sp, #12
 8009b46:	4770      	bx	lr
 8009b48:	2000001c 	.word	0x2000001c
 8009b4c:	ffff0208 	.word	0xffff0208

08009b50 <__sread>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	460c      	mov	r4, r1
 8009b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b58:	f000 f98e 	bl	8009e78 <_read_r>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	bfab      	itete	ge
 8009b60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b62:	89a3      	ldrhlt	r3, [r4, #12]
 8009b64:	181b      	addge	r3, r3, r0
 8009b66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b6a:	bfac      	ite	ge
 8009b6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b6e:	81a3      	strhlt	r3, [r4, #12]
 8009b70:	bd10      	pop	{r4, pc}

08009b72 <__swrite>:
 8009b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b76:	461f      	mov	r7, r3
 8009b78:	898b      	ldrh	r3, [r1, #12]
 8009b7a:	05db      	lsls	r3, r3, #23
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	4616      	mov	r6, r2
 8009b82:	d505      	bpl.n	8009b90 <__swrite+0x1e>
 8009b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b88:	2302      	movs	r3, #2
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f000 f962 	bl	8009e54 <_lseek_r>
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b9a:	81a3      	strh	r3, [r4, #12]
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	463b      	mov	r3, r7
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba6:	f000 b979 	b.w	8009e9c <_write_r>

08009baa <__sseek>:
 8009baa:	b510      	push	{r4, lr}
 8009bac:	460c      	mov	r4, r1
 8009bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb2:	f000 f94f 	bl	8009e54 <_lseek_r>
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	bf15      	itete	ne
 8009bbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bc6:	81a3      	strheq	r3, [r4, #12]
 8009bc8:	bf18      	it	ne
 8009bca:	81a3      	strhne	r3, [r4, #12]
 8009bcc:	bd10      	pop	{r4, pc}

08009bce <__sclose>:
 8009bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd2:	f000 b8d9 	b.w	8009d88 <_close_r>

08009bd6 <_vsniprintf_r>:
 8009bd6:	b530      	push	{r4, r5, lr}
 8009bd8:	4614      	mov	r4, r2
 8009bda:	2c00      	cmp	r4, #0
 8009bdc:	b09b      	sub	sp, #108	@ 0x6c
 8009bde:	4605      	mov	r5, r0
 8009be0:	461a      	mov	r2, r3
 8009be2:	da05      	bge.n	8009bf0 <_vsniprintf_r+0x1a>
 8009be4:	238b      	movs	r3, #139	@ 0x8b
 8009be6:	6003      	str	r3, [r0, #0]
 8009be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bec:	b01b      	add	sp, #108	@ 0x6c
 8009bee:	bd30      	pop	{r4, r5, pc}
 8009bf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009bf4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009bf8:	bf14      	ite	ne
 8009bfa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009bfe:	4623      	moveq	r3, r4
 8009c00:	9302      	str	r3, [sp, #8]
 8009c02:	9305      	str	r3, [sp, #20]
 8009c04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c08:	9100      	str	r1, [sp, #0]
 8009c0a:	9104      	str	r1, [sp, #16]
 8009c0c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009c10:	4669      	mov	r1, sp
 8009c12:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009c14:	f002 fc76 	bl	800c504 <_svfiprintf_r>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	bfbc      	itt	lt
 8009c1c:	238b      	movlt	r3, #139	@ 0x8b
 8009c1e:	602b      	strlt	r3, [r5, #0]
 8009c20:	2c00      	cmp	r4, #0
 8009c22:	d0e3      	beq.n	8009bec <_vsniprintf_r+0x16>
 8009c24:	9b00      	ldr	r3, [sp, #0]
 8009c26:	2200      	movs	r2, #0
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	e7df      	b.n	8009bec <_vsniprintf_r+0x16>

08009c2c <vsniprintf>:
 8009c2c:	b507      	push	{r0, r1, r2, lr}
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4613      	mov	r3, r2
 8009c32:	460a      	mov	r2, r1
 8009c34:	4601      	mov	r1, r0
 8009c36:	4803      	ldr	r0, [pc, #12]	@ (8009c44 <vsniprintf+0x18>)
 8009c38:	6800      	ldr	r0, [r0, #0]
 8009c3a:	f7ff ffcc 	bl	8009bd6 <_vsniprintf_r>
 8009c3e:	b003      	add	sp, #12
 8009c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c44:	2000001c 	.word	0x2000001c

08009c48 <__swbuf_r>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	460e      	mov	r6, r1
 8009c4c:	4614      	mov	r4, r2
 8009c4e:	4605      	mov	r5, r0
 8009c50:	b118      	cbz	r0, 8009c5a <__swbuf_r+0x12>
 8009c52:	6a03      	ldr	r3, [r0, #32]
 8009c54:	b90b      	cbnz	r3, 8009c5a <__swbuf_r+0x12>
 8009c56:	f7ff fec7 	bl	80099e8 <__sinit>
 8009c5a:	69a3      	ldr	r3, [r4, #24]
 8009c5c:	60a3      	str	r3, [r4, #8]
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	071a      	lsls	r2, r3, #28
 8009c62:	d501      	bpl.n	8009c68 <__swbuf_r+0x20>
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	b943      	cbnz	r3, 8009c7a <__swbuf_r+0x32>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 f82a 	bl	8009cc4 <__swsetup_r>
 8009c70:	b118      	cbz	r0, 8009c7a <__swbuf_r+0x32>
 8009c72:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009c76:	4638      	mov	r0, r7
 8009c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	6922      	ldr	r2, [r4, #16]
 8009c7e:	1a98      	subs	r0, r3, r2
 8009c80:	6963      	ldr	r3, [r4, #20]
 8009c82:	b2f6      	uxtb	r6, r6
 8009c84:	4283      	cmp	r3, r0
 8009c86:	4637      	mov	r7, r6
 8009c88:	dc05      	bgt.n	8009c96 <__swbuf_r+0x4e>
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f002 fdb9 	bl	800c804 <_fflush_r>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d1ed      	bne.n	8009c72 <__swbuf_r+0x2a>
 8009c96:	68a3      	ldr	r3, [r4, #8]
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	60a3      	str	r3, [r4, #8]
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	6022      	str	r2, [r4, #0]
 8009ca2:	701e      	strb	r6, [r3, #0]
 8009ca4:	6962      	ldr	r2, [r4, #20]
 8009ca6:	1c43      	adds	r3, r0, #1
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d004      	beq.n	8009cb6 <__swbuf_r+0x6e>
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	07db      	lsls	r3, r3, #31
 8009cb0:	d5e1      	bpl.n	8009c76 <__swbuf_r+0x2e>
 8009cb2:	2e0a      	cmp	r6, #10
 8009cb4:	d1df      	bne.n	8009c76 <__swbuf_r+0x2e>
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f002 fda3 	bl	800c804 <_fflush_r>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d0d9      	beq.n	8009c76 <__swbuf_r+0x2e>
 8009cc2:	e7d6      	b.n	8009c72 <__swbuf_r+0x2a>

08009cc4 <__swsetup_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4b29      	ldr	r3, [pc, #164]	@ (8009d6c <__swsetup_r+0xa8>)
 8009cc8:	4605      	mov	r5, r0
 8009cca:	6818      	ldr	r0, [r3, #0]
 8009ccc:	460c      	mov	r4, r1
 8009cce:	b118      	cbz	r0, 8009cd8 <__swsetup_r+0x14>
 8009cd0:	6a03      	ldr	r3, [r0, #32]
 8009cd2:	b90b      	cbnz	r3, 8009cd8 <__swsetup_r+0x14>
 8009cd4:	f7ff fe88 	bl	80099e8 <__sinit>
 8009cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cdc:	0719      	lsls	r1, r3, #28
 8009cde:	d422      	bmi.n	8009d26 <__swsetup_r+0x62>
 8009ce0:	06da      	lsls	r2, r3, #27
 8009ce2:	d407      	bmi.n	8009cf4 <__swsetup_r+0x30>
 8009ce4:	2209      	movs	r2, #9
 8009ce6:	602a      	str	r2, [r5, #0]
 8009ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cf2:	e033      	b.n	8009d5c <__swsetup_r+0x98>
 8009cf4:	0758      	lsls	r0, r3, #29
 8009cf6:	d512      	bpl.n	8009d1e <__swsetup_r+0x5a>
 8009cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cfa:	b141      	cbz	r1, 8009d0e <__swsetup_r+0x4a>
 8009cfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d00:	4299      	cmp	r1, r3
 8009d02:	d002      	beq.n	8009d0a <__swsetup_r+0x46>
 8009d04:	4628      	mov	r0, r5
 8009d06:	f000 ff6b 	bl	800abe0 <_free_r>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d14:	81a3      	strh	r3, [r4, #12]
 8009d16:	2300      	movs	r3, #0
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	f043 0308 	orr.w	r3, r3, #8
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	6923      	ldr	r3, [r4, #16]
 8009d28:	b94b      	cbnz	r3, 8009d3e <__swsetup_r+0x7a>
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d34:	d003      	beq.n	8009d3e <__swsetup_r+0x7a>
 8009d36:	4621      	mov	r1, r4
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f002 fdb1 	bl	800c8a0 <__smakebuf_r>
 8009d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d42:	f013 0201 	ands.w	r2, r3, #1
 8009d46:	d00a      	beq.n	8009d5e <__swsetup_r+0x9a>
 8009d48:	2200      	movs	r2, #0
 8009d4a:	60a2      	str	r2, [r4, #8]
 8009d4c:	6962      	ldr	r2, [r4, #20]
 8009d4e:	4252      	negs	r2, r2
 8009d50:	61a2      	str	r2, [r4, #24]
 8009d52:	6922      	ldr	r2, [r4, #16]
 8009d54:	b942      	cbnz	r2, 8009d68 <__swsetup_r+0xa4>
 8009d56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d5a:	d1c5      	bne.n	8009ce8 <__swsetup_r+0x24>
 8009d5c:	bd38      	pop	{r3, r4, r5, pc}
 8009d5e:	0799      	lsls	r1, r3, #30
 8009d60:	bf58      	it	pl
 8009d62:	6962      	ldrpl	r2, [r4, #20]
 8009d64:	60a2      	str	r2, [r4, #8]
 8009d66:	e7f4      	b.n	8009d52 <__swsetup_r+0x8e>
 8009d68:	2000      	movs	r0, #0
 8009d6a:	e7f7      	b.n	8009d5c <__swsetup_r+0x98>
 8009d6c:	2000001c 	.word	0x2000001c

08009d70 <memset>:
 8009d70:	4402      	add	r2, r0
 8009d72:	4603      	mov	r3, r0
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d100      	bne.n	8009d7a <memset+0xa>
 8009d78:	4770      	bx	lr
 8009d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d7e:	e7f9      	b.n	8009d74 <memset+0x4>

08009d80 <_localeconv_r>:
 8009d80:	4800      	ldr	r0, [pc, #0]	@ (8009d84 <_localeconv_r+0x4>)
 8009d82:	4770      	bx	lr
 8009d84:	2000015c 	.word	0x2000015c

08009d88 <_close_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4d06      	ldr	r5, [pc, #24]	@ (8009da4 <_close_r+0x1c>)
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4604      	mov	r4, r0
 8009d90:	4608      	mov	r0, r1
 8009d92:	602b      	str	r3, [r5, #0]
 8009d94:	f7f7 ffea 	bl	8001d6c <_close>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d102      	bne.n	8009da2 <_close_r+0x1a>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	b103      	cbz	r3, 8009da2 <_close_r+0x1a>
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	200057dc 	.word	0x200057dc

08009da8 <_reclaim_reent>:
 8009da8:	4b29      	ldr	r3, [pc, #164]	@ (8009e50 <_reclaim_reent+0xa8>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4283      	cmp	r3, r0
 8009dae:	b570      	push	{r4, r5, r6, lr}
 8009db0:	4604      	mov	r4, r0
 8009db2:	d04b      	beq.n	8009e4c <_reclaim_reent+0xa4>
 8009db4:	69c3      	ldr	r3, [r0, #28]
 8009db6:	b1ab      	cbz	r3, 8009de4 <_reclaim_reent+0x3c>
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	b16b      	cbz	r3, 8009dd8 <_reclaim_reent+0x30>
 8009dbc:	2500      	movs	r5, #0
 8009dbe:	69e3      	ldr	r3, [r4, #28]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	5959      	ldr	r1, [r3, r5]
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	d13b      	bne.n	8009e40 <_reclaim_reent+0x98>
 8009dc8:	3504      	adds	r5, #4
 8009dca:	2d80      	cmp	r5, #128	@ 0x80
 8009dcc:	d1f7      	bne.n	8009dbe <_reclaim_reent+0x16>
 8009dce:	69e3      	ldr	r3, [r4, #28]
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	68d9      	ldr	r1, [r3, #12]
 8009dd4:	f000 ff04 	bl	800abe0 <_free_r>
 8009dd8:	69e3      	ldr	r3, [r4, #28]
 8009dda:	6819      	ldr	r1, [r3, #0]
 8009ddc:	b111      	cbz	r1, 8009de4 <_reclaim_reent+0x3c>
 8009dde:	4620      	mov	r0, r4
 8009de0:	f000 fefe 	bl	800abe0 <_free_r>
 8009de4:	6961      	ldr	r1, [r4, #20]
 8009de6:	b111      	cbz	r1, 8009dee <_reclaim_reent+0x46>
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 fef9 	bl	800abe0 <_free_r>
 8009dee:	69e1      	ldr	r1, [r4, #28]
 8009df0:	b111      	cbz	r1, 8009df8 <_reclaim_reent+0x50>
 8009df2:	4620      	mov	r0, r4
 8009df4:	f000 fef4 	bl	800abe0 <_free_r>
 8009df8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009dfa:	b111      	cbz	r1, 8009e02 <_reclaim_reent+0x5a>
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f000 feef 	bl	800abe0 <_free_r>
 8009e02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e04:	b111      	cbz	r1, 8009e0c <_reclaim_reent+0x64>
 8009e06:	4620      	mov	r0, r4
 8009e08:	f000 feea 	bl	800abe0 <_free_r>
 8009e0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009e0e:	b111      	cbz	r1, 8009e16 <_reclaim_reent+0x6e>
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 fee5 	bl	800abe0 <_free_r>
 8009e16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009e18:	b111      	cbz	r1, 8009e20 <_reclaim_reent+0x78>
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f000 fee0 	bl	800abe0 <_free_r>
 8009e20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009e22:	b111      	cbz	r1, 8009e2a <_reclaim_reent+0x82>
 8009e24:	4620      	mov	r0, r4
 8009e26:	f000 fedb 	bl	800abe0 <_free_r>
 8009e2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009e2c:	b111      	cbz	r1, 8009e34 <_reclaim_reent+0x8c>
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f000 fed6 	bl	800abe0 <_free_r>
 8009e34:	6a23      	ldr	r3, [r4, #32]
 8009e36:	b14b      	cbz	r3, 8009e4c <_reclaim_reent+0xa4>
 8009e38:	4620      	mov	r0, r4
 8009e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e3e:	4718      	bx	r3
 8009e40:	680e      	ldr	r6, [r1, #0]
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 fecc 	bl	800abe0 <_free_r>
 8009e48:	4631      	mov	r1, r6
 8009e4a:	e7bb      	b.n	8009dc4 <_reclaim_reent+0x1c>
 8009e4c:	bd70      	pop	{r4, r5, r6, pc}
 8009e4e:	bf00      	nop
 8009e50:	2000001c 	.word	0x2000001c

08009e54 <_lseek_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4d07      	ldr	r5, [pc, #28]	@ (8009e74 <_lseek_r+0x20>)
 8009e58:	4604      	mov	r4, r0
 8009e5a:	4608      	mov	r0, r1
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	602a      	str	r2, [r5, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	f7f7 ffa9 	bl	8001dba <_lseek>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_lseek_r+0x1e>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_lseek_r+0x1e>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	200057dc 	.word	0x200057dc

08009e78 <_read_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4d07      	ldr	r5, [pc, #28]	@ (8009e98 <_read_r+0x20>)
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	4608      	mov	r0, r1
 8009e80:	4611      	mov	r1, r2
 8009e82:	2200      	movs	r2, #0
 8009e84:	602a      	str	r2, [r5, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	f7f7 ff37 	bl	8001cfa <_read>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_read_r+0x1e>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_read_r+0x1e>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	200057dc 	.word	0x200057dc

08009e9c <_write_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d07      	ldr	r5, [pc, #28]	@ (8009ebc <_write_r+0x20>)
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	602a      	str	r2, [r5, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f7f7 ff42 	bl	8001d34 <_write>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d102      	bne.n	8009eba <_write_r+0x1e>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	b103      	cbz	r3, 8009eba <_write_r+0x1e>
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	200057dc 	.word	0x200057dc

08009ec0 <__errno>:
 8009ec0:	4b01      	ldr	r3, [pc, #4]	@ (8009ec8 <__errno+0x8>)
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	2000001c 	.word	0x2000001c

08009ecc <__libc_init_array>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	4d0d      	ldr	r5, [pc, #52]	@ (8009f04 <__libc_init_array+0x38>)
 8009ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8009f08 <__libc_init_array+0x3c>)
 8009ed2:	1b64      	subs	r4, r4, r5
 8009ed4:	10a4      	asrs	r4, r4, #2
 8009ed6:	2600      	movs	r6, #0
 8009ed8:	42a6      	cmp	r6, r4
 8009eda:	d109      	bne.n	8009ef0 <__libc_init_array+0x24>
 8009edc:	4d0b      	ldr	r5, [pc, #44]	@ (8009f0c <__libc_init_array+0x40>)
 8009ede:	4c0c      	ldr	r4, [pc, #48]	@ (8009f10 <__libc_init_array+0x44>)
 8009ee0:	f003 fb82 	bl	800d5e8 <_init>
 8009ee4:	1b64      	subs	r4, r4, r5
 8009ee6:	10a4      	asrs	r4, r4, #2
 8009ee8:	2600      	movs	r6, #0
 8009eea:	42a6      	cmp	r6, r4
 8009eec:	d105      	bne.n	8009efa <__libc_init_array+0x2e>
 8009eee:	bd70      	pop	{r4, r5, r6, pc}
 8009ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef4:	4798      	blx	r3
 8009ef6:	3601      	adds	r6, #1
 8009ef8:	e7ee      	b.n	8009ed8 <__libc_init_array+0xc>
 8009efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009efe:	4798      	blx	r3
 8009f00:	3601      	adds	r6, #1
 8009f02:	e7f2      	b.n	8009eea <__libc_init_array+0x1e>
 8009f04:	0800dc50 	.word	0x0800dc50
 8009f08:	0800dc50 	.word	0x0800dc50
 8009f0c:	0800dc50 	.word	0x0800dc50
 8009f10:	0800dc54 	.word	0x0800dc54

08009f14 <__retarget_lock_init_recursive>:
 8009f14:	4770      	bx	lr

08009f16 <__retarget_lock_acquire_recursive>:
 8009f16:	4770      	bx	lr

08009f18 <__retarget_lock_release_recursive>:
 8009f18:	4770      	bx	lr

08009f1a <memcpy>:
 8009f1a:	440a      	add	r2, r1
 8009f1c:	4291      	cmp	r1, r2
 8009f1e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009f22:	d100      	bne.n	8009f26 <memcpy+0xc>
 8009f24:	4770      	bx	lr
 8009f26:	b510      	push	{r4, lr}
 8009f28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f30:	4291      	cmp	r1, r2
 8009f32:	d1f9      	bne.n	8009f28 <memcpy+0xe>
 8009f34:	bd10      	pop	{r4, pc}
	...

08009f38 <nanf>:
 8009f38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009f40 <nanf+0x8>
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	7fc00000 	.word	0x7fc00000

08009f44 <quorem>:
 8009f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f48:	6903      	ldr	r3, [r0, #16]
 8009f4a:	690c      	ldr	r4, [r1, #16]
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	4607      	mov	r7, r0
 8009f50:	db7e      	blt.n	800a050 <quorem+0x10c>
 8009f52:	3c01      	subs	r4, #1
 8009f54:	f101 0814 	add.w	r8, r1, #20
 8009f58:	00a3      	lsls	r3, r4, #2
 8009f5a:	f100 0514 	add.w	r5, r0, #20
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	429a      	cmp	r2, r3
 8009f72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f76:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f7a:	d32e      	bcc.n	8009fda <quorem+0x96>
 8009f7c:	f04f 0a00 	mov.w	sl, #0
 8009f80:	46c4      	mov	ip, r8
 8009f82:	46ae      	mov	lr, r5
 8009f84:	46d3      	mov	fp, sl
 8009f86:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f8a:	b298      	uxth	r0, r3
 8009f8c:	fb06 a000 	mla	r0, r6, r0, sl
 8009f90:	0c02      	lsrs	r2, r0, #16
 8009f92:	0c1b      	lsrs	r3, r3, #16
 8009f94:	fb06 2303 	mla	r3, r6, r3, r2
 8009f98:	f8de 2000 	ldr.w	r2, [lr]
 8009f9c:	b280      	uxth	r0, r0
 8009f9e:	b292      	uxth	r2, r2
 8009fa0:	1a12      	subs	r2, r2, r0
 8009fa2:	445a      	add	r2, fp
 8009fa4:	f8de 0000 	ldr.w	r0, [lr]
 8009fa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009fb2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009fb6:	b292      	uxth	r2, r2
 8009fb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009fbc:	45e1      	cmp	r9, ip
 8009fbe:	f84e 2b04 	str.w	r2, [lr], #4
 8009fc2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009fc6:	d2de      	bcs.n	8009f86 <quorem+0x42>
 8009fc8:	9b00      	ldr	r3, [sp, #0]
 8009fca:	58eb      	ldr	r3, [r5, r3]
 8009fcc:	b92b      	cbnz	r3, 8009fda <quorem+0x96>
 8009fce:	9b01      	ldr	r3, [sp, #4]
 8009fd0:	3b04      	subs	r3, #4
 8009fd2:	429d      	cmp	r5, r3
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	d32f      	bcc.n	800a038 <quorem+0xf4>
 8009fd8:	613c      	str	r4, [r7, #16]
 8009fda:	4638      	mov	r0, r7
 8009fdc:	f001 f9c4 	bl	800b368 <__mcmp>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	db25      	blt.n	800a030 <quorem+0xec>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fec:	f8d1 c000 	ldr.w	ip, [r1]
 8009ff0:	fa1f fe82 	uxth.w	lr, r2
 8009ff4:	fa1f f38c 	uxth.w	r3, ip
 8009ff8:	eba3 030e 	sub.w	r3, r3, lr
 8009ffc:	4403      	add	r3, r0
 8009ffe:	0c12      	lsrs	r2, r2, #16
 800a000:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a004:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a008:	b29b      	uxth	r3, r3
 800a00a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a00e:	45c1      	cmp	r9, r8
 800a010:	f841 3b04 	str.w	r3, [r1], #4
 800a014:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a018:	d2e6      	bcs.n	8009fe8 <quorem+0xa4>
 800a01a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a01e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a022:	b922      	cbnz	r2, 800a02e <quorem+0xea>
 800a024:	3b04      	subs	r3, #4
 800a026:	429d      	cmp	r5, r3
 800a028:	461a      	mov	r2, r3
 800a02a:	d30b      	bcc.n	800a044 <quorem+0x100>
 800a02c:	613c      	str	r4, [r7, #16]
 800a02e:	3601      	adds	r6, #1
 800a030:	4630      	mov	r0, r6
 800a032:	b003      	add	sp, #12
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a038:	6812      	ldr	r2, [r2, #0]
 800a03a:	3b04      	subs	r3, #4
 800a03c:	2a00      	cmp	r2, #0
 800a03e:	d1cb      	bne.n	8009fd8 <quorem+0x94>
 800a040:	3c01      	subs	r4, #1
 800a042:	e7c6      	b.n	8009fd2 <quorem+0x8e>
 800a044:	6812      	ldr	r2, [r2, #0]
 800a046:	3b04      	subs	r3, #4
 800a048:	2a00      	cmp	r2, #0
 800a04a:	d1ef      	bne.n	800a02c <quorem+0xe8>
 800a04c:	3c01      	subs	r4, #1
 800a04e:	e7ea      	b.n	800a026 <quorem+0xe2>
 800a050:	2000      	movs	r0, #0
 800a052:	e7ee      	b.n	800a032 <quorem+0xee>
 800a054:	0000      	movs	r0, r0
	...

0800a058 <_dtoa_r>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	69c7      	ldr	r7, [r0, #28]
 800a05e:	b099      	sub	sp, #100	@ 0x64
 800a060:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a064:	ec55 4b10 	vmov	r4, r5, d0
 800a068:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a06a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a06c:	4683      	mov	fp, r0
 800a06e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a070:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a072:	b97f      	cbnz	r7, 800a094 <_dtoa_r+0x3c>
 800a074:	2010      	movs	r0, #16
 800a076:	f000 fdfd 	bl	800ac74 <malloc>
 800a07a:	4602      	mov	r2, r0
 800a07c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a080:	b920      	cbnz	r0, 800a08c <_dtoa_r+0x34>
 800a082:	4ba7      	ldr	r3, [pc, #668]	@ (800a320 <_dtoa_r+0x2c8>)
 800a084:	21ef      	movs	r1, #239	@ 0xef
 800a086:	48a7      	ldr	r0, [pc, #668]	@ (800a324 <_dtoa_r+0x2cc>)
 800a088:	f002 fcae 	bl	800c9e8 <__assert_func>
 800a08c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a090:	6007      	str	r7, [r0, #0]
 800a092:	60c7      	str	r7, [r0, #12]
 800a094:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a098:	6819      	ldr	r1, [r3, #0]
 800a09a:	b159      	cbz	r1, 800a0b4 <_dtoa_r+0x5c>
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	604a      	str	r2, [r1, #4]
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	4093      	lsls	r3, r2
 800a0a4:	608b      	str	r3, [r1, #8]
 800a0a6:	4658      	mov	r0, fp
 800a0a8:	f000 feda 	bl	800ae60 <_Bfree>
 800a0ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	1e2b      	subs	r3, r5, #0
 800a0b6:	bfb9      	ittee	lt
 800a0b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a0bc:	9303      	strlt	r3, [sp, #12]
 800a0be:	2300      	movge	r3, #0
 800a0c0:	6033      	strge	r3, [r6, #0]
 800a0c2:	9f03      	ldr	r7, [sp, #12]
 800a0c4:	4b98      	ldr	r3, [pc, #608]	@ (800a328 <_dtoa_r+0x2d0>)
 800a0c6:	bfbc      	itt	lt
 800a0c8:	2201      	movlt	r2, #1
 800a0ca:	6032      	strlt	r2, [r6, #0]
 800a0cc:	43bb      	bics	r3, r7
 800a0ce:	d112      	bne.n	800a0f6 <_dtoa_r+0x9e>
 800a0d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a0d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0dc:	4323      	orrs	r3, r4
 800a0de:	f000 854d 	beq.w	800ab7c <_dtoa_r+0xb24>
 800a0e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a33c <_dtoa_r+0x2e4>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 854f 	beq.w	800ab8c <_dtoa_r+0xb34>
 800a0ee:	f10a 0303 	add.w	r3, sl, #3
 800a0f2:	f000 bd49 	b.w	800ab88 <_dtoa_r+0xb30>
 800a0f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	ec51 0b17 	vmov	r0, r1, d7
 800a100:	2300      	movs	r3, #0
 800a102:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a106:	f7f6 fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a10a:	4680      	mov	r8, r0
 800a10c:	b158      	cbz	r0, 800a126 <_dtoa_r+0xce>
 800a10e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a110:	2301      	movs	r3, #1
 800a112:	6013      	str	r3, [r2, #0]
 800a114:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a116:	b113      	cbz	r3, 800a11e <_dtoa_r+0xc6>
 800a118:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a11a:	4b84      	ldr	r3, [pc, #528]	@ (800a32c <_dtoa_r+0x2d4>)
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a340 <_dtoa_r+0x2e8>
 800a122:	f000 bd33 	b.w	800ab8c <_dtoa_r+0xb34>
 800a126:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a12a:	aa16      	add	r2, sp, #88	@ 0x58
 800a12c:	a917      	add	r1, sp, #92	@ 0x5c
 800a12e:	4658      	mov	r0, fp
 800a130:	f001 fa3a 	bl	800b5a8 <__d2b>
 800a134:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a138:	4681      	mov	r9, r0
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	d077      	beq.n	800a22e <_dtoa_r+0x1d6>
 800a13e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a140:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a14c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a150:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a154:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a158:	4619      	mov	r1, r3
 800a15a:	2200      	movs	r2, #0
 800a15c:	4b74      	ldr	r3, [pc, #464]	@ (800a330 <_dtoa_r+0x2d8>)
 800a15e:	f7f6 f89b 	bl	8000298 <__aeabi_dsub>
 800a162:	a369      	add	r3, pc, #420	@ (adr r3, 800a308 <_dtoa_r+0x2b0>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	f7f6 fa4e 	bl	8000608 <__aeabi_dmul>
 800a16c:	a368      	add	r3, pc, #416	@ (adr r3, 800a310 <_dtoa_r+0x2b8>)
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	f7f6 f893 	bl	800029c <__adddf3>
 800a176:	4604      	mov	r4, r0
 800a178:	4630      	mov	r0, r6
 800a17a:	460d      	mov	r5, r1
 800a17c:	f7f6 f9da 	bl	8000534 <__aeabi_i2d>
 800a180:	a365      	add	r3, pc, #404	@ (adr r3, 800a318 <_dtoa_r+0x2c0>)
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f7f6 fa3f 	bl	8000608 <__aeabi_dmul>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	4620      	mov	r0, r4
 800a190:	4629      	mov	r1, r5
 800a192:	f7f6 f883 	bl	800029c <__adddf3>
 800a196:	4604      	mov	r4, r0
 800a198:	460d      	mov	r5, r1
 800a19a:	f7f6 fce5 	bl	8000b68 <__aeabi_d2iz>
 800a19e:	2200      	movs	r2, #0
 800a1a0:	4607      	mov	r7, r0
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	f7f6 fca0 	bl	8000aec <__aeabi_dcmplt>
 800a1ac:	b140      	cbz	r0, 800a1c0 <_dtoa_r+0x168>
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	f7f6 f9c0 	bl	8000534 <__aeabi_i2d>
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	462b      	mov	r3, r5
 800a1b8:	f7f6 fc8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1bc:	b900      	cbnz	r0, 800a1c0 <_dtoa_r+0x168>
 800a1be:	3f01      	subs	r7, #1
 800a1c0:	2f16      	cmp	r7, #22
 800a1c2:	d851      	bhi.n	800a268 <_dtoa_r+0x210>
 800a1c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a334 <_dtoa_r+0x2dc>)
 800a1c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1d2:	f7f6 fc8b 	bl	8000aec <__aeabi_dcmplt>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d048      	beq.n	800a26c <_dtoa_r+0x214>
 800a1da:	3f01      	subs	r7, #1
 800a1dc:	2300      	movs	r3, #0
 800a1de:	9312      	str	r3, [sp, #72]	@ 0x48
 800a1e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a1e2:	1b9b      	subs	r3, r3, r6
 800a1e4:	1e5a      	subs	r2, r3, #1
 800a1e6:	bf44      	itt	mi
 800a1e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a1ec:	2300      	movmi	r3, #0
 800a1ee:	9208      	str	r2, [sp, #32]
 800a1f0:	bf54      	ite	pl
 800a1f2:	f04f 0800 	movpl.w	r8, #0
 800a1f6:	9308      	strmi	r3, [sp, #32]
 800a1f8:	2f00      	cmp	r7, #0
 800a1fa:	db39      	blt.n	800a270 <_dtoa_r+0x218>
 800a1fc:	9b08      	ldr	r3, [sp, #32]
 800a1fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a200:	443b      	add	r3, r7
 800a202:	9308      	str	r3, [sp, #32]
 800a204:	2300      	movs	r3, #0
 800a206:	930a      	str	r3, [sp, #40]	@ 0x28
 800a208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a20a:	2b09      	cmp	r3, #9
 800a20c:	d864      	bhi.n	800a2d8 <_dtoa_r+0x280>
 800a20e:	2b05      	cmp	r3, #5
 800a210:	bfc4      	itt	gt
 800a212:	3b04      	subgt	r3, #4
 800a214:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a218:	f1a3 0302 	sub.w	r3, r3, #2
 800a21c:	bfcc      	ite	gt
 800a21e:	2400      	movgt	r4, #0
 800a220:	2401      	movle	r4, #1
 800a222:	2b03      	cmp	r3, #3
 800a224:	d863      	bhi.n	800a2ee <_dtoa_r+0x296>
 800a226:	e8df f003 	tbb	[pc, r3]
 800a22a:	372a      	.short	0x372a
 800a22c:	5535      	.short	0x5535
 800a22e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a232:	441e      	add	r6, r3
 800a234:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a238:	2b20      	cmp	r3, #32
 800a23a:	bfc1      	itttt	gt
 800a23c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a240:	409f      	lslgt	r7, r3
 800a242:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a246:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a24a:	bfd6      	itet	le
 800a24c:	f1c3 0320 	rsble	r3, r3, #32
 800a250:	ea47 0003 	orrgt.w	r0, r7, r3
 800a254:	fa04 f003 	lslle.w	r0, r4, r3
 800a258:	f7f6 f95c 	bl	8000514 <__aeabi_ui2d>
 800a25c:	2201      	movs	r2, #1
 800a25e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a262:	3e01      	subs	r6, #1
 800a264:	9214      	str	r2, [sp, #80]	@ 0x50
 800a266:	e777      	b.n	800a158 <_dtoa_r+0x100>
 800a268:	2301      	movs	r3, #1
 800a26a:	e7b8      	b.n	800a1de <_dtoa_r+0x186>
 800a26c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a26e:	e7b7      	b.n	800a1e0 <_dtoa_r+0x188>
 800a270:	427b      	negs	r3, r7
 800a272:	930a      	str	r3, [sp, #40]	@ 0x28
 800a274:	2300      	movs	r3, #0
 800a276:	eba8 0807 	sub.w	r8, r8, r7
 800a27a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a27c:	e7c4      	b.n	800a208 <_dtoa_r+0x1b0>
 800a27e:	2300      	movs	r3, #0
 800a280:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a284:	2b00      	cmp	r3, #0
 800a286:	dc35      	bgt.n	800a2f4 <_dtoa_r+0x29c>
 800a288:	2301      	movs	r3, #1
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	9307      	str	r3, [sp, #28]
 800a28e:	461a      	mov	r2, r3
 800a290:	920e      	str	r2, [sp, #56]	@ 0x38
 800a292:	e00b      	b.n	800a2ac <_dtoa_r+0x254>
 800a294:	2301      	movs	r3, #1
 800a296:	e7f3      	b.n	800a280 <_dtoa_r+0x228>
 800a298:	2300      	movs	r3, #0
 800a29a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a29c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a29e:	18fb      	adds	r3, r7, r3
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	9307      	str	r3, [sp, #28]
 800a2a8:	bfb8      	it	lt
 800a2aa:	2301      	movlt	r3, #1
 800a2ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	2204      	movs	r2, #4
 800a2b4:	f102 0514 	add.w	r5, r2, #20
 800a2b8:	429d      	cmp	r5, r3
 800a2ba:	d91f      	bls.n	800a2fc <_dtoa_r+0x2a4>
 800a2bc:	6041      	str	r1, [r0, #4]
 800a2be:	4658      	mov	r0, fp
 800a2c0:	f000 fd8e 	bl	800ade0 <_Balloc>
 800a2c4:	4682      	mov	sl, r0
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d13c      	bne.n	800a344 <_dtoa_r+0x2ec>
 800a2ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a338 <_dtoa_r+0x2e0>)
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800a2d2:	e6d8      	b.n	800a086 <_dtoa_r+0x2e>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e7e0      	b.n	800a29a <_dtoa_r+0x242>
 800a2d8:	2401      	movs	r4, #1
 800a2da:	2300      	movs	r3, #0
 800a2dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a2e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	9307      	str	r3, [sp, #28]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2312      	movs	r3, #18
 800a2ec:	e7d0      	b.n	800a290 <_dtoa_r+0x238>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2f2:	e7f5      	b.n	800a2e0 <_dtoa_r+0x288>
 800a2f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	9307      	str	r3, [sp, #28]
 800a2fa:	e7d7      	b.n	800a2ac <_dtoa_r+0x254>
 800a2fc:	3101      	adds	r1, #1
 800a2fe:	0052      	lsls	r2, r2, #1
 800a300:	e7d8      	b.n	800a2b4 <_dtoa_r+0x25c>
 800a302:	bf00      	nop
 800a304:	f3af 8000 	nop.w
 800a308:	636f4361 	.word	0x636f4361
 800a30c:	3fd287a7 	.word	0x3fd287a7
 800a310:	8b60c8b3 	.word	0x8b60c8b3
 800a314:	3fc68a28 	.word	0x3fc68a28
 800a318:	509f79fb 	.word	0x509f79fb
 800a31c:	3fd34413 	.word	0x3fd34413
 800a320:	0800d856 	.word	0x0800d856
 800a324:	0800d86d 	.word	0x0800d86d
 800a328:	7ff00000 	.word	0x7ff00000
 800a32c:	0800d821 	.word	0x0800d821
 800a330:	3ff80000 	.word	0x3ff80000
 800a334:	0800d968 	.word	0x0800d968
 800a338:	0800d8c5 	.word	0x0800d8c5
 800a33c:	0800d852 	.word	0x0800d852
 800a340:	0800d820 	.word	0x0800d820
 800a344:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a348:	6018      	str	r0, [r3, #0]
 800a34a:	9b07      	ldr	r3, [sp, #28]
 800a34c:	2b0e      	cmp	r3, #14
 800a34e:	f200 80a4 	bhi.w	800a49a <_dtoa_r+0x442>
 800a352:	2c00      	cmp	r4, #0
 800a354:	f000 80a1 	beq.w	800a49a <_dtoa_r+0x442>
 800a358:	2f00      	cmp	r7, #0
 800a35a:	dd33      	ble.n	800a3c4 <_dtoa_r+0x36c>
 800a35c:	4bad      	ldr	r3, [pc, #692]	@ (800a614 <_dtoa_r+0x5bc>)
 800a35e:	f007 020f 	and.w	r2, r7, #15
 800a362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a366:	ed93 7b00 	vldr	d7, [r3]
 800a36a:	05f8      	lsls	r0, r7, #23
 800a36c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a370:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a374:	d516      	bpl.n	800a3a4 <_dtoa_r+0x34c>
 800a376:	4ba8      	ldr	r3, [pc, #672]	@ (800a618 <_dtoa_r+0x5c0>)
 800a378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a37c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a380:	f7f6 fa6c 	bl	800085c <__aeabi_ddiv>
 800a384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a388:	f004 040f 	and.w	r4, r4, #15
 800a38c:	2603      	movs	r6, #3
 800a38e:	4da2      	ldr	r5, [pc, #648]	@ (800a618 <_dtoa_r+0x5c0>)
 800a390:	b954      	cbnz	r4, 800a3a8 <_dtoa_r+0x350>
 800a392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a39a:	f7f6 fa5f 	bl	800085c <__aeabi_ddiv>
 800a39e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a2:	e028      	b.n	800a3f6 <_dtoa_r+0x39e>
 800a3a4:	2602      	movs	r6, #2
 800a3a6:	e7f2      	b.n	800a38e <_dtoa_r+0x336>
 800a3a8:	07e1      	lsls	r1, r4, #31
 800a3aa:	d508      	bpl.n	800a3be <_dtoa_r+0x366>
 800a3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3b4:	f7f6 f928 	bl	8000608 <__aeabi_dmul>
 800a3b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3bc:	3601      	adds	r6, #1
 800a3be:	1064      	asrs	r4, r4, #1
 800a3c0:	3508      	adds	r5, #8
 800a3c2:	e7e5      	b.n	800a390 <_dtoa_r+0x338>
 800a3c4:	f000 80d2 	beq.w	800a56c <_dtoa_r+0x514>
 800a3c8:	427c      	negs	r4, r7
 800a3ca:	4b92      	ldr	r3, [pc, #584]	@ (800a614 <_dtoa_r+0x5bc>)
 800a3cc:	4d92      	ldr	r5, [pc, #584]	@ (800a618 <_dtoa_r+0x5c0>)
 800a3ce:	f004 020f 	and.w	r2, r4, #15
 800a3d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3de:	f7f6 f913 	bl	8000608 <__aeabi_dmul>
 800a3e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3e6:	1124      	asrs	r4, r4, #4
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	2602      	movs	r6, #2
 800a3ec:	2c00      	cmp	r4, #0
 800a3ee:	f040 80b2 	bne.w	800a556 <_dtoa_r+0x4fe>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1d3      	bne.n	800a39e <_dtoa_r+0x346>
 800a3f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 80b7 	beq.w	800a570 <_dtoa_r+0x518>
 800a402:	4b86      	ldr	r3, [pc, #536]	@ (800a61c <_dtoa_r+0x5c4>)
 800a404:	2200      	movs	r2, #0
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	f7f6 fb6f 	bl	8000aec <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f000 80ae 	beq.w	800a570 <_dtoa_r+0x518>
 800a414:	9b07      	ldr	r3, [sp, #28]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 80aa 	beq.w	800a570 <_dtoa_r+0x518>
 800a41c:	9b00      	ldr	r3, [sp, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	dd37      	ble.n	800a492 <_dtoa_r+0x43a>
 800a422:	1e7b      	subs	r3, r7, #1
 800a424:	9304      	str	r3, [sp, #16]
 800a426:	4620      	mov	r0, r4
 800a428:	4b7d      	ldr	r3, [pc, #500]	@ (800a620 <_dtoa_r+0x5c8>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	4629      	mov	r1, r5
 800a42e:	f7f6 f8eb 	bl	8000608 <__aeabi_dmul>
 800a432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a436:	9c00      	ldr	r4, [sp, #0]
 800a438:	3601      	adds	r6, #1
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7f6 f87a 	bl	8000534 <__aeabi_i2d>
 800a440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a444:	f7f6 f8e0 	bl	8000608 <__aeabi_dmul>
 800a448:	4b76      	ldr	r3, [pc, #472]	@ (800a624 <_dtoa_r+0x5cc>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	f7f5 ff26 	bl	800029c <__adddf3>
 800a450:	4605      	mov	r5, r0
 800a452:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a456:	2c00      	cmp	r4, #0
 800a458:	f040 808d 	bne.w	800a576 <_dtoa_r+0x51e>
 800a45c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a460:	4b71      	ldr	r3, [pc, #452]	@ (800a628 <_dtoa_r+0x5d0>)
 800a462:	2200      	movs	r2, #0
 800a464:	f7f5 ff18 	bl	8000298 <__aeabi_dsub>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a470:	462a      	mov	r2, r5
 800a472:	4633      	mov	r3, r6
 800a474:	f7f6 fb58 	bl	8000b28 <__aeabi_dcmpgt>
 800a478:	2800      	cmp	r0, #0
 800a47a:	f040 828b 	bne.w	800a994 <_dtoa_r+0x93c>
 800a47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a482:	462a      	mov	r2, r5
 800a484:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a488:	f7f6 fb30 	bl	8000aec <__aeabi_dcmplt>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	f040 8128 	bne.w	800a6e2 <_dtoa_r+0x68a>
 800a492:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a496:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a49a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f2c0 815a 	blt.w	800a756 <_dtoa_r+0x6fe>
 800a4a2:	2f0e      	cmp	r7, #14
 800a4a4:	f300 8157 	bgt.w	800a756 <_dtoa_r+0x6fe>
 800a4a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a614 <_dtoa_r+0x5bc>)
 800a4aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a4ae:	ed93 7b00 	vldr	d7, [r3]
 800a4b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	ed8d 7b00 	vstr	d7, [sp]
 800a4ba:	da03      	bge.n	800a4c4 <_dtoa_r+0x46c>
 800a4bc:	9b07      	ldr	r3, [sp, #28]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f340 8101 	ble.w	800a6c6 <_dtoa_r+0x66e>
 800a4c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4c8:	4656      	mov	r6, sl
 800a4ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	f7f6 f9c3 	bl	800085c <__aeabi_ddiv>
 800a4d6:	f7f6 fb47 	bl	8000b68 <__aeabi_d2iz>
 800a4da:	4680      	mov	r8, r0
 800a4dc:	f7f6 f82a 	bl	8000534 <__aeabi_i2d>
 800a4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4e4:	f7f6 f890 	bl	8000608 <__aeabi_dmul>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a4f4:	f7f5 fed0 	bl	8000298 <__aeabi_dsub>
 800a4f8:	f806 4b01 	strb.w	r4, [r6], #1
 800a4fc:	9d07      	ldr	r5, [sp, #28]
 800a4fe:	eba6 040a 	sub.w	r4, r6, sl
 800a502:	42a5      	cmp	r5, r4
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	f040 8117 	bne.w	800a73a <_dtoa_r+0x6e2>
 800a50c:	f7f5 fec6 	bl	800029c <__adddf3>
 800a510:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a514:	4604      	mov	r4, r0
 800a516:	460d      	mov	r5, r1
 800a518:	f7f6 fb06 	bl	8000b28 <__aeabi_dcmpgt>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f040 80f9 	bne.w	800a714 <_dtoa_r+0x6bc>
 800a522:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a526:	4620      	mov	r0, r4
 800a528:	4629      	mov	r1, r5
 800a52a:	f7f6 fad5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a52e:	b118      	cbz	r0, 800a538 <_dtoa_r+0x4e0>
 800a530:	f018 0f01 	tst.w	r8, #1
 800a534:	f040 80ee 	bne.w	800a714 <_dtoa_r+0x6bc>
 800a538:	4649      	mov	r1, r9
 800a53a:	4658      	mov	r0, fp
 800a53c:	f000 fc90 	bl	800ae60 <_Bfree>
 800a540:	2300      	movs	r3, #0
 800a542:	7033      	strb	r3, [r6, #0]
 800a544:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a546:	3701      	adds	r7, #1
 800a548:	601f      	str	r7, [r3, #0]
 800a54a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 831d 	beq.w	800ab8c <_dtoa_r+0xb34>
 800a552:	601e      	str	r6, [r3, #0]
 800a554:	e31a      	b.n	800ab8c <_dtoa_r+0xb34>
 800a556:	07e2      	lsls	r2, r4, #31
 800a558:	d505      	bpl.n	800a566 <_dtoa_r+0x50e>
 800a55a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a55e:	f7f6 f853 	bl	8000608 <__aeabi_dmul>
 800a562:	3601      	adds	r6, #1
 800a564:	2301      	movs	r3, #1
 800a566:	1064      	asrs	r4, r4, #1
 800a568:	3508      	adds	r5, #8
 800a56a:	e73f      	b.n	800a3ec <_dtoa_r+0x394>
 800a56c:	2602      	movs	r6, #2
 800a56e:	e742      	b.n	800a3f6 <_dtoa_r+0x39e>
 800a570:	9c07      	ldr	r4, [sp, #28]
 800a572:	9704      	str	r7, [sp, #16]
 800a574:	e761      	b.n	800a43a <_dtoa_r+0x3e2>
 800a576:	4b27      	ldr	r3, [pc, #156]	@ (800a614 <_dtoa_r+0x5bc>)
 800a578:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a57a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a57e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a582:	4454      	add	r4, sl
 800a584:	2900      	cmp	r1, #0
 800a586:	d053      	beq.n	800a630 <_dtoa_r+0x5d8>
 800a588:	4928      	ldr	r1, [pc, #160]	@ (800a62c <_dtoa_r+0x5d4>)
 800a58a:	2000      	movs	r0, #0
 800a58c:	f7f6 f966 	bl	800085c <__aeabi_ddiv>
 800a590:	4633      	mov	r3, r6
 800a592:	462a      	mov	r2, r5
 800a594:	f7f5 fe80 	bl	8000298 <__aeabi_dsub>
 800a598:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a59c:	4656      	mov	r6, sl
 800a59e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5a2:	f7f6 fae1 	bl	8000b68 <__aeabi_d2iz>
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	f7f5 ffc4 	bl	8000534 <__aeabi_i2d>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5b4:	f7f5 fe70 	bl	8000298 <__aeabi_dsub>
 800a5b8:	3530      	adds	r5, #48	@ 0x30
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5c2:	f806 5b01 	strb.w	r5, [r6], #1
 800a5c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5ca:	f7f6 fa8f 	bl	8000aec <__aeabi_dcmplt>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d171      	bne.n	800a6b6 <_dtoa_r+0x65e>
 800a5d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5d6:	4911      	ldr	r1, [pc, #68]	@ (800a61c <_dtoa_r+0x5c4>)
 800a5d8:	2000      	movs	r0, #0
 800a5da:	f7f5 fe5d 	bl	8000298 <__aeabi_dsub>
 800a5de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5e2:	f7f6 fa83 	bl	8000aec <__aeabi_dcmplt>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f040 8095 	bne.w	800a716 <_dtoa_r+0x6be>
 800a5ec:	42a6      	cmp	r6, r4
 800a5ee:	f43f af50 	beq.w	800a492 <_dtoa_r+0x43a>
 800a5f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a5f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a620 <_dtoa_r+0x5c8>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f7f6 f805 	bl	8000608 <__aeabi_dmul>
 800a5fe:	4b08      	ldr	r3, [pc, #32]	@ (800a620 <_dtoa_r+0x5c8>)
 800a600:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a604:	2200      	movs	r2, #0
 800a606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a60a:	f7f5 fffd 	bl	8000608 <__aeabi_dmul>
 800a60e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a612:	e7c4      	b.n	800a59e <_dtoa_r+0x546>
 800a614:	0800d968 	.word	0x0800d968
 800a618:	0800d940 	.word	0x0800d940
 800a61c:	3ff00000 	.word	0x3ff00000
 800a620:	40240000 	.word	0x40240000
 800a624:	401c0000 	.word	0x401c0000
 800a628:	40140000 	.word	0x40140000
 800a62c:	3fe00000 	.word	0x3fe00000
 800a630:	4631      	mov	r1, r6
 800a632:	4628      	mov	r0, r5
 800a634:	f7f5 ffe8 	bl	8000608 <__aeabi_dmul>
 800a638:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a63c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a63e:	4656      	mov	r6, sl
 800a640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a644:	f7f6 fa90 	bl	8000b68 <__aeabi_d2iz>
 800a648:	4605      	mov	r5, r0
 800a64a:	f7f5 ff73 	bl	8000534 <__aeabi_i2d>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a656:	f7f5 fe1f 	bl	8000298 <__aeabi_dsub>
 800a65a:	3530      	adds	r5, #48	@ 0x30
 800a65c:	f806 5b01 	strb.w	r5, [r6], #1
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	42a6      	cmp	r6, r4
 800a666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a66a:	f04f 0200 	mov.w	r2, #0
 800a66e:	d124      	bne.n	800a6ba <_dtoa_r+0x662>
 800a670:	4bac      	ldr	r3, [pc, #688]	@ (800a924 <_dtoa_r+0x8cc>)
 800a672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a676:	f7f5 fe11 	bl	800029c <__adddf3>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a682:	f7f6 fa51 	bl	8000b28 <__aeabi_dcmpgt>
 800a686:	2800      	cmp	r0, #0
 800a688:	d145      	bne.n	800a716 <_dtoa_r+0x6be>
 800a68a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a68e:	49a5      	ldr	r1, [pc, #660]	@ (800a924 <_dtoa_r+0x8cc>)
 800a690:	2000      	movs	r0, #0
 800a692:	f7f5 fe01 	bl	8000298 <__aeabi_dsub>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a69e:	f7f6 fa25 	bl	8000aec <__aeabi_dcmplt>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f43f aef5 	beq.w	800a492 <_dtoa_r+0x43a>
 800a6a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a6aa:	1e73      	subs	r3, r6, #1
 800a6ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800a6ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6b2:	2b30      	cmp	r3, #48	@ 0x30
 800a6b4:	d0f8      	beq.n	800a6a8 <_dtoa_r+0x650>
 800a6b6:	9f04      	ldr	r7, [sp, #16]
 800a6b8:	e73e      	b.n	800a538 <_dtoa_r+0x4e0>
 800a6ba:	4b9b      	ldr	r3, [pc, #620]	@ (800a928 <_dtoa_r+0x8d0>)
 800a6bc:	f7f5 ffa4 	bl	8000608 <__aeabi_dmul>
 800a6c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6c4:	e7bc      	b.n	800a640 <_dtoa_r+0x5e8>
 800a6c6:	d10c      	bne.n	800a6e2 <_dtoa_r+0x68a>
 800a6c8:	4b98      	ldr	r3, [pc, #608]	@ (800a92c <_dtoa_r+0x8d4>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6d0:	f7f5 ff9a 	bl	8000608 <__aeabi_dmul>
 800a6d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6d8:	f7f6 fa1c 	bl	8000b14 <__aeabi_dcmpge>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f000 8157 	beq.w	800a990 <_dtoa_r+0x938>
 800a6e2:	2400      	movs	r4, #0
 800a6e4:	4625      	mov	r5, r4
 800a6e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6e8:	43db      	mvns	r3, r3
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	4656      	mov	r6, sl
 800a6ee:	2700      	movs	r7, #0
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4658      	mov	r0, fp
 800a6f4:	f000 fbb4 	bl	800ae60 <_Bfree>
 800a6f8:	2d00      	cmp	r5, #0
 800a6fa:	d0dc      	beq.n	800a6b6 <_dtoa_r+0x65e>
 800a6fc:	b12f      	cbz	r7, 800a70a <_dtoa_r+0x6b2>
 800a6fe:	42af      	cmp	r7, r5
 800a700:	d003      	beq.n	800a70a <_dtoa_r+0x6b2>
 800a702:	4639      	mov	r1, r7
 800a704:	4658      	mov	r0, fp
 800a706:	f000 fbab 	bl	800ae60 <_Bfree>
 800a70a:	4629      	mov	r1, r5
 800a70c:	4658      	mov	r0, fp
 800a70e:	f000 fba7 	bl	800ae60 <_Bfree>
 800a712:	e7d0      	b.n	800a6b6 <_dtoa_r+0x65e>
 800a714:	9704      	str	r7, [sp, #16]
 800a716:	4633      	mov	r3, r6
 800a718:	461e      	mov	r6, r3
 800a71a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a71e:	2a39      	cmp	r2, #57	@ 0x39
 800a720:	d107      	bne.n	800a732 <_dtoa_r+0x6da>
 800a722:	459a      	cmp	sl, r3
 800a724:	d1f8      	bne.n	800a718 <_dtoa_r+0x6c0>
 800a726:	9a04      	ldr	r2, [sp, #16]
 800a728:	3201      	adds	r2, #1
 800a72a:	9204      	str	r2, [sp, #16]
 800a72c:	2230      	movs	r2, #48	@ 0x30
 800a72e:	f88a 2000 	strb.w	r2, [sl]
 800a732:	781a      	ldrb	r2, [r3, #0]
 800a734:	3201      	adds	r2, #1
 800a736:	701a      	strb	r2, [r3, #0]
 800a738:	e7bd      	b.n	800a6b6 <_dtoa_r+0x65e>
 800a73a:	4b7b      	ldr	r3, [pc, #492]	@ (800a928 <_dtoa_r+0x8d0>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	f7f5 ff63 	bl	8000608 <__aeabi_dmul>
 800a742:	2200      	movs	r2, #0
 800a744:	2300      	movs	r3, #0
 800a746:	4604      	mov	r4, r0
 800a748:	460d      	mov	r5, r1
 800a74a:	f7f6 f9c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a74e:	2800      	cmp	r0, #0
 800a750:	f43f aebb 	beq.w	800a4ca <_dtoa_r+0x472>
 800a754:	e6f0      	b.n	800a538 <_dtoa_r+0x4e0>
 800a756:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a758:	2a00      	cmp	r2, #0
 800a75a:	f000 80db 	beq.w	800a914 <_dtoa_r+0x8bc>
 800a75e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a760:	2a01      	cmp	r2, #1
 800a762:	f300 80bf 	bgt.w	800a8e4 <_dtoa_r+0x88c>
 800a766:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a768:	2a00      	cmp	r2, #0
 800a76a:	f000 80b7 	beq.w	800a8dc <_dtoa_r+0x884>
 800a76e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a772:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a774:	4646      	mov	r6, r8
 800a776:	9a08      	ldr	r2, [sp, #32]
 800a778:	2101      	movs	r1, #1
 800a77a:	441a      	add	r2, r3
 800a77c:	4658      	mov	r0, fp
 800a77e:	4498      	add	r8, r3
 800a780:	9208      	str	r2, [sp, #32]
 800a782:	f000 fc6b 	bl	800b05c <__i2b>
 800a786:	4605      	mov	r5, r0
 800a788:	b15e      	cbz	r6, 800a7a2 <_dtoa_r+0x74a>
 800a78a:	9b08      	ldr	r3, [sp, #32]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dd08      	ble.n	800a7a2 <_dtoa_r+0x74a>
 800a790:	42b3      	cmp	r3, r6
 800a792:	9a08      	ldr	r2, [sp, #32]
 800a794:	bfa8      	it	ge
 800a796:	4633      	movge	r3, r6
 800a798:	eba8 0803 	sub.w	r8, r8, r3
 800a79c:	1af6      	subs	r6, r6, r3
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	9308      	str	r3, [sp, #32]
 800a7a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7a4:	b1f3      	cbz	r3, 800a7e4 <_dtoa_r+0x78c>
 800a7a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 80b7 	beq.w	800a91c <_dtoa_r+0x8c4>
 800a7ae:	b18c      	cbz	r4, 800a7d4 <_dtoa_r+0x77c>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	4658      	mov	r0, fp
 800a7b6:	f000 fd11 	bl	800b1dc <__pow5mult>
 800a7ba:	464a      	mov	r2, r9
 800a7bc:	4601      	mov	r1, r0
 800a7be:	4605      	mov	r5, r0
 800a7c0:	4658      	mov	r0, fp
 800a7c2:	f000 fc61 	bl	800b088 <__multiply>
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	9004      	str	r0, [sp, #16]
 800a7ca:	4658      	mov	r0, fp
 800a7cc:	f000 fb48 	bl	800ae60 <_Bfree>
 800a7d0:	9b04      	ldr	r3, [sp, #16]
 800a7d2:	4699      	mov	r9, r3
 800a7d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7d6:	1b1a      	subs	r2, r3, r4
 800a7d8:	d004      	beq.n	800a7e4 <_dtoa_r+0x78c>
 800a7da:	4649      	mov	r1, r9
 800a7dc:	4658      	mov	r0, fp
 800a7de:	f000 fcfd 	bl	800b1dc <__pow5mult>
 800a7e2:	4681      	mov	r9, r0
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	4658      	mov	r0, fp
 800a7e8:	f000 fc38 	bl	800b05c <__i2b>
 800a7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 81cf 	beq.w	800ab94 <_dtoa_r+0xb3c>
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	4601      	mov	r1, r0
 800a7fa:	4658      	mov	r0, fp
 800a7fc:	f000 fcee 	bl	800b1dc <__pow5mult>
 800a800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a802:	2b01      	cmp	r3, #1
 800a804:	4604      	mov	r4, r0
 800a806:	f300 8095 	bgt.w	800a934 <_dtoa_r+0x8dc>
 800a80a:	9b02      	ldr	r3, [sp, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f040 8087 	bne.w	800a920 <_dtoa_r+0x8c8>
 800a812:	9b03      	ldr	r3, [sp, #12]
 800a814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f040 8089 	bne.w	800a930 <_dtoa_r+0x8d8>
 800a81e:	9b03      	ldr	r3, [sp, #12]
 800a820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a824:	0d1b      	lsrs	r3, r3, #20
 800a826:	051b      	lsls	r3, r3, #20
 800a828:	b12b      	cbz	r3, 800a836 <_dtoa_r+0x7de>
 800a82a:	9b08      	ldr	r3, [sp, #32]
 800a82c:	3301      	adds	r3, #1
 800a82e:	9308      	str	r3, [sp, #32]
 800a830:	f108 0801 	add.w	r8, r8, #1
 800a834:	2301      	movs	r3, #1
 800a836:	930a      	str	r3, [sp, #40]	@ 0x28
 800a838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 81b0 	beq.w	800aba0 <_dtoa_r+0xb48>
 800a840:	6923      	ldr	r3, [r4, #16]
 800a842:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a846:	6918      	ldr	r0, [r3, #16]
 800a848:	f000 fbbc 	bl	800afc4 <__hi0bits>
 800a84c:	f1c0 0020 	rsb	r0, r0, #32
 800a850:	9b08      	ldr	r3, [sp, #32]
 800a852:	4418      	add	r0, r3
 800a854:	f010 001f 	ands.w	r0, r0, #31
 800a858:	d077      	beq.n	800a94a <_dtoa_r+0x8f2>
 800a85a:	f1c0 0320 	rsb	r3, r0, #32
 800a85e:	2b04      	cmp	r3, #4
 800a860:	dd6b      	ble.n	800a93a <_dtoa_r+0x8e2>
 800a862:	9b08      	ldr	r3, [sp, #32]
 800a864:	f1c0 001c 	rsb	r0, r0, #28
 800a868:	4403      	add	r3, r0
 800a86a:	4480      	add	r8, r0
 800a86c:	4406      	add	r6, r0
 800a86e:	9308      	str	r3, [sp, #32]
 800a870:	f1b8 0f00 	cmp.w	r8, #0
 800a874:	dd05      	ble.n	800a882 <_dtoa_r+0x82a>
 800a876:	4649      	mov	r1, r9
 800a878:	4642      	mov	r2, r8
 800a87a:	4658      	mov	r0, fp
 800a87c:	f000 fd08 	bl	800b290 <__lshift>
 800a880:	4681      	mov	r9, r0
 800a882:	9b08      	ldr	r3, [sp, #32]
 800a884:	2b00      	cmp	r3, #0
 800a886:	dd05      	ble.n	800a894 <_dtoa_r+0x83c>
 800a888:	4621      	mov	r1, r4
 800a88a:	461a      	mov	r2, r3
 800a88c:	4658      	mov	r0, fp
 800a88e:	f000 fcff 	bl	800b290 <__lshift>
 800a892:	4604      	mov	r4, r0
 800a894:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a896:	2b00      	cmp	r3, #0
 800a898:	d059      	beq.n	800a94e <_dtoa_r+0x8f6>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4648      	mov	r0, r9
 800a89e:	f000 fd63 	bl	800b368 <__mcmp>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	da53      	bge.n	800a94e <_dtoa_r+0x8f6>
 800a8a6:	1e7b      	subs	r3, r7, #1
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	4649      	mov	r1, r9
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	220a      	movs	r2, #10
 800a8b0:	4658      	mov	r0, fp
 800a8b2:	f000 faf7 	bl	800aea4 <__multadd>
 800a8b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8b8:	4681      	mov	r9, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 8172 	beq.w	800aba4 <_dtoa_r+0xb4c>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	220a      	movs	r2, #10
 800a8c6:	4658      	mov	r0, fp
 800a8c8:	f000 faec 	bl	800aea4 <__multadd>
 800a8cc:	9b00      	ldr	r3, [sp, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	dc67      	bgt.n	800a9a4 <_dtoa_r+0x94c>
 800a8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	dc41      	bgt.n	800a95e <_dtoa_r+0x906>
 800a8da:	e063      	b.n	800a9a4 <_dtoa_r+0x94c>
 800a8dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a8de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a8e2:	e746      	b.n	800a772 <_dtoa_r+0x71a>
 800a8e4:	9b07      	ldr	r3, [sp, #28]
 800a8e6:	1e5c      	subs	r4, r3, #1
 800a8e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ea:	42a3      	cmp	r3, r4
 800a8ec:	bfbf      	itttt	lt
 800a8ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a8f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a8f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a8f4:	1ae3      	sublt	r3, r4, r3
 800a8f6:	bfb4      	ite	lt
 800a8f8:	18d2      	addlt	r2, r2, r3
 800a8fa:	1b1c      	subge	r4, r3, r4
 800a8fc:	9b07      	ldr	r3, [sp, #28]
 800a8fe:	bfbc      	itt	lt
 800a900:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a902:	2400      	movlt	r4, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	bfb5      	itete	lt
 800a908:	eba8 0603 	sublt.w	r6, r8, r3
 800a90c:	9b07      	ldrge	r3, [sp, #28]
 800a90e:	2300      	movlt	r3, #0
 800a910:	4646      	movge	r6, r8
 800a912:	e730      	b.n	800a776 <_dtoa_r+0x71e>
 800a914:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a916:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a918:	4646      	mov	r6, r8
 800a91a:	e735      	b.n	800a788 <_dtoa_r+0x730>
 800a91c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a91e:	e75c      	b.n	800a7da <_dtoa_r+0x782>
 800a920:	2300      	movs	r3, #0
 800a922:	e788      	b.n	800a836 <_dtoa_r+0x7de>
 800a924:	3fe00000 	.word	0x3fe00000
 800a928:	40240000 	.word	0x40240000
 800a92c:	40140000 	.word	0x40140000
 800a930:	9b02      	ldr	r3, [sp, #8]
 800a932:	e780      	b.n	800a836 <_dtoa_r+0x7de>
 800a934:	2300      	movs	r3, #0
 800a936:	930a      	str	r3, [sp, #40]	@ 0x28
 800a938:	e782      	b.n	800a840 <_dtoa_r+0x7e8>
 800a93a:	d099      	beq.n	800a870 <_dtoa_r+0x818>
 800a93c:	9a08      	ldr	r2, [sp, #32]
 800a93e:	331c      	adds	r3, #28
 800a940:	441a      	add	r2, r3
 800a942:	4498      	add	r8, r3
 800a944:	441e      	add	r6, r3
 800a946:	9208      	str	r2, [sp, #32]
 800a948:	e792      	b.n	800a870 <_dtoa_r+0x818>
 800a94a:	4603      	mov	r3, r0
 800a94c:	e7f6      	b.n	800a93c <_dtoa_r+0x8e4>
 800a94e:	9b07      	ldr	r3, [sp, #28]
 800a950:	9704      	str	r7, [sp, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	dc20      	bgt.n	800a998 <_dtoa_r+0x940>
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	dd1e      	ble.n	800a99c <_dtoa_r+0x944>
 800a95e:	9b00      	ldr	r3, [sp, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	f47f aec0 	bne.w	800a6e6 <_dtoa_r+0x68e>
 800a966:	4621      	mov	r1, r4
 800a968:	2205      	movs	r2, #5
 800a96a:	4658      	mov	r0, fp
 800a96c:	f000 fa9a 	bl	800aea4 <__multadd>
 800a970:	4601      	mov	r1, r0
 800a972:	4604      	mov	r4, r0
 800a974:	4648      	mov	r0, r9
 800a976:	f000 fcf7 	bl	800b368 <__mcmp>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	f77f aeb3 	ble.w	800a6e6 <_dtoa_r+0x68e>
 800a980:	4656      	mov	r6, sl
 800a982:	2331      	movs	r3, #49	@ 0x31
 800a984:	f806 3b01 	strb.w	r3, [r6], #1
 800a988:	9b04      	ldr	r3, [sp, #16]
 800a98a:	3301      	adds	r3, #1
 800a98c:	9304      	str	r3, [sp, #16]
 800a98e:	e6ae      	b.n	800a6ee <_dtoa_r+0x696>
 800a990:	9c07      	ldr	r4, [sp, #28]
 800a992:	9704      	str	r7, [sp, #16]
 800a994:	4625      	mov	r5, r4
 800a996:	e7f3      	b.n	800a980 <_dtoa_r+0x928>
 800a998:	9b07      	ldr	r3, [sp, #28]
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 8104 	beq.w	800abac <_dtoa_r+0xb54>
 800a9a4:	2e00      	cmp	r6, #0
 800a9a6:	dd05      	ble.n	800a9b4 <_dtoa_r+0x95c>
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	4632      	mov	r2, r6
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	f000 fc6f 	bl	800b290 <__lshift>
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d05a      	beq.n	800aa70 <_dtoa_r+0xa18>
 800a9ba:	6869      	ldr	r1, [r5, #4]
 800a9bc:	4658      	mov	r0, fp
 800a9be:	f000 fa0f 	bl	800ade0 <_Balloc>
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	b928      	cbnz	r0, 800a9d2 <_dtoa_r+0x97a>
 800a9c6:	4b84      	ldr	r3, [pc, #528]	@ (800abd8 <_dtoa_r+0xb80>)
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a9ce:	f7ff bb5a 	b.w	800a086 <_dtoa_r+0x2e>
 800a9d2:	692a      	ldr	r2, [r5, #16]
 800a9d4:	3202      	adds	r2, #2
 800a9d6:	0092      	lsls	r2, r2, #2
 800a9d8:	f105 010c 	add.w	r1, r5, #12
 800a9dc:	300c      	adds	r0, #12
 800a9de:	f7ff fa9c 	bl	8009f1a <memcpy>
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4658      	mov	r0, fp
 800a9e8:	f000 fc52 	bl	800b290 <__lshift>
 800a9ec:	f10a 0301 	add.w	r3, sl, #1
 800a9f0:	9307      	str	r3, [sp, #28]
 800a9f2:	9b00      	ldr	r3, [sp, #0]
 800a9f4:	4453      	add	r3, sl
 800a9f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9f8:	9b02      	ldr	r3, [sp, #8]
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	462f      	mov	r7, r5
 800aa00:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa02:	4605      	mov	r5, r0
 800aa04:	9b07      	ldr	r3, [sp, #28]
 800aa06:	4621      	mov	r1, r4
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	4648      	mov	r0, r9
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	f7ff fa99 	bl	8009f44 <quorem>
 800aa12:	4639      	mov	r1, r7
 800aa14:	9002      	str	r0, [sp, #8]
 800aa16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa1a:	4648      	mov	r0, r9
 800aa1c:	f000 fca4 	bl	800b368 <__mcmp>
 800aa20:	462a      	mov	r2, r5
 800aa22:	9008      	str	r0, [sp, #32]
 800aa24:	4621      	mov	r1, r4
 800aa26:	4658      	mov	r0, fp
 800aa28:	f000 fcba 	bl	800b3a0 <__mdiff>
 800aa2c:	68c2      	ldr	r2, [r0, #12]
 800aa2e:	4606      	mov	r6, r0
 800aa30:	bb02      	cbnz	r2, 800aa74 <_dtoa_r+0xa1c>
 800aa32:	4601      	mov	r1, r0
 800aa34:	4648      	mov	r0, r9
 800aa36:	f000 fc97 	bl	800b368 <__mcmp>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4658      	mov	r0, fp
 800aa40:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa42:	f000 fa0d 	bl	800ae60 <_Bfree>
 800aa46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa4a:	9e07      	ldr	r6, [sp, #28]
 800aa4c:	ea43 0102 	orr.w	r1, r3, r2
 800aa50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa52:	4319      	orrs	r1, r3
 800aa54:	d110      	bne.n	800aa78 <_dtoa_r+0xa20>
 800aa56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa5a:	d029      	beq.n	800aab0 <_dtoa_r+0xa58>
 800aa5c:	9b08      	ldr	r3, [sp, #32]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	dd02      	ble.n	800aa68 <_dtoa_r+0xa10>
 800aa62:	9b02      	ldr	r3, [sp, #8]
 800aa64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aa68:	9b00      	ldr	r3, [sp, #0]
 800aa6a:	f883 8000 	strb.w	r8, [r3]
 800aa6e:	e63f      	b.n	800a6f0 <_dtoa_r+0x698>
 800aa70:	4628      	mov	r0, r5
 800aa72:	e7bb      	b.n	800a9ec <_dtoa_r+0x994>
 800aa74:	2201      	movs	r2, #1
 800aa76:	e7e1      	b.n	800aa3c <_dtoa_r+0x9e4>
 800aa78:	9b08      	ldr	r3, [sp, #32]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	db04      	blt.n	800aa88 <_dtoa_r+0xa30>
 800aa7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa80:	430b      	orrs	r3, r1
 800aa82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa84:	430b      	orrs	r3, r1
 800aa86:	d120      	bne.n	800aaca <_dtoa_r+0xa72>
 800aa88:	2a00      	cmp	r2, #0
 800aa8a:	dded      	ble.n	800aa68 <_dtoa_r+0xa10>
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4658      	mov	r0, fp
 800aa92:	f000 fbfd 	bl	800b290 <__lshift>
 800aa96:	4621      	mov	r1, r4
 800aa98:	4681      	mov	r9, r0
 800aa9a:	f000 fc65 	bl	800b368 <__mcmp>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	dc03      	bgt.n	800aaaa <_dtoa_r+0xa52>
 800aaa2:	d1e1      	bne.n	800aa68 <_dtoa_r+0xa10>
 800aaa4:	f018 0f01 	tst.w	r8, #1
 800aaa8:	d0de      	beq.n	800aa68 <_dtoa_r+0xa10>
 800aaaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aaae:	d1d8      	bne.n	800aa62 <_dtoa_r+0xa0a>
 800aab0:	9a00      	ldr	r2, [sp, #0]
 800aab2:	2339      	movs	r3, #57	@ 0x39
 800aab4:	7013      	strb	r3, [r2, #0]
 800aab6:	4633      	mov	r3, r6
 800aab8:	461e      	mov	r6, r3
 800aaba:	3b01      	subs	r3, #1
 800aabc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aac0:	2a39      	cmp	r2, #57	@ 0x39
 800aac2:	d052      	beq.n	800ab6a <_dtoa_r+0xb12>
 800aac4:	3201      	adds	r2, #1
 800aac6:	701a      	strb	r2, [r3, #0]
 800aac8:	e612      	b.n	800a6f0 <_dtoa_r+0x698>
 800aaca:	2a00      	cmp	r2, #0
 800aacc:	dd07      	ble.n	800aade <_dtoa_r+0xa86>
 800aace:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aad2:	d0ed      	beq.n	800aab0 <_dtoa_r+0xa58>
 800aad4:	9a00      	ldr	r2, [sp, #0]
 800aad6:	f108 0301 	add.w	r3, r8, #1
 800aada:	7013      	strb	r3, [r2, #0]
 800aadc:	e608      	b.n	800a6f0 <_dtoa_r+0x698>
 800aade:	9b07      	ldr	r3, [sp, #28]
 800aae0:	9a07      	ldr	r2, [sp, #28]
 800aae2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d028      	beq.n	800ab3e <_dtoa_r+0xae6>
 800aaec:	4649      	mov	r1, r9
 800aaee:	2300      	movs	r3, #0
 800aaf0:	220a      	movs	r2, #10
 800aaf2:	4658      	mov	r0, fp
 800aaf4:	f000 f9d6 	bl	800aea4 <__multadd>
 800aaf8:	42af      	cmp	r7, r5
 800aafa:	4681      	mov	r9, r0
 800aafc:	f04f 0300 	mov.w	r3, #0
 800ab00:	f04f 020a 	mov.w	r2, #10
 800ab04:	4639      	mov	r1, r7
 800ab06:	4658      	mov	r0, fp
 800ab08:	d107      	bne.n	800ab1a <_dtoa_r+0xac2>
 800ab0a:	f000 f9cb 	bl	800aea4 <__multadd>
 800ab0e:	4607      	mov	r7, r0
 800ab10:	4605      	mov	r5, r0
 800ab12:	9b07      	ldr	r3, [sp, #28]
 800ab14:	3301      	adds	r3, #1
 800ab16:	9307      	str	r3, [sp, #28]
 800ab18:	e774      	b.n	800aa04 <_dtoa_r+0x9ac>
 800ab1a:	f000 f9c3 	bl	800aea4 <__multadd>
 800ab1e:	4629      	mov	r1, r5
 800ab20:	4607      	mov	r7, r0
 800ab22:	2300      	movs	r3, #0
 800ab24:	220a      	movs	r2, #10
 800ab26:	4658      	mov	r0, fp
 800ab28:	f000 f9bc 	bl	800aea4 <__multadd>
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	e7f0      	b.n	800ab12 <_dtoa_r+0xaba>
 800ab30:	9b00      	ldr	r3, [sp, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	bfcc      	ite	gt
 800ab36:	461e      	movgt	r6, r3
 800ab38:	2601      	movle	r6, #1
 800ab3a:	4456      	add	r6, sl
 800ab3c:	2700      	movs	r7, #0
 800ab3e:	4649      	mov	r1, r9
 800ab40:	2201      	movs	r2, #1
 800ab42:	4658      	mov	r0, fp
 800ab44:	f000 fba4 	bl	800b290 <__lshift>
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4681      	mov	r9, r0
 800ab4c:	f000 fc0c 	bl	800b368 <__mcmp>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	dcb0      	bgt.n	800aab6 <_dtoa_r+0xa5e>
 800ab54:	d102      	bne.n	800ab5c <_dtoa_r+0xb04>
 800ab56:	f018 0f01 	tst.w	r8, #1
 800ab5a:	d1ac      	bne.n	800aab6 <_dtoa_r+0xa5e>
 800ab5c:	4633      	mov	r3, r6
 800ab5e:	461e      	mov	r6, r3
 800ab60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab64:	2a30      	cmp	r2, #48	@ 0x30
 800ab66:	d0fa      	beq.n	800ab5e <_dtoa_r+0xb06>
 800ab68:	e5c2      	b.n	800a6f0 <_dtoa_r+0x698>
 800ab6a:	459a      	cmp	sl, r3
 800ab6c:	d1a4      	bne.n	800aab8 <_dtoa_r+0xa60>
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	3301      	adds	r3, #1
 800ab72:	9304      	str	r3, [sp, #16]
 800ab74:	2331      	movs	r3, #49	@ 0x31
 800ab76:	f88a 3000 	strb.w	r3, [sl]
 800ab7a:	e5b9      	b.n	800a6f0 <_dtoa_r+0x698>
 800ab7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800abdc <_dtoa_r+0xb84>
 800ab82:	b11b      	cbz	r3, 800ab8c <_dtoa_r+0xb34>
 800ab84:	f10a 0308 	add.w	r3, sl, #8
 800ab88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	4650      	mov	r0, sl
 800ab8e:	b019      	add	sp, #100	@ 0x64
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	f77f ae37 	ble.w	800a80a <_dtoa_r+0x7b2>
 800ab9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aba0:	2001      	movs	r0, #1
 800aba2:	e655      	b.n	800a850 <_dtoa_r+0x7f8>
 800aba4:	9b00      	ldr	r3, [sp, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f77f aed6 	ble.w	800a958 <_dtoa_r+0x900>
 800abac:	4656      	mov	r6, sl
 800abae:	4621      	mov	r1, r4
 800abb0:	4648      	mov	r0, r9
 800abb2:	f7ff f9c7 	bl	8009f44 <quorem>
 800abb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800abba:	f806 8b01 	strb.w	r8, [r6], #1
 800abbe:	9b00      	ldr	r3, [sp, #0]
 800abc0:	eba6 020a 	sub.w	r2, r6, sl
 800abc4:	4293      	cmp	r3, r2
 800abc6:	ddb3      	ble.n	800ab30 <_dtoa_r+0xad8>
 800abc8:	4649      	mov	r1, r9
 800abca:	2300      	movs	r3, #0
 800abcc:	220a      	movs	r2, #10
 800abce:	4658      	mov	r0, fp
 800abd0:	f000 f968 	bl	800aea4 <__multadd>
 800abd4:	4681      	mov	r9, r0
 800abd6:	e7ea      	b.n	800abae <_dtoa_r+0xb56>
 800abd8:	0800d8c5 	.word	0x0800d8c5
 800abdc:	0800d849 	.word	0x0800d849

0800abe0 <_free_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4605      	mov	r5, r0
 800abe4:	2900      	cmp	r1, #0
 800abe6:	d041      	beq.n	800ac6c <_free_r+0x8c>
 800abe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abec:	1f0c      	subs	r4, r1, #4
 800abee:	2b00      	cmp	r3, #0
 800abf0:	bfb8      	it	lt
 800abf2:	18e4      	addlt	r4, r4, r3
 800abf4:	f000 f8e8 	bl	800adc8 <__malloc_lock>
 800abf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac70 <_free_r+0x90>)
 800abfa:	6813      	ldr	r3, [r2, #0]
 800abfc:	b933      	cbnz	r3, 800ac0c <_free_r+0x2c>
 800abfe:	6063      	str	r3, [r4, #4]
 800ac00:	6014      	str	r4, [r2, #0]
 800ac02:	4628      	mov	r0, r5
 800ac04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac08:	f000 b8e4 	b.w	800add4 <__malloc_unlock>
 800ac0c:	42a3      	cmp	r3, r4
 800ac0e:	d908      	bls.n	800ac22 <_free_r+0x42>
 800ac10:	6820      	ldr	r0, [r4, #0]
 800ac12:	1821      	adds	r1, r4, r0
 800ac14:	428b      	cmp	r3, r1
 800ac16:	bf01      	itttt	eq
 800ac18:	6819      	ldreq	r1, [r3, #0]
 800ac1a:	685b      	ldreq	r3, [r3, #4]
 800ac1c:	1809      	addeq	r1, r1, r0
 800ac1e:	6021      	streq	r1, [r4, #0]
 800ac20:	e7ed      	b.n	800abfe <_free_r+0x1e>
 800ac22:	461a      	mov	r2, r3
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	b10b      	cbz	r3, 800ac2c <_free_r+0x4c>
 800ac28:	42a3      	cmp	r3, r4
 800ac2a:	d9fa      	bls.n	800ac22 <_free_r+0x42>
 800ac2c:	6811      	ldr	r1, [r2, #0]
 800ac2e:	1850      	adds	r0, r2, r1
 800ac30:	42a0      	cmp	r0, r4
 800ac32:	d10b      	bne.n	800ac4c <_free_r+0x6c>
 800ac34:	6820      	ldr	r0, [r4, #0]
 800ac36:	4401      	add	r1, r0
 800ac38:	1850      	adds	r0, r2, r1
 800ac3a:	4283      	cmp	r3, r0
 800ac3c:	6011      	str	r1, [r2, #0]
 800ac3e:	d1e0      	bne.n	800ac02 <_free_r+0x22>
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	6053      	str	r3, [r2, #4]
 800ac46:	4408      	add	r0, r1
 800ac48:	6010      	str	r0, [r2, #0]
 800ac4a:	e7da      	b.n	800ac02 <_free_r+0x22>
 800ac4c:	d902      	bls.n	800ac54 <_free_r+0x74>
 800ac4e:	230c      	movs	r3, #12
 800ac50:	602b      	str	r3, [r5, #0]
 800ac52:	e7d6      	b.n	800ac02 <_free_r+0x22>
 800ac54:	6820      	ldr	r0, [r4, #0]
 800ac56:	1821      	adds	r1, r4, r0
 800ac58:	428b      	cmp	r3, r1
 800ac5a:	bf04      	itt	eq
 800ac5c:	6819      	ldreq	r1, [r3, #0]
 800ac5e:	685b      	ldreq	r3, [r3, #4]
 800ac60:	6063      	str	r3, [r4, #4]
 800ac62:	bf04      	itt	eq
 800ac64:	1809      	addeq	r1, r1, r0
 800ac66:	6021      	streq	r1, [r4, #0]
 800ac68:	6054      	str	r4, [r2, #4]
 800ac6a:	e7ca      	b.n	800ac02 <_free_r+0x22>
 800ac6c:	bd38      	pop	{r3, r4, r5, pc}
 800ac6e:	bf00      	nop
 800ac70:	200057e8 	.word	0x200057e8

0800ac74 <malloc>:
 800ac74:	4b02      	ldr	r3, [pc, #8]	@ (800ac80 <malloc+0xc>)
 800ac76:	4601      	mov	r1, r0
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	f000 b825 	b.w	800acc8 <_malloc_r>
 800ac7e:	bf00      	nop
 800ac80:	2000001c 	.word	0x2000001c

0800ac84 <sbrk_aligned>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	4e0f      	ldr	r6, [pc, #60]	@ (800acc4 <sbrk_aligned+0x40>)
 800ac88:	460c      	mov	r4, r1
 800ac8a:	6831      	ldr	r1, [r6, #0]
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	b911      	cbnz	r1, 800ac96 <sbrk_aligned+0x12>
 800ac90:	f001 fe90 	bl	800c9b4 <_sbrk_r>
 800ac94:	6030      	str	r0, [r6, #0]
 800ac96:	4621      	mov	r1, r4
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f001 fe8b 	bl	800c9b4 <_sbrk_r>
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	d103      	bne.n	800acaa <sbrk_aligned+0x26>
 800aca2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aca6:	4620      	mov	r0, r4
 800aca8:	bd70      	pop	{r4, r5, r6, pc}
 800acaa:	1cc4      	adds	r4, r0, #3
 800acac:	f024 0403 	bic.w	r4, r4, #3
 800acb0:	42a0      	cmp	r0, r4
 800acb2:	d0f8      	beq.n	800aca6 <sbrk_aligned+0x22>
 800acb4:	1a21      	subs	r1, r4, r0
 800acb6:	4628      	mov	r0, r5
 800acb8:	f001 fe7c 	bl	800c9b4 <_sbrk_r>
 800acbc:	3001      	adds	r0, #1
 800acbe:	d1f2      	bne.n	800aca6 <sbrk_aligned+0x22>
 800acc0:	e7ef      	b.n	800aca2 <sbrk_aligned+0x1e>
 800acc2:	bf00      	nop
 800acc4:	200057e4 	.word	0x200057e4

0800acc8 <_malloc_r>:
 800acc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800accc:	1ccd      	adds	r5, r1, #3
 800acce:	f025 0503 	bic.w	r5, r5, #3
 800acd2:	3508      	adds	r5, #8
 800acd4:	2d0c      	cmp	r5, #12
 800acd6:	bf38      	it	cc
 800acd8:	250c      	movcc	r5, #12
 800acda:	2d00      	cmp	r5, #0
 800acdc:	4606      	mov	r6, r0
 800acde:	db01      	blt.n	800ace4 <_malloc_r+0x1c>
 800ace0:	42a9      	cmp	r1, r5
 800ace2:	d904      	bls.n	800acee <_malloc_r+0x26>
 800ace4:	230c      	movs	r3, #12
 800ace6:	6033      	str	r3, [r6, #0]
 800ace8:	2000      	movs	r0, #0
 800acea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800adc4 <_malloc_r+0xfc>
 800acf2:	f000 f869 	bl	800adc8 <__malloc_lock>
 800acf6:	f8d8 3000 	ldr.w	r3, [r8]
 800acfa:	461c      	mov	r4, r3
 800acfc:	bb44      	cbnz	r4, 800ad50 <_malloc_r+0x88>
 800acfe:	4629      	mov	r1, r5
 800ad00:	4630      	mov	r0, r6
 800ad02:	f7ff ffbf 	bl	800ac84 <sbrk_aligned>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	4604      	mov	r4, r0
 800ad0a:	d158      	bne.n	800adbe <_malloc_r+0xf6>
 800ad0c:	f8d8 4000 	ldr.w	r4, [r8]
 800ad10:	4627      	mov	r7, r4
 800ad12:	2f00      	cmp	r7, #0
 800ad14:	d143      	bne.n	800ad9e <_malloc_r+0xd6>
 800ad16:	2c00      	cmp	r4, #0
 800ad18:	d04b      	beq.n	800adb2 <_malloc_r+0xea>
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	4630      	mov	r0, r6
 800ad20:	eb04 0903 	add.w	r9, r4, r3
 800ad24:	f001 fe46 	bl	800c9b4 <_sbrk_r>
 800ad28:	4581      	cmp	r9, r0
 800ad2a:	d142      	bne.n	800adb2 <_malloc_r+0xea>
 800ad2c:	6821      	ldr	r1, [r4, #0]
 800ad2e:	1a6d      	subs	r5, r5, r1
 800ad30:	4629      	mov	r1, r5
 800ad32:	4630      	mov	r0, r6
 800ad34:	f7ff ffa6 	bl	800ac84 <sbrk_aligned>
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d03a      	beq.n	800adb2 <_malloc_r+0xea>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	442b      	add	r3, r5
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	f8d8 3000 	ldr.w	r3, [r8]
 800ad46:	685a      	ldr	r2, [r3, #4]
 800ad48:	bb62      	cbnz	r2, 800ada4 <_malloc_r+0xdc>
 800ad4a:	f8c8 7000 	str.w	r7, [r8]
 800ad4e:	e00f      	b.n	800ad70 <_malloc_r+0xa8>
 800ad50:	6822      	ldr	r2, [r4, #0]
 800ad52:	1b52      	subs	r2, r2, r5
 800ad54:	d420      	bmi.n	800ad98 <_malloc_r+0xd0>
 800ad56:	2a0b      	cmp	r2, #11
 800ad58:	d917      	bls.n	800ad8a <_malloc_r+0xc2>
 800ad5a:	1961      	adds	r1, r4, r5
 800ad5c:	42a3      	cmp	r3, r4
 800ad5e:	6025      	str	r5, [r4, #0]
 800ad60:	bf18      	it	ne
 800ad62:	6059      	strne	r1, [r3, #4]
 800ad64:	6863      	ldr	r3, [r4, #4]
 800ad66:	bf08      	it	eq
 800ad68:	f8c8 1000 	streq.w	r1, [r8]
 800ad6c:	5162      	str	r2, [r4, r5]
 800ad6e:	604b      	str	r3, [r1, #4]
 800ad70:	4630      	mov	r0, r6
 800ad72:	f000 f82f 	bl	800add4 <__malloc_unlock>
 800ad76:	f104 000b 	add.w	r0, r4, #11
 800ad7a:	1d23      	adds	r3, r4, #4
 800ad7c:	f020 0007 	bic.w	r0, r0, #7
 800ad80:	1ac2      	subs	r2, r0, r3
 800ad82:	bf1c      	itt	ne
 800ad84:	1a1b      	subne	r3, r3, r0
 800ad86:	50a3      	strne	r3, [r4, r2]
 800ad88:	e7af      	b.n	800acea <_malloc_r+0x22>
 800ad8a:	6862      	ldr	r2, [r4, #4]
 800ad8c:	42a3      	cmp	r3, r4
 800ad8e:	bf0c      	ite	eq
 800ad90:	f8c8 2000 	streq.w	r2, [r8]
 800ad94:	605a      	strne	r2, [r3, #4]
 800ad96:	e7eb      	b.n	800ad70 <_malloc_r+0xa8>
 800ad98:	4623      	mov	r3, r4
 800ad9a:	6864      	ldr	r4, [r4, #4]
 800ad9c:	e7ae      	b.n	800acfc <_malloc_r+0x34>
 800ad9e:	463c      	mov	r4, r7
 800ada0:	687f      	ldr	r7, [r7, #4]
 800ada2:	e7b6      	b.n	800ad12 <_malloc_r+0x4a>
 800ada4:	461a      	mov	r2, r3
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	42a3      	cmp	r3, r4
 800adaa:	d1fb      	bne.n	800ada4 <_malloc_r+0xdc>
 800adac:	2300      	movs	r3, #0
 800adae:	6053      	str	r3, [r2, #4]
 800adb0:	e7de      	b.n	800ad70 <_malloc_r+0xa8>
 800adb2:	230c      	movs	r3, #12
 800adb4:	6033      	str	r3, [r6, #0]
 800adb6:	4630      	mov	r0, r6
 800adb8:	f000 f80c 	bl	800add4 <__malloc_unlock>
 800adbc:	e794      	b.n	800ace8 <_malloc_r+0x20>
 800adbe:	6005      	str	r5, [r0, #0]
 800adc0:	e7d6      	b.n	800ad70 <_malloc_r+0xa8>
 800adc2:	bf00      	nop
 800adc4:	200057e8 	.word	0x200057e8

0800adc8 <__malloc_lock>:
 800adc8:	4801      	ldr	r0, [pc, #4]	@ (800add0 <__malloc_lock+0x8>)
 800adca:	f7ff b8a4 	b.w	8009f16 <__retarget_lock_acquire_recursive>
 800adce:	bf00      	nop
 800add0:	200057e0 	.word	0x200057e0

0800add4 <__malloc_unlock>:
 800add4:	4801      	ldr	r0, [pc, #4]	@ (800addc <__malloc_unlock+0x8>)
 800add6:	f7ff b89f 	b.w	8009f18 <__retarget_lock_release_recursive>
 800adda:	bf00      	nop
 800addc:	200057e0 	.word	0x200057e0

0800ade0 <_Balloc>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	69c6      	ldr	r6, [r0, #28]
 800ade4:	4604      	mov	r4, r0
 800ade6:	460d      	mov	r5, r1
 800ade8:	b976      	cbnz	r6, 800ae08 <_Balloc+0x28>
 800adea:	2010      	movs	r0, #16
 800adec:	f7ff ff42 	bl	800ac74 <malloc>
 800adf0:	4602      	mov	r2, r0
 800adf2:	61e0      	str	r0, [r4, #28]
 800adf4:	b920      	cbnz	r0, 800ae00 <_Balloc+0x20>
 800adf6:	4b18      	ldr	r3, [pc, #96]	@ (800ae58 <_Balloc+0x78>)
 800adf8:	4818      	ldr	r0, [pc, #96]	@ (800ae5c <_Balloc+0x7c>)
 800adfa:	216b      	movs	r1, #107	@ 0x6b
 800adfc:	f001 fdf4 	bl	800c9e8 <__assert_func>
 800ae00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae04:	6006      	str	r6, [r0, #0]
 800ae06:	60c6      	str	r6, [r0, #12]
 800ae08:	69e6      	ldr	r6, [r4, #28]
 800ae0a:	68f3      	ldr	r3, [r6, #12]
 800ae0c:	b183      	cbz	r3, 800ae30 <_Balloc+0x50>
 800ae0e:	69e3      	ldr	r3, [r4, #28]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae16:	b9b8      	cbnz	r0, 800ae48 <_Balloc+0x68>
 800ae18:	2101      	movs	r1, #1
 800ae1a:	fa01 f605 	lsl.w	r6, r1, r5
 800ae1e:	1d72      	adds	r2, r6, #5
 800ae20:	0092      	lsls	r2, r2, #2
 800ae22:	4620      	mov	r0, r4
 800ae24:	f001 fdfe 	bl	800ca24 <_calloc_r>
 800ae28:	b160      	cbz	r0, 800ae44 <_Balloc+0x64>
 800ae2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae2e:	e00e      	b.n	800ae4e <_Balloc+0x6e>
 800ae30:	2221      	movs	r2, #33	@ 0x21
 800ae32:	2104      	movs	r1, #4
 800ae34:	4620      	mov	r0, r4
 800ae36:	f001 fdf5 	bl	800ca24 <_calloc_r>
 800ae3a:	69e3      	ldr	r3, [r4, #28]
 800ae3c:	60f0      	str	r0, [r6, #12]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1e4      	bne.n	800ae0e <_Balloc+0x2e>
 800ae44:	2000      	movs	r0, #0
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
 800ae48:	6802      	ldr	r2, [r0, #0]
 800ae4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae54:	e7f7      	b.n	800ae46 <_Balloc+0x66>
 800ae56:	bf00      	nop
 800ae58:	0800d856 	.word	0x0800d856
 800ae5c:	0800d8d6 	.word	0x0800d8d6

0800ae60 <_Bfree>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	69c6      	ldr	r6, [r0, #28]
 800ae64:	4605      	mov	r5, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	b976      	cbnz	r6, 800ae88 <_Bfree+0x28>
 800ae6a:	2010      	movs	r0, #16
 800ae6c:	f7ff ff02 	bl	800ac74 <malloc>
 800ae70:	4602      	mov	r2, r0
 800ae72:	61e8      	str	r0, [r5, #28]
 800ae74:	b920      	cbnz	r0, 800ae80 <_Bfree+0x20>
 800ae76:	4b09      	ldr	r3, [pc, #36]	@ (800ae9c <_Bfree+0x3c>)
 800ae78:	4809      	ldr	r0, [pc, #36]	@ (800aea0 <_Bfree+0x40>)
 800ae7a:	218f      	movs	r1, #143	@ 0x8f
 800ae7c:	f001 fdb4 	bl	800c9e8 <__assert_func>
 800ae80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae84:	6006      	str	r6, [r0, #0]
 800ae86:	60c6      	str	r6, [r0, #12]
 800ae88:	b13c      	cbz	r4, 800ae9a <_Bfree+0x3a>
 800ae8a:	69eb      	ldr	r3, [r5, #28]
 800ae8c:	6862      	ldr	r2, [r4, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae94:	6021      	str	r1, [r4, #0]
 800ae96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae9a:	bd70      	pop	{r4, r5, r6, pc}
 800ae9c:	0800d856 	.word	0x0800d856
 800aea0:	0800d8d6 	.word	0x0800d8d6

0800aea4 <__multadd>:
 800aea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea8:	690d      	ldr	r5, [r1, #16]
 800aeaa:	4607      	mov	r7, r0
 800aeac:	460c      	mov	r4, r1
 800aeae:	461e      	mov	r6, r3
 800aeb0:	f101 0c14 	add.w	ip, r1, #20
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	f8dc 3000 	ldr.w	r3, [ip]
 800aeba:	b299      	uxth	r1, r3
 800aebc:	fb02 6101 	mla	r1, r2, r1, r6
 800aec0:	0c1e      	lsrs	r6, r3, #16
 800aec2:	0c0b      	lsrs	r3, r1, #16
 800aec4:	fb02 3306 	mla	r3, r2, r6, r3
 800aec8:	b289      	uxth	r1, r1
 800aeca:	3001      	adds	r0, #1
 800aecc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aed0:	4285      	cmp	r5, r0
 800aed2:	f84c 1b04 	str.w	r1, [ip], #4
 800aed6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aeda:	dcec      	bgt.n	800aeb6 <__multadd+0x12>
 800aedc:	b30e      	cbz	r6, 800af22 <__multadd+0x7e>
 800aede:	68a3      	ldr	r3, [r4, #8]
 800aee0:	42ab      	cmp	r3, r5
 800aee2:	dc19      	bgt.n	800af18 <__multadd+0x74>
 800aee4:	6861      	ldr	r1, [r4, #4]
 800aee6:	4638      	mov	r0, r7
 800aee8:	3101      	adds	r1, #1
 800aeea:	f7ff ff79 	bl	800ade0 <_Balloc>
 800aeee:	4680      	mov	r8, r0
 800aef0:	b928      	cbnz	r0, 800aefe <__multadd+0x5a>
 800aef2:	4602      	mov	r2, r0
 800aef4:	4b0c      	ldr	r3, [pc, #48]	@ (800af28 <__multadd+0x84>)
 800aef6:	480d      	ldr	r0, [pc, #52]	@ (800af2c <__multadd+0x88>)
 800aef8:	21ba      	movs	r1, #186	@ 0xba
 800aefa:	f001 fd75 	bl	800c9e8 <__assert_func>
 800aefe:	6922      	ldr	r2, [r4, #16]
 800af00:	3202      	adds	r2, #2
 800af02:	f104 010c 	add.w	r1, r4, #12
 800af06:	0092      	lsls	r2, r2, #2
 800af08:	300c      	adds	r0, #12
 800af0a:	f7ff f806 	bl	8009f1a <memcpy>
 800af0e:	4621      	mov	r1, r4
 800af10:	4638      	mov	r0, r7
 800af12:	f7ff ffa5 	bl	800ae60 <_Bfree>
 800af16:	4644      	mov	r4, r8
 800af18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af1c:	3501      	adds	r5, #1
 800af1e:	615e      	str	r6, [r3, #20]
 800af20:	6125      	str	r5, [r4, #16]
 800af22:	4620      	mov	r0, r4
 800af24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af28:	0800d8c5 	.word	0x0800d8c5
 800af2c:	0800d8d6 	.word	0x0800d8d6

0800af30 <__s2b>:
 800af30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af34:	460c      	mov	r4, r1
 800af36:	4615      	mov	r5, r2
 800af38:	461f      	mov	r7, r3
 800af3a:	2209      	movs	r2, #9
 800af3c:	3308      	adds	r3, #8
 800af3e:	4606      	mov	r6, r0
 800af40:	fb93 f3f2 	sdiv	r3, r3, r2
 800af44:	2100      	movs	r1, #0
 800af46:	2201      	movs	r2, #1
 800af48:	429a      	cmp	r2, r3
 800af4a:	db09      	blt.n	800af60 <__s2b+0x30>
 800af4c:	4630      	mov	r0, r6
 800af4e:	f7ff ff47 	bl	800ade0 <_Balloc>
 800af52:	b940      	cbnz	r0, 800af66 <__s2b+0x36>
 800af54:	4602      	mov	r2, r0
 800af56:	4b19      	ldr	r3, [pc, #100]	@ (800afbc <__s2b+0x8c>)
 800af58:	4819      	ldr	r0, [pc, #100]	@ (800afc0 <__s2b+0x90>)
 800af5a:	21d3      	movs	r1, #211	@ 0xd3
 800af5c:	f001 fd44 	bl	800c9e8 <__assert_func>
 800af60:	0052      	lsls	r2, r2, #1
 800af62:	3101      	adds	r1, #1
 800af64:	e7f0      	b.n	800af48 <__s2b+0x18>
 800af66:	9b08      	ldr	r3, [sp, #32]
 800af68:	6143      	str	r3, [r0, #20]
 800af6a:	2d09      	cmp	r5, #9
 800af6c:	f04f 0301 	mov.w	r3, #1
 800af70:	6103      	str	r3, [r0, #16]
 800af72:	dd16      	ble.n	800afa2 <__s2b+0x72>
 800af74:	f104 0909 	add.w	r9, r4, #9
 800af78:	46c8      	mov	r8, r9
 800af7a:	442c      	add	r4, r5
 800af7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af80:	4601      	mov	r1, r0
 800af82:	3b30      	subs	r3, #48	@ 0x30
 800af84:	220a      	movs	r2, #10
 800af86:	4630      	mov	r0, r6
 800af88:	f7ff ff8c 	bl	800aea4 <__multadd>
 800af8c:	45a0      	cmp	r8, r4
 800af8e:	d1f5      	bne.n	800af7c <__s2b+0x4c>
 800af90:	f1a5 0408 	sub.w	r4, r5, #8
 800af94:	444c      	add	r4, r9
 800af96:	1b2d      	subs	r5, r5, r4
 800af98:	1963      	adds	r3, r4, r5
 800af9a:	42bb      	cmp	r3, r7
 800af9c:	db04      	blt.n	800afa8 <__s2b+0x78>
 800af9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afa2:	340a      	adds	r4, #10
 800afa4:	2509      	movs	r5, #9
 800afa6:	e7f6      	b.n	800af96 <__s2b+0x66>
 800afa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afac:	4601      	mov	r1, r0
 800afae:	3b30      	subs	r3, #48	@ 0x30
 800afb0:	220a      	movs	r2, #10
 800afb2:	4630      	mov	r0, r6
 800afb4:	f7ff ff76 	bl	800aea4 <__multadd>
 800afb8:	e7ee      	b.n	800af98 <__s2b+0x68>
 800afba:	bf00      	nop
 800afbc:	0800d8c5 	.word	0x0800d8c5
 800afc0:	0800d8d6 	.word	0x0800d8d6

0800afc4 <__hi0bits>:
 800afc4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800afc8:	4603      	mov	r3, r0
 800afca:	bf36      	itet	cc
 800afcc:	0403      	lslcc	r3, r0, #16
 800afce:	2000      	movcs	r0, #0
 800afd0:	2010      	movcc	r0, #16
 800afd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afd6:	bf3c      	itt	cc
 800afd8:	021b      	lslcc	r3, r3, #8
 800afda:	3008      	addcc	r0, #8
 800afdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afe0:	bf3c      	itt	cc
 800afe2:	011b      	lslcc	r3, r3, #4
 800afe4:	3004      	addcc	r0, #4
 800afe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afea:	bf3c      	itt	cc
 800afec:	009b      	lslcc	r3, r3, #2
 800afee:	3002      	addcc	r0, #2
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	db05      	blt.n	800b000 <__hi0bits+0x3c>
 800aff4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aff8:	f100 0001 	add.w	r0, r0, #1
 800affc:	bf08      	it	eq
 800affe:	2020      	moveq	r0, #32
 800b000:	4770      	bx	lr

0800b002 <__lo0bits>:
 800b002:	6803      	ldr	r3, [r0, #0]
 800b004:	4602      	mov	r2, r0
 800b006:	f013 0007 	ands.w	r0, r3, #7
 800b00a:	d00b      	beq.n	800b024 <__lo0bits+0x22>
 800b00c:	07d9      	lsls	r1, r3, #31
 800b00e:	d421      	bmi.n	800b054 <__lo0bits+0x52>
 800b010:	0798      	lsls	r0, r3, #30
 800b012:	bf49      	itett	mi
 800b014:	085b      	lsrmi	r3, r3, #1
 800b016:	089b      	lsrpl	r3, r3, #2
 800b018:	2001      	movmi	r0, #1
 800b01a:	6013      	strmi	r3, [r2, #0]
 800b01c:	bf5c      	itt	pl
 800b01e:	6013      	strpl	r3, [r2, #0]
 800b020:	2002      	movpl	r0, #2
 800b022:	4770      	bx	lr
 800b024:	b299      	uxth	r1, r3
 800b026:	b909      	cbnz	r1, 800b02c <__lo0bits+0x2a>
 800b028:	0c1b      	lsrs	r3, r3, #16
 800b02a:	2010      	movs	r0, #16
 800b02c:	b2d9      	uxtb	r1, r3
 800b02e:	b909      	cbnz	r1, 800b034 <__lo0bits+0x32>
 800b030:	3008      	adds	r0, #8
 800b032:	0a1b      	lsrs	r3, r3, #8
 800b034:	0719      	lsls	r1, r3, #28
 800b036:	bf04      	itt	eq
 800b038:	091b      	lsreq	r3, r3, #4
 800b03a:	3004      	addeq	r0, #4
 800b03c:	0799      	lsls	r1, r3, #30
 800b03e:	bf04      	itt	eq
 800b040:	089b      	lsreq	r3, r3, #2
 800b042:	3002      	addeq	r0, #2
 800b044:	07d9      	lsls	r1, r3, #31
 800b046:	d403      	bmi.n	800b050 <__lo0bits+0x4e>
 800b048:	085b      	lsrs	r3, r3, #1
 800b04a:	f100 0001 	add.w	r0, r0, #1
 800b04e:	d003      	beq.n	800b058 <__lo0bits+0x56>
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	4770      	bx	lr
 800b054:	2000      	movs	r0, #0
 800b056:	4770      	bx	lr
 800b058:	2020      	movs	r0, #32
 800b05a:	4770      	bx	lr

0800b05c <__i2b>:
 800b05c:	b510      	push	{r4, lr}
 800b05e:	460c      	mov	r4, r1
 800b060:	2101      	movs	r1, #1
 800b062:	f7ff febd 	bl	800ade0 <_Balloc>
 800b066:	4602      	mov	r2, r0
 800b068:	b928      	cbnz	r0, 800b076 <__i2b+0x1a>
 800b06a:	4b05      	ldr	r3, [pc, #20]	@ (800b080 <__i2b+0x24>)
 800b06c:	4805      	ldr	r0, [pc, #20]	@ (800b084 <__i2b+0x28>)
 800b06e:	f240 1145 	movw	r1, #325	@ 0x145
 800b072:	f001 fcb9 	bl	800c9e8 <__assert_func>
 800b076:	2301      	movs	r3, #1
 800b078:	6144      	str	r4, [r0, #20]
 800b07a:	6103      	str	r3, [r0, #16]
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	bf00      	nop
 800b080:	0800d8c5 	.word	0x0800d8c5
 800b084:	0800d8d6 	.word	0x0800d8d6

0800b088 <__multiply>:
 800b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	4614      	mov	r4, r2
 800b08e:	690a      	ldr	r2, [r1, #16]
 800b090:	6923      	ldr	r3, [r4, #16]
 800b092:	429a      	cmp	r2, r3
 800b094:	bfa8      	it	ge
 800b096:	4623      	movge	r3, r4
 800b098:	460f      	mov	r7, r1
 800b09a:	bfa4      	itt	ge
 800b09c:	460c      	movge	r4, r1
 800b09e:	461f      	movge	r7, r3
 800b0a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b0a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b0a8:	68a3      	ldr	r3, [r4, #8]
 800b0aa:	6861      	ldr	r1, [r4, #4]
 800b0ac:	eb0a 0609 	add.w	r6, sl, r9
 800b0b0:	42b3      	cmp	r3, r6
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	bfb8      	it	lt
 800b0b6:	3101      	addlt	r1, #1
 800b0b8:	f7ff fe92 	bl	800ade0 <_Balloc>
 800b0bc:	b930      	cbnz	r0, 800b0cc <__multiply+0x44>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	4b44      	ldr	r3, [pc, #272]	@ (800b1d4 <__multiply+0x14c>)
 800b0c2:	4845      	ldr	r0, [pc, #276]	@ (800b1d8 <__multiply+0x150>)
 800b0c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b0c8:	f001 fc8e 	bl	800c9e8 <__assert_func>
 800b0cc:	f100 0514 	add.w	r5, r0, #20
 800b0d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0d4:	462b      	mov	r3, r5
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	4543      	cmp	r3, r8
 800b0da:	d321      	bcc.n	800b120 <__multiply+0x98>
 800b0dc:	f107 0114 	add.w	r1, r7, #20
 800b0e0:	f104 0214 	add.w	r2, r4, #20
 800b0e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b0e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b0ec:	9302      	str	r3, [sp, #8]
 800b0ee:	1b13      	subs	r3, r2, r4
 800b0f0:	3b15      	subs	r3, #21
 800b0f2:	f023 0303 	bic.w	r3, r3, #3
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	f104 0715 	add.w	r7, r4, #21
 800b0fc:	42ba      	cmp	r2, r7
 800b0fe:	bf38      	it	cc
 800b100:	2304      	movcc	r3, #4
 800b102:	9301      	str	r3, [sp, #4]
 800b104:	9b02      	ldr	r3, [sp, #8]
 800b106:	9103      	str	r1, [sp, #12]
 800b108:	428b      	cmp	r3, r1
 800b10a:	d80c      	bhi.n	800b126 <__multiply+0x9e>
 800b10c:	2e00      	cmp	r6, #0
 800b10e:	dd03      	ble.n	800b118 <__multiply+0x90>
 800b110:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b114:	2b00      	cmp	r3, #0
 800b116:	d05b      	beq.n	800b1d0 <__multiply+0x148>
 800b118:	6106      	str	r6, [r0, #16]
 800b11a:	b005      	add	sp, #20
 800b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b120:	f843 2b04 	str.w	r2, [r3], #4
 800b124:	e7d8      	b.n	800b0d8 <__multiply+0x50>
 800b126:	f8b1 a000 	ldrh.w	sl, [r1]
 800b12a:	f1ba 0f00 	cmp.w	sl, #0
 800b12e:	d024      	beq.n	800b17a <__multiply+0xf2>
 800b130:	f104 0e14 	add.w	lr, r4, #20
 800b134:	46a9      	mov	r9, r5
 800b136:	f04f 0c00 	mov.w	ip, #0
 800b13a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b13e:	f8d9 3000 	ldr.w	r3, [r9]
 800b142:	fa1f fb87 	uxth.w	fp, r7
 800b146:	b29b      	uxth	r3, r3
 800b148:	fb0a 330b 	mla	r3, sl, fp, r3
 800b14c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b150:	f8d9 7000 	ldr.w	r7, [r9]
 800b154:	4463      	add	r3, ip
 800b156:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b15a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b15e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b162:	b29b      	uxth	r3, r3
 800b164:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b168:	4572      	cmp	r2, lr
 800b16a:	f849 3b04 	str.w	r3, [r9], #4
 800b16e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b172:	d8e2      	bhi.n	800b13a <__multiply+0xb2>
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	f845 c003 	str.w	ip, [r5, r3]
 800b17a:	9b03      	ldr	r3, [sp, #12]
 800b17c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b180:	3104      	adds	r1, #4
 800b182:	f1b9 0f00 	cmp.w	r9, #0
 800b186:	d021      	beq.n	800b1cc <__multiply+0x144>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	f104 0c14 	add.w	ip, r4, #20
 800b18e:	46ae      	mov	lr, r5
 800b190:	f04f 0a00 	mov.w	sl, #0
 800b194:	f8bc b000 	ldrh.w	fp, [ip]
 800b198:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b19c:	fb09 770b 	mla	r7, r9, fp, r7
 800b1a0:	4457      	add	r7, sl
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1a8:	f84e 3b04 	str.w	r3, [lr], #4
 800b1ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1b4:	f8be 3000 	ldrh.w	r3, [lr]
 800b1b8:	fb09 330a 	mla	r3, r9, sl, r3
 800b1bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b1c0:	4562      	cmp	r2, ip
 800b1c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1c6:	d8e5      	bhi.n	800b194 <__multiply+0x10c>
 800b1c8:	9f01      	ldr	r7, [sp, #4]
 800b1ca:	51eb      	str	r3, [r5, r7]
 800b1cc:	3504      	adds	r5, #4
 800b1ce:	e799      	b.n	800b104 <__multiply+0x7c>
 800b1d0:	3e01      	subs	r6, #1
 800b1d2:	e79b      	b.n	800b10c <__multiply+0x84>
 800b1d4:	0800d8c5 	.word	0x0800d8c5
 800b1d8:	0800d8d6 	.word	0x0800d8d6

0800b1dc <__pow5mult>:
 800b1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	f012 0203 	ands.w	r2, r2, #3
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	460e      	mov	r6, r1
 800b1ea:	d007      	beq.n	800b1fc <__pow5mult+0x20>
 800b1ec:	4c25      	ldr	r4, [pc, #148]	@ (800b284 <__pow5mult+0xa8>)
 800b1ee:	3a01      	subs	r2, #1
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1f6:	f7ff fe55 	bl	800aea4 <__multadd>
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	10ad      	asrs	r5, r5, #2
 800b1fe:	d03d      	beq.n	800b27c <__pow5mult+0xa0>
 800b200:	69fc      	ldr	r4, [r7, #28]
 800b202:	b97c      	cbnz	r4, 800b224 <__pow5mult+0x48>
 800b204:	2010      	movs	r0, #16
 800b206:	f7ff fd35 	bl	800ac74 <malloc>
 800b20a:	4602      	mov	r2, r0
 800b20c:	61f8      	str	r0, [r7, #28]
 800b20e:	b928      	cbnz	r0, 800b21c <__pow5mult+0x40>
 800b210:	4b1d      	ldr	r3, [pc, #116]	@ (800b288 <__pow5mult+0xac>)
 800b212:	481e      	ldr	r0, [pc, #120]	@ (800b28c <__pow5mult+0xb0>)
 800b214:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b218:	f001 fbe6 	bl	800c9e8 <__assert_func>
 800b21c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b220:	6004      	str	r4, [r0, #0]
 800b222:	60c4      	str	r4, [r0, #12]
 800b224:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b228:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b22c:	b94c      	cbnz	r4, 800b242 <__pow5mult+0x66>
 800b22e:	f240 2171 	movw	r1, #625	@ 0x271
 800b232:	4638      	mov	r0, r7
 800b234:	f7ff ff12 	bl	800b05c <__i2b>
 800b238:	2300      	movs	r3, #0
 800b23a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b23e:	4604      	mov	r4, r0
 800b240:	6003      	str	r3, [r0, #0]
 800b242:	f04f 0900 	mov.w	r9, #0
 800b246:	07eb      	lsls	r3, r5, #31
 800b248:	d50a      	bpl.n	800b260 <__pow5mult+0x84>
 800b24a:	4631      	mov	r1, r6
 800b24c:	4622      	mov	r2, r4
 800b24e:	4638      	mov	r0, r7
 800b250:	f7ff ff1a 	bl	800b088 <__multiply>
 800b254:	4631      	mov	r1, r6
 800b256:	4680      	mov	r8, r0
 800b258:	4638      	mov	r0, r7
 800b25a:	f7ff fe01 	bl	800ae60 <_Bfree>
 800b25e:	4646      	mov	r6, r8
 800b260:	106d      	asrs	r5, r5, #1
 800b262:	d00b      	beq.n	800b27c <__pow5mult+0xa0>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	b938      	cbnz	r0, 800b278 <__pow5mult+0x9c>
 800b268:	4622      	mov	r2, r4
 800b26a:	4621      	mov	r1, r4
 800b26c:	4638      	mov	r0, r7
 800b26e:	f7ff ff0b 	bl	800b088 <__multiply>
 800b272:	6020      	str	r0, [r4, #0]
 800b274:	f8c0 9000 	str.w	r9, [r0]
 800b278:	4604      	mov	r4, r0
 800b27a:	e7e4      	b.n	800b246 <__pow5mult+0x6a>
 800b27c:	4630      	mov	r0, r6
 800b27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b282:	bf00      	nop
 800b284:	0800d930 	.word	0x0800d930
 800b288:	0800d856 	.word	0x0800d856
 800b28c:	0800d8d6 	.word	0x0800d8d6

0800b290 <__lshift>:
 800b290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b294:	460c      	mov	r4, r1
 800b296:	6849      	ldr	r1, [r1, #4]
 800b298:	6923      	ldr	r3, [r4, #16]
 800b29a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b29e:	68a3      	ldr	r3, [r4, #8]
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	4691      	mov	r9, r2
 800b2a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2a8:	f108 0601 	add.w	r6, r8, #1
 800b2ac:	42b3      	cmp	r3, r6
 800b2ae:	db0b      	blt.n	800b2c8 <__lshift+0x38>
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f7ff fd95 	bl	800ade0 <_Balloc>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	b948      	cbnz	r0, 800b2ce <__lshift+0x3e>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	4b28      	ldr	r3, [pc, #160]	@ (800b360 <__lshift+0xd0>)
 800b2be:	4829      	ldr	r0, [pc, #164]	@ (800b364 <__lshift+0xd4>)
 800b2c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b2c4:	f001 fb90 	bl	800c9e8 <__assert_func>
 800b2c8:	3101      	adds	r1, #1
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	e7ee      	b.n	800b2ac <__lshift+0x1c>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f100 0114 	add.w	r1, r0, #20
 800b2d4:	f100 0210 	add.w	r2, r0, #16
 800b2d8:	4618      	mov	r0, r3
 800b2da:	4553      	cmp	r3, sl
 800b2dc:	db33      	blt.n	800b346 <__lshift+0xb6>
 800b2de:	6920      	ldr	r0, [r4, #16]
 800b2e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2e4:	f104 0314 	add.w	r3, r4, #20
 800b2e8:	f019 091f 	ands.w	r9, r9, #31
 800b2ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2f4:	d02b      	beq.n	800b34e <__lshift+0xbe>
 800b2f6:	f1c9 0e20 	rsb	lr, r9, #32
 800b2fa:	468a      	mov	sl, r1
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	6818      	ldr	r0, [r3, #0]
 800b300:	fa00 f009 	lsl.w	r0, r0, r9
 800b304:	4310      	orrs	r0, r2
 800b306:	f84a 0b04 	str.w	r0, [sl], #4
 800b30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30e:	459c      	cmp	ip, r3
 800b310:	fa22 f20e 	lsr.w	r2, r2, lr
 800b314:	d8f3      	bhi.n	800b2fe <__lshift+0x6e>
 800b316:	ebac 0304 	sub.w	r3, ip, r4
 800b31a:	3b15      	subs	r3, #21
 800b31c:	f023 0303 	bic.w	r3, r3, #3
 800b320:	3304      	adds	r3, #4
 800b322:	f104 0015 	add.w	r0, r4, #21
 800b326:	4584      	cmp	ip, r0
 800b328:	bf38      	it	cc
 800b32a:	2304      	movcc	r3, #4
 800b32c:	50ca      	str	r2, [r1, r3]
 800b32e:	b10a      	cbz	r2, 800b334 <__lshift+0xa4>
 800b330:	f108 0602 	add.w	r6, r8, #2
 800b334:	3e01      	subs	r6, #1
 800b336:	4638      	mov	r0, r7
 800b338:	612e      	str	r6, [r5, #16]
 800b33a:	4621      	mov	r1, r4
 800b33c:	f7ff fd90 	bl	800ae60 <_Bfree>
 800b340:	4628      	mov	r0, r5
 800b342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b346:	f842 0f04 	str.w	r0, [r2, #4]!
 800b34a:	3301      	adds	r3, #1
 800b34c:	e7c5      	b.n	800b2da <__lshift+0x4a>
 800b34e:	3904      	subs	r1, #4
 800b350:	f853 2b04 	ldr.w	r2, [r3], #4
 800b354:	f841 2f04 	str.w	r2, [r1, #4]!
 800b358:	459c      	cmp	ip, r3
 800b35a:	d8f9      	bhi.n	800b350 <__lshift+0xc0>
 800b35c:	e7ea      	b.n	800b334 <__lshift+0xa4>
 800b35e:	bf00      	nop
 800b360:	0800d8c5 	.word	0x0800d8c5
 800b364:	0800d8d6 	.word	0x0800d8d6

0800b368 <__mcmp>:
 800b368:	690a      	ldr	r2, [r1, #16]
 800b36a:	4603      	mov	r3, r0
 800b36c:	6900      	ldr	r0, [r0, #16]
 800b36e:	1a80      	subs	r0, r0, r2
 800b370:	b530      	push	{r4, r5, lr}
 800b372:	d10e      	bne.n	800b392 <__mcmp+0x2a>
 800b374:	3314      	adds	r3, #20
 800b376:	3114      	adds	r1, #20
 800b378:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b37c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b380:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b384:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b388:	4295      	cmp	r5, r2
 800b38a:	d003      	beq.n	800b394 <__mcmp+0x2c>
 800b38c:	d205      	bcs.n	800b39a <__mcmp+0x32>
 800b38e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b392:	bd30      	pop	{r4, r5, pc}
 800b394:	42a3      	cmp	r3, r4
 800b396:	d3f3      	bcc.n	800b380 <__mcmp+0x18>
 800b398:	e7fb      	b.n	800b392 <__mcmp+0x2a>
 800b39a:	2001      	movs	r0, #1
 800b39c:	e7f9      	b.n	800b392 <__mcmp+0x2a>
	...

0800b3a0 <__mdiff>:
 800b3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	4689      	mov	r9, r1
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	4648      	mov	r0, r9
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	f7ff ffdb 	bl	800b368 <__mcmp>
 800b3b2:	1e05      	subs	r5, r0, #0
 800b3b4:	d112      	bne.n	800b3dc <__mdiff+0x3c>
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff fd11 	bl	800ade0 <_Balloc>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	b928      	cbnz	r0, 800b3ce <__mdiff+0x2e>
 800b3c2:	4b3f      	ldr	r3, [pc, #252]	@ (800b4c0 <__mdiff+0x120>)
 800b3c4:	f240 2137 	movw	r1, #567	@ 0x237
 800b3c8:	483e      	ldr	r0, [pc, #248]	@ (800b4c4 <__mdiff+0x124>)
 800b3ca:	f001 fb0d 	bl	800c9e8 <__assert_func>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	b003      	add	sp, #12
 800b3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3dc:	bfbc      	itt	lt
 800b3de:	464b      	movlt	r3, r9
 800b3e0:	46a1      	movlt	r9, r4
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b3e8:	bfba      	itte	lt
 800b3ea:	461c      	movlt	r4, r3
 800b3ec:	2501      	movlt	r5, #1
 800b3ee:	2500      	movge	r5, #0
 800b3f0:	f7ff fcf6 	bl	800ade0 <_Balloc>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	b918      	cbnz	r0, 800b400 <__mdiff+0x60>
 800b3f8:	4b31      	ldr	r3, [pc, #196]	@ (800b4c0 <__mdiff+0x120>)
 800b3fa:	f240 2145 	movw	r1, #581	@ 0x245
 800b3fe:	e7e3      	b.n	800b3c8 <__mdiff+0x28>
 800b400:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b404:	6926      	ldr	r6, [r4, #16]
 800b406:	60c5      	str	r5, [r0, #12]
 800b408:	f109 0310 	add.w	r3, r9, #16
 800b40c:	f109 0514 	add.w	r5, r9, #20
 800b410:	f104 0e14 	add.w	lr, r4, #20
 800b414:	f100 0b14 	add.w	fp, r0, #20
 800b418:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b41c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b420:	9301      	str	r3, [sp, #4]
 800b422:	46d9      	mov	r9, fp
 800b424:	f04f 0c00 	mov.w	ip, #0
 800b428:	9b01      	ldr	r3, [sp, #4]
 800b42a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b42e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	fa1f f38a 	uxth.w	r3, sl
 800b438:	4619      	mov	r1, r3
 800b43a:	b283      	uxth	r3, r0
 800b43c:	1acb      	subs	r3, r1, r3
 800b43e:	0c00      	lsrs	r0, r0, #16
 800b440:	4463      	add	r3, ip
 800b442:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b446:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b450:	4576      	cmp	r6, lr
 800b452:	f849 3b04 	str.w	r3, [r9], #4
 800b456:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b45a:	d8e5      	bhi.n	800b428 <__mdiff+0x88>
 800b45c:	1b33      	subs	r3, r6, r4
 800b45e:	3b15      	subs	r3, #21
 800b460:	f023 0303 	bic.w	r3, r3, #3
 800b464:	3415      	adds	r4, #21
 800b466:	3304      	adds	r3, #4
 800b468:	42a6      	cmp	r6, r4
 800b46a:	bf38      	it	cc
 800b46c:	2304      	movcc	r3, #4
 800b46e:	441d      	add	r5, r3
 800b470:	445b      	add	r3, fp
 800b472:	461e      	mov	r6, r3
 800b474:	462c      	mov	r4, r5
 800b476:	4544      	cmp	r4, r8
 800b478:	d30e      	bcc.n	800b498 <__mdiff+0xf8>
 800b47a:	f108 0103 	add.w	r1, r8, #3
 800b47e:	1b49      	subs	r1, r1, r5
 800b480:	f021 0103 	bic.w	r1, r1, #3
 800b484:	3d03      	subs	r5, #3
 800b486:	45a8      	cmp	r8, r5
 800b488:	bf38      	it	cc
 800b48a:	2100      	movcc	r1, #0
 800b48c:	440b      	add	r3, r1
 800b48e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b492:	b191      	cbz	r1, 800b4ba <__mdiff+0x11a>
 800b494:	6117      	str	r7, [r2, #16]
 800b496:	e79d      	b.n	800b3d4 <__mdiff+0x34>
 800b498:	f854 1b04 	ldr.w	r1, [r4], #4
 800b49c:	46e6      	mov	lr, ip
 800b49e:	0c08      	lsrs	r0, r1, #16
 800b4a0:	fa1c fc81 	uxtah	ip, ip, r1
 800b4a4:	4471      	add	r1, lr
 800b4a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b4aa:	b289      	uxth	r1, r1
 800b4ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b4b0:	f846 1b04 	str.w	r1, [r6], #4
 800b4b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4b8:	e7dd      	b.n	800b476 <__mdiff+0xd6>
 800b4ba:	3f01      	subs	r7, #1
 800b4bc:	e7e7      	b.n	800b48e <__mdiff+0xee>
 800b4be:	bf00      	nop
 800b4c0:	0800d8c5 	.word	0x0800d8c5
 800b4c4:	0800d8d6 	.word	0x0800d8d6

0800b4c8 <__ulp>:
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	ed8d 0b00 	vstr	d0, [sp]
 800b4ce:	9a01      	ldr	r2, [sp, #4]
 800b4d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b510 <__ulp+0x48>)
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dc08      	bgt.n	800b4ee <__ulp+0x26>
 800b4dc:	425b      	negs	r3, r3
 800b4de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b4e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4e6:	da04      	bge.n	800b4f2 <__ulp+0x2a>
 800b4e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b4ec:	4113      	asrs	r3, r2
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	e008      	b.n	800b504 <__ulp+0x3c>
 800b4f2:	f1a2 0314 	sub.w	r3, r2, #20
 800b4f6:	2b1e      	cmp	r3, #30
 800b4f8:	bfda      	itte	le
 800b4fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b4fe:	40da      	lsrle	r2, r3
 800b500:	2201      	movgt	r2, #1
 800b502:	2300      	movs	r3, #0
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	ec41 0b10 	vmov	d0, r0, r1
 800b50c:	b002      	add	sp, #8
 800b50e:	4770      	bx	lr
 800b510:	7ff00000 	.word	0x7ff00000

0800b514 <__b2d>:
 800b514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b518:	6906      	ldr	r6, [r0, #16]
 800b51a:	f100 0814 	add.w	r8, r0, #20
 800b51e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b522:	1f37      	subs	r7, r6, #4
 800b524:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b528:	4610      	mov	r0, r2
 800b52a:	f7ff fd4b 	bl	800afc4 <__hi0bits>
 800b52e:	f1c0 0320 	rsb	r3, r0, #32
 800b532:	280a      	cmp	r0, #10
 800b534:	600b      	str	r3, [r1, #0]
 800b536:	491b      	ldr	r1, [pc, #108]	@ (800b5a4 <__b2d+0x90>)
 800b538:	dc15      	bgt.n	800b566 <__b2d+0x52>
 800b53a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b53e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b542:	45b8      	cmp	r8, r7
 800b544:	ea43 0501 	orr.w	r5, r3, r1
 800b548:	bf34      	ite	cc
 800b54a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b54e:	2300      	movcs	r3, #0
 800b550:	3015      	adds	r0, #21
 800b552:	fa02 f000 	lsl.w	r0, r2, r0
 800b556:	fa23 f30c 	lsr.w	r3, r3, ip
 800b55a:	4303      	orrs	r3, r0
 800b55c:	461c      	mov	r4, r3
 800b55e:	ec45 4b10 	vmov	d0, r4, r5
 800b562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b566:	45b8      	cmp	r8, r7
 800b568:	bf3a      	itte	cc
 800b56a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b56e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b572:	2300      	movcs	r3, #0
 800b574:	380b      	subs	r0, #11
 800b576:	d012      	beq.n	800b59e <__b2d+0x8a>
 800b578:	f1c0 0120 	rsb	r1, r0, #32
 800b57c:	fa23 f401 	lsr.w	r4, r3, r1
 800b580:	4082      	lsls	r2, r0
 800b582:	4322      	orrs	r2, r4
 800b584:	4547      	cmp	r7, r8
 800b586:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b58a:	bf8c      	ite	hi
 800b58c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b590:	2200      	movls	r2, #0
 800b592:	4083      	lsls	r3, r0
 800b594:	40ca      	lsrs	r2, r1
 800b596:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b59a:	4313      	orrs	r3, r2
 800b59c:	e7de      	b.n	800b55c <__b2d+0x48>
 800b59e:	ea42 0501 	orr.w	r5, r2, r1
 800b5a2:	e7db      	b.n	800b55c <__b2d+0x48>
 800b5a4:	3ff00000 	.word	0x3ff00000

0800b5a8 <__d2b>:
 800b5a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	460f      	mov	r7, r1
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	ec59 8b10 	vmov	r8, r9, d0
 800b5b4:	4616      	mov	r6, r2
 800b5b6:	f7ff fc13 	bl	800ade0 <_Balloc>
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	b930      	cbnz	r0, 800b5cc <__d2b+0x24>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	4b23      	ldr	r3, [pc, #140]	@ (800b650 <__d2b+0xa8>)
 800b5c2:	4824      	ldr	r0, [pc, #144]	@ (800b654 <__d2b+0xac>)
 800b5c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b5c8:	f001 fa0e 	bl	800c9e8 <__assert_func>
 800b5cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5d4:	b10d      	cbz	r5, 800b5da <__d2b+0x32>
 800b5d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5da:	9301      	str	r3, [sp, #4]
 800b5dc:	f1b8 0300 	subs.w	r3, r8, #0
 800b5e0:	d023      	beq.n	800b62a <__d2b+0x82>
 800b5e2:	4668      	mov	r0, sp
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	f7ff fd0c 	bl	800b002 <__lo0bits>
 800b5ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5ee:	b1d0      	cbz	r0, 800b626 <__d2b+0x7e>
 800b5f0:	f1c0 0320 	rsb	r3, r0, #32
 800b5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f8:	430b      	orrs	r3, r1
 800b5fa:	40c2      	lsrs	r2, r0
 800b5fc:	6163      	str	r3, [r4, #20]
 800b5fe:	9201      	str	r2, [sp, #4]
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	61a3      	str	r3, [r4, #24]
 800b604:	2b00      	cmp	r3, #0
 800b606:	bf0c      	ite	eq
 800b608:	2201      	moveq	r2, #1
 800b60a:	2202      	movne	r2, #2
 800b60c:	6122      	str	r2, [r4, #16]
 800b60e:	b1a5      	cbz	r5, 800b63a <__d2b+0x92>
 800b610:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b614:	4405      	add	r5, r0
 800b616:	603d      	str	r5, [r7, #0]
 800b618:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b61c:	6030      	str	r0, [r6, #0]
 800b61e:	4620      	mov	r0, r4
 800b620:	b003      	add	sp, #12
 800b622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b626:	6161      	str	r1, [r4, #20]
 800b628:	e7ea      	b.n	800b600 <__d2b+0x58>
 800b62a:	a801      	add	r0, sp, #4
 800b62c:	f7ff fce9 	bl	800b002 <__lo0bits>
 800b630:	9b01      	ldr	r3, [sp, #4]
 800b632:	6163      	str	r3, [r4, #20]
 800b634:	3020      	adds	r0, #32
 800b636:	2201      	movs	r2, #1
 800b638:	e7e8      	b.n	800b60c <__d2b+0x64>
 800b63a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b63e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b642:	6038      	str	r0, [r7, #0]
 800b644:	6918      	ldr	r0, [r3, #16]
 800b646:	f7ff fcbd 	bl	800afc4 <__hi0bits>
 800b64a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b64e:	e7e5      	b.n	800b61c <__d2b+0x74>
 800b650:	0800d8c5 	.word	0x0800d8c5
 800b654:	0800d8d6 	.word	0x0800d8d6

0800b658 <__ratio>:
 800b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65c:	b085      	sub	sp, #20
 800b65e:	e9cd 1000 	strd	r1, r0, [sp]
 800b662:	a902      	add	r1, sp, #8
 800b664:	f7ff ff56 	bl	800b514 <__b2d>
 800b668:	9800      	ldr	r0, [sp, #0]
 800b66a:	a903      	add	r1, sp, #12
 800b66c:	ec55 4b10 	vmov	r4, r5, d0
 800b670:	f7ff ff50 	bl	800b514 <__b2d>
 800b674:	9b01      	ldr	r3, [sp, #4]
 800b676:	6919      	ldr	r1, [r3, #16]
 800b678:	9b00      	ldr	r3, [sp, #0]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	1ac9      	subs	r1, r1, r3
 800b67e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b682:	1a9b      	subs	r3, r3, r2
 800b684:	ec5b ab10 	vmov	sl, fp, d0
 800b688:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	bfce      	itee	gt
 800b690:	462a      	movgt	r2, r5
 800b692:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b696:	465a      	movle	r2, fp
 800b698:	462f      	mov	r7, r5
 800b69a:	46d9      	mov	r9, fp
 800b69c:	bfcc      	ite	gt
 800b69e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b6a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b6a6:	464b      	mov	r3, r9
 800b6a8:	4652      	mov	r2, sl
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	4639      	mov	r1, r7
 800b6ae:	f7f5 f8d5 	bl	800085c <__aeabi_ddiv>
 800b6b2:	ec41 0b10 	vmov	d0, r0, r1
 800b6b6:	b005      	add	sp, #20
 800b6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6bc <__copybits>:
 800b6bc:	3901      	subs	r1, #1
 800b6be:	b570      	push	{r4, r5, r6, lr}
 800b6c0:	1149      	asrs	r1, r1, #5
 800b6c2:	6914      	ldr	r4, [r2, #16]
 800b6c4:	3101      	adds	r1, #1
 800b6c6:	f102 0314 	add.w	r3, r2, #20
 800b6ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6d2:	1f05      	subs	r5, r0, #4
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	d30c      	bcc.n	800b6f2 <__copybits+0x36>
 800b6d8:	1aa3      	subs	r3, r4, r2
 800b6da:	3b11      	subs	r3, #17
 800b6dc:	f023 0303 	bic.w	r3, r3, #3
 800b6e0:	3211      	adds	r2, #17
 800b6e2:	42a2      	cmp	r2, r4
 800b6e4:	bf88      	it	hi
 800b6e6:	2300      	movhi	r3, #0
 800b6e8:	4418      	add	r0, r3
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4288      	cmp	r0, r1
 800b6ee:	d305      	bcc.n	800b6fc <__copybits+0x40>
 800b6f0:	bd70      	pop	{r4, r5, r6, pc}
 800b6f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6fa:	e7eb      	b.n	800b6d4 <__copybits+0x18>
 800b6fc:	f840 3b04 	str.w	r3, [r0], #4
 800b700:	e7f4      	b.n	800b6ec <__copybits+0x30>

0800b702 <__any_on>:
 800b702:	f100 0214 	add.w	r2, r0, #20
 800b706:	6900      	ldr	r0, [r0, #16]
 800b708:	114b      	asrs	r3, r1, #5
 800b70a:	4298      	cmp	r0, r3
 800b70c:	b510      	push	{r4, lr}
 800b70e:	db11      	blt.n	800b734 <__any_on+0x32>
 800b710:	dd0a      	ble.n	800b728 <__any_on+0x26>
 800b712:	f011 011f 	ands.w	r1, r1, #31
 800b716:	d007      	beq.n	800b728 <__any_on+0x26>
 800b718:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b71c:	fa24 f001 	lsr.w	r0, r4, r1
 800b720:	fa00 f101 	lsl.w	r1, r0, r1
 800b724:	428c      	cmp	r4, r1
 800b726:	d10b      	bne.n	800b740 <__any_on+0x3e>
 800b728:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d803      	bhi.n	800b738 <__any_on+0x36>
 800b730:	2000      	movs	r0, #0
 800b732:	bd10      	pop	{r4, pc}
 800b734:	4603      	mov	r3, r0
 800b736:	e7f7      	b.n	800b728 <__any_on+0x26>
 800b738:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b73c:	2900      	cmp	r1, #0
 800b73e:	d0f5      	beq.n	800b72c <__any_on+0x2a>
 800b740:	2001      	movs	r0, #1
 800b742:	e7f6      	b.n	800b732 <__any_on+0x30>

0800b744 <sulp>:
 800b744:	b570      	push	{r4, r5, r6, lr}
 800b746:	4604      	mov	r4, r0
 800b748:	460d      	mov	r5, r1
 800b74a:	ec45 4b10 	vmov	d0, r4, r5
 800b74e:	4616      	mov	r6, r2
 800b750:	f7ff feba 	bl	800b4c8 <__ulp>
 800b754:	ec51 0b10 	vmov	r0, r1, d0
 800b758:	b17e      	cbz	r6, 800b77a <sulp+0x36>
 800b75a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b75e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b762:	2b00      	cmp	r3, #0
 800b764:	dd09      	ble.n	800b77a <sulp+0x36>
 800b766:	051b      	lsls	r3, r3, #20
 800b768:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b76c:	2400      	movs	r4, #0
 800b76e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b772:	4622      	mov	r2, r4
 800b774:	462b      	mov	r3, r5
 800b776:	f7f4 ff47 	bl	8000608 <__aeabi_dmul>
 800b77a:	ec41 0b10 	vmov	d0, r0, r1
 800b77e:	bd70      	pop	{r4, r5, r6, pc}

0800b780 <_strtod_l>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	b09f      	sub	sp, #124	@ 0x7c
 800b786:	460c      	mov	r4, r1
 800b788:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b78a:	2200      	movs	r2, #0
 800b78c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b78e:	9005      	str	r0, [sp, #20]
 800b790:	f04f 0a00 	mov.w	sl, #0
 800b794:	f04f 0b00 	mov.w	fp, #0
 800b798:	460a      	mov	r2, r1
 800b79a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b79c:	7811      	ldrb	r1, [r2, #0]
 800b79e:	292b      	cmp	r1, #43	@ 0x2b
 800b7a0:	d04a      	beq.n	800b838 <_strtod_l+0xb8>
 800b7a2:	d838      	bhi.n	800b816 <_strtod_l+0x96>
 800b7a4:	290d      	cmp	r1, #13
 800b7a6:	d832      	bhi.n	800b80e <_strtod_l+0x8e>
 800b7a8:	2908      	cmp	r1, #8
 800b7aa:	d832      	bhi.n	800b812 <_strtod_l+0x92>
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	d03b      	beq.n	800b828 <_strtod_l+0xa8>
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b7b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b7b6:	782a      	ldrb	r2, [r5, #0]
 800b7b8:	2a30      	cmp	r2, #48	@ 0x30
 800b7ba:	f040 80b3 	bne.w	800b924 <_strtod_l+0x1a4>
 800b7be:	786a      	ldrb	r2, [r5, #1]
 800b7c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b7c4:	2a58      	cmp	r2, #88	@ 0x58
 800b7c6:	d16e      	bne.n	800b8a6 <_strtod_l+0x126>
 800b7c8:	9302      	str	r3, [sp, #8]
 800b7ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	4a8e      	ldr	r2, [pc, #568]	@ (800ba0c <_strtod_l+0x28c>)
 800b7d4:	9805      	ldr	r0, [sp, #20]
 800b7d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b7d8:	a919      	add	r1, sp, #100	@ 0x64
 800b7da:	f001 f99f 	bl	800cb1c <__gethex>
 800b7de:	f010 060f 	ands.w	r6, r0, #15
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	d005      	beq.n	800b7f2 <_strtod_l+0x72>
 800b7e6:	2e06      	cmp	r6, #6
 800b7e8:	d128      	bne.n	800b83c <_strtod_l+0xbc>
 800b7ea:	3501      	adds	r5, #1
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800b7f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f040 858e 	bne.w	800c316 <_strtod_l+0xb96>
 800b7fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7fc:	b1cb      	cbz	r3, 800b832 <_strtod_l+0xb2>
 800b7fe:	4652      	mov	r2, sl
 800b800:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b804:	ec43 2b10 	vmov	d0, r2, r3
 800b808:	b01f      	add	sp, #124	@ 0x7c
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	2920      	cmp	r1, #32
 800b810:	d1ce      	bne.n	800b7b0 <_strtod_l+0x30>
 800b812:	3201      	adds	r2, #1
 800b814:	e7c1      	b.n	800b79a <_strtod_l+0x1a>
 800b816:	292d      	cmp	r1, #45	@ 0x2d
 800b818:	d1ca      	bne.n	800b7b0 <_strtod_l+0x30>
 800b81a:	2101      	movs	r1, #1
 800b81c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b81e:	1c51      	adds	r1, r2, #1
 800b820:	9119      	str	r1, [sp, #100]	@ 0x64
 800b822:	7852      	ldrb	r2, [r2, #1]
 800b824:	2a00      	cmp	r2, #0
 800b826:	d1c5      	bne.n	800b7b4 <_strtod_l+0x34>
 800b828:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b82a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f040 8570 	bne.w	800c312 <_strtod_l+0xb92>
 800b832:	4652      	mov	r2, sl
 800b834:	465b      	mov	r3, fp
 800b836:	e7e5      	b.n	800b804 <_strtod_l+0x84>
 800b838:	2100      	movs	r1, #0
 800b83a:	e7ef      	b.n	800b81c <_strtod_l+0x9c>
 800b83c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b83e:	b13a      	cbz	r2, 800b850 <_strtod_l+0xd0>
 800b840:	2135      	movs	r1, #53	@ 0x35
 800b842:	a81c      	add	r0, sp, #112	@ 0x70
 800b844:	f7ff ff3a 	bl	800b6bc <__copybits>
 800b848:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b84a:	9805      	ldr	r0, [sp, #20]
 800b84c:	f7ff fb08 	bl	800ae60 <_Bfree>
 800b850:	3e01      	subs	r6, #1
 800b852:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b854:	2e04      	cmp	r6, #4
 800b856:	d806      	bhi.n	800b866 <_strtod_l+0xe6>
 800b858:	e8df f006 	tbb	[pc, r6]
 800b85c:	201d0314 	.word	0x201d0314
 800b860:	14          	.byte	0x14
 800b861:	00          	.byte	0x00
 800b862:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b866:	05e1      	lsls	r1, r4, #23
 800b868:	bf48      	it	mi
 800b86a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b86e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b872:	0d1b      	lsrs	r3, r3, #20
 800b874:	051b      	lsls	r3, r3, #20
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1bb      	bne.n	800b7f2 <_strtod_l+0x72>
 800b87a:	f7fe fb21 	bl	8009ec0 <__errno>
 800b87e:	2322      	movs	r3, #34	@ 0x22
 800b880:	6003      	str	r3, [r0, #0]
 800b882:	e7b6      	b.n	800b7f2 <_strtod_l+0x72>
 800b884:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b888:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b88c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b890:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b894:	e7e7      	b.n	800b866 <_strtod_l+0xe6>
 800b896:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ba14 <_strtod_l+0x294>
 800b89a:	e7e4      	b.n	800b866 <_strtod_l+0xe6>
 800b89c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b8a0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b8a4:	e7df      	b.n	800b866 <_strtod_l+0xe6>
 800b8a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8ac:	785b      	ldrb	r3, [r3, #1]
 800b8ae:	2b30      	cmp	r3, #48	@ 0x30
 800b8b0:	d0f9      	beq.n	800b8a6 <_strtod_l+0x126>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d09d      	beq.n	800b7f2 <_strtod_l+0x72>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8be:	2300      	movs	r3, #0
 800b8c0:	9308      	str	r3, [sp, #32]
 800b8c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8c4:	461f      	mov	r7, r3
 800b8c6:	220a      	movs	r2, #10
 800b8c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b8ca:	7805      	ldrb	r5, [r0, #0]
 800b8cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b8d0:	b2d9      	uxtb	r1, r3
 800b8d2:	2909      	cmp	r1, #9
 800b8d4:	d928      	bls.n	800b928 <_strtod_l+0x1a8>
 800b8d6:	494e      	ldr	r1, [pc, #312]	@ (800ba10 <_strtod_l+0x290>)
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f001 f837 	bl	800c94c <strncmp>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d032      	beq.n	800b948 <_strtod_l+0x1c8>
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	4681      	mov	r9, r0
 800b8e8:	463d      	mov	r5, r7
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2a65      	cmp	r2, #101	@ 0x65
 800b8ee:	d001      	beq.n	800b8f4 <_strtod_l+0x174>
 800b8f0:	2a45      	cmp	r2, #69	@ 0x45
 800b8f2:	d114      	bne.n	800b91e <_strtod_l+0x19e>
 800b8f4:	b91d      	cbnz	r5, 800b8fe <_strtod_l+0x17e>
 800b8f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8f8:	4302      	orrs	r2, r0
 800b8fa:	d095      	beq.n	800b828 <_strtod_l+0xa8>
 800b8fc:	2500      	movs	r5, #0
 800b8fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b900:	1c62      	adds	r2, r4, #1
 800b902:	9219      	str	r2, [sp, #100]	@ 0x64
 800b904:	7862      	ldrb	r2, [r4, #1]
 800b906:	2a2b      	cmp	r2, #43	@ 0x2b
 800b908:	d077      	beq.n	800b9fa <_strtod_l+0x27a>
 800b90a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b90c:	d07b      	beq.n	800ba06 <_strtod_l+0x286>
 800b90e:	f04f 0c00 	mov.w	ip, #0
 800b912:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b916:	2909      	cmp	r1, #9
 800b918:	f240 8082 	bls.w	800ba20 <_strtod_l+0x2a0>
 800b91c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b91e:	f04f 0800 	mov.w	r8, #0
 800b922:	e0a2      	b.n	800ba6a <_strtod_l+0x2ea>
 800b924:	2300      	movs	r3, #0
 800b926:	e7c7      	b.n	800b8b8 <_strtod_l+0x138>
 800b928:	2f08      	cmp	r7, #8
 800b92a:	bfd5      	itete	le
 800b92c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b92e:	9908      	ldrgt	r1, [sp, #32]
 800b930:	fb02 3301 	mlale	r3, r2, r1, r3
 800b934:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b938:	f100 0001 	add.w	r0, r0, #1
 800b93c:	bfd4      	ite	le
 800b93e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b940:	9308      	strgt	r3, [sp, #32]
 800b942:	3701      	adds	r7, #1
 800b944:	9019      	str	r0, [sp, #100]	@ 0x64
 800b946:	e7bf      	b.n	800b8c8 <_strtod_l+0x148>
 800b948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b94a:	1c5a      	adds	r2, r3, #1
 800b94c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b94e:	785a      	ldrb	r2, [r3, #1]
 800b950:	b37f      	cbz	r7, 800b9b2 <_strtod_l+0x232>
 800b952:	4681      	mov	r9, r0
 800b954:	463d      	mov	r5, r7
 800b956:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b95a:	2b09      	cmp	r3, #9
 800b95c:	d912      	bls.n	800b984 <_strtod_l+0x204>
 800b95e:	2301      	movs	r3, #1
 800b960:	e7c4      	b.n	800b8ec <_strtod_l+0x16c>
 800b962:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	9219      	str	r2, [sp, #100]	@ 0x64
 800b968:	785a      	ldrb	r2, [r3, #1]
 800b96a:	3001      	adds	r0, #1
 800b96c:	2a30      	cmp	r2, #48	@ 0x30
 800b96e:	d0f8      	beq.n	800b962 <_strtod_l+0x1e2>
 800b970:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b974:	2b08      	cmp	r3, #8
 800b976:	f200 84d3 	bhi.w	800c320 <_strtod_l+0xba0>
 800b97a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b97c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b97e:	4681      	mov	r9, r0
 800b980:	2000      	movs	r0, #0
 800b982:	4605      	mov	r5, r0
 800b984:	3a30      	subs	r2, #48	@ 0x30
 800b986:	f100 0301 	add.w	r3, r0, #1
 800b98a:	d02a      	beq.n	800b9e2 <_strtod_l+0x262>
 800b98c:	4499      	add	r9, r3
 800b98e:	eb00 0c05 	add.w	ip, r0, r5
 800b992:	462b      	mov	r3, r5
 800b994:	210a      	movs	r1, #10
 800b996:	4563      	cmp	r3, ip
 800b998:	d10d      	bne.n	800b9b6 <_strtod_l+0x236>
 800b99a:	1c69      	adds	r1, r5, #1
 800b99c:	4401      	add	r1, r0
 800b99e:	4428      	add	r0, r5
 800b9a0:	2808      	cmp	r0, #8
 800b9a2:	dc16      	bgt.n	800b9d2 <_strtod_l+0x252>
 800b9a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b9a6:	230a      	movs	r3, #10
 800b9a8:	fb03 2300 	mla	r3, r3, r0, r2
 800b9ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e018      	b.n	800b9e4 <_strtod_l+0x264>
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	e7da      	b.n	800b96c <_strtod_l+0x1ec>
 800b9b6:	2b08      	cmp	r3, #8
 800b9b8:	f103 0301 	add.w	r3, r3, #1
 800b9bc:	dc03      	bgt.n	800b9c6 <_strtod_l+0x246>
 800b9be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b9c0:	434e      	muls	r6, r1
 800b9c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b9c4:	e7e7      	b.n	800b996 <_strtod_l+0x216>
 800b9c6:	2b10      	cmp	r3, #16
 800b9c8:	bfde      	ittt	le
 800b9ca:	9e08      	ldrle	r6, [sp, #32]
 800b9cc:	434e      	mulle	r6, r1
 800b9ce:	9608      	strle	r6, [sp, #32]
 800b9d0:	e7e1      	b.n	800b996 <_strtod_l+0x216>
 800b9d2:	280f      	cmp	r0, #15
 800b9d4:	dceb      	bgt.n	800b9ae <_strtod_l+0x22e>
 800b9d6:	9808      	ldr	r0, [sp, #32]
 800b9d8:	230a      	movs	r3, #10
 800b9da:	fb03 2300 	mla	r3, r3, r0, r2
 800b9de:	9308      	str	r3, [sp, #32]
 800b9e0:	e7e5      	b.n	800b9ae <_strtod_l+0x22e>
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9e6:	1c50      	adds	r0, r2, #1
 800b9e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b9ea:	7852      	ldrb	r2, [r2, #1]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	460d      	mov	r5, r1
 800b9f0:	e7b1      	b.n	800b956 <_strtod_l+0x1d6>
 800b9f2:	f04f 0900 	mov.w	r9, #0
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e77d      	b.n	800b8f6 <_strtod_l+0x176>
 800b9fa:	f04f 0c00 	mov.w	ip, #0
 800b9fe:	1ca2      	adds	r2, r4, #2
 800ba00:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba02:	78a2      	ldrb	r2, [r4, #2]
 800ba04:	e785      	b.n	800b912 <_strtod_l+0x192>
 800ba06:	f04f 0c01 	mov.w	ip, #1
 800ba0a:	e7f8      	b.n	800b9fe <_strtod_l+0x27e>
 800ba0c:	0800da48 	.word	0x0800da48
 800ba10:	0800da30 	.word	0x0800da30
 800ba14:	7ff00000 	.word	0x7ff00000
 800ba18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba1a:	1c51      	adds	r1, r2, #1
 800ba1c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ba1e:	7852      	ldrb	r2, [r2, #1]
 800ba20:	2a30      	cmp	r2, #48	@ 0x30
 800ba22:	d0f9      	beq.n	800ba18 <_strtod_l+0x298>
 800ba24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ba28:	2908      	cmp	r1, #8
 800ba2a:	f63f af78 	bhi.w	800b91e <_strtod_l+0x19e>
 800ba2e:	3a30      	subs	r2, #48	@ 0x30
 800ba30:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba34:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ba36:	f04f 080a 	mov.w	r8, #10
 800ba3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba3c:	1c56      	adds	r6, r2, #1
 800ba3e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ba40:	7852      	ldrb	r2, [r2, #1]
 800ba42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ba46:	f1be 0f09 	cmp.w	lr, #9
 800ba4a:	d939      	bls.n	800bac0 <_strtod_l+0x340>
 800ba4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ba4e:	1a76      	subs	r6, r6, r1
 800ba50:	2e08      	cmp	r6, #8
 800ba52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ba56:	dc03      	bgt.n	800ba60 <_strtod_l+0x2e0>
 800ba58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ba5a:	4588      	cmp	r8, r1
 800ba5c:	bfa8      	it	ge
 800ba5e:	4688      	movge	r8, r1
 800ba60:	f1bc 0f00 	cmp.w	ip, #0
 800ba64:	d001      	beq.n	800ba6a <_strtod_l+0x2ea>
 800ba66:	f1c8 0800 	rsb	r8, r8, #0
 800ba6a:	2d00      	cmp	r5, #0
 800ba6c:	d14e      	bne.n	800bb0c <_strtod_l+0x38c>
 800ba6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba70:	4308      	orrs	r0, r1
 800ba72:	f47f aebe 	bne.w	800b7f2 <_strtod_l+0x72>
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f47f aed6 	bne.w	800b828 <_strtod_l+0xa8>
 800ba7c:	2a69      	cmp	r2, #105	@ 0x69
 800ba7e:	d028      	beq.n	800bad2 <_strtod_l+0x352>
 800ba80:	dc25      	bgt.n	800bace <_strtod_l+0x34e>
 800ba82:	2a49      	cmp	r2, #73	@ 0x49
 800ba84:	d025      	beq.n	800bad2 <_strtod_l+0x352>
 800ba86:	2a4e      	cmp	r2, #78	@ 0x4e
 800ba88:	f47f aece 	bne.w	800b828 <_strtod_l+0xa8>
 800ba8c:	499b      	ldr	r1, [pc, #620]	@ (800bcfc <_strtod_l+0x57c>)
 800ba8e:	a819      	add	r0, sp, #100	@ 0x64
 800ba90:	f001 fa66 	bl	800cf60 <__match>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	f43f aec7 	beq.w	800b828 <_strtod_l+0xa8>
 800ba9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	2b28      	cmp	r3, #40	@ 0x28
 800baa0:	d12e      	bne.n	800bb00 <_strtod_l+0x380>
 800baa2:	4997      	ldr	r1, [pc, #604]	@ (800bd00 <_strtod_l+0x580>)
 800baa4:	aa1c      	add	r2, sp, #112	@ 0x70
 800baa6:	a819      	add	r0, sp, #100	@ 0x64
 800baa8:	f001 fa6e 	bl	800cf88 <__hexnan>
 800baac:	2805      	cmp	r0, #5
 800baae:	d127      	bne.n	800bb00 <_strtod_l+0x380>
 800bab0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bab2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bab6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800baba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800babe:	e698      	b.n	800b7f2 <_strtod_l+0x72>
 800bac0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bac2:	fb08 2101 	mla	r1, r8, r1, r2
 800bac6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800baca:	920e      	str	r2, [sp, #56]	@ 0x38
 800bacc:	e7b5      	b.n	800ba3a <_strtod_l+0x2ba>
 800bace:	2a6e      	cmp	r2, #110	@ 0x6e
 800bad0:	e7da      	b.n	800ba88 <_strtod_l+0x308>
 800bad2:	498c      	ldr	r1, [pc, #560]	@ (800bd04 <_strtod_l+0x584>)
 800bad4:	a819      	add	r0, sp, #100	@ 0x64
 800bad6:	f001 fa43 	bl	800cf60 <__match>
 800bada:	2800      	cmp	r0, #0
 800badc:	f43f aea4 	beq.w	800b828 <_strtod_l+0xa8>
 800bae0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bae2:	4989      	ldr	r1, [pc, #548]	@ (800bd08 <_strtod_l+0x588>)
 800bae4:	3b01      	subs	r3, #1
 800bae6:	a819      	add	r0, sp, #100	@ 0x64
 800bae8:	9319      	str	r3, [sp, #100]	@ 0x64
 800baea:	f001 fa39 	bl	800cf60 <__match>
 800baee:	b910      	cbnz	r0, 800baf6 <_strtod_l+0x376>
 800baf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baf2:	3301      	adds	r3, #1
 800baf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800baf6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bd18 <_strtod_l+0x598>
 800bafa:	f04f 0a00 	mov.w	sl, #0
 800bafe:	e678      	b.n	800b7f2 <_strtod_l+0x72>
 800bb00:	4882      	ldr	r0, [pc, #520]	@ (800bd0c <_strtod_l+0x58c>)
 800bb02:	f000 ff69 	bl	800c9d8 <nan>
 800bb06:	ec5b ab10 	vmov	sl, fp, d0
 800bb0a:	e672      	b.n	800b7f2 <_strtod_l+0x72>
 800bb0c:	eba8 0309 	sub.w	r3, r8, r9
 800bb10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb12:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb14:	2f00      	cmp	r7, #0
 800bb16:	bf08      	it	eq
 800bb18:	462f      	moveq	r7, r5
 800bb1a:	2d10      	cmp	r5, #16
 800bb1c:	462c      	mov	r4, r5
 800bb1e:	bfa8      	it	ge
 800bb20:	2410      	movge	r4, #16
 800bb22:	f7f4 fcf7 	bl	8000514 <__aeabi_ui2d>
 800bb26:	2d09      	cmp	r5, #9
 800bb28:	4682      	mov	sl, r0
 800bb2a:	468b      	mov	fp, r1
 800bb2c:	dc13      	bgt.n	800bb56 <_strtod_l+0x3d6>
 800bb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f43f ae5e 	beq.w	800b7f2 <_strtod_l+0x72>
 800bb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb38:	dd78      	ble.n	800bc2c <_strtod_l+0x4ac>
 800bb3a:	2b16      	cmp	r3, #22
 800bb3c:	dc5f      	bgt.n	800bbfe <_strtod_l+0x47e>
 800bb3e:	4974      	ldr	r1, [pc, #464]	@ (800bd10 <_strtod_l+0x590>)
 800bb40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb48:	4652      	mov	r2, sl
 800bb4a:	465b      	mov	r3, fp
 800bb4c:	f7f4 fd5c 	bl	8000608 <__aeabi_dmul>
 800bb50:	4682      	mov	sl, r0
 800bb52:	468b      	mov	fp, r1
 800bb54:	e64d      	b.n	800b7f2 <_strtod_l+0x72>
 800bb56:	4b6e      	ldr	r3, [pc, #440]	@ (800bd10 <_strtod_l+0x590>)
 800bb58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bb60:	f7f4 fd52 	bl	8000608 <__aeabi_dmul>
 800bb64:	4682      	mov	sl, r0
 800bb66:	9808      	ldr	r0, [sp, #32]
 800bb68:	468b      	mov	fp, r1
 800bb6a:	f7f4 fcd3 	bl	8000514 <__aeabi_ui2d>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	4650      	mov	r0, sl
 800bb74:	4659      	mov	r1, fp
 800bb76:	f7f4 fb91 	bl	800029c <__adddf3>
 800bb7a:	2d0f      	cmp	r5, #15
 800bb7c:	4682      	mov	sl, r0
 800bb7e:	468b      	mov	fp, r1
 800bb80:	ddd5      	ble.n	800bb2e <_strtod_l+0x3ae>
 800bb82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb84:	1b2c      	subs	r4, r5, r4
 800bb86:	441c      	add	r4, r3
 800bb88:	2c00      	cmp	r4, #0
 800bb8a:	f340 8096 	ble.w	800bcba <_strtod_l+0x53a>
 800bb8e:	f014 030f 	ands.w	r3, r4, #15
 800bb92:	d00a      	beq.n	800bbaa <_strtod_l+0x42a>
 800bb94:	495e      	ldr	r1, [pc, #376]	@ (800bd10 <_strtod_l+0x590>)
 800bb96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb9a:	4652      	mov	r2, sl
 800bb9c:	465b      	mov	r3, fp
 800bb9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bba2:	f7f4 fd31 	bl	8000608 <__aeabi_dmul>
 800bba6:	4682      	mov	sl, r0
 800bba8:	468b      	mov	fp, r1
 800bbaa:	f034 040f 	bics.w	r4, r4, #15
 800bbae:	d073      	beq.n	800bc98 <_strtod_l+0x518>
 800bbb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bbb4:	dd48      	ble.n	800bc48 <_strtod_l+0x4c8>
 800bbb6:	2400      	movs	r4, #0
 800bbb8:	46a0      	mov	r8, r4
 800bbba:	940a      	str	r4, [sp, #40]	@ 0x28
 800bbbc:	46a1      	mov	r9, r4
 800bbbe:	9a05      	ldr	r2, [sp, #20]
 800bbc0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bd18 <_strtod_l+0x598>
 800bbc4:	2322      	movs	r3, #34	@ 0x22
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	f04f 0a00 	mov.w	sl, #0
 800bbcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f43f ae0f 	beq.w	800b7f2 <_strtod_l+0x72>
 800bbd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbd6:	9805      	ldr	r0, [sp, #20]
 800bbd8:	f7ff f942 	bl	800ae60 <_Bfree>
 800bbdc:	9805      	ldr	r0, [sp, #20]
 800bbde:	4649      	mov	r1, r9
 800bbe0:	f7ff f93e 	bl	800ae60 <_Bfree>
 800bbe4:	9805      	ldr	r0, [sp, #20]
 800bbe6:	4641      	mov	r1, r8
 800bbe8:	f7ff f93a 	bl	800ae60 <_Bfree>
 800bbec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbee:	9805      	ldr	r0, [sp, #20]
 800bbf0:	f7ff f936 	bl	800ae60 <_Bfree>
 800bbf4:	9805      	ldr	r0, [sp, #20]
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	f7ff f932 	bl	800ae60 <_Bfree>
 800bbfc:	e5f9      	b.n	800b7f2 <_strtod_l+0x72>
 800bbfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bc04:	4293      	cmp	r3, r2
 800bc06:	dbbc      	blt.n	800bb82 <_strtod_l+0x402>
 800bc08:	4c41      	ldr	r4, [pc, #260]	@ (800bd10 <_strtod_l+0x590>)
 800bc0a:	f1c5 050f 	rsb	r5, r5, #15
 800bc0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bc12:	4652      	mov	r2, sl
 800bc14:	465b      	mov	r3, fp
 800bc16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc1a:	f7f4 fcf5 	bl	8000608 <__aeabi_dmul>
 800bc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc20:	1b5d      	subs	r5, r3, r5
 800bc22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bc26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc2a:	e78f      	b.n	800bb4c <_strtod_l+0x3cc>
 800bc2c:	3316      	adds	r3, #22
 800bc2e:	dba8      	blt.n	800bb82 <_strtod_l+0x402>
 800bc30:	4b37      	ldr	r3, [pc, #220]	@ (800bd10 <_strtod_l+0x590>)
 800bc32:	eba9 0808 	sub.w	r8, r9, r8
 800bc36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bc3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bc3e:	4650      	mov	r0, sl
 800bc40:	4659      	mov	r1, fp
 800bc42:	f7f4 fe0b 	bl	800085c <__aeabi_ddiv>
 800bc46:	e783      	b.n	800bb50 <_strtod_l+0x3d0>
 800bc48:	4b32      	ldr	r3, [pc, #200]	@ (800bd14 <_strtod_l+0x594>)
 800bc4a:	9308      	str	r3, [sp, #32]
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	1124      	asrs	r4, r4, #4
 800bc50:	4650      	mov	r0, sl
 800bc52:	4659      	mov	r1, fp
 800bc54:	461e      	mov	r6, r3
 800bc56:	2c01      	cmp	r4, #1
 800bc58:	dc21      	bgt.n	800bc9e <_strtod_l+0x51e>
 800bc5a:	b10b      	cbz	r3, 800bc60 <_strtod_l+0x4e0>
 800bc5c:	4682      	mov	sl, r0
 800bc5e:	468b      	mov	fp, r1
 800bc60:	492c      	ldr	r1, [pc, #176]	@ (800bd14 <_strtod_l+0x594>)
 800bc62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bc66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bc6a:	4652      	mov	r2, sl
 800bc6c:	465b      	mov	r3, fp
 800bc6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc72:	f7f4 fcc9 	bl	8000608 <__aeabi_dmul>
 800bc76:	4b28      	ldr	r3, [pc, #160]	@ (800bd18 <_strtod_l+0x598>)
 800bc78:	460a      	mov	r2, r1
 800bc7a:	400b      	ands	r3, r1
 800bc7c:	4927      	ldr	r1, [pc, #156]	@ (800bd1c <_strtod_l+0x59c>)
 800bc7e:	428b      	cmp	r3, r1
 800bc80:	4682      	mov	sl, r0
 800bc82:	d898      	bhi.n	800bbb6 <_strtod_l+0x436>
 800bc84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bc88:	428b      	cmp	r3, r1
 800bc8a:	bf86      	itte	hi
 800bc8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bd20 <_strtod_l+0x5a0>
 800bc90:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800bc94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bc98:	2300      	movs	r3, #0
 800bc9a:	9308      	str	r3, [sp, #32]
 800bc9c:	e07a      	b.n	800bd94 <_strtod_l+0x614>
 800bc9e:	07e2      	lsls	r2, r4, #31
 800bca0:	d505      	bpl.n	800bcae <_strtod_l+0x52e>
 800bca2:	9b08      	ldr	r3, [sp, #32]
 800bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca8:	f7f4 fcae 	bl	8000608 <__aeabi_dmul>
 800bcac:	2301      	movs	r3, #1
 800bcae:	9a08      	ldr	r2, [sp, #32]
 800bcb0:	3208      	adds	r2, #8
 800bcb2:	3601      	adds	r6, #1
 800bcb4:	1064      	asrs	r4, r4, #1
 800bcb6:	9208      	str	r2, [sp, #32]
 800bcb8:	e7cd      	b.n	800bc56 <_strtod_l+0x4d6>
 800bcba:	d0ed      	beq.n	800bc98 <_strtod_l+0x518>
 800bcbc:	4264      	negs	r4, r4
 800bcbe:	f014 020f 	ands.w	r2, r4, #15
 800bcc2:	d00a      	beq.n	800bcda <_strtod_l+0x55a>
 800bcc4:	4b12      	ldr	r3, [pc, #72]	@ (800bd10 <_strtod_l+0x590>)
 800bcc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcca:	4650      	mov	r0, sl
 800bccc:	4659      	mov	r1, fp
 800bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd2:	f7f4 fdc3 	bl	800085c <__aeabi_ddiv>
 800bcd6:	4682      	mov	sl, r0
 800bcd8:	468b      	mov	fp, r1
 800bcda:	1124      	asrs	r4, r4, #4
 800bcdc:	d0dc      	beq.n	800bc98 <_strtod_l+0x518>
 800bcde:	2c1f      	cmp	r4, #31
 800bce0:	dd20      	ble.n	800bd24 <_strtod_l+0x5a4>
 800bce2:	2400      	movs	r4, #0
 800bce4:	46a0      	mov	r8, r4
 800bce6:	940a      	str	r4, [sp, #40]	@ 0x28
 800bce8:	46a1      	mov	r9, r4
 800bcea:	9a05      	ldr	r2, [sp, #20]
 800bcec:	2322      	movs	r3, #34	@ 0x22
 800bcee:	f04f 0a00 	mov.w	sl, #0
 800bcf2:	f04f 0b00 	mov.w	fp, #0
 800bcf6:	6013      	str	r3, [r2, #0]
 800bcf8:	e768      	b.n	800bbcc <_strtod_l+0x44c>
 800bcfa:	bf00      	nop
 800bcfc:	0800d81d 	.word	0x0800d81d
 800bd00:	0800da34 	.word	0x0800da34
 800bd04:	0800d815 	.word	0x0800d815
 800bd08:	0800d84c 	.word	0x0800d84c
 800bd0c:	0800dbdd 	.word	0x0800dbdd
 800bd10:	0800d968 	.word	0x0800d968
 800bd14:	0800d940 	.word	0x0800d940
 800bd18:	7ff00000 	.word	0x7ff00000
 800bd1c:	7ca00000 	.word	0x7ca00000
 800bd20:	7fefffff 	.word	0x7fefffff
 800bd24:	f014 0310 	ands.w	r3, r4, #16
 800bd28:	bf18      	it	ne
 800bd2a:	236a      	movne	r3, #106	@ 0x6a
 800bd2c:	4ea9      	ldr	r6, [pc, #676]	@ (800bfd4 <_strtod_l+0x854>)
 800bd2e:	9308      	str	r3, [sp, #32]
 800bd30:	4650      	mov	r0, sl
 800bd32:	4659      	mov	r1, fp
 800bd34:	2300      	movs	r3, #0
 800bd36:	07e2      	lsls	r2, r4, #31
 800bd38:	d504      	bpl.n	800bd44 <_strtod_l+0x5c4>
 800bd3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd3e:	f7f4 fc63 	bl	8000608 <__aeabi_dmul>
 800bd42:	2301      	movs	r3, #1
 800bd44:	1064      	asrs	r4, r4, #1
 800bd46:	f106 0608 	add.w	r6, r6, #8
 800bd4a:	d1f4      	bne.n	800bd36 <_strtod_l+0x5b6>
 800bd4c:	b10b      	cbz	r3, 800bd52 <_strtod_l+0x5d2>
 800bd4e:	4682      	mov	sl, r0
 800bd50:	468b      	mov	fp, r1
 800bd52:	9b08      	ldr	r3, [sp, #32]
 800bd54:	b1b3      	cbz	r3, 800bd84 <_strtod_l+0x604>
 800bd56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bd5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	4659      	mov	r1, fp
 800bd62:	dd0f      	ble.n	800bd84 <_strtod_l+0x604>
 800bd64:	2b1f      	cmp	r3, #31
 800bd66:	dd55      	ble.n	800be14 <_strtod_l+0x694>
 800bd68:	2b34      	cmp	r3, #52	@ 0x34
 800bd6a:	bfde      	ittt	le
 800bd6c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800bd70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bd74:	4093      	lslle	r3, r2
 800bd76:	f04f 0a00 	mov.w	sl, #0
 800bd7a:	bfcc      	ite	gt
 800bd7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bd80:	ea03 0b01 	andle.w	fp, r3, r1
 800bd84:	2200      	movs	r2, #0
 800bd86:	2300      	movs	r3, #0
 800bd88:	4650      	mov	r0, sl
 800bd8a:	4659      	mov	r1, fp
 800bd8c:	f7f4 fea4 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d1a6      	bne.n	800bce2 <_strtod_l+0x562>
 800bd94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd9a:	9805      	ldr	r0, [sp, #20]
 800bd9c:	462b      	mov	r3, r5
 800bd9e:	463a      	mov	r2, r7
 800bda0:	f7ff f8c6 	bl	800af30 <__s2b>
 800bda4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bda6:	2800      	cmp	r0, #0
 800bda8:	f43f af05 	beq.w	800bbb6 <_strtod_l+0x436>
 800bdac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdae:	2a00      	cmp	r2, #0
 800bdb0:	eba9 0308 	sub.w	r3, r9, r8
 800bdb4:	bfa8      	it	ge
 800bdb6:	2300      	movge	r3, #0
 800bdb8:	9312      	str	r3, [sp, #72]	@ 0x48
 800bdba:	2400      	movs	r4, #0
 800bdbc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bdc0:	9316      	str	r3, [sp, #88]	@ 0x58
 800bdc2:	46a0      	mov	r8, r4
 800bdc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdc6:	9805      	ldr	r0, [sp, #20]
 800bdc8:	6859      	ldr	r1, [r3, #4]
 800bdca:	f7ff f809 	bl	800ade0 <_Balloc>
 800bdce:	4681      	mov	r9, r0
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	f43f aef4 	beq.w	800bbbe <_strtod_l+0x43e>
 800bdd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdd8:	691a      	ldr	r2, [r3, #16]
 800bdda:	3202      	adds	r2, #2
 800bddc:	f103 010c 	add.w	r1, r3, #12
 800bde0:	0092      	lsls	r2, r2, #2
 800bde2:	300c      	adds	r0, #12
 800bde4:	f7fe f899 	bl	8009f1a <memcpy>
 800bde8:	ec4b ab10 	vmov	d0, sl, fp
 800bdec:	9805      	ldr	r0, [sp, #20]
 800bdee:	aa1c      	add	r2, sp, #112	@ 0x70
 800bdf0:	a91b      	add	r1, sp, #108	@ 0x6c
 800bdf2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bdf6:	f7ff fbd7 	bl	800b5a8 <__d2b>
 800bdfa:	901a      	str	r0, [sp, #104]	@ 0x68
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	f43f aede 	beq.w	800bbbe <_strtod_l+0x43e>
 800be02:	9805      	ldr	r0, [sp, #20]
 800be04:	2101      	movs	r1, #1
 800be06:	f7ff f929 	bl	800b05c <__i2b>
 800be0a:	4680      	mov	r8, r0
 800be0c:	b948      	cbnz	r0, 800be22 <_strtod_l+0x6a2>
 800be0e:	f04f 0800 	mov.w	r8, #0
 800be12:	e6d4      	b.n	800bbbe <_strtod_l+0x43e>
 800be14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be18:	fa02 f303 	lsl.w	r3, r2, r3
 800be1c:	ea03 0a0a 	and.w	sl, r3, sl
 800be20:	e7b0      	b.n	800bd84 <_strtod_l+0x604>
 800be22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800be24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800be26:	2d00      	cmp	r5, #0
 800be28:	bfab      	itete	ge
 800be2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800be2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800be2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800be30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800be32:	bfac      	ite	ge
 800be34:	18ef      	addge	r7, r5, r3
 800be36:	1b5e      	sublt	r6, r3, r5
 800be38:	9b08      	ldr	r3, [sp, #32]
 800be3a:	1aed      	subs	r5, r5, r3
 800be3c:	4415      	add	r5, r2
 800be3e:	4b66      	ldr	r3, [pc, #408]	@ (800bfd8 <_strtod_l+0x858>)
 800be40:	3d01      	subs	r5, #1
 800be42:	429d      	cmp	r5, r3
 800be44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800be48:	da50      	bge.n	800beec <_strtod_l+0x76c>
 800be4a:	1b5b      	subs	r3, r3, r5
 800be4c:	2b1f      	cmp	r3, #31
 800be4e:	eba2 0203 	sub.w	r2, r2, r3
 800be52:	f04f 0101 	mov.w	r1, #1
 800be56:	dc3d      	bgt.n	800bed4 <_strtod_l+0x754>
 800be58:	fa01 f303 	lsl.w	r3, r1, r3
 800be5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be5e:	2300      	movs	r3, #0
 800be60:	9310      	str	r3, [sp, #64]	@ 0x40
 800be62:	18bd      	adds	r5, r7, r2
 800be64:	9b08      	ldr	r3, [sp, #32]
 800be66:	42af      	cmp	r7, r5
 800be68:	4416      	add	r6, r2
 800be6a:	441e      	add	r6, r3
 800be6c:	463b      	mov	r3, r7
 800be6e:	bfa8      	it	ge
 800be70:	462b      	movge	r3, r5
 800be72:	42b3      	cmp	r3, r6
 800be74:	bfa8      	it	ge
 800be76:	4633      	movge	r3, r6
 800be78:	2b00      	cmp	r3, #0
 800be7a:	bfc2      	ittt	gt
 800be7c:	1aed      	subgt	r5, r5, r3
 800be7e:	1af6      	subgt	r6, r6, r3
 800be80:	1aff      	subgt	r7, r7, r3
 800be82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be84:	2b00      	cmp	r3, #0
 800be86:	dd16      	ble.n	800beb6 <_strtod_l+0x736>
 800be88:	4641      	mov	r1, r8
 800be8a:	9805      	ldr	r0, [sp, #20]
 800be8c:	461a      	mov	r2, r3
 800be8e:	f7ff f9a5 	bl	800b1dc <__pow5mult>
 800be92:	4680      	mov	r8, r0
 800be94:	2800      	cmp	r0, #0
 800be96:	d0ba      	beq.n	800be0e <_strtod_l+0x68e>
 800be98:	4601      	mov	r1, r0
 800be9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800be9c:	9805      	ldr	r0, [sp, #20]
 800be9e:	f7ff f8f3 	bl	800b088 <__multiply>
 800bea2:	900e      	str	r0, [sp, #56]	@ 0x38
 800bea4:	2800      	cmp	r0, #0
 800bea6:	f43f ae8a 	beq.w	800bbbe <_strtod_l+0x43e>
 800beaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800beac:	9805      	ldr	r0, [sp, #20]
 800beae:	f7fe ffd7 	bl	800ae60 <_Bfree>
 800beb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800beb6:	2d00      	cmp	r5, #0
 800beb8:	dc1d      	bgt.n	800bef6 <_strtod_l+0x776>
 800beba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	dd23      	ble.n	800bf08 <_strtod_l+0x788>
 800bec0:	4649      	mov	r1, r9
 800bec2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bec4:	9805      	ldr	r0, [sp, #20]
 800bec6:	f7ff f989 	bl	800b1dc <__pow5mult>
 800beca:	4681      	mov	r9, r0
 800becc:	b9e0      	cbnz	r0, 800bf08 <_strtod_l+0x788>
 800bece:	f04f 0900 	mov.w	r9, #0
 800bed2:	e674      	b.n	800bbbe <_strtod_l+0x43e>
 800bed4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bed8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bedc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bee0:	35e2      	adds	r5, #226	@ 0xe2
 800bee2:	fa01 f305 	lsl.w	r3, r1, r5
 800bee6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bee8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800beea:	e7ba      	b.n	800be62 <_strtod_l+0x6e2>
 800beec:	2300      	movs	r3, #0
 800beee:	9310      	str	r3, [sp, #64]	@ 0x40
 800bef0:	2301      	movs	r3, #1
 800bef2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bef4:	e7b5      	b.n	800be62 <_strtod_l+0x6e2>
 800bef6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bef8:	9805      	ldr	r0, [sp, #20]
 800befa:	462a      	mov	r2, r5
 800befc:	f7ff f9c8 	bl	800b290 <__lshift>
 800bf00:	901a      	str	r0, [sp, #104]	@ 0x68
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d1d9      	bne.n	800beba <_strtod_l+0x73a>
 800bf06:	e65a      	b.n	800bbbe <_strtod_l+0x43e>
 800bf08:	2e00      	cmp	r6, #0
 800bf0a:	dd07      	ble.n	800bf1c <_strtod_l+0x79c>
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	9805      	ldr	r0, [sp, #20]
 800bf10:	4632      	mov	r2, r6
 800bf12:	f7ff f9bd 	bl	800b290 <__lshift>
 800bf16:	4681      	mov	r9, r0
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d0d8      	beq.n	800bece <_strtod_l+0x74e>
 800bf1c:	2f00      	cmp	r7, #0
 800bf1e:	dd08      	ble.n	800bf32 <_strtod_l+0x7b2>
 800bf20:	4641      	mov	r1, r8
 800bf22:	9805      	ldr	r0, [sp, #20]
 800bf24:	463a      	mov	r2, r7
 800bf26:	f7ff f9b3 	bl	800b290 <__lshift>
 800bf2a:	4680      	mov	r8, r0
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	f43f ae46 	beq.w	800bbbe <_strtod_l+0x43e>
 800bf32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf34:	9805      	ldr	r0, [sp, #20]
 800bf36:	464a      	mov	r2, r9
 800bf38:	f7ff fa32 	bl	800b3a0 <__mdiff>
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	f43f ae3d 	beq.w	800bbbe <_strtod_l+0x43e>
 800bf44:	68c3      	ldr	r3, [r0, #12]
 800bf46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60c3      	str	r3, [r0, #12]
 800bf4c:	4641      	mov	r1, r8
 800bf4e:	f7ff fa0b 	bl	800b368 <__mcmp>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	da46      	bge.n	800bfe4 <_strtod_l+0x864>
 800bf56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf58:	ea53 030a 	orrs.w	r3, r3, sl
 800bf5c:	d16c      	bne.n	800c038 <_strtod_l+0x8b8>
 800bf5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d168      	bne.n	800c038 <_strtod_l+0x8b8>
 800bf66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf6a:	0d1b      	lsrs	r3, r3, #20
 800bf6c:	051b      	lsls	r3, r3, #20
 800bf6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf72:	d961      	bls.n	800c038 <_strtod_l+0x8b8>
 800bf74:	6963      	ldr	r3, [r4, #20]
 800bf76:	b913      	cbnz	r3, 800bf7e <_strtod_l+0x7fe>
 800bf78:	6923      	ldr	r3, [r4, #16]
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	dd5c      	ble.n	800c038 <_strtod_l+0x8b8>
 800bf7e:	4621      	mov	r1, r4
 800bf80:	2201      	movs	r2, #1
 800bf82:	9805      	ldr	r0, [sp, #20]
 800bf84:	f7ff f984 	bl	800b290 <__lshift>
 800bf88:	4641      	mov	r1, r8
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	f7ff f9ec 	bl	800b368 <__mcmp>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	dd51      	ble.n	800c038 <_strtod_l+0x8b8>
 800bf94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf98:	9a08      	ldr	r2, [sp, #32]
 800bf9a:	0d1b      	lsrs	r3, r3, #20
 800bf9c:	051b      	lsls	r3, r3, #20
 800bf9e:	2a00      	cmp	r2, #0
 800bfa0:	d06b      	beq.n	800c07a <_strtod_l+0x8fa>
 800bfa2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bfa6:	d868      	bhi.n	800c07a <_strtod_l+0x8fa>
 800bfa8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bfac:	f67f ae9d 	bls.w	800bcea <_strtod_l+0x56a>
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	@ (800bfdc <_strtod_l+0x85c>)
 800bfb2:	4650      	mov	r0, sl
 800bfb4:	4659      	mov	r1, fp
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f7f4 fb26 	bl	8000608 <__aeabi_dmul>
 800bfbc:	4b08      	ldr	r3, [pc, #32]	@ (800bfe0 <_strtod_l+0x860>)
 800bfbe:	400b      	ands	r3, r1
 800bfc0:	4682      	mov	sl, r0
 800bfc2:	468b      	mov	fp, r1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f47f ae05 	bne.w	800bbd4 <_strtod_l+0x454>
 800bfca:	9a05      	ldr	r2, [sp, #20]
 800bfcc:	2322      	movs	r3, #34	@ 0x22
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	e600      	b.n	800bbd4 <_strtod_l+0x454>
 800bfd2:	bf00      	nop
 800bfd4:	0800da60 	.word	0x0800da60
 800bfd8:	fffffc02 	.word	0xfffffc02
 800bfdc:	39500000 	.word	0x39500000
 800bfe0:	7ff00000 	.word	0x7ff00000
 800bfe4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bfe8:	d165      	bne.n	800c0b6 <_strtod_l+0x936>
 800bfea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bfec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bff0:	b35a      	cbz	r2, 800c04a <_strtod_l+0x8ca>
 800bff2:	4a9f      	ldr	r2, [pc, #636]	@ (800c270 <_strtod_l+0xaf0>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d12b      	bne.n	800c050 <_strtod_l+0x8d0>
 800bff8:	9b08      	ldr	r3, [sp, #32]
 800bffa:	4651      	mov	r1, sl
 800bffc:	b303      	cbz	r3, 800c040 <_strtod_l+0x8c0>
 800bffe:	4b9d      	ldr	r3, [pc, #628]	@ (800c274 <_strtod_l+0xaf4>)
 800c000:	465a      	mov	r2, fp
 800c002:	4013      	ands	r3, r2
 800c004:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c008:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c00c:	d81b      	bhi.n	800c046 <_strtod_l+0x8c6>
 800c00e:	0d1b      	lsrs	r3, r3, #20
 800c010:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c014:	fa02 f303 	lsl.w	r3, r2, r3
 800c018:	4299      	cmp	r1, r3
 800c01a:	d119      	bne.n	800c050 <_strtod_l+0x8d0>
 800c01c:	4b96      	ldr	r3, [pc, #600]	@ (800c278 <_strtod_l+0xaf8>)
 800c01e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c020:	429a      	cmp	r2, r3
 800c022:	d102      	bne.n	800c02a <_strtod_l+0x8aa>
 800c024:	3101      	adds	r1, #1
 800c026:	f43f adca 	beq.w	800bbbe <_strtod_l+0x43e>
 800c02a:	4b92      	ldr	r3, [pc, #584]	@ (800c274 <_strtod_l+0xaf4>)
 800c02c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c02e:	401a      	ands	r2, r3
 800c030:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c034:	f04f 0a00 	mov.w	sl, #0
 800c038:	9b08      	ldr	r3, [sp, #32]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1b8      	bne.n	800bfb0 <_strtod_l+0x830>
 800c03e:	e5c9      	b.n	800bbd4 <_strtod_l+0x454>
 800c040:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c044:	e7e8      	b.n	800c018 <_strtod_l+0x898>
 800c046:	4613      	mov	r3, r2
 800c048:	e7e6      	b.n	800c018 <_strtod_l+0x898>
 800c04a:	ea53 030a 	orrs.w	r3, r3, sl
 800c04e:	d0a1      	beq.n	800bf94 <_strtod_l+0x814>
 800c050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c052:	b1db      	cbz	r3, 800c08c <_strtod_l+0x90c>
 800c054:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c056:	4213      	tst	r3, r2
 800c058:	d0ee      	beq.n	800c038 <_strtod_l+0x8b8>
 800c05a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c05c:	9a08      	ldr	r2, [sp, #32]
 800c05e:	4650      	mov	r0, sl
 800c060:	4659      	mov	r1, fp
 800c062:	b1bb      	cbz	r3, 800c094 <_strtod_l+0x914>
 800c064:	f7ff fb6e 	bl	800b744 <sulp>
 800c068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c06c:	ec53 2b10 	vmov	r2, r3, d0
 800c070:	f7f4 f914 	bl	800029c <__adddf3>
 800c074:	4682      	mov	sl, r0
 800c076:	468b      	mov	fp, r1
 800c078:	e7de      	b.n	800c038 <_strtod_l+0x8b8>
 800c07a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c07e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c082:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c086:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c08a:	e7d5      	b.n	800c038 <_strtod_l+0x8b8>
 800c08c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c08e:	ea13 0f0a 	tst.w	r3, sl
 800c092:	e7e1      	b.n	800c058 <_strtod_l+0x8d8>
 800c094:	f7ff fb56 	bl	800b744 <sulp>
 800c098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c09c:	ec53 2b10 	vmov	r2, r3, d0
 800c0a0:	f7f4 f8fa 	bl	8000298 <__aeabi_dsub>
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	4682      	mov	sl, r0
 800c0aa:	468b      	mov	fp, r1
 800c0ac:	f7f4 fd14 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d0c1      	beq.n	800c038 <_strtod_l+0x8b8>
 800c0b4:	e619      	b.n	800bcea <_strtod_l+0x56a>
 800c0b6:	4641      	mov	r1, r8
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f7ff facd 	bl	800b658 <__ratio>
 800c0be:	ec57 6b10 	vmov	r6, r7, d0
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	f7f4 fd18 	bl	8000b00 <__aeabi_dcmple>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d06f      	beq.n	800c1b4 <_strtod_l+0xa34>
 800c0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d17a      	bne.n	800c1d0 <_strtod_l+0xa50>
 800c0da:	f1ba 0f00 	cmp.w	sl, #0
 800c0de:	d158      	bne.n	800c192 <_strtod_l+0xa12>
 800c0e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d15a      	bne.n	800c1a0 <_strtod_l+0xa20>
 800c0ea:	4b64      	ldr	r3, [pc, #400]	@ (800c27c <_strtod_l+0xafc>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	4639      	mov	r1, r7
 800c0f2:	f7f4 fcfb 	bl	8000aec <__aeabi_dcmplt>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d159      	bne.n	800c1ae <_strtod_l+0xa2e>
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	4b60      	ldr	r3, [pc, #384]	@ (800c280 <_strtod_l+0xb00>)
 800c100:	2200      	movs	r2, #0
 800c102:	f7f4 fa81 	bl	8000608 <__aeabi_dmul>
 800c106:	4606      	mov	r6, r0
 800c108:	460f      	mov	r7, r1
 800c10a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c10e:	9606      	str	r6, [sp, #24]
 800c110:	9307      	str	r3, [sp, #28]
 800c112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c116:	4d57      	ldr	r5, [pc, #348]	@ (800c274 <_strtod_l+0xaf4>)
 800c118:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c11c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c11e:	401d      	ands	r5, r3
 800c120:	4b58      	ldr	r3, [pc, #352]	@ (800c284 <_strtod_l+0xb04>)
 800c122:	429d      	cmp	r5, r3
 800c124:	f040 80b2 	bne.w	800c28c <_strtod_l+0xb0c>
 800c128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c12a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c12e:	ec4b ab10 	vmov	d0, sl, fp
 800c132:	f7ff f9c9 	bl	800b4c8 <__ulp>
 800c136:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c13a:	ec51 0b10 	vmov	r0, r1, d0
 800c13e:	f7f4 fa63 	bl	8000608 <__aeabi_dmul>
 800c142:	4652      	mov	r2, sl
 800c144:	465b      	mov	r3, fp
 800c146:	f7f4 f8a9 	bl	800029c <__adddf3>
 800c14a:	460b      	mov	r3, r1
 800c14c:	4949      	ldr	r1, [pc, #292]	@ (800c274 <_strtod_l+0xaf4>)
 800c14e:	4a4e      	ldr	r2, [pc, #312]	@ (800c288 <_strtod_l+0xb08>)
 800c150:	4019      	ands	r1, r3
 800c152:	4291      	cmp	r1, r2
 800c154:	4682      	mov	sl, r0
 800c156:	d942      	bls.n	800c1de <_strtod_l+0xa5e>
 800c158:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c15a:	4b47      	ldr	r3, [pc, #284]	@ (800c278 <_strtod_l+0xaf8>)
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d103      	bne.n	800c168 <_strtod_l+0x9e8>
 800c160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c162:	3301      	adds	r3, #1
 800c164:	f43f ad2b 	beq.w	800bbbe <_strtod_l+0x43e>
 800c168:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c278 <_strtod_l+0xaf8>
 800c16c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c170:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c172:	9805      	ldr	r0, [sp, #20]
 800c174:	f7fe fe74 	bl	800ae60 <_Bfree>
 800c178:	9805      	ldr	r0, [sp, #20]
 800c17a:	4649      	mov	r1, r9
 800c17c:	f7fe fe70 	bl	800ae60 <_Bfree>
 800c180:	9805      	ldr	r0, [sp, #20]
 800c182:	4641      	mov	r1, r8
 800c184:	f7fe fe6c 	bl	800ae60 <_Bfree>
 800c188:	9805      	ldr	r0, [sp, #20]
 800c18a:	4621      	mov	r1, r4
 800c18c:	f7fe fe68 	bl	800ae60 <_Bfree>
 800c190:	e618      	b.n	800bdc4 <_strtod_l+0x644>
 800c192:	f1ba 0f01 	cmp.w	sl, #1
 800c196:	d103      	bne.n	800c1a0 <_strtod_l+0xa20>
 800c198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f43f ada5 	beq.w	800bcea <_strtod_l+0x56a>
 800c1a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c250 <_strtod_l+0xad0>
 800c1a4:	4f35      	ldr	r7, [pc, #212]	@ (800c27c <_strtod_l+0xafc>)
 800c1a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1aa:	2600      	movs	r6, #0
 800c1ac:	e7b1      	b.n	800c112 <_strtod_l+0x992>
 800c1ae:	4f34      	ldr	r7, [pc, #208]	@ (800c280 <_strtod_l+0xb00>)
 800c1b0:	2600      	movs	r6, #0
 800c1b2:	e7aa      	b.n	800c10a <_strtod_l+0x98a>
 800c1b4:	4b32      	ldr	r3, [pc, #200]	@ (800c280 <_strtod_l+0xb00>)
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f7f4 fa24 	bl	8000608 <__aeabi_dmul>
 800c1c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d09f      	beq.n	800c10a <_strtod_l+0x98a>
 800c1ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c1ce:	e7a0      	b.n	800c112 <_strtod_l+0x992>
 800c1d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c258 <_strtod_l+0xad8>
 800c1d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1d8:	ec57 6b17 	vmov	r6, r7, d7
 800c1dc:	e799      	b.n	800c112 <_strtod_l+0x992>
 800c1de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c1e2:	9b08      	ldr	r3, [sp, #32]
 800c1e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1c1      	bne.n	800c170 <_strtod_l+0x9f0>
 800c1ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c1f0:	0d1b      	lsrs	r3, r3, #20
 800c1f2:	051b      	lsls	r3, r3, #20
 800c1f4:	429d      	cmp	r5, r3
 800c1f6:	d1bb      	bne.n	800c170 <_strtod_l+0x9f0>
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	f7f4 fd64 	bl	8000cc8 <__aeabi_d2lz>
 800c200:	f7f4 f9d4 	bl	80005ac <__aeabi_l2d>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	f7f4 f844 	bl	8000298 <__aeabi_dsub>
 800c210:	460b      	mov	r3, r1
 800c212:	4602      	mov	r2, r0
 800c214:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c218:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c21e:	ea46 060a 	orr.w	r6, r6, sl
 800c222:	431e      	orrs	r6, r3
 800c224:	d06f      	beq.n	800c306 <_strtod_l+0xb86>
 800c226:	a30e      	add	r3, pc, #56	@ (adr r3, 800c260 <_strtod_l+0xae0>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f7f4 fc5e 	bl	8000aec <__aeabi_dcmplt>
 800c230:	2800      	cmp	r0, #0
 800c232:	f47f accf 	bne.w	800bbd4 <_strtod_l+0x454>
 800c236:	a30c      	add	r3, pc, #48	@ (adr r3, 800c268 <_strtod_l+0xae8>)
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c240:	f7f4 fc72 	bl	8000b28 <__aeabi_dcmpgt>
 800c244:	2800      	cmp	r0, #0
 800c246:	d093      	beq.n	800c170 <_strtod_l+0x9f0>
 800c248:	e4c4      	b.n	800bbd4 <_strtod_l+0x454>
 800c24a:	bf00      	nop
 800c24c:	f3af 8000 	nop.w
 800c250:	00000000 	.word	0x00000000
 800c254:	bff00000 	.word	0xbff00000
 800c258:	00000000 	.word	0x00000000
 800c25c:	3ff00000 	.word	0x3ff00000
 800c260:	94a03595 	.word	0x94a03595
 800c264:	3fdfffff 	.word	0x3fdfffff
 800c268:	35afe535 	.word	0x35afe535
 800c26c:	3fe00000 	.word	0x3fe00000
 800c270:	000fffff 	.word	0x000fffff
 800c274:	7ff00000 	.word	0x7ff00000
 800c278:	7fefffff 	.word	0x7fefffff
 800c27c:	3ff00000 	.word	0x3ff00000
 800c280:	3fe00000 	.word	0x3fe00000
 800c284:	7fe00000 	.word	0x7fe00000
 800c288:	7c9fffff 	.word	0x7c9fffff
 800c28c:	9b08      	ldr	r3, [sp, #32]
 800c28e:	b323      	cbz	r3, 800c2da <_strtod_l+0xb5a>
 800c290:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c294:	d821      	bhi.n	800c2da <_strtod_l+0xb5a>
 800c296:	a328      	add	r3, pc, #160	@ (adr r3, 800c338 <_strtod_l+0xbb8>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	4630      	mov	r0, r6
 800c29e:	4639      	mov	r1, r7
 800c2a0:	f7f4 fc2e 	bl	8000b00 <__aeabi_dcmple>
 800c2a4:	b1a0      	cbz	r0, 800c2d0 <_strtod_l+0xb50>
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f7f4 fc85 	bl	8000bb8 <__aeabi_d2uiz>
 800c2ae:	2801      	cmp	r0, #1
 800c2b0:	bf38      	it	cc
 800c2b2:	2001      	movcc	r0, #1
 800c2b4:	f7f4 f92e 	bl	8000514 <__aeabi_ui2d>
 800c2b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460f      	mov	r7, r1
 800c2be:	b9fb      	cbnz	r3, 800c300 <_strtod_l+0xb80>
 800c2c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800c2c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800c2c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c2cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c2d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c2d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c2d6:	1b5b      	subs	r3, r3, r5
 800c2d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c2da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c2de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c2e2:	f7ff f8f1 	bl	800b4c8 <__ulp>
 800c2e6:	4650      	mov	r0, sl
 800c2e8:	ec53 2b10 	vmov	r2, r3, d0
 800c2ec:	4659      	mov	r1, fp
 800c2ee:	f7f4 f98b 	bl	8000608 <__aeabi_dmul>
 800c2f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c2f6:	f7f3 ffd1 	bl	800029c <__adddf3>
 800c2fa:	4682      	mov	sl, r0
 800c2fc:	468b      	mov	fp, r1
 800c2fe:	e770      	b.n	800c1e2 <_strtod_l+0xa62>
 800c300:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c304:	e7e0      	b.n	800c2c8 <_strtod_l+0xb48>
 800c306:	a30e      	add	r3, pc, #56	@ (adr r3, 800c340 <_strtod_l+0xbc0>)
 800c308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30c:	f7f4 fbee 	bl	8000aec <__aeabi_dcmplt>
 800c310:	e798      	b.n	800c244 <_strtod_l+0xac4>
 800c312:	2300      	movs	r3, #0
 800c314:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c316:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c318:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c31a:	6013      	str	r3, [r2, #0]
 800c31c:	f7ff ba6d 	b.w	800b7fa <_strtod_l+0x7a>
 800c320:	2a65      	cmp	r2, #101	@ 0x65
 800c322:	f43f ab66 	beq.w	800b9f2 <_strtod_l+0x272>
 800c326:	2a45      	cmp	r2, #69	@ 0x45
 800c328:	f43f ab63 	beq.w	800b9f2 <_strtod_l+0x272>
 800c32c:	2301      	movs	r3, #1
 800c32e:	f7ff bb9e 	b.w	800ba6e <_strtod_l+0x2ee>
 800c332:	bf00      	nop
 800c334:	f3af 8000 	nop.w
 800c338:	ffc00000 	.word	0xffc00000
 800c33c:	41dfffff 	.word	0x41dfffff
 800c340:	94a03595 	.word	0x94a03595
 800c344:	3fcfffff 	.word	0x3fcfffff

0800c348 <_strtod_r>:
 800c348:	4b01      	ldr	r3, [pc, #4]	@ (800c350 <_strtod_r+0x8>)
 800c34a:	f7ff ba19 	b.w	800b780 <_strtod_l>
 800c34e:	bf00      	nop
 800c350:	2000006c 	.word	0x2000006c

0800c354 <_strtol_l.constprop.0>:
 800c354:	2b24      	cmp	r3, #36	@ 0x24
 800c356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c35a:	4686      	mov	lr, r0
 800c35c:	4690      	mov	r8, r2
 800c35e:	d801      	bhi.n	800c364 <_strtol_l.constprop.0+0x10>
 800c360:	2b01      	cmp	r3, #1
 800c362:	d106      	bne.n	800c372 <_strtol_l.constprop.0+0x1e>
 800c364:	f7fd fdac 	bl	8009ec0 <__errno>
 800c368:	2316      	movs	r3, #22
 800c36a:	6003      	str	r3, [r0, #0]
 800c36c:	2000      	movs	r0, #0
 800c36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c372:	4834      	ldr	r0, [pc, #208]	@ (800c444 <_strtol_l.constprop.0+0xf0>)
 800c374:	460d      	mov	r5, r1
 800c376:	462a      	mov	r2, r5
 800c378:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c37c:	5d06      	ldrb	r6, [r0, r4]
 800c37e:	f016 0608 	ands.w	r6, r6, #8
 800c382:	d1f8      	bne.n	800c376 <_strtol_l.constprop.0+0x22>
 800c384:	2c2d      	cmp	r4, #45	@ 0x2d
 800c386:	d12d      	bne.n	800c3e4 <_strtol_l.constprop.0+0x90>
 800c388:	782c      	ldrb	r4, [r5, #0]
 800c38a:	2601      	movs	r6, #1
 800c38c:	1c95      	adds	r5, r2, #2
 800c38e:	f033 0210 	bics.w	r2, r3, #16
 800c392:	d109      	bne.n	800c3a8 <_strtol_l.constprop.0+0x54>
 800c394:	2c30      	cmp	r4, #48	@ 0x30
 800c396:	d12a      	bne.n	800c3ee <_strtol_l.constprop.0+0x9a>
 800c398:	782a      	ldrb	r2, [r5, #0]
 800c39a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c39e:	2a58      	cmp	r2, #88	@ 0x58
 800c3a0:	d125      	bne.n	800c3ee <_strtol_l.constprop.0+0x9a>
 800c3a2:	786c      	ldrb	r4, [r5, #1]
 800c3a4:	2310      	movs	r3, #16
 800c3a6:	3502      	adds	r5, #2
 800c3a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c3ac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	fbbc f9f3 	udiv	r9, ip, r3
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800c3bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c3c0:	2f09      	cmp	r7, #9
 800c3c2:	d81b      	bhi.n	800c3fc <_strtol_l.constprop.0+0xa8>
 800c3c4:	463c      	mov	r4, r7
 800c3c6:	42a3      	cmp	r3, r4
 800c3c8:	dd27      	ble.n	800c41a <_strtol_l.constprop.0+0xc6>
 800c3ca:	1c57      	adds	r7, r2, #1
 800c3cc:	d007      	beq.n	800c3de <_strtol_l.constprop.0+0x8a>
 800c3ce:	4581      	cmp	r9, r0
 800c3d0:	d320      	bcc.n	800c414 <_strtol_l.constprop.0+0xc0>
 800c3d2:	d101      	bne.n	800c3d8 <_strtol_l.constprop.0+0x84>
 800c3d4:	45a2      	cmp	sl, r4
 800c3d6:	db1d      	blt.n	800c414 <_strtol_l.constprop.0+0xc0>
 800c3d8:	fb00 4003 	mla	r0, r0, r3, r4
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3e2:	e7eb      	b.n	800c3bc <_strtol_l.constprop.0+0x68>
 800c3e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c3e6:	bf04      	itt	eq
 800c3e8:	782c      	ldrbeq	r4, [r5, #0]
 800c3ea:	1c95      	addeq	r5, r2, #2
 800c3ec:	e7cf      	b.n	800c38e <_strtol_l.constprop.0+0x3a>
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1da      	bne.n	800c3a8 <_strtol_l.constprop.0+0x54>
 800c3f2:	2c30      	cmp	r4, #48	@ 0x30
 800c3f4:	bf0c      	ite	eq
 800c3f6:	2308      	moveq	r3, #8
 800c3f8:	230a      	movne	r3, #10
 800c3fa:	e7d5      	b.n	800c3a8 <_strtol_l.constprop.0+0x54>
 800c3fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c400:	2f19      	cmp	r7, #25
 800c402:	d801      	bhi.n	800c408 <_strtol_l.constprop.0+0xb4>
 800c404:	3c37      	subs	r4, #55	@ 0x37
 800c406:	e7de      	b.n	800c3c6 <_strtol_l.constprop.0+0x72>
 800c408:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c40c:	2f19      	cmp	r7, #25
 800c40e:	d804      	bhi.n	800c41a <_strtol_l.constprop.0+0xc6>
 800c410:	3c57      	subs	r4, #87	@ 0x57
 800c412:	e7d8      	b.n	800c3c6 <_strtol_l.constprop.0+0x72>
 800c414:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c418:	e7e1      	b.n	800c3de <_strtol_l.constprop.0+0x8a>
 800c41a:	1c53      	adds	r3, r2, #1
 800c41c:	d108      	bne.n	800c430 <_strtol_l.constprop.0+0xdc>
 800c41e:	2322      	movs	r3, #34	@ 0x22
 800c420:	f8ce 3000 	str.w	r3, [lr]
 800c424:	4660      	mov	r0, ip
 800c426:	f1b8 0f00 	cmp.w	r8, #0
 800c42a:	d0a0      	beq.n	800c36e <_strtol_l.constprop.0+0x1a>
 800c42c:	1e69      	subs	r1, r5, #1
 800c42e:	e006      	b.n	800c43e <_strtol_l.constprop.0+0xea>
 800c430:	b106      	cbz	r6, 800c434 <_strtol_l.constprop.0+0xe0>
 800c432:	4240      	negs	r0, r0
 800c434:	f1b8 0f00 	cmp.w	r8, #0
 800c438:	d099      	beq.n	800c36e <_strtol_l.constprop.0+0x1a>
 800c43a:	2a00      	cmp	r2, #0
 800c43c:	d1f6      	bne.n	800c42c <_strtol_l.constprop.0+0xd8>
 800c43e:	f8c8 1000 	str.w	r1, [r8]
 800c442:	e794      	b.n	800c36e <_strtol_l.constprop.0+0x1a>
 800c444:	0800da89 	.word	0x0800da89

0800c448 <_strtol_r>:
 800c448:	f7ff bf84 	b.w	800c354 <_strtol_l.constprop.0>

0800c44c <__ssputs_r>:
 800c44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c450:	688e      	ldr	r6, [r1, #8]
 800c452:	461f      	mov	r7, r3
 800c454:	42be      	cmp	r6, r7
 800c456:	680b      	ldr	r3, [r1, #0]
 800c458:	4682      	mov	sl, r0
 800c45a:	460c      	mov	r4, r1
 800c45c:	4690      	mov	r8, r2
 800c45e:	d82d      	bhi.n	800c4bc <__ssputs_r+0x70>
 800c460:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c464:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c468:	d026      	beq.n	800c4b8 <__ssputs_r+0x6c>
 800c46a:	6965      	ldr	r5, [r4, #20]
 800c46c:	6909      	ldr	r1, [r1, #16]
 800c46e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c472:	eba3 0901 	sub.w	r9, r3, r1
 800c476:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c47a:	1c7b      	adds	r3, r7, #1
 800c47c:	444b      	add	r3, r9
 800c47e:	106d      	asrs	r5, r5, #1
 800c480:	429d      	cmp	r5, r3
 800c482:	bf38      	it	cc
 800c484:	461d      	movcc	r5, r3
 800c486:	0553      	lsls	r3, r2, #21
 800c488:	d527      	bpl.n	800c4da <__ssputs_r+0x8e>
 800c48a:	4629      	mov	r1, r5
 800c48c:	f7fe fc1c 	bl	800acc8 <_malloc_r>
 800c490:	4606      	mov	r6, r0
 800c492:	b360      	cbz	r0, 800c4ee <__ssputs_r+0xa2>
 800c494:	6921      	ldr	r1, [r4, #16]
 800c496:	464a      	mov	r2, r9
 800c498:	f7fd fd3f 	bl	8009f1a <memcpy>
 800c49c:	89a3      	ldrh	r3, [r4, #12]
 800c49e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c4a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4a6:	81a3      	strh	r3, [r4, #12]
 800c4a8:	6126      	str	r6, [r4, #16]
 800c4aa:	6165      	str	r5, [r4, #20]
 800c4ac:	444e      	add	r6, r9
 800c4ae:	eba5 0509 	sub.w	r5, r5, r9
 800c4b2:	6026      	str	r6, [r4, #0]
 800c4b4:	60a5      	str	r5, [r4, #8]
 800c4b6:	463e      	mov	r6, r7
 800c4b8:	42be      	cmp	r6, r7
 800c4ba:	d900      	bls.n	800c4be <__ssputs_r+0x72>
 800c4bc:	463e      	mov	r6, r7
 800c4be:	6820      	ldr	r0, [r4, #0]
 800c4c0:	4632      	mov	r2, r6
 800c4c2:	4641      	mov	r1, r8
 800c4c4:	f000 fa28 	bl	800c918 <memmove>
 800c4c8:	68a3      	ldr	r3, [r4, #8]
 800c4ca:	1b9b      	subs	r3, r3, r6
 800c4cc:	60a3      	str	r3, [r4, #8]
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	4433      	add	r3, r6
 800c4d2:	6023      	str	r3, [r4, #0]
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4da:	462a      	mov	r2, r5
 800c4dc:	f000 fe01 	bl	800d0e2 <_realloc_r>
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d1e0      	bne.n	800c4a8 <__ssputs_r+0x5c>
 800c4e6:	6921      	ldr	r1, [r4, #16]
 800c4e8:	4650      	mov	r0, sl
 800c4ea:	f7fe fb79 	bl	800abe0 <_free_r>
 800c4ee:	230c      	movs	r3, #12
 800c4f0:	f8ca 3000 	str.w	r3, [sl]
 800c4f4:	89a3      	ldrh	r3, [r4, #12]
 800c4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4fa:	81a3      	strh	r3, [r4, #12]
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c500:	e7e9      	b.n	800c4d6 <__ssputs_r+0x8a>
	...

0800c504 <_svfiprintf_r>:
 800c504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c508:	4698      	mov	r8, r3
 800c50a:	898b      	ldrh	r3, [r1, #12]
 800c50c:	061b      	lsls	r3, r3, #24
 800c50e:	b09d      	sub	sp, #116	@ 0x74
 800c510:	4607      	mov	r7, r0
 800c512:	460d      	mov	r5, r1
 800c514:	4614      	mov	r4, r2
 800c516:	d510      	bpl.n	800c53a <_svfiprintf_r+0x36>
 800c518:	690b      	ldr	r3, [r1, #16]
 800c51a:	b973      	cbnz	r3, 800c53a <_svfiprintf_r+0x36>
 800c51c:	2140      	movs	r1, #64	@ 0x40
 800c51e:	f7fe fbd3 	bl	800acc8 <_malloc_r>
 800c522:	6028      	str	r0, [r5, #0]
 800c524:	6128      	str	r0, [r5, #16]
 800c526:	b930      	cbnz	r0, 800c536 <_svfiprintf_r+0x32>
 800c528:	230c      	movs	r3, #12
 800c52a:	603b      	str	r3, [r7, #0]
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c530:	b01d      	add	sp, #116	@ 0x74
 800c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c536:	2340      	movs	r3, #64	@ 0x40
 800c538:	616b      	str	r3, [r5, #20]
 800c53a:	2300      	movs	r3, #0
 800c53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c53e:	2320      	movs	r3, #32
 800c540:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c544:	f8cd 800c 	str.w	r8, [sp, #12]
 800c548:	2330      	movs	r3, #48	@ 0x30
 800c54a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c6e8 <_svfiprintf_r+0x1e4>
 800c54e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c552:	f04f 0901 	mov.w	r9, #1
 800c556:	4623      	mov	r3, r4
 800c558:	469a      	mov	sl, r3
 800c55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c55e:	b10a      	cbz	r2, 800c564 <_svfiprintf_r+0x60>
 800c560:	2a25      	cmp	r2, #37	@ 0x25
 800c562:	d1f9      	bne.n	800c558 <_svfiprintf_r+0x54>
 800c564:	ebba 0b04 	subs.w	fp, sl, r4
 800c568:	d00b      	beq.n	800c582 <_svfiprintf_r+0x7e>
 800c56a:	465b      	mov	r3, fp
 800c56c:	4622      	mov	r2, r4
 800c56e:	4629      	mov	r1, r5
 800c570:	4638      	mov	r0, r7
 800c572:	f7ff ff6b 	bl	800c44c <__ssputs_r>
 800c576:	3001      	adds	r0, #1
 800c578:	f000 80a7 	beq.w	800c6ca <_svfiprintf_r+0x1c6>
 800c57c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c57e:	445a      	add	r2, fp
 800c580:	9209      	str	r2, [sp, #36]	@ 0x24
 800c582:	f89a 3000 	ldrb.w	r3, [sl]
 800c586:	2b00      	cmp	r3, #0
 800c588:	f000 809f 	beq.w	800c6ca <_svfiprintf_r+0x1c6>
 800c58c:	2300      	movs	r3, #0
 800c58e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c596:	f10a 0a01 	add.w	sl, sl, #1
 800c59a:	9304      	str	r3, [sp, #16]
 800c59c:	9307      	str	r3, [sp, #28]
 800c59e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5a4:	4654      	mov	r4, sl
 800c5a6:	2205      	movs	r2, #5
 800c5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ac:	484e      	ldr	r0, [pc, #312]	@ (800c6e8 <_svfiprintf_r+0x1e4>)
 800c5ae:	f7f3 fe17 	bl	80001e0 <memchr>
 800c5b2:	9a04      	ldr	r2, [sp, #16]
 800c5b4:	b9d8      	cbnz	r0, 800c5ee <_svfiprintf_r+0xea>
 800c5b6:	06d0      	lsls	r0, r2, #27
 800c5b8:	bf44      	itt	mi
 800c5ba:	2320      	movmi	r3, #32
 800c5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5c0:	0711      	lsls	r1, r2, #28
 800c5c2:	bf44      	itt	mi
 800c5c4:	232b      	movmi	r3, #43	@ 0x2b
 800c5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5d0:	d015      	beq.n	800c5fe <_svfiprintf_r+0xfa>
 800c5d2:	9a07      	ldr	r2, [sp, #28]
 800c5d4:	4654      	mov	r4, sl
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	f04f 0c0a 	mov.w	ip, #10
 800c5dc:	4621      	mov	r1, r4
 800c5de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5e2:	3b30      	subs	r3, #48	@ 0x30
 800c5e4:	2b09      	cmp	r3, #9
 800c5e6:	d94b      	bls.n	800c680 <_svfiprintf_r+0x17c>
 800c5e8:	b1b0      	cbz	r0, 800c618 <_svfiprintf_r+0x114>
 800c5ea:	9207      	str	r2, [sp, #28]
 800c5ec:	e014      	b.n	800c618 <_svfiprintf_r+0x114>
 800c5ee:	eba0 0308 	sub.w	r3, r0, r8
 800c5f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	9304      	str	r3, [sp, #16]
 800c5fa:	46a2      	mov	sl, r4
 800c5fc:	e7d2      	b.n	800c5a4 <_svfiprintf_r+0xa0>
 800c5fe:	9b03      	ldr	r3, [sp, #12]
 800c600:	1d19      	adds	r1, r3, #4
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	9103      	str	r1, [sp, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	bfbb      	ittet	lt
 800c60a:	425b      	neglt	r3, r3
 800c60c:	f042 0202 	orrlt.w	r2, r2, #2
 800c610:	9307      	strge	r3, [sp, #28]
 800c612:	9307      	strlt	r3, [sp, #28]
 800c614:	bfb8      	it	lt
 800c616:	9204      	strlt	r2, [sp, #16]
 800c618:	7823      	ldrb	r3, [r4, #0]
 800c61a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c61c:	d10a      	bne.n	800c634 <_svfiprintf_r+0x130>
 800c61e:	7863      	ldrb	r3, [r4, #1]
 800c620:	2b2a      	cmp	r3, #42	@ 0x2a
 800c622:	d132      	bne.n	800c68a <_svfiprintf_r+0x186>
 800c624:	9b03      	ldr	r3, [sp, #12]
 800c626:	1d1a      	adds	r2, r3, #4
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	9203      	str	r2, [sp, #12]
 800c62c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c630:	3402      	adds	r4, #2
 800c632:	9305      	str	r3, [sp, #20]
 800c634:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c6f8 <_svfiprintf_r+0x1f4>
 800c638:	7821      	ldrb	r1, [r4, #0]
 800c63a:	2203      	movs	r2, #3
 800c63c:	4650      	mov	r0, sl
 800c63e:	f7f3 fdcf 	bl	80001e0 <memchr>
 800c642:	b138      	cbz	r0, 800c654 <_svfiprintf_r+0x150>
 800c644:	9b04      	ldr	r3, [sp, #16]
 800c646:	eba0 000a 	sub.w	r0, r0, sl
 800c64a:	2240      	movs	r2, #64	@ 0x40
 800c64c:	4082      	lsls	r2, r0
 800c64e:	4313      	orrs	r3, r2
 800c650:	3401      	adds	r4, #1
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c658:	4824      	ldr	r0, [pc, #144]	@ (800c6ec <_svfiprintf_r+0x1e8>)
 800c65a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c65e:	2206      	movs	r2, #6
 800c660:	f7f3 fdbe 	bl	80001e0 <memchr>
 800c664:	2800      	cmp	r0, #0
 800c666:	d036      	beq.n	800c6d6 <_svfiprintf_r+0x1d2>
 800c668:	4b21      	ldr	r3, [pc, #132]	@ (800c6f0 <_svfiprintf_r+0x1ec>)
 800c66a:	bb1b      	cbnz	r3, 800c6b4 <_svfiprintf_r+0x1b0>
 800c66c:	9b03      	ldr	r3, [sp, #12]
 800c66e:	3307      	adds	r3, #7
 800c670:	f023 0307 	bic.w	r3, r3, #7
 800c674:	3308      	adds	r3, #8
 800c676:	9303      	str	r3, [sp, #12]
 800c678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c67a:	4433      	add	r3, r6
 800c67c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c67e:	e76a      	b.n	800c556 <_svfiprintf_r+0x52>
 800c680:	fb0c 3202 	mla	r2, ip, r2, r3
 800c684:	460c      	mov	r4, r1
 800c686:	2001      	movs	r0, #1
 800c688:	e7a8      	b.n	800c5dc <_svfiprintf_r+0xd8>
 800c68a:	2300      	movs	r3, #0
 800c68c:	3401      	adds	r4, #1
 800c68e:	9305      	str	r3, [sp, #20]
 800c690:	4619      	mov	r1, r3
 800c692:	f04f 0c0a 	mov.w	ip, #10
 800c696:	4620      	mov	r0, r4
 800c698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c69c:	3a30      	subs	r2, #48	@ 0x30
 800c69e:	2a09      	cmp	r2, #9
 800c6a0:	d903      	bls.n	800c6aa <_svfiprintf_r+0x1a6>
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d0c6      	beq.n	800c634 <_svfiprintf_r+0x130>
 800c6a6:	9105      	str	r1, [sp, #20]
 800c6a8:	e7c4      	b.n	800c634 <_svfiprintf_r+0x130>
 800c6aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e7f0      	b.n	800c696 <_svfiprintf_r+0x192>
 800c6b4:	ab03      	add	r3, sp, #12
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	462a      	mov	r2, r5
 800c6ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c6f4 <_svfiprintf_r+0x1f0>)
 800c6bc:	a904      	add	r1, sp, #16
 800c6be:	4638      	mov	r0, r7
 800c6c0:	f7fc fb3a 	bl	8008d38 <_printf_float>
 800c6c4:	1c42      	adds	r2, r0, #1
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	d1d6      	bne.n	800c678 <_svfiprintf_r+0x174>
 800c6ca:	89ab      	ldrh	r3, [r5, #12]
 800c6cc:	065b      	lsls	r3, r3, #25
 800c6ce:	f53f af2d 	bmi.w	800c52c <_svfiprintf_r+0x28>
 800c6d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6d4:	e72c      	b.n	800c530 <_svfiprintf_r+0x2c>
 800c6d6:	ab03      	add	r3, sp, #12
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	462a      	mov	r2, r5
 800c6dc:	4b05      	ldr	r3, [pc, #20]	@ (800c6f4 <_svfiprintf_r+0x1f0>)
 800c6de:	a904      	add	r1, sp, #16
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	f7fc fdc1 	bl	8009268 <_printf_i>
 800c6e6:	e7ed      	b.n	800c6c4 <_svfiprintf_r+0x1c0>
 800c6e8:	0800db89 	.word	0x0800db89
 800c6ec:	0800db93 	.word	0x0800db93
 800c6f0:	08008d39 	.word	0x08008d39
 800c6f4:	0800c44d 	.word	0x0800c44d
 800c6f8:	0800db8f 	.word	0x0800db8f

0800c6fc <__sflush_r>:
 800c6fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c704:	0716      	lsls	r6, r2, #28
 800c706:	4605      	mov	r5, r0
 800c708:	460c      	mov	r4, r1
 800c70a:	d454      	bmi.n	800c7b6 <__sflush_r+0xba>
 800c70c:	684b      	ldr	r3, [r1, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	dc02      	bgt.n	800c718 <__sflush_r+0x1c>
 800c712:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c714:	2b00      	cmp	r3, #0
 800c716:	dd48      	ble.n	800c7aa <__sflush_r+0xae>
 800c718:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c71a:	2e00      	cmp	r6, #0
 800c71c:	d045      	beq.n	800c7aa <__sflush_r+0xae>
 800c71e:	2300      	movs	r3, #0
 800c720:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c724:	682f      	ldr	r7, [r5, #0]
 800c726:	6a21      	ldr	r1, [r4, #32]
 800c728:	602b      	str	r3, [r5, #0]
 800c72a:	d030      	beq.n	800c78e <__sflush_r+0x92>
 800c72c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c72e:	89a3      	ldrh	r3, [r4, #12]
 800c730:	0759      	lsls	r1, r3, #29
 800c732:	d505      	bpl.n	800c740 <__sflush_r+0x44>
 800c734:	6863      	ldr	r3, [r4, #4]
 800c736:	1ad2      	subs	r2, r2, r3
 800c738:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c73a:	b10b      	cbz	r3, 800c740 <__sflush_r+0x44>
 800c73c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c73e:	1ad2      	subs	r2, r2, r3
 800c740:	2300      	movs	r3, #0
 800c742:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c744:	6a21      	ldr	r1, [r4, #32]
 800c746:	4628      	mov	r0, r5
 800c748:	47b0      	blx	r6
 800c74a:	1c43      	adds	r3, r0, #1
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	d106      	bne.n	800c75e <__sflush_r+0x62>
 800c750:	6829      	ldr	r1, [r5, #0]
 800c752:	291d      	cmp	r1, #29
 800c754:	d82b      	bhi.n	800c7ae <__sflush_r+0xb2>
 800c756:	4a2a      	ldr	r2, [pc, #168]	@ (800c800 <__sflush_r+0x104>)
 800c758:	410a      	asrs	r2, r1
 800c75a:	07d6      	lsls	r6, r2, #31
 800c75c:	d427      	bmi.n	800c7ae <__sflush_r+0xb2>
 800c75e:	2200      	movs	r2, #0
 800c760:	6062      	str	r2, [r4, #4]
 800c762:	04d9      	lsls	r1, r3, #19
 800c764:	6922      	ldr	r2, [r4, #16]
 800c766:	6022      	str	r2, [r4, #0]
 800c768:	d504      	bpl.n	800c774 <__sflush_r+0x78>
 800c76a:	1c42      	adds	r2, r0, #1
 800c76c:	d101      	bne.n	800c772 <__sflush_r+0x76>
 800c76e:	682b      	ldr	r3, [r5, #0]
 800c770:	b903      	cbnz	r3, 800c774 <__sflush_r+0x78>
 800c772:	6560      	str	r0, [r4, #84]	@ 0x54
 800c774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c776:	602f      	str	r7, [r5, #0]
 800c778:	b1b9      	cbz	r1, 800c7aa <__sflush_r+0xae>
 800c77a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c77e:	4299      	cmp	r1, r3
 800c780:	d002      	beq.n	800c788 <__sflush_r+0x8c>
 800c782:	4628      	mov	r0, r5
 800c784:	f7fe fa2c 	bl	800abe0 <_free_r>
 800c788:	2300      	movs	r3, #0
 800c78a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c78c:	e00d      	b.n	800c7aa <__sflush_r+0xae>
 800c78e:	2301      	movs	r3, #1
 800c790:	4628      	mov	r0, r5
 800c792:	47b0      	blx	r6
 800c794:	4602      	mov	r2, r0
 800c796:	1c50      	adds	r0, r2, #1
 800c798:	d1c9      	bne.n	800c72e <__sflush_r+0x32>
 800c79a:	682b      	ldr	r3, [r5, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d0c6      	beq.n	800c72e <__sflush_r+0x32>
 800c7a0:	2b1d      	cmp	r3, #29
 800c7a2:	d001      	beq.n	800c7a8 <__sflush_r+0xac>
 800c7a4:	2b16      	cmp	r3, #22
 800c7a6:	d11e      	bne.n	800c7e6 <__sflush_r+0xea>
 800c7a8:	602f      	str	r7, [r5, #0]
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	e022      	b.n	800c7f4 <__sflush_r+0xf8>
 800c7ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7b2:	b21b      	sxth	r3, r3
 800c7b4:	e01b      	b.n	800c7ee <__sflush_r+0xf2>
 800c7b6:	690f      	ldr	r7, [r1, #16]
 800c7b8:	2f00      	cmp	r7, #0
 800c7ba:	d0f6      	beq.n	800c7aa <__sflush_r+0xae>
 800c7bc:	0793      	lsls	r3, r2, #30
 800c7be:	680e      	ldr	r6, [r1, #0]
 800c7c0:	bf08      	it	eq
 800c7c2:	694b      	ldreq	r3, [r1, #20]
 800c7c4:	600f      	str	r7, [r1, #0]
 800c7c6:	bf18      	it	ne
 800c7c8:	2300      	movne	r3, #0
 800c7ca:	eba6 0807 	sub.w	r8, r6, r7
 800c7ce:	608b      	str	r3, [r1, #8]
 800c7d0:	f1b8 0f00 	cmp.w	r8, #0
 800c7d4:	dde9      	ble.n	800c7aa <__sflush_r+0xae>
 800c7d6:	6a21      	ldr	r1, [r4, #32]
 800c7d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c7da:	4643      	mov	r3, r8
 800c7dc:	463a      	mov	r2, r7
 800c7de:	4628      	mov	r0, r5
 800c7e0:	47b0      	blx	r6
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	dc08      	bgt.n	800c7f8 <__sflush_r+0xfc>
 800c7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7ee:	81a3      	strh	r3, [r4, #12]
 800c7f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7f8:	4407      	add	r7, r0
 800c7fa:	eba8 0800 	sub.w	r8, r8, r0
 800c7fe:	e7e7      	b.n	800c7d0 <__sflush_r+0xd4>
 800c800:	dfbffffe 	.word	0xdfbffffe

0800c804 <_fflush_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	690b      	ldr	r3, [r1, #16]
 800c808:	4605      	mov	r5, r0
 800c80a:	460c      	mov	r4, r1
 800c80c:	b913      	cbnz	r3, 800c814 <_fflush_r+0x10>
 800c80e:	2500      	movs	r5, #0
 800c810:	4628      	mov	r0, r5
 800c812:	bd38      	pop	{r3, r4, r5, pc}
 800c814:	b118      	cbz	r0, 800c81e <_fflush_r+0x1a>
 800c816:	6a03      	ldr	r3, [r0, #32]
 800c818:	b90b      	cbnz	r3, 800c81e <_fflush_r+0x1a>
 800c81a:	f7fd f8e5 	bl	80099e8 <__sinit>
 800c81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0f3      	beq.n	800c80e <_fflush_r+0xa>
 800c826:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c828:	07d0      	lsls	r0, r2, #31
 800c82a:	d404      	bmi.n	800c836 <_fflush_r+0x32>
 800c82c:	0599      	lsls	r1, r3, #22
 800c82e:	d402      	bmi.n	800c836 <_fflush_r+0x32>
 800c830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c832:	f7fd fb70 	bl	8009f16 <__retarget_lock_acquire_recursive>
 800c836:	4628      	mov	r0, r5
 800c838:	4621      	mov	r1, r4
 800c83a:	f7ff ff5f 	bl	800c6fc <__sflush_r>
 800c83e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c840:	07da      	lsls	r2, r3, #31
 800c842:	4605      	mov	r5, r0
 800c844:	d4e4      	bmi.n	800c810 <_fflush_r+0xc>
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	059b      	lsls	r3, r3, #22
 800c84a:	d4e1      	bmi.n	800c810 <_fflush_r+0xc>
 800c84c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c84e:	f7fd fb63 	bl	8009f18 <__retarget_lock_release_recursive>
 800c852:	e7dd      	b.n	800c810 <_fflush_r+0xc>

0800c854 <__swhatbuf_r>:
 800c854:	b570      	push	{r4, r5, r6, lr}
 800c856:	460c      	mov	r4, r1
 800c858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c85c:	2900      	cmp	r1, #0
 800c85e:	b096      	sub	sp, #88	@ 0x58
 800c860:	4615      	mov	r5, r2
 800c862:	461e      	mov	r6, r3
 800c864:	da0d      	bge.n	800c882 <__swhatbuf_r+0x2e>
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c86c:	f04f 0100 	mov.w	r1, #0
 800c870:	bf14      	ite	ne
 800c872:	2340      	movne	r3, #64	@ 0x40
 800c874:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c878:	2000      	movs	r0, #0
 800c87a:	6031      	str	r1, [r6, #0]
 800c87c:	602b      	str	r3, [r5, #0]
 800c87e:	b016      	add	sp, #88	@ 0x58
 800c880:	bd70      	pop	{r4, r5, r6, pc}
 800c882:	466a      	mov	r2, sp
 800c884:	f000 f874 	bl	800c970 <_fstat_r>
 800c888:	2800      	cmp	r0, #0
 800c88a:	dbec      	blt.n	800c866 <__swhatbuf_r+0x12>
 800c88c:	9901      	ldr	r1, [sp, #4]
 800c88e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c892:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c896:	4259      	negs	r1, r3
 800c898:	4159      	adcs	r1, r3
 800c89a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c89e:	e7eb      	b.n	800c878 <__swhatbuf_r+0x24>

0800c8a0 <__smakebuf_r>:
 800c8a0:	898b      	ldrh	r3, [r1, #12]
 800c8a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8a4:	079d      	lsls	r5, r3, #30
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	460c      	mov	r4, r1
 800c8aa:	d507      	bpl.n	800c8bc <__smakebuf_r+0x1c>
 800c8ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	6123      	str	r3, [r4, #16]
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	6163      	str	r3, [r4, #20]
 800c8b8:	b003      	add	sp, #12
 800c8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8bc:	ab01      	add	r3, sp, #4
 800c8be:	466a      	mov	r2, sp
 800c8c0:	f7ff ffc8 	bl	800c854 <__swhatbuf_r>
 800c8c4:	9f00      	ldr	r7, [sp, #0]
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	4639      	mov	r1, r7
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f7fe f9fc 	bl	800acc8 <_malloc_r>
 800c8d0:	b948      	cbnz	r0, 800c8e6 <__smakebuf_r+0x46>
 800c8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8d6:	059a      	lsls	r2, r3, #22
 800c8d8:	d4ee      	bmi.n	800c8b8 <__smakebuf_r+0x18>
 800c8da:	f023 0303 	bic.w	r3, r3, #3
 800c8de:	f043 0302 	orr.w	r3, r3, #2
 800c8e2:	81a3      	strh	r3, [r4, #12]
 800c8e4:	e7e2      	b.n	800c8ac <__smakebuf_r+0xc>
 800c8e6:	89a3      	ldrh	r3, [r4, #12]
 800c8e8:	6020      	str	r0, [r4, #0]
 800c8ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ee:	81a3      	strh	r3, [r4, #12]
 800c8f0:	9b01      	ldr	r3, [sp, #4]
 800c8f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c8f6:	b15b      	cbz	r3, 800c910 <__smakebuf_r+0x70>
 800c8f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	f000 f849 	bl	800c994 <_isatty_r>
 800c902:	b128      	cbz	r0, 800c910 <__smakebuf_r+0x70>
 800c904:	89a3      	ldrh	r3, [r4, #12]
 800c906:	f023 0303 	bic.w	r3, r3, #3
 800c90a:	f043 0301 	orr.w	r3, r3, #1
 800c90e:	81a3      	strh	r3, [r4, #12]
 800c910:	89a3      	ldrh	r3, [r4, #12]
 800c912:	431d      	orrs	r5, r3
 800c914:	81a5      	strh	r5, [r4, #12]
 800c916:	e7cf      	b.n	800c8b8 <__smakebuf_r+0x18>

0800c918 <memmove>:
 800c918:	4288      	cmp	r0, r1
 800c91a:	b510      	push	{r4, lr}
 800c91c:	eb01 0402 	add.w	r4, r1, r2
 800c920:	d902      	bls.n	800c928 <memmove+0x10>
 800c922:	4284      	cmp	r4, r0
 800c924:	4623      	mov	r3, r4
 800c926:	d807      	bhi.n	800c938 <memmove+0x20>
 800c928:	1e43      	subs	r3, r0, #1
 800c92a:	42a1      	cmp	r1, r4
 800c92c:	d008      	beq.n	800c940 <memmove+0x28>
 800c92e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c932:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c936:	e7f8      	b.n	800c92a <memmove+0x12>
 800c938:	4402      	add	r2, r0
 800c93a:	4601      	mov	r1, r0
 800c93c:	428a      	cmp	r2, r1
 800c93e:	d100      	bne.n	800c942 <memmove+0x2a>
 800c940:	bd10      	pop	{r4, pc}
 800c942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c94a:	e7f7      	b.n	800c93c <memmove+0x24>

0800c94c <strncmp>:
 800c94c:	b510      	push	{r4, lr}
 800c94e:	b16a      	cbz	r2, 800c96c <strncmp+0x20>
 800c950:	3901      	subs	r1, #1
 800c952:	1884      	adds	r4, r0, r2
 800c954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c958:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d103      	bne.n	800c968 <strncmp+0x1c>
 800c960:	42a0      	cmp	r0, r4
 800c962:	d001      	beq.n	800c968 <strncmp+0x1c>
 800c964:	2a00      	cmp	r2, #0
 800c966:	d1f5      	bne.n	800c954 <strncmp+0x8>
 800c968:	1ad0      	subs	r0, r2, r3
 800c96a:	bd10      	pop	{r4, pc}
 800c96c:	4610      	mov	r0, r2
 800c96e:	e7fc      	b.n	800c96a <strncmp+0x1e>

0800c970 <_fstat_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4d07      	ldr	r5, [pc, #28]	@ (800c990 <_fstat_r+0x20>)
 800c974:	2300      	movs	r3, #0
 800c976:	4604      	mov	r4, r0
 800c978:	4608      	mov	r0, r1
 800c97a:	4611      	mov	r1, r2
 800c97c:	602b      	str	r3, [r5, #0]
 800c97e:	f7f5 fa01 	bl	8001d84 <_fstat>
 800c982:	1c43      	adds	r3, r0, #1
 800c984:	d102      	bne.n	800c98c <_fstat_r+0x1c>
 800c986:	682b      	ldr	r3, [r5, #0]
 800c988:	b103      	cbz	r3, 800c98c <_fstat_r+0x1c>
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	bf00      	nop
 800c990:	200057dc 	.word	0x200057dc

0800c994 <_isatty_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4d06      	ldr	r5, [pc, #24]	@ (800c9b0 <_isatty_r+0x1c>)
 800c998:	2300      	movs	r3, #0
 800c99a:	4604      	mov	r4, r0
 800c99c:	4608      	mov	r0, r1
 800c99e:	602b      	str	r3, [r5, #0]
 800c9a0:	f7f5 fa00 	bl	8001da4 <_isatty>
 800c9a4:	1c43      	adds	r3, r0, #1
 800c9a6:	d102      	bne.n	800c9ae <_isatty_r+0x1a>
 800c9a8:	682b      	ldr	r3, [r5, #0]
 800c9aa:	b103      	cbz	r3, 800c9ae <_isatty_r+0x1a>
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	bd38      	pop	{r3, r4, r5, pc}
 800c9b0:	200057dc 	.word	0x200057dc

0800c9b4 <_sbrk_r>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	4d06      	ldr	r5, [pc, #24]	@ (800c9d0 <_sbrk_r+0x1c>)
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	4608      	mov	r0, r1
 800c9be:	602b      	str	r3, [r5, #0]
 800c9c0:	f7f5 fa08 	bl	8001dd4 <_sbrk>
 800c9c4:	1c43      	adds	r3, r0, #1
 800c9c6:	d102      	bne.n	800c9ce <_sbrk_r+0x1a>
 800c9c8:	682b      	ldr	r3, [r5, #0]
 800c9ca:	b103      	cbz	r3, 800c9ce <_sbrk_r+0x1a>
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	bd38      	pop	{r3, r4, r5, pc}
 800c9d0:	200057dc 	.word	0x200057dc
 800c9d4:	00000000 	.word	0x00000000

0800c9d8 <nan>:
 800c9d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9e0 <nan+0x8>
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	00000000 	.word	0x00000000
 800c9e4:	7ff80000 	.word	0x7ff80000

0800c9e8 <__assert_func>:
 800c9e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9ea:	4614      	mov	r4, r2
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	4b09      	ldr	r3, [pc, #36]	@ (800ca14 <__assert_func+0x2c>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	68d8      	ldr	r0, [r3, #12]
 800c9f6:	b954      	cbnz	r4, 800ca0e <__assert_func+0x26>
 800c9f8:	4b07      	ldr	r3, [pc, #28]	@ (800ca18 <__assert_func+0x30>)
 800c9fa:	461c      	mov	r4, r3
 800c9fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca00:	9100      	str	r1, [sp, #0]
 800ca02:	462b      	mov	r3, r5
 800ca04:	4905      	ldr	r1, [pc, #20]	@ (800ca1c <__assert_func+0x34>)
 800ca06:	f000 fba7 	bl	800d158 <fiprintf>
 800ca0a:	f000 fbb7 	bl	800d17c <abort>
 800ca0e:	4b04      	ldr	r3, [pc, #16]	@ (800ca20 <__assert_func+0x38>)
 800ca10:	e7f4      	b.n	800c9fc <__assert_func+0x14>
 800ca12:	bf00      	nop
 800ca14:	2000001c 	.word	0x2000001c
 800ca18:	0800dbdd 	.word	0x0800dbdd
 800ca1c:	0800dbaf 	.word	0x0800dbaf
 800ca20:	0800dba2 	.word	0x0800dba2

0800ca24 <_calloc_r>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	fba1 5402 	umull	r5, r4, r1, r2
 800ca2a:	b93c      	cbnz	r4, 800ca3c <_calloc_r+0x18>
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	f7fe f94b 	bl	800acc8 <_malloc_r>
 800ca32:	4606      	mov	r6, r0
 800ca34:	b928      	cbnz	r0, 800ca42 <_calloc_r+0x1e>
 800ca36:	2600      	movs	r6, #0
 800ca38:	4630      	mov	r0, r6
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	220c      	movs	r2, #12
 800ca3e:	6002      	str	r2, [r0, #0]
 800ca40:	e7f9      	b.n	800ca36 <_calloc_r+0x12>
 800ca42:	462a      	mov	r2, r5
 800ca44:	4621      	mov	r1, r4
 800ca46:	f7fd f993 	bl	8009d70 <memset>
 800ca4a:	e7f5      	b.n	800ca38 <_calloc_r+0x14>

0800ca4c <rshift>:
 800ca4c:	6903      	ldr	r3, [r0, #16]
 800ca4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca5a:	f100 0414 	add.w	r4, r0, #20
 800ca5e:	dd45      	ble.n	800caec <rshift+0xa0>
 800ca60:	f011 011f 	ands.w	r1, r1, #31
 800ca64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca6c:	d10c      	bne.n	800ca88 <rshift+0x3c>
 800ca6e:	f100 0710 	add.w	r7, r0, #16
 800ca72:	4629      	mov	r1, r5
 800ca74:	42b1      	cmp	r1, r6
 800ca76:	d334      	bcc.n	800cae2 <rshift+0x96>
 800ca78:	1a9b      	subs	r3, r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	1eea      	subs	r2, r5, #3
 800ca7e:	4296      	cmp	r6, r2
 800ca80:	bf38      	it	cc
 800ca82:	2300      	movcc	r3, #0
 800ca84:	4423      	add	r3, r4
 800ca86:	e015      	b.n	800cab4 <rshift+0x68>
 800ca88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca8c:	f1c1 0820 	rsb	r8, r1, #32
 800ca90:	40cf      	lsrs	r7, r1
 800ca92:	f105 0e04 	add.w	lr, r5, #4
 800ca96:	46a1      	mov	r9, r4
 800ca98:	4576      	cmp	r6, lr
 800ca9a:	46f4      	mov	ip, lr
 800ca9c:	d815      	bhi.n	800caca <rshift+0x7e>
 800ca9e:	1a9a      	subs	r2, r3, r2
 800caa0:	0092      	lsls	r2, r2, #2
 800caa2:	3a04      	subs	r2, #4
 800caa4:	3501      	adds	r5, #1
 800caa6:	42ae      	cmp	r6, r5
 800caa8:	bf38      	it	cc
 800caaa:	2200      	movcc	r2, #0
 800caac:	18a3      	adds	r3, r4, r2
 800caae:	50a7      	str	r7, [r4, r2]
 800cab0:	b107      	cbz	r7, 800cab4 <rshift+0x68>
 800cab2:	3304      	adds	r3, #4
 800cab4:	1b1a      	subs	r2, r3, r4
 800cab6:	42a3      	cmp	r3, r4
 800cab8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cabc:	bf08      	it	eq
 800cabe:	2300      	moveq	r3, #0
 800cac0:	6102      	str	r2, [r0, #16]
 800cac2:	bf08      	it	eq
 800cac4:	6143      	streq	r3, [r0, #20]
 800cac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caca:	f8dc c000 	ldr.w	ip, [ip]
 800cace:	fa0c fc08 	lsl.w	ip, ip, r8
 800cad2:	ea4c 0707 	orr.w	r7, ip, r7
 800cad6:	f849 7b04 	str.w	r7, [r9], #4
 800cada:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cade:	40cf      	lsrs	r7, r1
 800cae0:	e7da      	b.n	800ca98 <rshift+0x4c>
 800cae2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cae6:	f847 cf04 	str.w	ip, [r7, #4]!
 800caea:	e7c3      	b.n	800ca74 <rshift+0x28>
 800caec:	4623      	mov	r3, r4
 800caee:	e7e1      	b.n	800cab4 <rshift+0x68>

0800caf0 <__hexdig_fun>:
 800caf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800caf4:	2b09      	cmp	r3, #9
 800caf6:	d802      	bhi.n	800cafe <__hexdig_fun+0xe>
 800caf8:	3820      	subs	r0, #32
 800cafa:	b2c0      	uxtb	r0, r0
 800cafc:	4770      	bx	lr
 800cafe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cb02:	2b05      	cmp	r3, #5
 800cb04:	d801      	bhi.n	800cb0a <__hexdig_fun+0x1a>
 800cb06:	3847      	subs	r0, #71	@ 0x47
 800cb08:	e7f7      	b.n	800cafa <__hexdig_fun+0xa>
 800cb0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cb0e:	2b05      	cmp	r3, #5
 800cb10:	d801      	bhi.n	800cb16 <__hexdig_fun+0x26>
 800cb12:	3827      	subs	r0, #39	@ 0x27
 800cb14:	e7f1      	b.n	800cafa <__hexdig_fun+0xa>
 800cb16:	2000      	movs	r0, #0
 800cb18:	4770      	bx	lr
	...

0800cb1c <__gethex>:
 800cb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb20:	b085      	sub	sp, #20
 800cb22:	468a      	mov	sl, r1
 800cb24:	9302      	str	r3, [sp, #8]
 800cb26:	680b      	ldr	r3, [r1, #0]
 800cb28:	9001      	str	r0, [sp, #4]
 800cb2a:	4690      	mov	r8, r2
 800cb2c:	1c9c      	adds	r4, r3, #2
 800cb2e:	46a1      	mov	r9, r4
 800cb30:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cb34:	2830      	cmp	r0, #48	@ 0x30
 800cb36:	d0fa      	beq.n	800cb2e <__gethex+0x12>
 800cb38:	eba9 0303 	sub.w	r3, r9, r3
 800cb3c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cb40:	f7ff ffd6 	bl	800caf0 <__hexdig_fun>
 800cb44:	4605      	mov	r5, r0
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d168      	bne.n	800cc1c <__gethex+0x100>
 800cb4a:	49a0      	ldr	r1, [pc, #640]	@ (800cdcc <__gethex+0x2b0>)
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	4648      	mov	r0, r9
 800cb50:	f7ff fefc 	bl	800c94c <strncmp>
 800cb54:	4607      	mov	r7, r0
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d167      	bne.n	800cc2a <__gethex+0x10e>
 800cb5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cb5e:	4626      	mov	r6, r4
 800cb60:	f7ff ffc6 	bl	800caf0 <__hexdig_fun>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d062      	beq.n	800cc2e <__gethex+0x112>
 800cb68:	4623      	mov	r3, r4
 800cb6a:	7818      	ldrb	r0, [r3, #0]
 800cb6c:	2830      	cmp	r0, #48	@ 0x30
 800cb6e:	4699      	mov	r9, r3
 800cb70:	f103 0301 	add.w	r3, r3, #1
 800cb74:	d0f9      	beq.n	800cb6a <__gethex+0x4e>
 800cb76:	f7ff ffbb 	bl	800caf0 <__hexdig_fun>
 800cb7a:	fab0 f580 	clz	r5, r0
 800cb7e:	096d      	lsrs	r5, r5, #5
 800cb80:	f04f 0b01 	mov.w	fp, #1
 800cb84:	464a      	mov	r2, r9
 800cb86:	4616      	mov	r6, r2
 800cb88:	3201      	adds	r2, #1
 800cb8a:	7830      	ldrb	r0, [r6, #0]
 800cb8c:	f7ff ffb0 	bl	800caf0 <__hexdig_fun>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d1f8      	bne.n	800cb86 <__gethex+0x6a>
 800cb94:	498d      	ldr	r1, [pc, #564]	@ (800cdcc <__gethex+0x2b0>)
 800cb96:	2201      	movs	r2, #1
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7ff fed7 	bl	800c94c <strncmp>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d13f      	bne.n	800cc22 <__gethex+0x106>
 800cba2:	b944      	cbnz	r4, 800cbb6 <__gethex+0x9a>
 800cba4:	1c74      	adds	r4, r6, #1
 800cba6:	4622      	mov	r2, r4
 800cba8:	4616      	mov	r6, r2
 800cbaa:	3201      	adds	r2, #1
 800cbac:	7830      	ldrb	r0, [r6, #0]
 800cbae:	f7ff ff9f 	bl	800caf0 <__hexdig_fun>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d1f8      	bne.n	800cba8 <__gethex+0x8c>
 800cbb6:	1ba4      	subs	r4, r4, r6
 800cbb8:	00a7      	lsls	r7, r4, #2
 800cbba:	7833      	ldrb	r3, [r6, #0]
 800cbbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cbc0:	2b50      	cmp	r3, #80	@ 0x50
 800cbc2:	d13e      	bne.n	800cc42 <__gethex+0x126>
 800cbc4:	7873      	ldrb	r3, [r6, #1]
 800cbc6:	2b2b      	cmp	r3, #43	@ 0x2b
 800cbc8:	d033      	beq.n	800cc32 <__gethex+0x116>
 800cbca:	2b2d      	cmp	r3, #45	@ 0x2d
 800cbcc:	d034      	beq.n	800cc38 <__gethex+0x11c>
 800cbce:	1c71      	adds	r1, r6, #1
 800cbd0:	2400      	movs	r4, #0
 800cbd2:	7808      	ldrb	r0, [r1, #0]
 800cbd4:	f7ff ff8c 	bl	800caf0 <__hexdig_fun>
 800cbd8:	1e43      	subs	r3, r0, #1
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	2b18      	cmp	r3, #24
 800cbde:	d830      	bhi.n	800cc42 <__gethex+0x126>
 800cbe0:	f1a0 0210 	sub.w	r2, r0, #16
 800cbe4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cbe8:	f7ff ff82 	bl	800caf0 <__hexdig_fun>
 800cbec:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800cbf0:	fa5f fc8c 	uxtb.w	ip, ip
 800cbf4:	f1bc 0f18 	cmp.w	ip, #24
 800cbf8:	f04f 030a 	mov.w	r3, #10
 800cbfc:	d91e      	bls.n	800cc3c <__gethex+0x120>
 800cbfe:	b104      	cbz	r4, 800cc02 <__gethex+0xe6>
 800cc00:	4252      	negs	r2, r2
 800cc02:	4417      	add	r7, r2
 800cc04:	f8ca 1000 	str.w	r1, [sl]
 800cc08:	b1ed      	cbz	r5, 800cc46 <__gethex+0x12a>
 800cc0a:	f1bb 0f00 	cmp.w	fp, #0
 800cc0e:	bf0c      	ite	eq
 800cc10:	2506      	moveq	r5, #6
 800cc12:	2500      	movne	r5, #0
 800cc14:	4628      	mov	r0, r5
 800cc16:	b005      	add	sp, #20
 800cc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1c:	2500      	movs	r5, #0
 800cc1e:	462c      	mov	r4, r5
 800cc20:	e7b0      	b.n	800cb84 <__gethex+0x68>
 800cc22:	2c00      	cmp	r4, #0
 800cc24:	d1c7      	bne.n	800cbb6 <__gethex+0x9a>
 800cc26:	4627      	mov	r7, r4
 800cc28:	e7c7      	b.n	800cbba <__gethex+0x9e>
 800cc2a:	464e      	mov	r6, r9
 800cc2c:	462f      	mov	r7, r5
 800cc2e:	2501      	movs	r5, #1
 800cc30:	e7c3      	b.n	800cbba <__gethex+0x9e>
 800cc32:	2400      	movs	r4, #0
 800cc34:	1cb1      	adds	r1, r6, #2
 800cc36:	e7cc      	b.n	800cbd2 <__gethex+0xb6>
 800cc38:	2401      	movs	r4, #1
 800cc3a:	e7fb      	b.n	800cc34 <__gethex+0x118>
 800cc3c:	fb03 0002 	mla	r0, r3, r2, r0
 800cc40:	e7ce      	b.n	800cbe0 <__gethex+0xc4>
 800cc42:	4631      	mov	r1, r6
 800cc44:	e7de      	b.n	800cc04 <__gethex+0xe8>
 800cc46:	eba6 0309 	sub.w	r3, r6, r9
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	2b07      	cmp	r3, #7
 800cc50:	dc0a      	bgt.n	800cc68 <__gethex+0x14c>
 800cc52:	9801      	ldr	r0, [sp, #4]
 800cc54:	f7fe f8c4 	bl	800ade0 <_Balloc>
 800cc58:	4604      	mov	r4, r0
 800cc5a:	b940      	cbnz	r0, 800cc6e <__gethex+0x152>
 800cc5c:	4b5c      	ldr	r3, [pc, #368]	@ (800cdd0 <__gethex+0x2b4>)
 800cc5e:	4602      	mov	r2, r0
 800cc60:	21e4      	movs	r1, #228	@ 0xe4
 800cc62:	485c      	ldr	r0, [pc, #368]	@ (800cdd4 <__gethex+0x2b8>)
 800cc64:	f7ff fec0 	bl	800c9e8 <__assert_func>
 800cc68:	3101      	adds	r1, #1
 800cc6a:	105b      	asrs	r3, r3, #1
 800cc6c:	e7ef      	b.n	800cc4e <__gethex+0x132>
 800cc6e:	f100 0a14 	add.w	sl, r0, #20
 800cc72:	2300      	movs	r3, #0
 800cc74:	4655      	mov	r5, sl
 800cc76:	469b      	mov	fp, r3
 800cc78:	45b1      	cmp	r9, r6
 800cc7a:	d337      	bcc.n	800ccec <__gethex+0x1d0>
 800cc7c:	f845 bb04 	str.w	fp, [r5], #4
 800cc80:	eba5 050a 	sub.w	r5, r5, sl
 800cc84:	10ad      	asrs	r5, r5, #2
 800cc86:	6125      	str	r5, [r4, #16]
 800cc88:	4658      	mov	r0, fp
 800cc8a:	f7fe f99b 	bl	800afc4 <__hi0bits>
 800cc8e:	016d      	lsls	r5, r5, #5
 800cc90:	f8d8 6000 	ldr.w	r6, [r8]
 800cc94:	1a2d      	subs	r5, r5, r0
 800cc96:	42b5      	cmp	r5, r6
 800cc98:	dd54      	ble.n	800cd44 <__gethex+0x228>
 800cc9a:	1bad      	subs	r5, r5, r6
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f7fe fd2f 	bl	800b702 <__any_on>
 800cca4:	4681      	mov	r9, r0
 800cca6:	b178      	cbz	r0, 800ccc8 <__gethex+0x1ac>
 800cca8:	1e6b      	subs	r3, r5, #1
 800ccaa:	1159      	asrs	r1, r3, #5
 800ccac:	f003 021f 	and.w	r2, r3, #31
 800ccb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ccb4:	f04f 0901 	mov.w	r9, #1
 800ccb8:	fa09 f202 	lsl.w	r2, r9, r2
 800ccbc:	420a      	tst	r2, r1
 800ccbe:	d003      	beq.n	800ccc8 <__gethex+0x1ac>
 800ccc0:	454b      	cmp	r3, r9
 800ccc2:	dc36      	bgt.n	800cd32 <__gethex+0x216>
 800ccc4:	f04f 0902 	mov.w	r9, #2
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4620      	mov	r0, r4
 800cccc:	f7ff febe 	bl	800ca4c <rshift>
 800ccd0:	442f      	add	r7, r5
 800ccd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ccd6:	42bb      	cmp	r3, r7
 800ccd8:	da42      	bge.n	800cd60 <__gethex+0x244>
 800ccda:	9801      	ldr	r0, [sp, #4]
 800ccdc:	4621      	mov	r1, r4
 800ccde:	f7fe f8bf 	bl	800ae60 <_Bfree>
 800cce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cce4:	2300      	movs	r3, #0
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	25a3      	movs	r5, #163	@ 0xa3
 800ccea:	e793      	b.n	800cc14 <__gethex+0xf8>
 800ccec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ccf0:	2a2e      	cmp	r2, #46	@ 0x2e
 800ccf2:	d012      	beq.n	800cd1a <__gethex+0x1fe>
 800ccf4:	2b20      	cmp	r3, #32
 800ccf6:	d104      	bne.n	800cd02 <__gethex+0x1e6>
 800ccf8:	f845 bb04 	str.w	fp, [r5], #4
 800ccfc:	f04f 0b00 	mov.w	fp, #0
 800cd00:	465b      	mov	r3, fp
 800cd02:	7830      	ldrb	r0, [r6, #0]
 800cd04:	9303      	str	r3, [sp, #12]
 800cd06:	f7ff fef3 	bl	800caf0 <__hexdig_fun>
 800cd0a:	9b03      	ldr	r3, [sp, #12]
 800cd0c:	f000 000f 	and.w	r0, r0, #15
 800cd10:	4098      	lsls	r0, r3
 800cd12:	ea4b 0b00 	orr.w	fp, fp, r0
 800cd16:	3304      	adds	r3, #4
 800cd18:	e7ae      	b.n	800cc78 <__gethex+0x15c>
 800cd1a:	45b1      	cmp	r9, r6
 800cd1c:	d8ea      	bhi.n	800ccf4 <__gethex+0x1d8>
 800cd1e:	492b      	ldr	r1, [pc, #172]	@ (800cdcc <__gethex+0x2b0>)
 800cd20:	9303      	str	r3, [sp, #12]
 800cd22:	2201      	movs	r2, #1
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7ff fe11 	bl	800c94c <strncmp>
 800cd2a:	9b03      	ldr	r3, [sp, #12]
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d1e1      	bne.n	800ccf4 <__gethex+0x1d8>
 800cd30:	e7a2      	b.n	800cc78 <__gethex+0x15c>
 800cd32:	1ea9      	subs	r1, r5, #2
 800cd34:	4620      	mov	r0, r4
 800cd36:	f7fe fce4 	bl	800b702 <__any_on>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d0c2      	beq.n	800ccc4 <__gethex+0x1a8>
 800cd3e:	f04f 0903 	mov.w	r9, #3
 800cd42:	e7c1      	b.n	800ccc8 <__gethex+0x1ac>
 800cd44:	da09      	bge.n	800cd5a <__gethex+0x23e>
 800cd46:	1b75      	subs	r5, r6, r5
 800cd48:	4621      	mov	r1, r4
 800cd4a:	9801      	ldr	r0, [sp, #4]
 800cd4c:	462a      	mov	r2, r5
 800cd4e:	f7fe fa9f 	bl	800b290 <__lshift>
 800cd52:	1b7f      	subs	r7, r7, r5
 800cd54:	4604      	mov	r4, r0
 800cd56:	f100 0a14 	add.w	sl, r0, #20
 800cd5a:	f04f 0900 	mov.w	r9, #0
 800cd5e:	e7b8      	b.n	800ccd2 <__gethex+0x1b6>
 800cd60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd64:	42bd      	cmp	r5, r7
 800cd66:	dd6f      	ble.n	800ce48 <__gethex+0x32c>
 800cd68:	1bed      	subs	r5, r5, r7
 800cd6a:	42ae      	cmp	r6, r5
 800cd6c:	dc34      	bgt.n	800cdd8 <__gethex+0x2bc>
 800cd6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d022      	beq.n	800cdbc <__gethex+0x2a0>
 800cd76:	2b03      	cmp	r3, #3
 800cd78:	d024      	beq.n	800cdc4 <__gethex+0x2a8>
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d115      	bne.n	800cdaa <__gethex+0x28e>
 800cd7e:	42ae      	cmp	r6, r5
 800cd80:	d113      	bne.n	800cdaa <__gethex+0x28e>
 800cd82:	2e01      	cmp	r6, #1
 800cd84:	d10b      	bne.n	800cd9e <__gethex+0x282>
 800cd86:	9a02      	ldr	r2, [sp, #8]
 800cd88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd8c:	6013      	str	r3, [r2, #0]
 800cd8e:	2301      	movs	r3, #1
 800cd90:	6123      	str	r3, [r4, #16]
 800cd92:	f8ca 3000 	str.w	r3, [sl]
 800cd96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd98:	2562      	movs	r5, #98	@ 0x62
 800cd9a:	601c      	str	r4, [r3, #0]
 800cd9c:	e73a      	b.n	800cc14 <__gethex+0xf8>
 800cd9e:	1e71      	subs	r1, r6, #1
 800cda0:	4620      	mov	r0, r4
 800cda2:	f7fe fcae 	bl	800b702 <__any_on>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d1ed      	bne.n	800cd86 <__gethex+0x26a>
 800cdaa:	9801      	ldr	r0, [sp, #4]
 800cdac:	4621      	mov	r1, r4
 800cdae:	f7fe f857 	bl	800ae60 <_Bfree>
 800cdb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	6013      	str	r3, [r2, #0]
 800cdb8:	2550      	movs	r5, #80	@ 0x50
 800cdba:	e72b      	b.n	800cc14 <__gethex+0xf8>
 800cdbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1f3      	bne.n	800cdaa <__gethex+0x28e>
 800cdc2:	e7e0      	b.n	800cd86 <__gethex+0x26a>
 800cdc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1dd      	bne.n	800cd86 <__gethex+0x26a>
 800cdca:	e7ee      	b.n	800cdaa <__gethex+0x28e>
 800cdcc:	0800da30 	.word	0x0800da30
 800cdd0:	0800d8c5 	.word	0x0800d8c5
 800cdd4:	0800dbde 	.word	0x0800dbde
 800cdd8:	1e6f      	subs	r7, r5, #1
 800cdda:	f1b9 0f00 	cmp.w	r9, #0
 800cdde:	d130      	bne.n	800ce42 <__gethex+0x326>
 800cde0:	b127      	cbz	r7, 800cdec <__gethex+0x2d0>
 800cde2:	4639      	mov	r1, r7
 800cde4:	4620      	mov	r0, r4
 800cde6:	f7fe fc8c 	bl	800b702 <__any_on>
 800cdea:	4681      	mov	r9, r0
 800cdec:	117a      	asrs	r2, r7, #5
 800cdee:	2301      	movs	r3, #1
 800cdf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cdf4:	f007 071f 	and.w	r7, r7, #31
 800cdf8:	40bb      	lsls	r3, r7
 800cdfa:	4213      	tst	r3, r2
 800cdfc:	4629      	mov	r1, r5
 800cdfe:	4620      	mov	r0, r4
 800ce00:	bf18      	it	ne
 800ce02:	f049 0902 	orrne.w	r9, r9, #2
 800ce06:	f7ff fe21 	bl	800ca4c <rshift>
 800ce0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ce0e:	1b76      	subs	r6, r6, r5
 800ce10:	2502      	movs	r5, #2
 800ce12:	f1b9 0f00 	cmp.w	r9, #0
 800ce16:	d047      	beq.n	800cea8 <__gethex+0x38c>
 800ce18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d015      	beq.n	800ce4c <__gethex+0x330>
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	d017      	beq.n	800ce54 <__gethex+0x338>
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d109      	bne.n	800ce3c <__gethex+0x320>
 800ce28:	f019 0f02 	tst.w	r9, #2
 800ce2c:	d006      	beq.n	800ce3c <__gethex+0x320>
 800ce2e:	f8da 3000 	ldr.w	r3, [sl]
 800ce32:	ea49 0903 	orr.w	r9, r9, r3
 800ce36:	f019 0f01 	tst.w	r9, #1
 800ce3a:	d10e      	bne.n	800ce5a <__gethex+0x33e>
 800ce3c:	f045 0510 	orr.w	r5, r5, #16
 800ce40:	e032      	b.n	800cea8 <__gethex+0x38c>
 800ce42:	f04f 0901 	mov.w	r9, #1
 800ce46:	e7d1      	b.n	800cdec <__gethex+0x2d0>
 800ce48:	2501      	movs	r5, #1
 800ce4a:	e7e2      	b.n	800ce12 <__gethex+0x2f6>
 800ce4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce4e:	f1c3 0301 	rsb	r3, r3, #1
 800ce52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d0f0      	beq.n	800ce3c <__gethex+0x320>
 800ce5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce5e:	f104 0314 	add.w	r3, r4, #20
 800ce62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce6a:	f04f 0c00 	mov.w	ip, #0
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce74:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800ce78:	d01b      	beq.n	800ceb2 <__gethex+0x396>
 800ce7a:	3201      	adds	r2, #1
 800ce7c:	6002      	str	r2, [r0, #0]
 800ce7e:	2d02      	cmp	r5, #2
 800ce80:	f104 0314 	add.w	r3, r4, #20
 800ce84:	d13c      	bne.n	800cf00 <__gethex+0x3e4>
 800ce86:	f8d8 2000 	ldr.w	r2, [r8]
 800ce8a:	3a01      	subs	r2, #1
 800ce8c:	42b2      	cmp	r2, r6
 800ce8e:	d109      	bne.n	800cea4 <__gethex+0x388>
 800ce90:	1171      	asrs	r1, r6, #5
 800ce92:	2201      	movs	r2, #1
 800ce94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce98:	f006 061f 	and.w	r6, r6, #31
 800ce9c:	fa02 f606 	lsl.w	r6, r2, r6
 800cea0:	421e      	tst	r6, r3
 800cea2:	d13a      	bne.n	800cf1a <__gethex+0x3fe>
 800cea4:	f045 0520 	orr.w	r5, r5, #32
 800cea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceaa:	601c      	str	r4, [r3, #0]
 800ceac:	9b02      	ldr	r3, [sp, #8]
 800ceae:	601f      	str	r7, [r3, #0]
 800ceb0:	e6b0      	b.n	800cc14 <__gethex+0xf8>
 800ceb2:	4299      	cmp	r1, r3
 800ceb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800ceb8:	d8d9      	bhi.n	800ce6e <__gethex+0x352>
 800ceba:	68a3      	ldr	r3, [r4, #8]
 800cebc:	459b      	cmp	fp, r3
 800cebe:	db17      	blt.n	800cef0 <__gethex+0x3d4>
 800cec0:	6861      	ldr	r1, [r4, #4]
 800cec2:	9801      	ldr	r0, [sp, #4]
 800cec4:	3101      	adds	r1, #1
 800cec6:	f7fd ff8b 	bl	800ade0 <_Balloc>
 800ceca:	4681      	mov	r9, r0
 800cecc:	b918      	cbnz	r0, 800ced6 <__gethex+0x3ba>
 800cece:	4b1a      	ldr	r3, [pc, #104]	@ (800cf38 <__gethex+0x41c>)
 800ced0:	4602      	mov	r2, r0
 800ced2:	2184      	movs	r1, #132	@ 0x84
 800ced4:	e6c5      	b.n	800cc62 <__gethex+0x146>
 800ced6:	6922      	ldr	r2, [r4, #16]
 800ced8:	3202      	adds	r2, #2
 800ceda:	f104 010c 	add.w	r1, r4, #12
 800cede:	0092      	lsls	r2, r2, #2
 800cee0:	300c      	adds	r0, #12
 800cee2:	f7fd f81a 	bl	8009f1a <memcpy>
 800cee6:	4621      	mov	r1, r4
 800cee8:	9801      	ldr	r0, [sp, #4]
 800ceea:	f7fd ffb9 	bl	800ae60 <_Bfree>
 800ceee:	464c      	mov	r4, r9
 800cef0:	6923      	ldr	r3, [r4, #16]
 800cef2:	1c5a      	adds	r2, r3, #1
 800cef4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cef8:	6122      	str	r2, [r4, #16]
 800cefa:	2201      	movs	r2, #1
 800cefc:	615a      	str	r2, [r3, #20]
 800cefe:	e7be      	b.n	800ce7e <__gethex+0x362>
 800cf00:	6922      	ldr	r2, [r4, #16]
 800cf02:	455a      	cmp	r2, fp
 800cf04:	dd0b      	ble.n	800cf1e <__gethex+0x402>
 800cf06:	2101      	movs	r1, #1
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f7ff fd9f 	bl	800ca4c <rshift>
 800cf0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf12:	3701      	adds	r7, #1
 800cf14:	42bb      	cmp	r3, r7
 800cf16:	f6ff aee0 	blt.w	800ccda <__gethex+0x1be>
 800cf1a:	2501      	movs	r5, #1
 800cf1c:	e7c2      	b.n	800cea4 <__gethex+0x388>
 800cf1e:	f016 061f 	ands.w	r6, r6, #31
 800cf22:	d0fa      	beq.n	800cf1a <__gethex+0x3fe>
 800cf24:	4453      	add	r3, sl
 800cf26:	f1c6 0620 	rsb	r6, r6, #32
 800cf2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cf2e:	f7fe f849 	bl	800afc4 <__hi0bits>
 800cf32:	42b0      	cmp	r0, r6
 800cf34:	dbe7      	blt.n	800cf06 <__gethex+0x3ea>
 800cf36:	e7f0      	b.n	800cf1a <__gethex+0x3fe>
 800cf38:	0800d8c5 	.word	0x0800d8c5

0800cf3c <L_shift>:
 800cf3c:	f1c2 0208 	rsb	r2, r2, #8
 800cf40:	0092      	lsls	r2, r2, #2
 800cf42:	b570      	push	{r4, r5, r6, lr}
 800cf44:	f1c2 0620 	rsb	r6, r2, #32
 800cf48:	6843      	ldr	r3, [r0, #4]
 800cf4a:	6804      	ldr	r4, [r0, #0]
 800cf4c:	fa03 f506 	lsl.w	r5, r3, r6
 800cf50:	432c      	orrs	r4, r5
 800cf52:	40d3      	lsrs	r3, r2
 800cf54:	6004      	str	r4, [r0, #0]
 800cf56:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf5a:	4288      	cmp	r0, r1
 800cf5c:	d3f4      	bcc.n	800cf48 <L_shift+0xc>
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}

0800cf60 <__match>:
 800cf60:	b530      	push	{r4, r5, lr}
 800cf62:	6803      	ldr	r3, [r0, #0]
 800cf64:	3301      	adds	r3, #1
 800cf66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf6a:	b914      	cbnz	r4, 800cf72 <__match+0x12>
 800cf6c:	6003      	str	r3, [r0, #0]
 800cf6e:	2001      	movs	r0, #1
 800cf70:	bd30      	pop	{r4, r5, pc}
 800cf72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cf7a:	2d19      	cmp	r5, #25
 800cf7c:	bf98      	it	ls
 800cf7e:	3220      	addls	r2, #32
 800cf80:	42a2      	cmp	r2, r4
 800cf82:	d0f0      	beq.n	800cf66 <__match+0x6>
 800cf84:	2000      	movs	r0, #0
 800cf86:	e7f3      	b.n	800cf70 <__match+0x10>

0800cf88 <__hexnan>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	680b      	ldr	r3, [r1, #0]
 800cf8e:	6801      	ldr	r1, [r0, #0]
 800cf90:	115e      	asrs	r6, r3, #5
 800cf92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf96:	f013 031f 	ands.w	r3, r3, #31
 800cf9a:	b087      	sub	sp, #28
 800cf9c:	bf18      	it	ne
 800cf9e:	3604      	addne	r6, #4
 800cfa0:	2500      	movs	r5, #0
 800cfa2:	1f37      	subs	r7, r6, #4
 800cfa4:	4682      	mov	sl, r0
 800cfa6:	4690      	mov	r8, r2
 800cfa8:	9301      	str	r3, [sp, #4]
 800cfaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800cfae:	46b9      	mov	r9, r7
 800cfb0:	463c      	mov	r4, r7
 800cfb2:	9502      	str	r5, [sp, #8]
 800cfb4:	46ab      	mov	fp, r5
 800cfb6:	784a      	ldrb	r2, [r1, #1]
 800cfb8:	1c4b      	adds	r3, r1, #1
 800cfba:	9303      	str	r3, [sp, #12]
 800cfbc:	b342      	cbz	r2, 800d010 <__hexnan+0x88>
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	9105      	str	r1, [sp, #20]
 800cfc2:	9204      	str	r2, [sp, #16]
 800cfc4:	f7ff fd94 	bl	800caf0 <__hexdig_fun>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d151      	bne.n	800d070 <__hexnan+0xe8>
 800cfcc:	9a04      	ldr	r2, [sp, #16]
 800cfce:	9905      	ldr	r1, [sp, #20]
 800cfd0:	2a20      	cmp	r2, #32
 800cfd2:	d818      	bhi.n	800d006 <__hexnan+0x7e>
 800cfd4:	9b02      	ldr	r3, [sp, #8]
 800cfd6:	459b      	cmp	fp, r3
 800cfd8:	dd13      	ble.n	800d002 <__hexnan+0x7a>
 800cfda:	454c      	cmp	r4, r9
 800cfdc:	d206      	bcs.n	800cfec <__hexnan+0x64>
 800cfde:	2d07      	cmp	r5, #7
 800cfe0:	dc04      	bgt.n	800cfec <__hexnan+0x64>
 800cfe2:	462a      	mov	r2, r5
 800cfe4:	4649      	mov	r1, r9
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f7ff ffa8 	bl	800cf3c <L_shift>
 800cfec:	4544      	cmp	r4, r8
 800cfee:	d952      	bls.n	800d096 <__hexnan+0x10e>
 800cff0:	2300      	movs	r3, #0
 800cff2:	f1a4 0904 	sub.w	r9, r4, #4
 800cff6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cffa:	f8cd b008 	str.w	fp, [sp, #8]
 800cffe:	464c      	mov	r4, r9
 800d000:	461d      	mov	r5, r3
 800d002:	9903      	ldr	r1, [sp, #12]
 800d004:	e7d7      	b.n	800cfb6 <__hexnan+0x2e>
 800d006:	2a29      	cmp	r2, #41	@ 0x29
 800d008:	d157      	bne.n	800d0ba <__hexnan+0x132>
 800d00a:	3102      	adds	r1, #2
 800d00c:	f8ca 1000 	str.w	r1, [sl]
 800d010:	f1bb 0f00 	cmp.w	fp, #0
 800d014:	d051      	beq.n	800d0ba <__hexnan+0x132>
 800d016:	454c      	cmp	r4, r9
 800d018:	d206      	bcs.n	800d028 <__hexnan+0xa0>
 800d01a:	2d07      	cmp	r5, #7
 800d01c:	dc04      	bgt.n	800d028 <__hexnan+0xa0>
 800d01e:	462a      	mov	r2, r5
 800d020:	4649      	mov	r1, r9
 800d022:	4620      	mov	r0, r4
 800d024:	f7ff ff8a 	bl	800cf3c <L_shift>
 800d028:	4544      	cmp	r4, r8
 800d02a:	d936      	bls.n	800d09a <__hexnan+0x112>
 800d02c:	f1a8 0204 	sub.w	r2, r8, #4
 800d030:	4623      	mov	r3, r4
 800d032:	f853 1b04 	ldr.w	r1, [r3], #4
 800d036:	f842 1f04 	str.w	r1, [r2, #4]!
 800d03a:	429f      	cmp	r7, r3
 800d03c:	d2f9      	bcs.n	800d032 <__hexnan+0xaa>
 800d03e:	1b3b      	subs	r3, r7, r4
 800d040:	f023 0303 	bic.w	r3, r3, #3
 800d044:	3304      	adds	r3, #4
 800d046:	3401      	adds	r4, #1
 800d048:	3e03      	subs	r6, #3
 800d04a:	42b4      	cmp	r4, r6
 800d04c:	bf88      	it	hi
 800d04e:	2304      	movhi	r3, #4
 800d050:	4443      	add	r3, r8
 800d052:	2200      	movs	r2, #0
 800d054:	f843 2b04 	str.w	r2, [r3], #4
 800d058:	429f      	cmp	r7, r3
 800d05a:	d2fb      	bcs.n	800d054 <__hexnan+0xcc>
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	b91b      	cbnz	r3, 800d068 <__hexnan+0xe0>
 800d060:	4547      	cmp	r7, r8
 800d062:	d128      	bne.n	800d0b6 <__hexnan+0x12e>
 800d064:	2301      	movs	r3, #1
 800d066:	603b      	str	r3, [r7, #0]
 800d068:	2005      	movs	r0, #5
 800d06a:	b007      	add	sp, #28
 800d06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d070:	3501      	adds	r5, #1
 800d072:	2d08      	cmp	r5, #8
 800d074:	f10b 0b01 	add.w	fp, fp, #1
 800d078:	dd06      	ble.n	800d088 <__hexnan+0x100>
 800d07a:	4544      	cmp	r4, r8
 800d07c:	d9c1      	bls.n	800d002 <__hexnan+0x7a>
 800d07e:	2300      	movs	r3, #0
 800d080:	f844 3c04 	str.w	r3, [r4, #-4]
 800d084:	2501      	movs	r5, #1
 800d086:	3c04      	subs	r4, #4
 800d088:	6822      	ldr	r2, [r4, #0]
 800d08a:	f000 000f 	and.w	r0, r0, #15
 800d08e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d092:	6020      	str	r0, [r4, #0]
 800d094:	e7b5      	b.n	800d002 <__hexnan+0x7a>
 800d096:	2508      	movs	r5, #8
 800d098:	e7b3      	b.n	800d002 <__hexnan+0x7a>
 800d09a:	9b01      	ldr	r3, [sp, #4]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d0dd      	beq.n	800d05c <__hexnan+0xd4>
 800d0a0:	f1c3 0320 	rsb	r3, r3, #32
 800d0a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0a8:	40da      	lsrs	r2, r3
 800d0aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d0b4:	e7d2      	b.n	800d05c <__hexnan+0xd4>
 800d0b6:	3f04      	subs	r7, #4
 800d0b8:	e7d0      	b.n	800d05c <__hexnan+0xd4>
 800d0ba:	2004      	movs	r0, #4
 800d0bc:	e7d5      	b.n	800d06a <__hexnan+0xe2>

0800d0be <__ascii_mbtowc>:
 800d0be:	b082      	sub	sp, #8
 800d0c0:	b901      	cbnz	r1, 800d0c4 <__ascii_mbtowc+0x6>
 800d0c2:	a901      	add	r1, sp, #4
 800d0c4:	b142      	cbz	r2, 800d0d8 <__ascii_mbtowc+0x1a>
 800d0c6:	b14b      	cbz	r3, 800d0dc <__ascii_mbtowc+0x1e>
 800d0c8:	7813      	ldrb	r3, [r2, #0]
 800d0ca:	600b      	str	r3, [r1, #0]
 800d0cc:	7812      	ldrb	r2, [r2, #0]
 800d0ce:	1e10      	subs	r0, r2, #0
 800d0d0:	bf18      	it	ne
 800d0d2:	2001      	movne	r0, #1
 800d0d4:	b002      	add	sp, #8
 800d0d6:	4770      	bx	lr
 800d0d8:	4610      	mov	r0, r2
 800d0da:	e7fb      	b.n	800d0d4 <__ascii_mbtowc+0x16>
 800d0dc:	f06f 0001 	mvn.w	r0, #1
 800d0e0:	e7f8      	b.n	800d0d4 <__ascii_mbtowc+0x16>

0800d0e2 <_realloc_r>:
 800d0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e6:	4680      	mov	r8, r0
 800d0e8:	4615      	mov	r5, r2
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	b921      	cbnz	r1, 800d0f8 <_realloc_r+0x16>
 800d0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	f7fd bde8 	b.w	800acc8 <_malloc_r>
 800d0f8:	b92a      	cbnz	r2, 800d106 <_realloc_r+0x24>
 800d0fa:	f7fd fd71 	bl	800abe0 <_free_r>
 800d0fe:	2400      	movs	r4, #0
 800d100:	4620      	mov	r0, r4
 800d102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d106:	f000 f840 	bl	800d18a <_malloc_usable_size_r>
 800d10a:	4285      	cmp	r5, r0
 800d10c:	4606      	mov	r6, r0
 800d10e:	d802      	bhi.n	800d116 <_realloc_r+0x34>
 800d110:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d114:	d8f4      	bhi.n	800d100 <_realloc_r+0x1e>
 800d116:	4629      	mov	r1, r5
 800d118:	4640      	mov	r0, r8
 800d11a:	f7fd fdd5 	bl	800acc8 <_malloc_r>
 800d11e:	4607      	mov	r7, r0
 800d120:	2800      	cmp	r0, #0
 800d122:	d0ec      	beq.n	800d0fe <_realloc_r+0x1c>
 800d124:	42b5      	cmp	r5, r6
 800d126:	462a      	mov	r2, r5
 800d128:	4621      	mov	r1, r4
 800d12a:	bf28      	it	cs
 800d12c:	4632      	movcs	r2, r6
 800d12e:	f7fc fef4 	bl	8009f1a <memcpy>
 800d132:	4621      	mov	r1, r4
 800d134:	4640      	mov	r0, r8
 800d136:	f7fd fd53 	bl	800abe0 <_free_r>
 800d13a:	463c      	mov	r4, r7
 800d13c:	e7e0      	b.n	800d100 <_realloc_r+0x1e>

0800d13e <__ascii_wctomb>:
 800d13e:	4603      	mov	r3, r0
 800d140:	4608      	mov	r0, r1
 800d142:	b141      	cbz	r1, 800d156 <__ascii_wctomb+0x18>
 800d144:	2aff      	cmp	r2, #255	@ 0xff
 800d146:	d904      	bls.n	800d152 <__ascii_wctomb+0x14>
 800d148:	228a      	movs	r2, #138	@ 0x8a
 800d14a:	601a      	str	r2, [r3, #0]
 800d14c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d150:	4770      	bx	lr
 800d152:	700a      	strb	r2, [r1, #0]
 800d154:	2001      	movs	r0, #1
 800d156:	4770      	bx	lr

0800d158 <fiprintf>:
 800d158:	b40e      	push	{r1, r2, r3}
 800d15a:	b503      	push	{r0, r1, lr}
 800d15c:	4601      	mov	r1, r0
 800d15e:	ab03      	add	r3, sp, #12
 800d160:	4805      	ldr	r0, [pc, #20]	@ (800d178 <fiprintf+0x20>)
 800d162:	f853 2b04 	ldr.w	r2, [r3], #4
 800d166:	6800      	ldr	r0, [r0, #0]
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	f000 f83f 	bl	800d1ec <_vfiprintf_r>
 800d16e:	b002      	add	sp, #8
 800d170:	f85d eb04 	ldr.w	lr, [sp], #4
 800d174:	b003      	add	sp, #12
 800d176:	4770      	bx	lr
 800d178:	2000001c 	.word	0x2000001c

0800d17c <abort>:
 800d17c:	b508      	push	{r3, lr}
 800d17e:	2006      	movs	r0, #6
 800d180:	f000 f974 	bl	800d46c <raise>
 800d184:	2001      	movs	r0, #1
 800d186:	f7f4 fdad 	bl	8001ce4 <_exit>

0800d18a <_malloc_usable_size_r>:
 800d18a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d18e:	1f18      	subs	r0, r3, #4
 800d190:	2b00      	cmp	r3, #0
 800d192:	bfbc      	itt	lt
 800d194:	580b      	ldrlt	r3, [r1, r0]
 800d196:	18c0      	addlt	r0, r0, r3
 800d198:	4770      	bx	lr

0800d19a <__sfputc_r>:
 800d19a:	6893      	ldr	r3, [r2, #8]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	b410      	push	{r4}
 800d1a2:	6093      	str	r3, [r2, #8]
 800d1a4:	da08      	bge.n	800d1b8 <__sfputc_r+0x1e>
 800d1a6:	6994      	ldr	r4, [r2, #24]
 800d1a8:	42a3      	cmp	r3, r4
 800d1aa:	db01      	blt.n	800d1b0 <__sfputc_r+0x16>
 800d1ac:	290a      	cmp	r1, #10
 800d1ae:	d103      	bne.n	800d1b8 <__sfputc_r+0x1e>
 800d1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1b4:	f7fc bd48 	b.w	8009c48 <__swbuf_r>
 800d1b8:	6813      	ldr	r3, [r2, #0]
 800d1ba:	1c58      	adds	r0, r3, #1
 800d1bc:	6010      	str	r0, [r2, #0]
 800d1be:	7019      	strb	r1, [r3, #0]
 800d1c0:	4608      	mov	r0, r1
 800d1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <__sfputs_r>:
 800d1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ca:	4606      	mov	r6, r0
 800d1cc:	460f      	mov	r7, r1
 800d1ce:	4614      	mov	r4, r2
 800d1d0:	18d5      	adds	r5, r2, r3
 800d1d2:	42ac      	cmp	r4, r5
 800d1d4:	d101      	bne.n	800d1da <__sfputs_r+0x12>
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	e007      	b.n	800d1ea <__sfputs_r+0x22>
 800d1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1de:	463a      	mov	r2, r7
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	f7ff ffda 	bl	800d19a <__sfputc_r>
 800d1e6:	1c43      	adds	r3, r0, #1
 800d1e8:	d1f3      	bne.n	800d1d2 <__sfputs_r+0xa>
 800d1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1ec <_vfiprintf_r>:
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	460d      	mov	r5, r1
 800d1f2:	b09d      	sub	sp, #116	@ 0x74
 800d1f4:	4614      	mov	r4, r2
 800d1f6:	4698      	mov	r8, r3
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	b118      	cbz	r0, 800d204 <_vfiprintf_r+0x18>
 800d1fc:	6a03      	ldr	r3, [r0, #32]
 800d1fe:	b90b      	cbnz	r3, 800d204 <_vfiprintf_r+0x18>
 800d200:	f7fc fbf2 	bl	80099e8 <__sinit>
 800d204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d206:	07d9      	lsls	r1, r3, #31
 800d208:	d405      	bmi.n	800d216 <_vfiprintf_r+0x2a>
 800d20a:	89ab      	ldrh	r3, [r5, #12]
 800d20c:	059a      	lsls	r2, r3, #22
 800d20e:	d402      	bmi.n	800d216 <_vfiprintf_r+0x2a>
 800d210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d212:	f7fc fe80 	bl	8009f16 <__retarget_lock_acquire_recursive>
 800d216:	89ab      	ldrh	r3, [r5, #12]
 800d218:	071b      	lsls	r3, r3, #28
 800d21a:	d501      	bpl.n	800d220 <_vfiprintf_r+0x34>
 800d21c:	692b      	ldr	r3, [r5, #16]
 800d21e:	b99b      	cbnz	r3, 800d248 <_vfiprintf_r+0x5c>
 800d220:	4629      	mov	r1, r5
 800d222:	4630      	mov	r0, r6
 800d224:	f7fc fd4e 	bl	8009cc4 <__swsetup_r>
 800d228:	b170      	cbz	r0, 800d248 <_vfiprintf_r+0x5c>
 800d22a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d22c:	07dc      	lsls	r4, r3, #31
 800d22e:	d504      	bpl.n	800d23a <_vfiprintf_r+0x4e>
 800d230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d234:	b01d      	add	sp, #116	@ 0x74
 800d236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23a:	89ab      	ldrh	r3, [r5, #12]
 800d23c:	0598      	lsls	r0, r3, #22
 800d23e:	d4f7      	bmi.n	800d230 <_vfiprintf_r+0x44>
 800d240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d242:	f7fc fe69 	bl	8009f18 <__retarget_lock_release_recursive>
 800d246:	e7f3      	b.n	800d230 <_vfiprintf_r+0x44>
 800d248:	2300      	movs	r3, #0
 800d24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d24c:	2320      	movs	r3, #32
 800d24e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d252:	f8cd 800c 	str.w	r8, [sp, #12]
 800d256:	2330      	movs	r3, #48	@ 0x30
 800d258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d408 <_vfiprintf_r+0x21c>
 800d25c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d260:	f04f 0901 	mov.w	r9, #1
 800d264:	4623      	mov	r3, r4
 800d266:	469a      	mov	sl, r3
 800d268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d26c:	b10a      	cbz	r2, 800d272 <_vfiprintf_r+0x86>
 800d26e:	2a25      	cmp	r2, #37	@ 0x25
 800d270:	d1f9      	bne.n	800d266 <_vfiprintf_r+0x7a>
 800d272:	ebba 0b04 	subs.w	fp, sl, r4
 800d276:	d00b      	beq.n	800d290 <_vfiprintf_r+0xa4>
 800d278:	465b      	mov	r3, fp
 800d27a:	4622      	mov	r2, r4
 800d27c:	4629      	mov	r1, r5
 800d27e:	4630      	mov	r0, r6
 800d280:	f7ff ffa2 	bl	800d1c8 <__sfputs_r>
 800d284:	3001      	adds	r0, #1
 800d286:	f000 80a7 	beq.w	800d3d8 <_vfiprintf_r+0x1ec>
 800d28a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d28c:	445a      	add	r2, fp
 800d28e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d290:	f89a 3000 	ldrb.w	r3, [sl]
 800d294:	2b00      	cmp	r3, #0
 800d296:	f000 809f 	beq.w	800d3d8 <_vfiprintf_r+0x1ec>
 800d29a:	2300      	movs	r3, #0
 800d29c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2a4:	f10a 0a01 	add.w	sl, sl, #1
 800d2a8:	9304      	str	r3, [sp, #16]
 800d2aa:	9307      	str	r3, [sp, #28]
 800d2ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2b2:	4654      	mov	r4, sl
 800d2b4:	2205      	movs	r2, #5
 800d2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ba:	4853      	ldr	r0, [pc, #332]	@ (800d408 <_vfiprintf_r+0x21c>)
 800d2bc:	f7f2 ff90 	bl	80001e0 <memchr>
 800d2c0:	9a04      	ldr	r2, [sp, #16]
 800d2c2:	b9d8      	cbnz	r0, 800d2fc <_vfiprintf_r+0x110>
 800d2c4:	06d1      	lsls	r1, r2, #27
 800d2c6:	bf44      	itt	mi
 800d2c8:	2320      	movmi	r3, #32
 800d2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2ce:	0713      	lsls	r3, r2, #28
 800d2d0:	bf44      	itt	mi
 800d2d2:	232b      	movmi	r3, #43	@ 0x2b
 800d2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2de:	d015      	beq.n	800d30c <_vfiprintf_r+0x120>
 800d2e0:	9a07      	ldr	r2, [sp, #28]
 800d2e2:	4654      	mov	r4, sl
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	f04f 0c0a 	mov.w	ip, #10
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2f0:	3b30      	subs	r3, #48	@ 0x30
 800d2f2:	2b09      	cmp	r3, #9
 800d2f4:	d94b      	bls.n	800d38e <_vfiprintf_r+0x1a2>
 800d2f6:	b1b0      	cbz	r0, 800d326 <_vfiprintf_r+0x13a>
 800d2f8:	9207      	str	r2, [sp, #28]
 800d2fa:	e014      	b.n	800d326 <_vfiprintf_r+0x13a>
 800d2fc:	eba0 0308 	sub.w	r3, r0, r8
 800d300:	fa09 f303 	lsl.w	r3, r9, r3
 800d304:	4313      	orrs	r3, r2
 800d306:	9304      	str	r3, [sp, #16]
 800d308:	46a2      	mov	sl, r4
 800d30a:	e7d2      	b.n	800d2b2 <_vfiprintf_r+0xc6>
 800d30c:	9b03      	ldr	r3, [sp, #12]
 800d30e:	1d19      	adds	r1, r3, #4
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	9103      	str	r1, [sp, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	bfbb      	ittet	lt
 800d318:	425b      	neglt	r3, r3
 800d31a:	f042 0202 	orrlt.w	r2, r2, #2
 800d31e:	9307      	strge	r3, [sp, #28]
 800d320:	9307      	strlt	r3, [sp, #28]
 800d322:	bfb8      	it	lt
 800d324:	9204      	strlt	r2, [sp, #16]
 800d326:	7823      	ldrb	r3, [r4, #0]
 800d328:	2b2e      	cmp	r3, #46	@ 0x2e
 800d32a:	d10a      	bne.n	800d342 <_vfiprintf_r+0x156>
 800d32c:	7863      	ldrb	r3, [r4, #1]
 800d32e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d330:	d132      	bne.n	800d398 <_vfiprintf_r+0x1ac>
 800d332:	9b03      	ldr	r3, [sp, #12]
 800d334:	1d1a      	adds	r2, r3, #4
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	9203      	str	r2, [sp, #12]
 800d33a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d33e:	3402      	adds	r4, #2
 800d340:	9305      	str	r3, [sp, #20]
 800d342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d418 <_vfiprintf_r+0x22c>
 800d346:	7821      	ldrb	r1, [r4, #0]
 800d348:	2203      	movs	r2, #3
 800d34a:	4650      	mov	r0, sl
 800d34c:	f7f2 ff48 	bl	80001e0 <memchr>
 800d350:	b138      	cbz	r0, 800d362 <_vfiprintf_r+0x176>
 800d352:	9b04      	ldr	r3, [sp, #16]
 800d354:	eba0 000a 	sub.w	r0, r0, sl
 800d358:	2240      	movs	r2, #64	@ 0x40
 800d35a:	4082      	lsls	r2, r0
 800d35c:	4313      	orrs	r3, r2
 800d35e:	3401      	adds	r4, #1
 800d360:	9304      	str	r3, [sp, #16]
 800d362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d366:	4829      	ldr	r0, [pc, #164]	@ (800d40c <_vfiprintf_r+0x220>)
 800d368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d36c:	2206      	movs	r2, #6
 800d36e:	f7f2 ff37 	bl	80001e0 <memchr>
 800d372:	2800      	cmp	r0, #0
 800d374:	d03f      	beq.n	800d3f6 <_vfiprintf_r+0x20a>
 800d376:	4b26      	ldr	r3, [pc, #152]	@ (800d410 <_vfiprintf_r+0x224>)
 800d378:	bb1b      	cbnz	r3, 800d3c2 <_vfiprintf_r+0x1d6>
 800d37a:	9b03      	ldr	r3, [sp, #12]
 800d37c:	3307      	adds	r3, #7
 800d37e:	f023 0307 	bic.w	r3, r3, #7
 800d382:	3308      	adds	r3, #8
 800d384:	9303      	str	r3, [sp, #12]
 800d386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d388:	443b      	add	r3, r7
 800d38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d38c:	e76a      	b.n	800d264 <_vfiprintf_r+0x78>
 800d38e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d392:	460c      	mov	r4, r1
 800d394:	2001      	movs	r0, #1
 800d396:	e7a8      	b.n	800d2ea <_vfiprintf_r+0xfe>
 800d398:	2300      	movs	r3, #0
 800d39a:	3401      	adds	r4, #1
 800d39c:	9305      	str	r3, [sp, #20]
 800d39e:	4619      	mov	r1, r3
 800d3a0:	f04f 0c0a 	mov.w	ip, #10
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3aa:	3a30      	subs	r2, #48	@ 0x30
 800d3ac:	2a09      	cmp	r2, #9
 800d3ae:	d903      	bls.n	800d3b8 <_vfiprintf_r+0x1cc>
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d0c6      	beq.n	800d342 <_vfiprintf_r+0x156>
 800d3b4:	9105      	str	r1, [sp, #20]
 800d3b6:	e7c4      	b.n	800d342 <_vfiprintf_r+0x156>
 800d3b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3bc:	4604      	mov	r4, r0
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e7f0      	b.n	800d3a4 <_vfiprintf_r+0x1b8>
 800d3c2:	ab03      	add	r3, sp, #12
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	462a      	mov	r2, r5
 800d3c8:	4b12      	ldr	r3, [pc, #72]	@ (800d414 <_vfiprintf_r+0x228>)
 800d3ca:	a904      	add	r1, sp, #16
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	f7fb fcb3 	bl	8008d38 <_printf_float>
 800d3d2:	4607      	mov	r7, r0
 800d3d4:	1c78      	adds	r0, r7, #1
 800d3d6:	d1d6      	bne.n	800d386 <_vfiprintf_r+0x19a>
 800d3d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3da:	07d9      	lsls	r1, r3, #31
 800d3dc:	d405      	bmi.n	800d3ea <_vfiprintf_r+0x1fe>
 800d3de:	89ab      	ldrh	r3, [r5, #12]
 800d3e0:	059a      	lsls	r2, r3, #22
 800d3e2:	d402      	bmi.n	800d3ea <_vfiprintf_r+0x1fe>
 800d3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3e6:	f7fc fd97 	bl	8009f18 <__retarget_lock_release_recursive>
 800d3ea:	89ab      	ldrh	r3, [r5, #12]
 800d3ec:	065b      	lsls	r3, r3, #25
 800d3ee:	f53f af1f 	bmi.w	800d230 <_vfiprintf_r+0x44>
 800d3f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3f4:	e71e      	b.n	800d234 <_vfiprintf_r+0x48>
 800d3f6:	ab03      	add	r3, sp, #12
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	462a      	mov	r2, r5
 800d3fc:	4b05      	ldr	r3, [pc, #20]	@ (800d414 <_vfiprintf_r+0x228>)
 800d3fe:	a904      	add	r1, sp, #16
 800d400:	4630      	mov	r0, r6
 800d402:	f7fb ff31 	bl	8009268 <_printf_i>
 800d406:	e7e4      	b.n	800d3d2 <_vfiprintf_r+0x1e6>
 800d408:	0800db89 	.word	0x0800db89
 800d40c:	0800db93 	.word	0x0800db93
 800d410:	08008d39 	.word	0x08008d39
 800d414:	0800d1c9 	.word	0x0800d1c9
 800d418:	0800db8f 	.word	0x0800db8f

0800d41c <_raise_r>:
 800d41c:	291f      	cmp	r1, #31
 800d41e:	b538      	push	{r3, r4, r5, lr}
 800d420:	4605      	mov	r5, r0
 800d422:	460c      	mov	r4, r1
 800d424:	d904      	bls.n	800d430 <_raise_r+0x14>
 800d426:	2316      	movs	r3, #22
 800d428:	6003      	str	r3, [r0, #0]
 800d42a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d42e:	bd38      	pop	{r3, r4, r5, pc}
 800d430:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d432:	b112      	cbz	r2, 800d43a <_raise_r+0x1e>
 800d434:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d438:	b94b      	cbnz	r3, 800d44e <_raise_r+0x32>
 800d43a:	4628      	mov	r0, r5
 800d43c:	f000 f830 	bl	800d4a0 <_getpid_r>
 800d440:	4622      	mov	r2, r4
 800d442:	4601      	mov	r1, r0
 800d444:	4628      	mov	r0, r5
 800d446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d44a:	f000 b817 	b.w	800d47c <_kill_r>
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d00a      	beq.n	800d468 <_raise_r+0x4c>
 800d452:	1c59      	adds	r1, r3, #1
 800d454:	d103      	bne.n	800d45e <_raise_r+0x42>
 800d456:	2316      	movs	r3, #22
 800d458:	6003      	str	r3, [r0, #0]
 800d45a:	2001      	movs	r0, #1
 800d45c:	e7e7      	b.n	800d42e <_raise_r+0x12>
 800d45e:	2100      	movs	r1, #0
 800d460:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d464:	4620      	mov	r0, r4
 800d466:	4798      	blx	r3
 800d468:	2000      	movs	r0, #0
 800d46a:	e7e0      	b.n	800d42e <_raise_r+0x12>

0800d46c <raise>:
 800d46c:	4b02      	ldr	r3, [pc, #8]	@ (800d478 <raise+0xc>)
 800d46e:	4601      	mov	r1, r0
 800d470:	6818      	ldr	r0, [r3, #0]
 800d472:	f7ff bfd3 	b.w	800d41c <_raise_r>
 800d476:	bf00      	nop
 800d478:	2000001c 	.word	0x2000001c

0800d47c <_kill_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4d07      	ldr	r5, [pc, #28]	@ (800d49c <_kill_r+0x20>)
 800d480:	2300      	movs	r3, #0
 800d482:	4604      	mov	r4, r0
 800d484:	4608      	mov	r0, r1
 800d486:	4611      	mov	r1, r2
 800d488:	602b      	str	r3, [r5, #0]
 800d48a:	f7f4 fc1b 	bl	8001cc4 <_kill>
 800d48e:	1c43      	adds	r3, r0, #1
 800d490:	d102      	bne.n	800d498 <_kill_r+0x1c>
 800d492:	682b      	ldr	r3, [r5, #0]
 800d494:	b103      	cbz	r3, 800d498 <_kill_r+0x1c>
 800d496:	6023      	str	r3, [r4, #0]
 800d498:	bd38      	pop	{r3, r4, r5, pc}
 800d49a:	bf00      	nop
 800d49c:	200057dc 	.word	0x200057dc

0800d4a0 <_getpid_r>:
 800d4a0:	f7f4 bc08 	b.w	8001cb4 <_getpid>

0800d4a4 <fmodf>:
 800d4a4:	b508      	push	{r3, lr}
 800d4a6:	ed2d 8b02 	vpush	{d8}
 800d4aa:	eef0 8a40 	vmov.f32	s17, s0
 800d4ae:	eeb0 8a60 	vmov.f32	s16, s1
 800d4b2:	f000 f817 	bl	800d4e4 <__ieee754_fmodf>
 800d4b6:	eef4 8a48 	vcmp.f32	s17, s16
 800d4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4be:	d60c      	bvs.n	800d4da <fmodf+0x36>
 800d4c0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d4e0 <fmodf+0x3c>
 800d4c4:	eeb4 8a68 	vcmp.f32	s16, s17
 800d4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4cc:	d105      	bne.n	800d4da <fmodf+0x36>
 800d4ce:	f7fc fcf7 	bl	8009ec0 <__errno>
 800d4d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d4d6:	2321      	movs	r3, #33	@ 0x21
 800d4d8:	6003      	str	r3, [r0, #0]
 800d4da:	ecbd 8b02 	vpop	{d8}
 800d4de:	bd08      	pop	{r3, pc}
 800d4e0:	00000000 	.word	0x00000000

0800d4e4 <__ieee754_fmodf>:
 800d4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e6:	ee10 5a90 	vmov	r5, s1
 800d4ea:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800d4ee:	1e43      	subs	r3, r0, #1
 800d4f0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d4f4:	d206      	bcs.n	800d504 <__ieee754_fmodf+0x20>
 800d4f6:	ee10 3a10 	vmov	r3, s0
 800d4fa:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800d4fe:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800d502:	d304      	bcc.n	800d50e <__ieee754_fmodf+0x2a>
 800d504:	ee60 0a20 	vmul.f32	s1, s0, s1
 800d508:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800d50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d50e:	4286      	cmp	r6, r0
 800d510:	dbfc      	blt.n	800d50c <__ieee754_fmodf+0x28>
 800d512:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800d516:	d105      	bne.n	800d524 <__ieee754_fmodf+0x40>
 800d518:	4b32      	ldr	r3, [pc, #200]	@ (800d5e4 <__ieee754_fmodf+0x100>)
 800d51a:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800d51e:	ed93 0a00 	vldr	s0, [r3]
 800d522:	e7f3      	b.n	800d50c <__ieee754_fmodf+0x28>
 800d524:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d528:	d140      	bne.n	800d5ac <__ieee754_fmodf+0xc8>
 800d52a:	0232      	lsls	r2, r6, #8
 800d52c:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800d530:	2a00      	cmp	r2, #0
 800d532:	dc38      	bgt.n	800d5a6 <__ieee754_fmodf+0xc2>
 800d534:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800d538:	d13e      	bne.n	800d5b8 <__ieee754_fmodf+0xd4>
 800d53a:	0207      	lsls	r7, r0, #8
 800d53c:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800d540:	2f00      	cmp	r7, #0
 800d542:	da36      	bge.n	800d5b2 <__ieee754_fmodf+0xce>
 800d544:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800d548:	bfb9      	ittee	lt
 800d54a:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800d54e:	1a5b      	sublt	r3, r3, r1
 800d550:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800d554:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800d558:	bfb8      	it	lt
 800d55a:	fa06 f303 	lsllt.w	r3, r6, r3
 800d55e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800d562:	bfb5      	itete	lt
 800d564:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800d568:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800d56c:	1aad      	sublt	r5, r5, r2
 800d56e:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800d572:	bfb8      	it	lt
 800d574:	40a8      	lsllt	r0, r5
 800d576:	1a89      	subs	r1, r1, r2
 800d578:	1a1d      	subs	r5, r3, r0
 800d57a:	bb01      	cbnz	r1, 800d5be <__ieee754_fmodf+0xda>
 800d57c:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800d580:	bf38      	it	cc
 800d582:	462b      	movcc	r3, r5
 800d584:	2b00      	cmp	r3, #0
 800d586:	d0c7      	beq.n	800d518 <__ieee754_fmodf+0x34>
 800d588:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d58c:	db1f      	blt.n	800d5ce <__ieee754_fmodf+0xea>
 800d58e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800d592:	db1f      	blt.n	800d5d4 <__ieee754_fmodf+0xf0>
 800d594:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800d598:	327f      	adds	r2, #127	@ 0x7f
 800d59a:	4323      	orrs	r3, r4
 800d59c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d5a0:	ee00 3a10 	vmov	s0, r3
 800d5a4:	e7b2      	b.n	800d50c <__ieee754_fmodf+0x28>
 800d5a6:	3901      	subs	r1, #1
 800d5a8:	0052      	lsls	r2, r2, #1
 800d5aa:	e7c1      	b.n	800d530 <__ieee754_fmodf+0x4c>
 800d5ac:	15f1      	asrs	r1, r6, #23
 800d5ae:	397f      	subs	r1, #127	@ 0x7f
 800d5b0:	e7c0      	b.n	800d534 <__ieee754_fmodf+0x50>
 800d5b2:	3a01      	subs	r2, #1
 800d5b4:	007f      	lsls	r7, r7, #1
 800d5b6:	e7c3      	b.n	800d540 <__ieee754_fmodf+0x5c>
 800d5b8:	15c2      	asrs	r2, r0, #23
 800d5ba:	3a7f      	subs	r2, #127	@ 0x7f
 800d5bc:	e7c2      	b.n	800d544 <__ieee754_fmodf+0x60>
 800d5be:	2d00      	cmp	r5, #0
 800d5c0:	da02      	bge.n	800d5c8 <__ieee754_fmodf+0xe4>
 800d5c2:	005b      	lsls	r3, r3, #1
 800d5c4:	3901      	subs	r1, #1
 800d5c6:	e7d7      	b.n	800d578 <__ieee754_fmodf+0x94>
 800d5c8:	d0a6      	beq.n	800d518 <__ieee754_fmodf+0x34>
 800d5ca:	006b      	lsls	r3, r5, #1
 800d5cc:	e7fa      	b.n	800d5c4 <__ieee754_fmodf+0xe0>
 800d5ce:	005b      	lsls	r3, r3, #1
 800d5d0:	3a01      	subs	r2, #1
 800d5d2:	e7d9      	b.n	800d588 <__ieee754_fmodf+0xa4>
 800d5d4:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800d5d8:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800d5dc:	3282      	adds	r2, #130	@ 0x82
 800d5de:	4113      	asrs	r3, r2
 800d5e0:	4323      	orrs	r3, r4
 800d5e2:	e7dd      	b.n	800d5a0 <__ieee754_fmodf+0xbc>
 800d5e4:	0800dc40 	.word	0x0800dc40

0800d5e8 <_init>:
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ea:	bf00      	nop
 800d5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ee:	bc08      	pop	{r3}
 800d5f0:	469e      	mov	lr, r3
 800d5f2:	4770      	bx	lr

0800d5f4 <_fini>:
 800d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f6:	bf00      	nop
 800d5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5fa:	bc08      	pop	{r3}
 800d5fc:	469e      	mov	lr, r3
 800d5fe:	4770      	bx	lr
