
F411RE_RTOS_ACC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800d658  0800d658  0001d658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc98  0800dc98  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc98  0800dc98  0001dc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dca0  0800dca0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dca0  0800dca0  0001dca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dca4  0800dca4  0001dca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800dca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005614  200001d8  0800de80  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057ec  0800de80  000257ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a6f8  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039b7  00000000  00000000  0003a943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0003e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001231  00000000  00000000  0003fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001945f  00000000  00000000  00040c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e00  00000000  00000000  0005a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cf92  00000000  00000000  00072ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007948  00000000  00000000  0010fe8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001177d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d640 	.word	0x0800d640

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800d640 	.word	0x0800d640

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <ADXL355_Init>:

/**
   @brief Initialization the accelerometer sensor
   @return none
**/
void ADXL355_Init(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
//   DioPulPin(DATARDYACC_PORT, DATARDYACC_PIN_NUMBER, 0);         /* Disable the internal pull up on INT2ACC pin */
//   DioOenPin(DATARDYACC_PORT, DATARDYACC_PIN_NUMBER, 0);         /* Set INT2ACC pin as input */

	/* Quick verification test for boards */

   uint32_t volatile ui32test = ADXL355_SPI_Read(DEVID_AD);                  /* Read the ID register */
 8001006:	2000      	movs	r0, #0
 8001008:	f000 faf6 	bl	80015f8 <ADXL355_SPI_Read>
 800100c:	4603      	mov	r3, r0
 800100e:	60fb      	str	r3, [r7, #12]
   uint32_t volatile ui32test2 = ADXL355_SPI_Read(DEVID_MST);                  /* Read the ID register */
 8001010:	2001      	movs	r0, #1
 8001012:	f000 faf1 	bl	80015f8 <ADXL355_SPI_Read>
 8001016:	4603      	mov	r3, r0
 8001018:	60bb      	str	r3, [r7, #8]
   uint32_t volatile ui32test3 = ADXL355_SPI_Read(PARTID);                  /* Read the ID register */
 800101a:	2002      	movs	r0, #2
 800101c:	f000 faec 	bl	80015f8 <ADXL355_SPI_Read>
 8001020:	4603      	mov	r3, r0
 8001022:	607b      	str	r3, [r7, #4]
   uint32_t volatile ui32test4 = ADXL355_SPI_Read(REVID);                 /* Read the ID register */
 8001024:	2003      	movs	r0, #3
 8001026:	f000 fae7 	bl	80015f8 <ADXL355_SPI_Read>
 800102a:	4603      	mov	r3, r0
 800102c:	603b      	str	r3, [r7, #0]

   if ((ui32test == 0xAD) && (ui32test2 == 0x1D) && (ui32test3 == 0xED) && (ui32test4 == 0x01)) {
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2bad      	cmp	r3, #173	; 0xad
 8001032:	d111      	bne.n	8001058 <ADXL355_Init+0x58>
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b1d      	cmp	r3, #29
 8001038:	d10e      	bne.n	8001058 <ADXL355_Init+0x58>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2bed      	cmp	r3, #237	; 0xed
 800103e:	d10b      	bne.n	8001058 <ADXL355_Init+0x58>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d108      	bne.n	8001058 <ADXL355_Init+0x58>
	   kappa("\n\rReset and initialized.\n\r");
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <ADXL355_Init+0x68>)
 8001048:	f000 f850 	bl	80010ec <kappa>
	   ADXL355_SPI_Write(0x2F, 0x52, 1); //reset
 800104c:	2201      	movs	r2, #1
 800104e:	2152      	movs	r1, #82	; 0x52
 8001050:	202f      	movs	r0, #47	; 0x2f
 8001052:	f000 fb0d 	bl	8001670 <ADXL355_SPI_Write>
   if ((ui32test == 0xAD) && (ui32test2 == 0x1D) && (ui32test3 == 0xED) && (ui32test4 == 0x01)) {
 8001056:	e003      	b.n	8001060 <ADXL355_Init+0x60>
   }
   else
	   kappa("Error initializing\n\r");
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <ADXL355_Init+0x6c>)
 800105a:	f000 f847 	bl	80010ec <kappa>
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	0800d658 	.word	0x0800d658
 800106c:	0800d674 	.word	0x0800d674

08001070 <ADXL355_Start_Sensor>:

/**
   @brief Turns on accelerometer measurement mode.
   @return none
**/
void ADXL355_Start_Sensor(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
   uint8_t ui8temp;

   ui8temp = (uint8_t)ADXL355_SPI_Read(POWER_CTL);       /* Read POWER_CTL register, before modifying it */
 8001076:	202d      	movs	r0, #45	; 0x2d
 8001078:	f000 fabe 	bl	80015f8 <ADXL355_SPI_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]

   ui8temp = ui8temp & 0xFE;                                          /* Set measurement bit in POWER_CTL register */
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	71fb      	strb	r3, [r7, #7]

   ADXL355_SPI_Write(POWER_CTL, ui8temp, SPI_WRITE_ONE_REG);                    /* Write the new value to POWER_CTL register */
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	202d      	movs	r0, #45	; 0x2d
 8001090:	f000 faee 	bl	8001670 <ADXL355_SPI_Write>

   kappa("\n\rSensors started.\n\r");
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <ADXL355_Start_Sensor+0x34>)
 8001096:	f000 f829 	bl	80010ec <kappa>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0800d68c 	.word	0x0800d68c

080010a8 <ADXL355_Acceleration_Data_Conversion>:
   @brief Convert the two's complement data in X,Y,Z registers to signed integers
   @param ui32SensorData - raw data from register
   @return int32_t - signed integer data
**/
int32_t ADXL355_Acceleration_Data_Conversion (uint32_t ui32SensorData)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
   int32_t volatile i32Conversion = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]

   ui32SensorData = ( ui32SensorData >> 4);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	607b      	str	r3, [r7, #4]

   ui32SensorData = (ui32SensorData & 0x000FFFFF);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010c0:	607b      	str	r3, [r7, #4]

   if((ui32SensorData & 0x00080000)  == 0x00080000){ //checking if most sig bit is set
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <ADXL355_Acceleration_Data_Conversion+0x32>
         i32Conversion = (ui32SensorData | 0xFFF00000); //if its set, we try to make it negative
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80010d2:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e001      	b.n	80010de <ADXL355_Acceleration_Data_Conversion+0x36>
   }
   else{
         i32Conversion = ui32SensorData;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]
   }

   return i32Conversion;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <kappa>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void kappa(const char *fmt, ...)
{
 80010ec:	b40f      	push	{r0, r1, r2, r3}
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001102:	480b      	ldr	r0, [pc, #44]	; (8001130 <kappa+0x44>)
 8001104:	f008 fd5c 	bl	8009bc0 <vsniprintf>
	va_end(args);
	int len = strlen(buffer);
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <kappa+0x44>)
 800110a:	f7ff f8b9 	bl	8000280 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	b29a      	uxth	r2, r3
 8001116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111a:	4905      	ldr	r1, [pc, #20]	; (8001130 <kappa+0x44>)
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <kappa+0x48>)
 800111e:	f003 fee2 	bl	8004ee6 <HAL_UART_Transmit>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800112c:	b004      	add	sp, #16
 800112e:	4770      	bx	lr
 8001130:	20000bb0 	.word	0x20000bb0
 8001134:	20000354 	.word	0x20000354

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113c:	f000 febe 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001140:	f000 f850 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001144:	f000 f962 	bl	800140c <MX_GPIO_Init>
  MX_DMA_Init();
 8001148:	f000 f938 	bl	80013bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800114c:	f000 f90c 	bl	8001368 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001150:	f000 f8b0 	bl	80012b4 <MX_SPI2_Init>
  MX_TIM10_Init();
 8001154:	f000 f8e4 	bl	8001320 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001158:	f004 fa6e 	bl	8005638 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sem_SPI_DMA */
  sem_SPI_DMAHandle = osSemaphoreNew(1, 0, &sem_SPI_DMA_attributes);
 800115c:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <main+0x7c>)
 800115e:	2100      	movs	r1, #0
 8001160:	2001      	movs	r0, #1
 8001162:	f004 fb45 	bl	80057f0 <osSemaphoreNew>
 8001166:	4603      	mov	r3, r0
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <main+0x80>)
 800116a:	6013      	str	r3, [r2, #0]

  /* creation of sem_processing */
  sem_processingHandle = osSemaphoreNew(1, 0, &sem_processing_attributes);
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <main+0x84>)
 800116e:	2100      	movs	r1, #0
 8001170:	2001      	movs	r0, #1
 8001172:	f004 fb3d 	bl	80057f0 <osSemaphoreNew>
 8001176:	4603      	mov	r3, r0
 8001178:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <main+0x88>)
 800117a:	6013      	str	r3, [r2, #0]

  /* creation of sem_sampling */
  sem_samplingHandle = osSemaphoreNew(1, 0, &sem_sampling_attributes);
 800117c:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <main+0x8c>)
 800117e:	2100      	movs	r1, #0
 8001180:	2001      	movs	r0, #1
 8001182:	f004 fb35 	bl	80057f0 <osSemaphoreNew>
 8001186:	4603      	mov	r3, r0
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <main+0x90>)
 800118a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(taskMain, NULL, &mainTask_attributes);
 800118c:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <main+0x94>)
 800118e:	2100      	movs	r1, #0
 8001190:	480f      	ldr	r0, [pc, #60]	; (80011d0 <main+0x98>)
 8001192:	f004 fa9b 	bl	80056cc <osThreadNew>
 8001196:	4603      	mov	r3, r0
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <main+0x9c>)
 800119a:	6013      	str	r3, [r2, #0]

  /* creation of sampling */
  samplingHandle = osThreadNew(samplingTask, NULL, &sampling_attributes);
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <main+0xa0>)
 800119e:	2100      	movs	r1, #0
 80011a0:	480e      	ldr	r0, [pc, #56]	; (80011dc <main+0xa4>)
 80011a2:	f004 fa93 	bl	80056cc <osThreadNew>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <main+0xa8>)
 80011aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011ac:	f004 fa68 	bl	8005680 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <main+0x78>
 80011b2:	bf00      	nop
 80011b4:	0800d818 	.word	0x0800d818
 80011b8:	200003a0 	.word	0x200003a0
 80011bc:	0800d828 	.word	0x0800d828
 80011c0:	200003a4 	.word	0x200003a4
 80011c4:	0800d838 	.word	0x0800d838
 80011c8:	200003a8 	.word	0x200003a8
 80011cc:	0800d7d0 	.word	0x0800d7d0
 80011d0:	08001811 	.word	0x08001811
 80011d4:	20000398 	.word	0x20000398
 80011d8:	0800d7f4 	.word	0x0800d7f4
 80011dc:	080018fd 	.word	0x080018fd
 80011e0:	2000039c 	.word	0x2000039c

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	; 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	2230      	movs	r2, #48	; 0x30
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f008 fd88 	bl	8009d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <SystemClock_Config+0xc8>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	4a26      	ldr	r2, [pc, #152]	; (80012ac <SystemClock_Config+0xc8>)
 8001212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001216:	6413      	str	r3, [r2, #64]	; 0x40
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <SystemClock_Config+0xc8>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <SystemClock_Config+0xcc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <SystemClock_Config+0xcc>)
 800122e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <SystemClock_Config+0xcc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001240:	2301      	movs	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001244:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124a:	2302      	movs	r3, #2
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001254:	2304      	movs	r3, #4
 8001256:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001258:	233c      	movs	r3, #60	; 0x3c
 800125a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001260:	2304      	movs	r3, #4
 8001262:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fd1d 	bl	8002ca8 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001274:	f000 fb68 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f001 ff80 	bl	8003198 <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800129e:	f000 fb53 	bl	8001948 <Error_Handler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	3750      	adds	r7, #80	; 0x50
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_SPI2_Init+0x64>)
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <MX_SPI2_Init+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_SPI2_Init+0x64>)
 80012c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_SPI2_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_SPI2_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_SPI2_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_SPI2_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_SPI2_Init+0x64>)
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_SPI2_Init+0x64>)
 80012e8:	2230      	movs	r2, #48	; 0x30
 80012ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_SPI2_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_SPI2_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_SPI2_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_SPI2_Init+0x64>)
 8001300:	220a      	movs	r2, #10
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_SPI2_Init+0x64>)
 8001306:	f002 f967 	bl	80035d8 <HAL_SPI_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001310:	f000 fb1a 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200001f4 	.word	0x200001f4
 800131c:	40003800 	.word	0x40003800

08001320 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_TIM10_Init+0x40>)
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <MX_TIM10_Init+0x44>)
 8001328:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MX_TIM10_Init+0x40>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_TIM10_Init+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 58593;
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_TIM10_Init+0x40>)
 8001338:	f24e 42e1 	movw	r2, #58593	; 0xe4e1
 800133c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_TIM10_Init+0x40>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_TIM10_Init+0x40>)
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_TIM10_Init+0x40>)
 800134c:	f003 fad8 	bl	8004900 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001356:	f000 faf7 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000030c 	.word	0x2000030c
 8001364:	40014400 	.word	0x40014400

08001368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART2_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f003 fd54 	bl	8004e4c <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 facd 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000354 	.word	0x20000354
 80013b8:	40004400 	.word	0x40004400

080013bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_DMA_Init+0x4c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <MX_DMA_Init+0x4c>)
 80013cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <MX_DMA_Init+0x4c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2105      	movs	r1, #5
 80013e2:	200e      	movs	r0, #14
 80013e4:	f000 fedb 	bl	800219e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80013e8:	200e      	movs	r0, #14
 80013ea:	f000 fef4 	bl	80021d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	200f      	movs	r0, #15
 80013f4:	f000 fed3 	bl	800219e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80013f8:	200f      	movs	r0, #15
 80013fa:	f000 feec 	bl	80021d6 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <MX_GPIO_Init+0x108>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a3a      	ldr	r2, [pc, #232]	; (8001514 <MX_GPIO_Init+0x108>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b38      	ldr	r3, [pc, #224]	; (8001514 <MX_GPIO_Init+0x108>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <MX_GPIO_Init+0x108>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a33      	ldr	r2, [pc, #204]	; (8001514 <MX_GPIO_Init+0x108>)
 8001448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <MX_GPIO_Init+0x108>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <MX_GPIO_Init+0x108>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a2c      	ldr	r2, [pc, #176]	; (8001514 <MX_GPIO_Init+0x108>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <MX_GPIO_Init+0x108>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <MX_GPIO_Init+0x108>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a25      	ldr	r2, [pc, #148]	; (8001514 <MX_GPIO_Init+0x108>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <MX_GPIO_Init+0x108>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2101      	movs	r1, #1
 8001496:	4820      	ldr	r0, [pc, #128]	; (8001518 <MX_GPIO_Init+0x10c>)
 8001498:	f001 fbba 	bl	8002c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2120      	movs	r1, #32
 80014a0:	481e      	ldr	r0, [pc, #120]	; (800151c <MX_GPIO_Init+0x110>)
 80014a2:	f001 fbb5 	bl	8002c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4816      	ldr	r0, [pc, #88]	; (8001518 <MX_GPIO_Init+0x10c>)
 80014be:	f001 fa23 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80014c2:	2301      	movs	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	480f      	ldr	r0, [pc, #60]	; (8001518 <MX_GPIO_Init+0x10c>)
 80014da:	f001 fa15 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014de:	2320      	movs	r3, #32
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4809      	ldr	r0, [pc, #36]	; (800151c <MX_GPIO_Init+0x110>)
 80014f6:	f001 fa07 	bl	8002908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2105      	movs	r1, #5
 80014fe:	2028      	movs	r0, #40	; 0x28
 8001500:	f000 fe4d 	bl	800219e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001504:	2028      	movs	r0, #40	; 0x28
 8001506:	f000 fe66 	bl	80021d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40020800 	.word	0x40020800
 800151c:	40020000 	.word	0x40020000

08001520 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(sem_SPI_DMAHandle);
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <HAL_SPI_TxCpltCallback+0x1c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f004 fa3b 	bl	80059a8 <osSemaphoreRelease>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200003a0 	.word	0x200003a0

08001540 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(sem_SPI_DMAHandle);
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <HAL_SPI_RxCpltCallback+0x1c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fa2b 	bl	80059a8 <osSemaphoreRelease>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200003a0 	.word	0x200003a0

08001560 <ADXL355_SPI_Read_DMA>:

uint32_t ADXL355_SPI_Read_DMA(uint8_t ui8address) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;
	uint8_t recieveData;
	uint8_t txData;

	txData = (ui8address << 1) | 1 ;
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	b25b      	sxtb	r3, r3
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	b25b      	sxtb	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); //ON
 800157a:	2200      	movs	r2, #0
 800157c:	2101      	movs	r1, #1
 800157e:	481a      	ldr	r0, [pc, #104]	; (80015e8 <ADXL355_SPI_Read_DMA+0x88>)
 8001580:	f001 fb46 	bl	8002c10 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit_DMA(&hspi2, &txData, 1);
 8001584:	f107 030d 	add.w	r3, r7, #13
 8001588:	2201      	movs	r2, #1
 800158a:	4619      	mov	r1, r3
 800158c:	4817      	ldr	r0, [pc, #92]	; (80015ec <ADXL355_SPI_Read_DMA+0x8c>)
 800158e:	f002 fc9b 	bl	8003ec8 <HAL_SPI_Transmit_DMA>
 8001592:	4603      	mov	r3, r0
 8001594:	73fb      	strb	r3, [r7, #15]
	osSemaphoreAcquire(sem_SPI_DMAHandle, osWaitForever);
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <ADXL355_SPI_Read_DMA+0x90>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 f9b0 	bl	8005904 <osSemaphoreAcquire>

	status = HAL_SPI_Receive_DMA(&hspi2, &recieveData, 1);
 80015a4:	f107 030e 	add.w	r3, r7, #14
 80015a8:	2201      	movs	r2, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	480f      	ldr	r0, [pc, #60]	; (80015ec <ADXL355_SPI_Read_DMA+0x8c>)
 80015ae:	f002 fd41 	bl	8004034 <HAL_SPI_Receive_DMA>
 80015b2:	4603      	mov	r3, r0
 80015b4:	73fb      	strb	r3, [r7, #15]
	osSemaphoreAcquire(sem_SPI_DMAHandle, osWaitForever);
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <ADXL355_SPI_Read_DMA+0x90>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015be:	4618      	mov	r0, r3
 80015c0:	f004 f9a0 	bl	8005904 <osSemaphoreAcquire>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //OFF
 80015c4:	2201      	movs	r2, #1
 80015c6:	2101      	movs	r1, #1
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <ADXL355_SPI_Read_DMA+0x88>)
 80015ca:	f001 fb21 	bl	8002c10 <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <ADXL355_SPI_Read_DMA+0x78>
		return recieveData;
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	e003      	b.n	80015e0 <ADXL355_SPI_Read_DMA+0x80>
	else
		printf("\r\nError Reading: Invalid HAL_STATUS\r\n");
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <ADXL355_SPI_Read_DMA+0x94>)
 80015da:	f008 fa5b 	bl	8009a94 <puts>

	return 255;
 80015de:	23ff      	movs	r3, #255	; 0xff
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40020800 	.word	0x40020800
 80015ec:	200001f4 	.word	0x200001f4
 80015f0:	200003a0 	.word	0x200003a0
 80015f4:	0800d734 	.word	0x0800d734

080015f8 <ADXL355_SPI_Read>:

uint32_t ADXL355_SPI_Read(uint8_t ui8address) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;
	uint8_t recieveData;
	uint8_t txData;

	txData = (ui8address << 1) | 1 ;
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	b25b      	sxtb	r3, r3
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	b25b      	sxtb	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); //ON
 8001612:	2200      	movs	r2, #0
 8001614:	2101      	movs	r1, #1
 8001616:	4813      	ldr	r0, [pc, #76]	; (8001664 <ADXL355_SPI_Read+0x6c>)
 8001618:	f001 fafa 	bl	8002c10 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit (&hspi2, &txData, 1, 100);
 800161c:	f107 010d 	add.w	r1, r7, #13
 8001620:	2364      	movs	r3, #100	; 0x64
 8001622:	2201      	movs	r2, #1
 8001624:	4810      	ldr	r0, [pc, #64]	; (8001668 <ADXL355_SPI_Read+0x70>)
 8001626:	f002 f860 	bl	80036ea <HAL_SPI_Transmit>
 800162a:	4603      	mov	r3, r0
 800162c:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Receive (&hspi2, &recieveData, 1, 100);
 800162e:	f107 010e 	add.w	r1, r7, #14
 8001632:	2364      	movs	r3, #100	; 0x64
 8001634:	2201      	movs	r2, #1
 8001636:	480c      	ldr	r0, [pc, #48]	; (8001668 <ADXL355_SPI_Read+0x70>)
 8001638:	f002 f993 	bl	8003962 <HAL_SPI_Receive>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //OFF
 8001640:	2201      	movs	r2, #1
 8001642:	2101      	movs	r1, #1
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <ADXL355_SPI_Read+0x6c>)
 8001646:	f001 fae3 	bl	8002c10 <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <ADXL355_SPI_Read+0x5c>
		return recieveData;
 8001650:	7bbb      	ldrb	r3, [r7, #14]
 8001652:	e003      	b.n	800165c <ADXL355_SPI_Read+0x64>
	else
		printf("\r\nError Reading: Invalid HAL_STATUS\r\n");
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <ADXL355_SPI_Read+0x74>)
 8001656:	f008 fa1d 	bl	8009a94 <puts>

	return 255;
 800165a:	23ff      	movs	r3, #255	; 0xff
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020800 	.word	0x40020800
 8001668:	200001f4 	.word	0x200001f4
 800166c:	0800d734 	.word	0x0800d734

08001670 <ADXL355_SPI_Write>:
 * @param : enMode - regarding how many bytes of data you will write, i chose to not really use this and hardcoded a
 *                   1 for '1 byte' in every write I ever used
 *
 * This function is a callback for the accelerometer write
 */
void ADXL355_SPI_Write(uint8_t ui8address, uint8_t ui8Data, enWriteData enMode) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	460b      	mov	r3, r1
 800167c:	71bb      	strb	r3, [r7, #6]
 800167e:	4613      	mov	r3, r2
 8001680:	717b      	strb	r3, [r7, #5]

	HAL_StatusTypeDef status;
	uint8_t address;

	address = ((ui8address << 1) & 0xFE);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); //ON
 800168a:	2200      	movs	r2, #0
 800168c:	2101      	movs	r1, #1
 800168e:	4811      	ldr	r0, [pc, #68]	; (80016d4 <ADXL355_SPI_Write+0x64>)
 8001690:	f001 fabe 	bl	8002c10 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit (&hspi2, &address, 1, 100);
 8001694:	f107 010e 	add.w	r1, r7, #14
 8001698:	2364      	movs	r3, #100	; 0x64
 800169a:	2201      	movs	r2, #1
 800169c:	480e      	ldr	r0, [pc, #56]	; (80016d8 <ADXL355_SPI_Write+0x68>)
 800169e:	f002 f824 	bl	80036ea <HAL_SPI_Transmit>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit (&hspi2, &ui8Data, 1, 100);
 80016a6:	1db9      	adds	r1, r7, #6
 80016a8:	2364      	movs	r3, #100	; 0x64
 80016aa:	2201      	movs	r2, #1
 80016ac:	480a      	ldr	r0, [pc, #40]	; (80016d8 <ADXL355_SPI_Write+0x68>)
 80016ae:	f002 f81c 	bl	80036ea <HAL_SPI_Transmit>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //OFF
 80016b6:	2201      	movs	r2, #1
 80016b8:	2101      	movs	r1, #1
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <ADXL355_SPI_Write+0x64>)
 80016bc:	f001 faa8 	bl	8002c10 <HAL_GPIO_WritePin>

	if (status != HAL_OK)
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <ADXL355_SPI_Write+0x5c>
		printf("\r\nError writing: Invalid HAL STATUS\r\n");
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <ADXL355_SPI_Write+0x6c>)
 80016c8:	f008 f9e4 	bl	8009a94 <puts>
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40020800 	.word	0x40020800
 80016d8:	200001f4 	.word	0x200001f4
 80016dc:	0800d75c 	.word	0x0800d75c

080016e0 <ADXL355_SPI_READ_ACC>:

int32_t ADXL355_SPI_READ_ACC(uint8_t axis)	//Axis = 0x00 - x, 0x01 - y, 0x02 - z
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint32_t acc_val_raw3 = 0, acc_val_raw2 = 0, acc_val_raw1 = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
	int32_t acc_val = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]

	switch(axis)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d020      	beq.n	8001742 <ADXL355_SPI_READ_ACC+0x62>
 8001700:	2b02      	cmp	r3, #2
 8001702:	dc2b      	bgt.n	800175c <ADXL355_SPI_READ_ACC+0x7c>
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <ADXL355_SPI_READ_ACC+0x2e>
 8001708:	2b01      	cmp	r3, #1
 800170a:	d00d      	beq.n	8001728 <ADXL355_SPI_READ_ACC+0x48>
 800170c:	e026      	b.n	800175c <ADXL355_SPI_READ_ACC+0x7c>
	{
		case 0x00:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(XDATA3);
 800170e:	2008      	movs	r0, #8
 8001710:	f7ff ff26 	bl	8001560 <ADXL355_SPI_Read_DMA>
 8001714:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(XDATA2);
 8001716:	2009      	movs	r0, #9
 8001718:	f7ff ff22 	bl	8001560 <ADXL355_SPI_Read_DMA>
 800171c:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(XDATA1);
 800171e:	200a      	movs	r0, #10
 8001720:	f7ff ff1e 	bl	8001560 <ADXL355_SPI_Read_DMA>
 8001724:	60f8      	str	r0, [r7, #12]
		break;
 8001726:	e019      	b.n	800175c <ADXL355_SPI_READ_ACC+0x7c>

		case 0x01:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(YDATA3);
 8001728:	200b      	movs	r0, #11
 800172a:	f7ff ff19 	bl	8001560 <ADXL355_SPI_Read_DMA>
 800172e:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(YDATA2);
 8001730:	200c      	movs	r0, #12
 8001732:	f7ff ff15 	bl	8001560 <ADXL355_SPI_Read_DMA>
 8001736:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(YDATA1);
 8001738:	200d      	movs	r0, #13
 800173a:	f7ff ff11 	bl	8001560 <ADXL355_SPI_Read_DMA>
 800173e:	60f8      	str	r0, [r7, #12]
		break;
 8001740:	e00c      	b.n	800175c <ADXL355_SPI_READ_ACC+0x7c>

		case 0x02:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(ZDATA3);
 8001742:	200e      	movs	r0, #14
 8001744:	f7ff ff0c 	bl	8001560 <ADXL355_SPI_Read_DMA>
 8001748:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(ZDATA2);
 800174a:	200f      	movs	r0, #15
 800174c:	f7ff ff08 	bl	8001560 <ADXL355_SPI_Read_DMA>
 8001750:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(ZDATA1);
 8001752:	2010      	movs	r0, #16
 8001754:	f7ff ff04 	bl	8001560 <ADXL355_SPI_Read_DMA>
 8001758:	60f8      	str	r0, [r7, #12]

			/*acc_val_raw3 = ADXL355_SPI_Read(ZDATA3);
			acc_val_raw2 = ADXL355_SPI_Read(ZDATA2);
			acc_val_raw1 = ADXL355_SPI_Read(ZDATA1);*/
		break;
 800175a:	bf00      	nop
	}

	acc_val = ADXL355_Acceleration_Data_Conversion(
							((acc_val_raw3<<16) & 0x00FF0000) |
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
									((acc_val_raw2<<8) & 0x0000FF00) |
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b29b      	uxth	r3, r3
							((acc_val_raw3<<16) & 0x00FF0000) |
 800176a:	431a      	orrs	r2, r3
											(acc_val_raw1 & 0x000000FF));
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	b2db      	uxtb	r3, r3
	acc_val = ADXL355_Acceleration_Data_Conversion(
 8001770:	4313      	orrs	r3, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fc98 	bl	80010a8 <ADXL355_Acceleration_Data_Conversion>
 8001778:	60b8      	str	r0, [r7, #8]
	return acc_val;
 800177a:	68bb      	ldr	r3, [r7, #8]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001794:	d10b      	bne.n	80017ae <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001796:	2028      	movs	r0, #40	; 0x28
 8001798:	f000 fd2b 	bl	80021f2 <HAL_NVIC_DisableIRQ>
		data_ctr = 0;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_GPIO_EXTI_Callback+0x34>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]

		HAL_TIM_Base_Start_IT(&htim10);
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <HAL_GPIO_EXTI_Callback+0x38>)
 80017a4:	f003 f8fc 	bl	80049a0 <HAL_TIM_Base_Start_IT>
		kappa("Iniciado\r\n");
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80017aa:	f7ff fc9f 	bl	80010ec <kappa>
	}
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200003ac 	.word	0x200003ac
 80017bc:	2000030c 	.word	0x2000030c
 80017c0:	0800d784 	.word	0x0800d784

080017c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	//kappa("Timer\r\n");
	if(data_ctr < data_len)
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d4:	d205      	bcs.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		osSemaphoreRelease(sem_samplingHandle);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 f8e4 	bl	80059a8 <osSemaphoreRelease>
	}else
	{
		HAL_TIM_Base_Stop_IT(&htim10);
		osSemaphoreRelease(sem_processingHandle);
	}
}
 80017e0:	e007      	b.n	80017f2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_Base_Stop_IT(&htim10);
 80017e2:	4808      	ldr	r0, [pc, #32]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017e4:	f003 f93e 	bl	8004a64 <HAL_TIM_Base_Stop_IT>
		osSemaphoreRelease(sem_processingHandle);
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 f8db 	bl	80059a8 <osSemaphoreRelease>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200003ac 	.word	0x200003ac
 8001800:	200003a8 	.word	0x200003a8
 8001804:	2000030c 	.word	0x2000030c
 8001808:	200003a4 	.word	0x200003a4
 800180c:	00000000 	.word	0x00000000

08001810 <taskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_taskMain */
void taskMain(void *argument)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	ed2d 8b02 	vpush	{d8}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int32_t acc_val;
	float acc_val_flt;
	vTaskDelay(1000);
 800181c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001820:	f005 fbb4 	bl	8006f8c <vTaskDelay>
	kappa("Program started!\r\n");
 8001824:	482e      	ldr	r0, [pc, #184]	; (80018e0 <taskMain+0xd0>)
 8001826:	f7ff fc61 	bl	80010ec <kappa>
	ADXL355_Init();
 800182a:	f7ff fbe9 	bl	8001000 <ADXL355_Init>
	vTaskDelay(100);
 800182e:	2064      	movs	r0, #100	; 0x64
 8001830:	f005 fbac 	bl	8006f8c <vTaskDelay>
	ADXL355_Start_Sensor();
 8001834:	f7ff fc1c 	bl	8001070 <ADXL355_Start_Sensor>
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(sem_processingHandle, osWaitForever);
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <taskMain+0xd4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001840:	4618      	mov	r0, r3
 8001842:	f004 f85f 	bl	8005904 <osSemaphoreAcquire>
		for(int ii=0;ii<data_len;ii++)
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e033      	b.n	80018b4 <taskMain+0xa4>
		{
			acc_val_flt = data_array[ii] / 26214.4;
 800184c:	4a26      	ldr	r2, [pc, #152]	; (80018e8 <taskMain+0xd8>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe6d 	bl	8000534 <__aeabi_i2d>
 800185a:	a31f      	add	r3, pc, #124	; (adr r3, 80018d8 <taskMain+0xc8>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe fffc 	bl	800085c <__aeabi_ddiv>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f9c4 	bl	8000bf8 <__aeabi_d2f>
 8001870:	4603      	mov	r3, r0
 8001872:	60bb      	str	r3, [r7, #8]
			kappa("%d.%d\r\n", (int) acc_val_flt, (int) (fmodf(fabs(acc_val_flt), 1.0)*1000));
 8001874:	edd7 7a02 	vldr	s15, [r7, #8]
 8001878:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 800187c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001880:	eef0 7ae7 	vabs.f32	s15, s15
 8001884:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	f00b fe36 	bl	800d4fc <fmodf>
 8001890:	eef0 7a40 	vmov.f32	s15, s0
 8001894:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80018ec <taskMain+0xdc>
 8001898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a0:	ee17 2a90 	vmov	r2, s15
 80018a4:	ee18 1a10 	vmov	r1, s16
 80018a8:	4811      	ldr	r0, [pc, #68]	; (80018f0 <taskMain+0xe0>)
 80018aa:	f7ff fc1f 	bl	80010ec <kappa>
		for(int ii=0;ii<data_len;ii++)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ba:	dbc7      	blt.n	800184c <taskMain+0x3c>
		}
		kappa("\r\nDone!\r\n");
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <taskMain+0xe4>)
 80018be:	f7ff fc15 	bl	80010ec <kappa>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <taskMain+0xe8>)
 80018c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c8:	615a      	str	r2, [r3, #20]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018ca:	2028      	movs	r0, #40	; 0x28
 80018cc:	f000 fc83 	bl	80021d6 <HAL_NVIC_EnableIRQ>
		osSemaphoreAcquire(sem_processingHandle, osWaitForever);
 80018d0:	e7b2      	b.n	8001838 <taskMain+0x28>
 80018d2:	bf00      	nop
 80018d4:	f3af 8000 	nop.w
 80018d8:	9999999a 	.word	0x9999999a
 80018dc:	40d99999 	.word	0x40d99999
 80018e0:	0800d790 	.word	0x0800d790
 80018e4:	200003a4 	.word	0x200003a4
 80018e8:	200003b0 	.word	0x200003b0
 80018ec:	447a0000 	.word	0x447a0000
 80018f0:	0800d7a4 	.word	0x0800d7a4
 80018f4:	0800d7ac 	.word	0x0800d7ac
 80018f8:	40013c00 	.word	0x40013c00

080018fc <samplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_samplingTask */
void samplingTask(void *argument)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN samplingTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(sem_samplingHandle, osWaitForever);
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <samplingTask+0x3c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800190c:	4618      	mov	r0, r3
 800190e:	f003 fff9 	bl	8005904 <osSemaphoreAcquire>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001912:	2120      	movs	r1, #32
 8001914:	4809      	ldr	r0, [pc, #36]	; (800193c <samplingTask+0x40>)
 8001916:	f001 f994 	bl	8002c42 <HAL_GPIO_TogglePin>
	  data_array[data_ctr] = ADXL355_SPI_READ_ACC(2);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <samplingTask+0x44>)
 800191c:	681c      	ldr	r4, [r3, #0]
 800191e:	2002      	movs	r0, #2
 8001920:	f7ff fede 	bl	80016e0 <ADXL355_SPI_READ_ACC>
 8001924:	4603      	mov	r3, r0
 8001926:	4a07      	ldr	r2, [pc, #28]	; (8001944 <samplingTask+0x48>)
 8001928:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  data_ctr++;
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <samplingTask+0x44>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	4a03      	ldr	r2, [pc, #12]	; (8001940 <samplingTask+0x44>)
 8001934:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(sem_samplingHandle, osWaitForever);
 8001936:	e7e5      	b.n	8001904 <samplingTask+0x8>
 8001938:	200003a8 	.word	0x200003a8
 800193c:	40020000 	.word	0x40020000
 8001940:	200003ac 	.word	0x200003ac
 8001944:	200003b0 	.word	0x200003b0

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
	...

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_MspInit+0x54>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <HAL_MspInit+0x54>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_MspInit+0x54>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_MspInit+0x54>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_MspInit+0x54>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_MspInit+0x54>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	210f      	movs	r1, #15
 8001996:	f06f 0001 	mvn.w	r0, #1
 800199a:	f000 fc00 	bl	800219e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a56      	ldr	r2, [pc, #344]	; (8001b24 <HAL_SPI_MspInit+0x178>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	f040 80a5 	bne.w	8001b1a <HAL_SPI_MspInit+0x16e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <HAL_SPI_MspInit+0x17c>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	4a53      	ldr	r2, [pc, #332]	; (8001b28 <HAL_SPI_MspInit+0x17c>)
 80019da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019de:	6413      	str	r3, [r2, #64]	; 0x40
 80019e0:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <HAL_SPI_MspInit+0x17c>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <HAL_SPI_MspInit+0x17c>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a4c      	ldr	r2, [pc, #304]	; (8001b28 <HAL_SPI_MspInit+0x17c>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6313      	str	r3, [r2, #48]	; 0x30
 80019fc:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_SPI_MspInit+0x17c>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	4b46      	ldr	r3, [pc, #280]	; (8001b28 <HAL_SPI_MspInit+0x17c>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	4a45      	ldr	r2, [pc, #276]	; (8001b28 <HAL_SPI_MspInit+0x17c>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	6313      	str	r3, [r2, #48]	; 0x30
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <HAL_SPI_MspInit+0x17c>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a24:	230c      	movs	r3, #12
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a34:	2305      	movs	r3, #5
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	483b      	ldr	r0, [pc, #236]	; (8001b2c <HAL_SPI_MspInit+0x180>)
 8001a40:	f000 ff62 	bl	8002908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a56:	2305      	movs	r3, #5
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4833      	ldr	r0, [pc, #204]	; (8001b30 <HAL_SPI_MspInit+0x184>)
 8001a62:	f000 ff51 	bl	8002908 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001a68:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <HAL_SPI_MspInit+0x18c>)
 8001a6a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001a6c:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a84:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8c:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a98:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001aa4:	4823      	ldr	r0, [pc, #140]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001aa6:	f000 fbbf 	bl	8002228 <HAL_DMA_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001ab0:	f7ff ff4a 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001ab8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aba:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_SPI_MspInit+0x188>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <HAL_SPI_MspInit+0x194>)
 8001ac4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ade:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001afe:	480f      	ldr	r0, [pc, #60]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001b00:	f000 fb92 	bl	8002228 <HAL_DMA_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8001b0a:	f7ff ff1d 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001b12:	649a      	str	r2, [r3, #72]	; 0x48
 8001b14:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_SPI_MspInit+0x190>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40003800 	.word	0x40003800
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020400 	.word	0x40020400
 8001b34:	2000024c 	.word	0x2000024c
 8001b38:	40026058 	.word	0x40026058
 8001b3c:	200002ac 	.word	0x200002ac
 8001b40:	40026070 	.word	0x40026070

08001b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_TIM_Base_MspInit+0x48>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d115      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HAL_TIM_Base_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_TIM_Base_MspInit+0x4c>)
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_TIM_Base_MspInit+0x4c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2105      	movs	r1, #5
 8001b76:	2019      	movs	r0, #25
 8001b78:	f000 fb11 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b7c:	2019      	movs	r0, #25
 8001b7e:	f000 fb2a 	bl	80021d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40014400 	.word	0x40014400
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_UART_MspInit+0x84>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12b      	bne.n	8001c0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_UART_MspInit+0x88>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_UART_MspInit+0x88>)
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_UART_MspInit+0x88>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_UART_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_UART_MspInit+0x88>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_UART_MspInit+0x88>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bee:	230c      	movs	r3, #12
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <HAL_UART_MspInit+0x8c>)
 8001c0a:	f000 fe7d 	bl	8002908 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40004400 	.word	0x40004400
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020000 	.word	0x40020000

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <NMI_Handler+0x4>

08001c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler+0x4>

08001c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 f984 	bl	8001f60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c58:	f005 fe28 	bl	80078ac <xTaskGetSchedulerState>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d001      	beq.n	8001c66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c62:	f006 fd11 	bl	8008688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <DMA1_Stream3_IRQHandler+0x10>)
 8001c72:	f000 fbdf 	bl	8002434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000024c 	.word	0x2000024c

08001c80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <DMA1_Stream4_IRQHandler+0x10>)
 8001c86:	f000 fbd5 	bl	8002434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002ac 	.word	0x200002ac

08001c94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c9a:	f002 ff12 	bl	8004ac2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000030c 	.word	0x2000030c

08001ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cb0:	f000 ffe2 	bl	8002c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return 1;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_kill>:

int _kill(int pid, int sig)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cd2:	f008 f8c1 	bl	8009e58 <__errno>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2216      	movs	r2, #22
 8001cda:	601a      	str	r2, [r3, #0]
  return -1;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_exit>:

void _exit (int status)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ffe7 	bl	8001cc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cfa:	e7fe      	b.n	8001cfa <_exit+0x12>

08001cfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e00a      	b.n	8001d24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d0e:	f3af 8000 	nop.w
 8001d12:	4601      	mov	r1, r0
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60ba      	str	r2, [r7, #8]
 8001d1a:	b2ca      	uxtb	r2, r1
 8001d1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dbf0      	blt.n	8001d0e <_read+0x12>
  }

  return len;
 8001d2c:	687b      	ldr	r3, [r7, #4]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e009      	b.n	8001d5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	60ba      	str	r2, [r7, #8]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dbf1      	blt.n	8001d48 <_write+0x12>
  }
  return len;
 8001d64:	687b      	ldr	r3, [r7, #4]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_close>:

int _close(int file)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d96:	605a      	str	r2, [r3, #4]
  return 0;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_isatty>:

int _isatty(int file)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <_sbrk+0x5c>)
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <_sbrk+0x60>)
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <_sbrk+0x64>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <_sbrk+0x68>)
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d207      	bcs.n	8001e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e08:	f008 f826 	bl	8009e58 <__errno>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	220c      	movs	r2, #12
 8001e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e16:	e009      	b.n	8001e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <_sbrk+0x64>)
 8001e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20020000 	.word	0x20020000
 8001e38:	00000400 	.word	0x00000400
 8001e3c:	20000cb0 	.word	0x20000cb0
 8001e40:	200057f0 	.word	0x200057f0

08001e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <SystemInit+0x20>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <SystemInit+0x20>)
 8001e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e6e:	490e      	ldr	r1, [pc, #56]	; (8001ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e70:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e84:	4c0b      	ldr	r4, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e92:	f7ff ffd7 	bl	8001e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e96:	f007 ffe5 	bl	8009e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9a:	f7ff f94d 	bl	8001138 <main>
  bx  lr    
 8001e9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001eac:	0800dca8 	.word	0x0800dca8
  ldr r2, =_sbss
 8001eb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001eb4:	200057ec 	.word	0x200057ec

08001eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_Init+0x40>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <HAL_Init+0x40>)
 8001ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_Init+0x40>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f94f 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eea:	200f      	movs	r0, #15
 8001eec:	f000 f808 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef0:	f7ff fd30 	bl	8001954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_InitTick+0x54>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_InitTick+0x58>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f975 	bl	800220e <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00e      	b.n	8001f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d80a      	bhi.n	8001f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f3c:	f000 f92f 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f40:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <HAL_InitTick+0x5c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000cb4 	.word	0x20000cb4

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000cb4 	.word	0x20000cb4

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db12      	blt.n	8002078 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	490a      	ldr	r1, [pc, #40]	; (8002084 <__NVIC_DisableIRQ+0x44>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	3320      	adds	r3, #32
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800206c:	f3bf 8f4f 	dsb	sy
}
 8002070:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002072:	f3bf 8f6f 	isb	sy
}
 8002076:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	; (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff05 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff1a 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff8e 	bl	80020dc <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5d 	bl	8002088 <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff0d 	bl	8002004 <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff1d 	bl	8002040 <__NVIC_DisableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ff94 	bl	8002144 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fea8 	bl	8001f88 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e099      	b.n	8002378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002264:	e00f      	b.n	8002286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002266:	f7ff fe8f 	bl	8001f88 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b05      	cmp	r3, #5
 8002272:	d908      	bls.n	8002286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e078      	b.n	8002378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e8      	bne.n	8002266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_DMA_Init+0x158>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4313      	orrs	r3, r2
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2b04      	cmp	r3, #4
 8002318:	d117      	bne.n	800234a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fa6f 	bl	8002810 <DMA_CheckFifoParam>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002346:	2301      	movs	r3, #1
 8002348:	e016      	b.n	8002378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa26 	bl	80027a4 <DMA_CalcBaseAndBitshift>
 8002358:	4603      	mov	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	f010803f 	.word	0xf010803f

08002384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Start_IT+0x26>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e040      	b.n	800242c <HAL_DMA_Start_IT+0xa8>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d12f      	bne.n	800241e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f9b8 	bl	8002748 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	223f      	movs	r2, #63	; 0x3f
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0216 	orr.w	r2, r2, #22
 80023f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0208 	orr.w	r2, r2, #8
 800240a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e005      	b.n	800242a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002440:	4b8e      	ldr	r3, [pc, #568]	; (800267c <HAL_DMA_IRQHandler+0x248>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a8e      	ldr	r2, [pc, #568]	; (8002680 <HAL_DMA_IRQHandler+0x24c>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0a9b      	lsrs	r3, r3, #10
 800244c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	2208      	movs	r2, #8
 8002460:	409a      	lsls	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01a      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0204 	bic.w	r2, r2, #4
 8002486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	2208      	movs	r2, #8
 800248e:	409a      	lsls	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	2201      	movs	r2, #1
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d012      	beq.n	80024d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	2201      	movs	r2, #1
 80024c4:	409a      	lsls	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ce:	f043 0202 	orr.w	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024da:	2204      	movs	r2, #4
 80024dc:	409a      	lsls	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d012      	beq.n	800250c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00b      	beq.n	800250c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	2204      	movs	r2, #4
 80024fa:	409a      	lsls	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002504:	f043 0204 	orr.w	r2, r3, #4
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	2210      	movs	r2, #16
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d043      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d03c      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	2210      	movs	r2, #16
 8002530:	409a      	lsls	r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d018      	beq.n	8002576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d024      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
 8002562:	e01f      	b.n	80025a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
 8002574:	e016      	b.n	80025a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d107      	bne.n	8002594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0208 	bic.w	r2, r2, #8
 8002592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	2220      	movs	r2, #32
 80025aa:	409a      	lsls	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 808f 	beq.w	80026d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8087 	beq.w	80026d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ca:	2220      	movs	r2, #32
 80025cc:	409a      	lsls	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d136      	bne.n	800264c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0216 	bic.w	r2, r2, #22
 80025ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <HAL_DMA_IRQHandler+0x1da>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0208 	bic.w	r2, r2, #8
 800261c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	223f      	movs	r2, #63	; 0x3f
 8002624:	409a      	lsls	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263e:	2b00      	cmp	r3, #0
 8002640:	d07e      	beq.n	8002740 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
        }
        return;
 800264a:	e079      	b.n	8002740 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01d      	beq.n	8002696 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	2b00      	cmp	r3, #0
 800266e:	d031      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
 8002678:	e02c      	b.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000
 8002680:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
 8002694:	e01e      	b.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10f      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0210 	bic.w	r2, r2, #16
 80026b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d032      	beq.n	8002742 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d022      	beq.n	800272e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2205      	movs	r2, #5
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	3301      	adds	r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	429a      	cmp	r2, r3
 800270a:	d307      	bcc.n	800271c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f2      	bne.n	8002700 <HAL_DMA_IRQHandler+0x2cc>
 800271a:	e000      	b.n	800271e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800271c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
 800273e:	e000      	b.n	8002742 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002740:	bf00      	nop
    }
  }
}
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002764:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d108      	bne.n	8002788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002786:	e007      	b.n	8002798 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	3b10      	subs	r3, #16
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <DMA_CalcBaseAndBitshift+0x64>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <DMA_CalcBaseAndBitshift+0x68>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d909      	bls.n	80027e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027da:	f023 0303 	bic.w	r3, r3, #3
 80027de:	1d1a      	adds	r2, r3, #4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	659a      	str	r2, [r3, #88]	; 0x58
 80027e4:	e007      	b.n	80027f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	aaaaaaab 	.word	0xaaaaaaab
 800280c:	0800d860 	.word	0x0800d860

08002810 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d11f      	bne.n	800286a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d856      	bhi.n	80028de <DMA_CheckFifoParam+0xce>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <DMA_CheckFifoParam+0x28>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	08002849 	.word	0x08002849
 800283c:	0800285b 	.word	0x0800285b
 8002840:	08002849 	.word	0x08002849
 8002844:	080028df 	.word	0x080028df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d046      	beq.n	80028e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002858:	e043      	b.n	80028e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002862:	d140      	bne.n	80028e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002868:	e03d      	b.n	80028e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002872:	d121      	bne.n	80028b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d837      	bhi.n	80028ea <DMA_CheckFifoParam+0xda>
 800287a:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <DMA_CheckFifoParam+0x70>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002891 	.word	0x08002891
 8002884:	08002897 	.word	0x08002897
 8002888:	08002891 	.word	0x08002891
 800288c:	080028a9 	.word	0x080028a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      break;
 8002894:	e030      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d025      	beq.n	80028ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a6:	e022      	b.n	80028ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b0:	d11f      	bne.n	80028f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028b6:	e01c      	b.n	80028f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d903      	bls.n	80028c6 <DMA_CheckFifoParam+0xb6>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d003      	beq.n	80028cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028c4:	e018      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
      break;
 80028ca:	e015      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e00b      	b.n	80028f6 <DMA_CheckFifoParam+0xe6>
      break;
 80028de:	bf00      	nop
 80028e0:	e00a      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e008      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
 80028e8:	e006      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
 80028ec:	e004      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ee:	bf00      	nop
 80028f0:	e002      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <DMA_CheckFifoParam+0xe8>
      break;
 80028f6:	bf00      	nop
    }
  } 
  
  return status; 
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	e159      	b.n	8002bd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002924:	2201      	movs	r2, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	429a      	cmp	r2, r3
 800293e:	f040 8148 	bne.w	8002bd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d005      	beq.n	800295a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002956:	2b02      	cmp	r3, #2
 8002958:	d130      	bne.n	80029bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0201 	and.w	r2, r3, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d017      	beq.n	80029f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d123      	bne.n	8002a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	08da      	lsrs	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3208      	adds	r2, #8
 8002a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	220f      	movs	r2, #15
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	08da      	lsrs	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3208      	adds	r2, #8
 8002a46:	69b9      	ldr	r1, [r7, #24]
 8002a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0203 	and.w	r2, r3, #3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80a2 	beq.w	8002bd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b57      	ldr	r3, [pc, #348]	; (8002bf0 <HAL_GPIO_Init+0x2e8>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4a56      	ldr	r2, [pc, #344]	; (8002bf0 <HAL_GPIO_Init+0x2e8>)
 8002a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	4b54      	ldr	r3, [pc, #336]	; (8002bf0 <HAL_GPIO_Init+0x2e8>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aaa:	4a52      	ldr	r2, [pc, #328]	; (8002bf4 <HAL_GPIO_Init+0x2ec>)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a49      	ldr	r2, [pc, #292]	; (8002bf8 <HAL_GPIO_Init+0x2f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d019      	beq.n	8002b0a <HAL_GPIO_Init+0x202>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a48      	ldr	r2, [pc, #288]	; (8002bfc <HAL_GPIO_Init+0x2f4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_GPIO_Init+0x1fe>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a47      	ldr	r2, [pc, #284]	; (8002c00 <HAL_GPIO_Init+0x2f8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00d      	beq.n	8002b02 <HAL_GPIO_Init+0x1fa>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a46      	ldr	r2, [pc, #280]	; (8002c04 <HAL_GPIO_Init+0x2fc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <HAL_GPIO_Init+0x1f6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a45      	ldr	r2, [pc, #276]	; (8002c08 <HAL_GPIO_Init+0x300>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_GPIO_Init+0x1f2>
 8002af6:	2304      	movs	r3, #4
 8002af8:	e008      	b.n	8002b0c <HAL_GPIO_Init+0x204>
 8002afa:	2307      	movs	r3, #7
 8002afc:	e006      	b.n	8002b0c <HAL_GPIO_Init+0x204>
 8002afe:	2303      	movs	r3, #3
 8002b00:	e004      	b.n	8002b0c <HAL_GPIO_Init+0x204>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e002      	b.n	8002b0c <HAL_GPIO_Init+0x204>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_GPIO_Init+0x204>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	f002 0203 	and.w	r2, r2, #3
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	4093      	lsls	r3, r2
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b1c:	4935      	ldr	r1, [pc, #212]	; (8002bf4 <HAL_GPIO_Init+0x2ec>)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3302      	adds	r3, #2
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b2a:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b54:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b78:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b7e:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ba2:	4a1a      	ldr	r2, [pc, #104]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba8:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bcc:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b0f      	cmp	r3, #15
 8002bdc:	f67f aea2 	bls.w	8002924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3724      	adds	r7, #36	; 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	40020800 	.word	0x40020800
 8002c04:	40020c00 	.word	0x40020c00
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40013c00 	.word	0x40013c00

08002c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c20:	787b      	ldrb	r3, [r7, #1]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c26:	887a      	ldrh	r2, [r7, #2]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c2c:	e003      	b.n	8002c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	041a      	lsls	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	619a      	str	r2, [r3, #24]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c54:	887a      	ldrh	r2, [r7, #2]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	041a      	lsls	r2, r3, #16
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	43d9      	mvns	r1, r3
 8002c60:	887b      	ldrh	r3, [r7, #2]
 8002c62:	400b      	ands	r3, r1
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	619a      	str	r2, [r3, #24]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fd74 	bl	8001784 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40013c00 	.word	0x40013c00

08002ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e267      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d075      	beq.n	8002db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d00c      	beq.n	8002cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cea:	d10b      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4b7e      	ldr	r3, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x108>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d157      	bne.n	8002db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e242      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d106      	bne.n	8002d1c <HAL_RCC_OscConfig+0x74>
 8002d0e:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a75      	ldr	r2, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x98>
 8002d26:	4b70      	ldr	r3, [pc, #448]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6f      	ldr	r2, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6c      	ldr	r2, [pc, #432]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d40:	4b69      	ldr	r3, [pc, #420]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a68      	ldr	r2, [pc, #416]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b66      	ldr	r3, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a65      	ldr	r2, [pc, #404]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7ff f912 	bl	8001f88 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff f90e 	bl	8001f88 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e207      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xc0>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7ff f8fe 	bl	8001f88 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d90:	f7ff f8fa 	bl	8001f88 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1f3      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0xe8>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd6:	4b44      	ldr	r3, [pc, #272]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b41      	ldr	r3, [pc, #260]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1c7      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4937      	ldr	r1, [pc, #220]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e03a      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_OscConfig+0x244>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7ff f8b3 	bl	8001f88 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e26:	f7ff f8af 	bl	8001f88 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1a8      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4925      	ldr	r1, [pc, #148]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x244>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7ff f892 	bl	8001f88 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e68:	f7ff f88e 	bl	8001f88 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e187      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d036      	beq.n	8002f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_RCC_OscConfig+0x248>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7ff f872 	bl	8001f88 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7ff f86e 	bl	8001f88 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e167      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x200>
 8002ec6:	e01b      	b.n	8002f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCC_OscConfig+0x248>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ece:	f7ff f85b 	bl	8001f88 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	e00e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7ff f857 	bl	8001f88 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d907      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e150      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470000 	.word	0x42470000
 8002ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	4b88      	ldr	r3, [pc, #544]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ea      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8097 	beq.w	800303c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b81      	ldr	r3, [pc, #516]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b7d      	ldr	r3, [pc, #500]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a7c      	ldr	r2, [pc, #496]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b7a      	ldr	r3, [pc, #488]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b77      	ldr	r3, [pc, #476]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b74      	ldr	r3, [pc, #464]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a73      	ldr	r2, [pc, #460]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7ff f817 	bl	8001f88 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7ff f813 	bl	8001f88 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e10c      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b6a      	ldr	r3, [pc, #424]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2ea>
 8002f84:	4b64      	ldr	r3, [pc, #400]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a63      	ldr	r2, [pc, #396]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	e01c      	b.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x30c>
 8002f9a:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a5e      	ldr	r2, [pc, #376]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	4a5b      	ldr	r2, [pc, #364]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002fb4:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a57      	ldr	r2, [pc, #348]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	4b55      	ldr	r3, [pc, #340]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a54      	ldr	r2, [pc, #336]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	f023 0304 	bic.w	r3, r3, #4
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe ffd8 	bl	8001f88 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe ffd4 	bl	8001f88 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0cb      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	4b49      	ldr	r3, [pc, #292]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ee      	beq.n	8002fdc <HAL_RCC_OscConfig+0x334>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003000:	f7fe ffc2 	bl	8001f88 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe ffbe 	bl	8001f88 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0b5      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ee      	bne.n	8003008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003030:	4b39      	ldr	r3, [pc, #228]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	4a38      	ldr	r2, [pc, #224]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80a1 	beq.w	8003188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d05c      	beq.n	800310c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d141      	bne.n	80030de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b31      	ldr	r3, [pc, #196]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe ff92 	bl	8001f88 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe ff8e 	bl	8001f88 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e087      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b27      	ldr	r3, [pc, #156]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	491b      	ldr	r1, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fe ff67 	bl	8001f88 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe ff63 	bl	8001f88 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e05c      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x416>
 80030dc:	e054      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe ff50 	bl	8001f88 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe ff4c 	bl	8001f88 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e045      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x444>
 800310a:	e03d      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e038      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
 8003118:	40023800 	.word	0x40023800
 800311c:	40007000 	.word	0x40007000
 8003120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCC_OscConfig+0x4ec>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d028      	beq.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d121      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d11a      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800315a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800315c:	4293      	cmp	r3, r2
 800315e:	d111      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0cc      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b68      	ldr	r3, [pc, #416]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d90c      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b65      	ldr	r3, [pc, #404]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b63      	ldr	r3, [pc, #396]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0b8      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ec:	4b59      	ldr	r3, [pc, #356]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a58      	ldr	r2, [pc, #352]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a52      	ldr	r2, [pc, #328]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800320e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	494d      	ldr	r1, [pc, #308]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d044      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d119      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e07f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d003      	beq.n	8003256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003252:	2b03      	cmp	r3, #3
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e067      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003276:	4b37      	ldr	r3, [pc, #220]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4934      	ldr	r1, [pc, #208]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	4313      	orrs	r3, r2
 8003286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003288:	f7fe fe7e 	bl	8001f88 <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003290:	f7fe fe7a 	bl	8001f88 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	; 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e04f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 020c 	and.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d1eb      	bne.n	8003290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d20c      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e032      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4916      	ldr	r1, [pc, #88]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	490e      	ldr	r1, [pc, #56]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331e:	f000 f821 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	490a      	ldr	r1, [pc, #40]	; (8003358 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800333a:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fdde 	bl	8001f00 <HAL_InitTick>

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023c00 	.word	0x40023c00
 8003354:	40023800 	.word	0x40023800
 8003358:	0800d848 	.word	0x0800d848
 800335c:	20000000 	.word	0x20000000
 8003360:	20000004 	.word	0x20000004

08003364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b094      	sub	sp, #80	; 0x50
 800336a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	647b      	str	r3, [r7, #68]	; 0x44
 8003370:	2300      	movs	r3, #0
 8003372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003374:	2300      	movs	r3, #0
 8003376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337c:	4b79      	ldr	r3, [pc, #484]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d00d      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003388:	2b08      	cmp	r3, #8
 800338a:	f200 80e1 	bhi.w	8003550 <HAL_RCC_GetSysClockFreq+0x1ec>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x34>
 8003392:	2b04      	cmp	r3, #4
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x3a>
 8003396:	e0db      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b73      	ldr	r3, [pc, #460]	; (8003568 <HAL_RCC_GetSysClockFreq+0x204>)
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800339c:	e0db      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339e:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCC_GetSysClockFreq+0x208>)
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a2:	e0d8      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a4:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ae:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d063      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	2200      	movs	r2, #0
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
 80033ce:	2300      	movs	r3, #0
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
 80033d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033d6:	4622      	mov	r2, r4
 80033d8:	462b      	mov	r3, r5
 80033da:	f04f 0000 	mov.w	r0, #0
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	0159      	lsls	r1, r3, #5
 80033e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e8:	0150      	lsls	r0, r2, #5
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4621      	mov	r1, r4
 80033f0:	1a51      	subs	r1, r2, r1
 80033f2:	6139      	str	r1, [r7, #16]
 80033f4:	4629      	mov	r1, r5
 80033f6:	eb63 0301 	sbc.w	r3, r3, r1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003408:	4659      	mov	r1, fp
 800340a:	018b      	lsls	r3, r1, #6
 800340c:	4651      	mov	r1, sl
 800340e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003412:	4651      	mov	r1, sl
 8003414:	018a      	lsls	r2, r1, #6
 8003416:	4651      	mov	r1, sl
 8003418:	ebb2 0801 	subs.w	r8, r2, r1
 800341c:	4659      	mov	r1, fp
 800341e:	eb63 0901 	sbc.w	r9, r3, r1
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003436:	4690      	mov	r8, r2
 8003438:	4699      	mov	r9, r3
 800343a:	4623      	mov	r3, r4
 800343c:	eb18 0303 	adds.w	r3, r8, r3
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	462b      	mov	r3, r5
 8003444:	eb49 0303 	adc.w	r3, r9, r3
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003456:	4629      	mov	r1, r5
 8003458:	024b      	lsls	r3, r1, #9
 800345a:	4621      	mov	r1, r4
 800345c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003460:	4621      	mov	r1, r4
 8003462:	024a      	lsls	r2, r1, #9
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346a:	2200      	movs	r2, #0
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
 800346e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003474:	f7fd fc10 	bl	8000c98 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003480:	e058      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	4618      	mov	r0, r3
 800348c:	4611      	mov	r1, r2
 800348e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800349c:	4642      	mov	r2, r8
 800349e:	464b      	mov	r3, r9
 80034a0:	f04f 0000 	mov.w	r0, #0
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	0159      	lsls	r1, r3, #5
 80034aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ae:	0150      	lsls	r0, r2, #5
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4641      	mov	r1, r8
 80034b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ba:	4649      	mov	r1, r9
 80034bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034d4:	ebb2 040a 	subs.w	r4, r2, sl
 80034d8:	eb63 050b 	sbc.w	r5, r3, fp
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	00eb      	lsls	r3, r5, #3
 80034e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ea:	00e2      	lsls	r2, r4, #3
 80034ec:	4614      	mov	r4, r2
 80034ee:	461d      	mov	r5, r3
 80034f0:	4643      	mov	r3, r8
 80034f2:	18e3      	adds	r3, r4, r3
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	464b      	mov	r3, r9
 80034f8:	eb45 0303 	adc.w	r3, r5, r3
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800350a:	4629      	mov	r1, r5
 800350c:	028b      	lsls	r3, r1, #10
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003514:	4621      	mov	r1, r4
 8003516:	028a      	lsls	r2, r1, #10
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	2200      	movs	r2, #0
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	61fa      	str	r2, [r7, #28]
 8003524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003528:	f7fd fbb6 	bl	8000c98 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	3301      	adds	r3, #1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_GetSysClockFreq+0x204>)
 8003552:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003558:	4618      	mov	r0, r3
 800355a:	3750      	adds	r7, #80	; 0x50
 800355c:	46bd      	mov	sp, r7
 800355e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	00f42400 	.word	0x00f42400
 800356c:	007a1200 	.word	0x007a1200

08003570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCC_GetHCLKFreq+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000000 	.word	0x20000000

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800358c:	f7ff fff0 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0a9b      	lsrs	r3, r3, #10
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	0800d858 	.word	0x0800d858

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035b4:	f7ff ffdc 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0b5b      	lsrs	r3, r3, #13
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	; (80035d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	0800d858 	.word	0x0800d858

080035d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e07b      	b.n	80036e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d108      	bne.n	8003604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035fa:	d009      	beq.n	8003610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	61da      	str	r2, [r3, #28]
 8003602:	e005      	b.n	8003610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fe f9be 	bl	80019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003646:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	ea42 0103 	orr.w	r1, r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	f003 0104 	and.w	r1, r3, #4
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	f003 0210 	and.w	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b088      	sub	sp, #32
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_SPI_Transmit+0x22>
 8003708:	2302      	movs	r3, #2
 800370a:	e126      	b.n	800395a <HAL_SPI_Transmit+0x270>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003714:	f7fe fc38 	bl	8001f88 <HAL_GetTick>
 8003718:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d002      	beq.n	8003730 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800372a:	2302      	movs	r3, #2
 800372c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800372e:	e10b      	b.n	8003948 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_SPI_Transmit+0x52>
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003740:	e102      	b.n	8003948 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2203      	movs	r2, #3
 8003746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	88fa      	ldrh	r2, [r7, #6]
 800375a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003788:	d10f      	bne.n	80037aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003798:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d007      	beq.n	80037c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d0:	d14b      	bne.n	800386a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_SPI_Transmit+0xf6>
 80037da:	8afb      	ldrh	r3, [r7, #22]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d13e      	bne.n	800385e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	881a      	ldrh	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	1c9a      	adds	r2, r3, #2
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003804:	e02b      	b.n	800385e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b02      	cmp	r3, #2
 8003812:	d112      	bne.n	800383a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	881a      	ldrh	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	1c9a      	adds	r2, r3, #2
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	86da      	strh	r2, [r3, #54]	; 0x36
 8003838:	e011      	b.n	800385e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800383a:	f7fe fba5 	bl	8001f88 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d803      	bhi.n	8003852 <HAL_SPI_Transmit+0x168>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003850:	d102      	bne.n	8003858 <HAL_SPI_Transmit+0x16e>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800385c:	e074      	b.n	8003948 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1ce      	bne.n	8003806 <HAL_SPI_Transmit+0x11c>
 8003868:	e04c      	b.n	8003904 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_SPI_Transmit+0x18e>
 8003872:	8afb      	ldrh	r3, [r7, #22]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d140      	bne.n	80038fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	7812      	ldrb	r2, [r2, #0]
 8003884:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800389e:	e02c      	b.n	80038fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d113      	bne.n	80038d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	7812      	ldrb	r2, [r2, #0]
 80038ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80038d4:	e011      	b.n	80038fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038d6:	f7fe fb57 	bl	8001f88 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d803      	bhi.n	80038ee <HAL_SPI_Transmit+0x204>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ec:	d102      	bne.n	80038f4 <HAL_SPI_Transmit+0x20a>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038f8:	e026      	b.n	8003948 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1cd      	bne.n	80038a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 ffb7 	bl	800487c <SPI_EndRxTxTransaction>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e000      	b.n	8003948 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003946:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003958:	7ffb      	ldrb	r3, [r7, #31]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3720      	adds	r7, #32
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b088      	sub	sp, #32
 8003966:	af02      	add	r7, sp, #8
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800397e:	d112      	bne.n	80039a6 <HAL_SPI_Receive+0x44>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10e      	bne.n	80039a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2204      	movs	r2, #4
 800398c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f8f1 	bl	8003b84 <HAL_SPI_TransmitReceive>
 80039a2:	4603      	mov	r3, r0
 80039a4:	e0ea      	b.n	8003b7c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_SPI_Receive+0x52>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e0e3      	b.n	8003b7c <HAL_SPI_Receive+0x21a>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039bc:	f7fe fae4 	bl	8001f88 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80039ce:	2302      	movs	r3, #2
 80039d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039d2:	e0ca      	b.n	8003b6a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_SPI_Receive+0x7e>
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039e4:	e0c1      	b.n	8003b6a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2204      	movs	r2, #4
 80039ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a2c:	d10f      	bne.n	8003a4e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d007      	beq.n	8003a6c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d162      	bne.n	8003b3a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a74:	e02e      	b.n	8003ad4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d115      	bne.n	8003ab0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f103 020c 	add.w	r2, r3, #12
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aae:	e011      	b.n	8003ad4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab0:	f7fe fa6a 	bl	8001f88 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d803      	bhi.n	8003ac8 <HAL_SPI_Receive+0x166>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Receive+0x16c>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d102      	bne.n	8003ad4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ad2:	e04a      	b.n	8003b6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1cb      	bne.n	8003a76 <HAL_SPI_Receive+0x114>
 8003ade:	e031      	b.n	8003b44 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d113      	bne.n	8003b16 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	b292      	uxth	r2, r2
 8003afa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	1c9a      	adds	r2, r3, #2
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b14:	e011      	b.n	8003b3a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b16:	f7fe fa37 	bl	8001f88 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d803      	bhi.n	8003b2e <HAL_SPI_Receive+0x1cc>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b2c:	d102      	bne.n	8003b34 <HAL_SPI_Receive+0x1d2>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b38:	e017      	b.n	8003b6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1cd      	bne.n	8003ae0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	6839      	ldr	r1, [r7, #0]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fe31 	bl	80047b0 <SPI_EndRxTransaction>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
 8003b66:	e000      	b.n	8003b6a <HAL_SPI_Receive+0x208>
  }

error :
 8003b68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b92:	2301      	movs	r3, #1
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x26>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e18a      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x33c>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bb2:	f7fe f9e9 	bl	8001f88 <HAL_GetTick>
 8003bb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bc8:	887b      	ldrh	r3, [r7, #2]
 8003bca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d00f      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x70>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d107      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d103      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x68>
 8003be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d003      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bf2:	e15b      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_SPI_TransmitReceive+0x82>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_SPI_TransmitReceive+0x82>
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c0c:	e14e      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2205      	movs	r2, #5
 8003c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	887a      	ldrh	r2, [r7, #2]
 8003c32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	887a      	ldrh	r2, [r7, #2]
 8003c4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d007      	beq.n	8003c76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7e:	d178      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0x10a>
 8003c88:	8b7b      	ldrh	r3, [r7, #26]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d166      	bne.n	8003d5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	881a      	ldrh	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	1c9a      	adds	r2, r3, #2
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb2:	e053      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d11b      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x176>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d016      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x176>
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d113      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	881a      	ldrh	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	1c9a      	adds	r2, r3, #2
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d119      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x1b8>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d014      	beq.n	8003d3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	1c9a      	adds	r2, r3, #2
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d3c:	f7fe f924 	bl	8001f88 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d807      	bhi.n	8003d5c <HAL_SPI_TransmitReceive+0x1d8>
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d52:	d003      	beq.n	8003d5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d5a:	e0a7      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1a6      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x130>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1a1      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x130>
 8003d70:	e07c      	b.n	8003e6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_SPI_TransmitReceive+0x1fc>
 8003d7a:	8b7b      	ldrh	r3, [r7, #26]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d16b      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	7812      	ldrb	r2, [r2, #0]
 8003d8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003da6:	e057      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d11c      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x26c>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d017      	beq.n	8003df0 <HAL_SPI_TransmitReceive+0x26c>
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d114      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	7812      	ldrb	r2, [r2, #0]
 8003dd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d119      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x2ae>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d014      	beq.n	8003e32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e32:	f7fe f8a9 	bl	8001f88 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d803      	bhi.n	8003e4a <HAL_SPI_TransmitReceive+0x2c6>
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e48:	d102      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x2cc>
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e56:	e029      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1a2      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x224>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d19d      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fd03 	bl	800487c <SPI_EndRxTxTransaction>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e88:	e010      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	e000      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003eaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3730      	adds	r7, #48	; 0x30
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_SPI_Transmit_DMA+0x20>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e09b      	b.n	8004020 <HAL_SPI_Transmit_DMA+0x158>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d002      	beq.n	8003f02 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003efc:	2302      	movs	r3, #2
 8003efe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f00:	e089      	b.n	8004016 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_SPI_Transmit_DMA+0x46>
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f12:	e080      	b.n	8004016 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2203      	movs	r2, #3
 8003f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	88fa      	ldrh	r2, [r7, #6]
 8003f2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	88fa      	ldrh	r2, [r7, #6]
 8003f32:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5a:	d10f      	bne.n	8003f7c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f80:	4a29      	ldr	r2, [pc, #164]	; (8004028 <HAL_SPI_Transmit_DMA+0x160>)
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f88:	4a28      	ldr	r2, [pc, #160]	; (800402c <HAL_SPI_Transmit_DMA+0x164>)
 8003f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f90:	4a27      	ldr	r2, [pc, #156]	; (8004030 <HAL_SPI_Transmit_DMA+0x168>)
 8003f92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f98:	2200      	movs	r2, #0
 8003f9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003fb4:	f7fe f9e6 	bl	8002384 <HAL_DMA_Start_IT>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00c      	beq.n	8003fd8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f043 0210 	orr.w	r2, r3, #16
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003fd6:	e01e      	b.n	8004016 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d007      	beq.n	8003ff6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0220 	orr.w	r2, r2, #32
 8004004:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0202 	orr.w	r2, r2, #2
 8004014:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800401e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	0800460d 	.word	0x0800460d
 800402c:	0800442d 	.word	0x0800442d
 8004030:	08004661 	.word	0x08004661

08004034 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d110      	bne.n	8004070 <HAL_SPI_Receive_DMA+0x3c>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004056:	d10b      	bne.n	8004070 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2204      	movs	r2, #4
 800405c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f8ac 	bl	80041c4 <HAL_SPI_TransmitReceive_DMA>
 800406c:	4603      	mov	r3, r0
 800406e:	e09f      	b.n	80041b0 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_SPI_Receive_DMA+0x4a>
 800407a:	2302      	movs	r3, #2
 800407c:	e098      	b.n	80041b0 <HAL_SPI_Receive_DMA+0x17c>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d002      	beq.n	8004098 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004092:	2302      	movs	r3, #2
 8004094:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004096:	e086      	b.n	80041a6 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_SPI_Receive_DMA+0x70>
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040a8:	e07d      	b.n	80041a6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2204      	movs	r2, #4
 80040ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d10f      	bne.n	800410c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800410a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004110:	4a29      	ldr	r2, [pc, #164]	; (80041b8 <HAL_SPI_Receive_DMA+0x184>)
 8004112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004118:	4a28      	ldr	r2, [pc, #160]	; (80041bc <HAL_SPI_Receive_DMA+0x188>)
 800411a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <HAL_SPI_Receive_DMA+0x18c>)
 8004122:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	2200      	movs	r2, #0
 800412a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	4619      	mov	r1, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004142:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004144:	f7fe f91e 	bl	8002384 <HAL_DMA_Start_IT>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f043 0210 	orr.w	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004166:	e01e      	b.n	80041a6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d007      	beq.n	8004186 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004184:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0220 	orr.w	r2, r2, #32
 8004194:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	08004629 	.word	0x08004629
 80041bc:	080044d5 	.word	0x080044d5
 80041c0:	08004661 	.word	0x08004661

080041c4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e0e3      	b.n	80043ac <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80041fa:	7dbb      	ldrb	r3, [r7, #22]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d00d      	beq.n	800421c <HAL_SPI_TransmitReceive_DMA+0x58>
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004206:	d106      	bne.n	8004216 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004210:	7dbb      	ldrb	r3, [r7, #22]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d002      	beq.n	800421c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004216:	2302      	movs	r3, #2
 8004218:	75fb      	strb	r3, [r7, #23]
    goto error;
 800421a:	e0c2      	b.n	80043a2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004228:	887b      	ldrh	r3, [r7, #2]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004232:	e0b6      	b.n	80043a2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b04      	cmp	r3, #4
 800423e:	d003      	beq.n	8004248 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2205      	movs	r2, #5
 8004244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	887a      	ldrh	r2, [r7, #2]
 800425e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	887a      	ldrh	r2, [r7, #2]
 800426a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b04      	cmp	r3, #4
 8004288:	d108      	bne.n	800429c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428e:	4a49      	ldr	r2, [pc, #292]	; (80043b4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004296:	4a48      	ldr	r2, [pc, #288]	; (80043b8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004298:	63da      	str	r2, [r3, #60]	; 0x3c
 800429a:	e007      	b.n	80042ac <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a0:	4a46      	ldr	r2, [pc, #280]	; (80043bc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a8:	4a45      	ldr	r2, [pc, #276]	; (80043c0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80042aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b0:	4a44      	ldr	r2, [pc, #272]	; (80043c4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80042b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b8:	2200      	movs	r2, #0
 80042ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	4619      	mov	r1, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042d4:	f7fe f856 	bl	8002384 <HAL_DMA_Start_IT>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00c      	beq.n	80042f8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	f043 0210 	orr.w	r2, r3, #16
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80042f6:	e054      	b.n	80043a2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	2200      	movs	r2, #0
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004314:	2200      	movs	r2, #0
 8004316:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	2200      	movs	r2, #0
 800431e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004324:	2200      	movs	r2, #0
 8004326:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	4619      	mov	r1, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800433e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004340:	f7fe f820 	bl	8002384 <HAL_DMA_Start_IT>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00c      	beq.n	8004364 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f043 0210 	orr.w	r2, r3, #16
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004362:	e01e      	b.n	80043a2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	d007      	beq.n	8004382 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004380:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0220 	orr.w	r2, r2, #32
 8004390:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0202 	orr.w	r2, r2, #2
 80043a0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	08004629 	.word	0x08004629
 80043b8:	080044d5 	.word	0x080044d5
 80043bc:	08004645 	.word	0x08004645
 80043c0:	0800457d 	.word	0x0800457d
 80043c4:	08004661 	.word	0x08004661

080043c8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800443a:	f7fd fda5 	bl	8001f88 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	d03b      	beq.n	80044c8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0220 	bic.w	r2, r2, #32
 800445e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0202 	bic.w	r2, r2, #2
 800446e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	2164      	movs	r1, #100	; 0x64
 8004474:	6978      	ldr	r0, [r7, #20]
 8004476:	f000 fa01 	bl	800487c <SPI_EndRxTxTransaction>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	f043 0220 	orr.w	r2, r3, #32
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	f7ff ffa9 	bl	8004418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80044c6:	e002      	b.n	80044ce <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80044c8:	6978      	ldr	r0, [r7, #20]
 80044ca:	f7fd f829 	bl	8001520 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044e2:	f7fd fd51 	bl	8001f88 <HAL_GetTick>
 80044e6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f6:	d03b      	beq.n	8004570 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0220 	bic.w	r2, r2, #32
 8004506:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <SPI_DMAReceiveCplt+0x58>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004518:	d108      	bne.n	800452c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0203 	bic.w	r2, r2, #3
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	e007      	b.n	800453c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	2164      	movs	r1, #100	; 0x64
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f935 	bl	80047b0 <SPI_EndRxTransaction>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff ff55 	bl	8004418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800456e:	e002      	b.n	8004576 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7fc ffe5 	bl	8001540 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800458a:	f7fd fcfd 	bl	8001f88 <HAL_GetTick>
 800458e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	d02f      	beq.n	8004600 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0220 	bic.w	r2, r2, #32
 80045ae:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	2164      	movs	r1, #100	; 0x64
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f961 	bl	800487c <SPI_EndRxTxTransaction>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0203 	bic.w	r2, r2, #3
 80045da:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff ff0d 	bl	8004418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80045fe:	e002      	b.n	8004606 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff fee1 	bl	80043c8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff fede 	bl	80043dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff feda 	bl	80043f0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff fed6 	bl	8004404 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0203 	bic.w	r2, r2, #3
 800467c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	f043 0210 	orr.w	r2, r3, #16
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff fec0 	bl	8004418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046b0:	f7fd fc6a 	bl	8001f88 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	4413      	add	r3, r2
 80046be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046c0:	f7fd fc62 	bl	8001f88 <HAL_GetTick>
 80046c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	015b      	lsls	r3, r3, #5
 80046cc:	0d1b      	lsrs	r3, r3, #20
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046d6:	e054      	b.n	8004782 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046de:	d050      	beq.n	8004782 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046e0:	f7fd fc52 	bl	8001f88 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d902      	bls.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d13d      	bne.n	8004772 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004704:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470e:	d111      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004718:	d004      	beq.n	8004724 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004722:	d107      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473c:	d10f      	bne.n	800475e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800475c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e017      	b.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3b01      	subs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4013      	ands	r3, r2
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	429a      	cmp	r2, r3
 8004790:	bf0c      	ite	eq
 8004792:	2301      	moveq	r3, #1
 8004794:	2300      	movne	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	429a      	cmp	r2, r3
 800479e:	d19b      	bne.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000000 	.word	0x20000000

080047b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c4:	d111      	bne.n	80047ea <SPI_EndRxTransaction+0x3a>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ce:	d004      	beq.n	80047da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d8:	d107      	bne.n	80047ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f2:	d12a      	bne.n	800484a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fc:	d012      	beq.n	8004824 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2200      	movs	r2, #0
 8004806:	2180      	movs	r1, #128	; 0x80
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7ff ff49 	bl	80046a0 <SPI_WaitFlagStateUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d02d      	beq.n	8004870 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e026      	b.n	8004872 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	2101      	movs	r1, #1
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff ff36 	bl	80046a0 <SPI_WaitFlagStateUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01a      	beq.n	8004870 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e013      	b.n	8004872 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2200      	movs	r2, #0
 8004852:	2101      	movs	r1, #1
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff ff23 	bl	80046a0 <SPI_WaitFlagStateUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e000      	b.n	8004872 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004888:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <SPI_EndRxTxTransaction+0x7c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1b      	ldr	r2, [pc, #108]	; (80048fc <SPI_EndRxTxTransaction+0x80>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	0d5b      	lsrs	r3, r3, #21
 8004894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004898:	fb02 f303 	mul.w	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a6:	d112      	bne.n	80048ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2180      	movs	r1, #128	; 0x80
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fef4 	bl	80046a0 <SPI_WaitFlagStateUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d016      	beq.n	80048ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e00f      	b.n	80048ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d0f2      	beq.n	80048ce <SPI_EndRxTxTransaction+0x52>
 80048e8:	e000      	b.n	80048ec <SPI_EndRxTxTransaction+0x70>
        break;
 80048ea:	bf00      	nop
  }

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000000 	.word	0x20000000
 80048fc:	165e9f81 	.word	0x165e9f81

08004900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e041      	b.n	8004996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fd f90c 	bl	8001b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f000 f9f0 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e044      	b.n	8004a42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <HAL_TIM_Base_Start_IT+0xb0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d018      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x6c>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d013      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x6c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <HAL_TIM_Base_Start_IT+0xb4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00e      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x6c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <HAL_TIM_Base_Start_IT+0xb8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x6c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <HAL_TIM_Base_Start_IT+0xbc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x6c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d111      	bne.n	8004a30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d010      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	e007      	b.n	8004a40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40010000 	.word	0x40010000
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40000800 	.word	0x40000800
 8004a5c:	40000c00 	.word	0x40000c00
 8004a60:	40014000 	.word	0x40014000

08004a64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a1a      	ldr	r2, [r3, #32]
 8004a82:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10f      	bne.n	8004aac <HAL_TIM_Base_Stop_IT+0x48>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	f240 4344 	movw	r3, #1092	; 0x444
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_Base_Stop_IT+0x48>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d122      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d11b      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0202 	mvn.w	r2, #2
 8004aee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f8ee 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 8004b0a:	e005      	b.n	8004b18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8e0 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f8f1 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d122      	bne.n	8004b72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d11b      	bne.n	8004b72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0204 	mvn.w	r2, #4
 8004b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f8c4 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 8004b5e:	e005      	b.n	8004b6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f8b6 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f8c7 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d122      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d11b      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f06f 0208 	mvn.w	r2, #8
 8004b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2204      	movs	r2, #4
 8004b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f89a 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 8004bb2:	e005      	b.n	8004bc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f88c 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f89d 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d122      	bne.n	8004c1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b10      	cmp	r3, #16
 8004be0:	d11b      	bne.n	8004c1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f06f 0210 	mvn.w	r2, #16
 8004bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2208      	movs	r2, #8
 8004bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f870 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 8004c06:	e005      	b.n	8004c14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f862 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f873 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10e      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d107      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f06f 0201 	mvn.w	r2, #1
 8004c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7fc fdbf 	bl	80017c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c50:	2b80      	cmp	r3, #128	; 0x80
 8004c52:	d10e      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	2b80      	cmp	r3, #128	; 0x80
 8004c60:	d107      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f8e3 	bl	8004e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d10e      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	d107      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f838 	bl	8004d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d10e      	bne.n	8004cca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d107      	bne.n	8004cca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f06f 0220 	mvn.w	r2, #32
 8004cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f8ad 	bl	8004e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a34      	ldr	r2, [pc, #208]	; (8004e08 <TIM_Base_SetConfig+0xe4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00f      	beq.n	8004d5c <TIM_Base_SetConfig+0x38>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d00b      	beq.n	8004d5c <TIM_Base_SetConfig+0x38>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a31      	ldr	r2, [pc, #196]	; (8004e0c <TIM_Base_SetConfig+0xe8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <TIM_Base_SetConfig+0x38>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a30      	ldr	r2, [pc, #192]	; (8004e10 <TIM_Base_SetConfig+0xec>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_Base_SetConfig+0x38>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a2f      	ldr	r2, [pc, #188]	; (8004e14 <TIM_Base_SetConfig+0xf0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d108      	bne.n	8004d6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a25      	ldr	r2, [pc, #148]	; (8004e08 <TIM_Base_SetConfig+0xe4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01b      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7c:	d017      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a22      	ldr	r2, [pc, #136]	; (8004e0c <TIM_Base_SetConfig+0xe8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a21      	ldr	r2, [pc, #132]	; (8004e10 <TIM_Base_SetConfig+0xec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00f      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <TIM_Base_SetConfig+0xf0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <TIM_Base_SetConfig+0xf4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <TIM_Base_SetConfig+0xf8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <TIM_Base_SetConfig+0xfc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d108      	bne.n	8004dc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a08      	ldr	r2, [pc, #32]	; (8004e08 <TIM_Base_SetConfig+0xe4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d103      	bne.n	8004df4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	615a      	str	r2, [r3, #20]
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40014400 	.word	0x40014400
 8004e20:	40014800 	.word	0x40014800

08004e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e03f      	b.n	8004ede <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fc fe8e 	bl	8001b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2224      	movs	r2, #36	; 0x24
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f929 	bl	80050e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b08a      	sub	sp, #40	; 0x28
 8004eea:	af02      	add	r7, sp, #8
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d17c      	bne.n	8005000 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <HAL_UART_Transmit+0x2c>
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e075      	b.n	8005002 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_UART_Transmit+0x3e>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e06e      	b.n	8005002 <HAL_UART_Transmit+0x11c>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2221      	movs	r2, #33	; 0x21
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f3a:	f7fd f825 	bl	8001f88 <HAL_GetTick>
 8004f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	88fa      	ldrh	r2, [r7, #6]
 8004f44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	88fa      	ldrh	r2, [r7, #6]
 8004f4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f54:	d108      	bne.n	8004f68 <HAL_UART_Transmit+0x82>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d104      	bne.n	8004f68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	e003      	b.n	8004f70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f78:	e02a      	b.n	8004fd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2200      	movs	r2, #0
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f840 	bl	800500a <UART_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e036      	b.n	8005002 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	3302      	adds	r3, #2
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	e007      	b.n	8004fc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1cf      	bne.n	8004f7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2140      	movs	r1, #64	; 0x40
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f810 	bl	800500a <UART_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e006      	b.n	8005002 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e000      	b.n	8005002 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005000:	2302      	movs	r3, #2
  }
}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b090      	sub	sp, #64	; 0x40
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	4613      	mov	r3, r2
 8005018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501a:	e050      	b.n	80050be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005022:	d04c      	beq.n	80050be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <UART_WaitOnFlagUntilTimeout+0x30>
 800502a:	f7fc ffad 	bl	8001f88 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005036:	429a      	cmp	r2, r3
 8005038:	d241      	bcs.n	80050be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	330c      	adds	r3, #12
 8005058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800505a:	637a      	str	r2, [r7, #52]	; 0x34
 800505c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e5      	bne.n	800503a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3314      	adds	r3, #20
 8005074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	613b      	str	r3, [r7, #16]
   return(result);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3314      	adds	r3, #20
 800508c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800508e:	623a      	str	r2, [r7, #32]
 8005090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	69f9      	ldr	r1, [r7, #28]
 8005094:	6a3a      	ldr	r2, [r7, #32]
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	61bb      	str	r3, [r7, #24]
   return(result);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e00f      	b.n	80050de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4013      	ands	r3, r2
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	bf0c      	ite	eq
 80050ce:	2301      	moveq	r3, #1
 80050d0:	2300      	movne	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d09f      	beq.n	800501c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3740      	adds	r7, #64	; 0x40
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050ec:	b0c0      	sub	sp, #256	; 0x100
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005104:	68d9      	ldr	r1, [r3, #12]
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	ea40 0301 	orr.w	r3, r0, r1
 8005110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	431a      	orrs	r2, r3
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	431a      	orrs	r2, r3
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005140:	f021 010c 	bic.w	r1, r1, #12
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800514e:	430b      	orrs	r3, r1
 8005150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800515e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005162:	6999      	ldr	r1, [r3, #24]
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	ea40 0301 	orr.w	r3, r0, r1
 800516e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4b8f      	ldr	r3, [pc, #572]	; (80053b4 <UART_SetConfig+0x2cc>)
 8005178:	429a      	cmp	r2, r3
 800517a:	d005      	beq.n	8005188 <UART_SetConfig+0xa0>
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b8d      	ldr	r3, [pc, #564]	; (80053b8 <UART_SetConfig+0x2d0>)
 8005184:	429a      	cmp	r2, r3
 8005186:	d104      	bne.n	8005192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005188:	f7fe fa12 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 800518c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005190:	e003      	b.n	800519a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005192:	f7fe f9f9 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8005196:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800519a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a4:	f040 810c 	bne.w	80053c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051ba:	4622      	mov	r2, r4
 80051bc:	462b      	mov	r3, r5
 80051be:	1891      	adds	r1, r2, r2
 80051c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80051c2:	415b      	adcs	r3, r3
 80051c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051ca:	4621      	mov	r1, r4
 80051cc:	eb12 0801 	adds.w	r8, r2, r1
 80051d0:	4629      	mov	r1, r5
 80051d2:	eb43 0901 	adc.w	r9, r3, r1
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ea:	4690      	mov	r8, r2
 80051ec:	4699      	mov	r9, r3
 80051ee:	4623      	mov	r3, r4
 80051f0:	eb18 0303 	adds.w	r3, r8, r3
 80051f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051f8:	462b      	mov	r3, r5
 80051fa:	eb49 0303 	adc.w	r3, r9, r3
 80051fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800520e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005216:	460b      	mov	r3, r1
 8005218:	18db      	adds	r3, r3, r3
 800521a:	653b      	str	r3, [r7, #80]	; 0x50
 800521c:	4613      	mov	r3, r2
 800521e:	eb42 0303 	adc.w	r3, r2, r3
 8005222:	657b      	str	r3, [r7, #84]	; 0x54
 8005224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800522c:	f7fb fd34 	bl	8000c98 <__aeabi_uldivmod>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4b61      	ldr	r3, [pc, #388]	; (80053bc <UART_SetConfig+0x2d4>)
 8005236:	fba3 2302 	umull	r2, r3, r3, r2
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	011c      	lsls	r4, r3, #4
 800523e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005242:	2200      	movs	r2, #0
 8005244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005248:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800524c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005250:	4642      	mov	r2, r8
 8005252:	464b      	mov	r3, r9
 8005254:	1891      	adds	r1, r2, r2
 8005256:	64b9      	str	r1, [r7, #72]	; 0x48
 8005258:	415b      	adcs	r3, r3
 800525a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800525c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005260:	4641      	mov	r1, r8
 8005262:	eb12 0a01 	adds.w	sl, r2, r1
 8005266:	4649      	mov	r1, r9
 8005268:	eb43 0b01 	adc.w	fp, r3, r1
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800527c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005280:	4692      	mov	sl, r2
 8005282:	469b      	mov	fp, r3
 8005284:	4643      	mov	r3, r8
 8005286:	eb1a 0303 	adds.w	r3, sl, r3
 800528a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800528e:	464b      	mov	r3, r9
 8005290:	eb4b 0303 	adc.w	r3, fp, r3
 8005294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052ac:	460b      	mov	r3, r1
 80052ae:	18db      	adds	r3, r3, r3
 80052b0:	643b      	str	r3, [r7, #64]	; 0x40
 80052b2:	4613      	mov	r3, r2
 80052b4:	eb42 0303 	adc.w	r3, r2, r3
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052c2:	f7fb fce9 	bl	8000c98 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <UART_SetConfig+0x2d4>)
 80052ce:	fba3 2301 	umull	r2, r3, r3, r1
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	2264      	movs	r2, #100	; 0x64
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	1acb      	subs	r3, r1, r3
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052e2:	4b36      	ldr	r3, [pc, #216]	; (80053bc <UART_SetConfig+0x2d4>)
 80052e4:	fba3 2302 	umull	r2, r3, r3, r2
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052f0:	441c      	add	r4, r3
 80052f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005304:	4642      	mov	r2, r8
 8005306:	464b      	mov	r3, r9
 8005308:	1891      	adds	r1, r2, r2
 800530a:	63b9      	str	r1, [r7, #56]	; 0x38
 800530c:	415b      	adcs	r3, r3
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005314:	4641      	mov	r1, r8
 8005316:	1851      	adds	r1, r2, r1
 8005318:	6339      	str	r1, [r7, #48]	; 0x30
 800531a:	4649      	mov	r1, r9
 800531c:	414b      	adcs	r3, r1
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800532c:	4659      	mov	r1, fp
 800532e:	00cb      	lsls	r3, r1, #3
 8005330:	4651      	mov	r1, sl
 8005332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005336:	4651      	mov	r1, sl
 8005338:	00ca      	lsls	r2, r1, #3
 800533a:	4610      	mov	r0, r2
 800533c:	4619      	mov	r1, r3
 800533e:	4603      	mov	r3, r0
 8005340:	4642      	mov	r2, r8
 8005342:	189b      	adds	r3, r3, r2
 8005344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005348:	464b      	mov	r3, r9
 800534a:	460a      	mov	r2, r1
 800534c:	eb42 0303 	adc.w	r3, r2, r3
 8005350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005360:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005368:	460b      	mov	r3, r1
 800536a:	18db      	adds	r3, r3, r3
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
 800536e:	4613      	mov	r3, r2
 8005370:	eb42 0303 	adc.w	r3, r2, r3
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800537a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800537e:	f7fb fc8b 	bl	8000c98 <__aeabi_uldivmod>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <UART_SetConfig+0x2d4>)
 8005388:	fba3 1302 	umull	r1, r3, r3, r2
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	2164      	movs	r1, #100	; 0x64
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	3332      	adds	r3, #50	; 0x32
 800539a:	4a08      	ldr	r2, [pc, #32]	; (80053bc <UART_SetConfig+0x2d4>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	f003 0207 	and.w	r2, r3, #7
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4422      	add	r2, r4
 80053ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053b0:	e106      	b.n	80055c0 <UART_SetConfig+0x4d8>
 80053b2:	bf00      	nop
 80053b4:	40011000 	.word	0x40011000
 80053b8:	40011400 	.word	0x40011400
 80053bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053d2:	4642      	mov	r2, r8
 80053d4:	464b      	mov	r3, r9
 80053d6:	1891      	adds	r1, r2, r2
 80053d8:	6239      	str	r1, [r7, #32]
 80053da:	415b      	adcs	r3, r3
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
 80053de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053e2:	4641      	mov	r1, r8
 80053e4:	1854      	adds	r4, r2, r1
 80053e6:	4649      	mov	r1, r9
 80053e8:	eb43 0501 	adc.w	r5, r3, r1
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	00eb      	lsls	r3, r5, #3
 80053f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fa:	00e2      	lsls	r2, r4, #3
 80053fc:	4614      	mov	r4, r2
 80053fe:	461d      	mov	r5, r3
 8005400:	4643      	mov	r3, r8
 8005402:	18e3      	adds	r3, r4, r3
 8005404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005408:	464b      	mov	r3, r9
 800540a:	eb45 0303 	adc.w	r3, r5, r3
 800540e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800541e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800542e:	4629      	mov	r1, r5
 8005430:	008b      	lsls	r3, r1, #2
 8005432:	4621      	mov	r1, r4
 8005434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005438:	4621      	mov	r1, r4
 800543a:	008a      	lsls	r2, r1, #2
 800543c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005440:	f7fb fc2a 	bl	8000c98 <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4b60      	ldr	r3, [pc, #384]	; (80055cc <UART_SetConfig+0x4e4>)
 800544a:	fba3 2302 	umull	r2, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	011c      	lsls	r4, r3, #4
 8005452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800545c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005464:	4642      	mov	r2, r8
 8005466:	464b      	mov	r3, r9
 8005468:	1891      	adds	r1, r2, r2
 800546a:	61b9      	str	r1, [r7, #24]
 800546c:	415b      	adcs	r3, r3
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005474:	4641      	mov	r1, r8
 8005476:	1851      	adds	r1, r2, r1
 8005478:	6139      	str	r1, [r7, #16]
 800547a:	4649      	mov	r1, r9
 800547c:	414b      	adcs	r3, r1
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800548c:	4659      	mov	r1, fp
 800548e:	00cb      	lsls	r3, r1, #3
 8005490:	4651      	mov	r1, sl
 8005492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005496:	4651      	mov	r1, sl
 8005498:	00ca      	lsls	r2, r1, #3
 800549a:	4610      	mov	r0, r2
 800549c:	4619      	mov	r1, r3
 800549e:	4603      	mov	r3, r0
 80054a0:	4642      	mov	r2, r8
 80054a2:	189b      	adds	r3, r3, r2
 80054a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054a8:	464b      	mov	r3, r9
 80054aa:	460a      	mov	r2, r1
 80054ac:	eb42 0303 	adc.w	r3, r2, r3
 80054b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80054be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054cc:	4649      	mov	r1, r9
 80054ce:	008b      	lsls	r3, r1, #2
 80054d0:	4641      	mov	r1, r8
 80054d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d6:	4641      	mov	r1, r8
 80054d8:	008a      	lsls	r2, r1, #2
 80054da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054de:	f7fb fbdb 	bl	8000c98 <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	4b38      	ldr	r3, [pc, #224]	; (80055cc <UART_SetConfig+0x4e4>)
 80054ea:	fba3 2301 	umull	r2, r3, r3, r1
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	2264      	movs	r2, #100	; 0x64
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	1acb      	subs	r3, r1, r3
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	3332      	adds	r3, #50	; 0x32
 80054fc:	4a33      	ldr	r2, [pc, #204]	; (80055cc <UART_SetConfig+0x4e4>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005508:	441c      	add	r4, r3
 800550a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800550e:	2200      	movs	r2, #0
 8005510:	673b      	str	r3, [r7, #112]	; 0x70
 8005512:	677a      	str	r2, [r7, #116]	; 0x74
 8005514:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	1891      	adds	r1, r2, r2
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	415b      	adcs	r3, r3
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005528:	4641      	mov	r1, r8
 800552a:	1851      	adds	r1, r2, r1
 800552c:	6039      	str	r1, [r7, #0]
 800552e:	4649      	mov	r1, r9
 8005530:	414b      	adcs	r3, r1
 8005532:	607b      	str	r3, [r7, #4]
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005540:	4659      	mov	r1, fp
 8005542:	00cb      	lsls	r3, r1, #3
 8005544:	4651      	mov	r1, sl
 8005546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554a:	4651      	mov	r1, sl
 800554c:	00ca      	lsls	r2, r1, #3
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	4603      	mov	r3, r0
 8005554:	4642      	mov	r2, r8
 8005556:	189b      	adds	r3, r3, r2
 8005558:	66bb      	str	r3, [r7, #104]	; 0x68
 800555a:	464b      	mov	r3, r9
 800555c:	460a      	mov	r2, r1
 800555e:	eb42 0303 	adc.w	r3, r2, r3
 8005562:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	663b      	str	r3, [r7, #96]	; 0x60
 800556e:	667a      	str	r2, [r7, #100]	; 0x64
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800557c:	4649      	mov	r1, r9
 800557e:	008b      	lsls	r3, r1, #2
 8005580:	4641      	mov	r1, r8
 8005582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005586:	4641      	mov	r1, r8
 8005588:	008a      	lsls	r2, r1, #2
 800558a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800558e:	f7fb fb83 	bl	8000c98 <__aeabi_uldivmod>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <UART_SetConfig+0x4e4>)
 8005598:	fba3 1302 	umull	r1, r3, r3, r2
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	2164      	movs	r1, #100	; 0x64
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	3332      	adds	r3, #50	; 0x32
 80055aa:	4a08      	ldr	r2, [pc, #32]	; (80055cc <UART_SetConfig+0x4e4>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	f003 020f 	and.w	r2, r3, #15
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4422      	add	r2, r4
 80055be:	609a      	str	r2, [r3, #8]
}
 80055c0:	bf00      	nop
 80055c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055c6:	46bd      	mov	sp, r7
 80055c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055cc:	51eb851f 	.word	0x51eb851f

080055d0 <__NVIC_SetPriority>:
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	6039      	str	r1, [r7, #0]
 80055da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	db0a      	blt.n	80055fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	490c      	ldr	r1, [pc, #48]	; (800561c <__NVIC_SetPriority+0x4c>)
 80055ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ee:	0112      	lsls	r2, r2, #4
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	440b      	add	r3, r1
 80055f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055f8:	e00a      	b.n	8005610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	4908      	ldr	r1, [pc, #32]	; (8005620 <__NVIC_SetPriority+0x50>)
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	3b04      	subs	r3, #4
 8005608:	0112      	lsls	r2, r2, #4
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	440b      	add	r3, r1
 800560e:	761a      	strb	r2, [r3, #24]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	e000e100 	.word	0xe000e100
 8005620:	e000ed00 	.word	0xe000ed00

08005624 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005628:	2100      	movs	r1, #0
 800562a:	f06f 0004 	mvn.w	r0, #4
 800562e:	f7ff ffcf 	bl	80055d0 <__NVIC_SetPriority>
#endif
}
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800563e:	f3ef 8305 	mrs	r3, IPSR
 8005642:	603b      	str	r3, [r7, #0]
  return(result);
 8005644:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800564a:	f06f 0305 	mvn.w	r3, #5
 800564e:	607b      	str	r3, [r7, #4]
 8005650:	e00c      	b.n	800566c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <osKernelInitialize+0x44>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800565a:	4b08      	ldr	r3, [pc, #32]	; (800567c <osKernelInitialize+0x44>)
 800565c:	2201      	movs	r2, #1
 800565e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005660:	2300      	movs	r3, #0
 8005662:	607b      	str	r3, [r7, #4]
 8005664:	e002      	b.n	800566c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800566a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800566c:	687b      	ldr	r3, [r7, #4]
}
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000cb8 	.word	0x20000cb8

08005680 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005686:	f3ef 8305 	mrs	r3, IPSR
 800568a:	603b      	str	r3, [r7, #0]
  return(result);
 800568c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005692:	f06f 0305 	mvn.w	r3, #5
 8005696:	607b      	str	r3, [r7, #4]
 8005698:	e010      	b.n	80056bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800569a:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <osKernelStart+0x48>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d109      	bne.n	80056b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056a2:	f7ff ffbf 	bl	8005624 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056a6:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <osKernelStart+0x48>)
 80056a8:	2202      	movs	r2, #2
 80056aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056ac:	f001 fca2 	bl	8006ff4 <vTaskStartScheduler>
      stat = osOK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	607b      	str	r3, [r7, #4]
 80056b4:	e002      	b.n	80056bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80056b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056bc:	687b      	ldr	r3, [r7, #4]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000cb8 	.word	0x20000cb8

080056cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08e      	sub	sp, #56	; 0x38
 80056d0:	af04      	add	r7, sp, #16
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056dc:	f3ef 8305 	mrs	r3, IPSR
 80056e0:	617b      	str	r3, [r7, #20]
  return(result);
 80056e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d17e      	bne.n	80057e6 <osThreadNew+0x11a>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d07b      	beq.n	80057e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056f2:	2318      	movs	r3, #24
 80056f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80056fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d045      	beq.n	8005792 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <osThreadNew+0x48>
        name = attr->name;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <osThreadNew+0x6e>
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b38      	cmp	r3, #56	; 0x38
 800572c:	d805      	bhi.n	800573a <osThreadNew+0x6e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <osThreadNew+0x72>
        return (NULL);
 800573a:	2300      	movs	r3, #0
 800573c:	e054      	b.n	80057e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00e      	beq.n	8005774 <osThreadNew+0xa8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2ba7      	cmp	r3, #167	; 0xa7
 800575c:	d90a      	bls.n	8005774 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005762:	2b00      	cmp	r3, #0
 8005764:	d006      	beq.n	8005774 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <osThreadNew+0xa8>
        mem = 1;
 800576e:	2301      	movs	r3, #1
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	e010      	b.n	8005796 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10c      	bne.n	8005796 <osThreadNew+0xca>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d108      	bne.n	8005796 <osThreadNew+0xca>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <osThreadNew+0xca>
          mem = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	e001      	b.n	8005796 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d110      	bne.n	80057be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057a4:	9202      	str	r2, [sp, #8]
 80057a6:	9301      	str	r3, [sp, #4]
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6a3a      	ldr	r2, [r7, #32]
 80057b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f001 fa32 	bl	8006c1c <xTaskCreateStatic>
 80057b8:	4603      	mov	r3, r0
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	e013      	b.n	80057e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d110      	bne.n	80057e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f107 0310 	add.w	r3, r7, #16
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f001 fa7d 	bl	8006cd6 <xTaskCreate>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d001      	beq.n	80057e6 <osThreadNew+0x11a>
            hTask = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057e6:	693b      	ldr	r3, [r7, #16]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3728      	adds	r7, #40	; 0x28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005800:	f3ef 8305 	mrs	r3, IPSR
 8005804:	613b      	str	r3, [r7, #16]
  return(result);
 8005806:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005808:	2b00      	cmp	r3, #0
 800580a:	d175      	bne.n	80058f8 <osSemaphoreNew+0x108>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d072      	beq.n	80058f8 <osSemaphoreNew+0x108>
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	429a      	cmp	r2, r3
 8005818:	d86e      	bhi.n	80058f8 <osSemaphoreNew+0x108>
    mem = -1;
 800581a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800581e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d015      	beq.n	8005852 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d006      	beq.n	800583c <osSemaphoreNew+0x4c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2b4f      	cmp	r3, #79	; 0x4f
 8005834:	d902      	bls.n	800583c <osSemaphoreNew+0x4c>
        mem = 1;
 8005836:	2301      	movs	r3, #1
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e00c      	b.n	8005856 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d108      	bne.n	8005856 <osSemaphoreNew+0x66>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <osSemaphoreNew+0x66>
          mem = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e001      	b.n	8005856 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800585c:	d04c      	beq.n	80058f8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d128      	bne.n	80058b6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d10a      	bne.n	8005880 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2203      	movs	r2, #3
 8005870:	9200      	str	r2, [sp, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	2100      	movs	r1, #0
 8005876:	2001      	movs	r0, #1
 8005878:	f000 fa2a 	bl	8005cd0 <xQueueGenericCreateStatic>
 800587c:	61f8      	str	r0, [r7, #28]
 800587e:	e005      	b.n	800588c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005880:	2203      	movs	r2, #3
 8005882:	2100      	movs	r1, #0
 8005884:	2001      	movs	r0, #1
 8005886:	f000 fa9b 	bl	8005dc0 <xQueueGenericCreate>
 800588a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d022      	beq.n	80058d8 <osSemaphoreNew+0xe8>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01f      	beq.n	80058d8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005898:	2300      	movs	r3, #0
 800589a:	2200      	movs	r2, #0
 800589c:	2100      	movs	r1, #0
 800589e:	69f8      	ldr	r0, [r7, #28]
 80058a0:	f000 fb56 	bl	8005f50 <xQueueGenericSend>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d016      	beq.n	80058d8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80058aa:	69f8      	ldr	r0, [r7, #28]
 80058ac:	f000 ffe2 	bl	8006874 <vQueueDelete>
            hSemaphore = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	e010      	b.n	80058d8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d108      	bne.n	80058ce <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	461a      	mov	r2, r3
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fad8 	bl	8005e7a <xQueueCreateCountingSemaphoreStatic>
 80058ca:	61f8      	str	r0, [r7, #28]
 80058cc:	e004      	b.n	80058d8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fb09 	bl	8005ee8 <xQueueCreateCountingSemaphore>
 80058d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <osSemaphoreNew+0xfc>
          name = attr->name;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e001      	b.n	80058f0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80058f0:	6979      	ldr	r1, [r7, #20]
 80058f2:	69f8      	ldr	r0, [r7, #28]
 80058f4:	f001 f90a 	bl	8006b0c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80058f8:	69fb      	ldr	r3, [r7, #28]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d103      	bne.n	8005924 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800591c:	f06f 0303 	mvn.w	r3, #3
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e039      	b.n	8005998 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005924:	f3ef 8305 	mrs	r3, IPSR
 8005928:	60fb      	str	r3, [r7, #12]
  return(result);
 800592a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800592c:	2b00      	cmp	r3, #0
 800592e:	d022      	beq.n	8005976 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005936:	f06f 0303 	mvn.w	r3, #3
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e02c      	b.n	8005998 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005942:	f107 0308 	add.w	r3, r7, #8
 8005946:	461a      	mov	r2, r3
 8005948:	2100      	movs	r1, #0
 800594a:	6938      	ldr	r0, [r7, #16]
 800594c:	f000 ff12 	bl	8006774 <xQueueReceiveFromISR>
 8005950:	4603      	mov	r3, r0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d003      	beq.n	800595e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005956:	f06f 0302 	mvn.w	r3, #2
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e01c      	b.n	8005998 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d019      	beq.n	8005998 <osSemaphoreAcquire+0x94>
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <osSemaphoreAcquire+0xa0>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	e010      	b.n	8005998 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6938      	ldr	r0, [r7, #16]
 800597a:	f000 fdef 	bl	800655c <xQueueSemaphoreTake>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d009      	beq.n	8005998 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800598a:	f06f 0301 	mvn.w	r3, #1
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	e002      	b.n	8005998 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005992:	f06f 0302 	mvn.w	r3, #2
 8005996:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005998:	697b      	ldr	r3, [r7, #20]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	e000ed04 	.word	0xe000ed04

080059a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80059be:	f06f 0303 	mvn.w	r3, #3
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e02c      	b.n	8005a20 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c6:	f3ef 8305 	mrs	r3, IPSR
 80059ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80059cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01a      	beq.n	8005a08 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80059d6:	f107 0308 	add.w	r3, r7, #8
 80059da:	4619      	mov	r1, r3
 80059dc:	6938      	ldr	r0, [r7, #16]
 80059de:	f000 fc50 	bl	8006282 <xQueueGiveFromISR>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d003      	beq.n	80059f0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80059e8:	f06f 0302 	mvn.w	r3, #2
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e017      	b.n	8005a20 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d014      	beq.n	8005a20 <osSemaphoreRelease+0x78>
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <osSemaphoreRelease+0x84>)
 80059f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	e00b      	b.n	8005a20 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	6938      	ldr	r0, [r7, #16]
 8005a10:	f000 fa9e 	bl	8005f50 <xQueueGenericSend>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d002      	beq.n	8005a20 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005a1a:	f06f 0302 	mvn.w	r3, #2
 8005a1e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005a20:	697b      	ldr	r3, [r7, #20]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	e000ed04 	.word	0xe000ed04

08005a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8005a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4a06      	ldr	r2, [pc, #24]	; (8005a60 <vApplicationGetIdleTaskMemory+0x30>)
 8005a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	601a      	str	r2, [r3, #0]
}
 8005a4e:	bf00      	nop
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000cbc 	.word	0x20000cbc
 8005a60:	20000d64 	.word	0x20000d64

08005a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a07      	ldr	r2, [pc, #28]	; (8005a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4a06      	ldr	r2, [pc, #24]	; (8005a94 <vApplicationGetTimerTaskMemory+0x30>)
 8005a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a82:	601a      	str	r2, [r3, #0]
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	20000f64 	.word	0x20000f64
 8005a94:	2000100c 	.word	0x2000100c

08005a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f103 0208 	add.w	r2, r3, #8
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f103 0208 	add.w	r2, r3, #8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f103 0208 	add.w	r2, r3, #8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b50:	d103      	bne.n	8005b5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e00c      	b.n	8005b74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e002      	b.n	8005b68 <vListInsert+0x2e>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d2f6      	bcs.n	8005b62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	601a      	str	r2, [r3, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6892      	ldr	r2, [r2, #8]
 8005bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6852      	ldr	r2, [r2, #4]
 8005bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d103      	bne.n	8005be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	1e5a      	subs	r2, r3, #1
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c2a:	f002 fc9b 	bl	8008564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c3a:	fb01 f303 	mul.w	r3, r1, r3
 8005c3e:	441a      	add	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	68f9      	ldr	r1, [r7, #12]
 8005c5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	22ff      	movs	r2, #255	; 0xff
 8005c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	22ff      	movs	r2, #255	; 0xff
 8005c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d114      	bne.n	8005caa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01a      	beq.n	8005cbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3310      	adds	r3, #16
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 fc4b 	bl	8007528 <xTaskRemoveFromEventList>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d012      	beq.n	8005cbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <xQueueGenericReset+0xcc>)
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	e009      	b.n	8005cbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3310      	adds	r3, #16
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fef2 	bl	8005a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3324      	adds	r3, #36	; 0x24
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff feed 	bl	8005a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cbe:	f002 fc81 	bl	80085c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cc2:	2301      	movs	r3, #1
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	e000ed04 	.word	0xe000ed04

08005cd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08e      	sub	sp, #56	; 0x38
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10a      	bne.n	8005d16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <xQueueGenericCreateStatic+0x52>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <xQueueGenericCreateStatic+0x56>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <xQueueGenericCreateStatic+0x58>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	623b      	str	r3, [r7, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <xQueueGenericCreateStatic+0x7e>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <xQueueGenericCreateStatic+0x82>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <xQueueGenericCreateStatic+0x84>
 8005d52:	2300      	movs	r3, #0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	61fb      	str	r3, [r7, #28]
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d6e:	2350      	movs	r3, #80	; 0x50
 8005d70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b50      	cmp	r3, #80	; 0x50
 8005d76:	d00a      	beq.n	8005d8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	61bb      	str	r3, [r7, #24]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00d      	beq.n	8005db6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005da2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	4613      	mov	r3, r2
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f83f 	bl	8005e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3730      	adds	r7, #48	; 0x30
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08a      	sub	sp, #40	; 0x28
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <xQueueGenericCreate+0x2a>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	613b      	str	r3, [r7, #16]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	fb02 f303 	mul.w	r3, r2, r3
 8005df2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	3350      	adds	r3, #80	; 0x50
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f002 fcd5 	bl	80087a8 <pvPortMalloc>
 8005dfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d011      	beq.n	8005e2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	3350      	adds	r3, #80	; 0x50
 8005e0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e18:	79fa      	ldrb	r2, [r7, #7]
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f805 	bl	8005e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
	}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d103      	bne.n	8005e50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	e002      	b.n	8005e56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e62:	2101      	movs	r1, #1
 8005e64:	69b8      	ldr	r0, [r7, #24]
 8005e66:	f7ff fecb 	bl	8005c00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e72:	bf00      	nop
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b08a      	sub	sp, #40	; 0x28
 8005e7e:	af02      	add	r7, sp, #8
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	61bb      	str	r3, [r7, #24]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d90a      	bls.n	8005ec0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	617b      	str	r3, [r7, #20]
}
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	2100      	movs	r1, #0
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7ff ff00 	bl	8005cd0 <xQueueGenericCreateStatic>
 8005ed0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ede:	69fb      	ldr	r3, [r7, #28]
	}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	613b      	str	r3, [r7, #16]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d90a      	bls.n	8005f2c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	60fb      	str	r3, [r7, #12]
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	2100      	movs	r1, #0
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff ff45 	bl	8005dc0 <xQueueGenericCreate>
 8005f36:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f44:	697b      	ldr	r3, [r7, #20]
	}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08e      	sub	sp, #56	; 0x38
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <xQueueGenericSend+0x32>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d103      	bne.n	8005f90 <xQueueGenericSend+0x40>
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <xQueueGenericSend+0x44>
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <xQueueGenericSend+0x46>
 8005f94:	2300      	movs	r3, #0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <xQueueGenericSend+0x60>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d103      	bne.n	8005fbe <xQueueGenericSend+0x6e>
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <xQueueGenericSend+0x72>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <xQueueGenericSend+0x74>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <xQueueGenericSend+0x8e>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	623b      	str	r3, [r7, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fde:	f001 fc65 	bl	80078ac <xTaskGetSchedulerState>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <xQueueGenericSend+0x9e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <xQueueGenericSend+0xa2>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <xQueueGenericSend+0xa4>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xQueueGenericSend+0xbe>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	61fb      	str	r3, [r7, #28]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800600e:	f002 faa9 	bl	8008564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	429a      	cmp	r2, r3
 800601c:	d302      	bcc.n	8006024 <xQueueGenericSend+0xd4>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d129      	bne.n	8006078 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800602a:	f000 fc5e 	bl	80068ea <prvCopyDataToQueue>
 800602e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	d010      	beq.n	800605a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	3324      	adds	r3, #36	; 0x24
 800603c:	4618      	mov	r0, r3
 800603e:	f001 fa73 	bl	8007528 <xTaskRemoveFromEventList>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d013      	beq.n	8006070 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006048:	4b3f      	ldr	r3, [pc, #252]	; (8006148 <xQueueGenericSend+0x1f8>)
 800604a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	e00a      	b.n	8006070 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006060:	4b39      	ldr	r3, [pc, #228]	; (8006148 <xQueueGenericSend+0x1f8>)
 8006062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006070:	f002 faa8 	bl	80085c4 <vPortExitCritical>
				return pdPASS;
 8006074:	2301      	movs	r3, #1
 8006076:	e063      	b.n	8006140 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d103      	bne.n	8006086 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800607e:	f002 faa1 	bl	80085c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006082:	2300      	movs	r3, #0
 8006084:	e05c      	b.n	8006140 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	4618      	mov	r0, r3
 8006092:	f001 faad 	bl	80075f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006096:	2301      	movs	r3, #1
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800609a:	f002 fa93 	bl	80085c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800609e:	f001 f819 	bl	80070d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060a2:	f002 fa5f 	bl	8008564 <vPortEnterCritical>
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060ac:	b25b      	sxtb	r3, r3
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b2:	d103      	bne.n	80060bc <xQueueGenericSend+0x16c>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060c8:	d103      	bne.n	80060d2 <xQueueGenericSend+0x182>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060d2:	f002 fa77 	bl	80085c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060d6:	1d3a      	adds	r2, r7, #4
 80060d8:	f107 0314 	add.w	r3, r7, #20
 80060dc:	4611      	mov	r1, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fa9c 	bl	800761c <xTaskCheckForTimeOut>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d124      	bne.n	8006134 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ec:	f000 fcf5 	bl	8006ada <prvIsQueueFull>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d018      	beq.n	8006128 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	3310      	adds	r3, #16
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	4611      	mov	r1, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 f9c2 	bl	8007488 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006106:	f000 fc80 	bl	8006a0a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800610a:	f000 fff1 	bl	80070f0 <xTaskResumeAll>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	f47f af7c 	bne.w	800600e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <xQueueGenericSend+0x1f8>)
 8006118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	e772      	b.n	800600e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800612a:	f000 fc6e 	bl	8006a0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800612e:	f000 ffdf 	bl	80070f0 <xTaskResumeAll>
 8006132:	e76c      	b.n	800600e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006136:	f000 fc68 	bl	8006a0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800613a:	f000 ffd9 	bl	80070f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800613e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006140:	4618      	mov	r0, r3
 8006142:	3738      	adds	r7, #56	; 0x38
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b090      	sub	sp, #64	; 0x40
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d103      	bne.n	8006188 <xQueueGenericSendFromISR+0x3c>
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <xQueueGenericSendFromISR+0x40>
 8006188:	2301      	movs	r3, #1
 800618a:	e000      	b.n	800618e <xQueueGenericSendFromISR+0x42>
 800618c:	2300      	movs	r3, #0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d103      	bne.n	80061b6 <xQueueGenericSendFromISR+0x6a>
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <xQueueGenericSendFromISR+0x6e>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <xQueueGenericSendFromISR+0x70>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	623b      	str	r3, [r7, #32]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061d6:	f002 faa7 	bl	8008728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061da:	f3ef 8211 	mrs	r2, BASEPRI
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	61fa      	str	r2, [r7, #28]
 80061f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <xQueueGenericSendFromISR+0xbc>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d12f      	bne.n	8006268 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800620e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800621e:	f000 fb64 	bl	80068ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006222:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800622a:	d112      	bne.n	8006252 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d016      	beq.n	8006262 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	4618      	mov	r0, r3
 800623a:	f001 f975 	bl	8007528 <xTaskRemoveFromEventList>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00e      	beq.n	8006262 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e007      	b.n	8006262 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006252:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006256:	3301      	adds	r3, #1
 8006258:	b2db      	uxtb	r3, r3
 800625a:	b25a      	sxtb	r2, r3
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006262:	2301      	movs	r3, #1
 8006264:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006266:	e001      	b.n	800626c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006268:	2300      	movs	r3, #0
 800626a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006276:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800627a:	4618      	mov	r0, r3
 800627c:	3740      	adds	r7, #64	; 0x40
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b08e      	sub	sp, #56	; 0x38
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10a      	bne.n	80062ac <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	623b      	str	r3, [r7, #32]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <xQueueGiveFromISR+0x48>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	61fb      	str	r3, [r7, #28]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <xQueueGiveFromISR+0x58>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <xQueueGiveFromISR+0x5c>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <xQueueGiveFromISR+0x5e>
 80062de:	2300      	movs	r3, #0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <xQueueGiveFromISR+0x78>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	61bb      	str	r3, [r7, #24]
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062fa:	f002 fa15 	bl	8008728 <vPortValidateInterruptPriority>
	__asm volatile
 80062fe:	f3ef 8211 	mrs	r2, BASEPRI
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	617a      	str	r2, [r7, #20]
 8006314:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006316:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006326:	429a      	cmp	r2, r3
 8006328:	d22b      	bcs.n	8006382 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800633c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006344:	d112      	bne.n	800636c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d016      	beq.n	800637c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	3324      	adds	r3, #36	; 0x24
 8006352:	4618      	mov	r0, r3
 8006354:	f001 f8e8 	bl	8007528 <xTaskRemoveFromEventList>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00e      	beq.n	800637c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2201      	movs	r2, #1
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	e007      	b.n	800637c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800636c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006370:	3301      	adds	r3, #1
 8006372:	b2db      	uxtb	r3, r3
 8006374:	b25a      	sxtb	r2, r3
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800637c:	2301      	movs	r3, #1
 800637e:	637b      	str	r3, [r7, #52]	; 0x34
 8006380:	e001      	b.n	8006386 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006382:	2300      	movs	r3, #0
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f383 8811 	msr	BASEPRI, r3
}
 8006390:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006394:	4618      	mov	r0, r3
 8006396:	3738      	adds	r7, #56	; 0x38
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08c      	sub	sp, #48	; 0x30
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10a      	bne.n	80063cc <xQueueReceive+0x30>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	623b      	str	r3, [r7, #32]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d103      	bne.n	80063da <xQueueReceive+0x3e>
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <xQueueReceive+0x42>
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <xQueueReceive+0x44>
 80063de:	2300      	movs	r3, #0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xQueueReceive+0x5e>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	61fb      	str	r3, [r7, #28]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063fa:	f001 fa57 	bl	80078ac <xTaskGetSchedulerState>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <xQueueReceive+0x6e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <xQueueReceive+0x72>
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <xQueueReceive+0x74>
 800640e:	2300      	movs	r3, #0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <xQueueReceive+0x8e>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	61bb      	str	r3, [r7, #24]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800642a:	f002 f89b 	bl	8008564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01f      	beq.n	800647a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800643e:	f000 fabe 	bl	80069be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	1e5a      	subs	r2, r3, #1
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00f      	beq.n	8006472 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	3310      	adds	r3, #16
 8006456:	4618      	mov	r0, r3
 8006458:	f001 f866 	bl	8007528 <xTaskRemoveFromEventList>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006462:	4b3d      	ldr	r3, [pc, #244]	; (8006558 <xQueueReceive+0x1bc>)
 8006464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006472:	f002 f8a7 	bl	80085c4 <vPortExitCritical>
				return pdPASS;
 8006476:	2301      	movs	r3, #1
 8006478:	e069      	b.n	800654e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006480:	f002 f8a0 	bl	80085c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006484:	2300      	movs	r3, #0
 8006486:	e062      	b.n	800654e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800648e:	f107 0310 	add.w	r3, r7, #16
 8006492:	4618      	mov	r0, r3
 8006494:	f001 f8ac 	bl	80075f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800649c:	f002 f892 	bl	80085c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064a0:	f000 fe18 	bl	80070d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064a4:	f002 f85e 	bl	8008564 <vPortEnterCritical>
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ae:	b25b      	sxtb	r3, r3
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064b4:	d103      	bne.n	80064be <xQueueReceive+0x122>
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ca:	d103      	bne.n	80064d4 <xQueueReceive+0x138>
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064d4:	f002 f876 	bl	80085c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064d8:	1d3a      	adds	r2, r7, #4
 80064da:	f107 0310 	add.w	r3, r7, #16
 80064de:	4611      	mov	r1, r2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 f89b 	bl	800761c <xTaskCheckForTimeOut>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d123      	bne.n	8006534 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ee:	f000 fade 	bl	8006aae <prvIsQueueEmpty>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d017      	beq.n	8006528 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	3324      	adds	r3, #36	; 0x24
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	4611      	mov	r1, r2
 8006500:	4618      	mov	r0, r3
 8006502:	f000 ffc1 	bl	8007488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006508:	f000 fa7f 	bl	8006a0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800650c:	f000 fdf0 	bl	80070f0 <xTaskResumeAll>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d189      	bne.n	800642a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <xQueueReceive+0x1bc>)
 8006518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	e780      	b.n	800642a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652a:	f000 fa6e 	bl	8006a0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800652e:	f000 fddf 	bl	80070f0 <xTaskResumeAll>
 8006532:	e77a      	b.n	800642a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006536:	f000 fa68 	bl	8006a0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800653a:	f000 fdd9 	bl	80070f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800653e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006540:	f000 fab5 	bl	8006aae <prvIsQueueEmpty>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	f43f af6f 	beq.w	800642a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800654c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800654e:	4618      	mov	r0, r3
 8006550:	3730      	adds	r7, #48	; 0x30
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08e      	sub	sp, #56	; 0x38
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006566:	2300      	movs	r3, #0
 8006568:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800656e:	2300      	movs	r3, #0
 8006570:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	623b      	str	r3, [r7, #32]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	61fb      	str	r3, [r7, #28]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065ac:	f001 f97e 	bl	80078ac <xTaskGetSchedulerState>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d102      	bne.n	80065bc <xQueueSemaphoreTake+0x60>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <xQueueSemaphoreTake+0x64>
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <xQueueSemaphoreTake+0x66>
 80065c0:	2300      	movs	r3, #0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	61bb      	str	r3, [r7, #24]
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065dc:	f001 ffc2 	bl	8008564 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d024      	beq.n	8006636 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	1e5a      	subs	r2, r3, #1
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80065fc:	f001 facc 	bl	8007b98 <pvTaskIncrementMutexHeldCount>
 8006600:	4602      	mov	r2, r0
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00f      	beq.n	800662e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	3310      	adds	r3, #16
 8006612:	4618      	mov	r0, r3
 8006614:	f000 ff88 	bl	8007528 <xTaskRemoveFromEventList>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800661e:	4b54      	ldr	r3, [pc, #336]	; (8006770 <xQueueSemaphoreTake+0x214>)
 8006620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800662e:	f001 ffc9 	bl	80085c4 <vPortExitCritical>
				return pdPASS;
 8006632:	2301      	movs	r3, #1
 8006634:	e097      	b.n	8006766 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d111      	bne.n	8006660 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	617b      	str	r3, [r7, #20]
}
 8006654:	bf00      	nop
 8006656:	e7fe      	b.n	8006656 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006658:	f001 ffb4 	bl	80085c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800665c:	2300      	movs	r3, #0
 800665e:	e082      	b.n	8006766 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006666:	f107 030c 	add.w	r3, r7, #12
 800666a:	4618      	mov	r0, r3
 800666c:	f000 ffc0 	bl	80075f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006670:	2301      	movs	r3, #1
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006674:	f001 ffa6 	bl	80085c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006678:	f000 fd2c 	bl	80070d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800667c:	f001 ff72 	bl	8008564 <vPortEnterCritical>
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006686:	b25b      	sxtb	r3, r3
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800668c:	d103      	bne.n	8006696 <xQueueSemaphoreTake+0x13a>
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800669c:	b25b      	sxtb	r3, r3
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066a2:	d103      	bne.n	80066ac <xQueueSemaphoreTake+0x150>
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ac:	f001 ff8a 	bl	80085c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066b0:	463a      	mov	r2, r7
 80066b2:	f107 030c 	add.w	r3, r7, #12
 80066b6:	4611      	mov	r1, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 ffaf 	bl	800761c <xTaskCheckForTimeOut>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d132      	bne.n	800672a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066c6:	f000 f9f2 	bl	8006aae <prvIsQueueEmpty>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d026      	beq.n	800671e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d109      	bne.n	80066ec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80066d8:	f001 ff44 	bl	8008564 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 f901 	bl	80078e8 <xTaskPriorityInherit>
 80066e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80066e8:	f001 ff6c 	bl	80085c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	3324      	adds	r3, #36	; 0x24
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	4611      	mov	r1, r2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fec7 	bl	8007488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066fc:	f000 f985 	bl	8006a0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006700:	f000 fcf6 	bl	80070f0 <xTaskResumeAll>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	f47f af68 	bne.w	80065dc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800670c:	4b18      	ldr	r3, [pc, #96]	; (8006770 <xQueueSemaphoreTake+0x214>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	e75e      	b.n	80065dc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800671e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006720:	f000 f973 	bl	8006a0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006724:	f000 fce4 	bl	80070f0 <xTaskResumeAll>
 8006728:	e758      	b.n	80065dc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800672a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800672c:	f000 f96d 	bl	8006a0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006730:	f000 fcde 	bl	80070f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006736:	f000 f9ba 	bl	8006aae <prvIsQueueEmpty>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	f43f af4d 	beq.w	80065dc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00d      	beq.n	8006764 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006748:	f001 ff0c 	bl	8008564 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800674c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800674e:	f000 f8b4 	bl	80068ba <prvGetDisinheritPriorityAfterTimeout>
 8006752:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800675a:	4618      	mov	r0, r3
 800675c:	f001 f99a 	bl	8007a94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006760:	f001 ff30 	bl	80085c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006766:	4618      	mov	r0, r3
 8006768:	3738      	adds	r7, #56	; 0x38
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	e000ed04 	.word	0xe000ed04

08006774 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08e      	sub	sp, #56	; 0x38
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	623b      	str	r3, [r7, #32]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d103      	bne.n	80067ae <xQueueReceiveFromISR+0x3a>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <xQueueReceiveFromISR+0x3e>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <xQueueReceiveFromISR+0x40>
 80067b2:	2300      	movs	r3, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	61fb      	str	r3, [r7, #28]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067ce:	f001 ffab 	bl	8008728 <vPortValidateInterruptPriority>
	__asm volatile
 80067d2:	f3ef 8211 	mrs	r2, BASEPRI
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	61ba      	str	r2, [r7, #24]
 80067e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d02f      	beq.n	800685a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006808:	f000 f8d9 	bl	80069be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	1e5a      	subs	r2, r3, #1
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006814:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800681c:	d112      	bne.n	8006844 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d016      	beq.n	8006854 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	3310      	adds	r3, #16
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fe7c 	bl	8007528 <xTaskRemoveFromEventList>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00b      	beq.n	8006854 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	e007      	b.n	8006854 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006848:	3301      	adds	r3, #1
 800684a:	b2db      	uxtb	r3, r3
 800684c:	b25a      	sxtb	r2, r3
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006854:	2301      	movs	r3, #1
 8006856:	637b      	str	r3, [r7, #52]	; 0x34
 8006858:	e001      	b.n	800685e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800685a:	2300      	movs	r3, #0
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f383 8811 	msr	BASEPRI, r3
}
 8006868:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800686c:	4618      	mov	r0, r3
 800686e:	3738      	adds	r7, #56	; 0x38
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10a      	bne.n	800689c <vQueueDelete+0x28>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60bb      	str	r3, [r7, #8]
}
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f95f 	bl	8006b60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d102      	bne.n	80068b2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f002 f847 	bl	8008940 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80068b2:	bf00      	nop
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d006      	beq.n	80068d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e001      	b.n	80068dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068dc:	68fb      	ldr	r3, [r7, #12]
	}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b086      	sub	sp, #24
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10d      	bne.n	8006924 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d14d      	bne.n	80069ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f84f 	bl	80079b8 <xTaskPriorityDisinherit>
 800691a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	609a      	str	r2, [r3, #8]
 8006922:	e043      	b.n	80069ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d119      	bne.n	800695e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6858      	ldr	r0, [r3, #4]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	461a      	mov	r2, r3
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	f003 fabc 	bl	8009eb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	441a      	add	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	429a      	cmp	r2, r3
 8006952:	d32b      	bcc.n	80069ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	605a      	str	r2, [r3, #4]
 800695c:	e026      	b.n	80069ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68d8      	ldr	r0, [r3, #12]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	461a      	mov	r2, r3
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	f003 faa2 	bl	8009eb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	425b      	negs	r3, r3
 8006978:	441a      	add	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d207      	bcs.n	800699a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	425b      	negs	r3, r3
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d105      	bne.n	80069ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069b4:	697b      	ldr	r3, [r7, #20]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d018      	beq.n	8006a02 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d8:	441a      	add	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d303      	bcc.n	80069f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68d9      	ldr	r1, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	461a      	mov	r2, r3
 80069fc:	6838      	ldr	r0, [r7, #0]
 80069fe:	f003 fa58 	bl	8009eb2 <memcpy>
	}
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a12:	f001 fda7 	bl	8008564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a1c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a1e:	e011      	b.n	8006a44 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d012      	beq.n	8006a4e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3324      	adds	r3, #36	; 0x24
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fd7b 	bl	8007528 <xTaskRemoveFromEventList>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a38:	f000 fe52 	bl	80076e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dce9      	bgt.n	8006a20 <prvUnlockQueue+0x16>
 8006a4c:	e000      	b.n	8006a50 <prvUnlockQueue+0x46>
					break;
 8006a4e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	22ff      	movs	r2, #255	; 0xff
 8006a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a58:	f001 fdb4 	bl	80085c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a5c:	f001 fd82 	bl	8008564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a66:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a68:	e011      	b.n	8006a8e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d012      	beq.n	8006a98 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3310      	adds	r3, #16
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fd56 	bl	8007528 <xTaskRemoveFromEventList>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a82:	f000 fe2d 	bl	80076e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	dce9      	bgt.n	8006a6a <prvUnlockQueue+0x60>
 8006a96:	e000      	b.n	8006a9a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a98:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	22ff      	movs	r2, #255	; 0xff
 8006a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006aa2:	f001 fd8f 	bl	80085c4 <vPortExitCritical>
}
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ab6:	f001 fd55 	bl	8008564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d102      	bne.n	8006ac8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	e001      	b.n	8006acc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006acc:	f001 fd7a 	bl	80085c4 <vPortExitCritical>

	return xReturn;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ae2:	f001 fd3f 	bl	8008564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d102      	bne.n	8006af8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006af2:	2301      	movs	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e001      	b.n	8006afc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006afc:	f001 fd62 	bl	80085c4 <vPortExitCritical>

	return xReturn;
 8006b00:	68fb      	ldr	r3, [r7, #12]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	e014      	b.n	8006b46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b1c:	4a0f      	ldr	r2, [pc, #60]	; (8006b5c <vQueueAddToRegistry+0x50>)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10b      	bne.n	8006b40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b28:	490c      	ldr	r1, [pc, #48]	; (8006b5c <vQueueAddToRegistry+0x50>)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b32:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <vQueueAddToRegistry+0x50>)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	4413      	add	r3, r2
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b3e:	e006      	b.n	8006b4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3301      	adds	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b07      	cmp	r3, #7
 8006b4a:	d9e7      	bls.n	8006b1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	2000140c 	.word	0x2000140c

08006b60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	e016      	b.n	8006b9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006b6e:	4a10      	ldr	r2, [pc, #64]	; (8006bb0 <vQueueUnregisterQueue+0x50>)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	4413      	add	r3, r2
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d10b      	bne.n	8006b96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006b7e:	4a0c      	ldr	r2, [pc, #48]	; (8006bb0 <vQueueUnregisterQueue+0x50>)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2100      	movs	r1, #0
 8006b84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006b88:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <vQueueUnregisterQueue+0x50>)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	4413      	add	r3, r2
 8006b90:	2200      	movs	r2, #0
 8006b92:	605a      	str	r2, [r3, #4]
				break;
 8006b94:	e006      	b.n	8006ba4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b07      	cmp	r3, #7
 8006ba0:	d9e5      	bls.n	8006b6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006ba2:	bf00      	nop
 8006ba4:	bf00      	nop
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	2000140c 	.word	0x2000140c

08006bb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006bc4:	f001 fcce 	bl	8008564 <vPortEnterCritical>
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bce:	b25b      	sxtb	r3, r3
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd4:	d103      	bne.n	8006bde <vQueueWaitForMessageRestricted+0x2a>
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be4:	b25b      	sxtb	r3, r3
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bea:	d103      	bne.n	8006bf4 <vQueueWaitForMessageRestricted+0x40>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bf4:	f001 fce6 	bl	80085c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d106      	bne.n	8006c0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	3324      	adds	r3, #36	; 0x24
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fc61 	bl	80074d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c0e:	6978      	ldr	r0, [r7, #20]
 8006c10:	f7ff fefb 	bl	8006a0a <prvUnlockQueue>
	}
 8006c14:	bf00      	nop
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08e      	sub	sp, #56	; 0x38
 8006c20:	af04      	add	r7, sp, #16
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	623b      	str	r3, [r7, #32]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <xTaskCreateStatic+0x46>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	61fb      	str	r3, [r7, #28]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c62:	23a8      	movs	r3, #168	; 0xa8
 8006c64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2ba8      	cmp	r3, #168	; 0xa8
 8006c6a:	d00a      	beq.n	8006c82 <xTaskCreateStatic+0x66>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	61bb      	str	r3, [r7, #24]
}
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01e      	beq.n	8006cc8 <xTaskCreateStatic+0xac>
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01b      	beq.n	8006cc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	9303      	str	r3, [sp, #12]
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	9302      	str	r3, [sp, #8]
 8006caa:	f107 0314 	add.w	r3, r7, #20
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 f850 	bl	8006d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cc2:	f000 f8f3 	bl	8006eac <prvAddNewTaskToReadyList>
 8006cc6:	e001      	b.n	8006ccc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ccc:	697b      	ldr	r3, [r7, #20]
	}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3728      	adds	r7, #40	; 0x28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b08c      	sub	sp, #48	; 0x30
 8006cda:	af04      	add	r7, sp, #16
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	603b      	str	r3, [r7, #0]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ce6:	88fb      	ldrh	r3, [r7, #6]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 fd5c 	bl	80087a8 <pvPortMalloc>
 8006cf0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00e      	beq.n	8006d16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cf8:	20a8      	movs	r0, #168	; 0xa8
 8006cfa:	f001 fd55 	bl	80087a8 <pvPortMalloc>
 8006cfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d0c:	e005      	b.n	8006d1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d0e:	6978      	ldr	r0, [r7, #20]
 8006d10:	f001 fe16 	bl	8008940 <vPortFree>
 8006d14:	e001      	b.n	8006d1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d017      	beq.n	8006d50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9303      	str	r3, [sp, #12]
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	9302      	str	r3, [sp, #8]
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f80e 	bl	8006d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d44:	69f8      	ldr	r0, [r7, #28]
 8006d46:	f000 f8b1 	bl	8006eac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e002      	b.n	8006d56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d56:	69bb      	ldr	r3, [r7, #24]
	}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3720      	adds	r7, #32
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	461a      	mov	r2, r3
 8006d78:	21a5      	movs	r1, #165	; 0xa5
 8006d7a:	f002 ffc5 	bl	8009d08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f023 0307 	bic.w	r3, r3, #7
 8006d96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	617b      	str	r3, [r7, #20]
}
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d01f      	beq.n	8006dfe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	e012      	b.n	8006dea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	4413      	add	r3, r2
 8006dca:	7819      	ldrb	r1, [r3, #0]
 8006dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3334      	adds	r3, #52	; 0x34
 8006dd4:	460a      	mov	r2, r1
 8006dd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	4413      	add	r3, r2
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	3301      	adds	r3, #1
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	2b0f      	cmp	r3, #15
 8006dee:	d9e9      	bls.n	8006dc4 <prvInitialiseNewTask+0x64>
 8006df0:	e000      	b.n	8006df4 <prvInitialiseNewTask+0x94>
			{
				break;
 8006df2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dfc:	e003      	b.n	8006e06 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e08:	2b37      	cmp	r3, #55	; 0x37
 8006e0a:	d901      	bls.n	8006e10 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e0c:	2337      	movs	r3, #55	; 0x37
 8006e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	2200      	movs	r2, #0
 8006e20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	3304      	adds	r3, #4
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe fe56 	bl	8005ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	3318      	adds	r3, #24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe fe51 	bl	8005ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	3354      	adds	r3, #84	; 0x54
 8006e60:	224c      	movs	r2, #76	; 0x4c
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f002 ff4f 	bl	8009d08 <memset>
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	4a0c      	ldr	r2, [pc, #48]	; (8006ea0 <prvInitialiseNewTask+0x140>)
 8006e6e:	659a      	str	r2, [r3, #88]	; 0x58
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	4a0c      	ldr	r2, [pc, #48]	; (8006ea4 <prvInitialiseNewTask+0x144>)
 8006e74:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	4a0b      	ldr	r2, [pc, #44]	; (8006ea8 <prvInitialiseNewTask+0x148>)
 8006e7a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	68f9      	ldr	r1, [r7, #12]
 8006e80:	69b8      	ldr	r0, [r7, #24]
 8006e82:	f001 fa3f 	bl	8008304 <pxPortInitialiseStack>
 8006e86:	4602      	mov	r2, r0
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e98:	bf00      	nop
 8006e9a:	3720      	adds	r7, #32
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	200056a0 	.word	0x200056a0
 8006ea4:	20005708 	.word	0x20005708
 8006ea8:	20005770 	.word	0x20005770

08006eac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006eb4:	f001 fb56 	bl	8008564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006eb8:	4b2d      	ldr	r3, [pc, #180]	; (8006f70 <prvAddNewTaskToReadyList+0xc4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	4a2c      	ldr	r2, [pc, #176]	; (8006f70 <prvAddNewTaskToReadyList+0xc4>)
 8006ec0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ec2:	4b2c      	ldr	r3, [pc, #176]	; (8006f74 <prvAddNewTaskToReadyList+0xc8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006eca:	4a2a      	ldr	r2, [pc, #168]	; (8006f74 <prvAddNewTaskToReadyList+0xc8>)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ed0:	4b27      	ldr	r3, [pc, #156]	; (8006f70 <prvAddNewTaskToReadyList+0xc4>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d110      	bne.n	8006efa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ed8:	f000 fc26 	bl	8007728 <prvInitialiseTaskLists>
 8006edc:	e00d      	b.n	8006efa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ede:	4b26      	ldr	r3, [pc, #152]	; (8006f78 <prvAddNewTaskToReadyList+0xcc>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d109      	bne.n	8006efa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ee6:	4b23      	ldr	r3, [pc, #140]	; (8006f74 <prvAddNewTaskToReadyList+0xc8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d802      	bhi.n	8006efa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ef4:	4a1f      	ldr	r2, [pc, #124]	; (8006f74 <prvAddNewTaskToReadyList+0xc8>)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006efa:	4b20      	ldr	r3, [pc, #128]	; (8006f7c <prvAddNewTaskToReadyList+0xd0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3301      	adds	r3, #1
 8006f00:	4a1e      	ldr	r2, [pc, #120]	; (8006f7c <prvAddNewTaskToReadyList+0xd0>)
 8006f02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f04:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <prvAddNewTaskToReadyList+0xd0>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4b1b      	ldr	r3, [pc, #108]	; (8006f80 <prvAddNewTaskToReadyList+0xd4>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d903      	bls.n	8006f20 <prvAddNewTaskToReadyList+0x74>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	4a18      	ldr	r2, [pc, #96]	; (8006f80 <prvAddNewTaskToReadyList+0xd4>)
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4a15      	ldr	r2, [pc, #84]	; (8006f84 <prvAddNewTaskToReadyList+0xd8>)
 8006f2e:	441a      	add	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7fe fddb 	bl	8005af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f3c:	f001 fb42 	bl	80085c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f40:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <prvAddNewTaskToReadyList+0xcc>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00e      	beq.n	8006f66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <prvAddNewTaskToReadyList+0xc8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d207      	bcs.n	8006f66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <prvAddNewTaskToReadyList+0xdc>)
 8006f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20001920 	.word	0x20001920
 8006f74:	2000144c 	.word	0x2000144c
 8006f78:	2000192c 	.word	0x2000192c
 8006f7c:	2000193c 	.word	0x2000193c
 8006f80:	20001928 	.word	0x20001928
 8006f84:	20001450 	.word	0x20001450
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d017      	beq.n	8006fce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <vTaskDelay+0x60>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <vTaskDelay+0x30>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	60bb      	str	r3, [r7, #8]
}
 8006fb8:	bf00      	nop
 8006fba:	e7fe      	b.n	8006fba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006fbc:	f000 f88a 	bl	80070d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fdfc 	bl	8007bc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fc8:	f000 f892 	bl	80070f0 <xTaskResumeAll>
 8006fcc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d107      	bne.n	8006fe4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006fd4:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <vTaskDelay+0x64>)
 8006fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20001948 	.word	0x20001948
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08a      	sub	sp, #40	; 0x28
 8006ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007002:	463a      	mov	r2, r7
 8007004:	1d39      	adds	r1, r7, #4
 8007006:	f107 0308 	add.w	r3, r7, #8
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe fd10 	bl	8005a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	9202      	str	r2, [sp, #8]
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	2300      	movs	r3, #0
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	2300      	movs	r3, #0
 8007020:	460a      	mov	r2, r1
 8007022:	4924      	ldr	r1, [pc, #144]	; (80070b4 <vTaskStartScheduler+0xc0>)
 8007024:	4824      	ldr	r0, [pc, #144]	; (80070b8 <vTaskStartScheduler+0xc4>)
 8007026:	f7ff fdf9 	bl	8006c1c <xTaskCreateStatic>
 800702a:	4603      	mov	r3, r0
 800702c:	4a23      	ldr	r2, [pc, #140]	; (80070bc <vTaskStartScheduler+0xc8>)
 800702e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007030:	4b22      	ldr	r3, [pc, #136]	; (80070bc <vTaskStartScheduler+0xc8>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007038:	2301      	movs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	e001      	b.n	8007042 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d102      	bne.n	800704e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007048:	f000 fe0e 	bl	8007c68 <xTimerCreateTimerTask>
 800704c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d11b      	bne.n	800708c <vTaskStartScheduler+0x98>
	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	613b      	str	r3, [r7, #16]
}
 8007066:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007068:	4b15      	ldr	r3, [pc, #84]	; (80070c0 <vTaskStartScheduler+0xcc>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3354      	adds	r3, #84	; 0x54
 800706e:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <vTaskStartScheduler+0xd0>)
 8007070:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007072:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <vTaskStartScheduler+0xd4>)
 8007074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007078:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800707a:	4b14      	ldr	r3, [pc, #80]	; (80070cc <vTaskStartScheduler+0xd8>)
 800707c:	2201      	movs	r2, #1
 800707e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007080:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <vTaskStartScheduler+0xdc>)
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007086:	f001 f9cb 	bl	8008420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800708a:	e00e      	b.n	80070aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007092:	d10a      	bne.n	80070aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <vTaskStartScheduler+0xb4>
}
 80070aa:	bf00      	nop
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	0800d7b8 	.word	0x0800d7b8
 80070b8:	080076f9 	.word	0x080076f9
 80070bc:	20001944 	.word	0x20001944
 80070c0:	2000144c 	.word	0x2000144c
 80070c4:	20000068 	.word	0x20000068
 80070c8:	20001940 	.word	0x20001940
 80070cc:	2000192c 	.word	0x2000192c
 80070d0:	20001924 	.word	0x20001924

080070d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80070d8:	4b04      	ldr	r3, [pc, #16]	; (80070ec <vTaskSuspendAll+0x18>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3301      	adds	r3, #1
 80070de:	4a03      	ldr	r2, [pc, #12]	; (80070ec <vTaskSuspendAll+0x18>)
 80070e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80070e2:	bf00      	nop
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20001948 	.word	0x20001948

080070f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070fe:	4b42      	ldr	r3, [pc, #264]	; (8007208 <xTaskResumeAll+0x118>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <xTaskResumeAll+0x2c>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	603b      	str	r3, [r7, #0]
}
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800711c:	f001 fa22 	bl	8008564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007120:	4b39      	ldr	r3, [pc, #228]	; (8007208 <xTaskResumeAll+0x118>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3b01      	subs	r3, #1
 8007126:	4a38      	ldr	r2, [pc, #224]	; (8007208 <xTaskResumeAll+0x118>)
 8007128:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800712a:	4b37      	ldr	r3, [pc, #220]	; (8007208 <xTaskResumeAll+0x118>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d162      	bne.n	80071f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007132:	4b36      	ldr	r3, [pc, #216]	; (800720c <xTaskResumeAll+0x11c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d05e      	beq.n	80071f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800713a:	e02f      	b.n	800719c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713c:	4b34      	ldr	r3, [pc, #208]	; (8007210 <xTaskResumeAll+0x120>)
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3318      	adds	r3, #24
 8007148:	4618      	mov	r0, r3
 800714a:	f7fe fd2f 	bl	8005bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3304      	adds	r3, #4
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fd2a 	bl	8005bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	4b2d      	ldr	r3, [pc, #180]	; (8007214 <xTaskResumeAll+0x124>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d903      	bls.n	800716c <xTaskResumeAll+0x7c>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <xTaskResumeAll+0x124>)
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4a27      	ldr	r2, [pc, #156]	; (8007218 <xTaskResumeAll+0x128>)
 800717a:	441a      	add	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3304      	adds	r3, #4
 8007180:	4619      	mov	r1, r3
 8007182:	4610      	mov	r0, r2
 8007184:	f7fe fcb5 	bl	8005af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718c:	4b23      	ldr	r3, [pc, #140]	; (800721c <xTaskResumeAll+0x12c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007192:	429a      	cmp	r2, r3
 8007194:	d302      	bcc.n	800719c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007196:	4b22      	ldr	r3, [pc, #136]	; (8007220 <xTaskResumeAll+0x130>)
 8007198:	2201      	movs	r2, #1
 800719a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800719c:	4b1c      	ldr	r3, [pc, #112]	; (8007210 <xTaskResumeAll+0x120>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1cb      	bne.n	800713c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071aa:	f000 fb5f 	bl	800786c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80071ae:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <xTaskResumeAll+0x134>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d010      	beq.n	80071dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071ba:	f000 f847 	bl	800724c <xTaskIncrementTick>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80071c4:	4b16      	ldr	r3, [pc, #88]	; (8007220 <xTaskResumeAll+0x130>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f1      	bne.n	80071ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80071d6:	4b13      	ldr	r3, [pc, #76]	; (8007224 <xTaskResumeAll+0x134>)
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071dc:	4b10      	ldr	r3, [pc, #64]	; (8007220 <xTaskResumeAll+0x130>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d009      	beq.n	80071f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071e4:	2301      	movs	r3, #1
 80071e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071e8:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <xTaskResumeAll+0x138>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071f8:	f001 f9e4 	bl	80085c4 <vPortExitCritical>

	return xAlreadyYielded;
 80071fc:	68bb      	ldr	r3, [r7, #8]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20001948 	.word	0x20001948
 800720c:	20001920 	.word	0x20001920
 8007210:	200018e0 	.word	0x200018e0
 8007214:	20001928 	.word	0x20001928
 8007218:	20001450 	.word	0x20001450
 800721c:	2000144c 	.word	0x2000144c
 8007220:	20001934 	.word	0x20001934
 8007224:	20001930 	.word	0x20001930
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007232:	4b05      	ldr	r3, [pc, #20]	; (8007248 <xTaskGetTickCount+0x1c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007238:	687b      	ldr	r3, [r7, #4]
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20001924 	.word	0x20001924

0800724c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007256:	4b4f      	ldr	r3, [pc, #316]	; (8007394 <xTaskIncrementTick+0x148>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	f040 808f 	bne.w	800737e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007260:	4b4d      	ldr	r3, [pc, #308]	; (8007398 <xTaskIncrementTick+0x14c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007268:	4a4b      	ldr	r2, [pc, #300]	; (8007398 <xTaskIncrementTick+0x14c>)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d120      	bne.n	80072b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007274:	4b49      	ldr	r3, [pc, #292]	; (800739c <xTaskIncrementTick+0x150>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <xTaskIncrementTick+0x48>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	603b      	str	r3, [r7, #0]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <xTaskIncrementTick+0x46>
 8007294:	4b41      	ldr	r3, [pc, #260]	; (800739c <xTaskIncrementTick+0x150>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	4b41      	ldr	r3, [pc, #260]	; (80073a0 <xTaskIncrementTick+0x154>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a3f      	ldr	r2, [pc, #252]	; (800739c <xTaskIncrementTick+0x150>)
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	4a3f      	ldr	r2, [pc, #252]	; (80073a0 <xTaskIncrementTick+0x154>)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	4b3e      	ldr	r3, [pc, #248]	; (80073a4 <xTaskIncrementTick+0x158>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3301      	adds	r3, #1
 80072ae:	4a3d      	ldr	r2, [pc, #244]	; (80073a4 <xTaskIncrementTick+0x158>)
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	f000 fadb 	bl	800786c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072b6:	4b3c      	ldr	r3, [pc, #240]	; (80073a8 <xTaskIncrementTick+0x15c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d349      	bcc.n	8007354 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072c0:	4b36      	ldr	r3, [pc, #216]	; (800739c <xTaskIncrementTick+0x150>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ca:	4b37      	ldr	r3, [pc, #220]	; (80073a8 <xTaskIncrementTick+0x15c>)
 80072cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072d0:	601a      	str	r2, [r3, #0]
					break;
 80072d2:	e03f      	b.n	8007354 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d4:	4b31      	ldr	r3, [pc, #196]	; (800739c <xTaskIncrementTick+0x150>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d203      	bcs.n	80072f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072ec:	4a2e      	ldr	r2, [pc, #184]	; (80073a8 <xTaskIncrementTick+0x15c>)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072f2:	e02f      	b.n	8007354 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	3304      	adds	r3, #4
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe fc57 	bl	8005bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	3318      	adds	r3, #24
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fc4e 	bl	8005bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007314:	4b25      	ldr	r3, [pc, #148]	; (80073ac <xTaskIncrementTick+0x160>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d903      	bls.n	8007324 <xTaskIncrementTick+0xd8>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	4a22      	ldr	r2, [pc, #136]	; (80073ac <xTaskIncrementTick+0x160>)
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4a1f      	ldr	r2, [pc, #124]	; (80073b0 <xTaskIncrementTick+0x164>)
 8007332:	441a      	add	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	3304      	adds	r3, #4
 8007338:	4619      	mov	r1, r3
 800733a:	4610      	mov	r0, r2
 800733c:	f7fe fbd9 	bl	8005af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007344:	4b1b      	ldr	r3, [pc, #108]	; (80073b4 <xTaskIncrementTick+0x168>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	429a      	cmp	r2, r3
 800734c:	d3b8      	bcc.n	80072c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800734e:	2301      	movs	r3, #1
 8007350:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007352:	e7b5      	b.n	80072c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007354:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <xTaskIncrementTick+0x168>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	4915      	ldr	r1, [pc, #84]	; (80073b0 <xTaskIncrementTick+0x164>)
 800735c:	4613      	mov	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d901      	bls.n	8007370 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800736c:	2301      	movs	r3, #1
 800736e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007370:	4b11      	ldr	r3, [pc, #68]	; (80073b8 <xTaskIncrementTick+0x16c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d007      	beq.n	8007388 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	e004      	b.n	8007388 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800737e:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <xTaskIncrementTick+0x170>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3301      	adds	r3, #1
 8007384:	4a0d      	ldr	r2, [pc, #52]	; (80073bc <xTaskIncrementTick+0x170>)
 8007386:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007388:	697b      	ldr	r3, [r7, #20]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20001948 	.word	0x20001948
 8007398:	20001924 	.word	0x20001924
 800739c:	200018d8 	.word	0x200018d8
 80073a0:	200018dc 	.word	0x200018dc
 80073a4:	20001938 	.word	0x20001938
 80073a8:	20001940 	.word	0x20001940
 80073ac:	20001928 	.word	0x20001928
 80073b0:	20001450 	.word	0x20001450
 80073b4:	2000144c 	.word	0x2000144c
 80073b8:	20001934 	.word	0x20001934
 80073bc:	20001930 	.word	0x20001930

080073c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073c6:	4b2a      	ldr	r3, [pc, #168]	; (8007470 <vTaskSwitchContext+0xb0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073ce:	4b29      	ldr	r3, [pc, #164]	; (8007474 <vTaskSwitchContext+0xb4>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073d4:	e046      	b.n	8007464 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80073d6:	4b27      	ldr	r3, [pc, #156]	; (8007474 <vTaskSwitchContext+0xb4>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073dc:	4b26      	ldr	r3, [pc, #152]	; (8007478 <vTaskSwitchContext+0xb8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e010      	b.n	8007406 <vTaskSwitchContext+0x46>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <vTaskSwitchContext+0x40>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	607b      	str	r3, [r7, #4]
}
 80073fc:	bf00      	nop
 80073fe:	e7fe      	b.n	80073fe <vTaskSwitchContext+0x3e>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3b01      	subs	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	491d      	ldr	r1, [pc, #116]	; (800747c <vTaskSwitchContext+0xbc>)
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0e4      	beq.n	80073e4 <vTaskSwitchContext+0x24>
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4a15      	ldr	r2, [pc, #84]	; (800747c <vTaskSwitchContext+0xbc>)
 8007426:	4413      	add	r3, r2
 8007428:	60bb      	str	r3, [r7, #8]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	605a      	str	r2, [r3, #4]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	3308      	adds	r3, #8
 800743c:	429a      	cmp	r2, r3
 800743e:	d104      	bne.n	800744a <vTaskSwitchContext+0x8a>
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	605a      	str	r2, [r3, #4]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	4a0b      	ldr	r2, [pc, #44]	; (8007480 <vTaskSwitchContext+0xc0>)
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	4a08      	ldr	r2, [pc, #32]	; (8007478 <vTaskSwitchContext+0xb8>)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800745a:	4b09      	ldr	r3, [pc, #36]	; (8007480 <vTaskSwitchContext+0xc0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3354      	adds	r3, #84	; 0x54
 8007460:	4a08      	ldr	r2, [pc, #32]	; (8007484 <vTaskSwitchContext+0xc4>)
 8007462:	6013      	str	r3, [r2, #0]
}
 8007464:	bf00      	nop
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	20001948 	.word	0x20001948
 8007474:	20001934 	.word	0x20001934
 8007478:	20001928 	.word	0x20001928
 800747c:	20001450 	.word	0x20001450
 8007480:	2000144c 	.word	0x2000144c
 8007484:	20000068 	.word	0x20000068

08007488 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	60fb      	str	r3, [r7, #12]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074ae:	4b07      	ldr	r3, [pc, #28]	; (80074cc <vTaskPlaceOnEventList+0x44>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3318      	adds	r3, #24
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fe fb3f 	bl	8005b3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074bc:	2101      	movs	r1, #1
 80074be:	6838      	ldr	r0, [r7, #0]
 80074c0:	f000 fb7e 	bl	8007bc0 <prvAddCurrentTaskToDelayedList>
}
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	2000144c 	.word	0x2000144c

080074d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10a      	bne.n	80074f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	617b      	str	r3, [r7, #20]
}
 80074f4:	bf00      	nop
 80074f6:	e7fe      	b.n	80074f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074f8:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <vTaskPlaceOnEventListRestricted+0x54>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3318      	adds	r3, #24
 80074fe:	4619      	mov	r1, r3
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7fe faf6 	bl	8005af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800750c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007510:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	68b8      	ldr	r0, [r7, #8]
 8007516:	f000 fb53 	bl	8007bc0 <prvAddCurrentTaskToDelayedList>
	}
 800751a:	bf00      	nop
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	2000144c 	.word	0x2000144c

08007528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60fb      	str	r3, [r7, #12]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	3318      	adds	r3, #24
 8007558:	4618      	mov	r0, r3
 800755a:	f7fe fb27 	bl	8005bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800755e:	4b1e      	ldr	r3, [pc, #120]	; (80075d8 <xTaskRemoveFromEventList+0xb0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d11d      	bne.n	80075a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	3304      	adds	r3, #4
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe fb1e 	bl	8005bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <xTaskRemoveFromEventList+0xb4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d903      	bls.n	8007584 <xTaskRemoveFromEventList+0x5c>
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	4a16      	ldr	r2, [pc, #88]	; (80075dc <xTaskRemoveFromEventList+0xb4>)
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4a13      	ldr	r2, [pc, #76]	; (80075e0 <xTaskRemoveFromEventList+0xb8>)
 8007592:	441a      	add	r2, r3
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f7fe faa9 	bl	8005af2 <vListInsertEnd>
 80075a0:	e005      	b.n	80075ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	3318      	adds	r3, #24
 80075a6:	4619      	mov	r1, r3
 80075a8:	480e      	ldr	r0, [pc, #56]	; (80075e4 <xTaskRemoveFromEventList+0xbc>)
 80075aa:	f7fe faa2 	bl	8005af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b2:	4b0d      	ldr	r3, [pc, #52]	; (80075e8 <xTaskRemoveFromEventList+0xc0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d905      	bls.n	80075c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075bc:	2301      	movs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <xTaskRemoveFromEventList+0xc4>)
 80075c2:	2201      	movs	r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	e001      	b.n	80075cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075cc:	697b      	ldr	r3, [r7, #20]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20001948 	.word	0x20001948
 80075dc:	20001928 	.word	0x20001928
 80075e0:	20001450 	.word	0x20001450
 80075e4:	200018e0 	.word	0x200018e0
 80075e8:	2000144c 	.word	0x2000144c
 80075ec:	20001934 	.word	0x20001934

080075f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075f8:	4b06      	ldr	r3, [pc, #24]	; (8007614 <vTaskInternalSetTimeOutState+0x24>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007600:	4b05      	ldr	r3, [pc, #20]	; (8007618 <vTaskInternalSetTimeOutState+0x28>)
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	605a      	str	r2, [r3, #4]
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	20001938 	.word	0x20001938
 8007618:	20001924 	.word	0x20001924

0800761c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	613b      	str	r3, [r7, #16]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	60fb      	str	r3, [r7, #12]
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800765e:	f000 ff81 	bl	8008564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007662:	4b1d      	ldr	r3, [pc, #116]	; (80076d8 <xTaskCheckForTimeOut+0xbc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800767a:	d102      	bne.n	8007682 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
 8007680:	e023      	b.n	80076ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	4b15      	ldr	r3, [pc, #84]	; (80076dc <xTaskCheckForTimeOut+0xc0>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d007      	beq.n	800769e <xTaskCheckForTimeOut+0x82>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	429a      	cmp	r2, r3
 8007696:	d302      	bcc.n	800769e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007698:	2301      	movs	r3, #1
 800769a:	61fb      	str	r3, [r7, #28]
 800769c:	e015      	b.n	80076ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d20b      	bcs.n	80076c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	1ad2      	subs	r2, r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7ff ff9b 	bl	80075f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	e004      	b.n	80076ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076c6:	2301      	movs	r3, #1
 80076c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076ca:	f000 ff7b 	bl	80085c4 <vPortExitCritical>

	return xReturn;
 80076ce:	69fb      	ldr	r3, [r7, #28]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3720      	adds	r7, #32
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20001924 	.word	0x20001924
 80076dc:	20001938 	.word	0x20001938

080076e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076e4:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <vTaskMissedYield+0x14>)
 80076e6:	2201      	movs	r2, #1
 80076e8:	601a      	str	r2, [r3, #0]
}
 80076ea:	bf00      	nop
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	20001934 	.word	0x20001934

080076f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007700:	f000 f852 	bl	80077a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007704:	4b06      	ldr	r3, [pc, #24]	; (8007720 <prvIdleTask+0x28>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d9f9      	bls.n	8007700 <prvIdleTask+0x8>
			{
				taskYIELD();
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <prvIdleTask+0x2c>)
 800770e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800771c:	e7f0      	b.n	8007700 <prvIdleTask+0x8>
 800771e:	bf00      	nop
 8007720:	20001450 	.word	0x20001450
 8007724:	e000ed04 	.word	0xe000ed04

08007728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800772e:	2300      	movs	r3, #0
 8007730:	607b      	str	r3, [r7, #4]
 8007732:	e00c      	b.n	800774e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4a12      	ldr	r2, [pc, #72]	; (8007788 <prvInitialiseTaskLists+0x60>)
 8007740:	4413      	add	r3, r2
 8007742:	4618      	mov	r0, r3
 8007744:	f7fe f9a8 	bl	8005a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3301      	adds	r3, #1
 800774c:	607b      	str	r3, [r7, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b37      	cmp	r3, #55	; 0x37
 8007752:	d9ef      	bls.n	8007734 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007754:	480d      	ldr	r0, [pc, #52]	; (800778c <prvInitialiseTaskLists+0x64>)
 8007756:	f7fe f99f 	bl	8005a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800775a:	480d      	ldr	r0, [pc, #52]	; (8007790 <prvInitialiseTaskLists+0x68>)
 800775c:	f7fe f99c 	bl	8005a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007760:	480c      	ldr	r0, [pc, #48]	; (8007794 <prvInitialiseTaskLists+0x6c>)
 8007762:	f7fe f999 	bl	8005a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007766:	480c      	ldr	r0, [pc, #48]	; (8007798 <prvInitialiseTaskLists+0x70>)
 8007768:	f7fe f996 	bl	8005a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800776c:	480b      	ldr	r0, [pc, #44]	; (800779c <prvInitialiseTaskLists+0x74>)
 800776e:	f7fe f993 	bl	8005a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007772:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <prvInitialiseTaskLists+0x78>)
 8007774:	4a05      	ldr	r2, [pc, #20]	; (800778c <prvInitialiseTaskLists+0x64>)
 8007776:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <prvInitialiseTaskLists+0x7c>)
 800777a:	4a05      	ldr	r2, [pc, #20]	; (8007790 <prvInitialiseTaskLists+0x68>)
 800777c:	601a      	str	r2, [r3, #0]
}
 800777e:	bf00      	nop
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20001450 	.word	0x20001450
 800778c:	200018b0 	.word	0x200018b0
 8007790:	200018c4 	.word	0x200018c4
 8007794:	200018e0 	.word	0x200018e0
 8007798:	200018f4 	.word	0x200018f4
 800779c:	2000190c 	.word	0x2000190c
 80077a0:	200018d8 	.word	0x200018d8
 80077a4:	200018dc 	.word	0x200018dc

080077a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077ae:	e019      	b.n	80077e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077b0:	f000 fed8 	bl	8008564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077b4:	4b10      	ldr	r3, [pc, #64]	; (80077f8 <prvCheckTasksWaitingTermination+0x50>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3304      	adds	r3, #4
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fe f9f3 	bl	8005bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077c6:	4b0d      	ldr	r3, [pc, #52]	; (80077fc <prvCheckTasksWaitingTermination+0x54>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	4a0b      	ldr	r2, [pc, #44]	; (80077fc <prvCheckTasksWaitingTermination+0x54>)
 80077ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077d0:	4b0b      	ldr	r3, [pc, #44]	; (8007800 <prvCheckTasksWaitingTermination+0x58>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	4a0a      	ldr	r2, [pc, #40]	; (8007800 <prvCheckTasksWaitingTermination+0x58>)
 80077d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077da:	f000 fef3 	bl	80085c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f810 	bl	8007804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077e4:	4b06      	ldr	r3, [pc, #24]	; (8007800 <prvCheckTasksWaitingTermination+0x58>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e1      	bne.n	80077b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	200018f4 	.word	0x200018f4
 80077fc:	20001920 	.word	0x20001920
 8007800:	20001908 	.word	0x20001908

08007804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3354      	adds	r3, #84	; 0x54
 8007810:	4618      	mov	r0, r3
 8007812:	f002 fa95 	bl	8009d40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800781c:	2b00      	cmp	r3, #0
 800781e:	d108      	bne.n	8007832 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	4618      	mov	r0, r3
 8007826:	f001 f88b 	bl	8008940 <vPortFree>
				vPortFree( pxTCB );
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 f888 	bl	8008940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007830:	e018      	b.n	8007864 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007838:	2b01      	cmp	r3, #1
 800783a:	d103      	bne.n	8007844 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 f87f 	bl	8008940 <vPortFree>
	}
 8007842:	e00f      	b.n	8007864 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800784a:	2b02      	cmp	r3, #2
 800784c:	d00a      	beq.n	8007864 <prvDeleteTCB+0x60>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	60fb      	str	r3, [r7, #12]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <prvDeleteTCB+0x5e>
	}
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007872:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <prvResetNextTaskUnblockTime+0x38>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d104      	bne.n	8007886 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <prvResetNextTaskUnblockTime+0x3c>)
 800787e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007882:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007884:	e008      	b.n	8007898 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007886:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <prvResetNextTaskUnblockTime+0x38>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	4a04      	ldr	r2, [pc, #16]	; (80078a8 <prvResetNextTaskUnblockTime+0x3c>)
 8007896:	6013      	str	r3, [r2, #0]
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	200018d8 	.word	0x200018d8
 80078a8:	20001940 	.word	0x20001940

080078ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078b2:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <xTaskGetSchedulerState+0x34>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078ba:	2301      	movs	r3, #1
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	e008      	b.n	80078d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c0:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <xTaskGetSchedulerState+0x38>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078c8:	2302      	movs	r3, #2
 80078ca:	607b      	str	r3, [r7, #4]
 80078cc:	e001      	b.n	80078d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078ce:	2300      	movs	r3, #0
 80078d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078d2:	687b      	ldr	r3, [r7, #4]
	}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	2000192c 	.word	0x2000192c
 80078e4:	20001948 	.word	0x20001948

080078e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d051      	beq.n	80079a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	4b2a      	ldr	r3, [pc, #168]	; (80079ac <xTaskPriorityInherit+0xc4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	429a      	cmp	r2, r3
 800790a:	d241      	bcs.n	8007990 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	db06      	blt.n	8007922 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007914:	4b25      	ldr	r3, [pc, #148]	; (80079ac <xTaskPriorityInherit+0xc4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6959      	ldr	r1, [r3, #20]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <xTaskPriorityInherit+0xc8>)
 8007934:	4413      	add	r3, r2
 8007936:	4299      	cmp	r1, r3
 8007938:	d122      	bne.n	8007980 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3304      	adds	r3, #4
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe f934 	bl	8005bac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007944:	4b19      	ldr	r3, [pc, #100]	; (80079ac <xTaskPriorityInherit+0xc4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007952:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <xTaskPriorityInherit+0xcc>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <xTaskPriorityInherit+0x7a>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <xTaskPriorityInherit+0xcc>)
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4a10      	ldr	r2, [pc, #64]	; (80079b0 <xTaskPriorityInherit+0xc8>)
 8007970:	441a      	add	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3304      	adds	r3, #4
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f7fe f8ba 	bl	8005af2 <vListInsertEnd>
 800797e:	e004      	b.n	800798a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007980:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <xTaskPriorityInherit+0xc4>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800798a:	2301      	movs	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	e008      	b.n	80079a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007994:	4b05      	ldr	r3, [pc, #20]	; (80079ac <xTaskPriorityInherit+0xc4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	429a      	cmp	r2, r3
 800799c:	d201      	bcs.n	80079a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800799e:	2301      	movs	r3, #1
 80079a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079a2:	68fb      	ldr	r3, [r7, #12]
	}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	2000144c 	.word	0x2000144c
 80079b0:	20001450 	.word	0x20001450
 80079b4:	20001928 	.word	0x20001928

080079b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d056      	beq.n	8007a7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079ce:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <xTaskPriorityDisinherit+0xd0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d00a      	beq.n	80079ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	60fb      	str	r3, [r7, #12]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60bb      	str	r3, [r7, #8]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a10:	1e5a      	subs	r2, r3, #1
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d02c      	beq.n	8007a7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d128      	bne.n	8007a7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe f8bc 	bl	8005bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <xTaskPriorityDisinherit+0xd4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d903      	bls.n	8007a5c <xTaskPriorityDisinherit+0xa4>
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a0c      	ldr	r2, [pc, #48]	; (8007a8c <xTaskPriorityDisinherit+0xd4>)
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4a09      	ldr	r2, [pc, #36]	; (8007a90 <xTaskPriorityDisinherit+0xd8>)
 8007a6a:	441a      	add	r2, r3
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f7fe f83d 	bl	8005af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a7c:	697b      	ldr	r3, [r7, #20]
	}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	2000144c 	.word	0x2000144c
 8007a8c:	20001928 	.word	0x20001928
 8007a90:	20001450 	.word	0x20001450

08007a94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d06a      	beq.n	8007b82 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	60fb      	str	r3, [r7, #12]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d902      	bls.n	8007ada <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	61fb      	str	r3, [r7, #28]
 8007ad8:	e002      	b.n	8007ae0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ade:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	69fa      	ldr	r2, [r7, #28]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d04b      	beq.n	8007b82 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d146      	bne.n	8007b82 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007af4:	4b25      	ldr	r3, [pc, #148]	; (8007b8c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d10a      	bne.n	8007b14 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	60bb      	str	r3, [r7, #8]
}
 8007b10:	bf00      	nop
 8007b12:	e7fe      	b.n	8007b12 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	db04      	blt.n	8007b32 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	6959      	ldr	r1, [r3, #20]
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4a13      	ldr	r2, [pc, #76]	; (8007b90 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b42:	4413      	add	r3, r2
 8007b44:	4299      	cmp	r1, r3
 8007b46:	d11c      	bne.n	8007b82 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe f82d 	bl	8005bac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b56:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d903      	bls.n	8007b66 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	4a0c      	ldr	r2, [pc, #48]	; (8007b94 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4a07      	ldr	r2, [pc, #28]	; (8007b90 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b74:	441a      	add	r2, r3
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	f7fd ffb8 	bl	8005af2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b82:	bf00      	nop
 8007b84:	3720      	adds	r7, #32
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	2000144c 	.word	0x2000144c
 8007b90:	20001450 	.word	0x20001450
 8007b94:	20001928 	.word	0x20001928

08007b98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b9c:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <pvTaskIncrementMutexHeldCount+0x24>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <pvTaskIncrementMutexHeldCount+0x24>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007baa:	3201      	adds	r2, #1
 8007bac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007bae:	4b03      	ldr	r3, [pc, #12]	; (8007bbc <pvTaskIncrementMutexHeldCount+0x24>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
	}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	2000144c 	.word	0x2000144c

08007bc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bca:	4b21      	ldr	r3, [pc, #132]	; (8007c50 <prvAddCurrentTaskToDelayedList+0x90>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bd0:	4b20      	ldr	r3, [pc, #128]	; (8007c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fd ffe8 	bl	8005bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be2:	d10a      	bne.n	8007bfa <prvAddCurrentTaskToDelayedList+0x3a>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d007      	beq.n	8007bfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bea:	4b1a      	ldr	r3, [pc, #104]	; (8007c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4819      	ldr	r0, [pc, #100]	; (8007c58 <prvAddCurrentTaskToDelayedList+0x98>)
 8007bf4:	f7fd ff7d 	bl	8005af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bf8:	e026      	b.n	8007c48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4413      	add	r3, r2
 8007c00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c02:	4b14      	ldr	r3, [pc, #80]	; (8007c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d209      	bcs.n	8007c26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c12:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f7fd ff8b 	bl	8005b3a <vListInsert>
}
 8007c24:	e010      	b.n	8007c48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c26:	4b0e      	ldr	r3, [pc, #56]	; (8007c60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f7fd ff81 	bl	8005b3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c38:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d202      	bcs.n	8007c48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c42:	4a08      	ldr	r2, [pc, #32]	; (8007c64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	6013      	str	r3, [r2, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	20001924 	.word	0x20001924
 8007c54:	2000144c 	.word	0x2000144c
 8007c58:	2000190c 	.word	0x2000190c
 8007c5c:	200018dc 	.word	0x200018dc
 8007c60:	200018d8 	.word	0x200018d8
 8007c64:	20001940 	.word	0x20001940

08007c68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c72:	f000 fb07 	bl	8008284 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c76:	4b1c      	ldr	r3, [pc, #112]	; (8007ce8 <xTimerCreateTimerTask+0x80>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d021      	beq.n	8007cc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c86:	1d3a      	adds	r2, r7, #4
 8007c88:	f107 0108 	add.w	r1, r7, #8
 8007c8c:	f107 030c 	add.w	r3, r7, #12
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd fee7 	bl	8005a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	9202      	str	r2, [sp, #8]
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	460a      	mov	r2, r1
 8007ca8:	4910      	ldr	r1, [pc, #64]	; (8007cec <xTimerCreateTimerTask+0x84>)
 8007caa:	4811      	ldr	r0, [pc, #68]	; (8007cf0 <xTimerCreateTimerTask+0x88>)
 8007cac:	f7fe ffb6 	bl	8006c1c <xTaskCreateStatic>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	4a10      	ldr	r2, [pc, #64]	; (8007cf4 <xTimerCreateTimerTask+0x8c>)
 8007cb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cb6:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <xTimerCreateTimerTask+0x8c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10a      	bne.n	8007cde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	613b      	str	r3, [r7, #16]
}
 8007cda:	bf00      	nop
 8007cdc:	e7fe      	b.n	8007cdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007cde:	697b      	ldr	r3, [r7, #20]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	2000197c 	.word	0x2000197c
 8007cec:	0800d7c0 	.word	0x0800d7c0
 8007cf0:	08007e2d 	.word	0x08007e2d
 8007cf4:	20001980 	.word	0x20001980

08007cf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08a      	sub	sp, #40	; 0x28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	623b      	str	r3, [r7, #32]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d26:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <xTimerGenericCommand+0x98>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d02a      	beq.n	8007d84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b05      	cmp	r3, #5
 8007d3e:	dc18      	bgt.n	8007d72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d40:	f7ff fdb4 	bl	80078ac <xTaskGetSchedulerState>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d109      	bne.n	8007d5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d4a:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <xTimerGenericCommand+0x98>)
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	f107 0110 	add.w	r1, r7, #16
 8007d52:	2300      	movs	r3, #0
 8007d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d56:	f7fe f8fb 	bl	8005f50 <xQueueGenericSend>
 8007d5a:	6278      	str	r0, [r7, #36]	; 0x24
 8007d5c:	e012      	b.n	8007d84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d5e:	4b0c      	ldr	r3, [pc, #48]	; (8007d90 <xTimerGenericCommand+0x98>)
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	f107 0110 	add.w	r1, r7, #16
 8007d66:	2300      	movs	r3, #0
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f7fe f8f1 	bl	8005f50 <xQueueGenericSend>
 8007d6e:	6278      	str	r0, [r7, #36]	; 0x24
 8007d70:	e008      	b.n	8007d84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d72:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <xTimerGenericCommand+0x98>)
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	f107 0110 	add.w	r1, r7, #16
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	f7fe f9e5 	bl	800614c <xQueueGenericSendFromISR>
 8007d82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3728      	adds	r7, #40	; 0x28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	2000197c 	.word	0x2000197c

08007d94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d9e:	4b22      	ldr	r3, [pc, #136]	; (8007e28 <prvProcessExpiredTimer+0x94>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	3304      	adds	r3, #4
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fd fefd 	bl	8005bac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d022      	beq.n	8007e06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	699a      	ldr	r2, [r3, #24]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	18d1      	adds	r1, r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	6978      	ldr	r0, [r7, #20]
 8007dce:	f000 f8d1 	bl	8007f74 <prvInsertTimerInActiveList>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01f      	beq.n	8007e18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dd8:	2300      	movs	r3, #0
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	2100      	movs	r1, #0
 8007de2:	6978      	ldr	r0, [r7, #20]
 8007de4:	f7ff ff88 	bl	8007cf8 <xTimerGenericCommand>
 8007de8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d113      	bne.n	8007e18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	60fb      	str	r3, [r7, #12]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	6978      	ldr	r0, [r7, #20]
 8007e1e:	4798      	blx	r3
}
 8007e20:	bf00      	nop
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20001974 	.word	0x20001974

08007e2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e34:	f107 0308 	add.w	r3, r7, #8
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 f857 	bl	8007eec <prvGetNextExpireTime>
 8007e3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4619      	mov	r1, r3
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f803 	bl	8007e50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e4a:	f000 f8d5 	bl	8007ff8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e4e:	e7f1      	b.n	8007e34 <prvTimerTask+0x8>

08007e50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e5a:	f7ff f93b 	bl	80070d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e5e:	f107 0308 	add.w	r3, r7, #8
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 f866 	bl	8007f34 <prvSampleTimeNow>
 8007e68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d130      	bne.n	8007ed2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <prvProcessTimerOrBlockTask+0x3c>
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d806      	bhi.n	8007e8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e7e:	f7ff f937 	bl	80070f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e82:	68f9      	ldr	r1, [r7, #12]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ff85 	bl	8007d94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e8a:	e024      	b.n	8007ed6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d008      	beq.n	8007ea4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e92:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <prvProcessTimerOrBlockTask+0x90>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <prvProcessTimerOrBlockTask+0x50>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <prvProcessTimerOrBlockTask+0x52>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <prvProcessTimerOrBlockTask+0x94>)
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	f7fe fe7f 	bl	8006bb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007eb6:	f7ff f91b 	bl	80070f0 <xTaskResumeAll>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10a      	bne.n	8007ed6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ec0:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <prvProcessTimerOrBlockTask+0x98>)
 8007ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	f3bf 8f6f 	isb	sy
}
 8007ed0:	e001      	b.n	8007ed6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ed2:	f7ff f90d 	bl	80070f0 <xTaskResumeAll>
}
 8007ed6:	bf00      	nop
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20001978 	.word	0x20001978
 8007ee4:	2000197c 	.word	0x2000197c
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ef4:	4b0e      	ldr	r3, [pc, #56]	; (8007f30 <prvGetNextExpireTime+0x44>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <prvGetNextExpireTime+0x16>
 8007efe:	2201      	movs	r2, #1
 8007f00:	e000      	b.n	8007f04 <prvGetNextExpireTime+0x18>
 8007f02:	2200      	movs	r2, #0
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d105      	bne.n	8007f1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f10:	4b07      	ldr	r3, [pc, #28]	; (8007f30 <prvGetNextExpireTime+0x44>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	e001      	b.n	8007f20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f20:	68fb      	ldr	r3, [r7, #12]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	20001974 	.word	0x20001974

08007f34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f3c:	f7ff f976 	bl	800722c <xTaskGetTickCount>
 8007f40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f42:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <prvSampleTimeNow+0x3c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d205      	bcs.n	8007f58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f4c:	f000 f936 	bl	80081bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	e002      	b.n	8007f5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f5e:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <prvSampleTimeNow+0x3c>)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f64:	68fb      	ldr	r3, [r7, #12]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20001984 	.word	0x20001984

08007f74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d812      	bhi.n	8007fc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d302      	bcc.n	8007fae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	e01b      	b.n	8007fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fae:	4b10      	ldr	r3, [pc, #64]	; (8007ff0 <prvInsertTimerInActiveList+0x7c>)
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4610      	mov	r0, r2
 8007fba:	f7fd fdbe 	bl	8005b3a <vListInsert>
 8007fbe:	e012      	b.n	8007fe6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d206      	bcs.n	8007fd6 <prvInsertTimerInActiveList+0x62>
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d302      	bcc.n	8007fd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	e007      	b.n	8007fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fd6:	4b07      	ldr	r3, [pc, #28]	; (8007ff4 <prvInsertTimerInActiveList+0x80>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	f7fd fdaa 	bl	8005b3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007fe6:	697b      	ldr	r3, [r7, #20]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20001978 	.word	0x20001978
 8007ff4:	20001974 	.word	0x20001974

08007ff8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08e      	sub	sp, #56	; 0x38
 8007ffc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ffe:	e0ca      	b.n	8008196 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	da18      	bge.n	8008038 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008006:	1d3b      	adds	r3, r7, #4
 8008008:	3304      	adds	r3, #4
 800800a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10a      	bne.n	8008028 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	61fb      	str	r3, [r7, #28]
}
 8008024:	bf00      	nop
 8008026:	e7fe      	b.n	8008026 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800802e:	6850      	ldr	r0, [r2, #4]
 8008030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008032:	6892      	ldr	r2, [r2, #8]
 8008034:	4611      	mov	r1, r2
 8008036:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	f2c0 80ab 	blt.w	8008196 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804e:	3304      	adds	r3, #4
 8008050:	4618      	mov	r0, r3
 8008052:	f7fd fdab 	bl	8005bac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008056:	463b      	mov	r3, r7
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff ff6b 	bl	8007f34 <prvSampleTimeNow>
 800805e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b09      	cmp	r3, #9
 8008064:	f200 8096 	bhi.w	8008194 <prvProcessReceivedCommands+0x19c>
 8008068:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <prvProcessReceivedCommands+0x78>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	08008099 	.word	0x08008099
 8008074:	08008099 	.word	0x08008099
 8008078:	08008099 	.word	0x08008099
 800807c:	0800810d 	.word	0x0800810d
 8008080:	08008121 	.word	0x08008121
 8008084:	0800816b 	.word	0x0800816b
 8008088:	08008099 	.word	0x08008099
 800808c:	08008099 	.word	0x08008099
 8008090:	0800810d 	.word	0x0800810d
 8008094:	08008121 	.word	0x08008121
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800809e:	f043 0301 	orr.w	r3, r3, #1
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	18d1      	adds	r1, r2, r3
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080b8:	f7ff ff5c 	bl	8007f74 <prvInsertTimerInActiveList>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d069      	beq.n	8008196 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d05e      	beq.n	8008196 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	441a      	add	r2, r3
 80080e0:	2300      	movs	r3, #0
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	2300      	movs	r3, #0
 80080e6:	2100      	movs	r1, #0
 80080e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ea:	f7ff fe05 	bl	8007cf8 <xTimerGenericCommand>
 80080ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d14f      	bne.n	8008196 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	61bb      	str	r3, [r7, #24]
}
 8008108:	bf00      	nop
 800810a:	e7fe      	b.n	800810a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800810c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008112:	f023 0301 	bic.w	r3, r3, #1
 8008116:	b2da      	uxtb	r2, r3
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800811e:	e03a      	b.n	8008196 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008126:	f043 0301 	orr.w	r3, r3, #1
 800812a:	b2da      	uxtb	r2, r3
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	617b      	str	r3, [r7, #20]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	18d1      	adds	r1, r2, r3
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008164:	f7ff ff06 	bl	8007f74 <prvInsertTimerInActiveList>
					break;
 8008168:	e015      	b.n	8008196 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d103      	bne.n	8008180 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800817a:	f000 fbe1 	bl	8008940 <vPortFree>
 800817e:	e00a      	b.n	8008196 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008186:	f023 0301 	bic.w	r3, r3, #1
 800818a:	b2da      	uxtb	r2, r3
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008192:	e000      	b.n	8008196 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008194:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008196:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <prvProcessReceivedCommands+0x1c0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	1d39      	adds	r1, r7, #4
 800819c:	2200      	movs	r2, #0
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe f8fc 	bl	800639c <xQueueReceive>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f47f af2a 	bne.w	8008000 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	3730      	adds	r7, #48	; 0x30
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	2000197c 	.word	0x2000197c

080081bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081c2:	e048      	b.n	8008256 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081c4:	4b2d      	ldr	r3, [pc, #180]	; (800827c <prvSwitchTimerLists+0xc0>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ce:	4b2b      	ldr	r3, [pc, #172]	; (800827c <prvSwitchTimerLists+0xc0>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3304      	adds	r3, #4
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fd fce5 	bl	8005bac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081f0:	f003 0304 	and.w	r3, r3, #4
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d02e      	beq.n	8008256 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	4413      	add	r3, r2
 8008200:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	429a      	cmp	r2, r3
 8008208:	d90e      	bls.n	8008228 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008216:	4b19      	ldr	r3, [pc, #100]	; (800827c <prvSwitchTimerLists+0xc0>)
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3304      	adds	r3, #4
 800821e:	4619      	mov	r1, r3
 8008220:	4610      	mov	r0, r2
 8008222:	f7fd fc8a 	bl	8005b3a <vListInsert>
 8008226:	e016      	b.n	8008256 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008228:	2300      	movs	r3, #0
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	2300      	movs	r3, #0
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	2100      	movs	r1, #0
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f7ff fd60 	bl	8007cf8 <xTimerGenericCommand>
 8008238:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	603b      	str	r3, [r7, #0]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008256:	4b09      	ldr	r3, [pc, #36]	; (800827c <prvSwitchTimerLists+0xc0>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1b1      	bne.n	80081c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <prvSwitchTimerLists+0xc0>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008266:	4b06      	ldr	r3, [pc, #24]	; (8008280 <prvSwitchTimerLists+0xc4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a04      	ldr	r2, [pc, #16]	; (800827c <prvSwitchTimerLists+0xc0>)
 800826c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800826e:	4a04      	ldr	r2, [pc, #16]	; (8008280 <prvSwitchTimerLists+0xc4>)
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	6013      	str	r3, [r2, #0]
}
 8008274:	bf00      	nop
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20001974 	.word	0x20001974
 8008280:	20001978 	.word	0x20001978

08008284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800828a:	f000 f96b 	bl	8008564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800828e:	4b15      	ldr	r3, [pc, #84]	; (80082e4 <prvCheckForValidListAndQueue+0x60>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d120      	bne.n	80082d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008296:	4814      	ldr	r0, [pc, #80]	; (80082e8 <prvCheckForValidListAndQueue+0x64>)
 8008298:	f7fd fbfe 	bl	8005a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800829c:	4813      	ldr	r0, [pc, #76]	; (80082ec <prvCheckForValidListAndQueue+0x68>)
 800829e:	f7fd fbfb 	bl	8005a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082a2:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <prvCheckForValidListAndQueue+0x6c>)
 80082a4:	4a10      	ldr	r2, [pc, #64]	; (80082e8 <prvCheckForValidListAndQueue+0x64>)
 80082a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082a8:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <prvCheckForValidListAndQueue+0x70>)
 80082aa:	4a10      	ldr	r2, [pc, #64]	; (80082ec <prvCheckForValidListAndQueue+0x68>)
 80082ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082ae:	2300      	movs	r3, #0
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <prvCheckForValidListAndQueue+0x74>)
 80082b4:	4a11      	ldr	r2, [pc, #68]	; (80082fc <prvCheckForValidListAndQueue+0x78>)
 80082b6:	2110      	movs	r1, #16
 80082b8:	200a      	movs	r0, #10
 80082ba:	f7fd fd09 	bl	8005cd0 <xQueueGenericCreateStatic>
 80082be:	4603      	mov	r3, r0
 80082c0:	4a08      	ldr	r2, [pc, #32]	; (80082e4 <prvCheckForValidListAndQueue+0x60>)
 80082c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80082c4:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <prvCheckForValidListAndQueue+0x60>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d005      	beq.n	80082d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80082cc:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <prvCheckForValidListAndQueue+0x60>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	490b      	ldr	r1, [pc, #44]	; (8008300 <prvCheckForValidListAndQueue+0x7c>)
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fe fc1a 	bl	8006b0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082d8:	f000 f974 	bl	80085c4 <vPortExitCritical>
}
 80082dc:	bf00      	nop
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	2000197c 	.word	0x2000197c
 80082e8:	2000194c 	.word	0x2000194c
 80082ec:	20001960 	.word	0x20001960
 80082f0:	20001974 	.word	0x20001974
 80082f4:	20001978 	.word	0x20001978
 80082f8:	20001a28 	.word	0x20001a28
 80082fc:	20001988 	.word	0x20001988
 8008300:	0800d7c8 	.word	0x0800d7c8

08008304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	3b04      	subs	r3, #4
 8008314:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800831c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3b04      	subs	r3, #4
 8008322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f023 0201 	bic.w	r2, r3, #1
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3b04      	subs	r3, #4
 8008332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008334:	4a0c      	ldr	r2, [pc, #48]	; (8008368 <pxPortInitialiseStack+0x64>)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3b14      	subs	r3, #20
 800833e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3b04      	subs	r3, #4
 800834a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f06f 0202 	mvn.w	r2, #2
 8008352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3b20      	subs	r3, #32
 8008358:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800835a:	68fb      	ldr	r3, [r7, #12]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	0800836d 	.word	0x0800836d

0800836c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008376:	4b12      	ldr	r3, [pc, #72]	; (80083c0 <prvTaskExitError+0x54>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800837e:	d00a      	beq.n	8008396 <prvTaskExitError+0x2a>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	60fb      	str	r3, [r7, #12]
}
 8008392:	bf00      	nop
 8008394:	e7fe      	b.n	8008394 <prvTaskExitError+0x28>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	60bb      	str	r3, [r7, #8]
}
 80083a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083aa:	bf00      	nop
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0fc      	beq.n	80083ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	2000000c 	.word	0x2000000c
	...

080083d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <pxCurrentTCBConst2>)
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	6808      	ldr	r0, [r1, #0]
 80083d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083da:	f380 8809 	msr	PSP, r0
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f04f 0000 	mov.w	r0, #0
 80083e6:	f380 8811 	msr	BASEPRI, r0
 80083ea:	4770      	bx	lr
 80083ec:	f3af 8000 	nop.w

080083f0 <pxCurrentTCBConst2>:
 80083f0:	2000144c 	.word	0x2000144c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop

080083f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083f8:	4808      	ldr	r0, [pc, #32]	; (800841c <prvPortStartFirstTask+0x24>)
 80083fa:	6800      	ldr	r0, [r0, #0]
 80083fc:	6800      	ldr	r0, [r0, #0]
 80083fe:	f380 8808 	msr	MSP, r0
 8008402:	f04f 0000 	mov.w	r0, #0
 8008406:	f380 8814 	msr	CONTROL, r0
 800840a:	b662      	cpsie	i
 800840c:	b661      	cpsie	f
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	df00      	svc	0
 8008418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800841a:	bf00      	nop
 800841c:	e000ed08 	.word	0xe000ed08

08008420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008426:	4b46      	ldr	r3, [pc, #280]	; (8008540 <xPortStartScheduler+0x120>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a46      	ldr	r2, [pc, #280]	; (8008544 <xPortStartScheduler+0x124>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d10a      	bne.n	8008446 <xPortStartScheduler+0x26>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	613b      	str	r3, [r7, #16]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008446:	4b3e      	ldr	r3, [pc, #248]	; (8008540 <xPortStartScheduler+0x120>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a3f      	ldr	r2, [pc, #252]	; (8008548 <xPortStartScheduler+0x128>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d10a      	bne.n	8008466 <xPortStartScheduler+0x46>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	60fb      	str	r3, [r7, #12]
}
 8008462:	bf00      	nop
 8008464:	e7fe      	b.n	8008464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008466:	4b39      	ldr	r3, [pc, #228]	; (800854c <xPortStartScheduler+0x12c>)
 8008468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	b2db      	uxtb	r3, r3
 8008470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	22ff      	movs	r2, #255	; 0xff
 8008476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008488:	b2da      	uxtb	r2, r3
 800848a:	4b31      	ldr	r3, [pc, #196]	; (8008550 <xPortStartScheduler+0x130>)
 800848c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800848e:	4b31      	ldr	r3, [pc, #196]	; (8008554 <xPortStartScheduler+0x134>)
 8008490:	2207      	movs	r2, #7
 8008492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008494:	e009      	b.n	80084aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008496:	4b2f      	ldr	r3, [pc, #188]	; (8008554 <xPortStartScheduler+0x134>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3b01      	subs	r3, #1
 800849c:	4a2d      	ldr	r2, [pc, #180]	; (8008554 <xPortStartScheduler+0x134>)
 800849e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b2:	2b80      	cmp	r3, #128	; 0x80
 80084b4:	d0ef      	beq.n	8008496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084b6:	4b27      	ldr	r3, [pc, #156]	; (8008554 <xPortStartScheduler+0x134>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f1c3 0307 	rsb	r3, r3, #7
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d00a      	beq.n	80084d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	60bb      	str	r3, [r7, #8]
}
 80084d4:	bf00      	nop
 80084d6:	e7fe      	b.n	80084d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084d8:	4b1e      	ldr	r3, [pc, #120]	; (8008554 <xPortStartScheduler+0x134>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	021b      	lsls	r3, r3, #8
 80084de:	4a1d      	ldr	r2, [pc, #116]	; (8008554 <xPortStartScheduler+0x134>)
 80084e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084e2:	4b1c      	ldr	r3, [pc, #112]	; (8008554 <xPortStartScheduler+0x134>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ea:	4a1a      	ldr	r2, [pc, #104]	; (8008554 <xPortStartScheduler+0x134>)
 80084ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084f6:	4b18      	ldr	r3, [pc, #96]	; (8008558 <xPortStartScheduler+0x138>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a17      	ldr	r2, [pc, #92]	; (8008558 <xPortStartScheduler+0x138>)
 80084fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008502:	4b15      	ldr	r3, [pc, #84]	; (8008558 <xPortStartScheduler+0x138>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a14      	ldr	r2, [pc, #80]	; (8008558 <xPortStartScheduler+0x138>)
 8008508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800850c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800850e:	f000 f8dd 	bl	80086cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <xPortStartScheduler+0x13c>)
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008518:	f000 f8fc 	bl	8008714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800851c:	4b10      	ldr	r3, [pc, #64]	; (8008560 <xPortStartScheduler+0x140>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a0f      	ldr	r2, [pc, #60]	; (8008560 <xPortStartScheduler+0x140>)
 8008522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008528:	f7ff ff66 	bl	80083f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800852c:	f7fe ff48 	bl	80073c0 <vTaskSwitchContext>
	prvTaskExitError();
 8008530:	f7ff ff1c 	bl	800836c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	e000ed00 	.word	0xe000ed00
 8008544:	410fc271 	.word	0x410fc271
 8008548:	410fc270 	.word	0x410fc270
 800854c:	e000e400 	.word	0xe000e400
 8008550:	20001a78 	.word	0x20001a78
 8008554:	20001a7c 	.word	0x20001a7c
 8008558:	e000ed20 	.word	0xe000ed20
 800855c:	2000000c 	.word	0x2000000c
 8008560:	e000ef34 	.word	0xe000ef34

08008564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	607b      	str	r3, [r7, #4]
}
 800857c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800857e:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <vPortEnterCritical+0x58>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	4a0d      	ldr	r2, [pc, #52]	; (80085bc <vPortEnterCritical+0x58>)
 8008586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008588:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <vPortEnterCritical+0x58>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d10f      	bne.n	80085b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008590:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <vPortEnterCritical+0x5c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	603b      	str	r3, [r7, #0]
}
 80085ac:	bf00      	nop
 80085ae:	e7fe      	b.n	80085ae <vPortEnterCritical+0x4a>
	}
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	2000000c 	.word	0x2000000c
 80085c0:	e000ed04 	.word	0xe000ed04

080085c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085ca:	4b12      	ldr	r3, [pc, #72]	; (8008614 <vPortExitCritical+0x50>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <vPortExitCritical+0x24>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	607b      	str	r3, [r7, #4]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085e8:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <vPortExitCritical+0x50>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	4a09      	ldr	r2, [pc, #36]	; (8008614 <vPortExitCritical+0x50>)
 80085f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085f2:	4b08      	ldr	r3, [pc, #32]	; (8008614 <vPortExitCritical+0x50>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d105      	bne.n	8008606 <vPortExitCritical+0x42>
 80085fa:	2300      	movs	r3, #0
 80085fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	f383 8811 	msr	BASEPRI, r3
}
 8008604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	2000000c 	.word	0x2000000c
	...

08008620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008620:	f3ef 8009 	mrs	r0, PSP
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	4b15      	ldr	r3, [pc, #84]	; (8008680 <pxCurrentTCBConst>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	f01e 0f10 	tst.w	lr, #16
 8008630:	bf08      	it	eq
 8008632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863a:	6010      	str	r0, [r2, #0]
 800863c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008644:	f380 8811 	msr	BASEPRI, r0
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f7fe feb6 	bl	80073c0 <vTaskSwitchContext>
 8008654:	f04f 0000 	mov.w	r0, #0
 8008658:	f380 8811 	msr	BASEPRI, r0
 800865c:	bc09      	pop	{r0, r3}
 800865e:	6819      	ldr	r1, [r3, #0]
 8008660:	6808      	ldr	r0, [r1, #0]
 8008662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008666:	f01e 0f10 	tst.w	lr, #16
 800866a:	bf08      	it	eq
 800866c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008670:	f380 8809 	msr	PSP, r0
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	f3af 8000 	nop.w

08008680 <pxCurrentTCBConst>:
 8008680:	2000144c 	.word	0x2000144c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop

08008688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	607b      	str	r3, [r7, #4]
}
 80086a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086a2:	f7fe fdd3 	bl	800724c <xTaskIncrementTick>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d003      	beq.n	80086b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086ac:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <xPortSysTickHandler+0x40>)
 80086ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	2300      	movs	r3, #0
 80086b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f383 8811 	msr	BASEPRI, r3
}
 80086be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	e000ed04 	.word	0xe000ed04

080086cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086d0:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <vPortSetupTimerInterrupt+0x34>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <vPortSetupTimerInterrupt+0x38>)
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086dc:	4b0a      	ldr	r3, [pc, #40]	; (8008708 <vPortSetupTimerInterrupt+0x3c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a0a      	ldr	r2, [pc, #40]	; (800870c <vPortSetupTimerInterrupt+0x40>)
 80086e2:	fba2 2303 	umull	r2, r3, r2, r3
 80086e6:	099b      	lsrs	r3, r3, #6
 80086e8:	4a09      	ldr	r2, [pc, #36]	; (8008710 <vPortSetupTimerInterrupt+0x44>)
 80086ea:	3b01      	subs	r3, #1
 80086ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086ee:	4b04      	ldr	r3, [pc, #16]	; (8008700 <vPortSetupTimerInterrupt+0x34>)
 80086f0:	2207      	movs	r2, #7
 80086f2:	601a      	str	r2, [r3, #0]
}
 80086f4:	bf00      	nop
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	e000e010 	.word	0xe000e010
 8008704:	e000e018 	.word	0xe000e018
 8008708:	20000000 	.word	0x20000000
 800870c:	10624dd3 	.word	0x10624dd3
 8008710:	e000e014 	.word	0xe000e014

08008714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008724 <vPortEnableVFP+0x10>
 8008718:	6801      	ldr	r1, [r0, #0]
 800871a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800871e:	6001      	str	r1, [r0, #0]
 8008720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008722:	bf00      	nop
 8008724:	e000ed88 	.word	0xe000ed88

08008728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800872e:	f3ef 8305 	mrs	r3, IPSR
 8008732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b0f      	cmp	r3, #15
 8008738:	d914      	bls.n	8008764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800873a:	4a17      	ldr	r2, [pc, #92]	; (8008798 <vPortValidateInterruptPriority+0x70>)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4413      	add	r3, r2
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008744:	4b15      	ldr	r3, [pc, #84]	; (800879c <vPortValidateInterruptPriority+0x74>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	7afa      	ldrb	r2, [r7, #11]
 800874a:	429a      	cmp	r2, r3
 800874c:	d20a      	bcs.n	8008764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	607b      	str	r3, [r7, #4]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <vPortValidateInterruptPriority+0x78>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800876c:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <vPortValidateInterruptPriority+0x7c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	429a      	cmp	r2, r3
 8008772:	d90a      	bls.n	800878a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	603b      	str	r3, [r7, #0]
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <vPortValidateInterruptPriority+0x60>
	}
 800878a:	bf00      	nop
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	e000e3f0 	.word	0xe000e3f0
 800879c:	20001a78 	.word	0x20001a78
 80087a0:	e000ed0c 	.word	0xe000ed0c
 80087a4:	20001a7c 	.word	0x20001a7c

080087a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08a      	sub	sp, #40	; 0x28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087b0:	2300      	movs	r3, #0
 80087b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087b4:	f7fe fc8e 	bl	80070d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087b8:	4b5b      	ldr	r3, [pc, #364]	; (8008928 <pvPortMalloc+0x180>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087c0:	f000 f920 	bl	8008a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087c4:	4b59      	ldr	r3, [pc, #356]	; (800892c <pvPortMalloc+0x184>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4013      	ands	r3, r2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f040 8093 	bne.w	80088f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01d      	beq.n	8008814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80087d8:	2208      	movs	r2, #8
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d014      	beq.n	8008814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f023 0307 	bic.w	r3, r3, #7
 80087f0:	3308      	adds	r3, #8
 80087f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00a      	beq.n	8008814 <pvPortMalloc+0x6c>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	617b      	str	r3, [r7, #20]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d06e      	beq.n	80088f8 <pvPortMalloc+0x150>
 800881a:	4b45      	ldr	r3, [pc, #276]	; (8008930 <pvPortMalloc+0x188>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	d869      	bhi.n	80088f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008824:	4b43      	ldr	r3, [pc, #268]	; (8008934 <pvPortMalloc+0x18c>)
 8008826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008828:	4b42      	ldr	r3, [pc, #264]	; (8008934 <pvPortMalloc+0x18c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800882e:	e004      	b.n	800883a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	429a      	cmp	r2, r3
 8008842:	d903      	bls.n	800884c <pvPortMalloc+0xa4>
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1f1      	bne.n	8008830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800884c:	4b36      	ldr	r3, [pc, #216]	; (8008928 <pvPortMalloc+0x180>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008852:	429a      	cmp	r2, r3
 8008854:	d050      	beq.n	80088f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2208      	movs	r2, #8
 800885c:	4413      	add	r3, r2
 800885e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	2308      	movs	r3, #8
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	429a      	cmp	r2, r3
 8008876:	d91f      	bls.n	80088b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4413      	add	r3, r2
 800887e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <pvPortMalloc+0xf8>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	613b      	str	r3, [r7, #16]
}
 800889c:	bf00      	nop
 800889e:	e7fe      	b.n	800889e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088b2:	69b8      	ldr	r0, [r7, #24]
 80088b4:	f000 f908 	bl	8008ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088b8:	4b1d      	ldr	r3, [pc, #116]	; (8008930 <pvPortMalloc+0x188>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	4a1b      	ldr	r2, [pc, #108]	; (8008930 <pvPortMalloc+0x188>)
 80088c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088c6:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <pvPortMalloc+0x188>)
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4b1b      	ldr	r3, [pc, #108]	; (8008938 <pvPortMalloc+0x190>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d203      	bcs.n	80088da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088d2:	4b17      	ldr	r3, [pc, #92]	; (8008930 <pvPortMalloc+0x188>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a18      	ldr	r2, [pc, #96]	; (8008938 <pvPortMalloc+0x190>)
 80088d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	4b13      	ldr	r3, [pc, #76]	; (800892c <pvPortMalloc+0x184>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	431a      	orrs	r2, r3
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <pvPortMalloc+0x194>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3301      	adds	r3, #1
 80088f4:	4a11      	ldr	r2, [pc, #68]	; (800893c <pvPortMalloc+0x194>)
 80088f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088f8:	f7fe fbfa 	bl	80070f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <pvPortMalloc+0x174>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	60fb      	str	r3, [r7, #12]
}
 8008918:	bf00      	nop
 800891a:	e7fe      	b.n	800891a <pvPortMalloc+0x172>
	return pvReturn;
 800891c:	69fb      	ldr	r3, [r7, #28]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3728      	adds	r7, #40	; 0x28
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20005688 	.word	0x20005688
 800892c:	2000569c 	.word	0x2000569c
 8008930:	2000568c 	.word	0x2000568c
 8008934:	20005680 	.word	0x20005680
 8008938:	20005690 	.word	0x20005690
 800893c:	20005694 	.word	0x20005694

08008940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d04d      	beq.n	80089ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008952:	2308      	movs	r3, #8
 8008954:	425b      	negs	r3, r3
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	4413      	add	r3, r2
 800895a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	4b24      	ldr	r3, [pc, #144]	; (80089f8 <vPortFree+0xb8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4013      	ands	r3, r2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <vPortFree+0x44>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	60fb      	str	r3, [r7, #12]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <vPortFree+0x62>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	60bb      	str	r3, [r7, #8]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <vPortFree+0xb8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01e      	beq.n	80089ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d11a      	bne.n	80089ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	4b0e      	ldr	r3, [pc, #56]	; (80089f8 <vPortFree+0xb8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	43db      	mvns	r3, r3
 80089c2:	401a      	ands	r2, r3
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089c8:	f7fe fb84 	bl	80070d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <vPortFree+0xbc>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4413      	add	r3, r2
 80089d6:	4a09      	ldr	r2, [pc, #36]	; (80089fc <vPortFree+0xbc>)
 80089d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089da:	6938      	ldr	r0, [r7, #16]
 80089dc:	f000 f874 	bl	8008ac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80089e0:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <vPortFree+0xc0>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3301      	adds	r3, #1
 80089e6:	4a06      	ldr	r2, [pc, #24]	; (8008a00 <vPortFree+0xc0>)
 80089e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80089ea:	f7fe fb81 	bl	80070f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089ee:	bf00      	nop
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	2000569c 	.word	0x2000569c
 80089fc:	2000568c 	.word	0x2000568c
 8008a00:	20005698 	.word	0x20005698

08008a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a10:	4b27      	ldr	r3, [pc, #156]	; (8008ab0 <prvHeapInit+0xac>)
 8008a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00c      	beq.n	8008a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3307      	adds	r3, #7
 8008a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0307 	bic.w	r3, r3, #7
 8008a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	4a1f      	ldr	r2, [pc, #124]	; (8008ab0 <prvHeapInit+0xac>)
 8008a34:	4413      	add	r3, r2
 8008a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a3c:	4a1d      	ldr	r2, [pc, #116]	; (8008ab4 <prvHeapInit+0xb0>)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a42:	4b1c      	ldr	r3, [pc, #112]	; (8008ab4 <prvHeapInit+0xb0>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a50:	2208      	movs	r2, #8
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	1a9b      	subs	r3, r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 0307 	bic.w	r3, r3, #7
 8008a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4a15      	ldr	r2, [pc, #84]	; (8008ab8 <prvHeapInit+0xb4>)
 8008a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a66:	4b14      	ldr	r3, [pc, #80]	; (8008ab8 <prvHeapInit+0xb4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a6e:	4b12      	ldr	r3, [pc, #72]	; (8008ab8 <prvHeapInit+0xb4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	1ad2      	subs	r2, r2, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a84:	4b0c      	ldr	r3, [pc, #48]	; (8008ab8 <prvHeapInit+0xb4>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	4a0a      	ldr	r2, [pc, #40]	; (8008abc <prvHeapInit+0xb8>)
 8008a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	4a09      	ldr	r2, [pc, #36]	; (8008ac0 <prvHeapInit+0xbc>)
 8008a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a9c:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <prvHeapInit+0xc0>)
 8008a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008aa2:	601a      	str	r2, [r3, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	20001a80 	.word	0x20001a80
 8008ab4:	20005680 	.word	0x20005680
 8008ab8:	20005688 	.word	0x20005688
 8008abc:	20005690 	.word	0x20005690
 8008ac0:	2000568c 	.word	0x2000568c
 8008ac4:	2000569c 	.word	0x2000569c

08008ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ad0:	4b28      	ldr	r3, [pc, #160]	; (8008b74 <prvInsertBlockIntoFreeList+0xac>)
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	e002      	b.n	8008adc <prvInsertBlockIntoFreeList+0x14>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d8f7      	bhi.n	8008ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	4413      	add	r3, r2
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d108      	bne.n	8008b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	441a      	add	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	441a      	add	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d118      	bne.n	8008b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4b15      	ldr	r3, [pc, #84]	; (8008b78 <prvInsertBlockIntoFreeList+0xb0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d00d      	beq.n	8008b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	441a      	add	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	e008      	b.n	8008b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b46:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <prvInsertBlockIntoFreeList+0xb0>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	e003      	b.n	8008b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d002      	beq.n	8008b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	20005680 	.word	0x20005680
 8008b78:	20005688 	.word	0x20005688

08008b7c <__cvt>:
 8008b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b80:	ec55 4b10 	vmov	r4, r5, d0
 8008b84:	2d00      	cmp	r5, #0
 8008b86:	460e      	mov	r6, r1
 8008b88:	4619      	mov	r1, r3
 8008b8a:	462b      	mov	r3, r5
 8008b8c:	bfbb      	ittet	lt
 8008b8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b92:	461d      	movlt	r5, r3
 8008b94:	2300      	movge	r3, #0
 8008b96:	232d      	movlt	r3, #45	; 0x2d
 8008b98:	700b      	strb	r3, [r1, #0]
 8008b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ba0:	4691      	mov	r9, r2
 8008ba2:	f023 0820 	bic.w	r8, r3, #32
 8008ba6:	bfbc      	itt	lt
 8008ba8:	4622      	movlt	r2, r4
 8008baa:	4614      	movlt	r4, r2
 8008bac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bb0:	d005      	beq.n	8008bbe <__cvt+0x42>
 8008bb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008bb6:	d100      	bne.n	8008bba <__cvt+0x3e>
 8008bb8:	3601      	adds	r6, #1
 8008bba:	2102      	movs	r1, #2
 8008bbc:	e000      	b.n	8008bc0 <__cvt+0x44>
 8008bbe:	2103      	movs	r1, #3
 8008bc0:	ab03      	add	r3, sp, #12
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	ab02      	add	r3, sp, #8
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	ec45 4b10 	vmov	d0, r4, r5
 8008bcc:	4653      	mov	r3, sl
 8008bce:	4632      	mov	r2, r6
 8008bd0:	f001 fa0e 	bl	8009ff0 <_dtoa_r>
 8008bd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008bd8:	4607      	mov	r7, r0
 8008bda:	d102      	bne.n	8008be2 <__cvt+0x66>
 8008bdc:	f019 0f01 	tst.w	r9, #1
 8008be0:	d022      	beq.n	8008c28 <__cvt+0xac>
 8008be2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008be6:	eb07 0906 	add.w	r9, r7, r6
 8008bea:	d110      	bne.n	8008c0e <__cvt+0x92>
 8008bec:	783b      	ldrb	r3, [r7, #0]
 8008bee:	2b30      	cmp	r3, #48	; 0x30
 8008bf0:	d10a      	bne.n	8008c08 <__cvt+0x8c>
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	f7f7 ff6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bfe:	b918      	cbnz	r0, 8008c08 <__cvt+0x8c>
 8008c00:	f1c6 0601 	rsb	r6, r6, #1
 8008c04:	f8ca 6000 	str.w	r6, [sl]
 8008c08:	f8da 3000 	ldr.w	r3, [sl]
 8008c0c:	4499      	add	r9, r3
 8008c0e:	2200      	movs	r2, #0
 8008c10:	2300      	movs	r3, #0
 8008c12:	4620      	mov	r0, r4
 8008c14:	4629      	mov	r1, r5
 8008c16:	f7f7 ff5f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c1a:	b108      	cbz	r0, 8008c20 <__cvt+0xa4>
 8008c1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c20:	2230      	movs	r2, #48	; 0x30
 8008c22:	9b03      	ldr	r3, [sp, #12]
 8008c24:	454b      	cmp	r3, r9
 8008c26:	d307      	bcc.n	8008c38 <__cvt+0xbc>
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c2c:	1bdb      	subs	r3, r3, r7
 8008c2e:	4638      	mov	r0, r7
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	b004      	add	sp, #16
 8008c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c38:	1c59      	adds	r1, r3, #1
 8008c3a:	9103      	str	r1, [sp, #12]
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e7f0      	b.n	8008c22 <__cvt+0xa6>

08008c40 <__exponent>:
 8008c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c42:	4603      	mov	r3, r0
 8008c44:	2900      	cmp	r1, #0
 8008c46:	bfb8      	it	lt
 8008c48:	4249      	neglt	r1, r1
 8008c4a:	f803 2b02 	strb.w	r2, [r3], #2
 8008c4e:	bfb4      	ite	lt
 8008c50:	222d      	movlt	r2, #45	; 0x2d
 8008c52:	222b      	movge	r2, #43	; 0x2b
 8008c54:	2909      	cmp	r1, #9
 8008c56:	7042      	strb	r2, [r0, #1]
 8008c58:	dd2a      	ble.n	8008cb0 <__exponent+0x70>
 8008c5a:	f10d 0207 	add.w	r2, sp, #7
 8008c5e:	4617      	mov	r7, r2
 8008c60:	260a      	movs	r6, #10
 8008c62:	4694      	mov	ip, r2
 8008c64:	fb91 f5f6 	sdiv	r5, r1, r6
 8008c68:	fb06 1415 	mls	r4, r6, r5, r1
 8008c6c:	3430      	adds	r4, #48	; 0x30
 8008c6e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008c72:	460c      	mov	r4, r1
 8008c74:	2c63      	cmp	r4, #99	; 0x63
 8008c76:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	dcf1      	bgt.n	8008c62 <__exponent+0x22>
 8008c7e:	3130      	adds	r1, #48	; 0x30
 8008c80:	f1ac 0402 	sub.w	r4, ip, #2
 8008c84:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008c88:	1c41      	adds	r1, r0, #1
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	42ba      	cmp	r2, r7
 8008c8e:	d30a      	bcc.n	8008ca6 <__exponent+0x66>
 8008c90:	f10d 0209 	add.w	r2, sp, #9
 8008c94:	eba2 020c 	sub.w	r2, r2, ip
 8008c98:	42bc      	cmp	r4, r7
 8008c9a:	bf88      	it	hi
 8008c9c:	2200      	movhi	r2, #0
 8008c9e:	4413      	add	r3, r2
 8008ca0:	1a18      	subs	r0, r3, r0
 8008ca2:	b003      	add	sp, #12
 8008ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ca6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008caa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008cae:	e7ed      	b.n	8008c8c <__exponent+0x4c>
 8008cb0:	2330      	movs	r3, #48	; 0x30
 8008cb2:	3130      	adds	r1, #48	; 0x30
 8008cb4:	7083      	strb	r3, [r0, #2]
 8008cb6:	70c1      	strb	r1, [r0, #3]
 8008cb8:	1d03      	adds	r3, r0, #4
 8008cba:	e7f1      	b.n	8008ca0 <__exponent+0x60>

08008cbc <_printf_float>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	ed2d 8b02 	vpush	{d8}
 8008cc4:	b08d      	sub	sp, #52	; 0x34
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ccc:	4616      	mov	r6, r2
 8008cce:	461f      	mov	r7, r3
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	f001 f821 	bl	8009d18 <_localeconv_r>
 8008cd6:	f8d0 a000 	ldr.w	sl, [r0]
 8008cda:	4650      	mov	r0, sl
 8008cdc:	f7f7 fad0 	bl	8000280 <strlen>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	9305      	str	r3, [sp, #20]
 8008ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8008cec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008cf0:	3307      	adds	r3, #7
 8008cf2:	f023 0307 	bic.w	r3, r3, #7
 8008cf6:	f103 0208 	add.w	r2, r3, #8
 8008cfa:	f8c8 2000 	str.w	r2, [r8]
 8008cfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d06:	9307      	str	r3, [sp, #28]
 8008d08:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d0c:	ee08 0a10 	vmov	s16, r0
 8008d10:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008d14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d18:	4b9e      	ldr	r3, [pc, #632]	; (8008f94 <_printf_float+0x2d8>)
 8008d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d1e:	f7f7 ff0d 	bl	8000b3c <__aeabi_dcmpun>
 8008d22:	bb88      	cbnz	r0, 8008d88 <_printf_float+0xcc>
 8008d24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d28:	4b9a      	ldr	r3, [pc, #616]	; (8008f94 <_printf_float+0x2d8>)
 8008d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d2e:	f7f7 fee7 	bl	8000b00 <__aeabi_dcmple>
 8008d32:	bb48      	cbnz	r0, 8008d88 <_printf_float+0xcc>
 8008d34:	2200      	movs	r2, #0
 8008d36:	2300      	movs	r3, #0
 8008d38:	4640      	mov	r0, r8
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	f7f7 fed6 	bl	8000aec <__aeabi_dcmplt>
 8008d40:	b110      	cbz	r0, 8008d48 <_printf_float+0x8c>
 8008d42:	232d      	movs	r3, #45	; 0x2d
 8008d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d48:	4a93      	ldr	r2, [pc, #588]	; (8008f98 <_printf_float+0x2dc>)
 8008d4a:	4b94      	ldr	r3, [pc, #592]	; (8008f9c <_printf_float+0x2e0>)
 8008d4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d50:	bf94      	ite	ls
 8008d52:	4690      	movls	r8, r2
 8008d54:	4698      	movhi	r8, r3
 8008d56:	2303      	movs	r3, #3
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	9b05      	ldr	r3, [sp, #20]
 8008d5c:	f023 0304 	bic.w	r3, r3, #4
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	f04f 0900 	mov.w	r9, #0
 8008d66:	9700      	str	r7, [sp, #0]
 8008d68:	4633      	mov	r3, r6
 8008d6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f000 f9da 	bl	8009128 <_printf_common>
 8008d74:	3001      	adds	r0, #1
 8008d76:	f040 8090 	bne.w	8008e9a <_printf_float+0x1de>
 8008d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d7e:	b00d      	add	sp, #52	; 0x34
 8008d80:	ecbd 8b02 	vpop	{d8}
 8008d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d88:	4642      	mov	r2, r8
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	4649      	mov	r1, r9
 8008d90:	f7f7 fed4 	bl	8000b3c <__aeabi_dcmpun>
 8008d94:	b140      	cbz	r0, 8008da8 <_printf_float+0xec>
 8008d96:	464b      	mov	r3, r9
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bfbc      	itt	lt
 8008d9c:	232d      	movlt	r3, #45	; 0x2d
 8008d9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008da2:	4a7f      	ldr	r2, [pc, #508]	; (8008fa0 <_printf_float+0x2e4>)
 8008da4:	4b7f      	ldr	r3, [pc, #508]	; (8008fa4 <_printf_float+0x2e8>)
 8008da6:	e7d1      	b.n	8008d4c <_printf_float+0x90>
 8008da8:	6863      	ldr	r3, [r4, #4]
 8008daa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008dae:	9206      	str	r2, [sp, #24]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	d13f      	bne.n	8008e34 <_printf_float+0x178>
 8008db4:	2306      	movs	r3, #6
 8008db6:	6063      	str	r3, [r4, #4]
 8008db8:	9b05      	ldr	r3, [sp, #20]
 8008dba:	6861      	ldr	r1, [r4, #4]
 8008dbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9303      	str	r3, [sp, #12]
 8008dc4:	ab0a      	add	r3, sp, #40	; 0x28
 8008dc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008dca:	ab09      	add	r3, sp, #36	; 0x24
 8008dcc:	ec49 8b10 	vmov	d0, r8, r9
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	6022      	str	r2, [r4, #0]
 8008dd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f7ff fecf 	bl	8008b7c <__cvt>
 8008dde:	9b06      	ldr	r3, [sp, #24]
 8008de0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008de2:	2b47      	cmp	r3, #71	; 0x47
 8008de4:	4680      	mov	r8, r0
 8008de6:	d108      	bne.n	8008dfa <_printf_float+0x13e>
 8008de8:	1cc8      	adds	r0, r1, #3
 8008dea:	db02      	blt.n	8008df2 <_printf_float+0x136>
 8008dec:	6863      	ldr	r3, [r4, #4]
 8008dee:	4299      	cmp	r1, r3
 8008df0:	dd41      	ble.n	8008e76 <_printf_float+0x1ba>
 8008df2:	f1ab 0302 	sub.w	r3, fp, #2
 8008df6:	fa5f fb83 	uxtb.w	fp, r3
 8008dfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dfe:	d820      	bhi.n	8008e42 <_printf_float+0x186>
 8008e00:	3901      	subs	r1, #1
 8008e02:	465a      	mov	r2, fp
 8008e04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e08:	9109      	str	r1, [sp, #36]	; 0x24
 8008e0a:	f7ff ff19 	bl	8008c40 <__exponent>
 8008e0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e10:	1813      	adds	r3, r2, r0
 8008e12:	2a01      	cmp	r2, #1
 8008e14:	4681      	mov	r9, r0
 8008e16:	6123      	str	r3, [r4, #16]
 8008e18:	dc02      	bgt.n	8008e20 <_printf_float+0x164>
 8008e1a:	6822      	ldr	r2, [r4, #0]
 8008e1c:	07d2      	lsls	r2, r2, #31
 8008e1e:	d501      	bpl.n	8008e24 <_printf_float+0x168>
 8008e20:	3301      	adds	r3, #1
 8008e22:	6123      	str	r3, [r4, #16]
 8008e24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d09c      	beq.n	8008d66 <_printf_float+0xaa>
 8008e2c:	232d      	movs	r3, #45	; 0x2d
 8008e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e32:	e798      	b.n	8008d66 <_printf_float+0xaa>
 8008e34:	9a06      	ldr	r2, [sp, #24]
 8008e36:	2a47      	cmp	r2, #71	; 0x47
 8008e38:	d1be      	bne.n	8008db8 <_printf_float+0xfc>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1bc      	bne.n	8008db8 <_printf_float+0xfc>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e7b9      	b.n	8008db6 <_printf_float+0xfa>
 8008e42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e46:	d118      	bne.n	8008e7a <_printf_float+0x1be>
 8008e48:	2900      	cmp	r1, #0
 8008e4a:	6863      	ldr	r3, [r4, #4]
 8008e4c:	dd0b      	ble.n	8008e66 <_printf_float+0x1aa>
 8008e4e:	6121      	str	r1, [r4, #16]
 8008e50:	b913      	cbnz	r3, 8008e58 <_printf_float+0x19c>
 8008e52:	6822      	ldr	r2, [r4, #0]
 8008e54:	07d0      	lsls	r0, r2, #31
 8008e56:	d502      	bpl.n	8008e5e <_printf_float+0x1a2>
 8008e58:	3301      	adds	r3, #1
 8008e5a:	440b      	add	r3, r1
 8008e5c:	6123      	str	r3, [r4, #16]
 8008e5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e60:	f04f 0900 	mov.w	r9, #0
 8008e64:	e7de      	b.n	8008e24 <_printf_float+0x168>
 8008e66:	b913      	cbnz	r3, 8008e6e <_printf_float+0x1b2>
 8008e68:	6822      	ldr	r2, [r4, #0]
 8008e6a:	07d2      	lsls	r2, r2, #31
 8008e6c:	d501      	bpl.n	8008e72 <_printf_float+0x1b6>
 8008e6e:	3302      	adds	r3, #2
 8008e70:	e7f4      	b.n	8008e5c <_printf_float+0x1a0>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e7f2      	b.n	8008e5c <_printf_float+0x1a0>
 8008e76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e7c:	4299      	cmp	r1, r3
 8008e7e:	db05      	blt.n	8008e8c <_printf_float+0x1d0>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	6121      	str	r1, [r4, #16]
 8008e84:	07d8      	lsls	r0, r3, #31
 8008e86:	d5ea      	bpl.n	8008e5e <_printf_float+0x1a2>
 8008e88:	1c4b      	adds	r3, r1, #1
 8008e8a:	e7e7      	b.n	8008e5c <_printf_float+0x1a0>
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	bfd4      	ite	le
 8008e90:	f1c1 0202 	rsble	r2, r1, #2
 8008e94:	2201      	movgt	r2, #1
 8008e96:	4413      	add	r3, r2
 8008e98:	e7e0      	b.n	8008e5c <_printf_float+0x1a0>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	055a      	lsls	r2, r3, #21
 8008e9e:	d407      	bmi.n	8008eb0 <_printf_float+0x1f4>
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b8      	blx	r7
 8008eaa:	3001      	adds	r0, #1
 8008eac:	d12c      	bne.n	8008f08 <_printf_float+0x24c>
 8008eae:	e764      	b.n	8008d7a <_printf_float+0xbe>
 8008eb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008eb4:	f240 80e0 	bls.w	8009078 <_printf_float+0x3bc>
 8008eb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f7f7 fe0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d034      	beq.n	8008f32 <_printf_float+0x276>
 8008ec8:	4a37      	ldr	r2, [pc, #220]	; (8008fa8 <_printf_float+0x2ec>)
 8008eca:	2301      	movs	r3, #1
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4628      	mov	r0, r5
 8008ed0:	47b8      	blx	r7
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	f43f af51 	beq.w	8008d7a <_printf_float+0xbe>
 8008ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008edc:	429a      	cmp	r2, r3
 8008ede:	db02      	blt.n	8008ee6 <_printf_float+0x22a>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	07d8      	lsls	r0, r3, #31
 8008ee4:	d510      	bpl.n	8008f08 <_printf_float+0x24c>
 8008ee6:	ee18 3a10 	vmov	r3, s16
 8008eea:	4652      	mov	r2, sl
 8008eec:	4631      	mov	r1, r6
 8008eee:	4628      	mov	r0, r5
 8008ef0:	47b8      	blx	r7
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	f43f af41 	beq.w	8008d7a <_printf_float+0xbe>
 8008ef8:	f04f 0800 	mov.w	r8, #0
 8008efc:	f104 091a 	add.w	r9, r4, #26
 8008f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f02:	3b01      	subs	r3, #1
 8008f04:	4543      	cmp	r3, r8
 8008f06:	dc09      	bgt.n	8008f1c <_printf_float+0x260>
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	079b      	lsls	r3, r3, #30
 8008f0c:	f100 8107 	bmi.w	800911e <_printf_float+0x462>
 8008f10:	68e0      	ldr	r0, [r4, #12]
 8008f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f14:	4298      	cmp	r0, r3
 8008f16:	bfb8      	it	lt
 8008f18:	4618      	movlt	r0, r3
 8008f1a:	e730      	b.n	8008d7e <_printf_float+0xc2>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	464a      	mov	r2, r9
 8008f20:	4631      	mov	r1, r6
 8008f22:	4628      	mov	r0, r5
 8008f24:	47b8      	blx	r7
 8008f26:	3001      	adds	r0, #1
 8008f28:	f43f af27 	beq.w	8008d7a <_printf_float+0xbe>
 8008f2c:	f108 0801 	add.w	r8, r8, #1
 8008f30:	e7e6      	b.n	8008f00 <_printf_float+0x244>
 8008f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	dc39      	bgt.n	8008fac <_printf_float+0x2f0>
 8008f38:	4a1b      	ldr	r2, [pc, #108]	; (8008fa8 <_printf_float+0x2ec>)
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	4628      	mov	r0, r5
 8008f40:	47b8      	blx	r7
 8008f42:	3001      	adds	r0, #1
 8008f44:	f43f af19 	beq.w	8008d7a <_printf_float+0xbe>
 8008f48:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	d102      	bne.n	8008f56 <_printf_float+0x29a>
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	07d9      	lsls	r1, r3, #31
 8008f54:	d5d8      	bpl.n	8008f08 <_printf_float+0x24c>
 8008f56:	ee18 3a10 	vmov	r3, s16
 8008f5a:	4652      	mov	r2, sl
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	f43f af09 	beq.w	8008d7a <_printf_float+0xbe>
 8008f68:	f04f 0900 	mov.w	r9, #0
 8008f6c:	f104 0a1a 	add.w	sl, r4, #26
 8008f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f72:	425b      	negs	r3, r3
 8008f74:	454b      	cmp	r3, r9
 8008f76:	dc01      	bgt.n	8008f7c <_printf_float+0x2c0>
 8008f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7a:	e792      	b.n	8008ea2 <_printf_float+0x1e6>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	4652      	mov	r2, sl
 8008f80:	4631      	mov	r1, r6
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	f43f aef7 	beq.w	8008d7a <_printf_float+0xbe>
 8008f8c:	f109 0901 	add.w	r9, r9, #1
 8008f90:	e7ee      	b.n	8008f70 <_printf_float+0x2b4>
 8008f92:	bf00      	nop
 8008f94:	7fefffff 	.word	0x7fefffff
 8008f98:	0800d868 	.word	0x0800d868
 8008f9c:	0800d86c 	.word	0x0800d86c
 8008fa0:	0800d870 	.word	0x0800d870
 8008fa4:	0800d874 	.word	0x0800d874
 8008fa8:	0800d878 	.word	0x0800d878
 8008fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	bfa8      	it	ge
 8008fb4:	461a      	movge	r2, r3
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	4691      	mov	r9, r2
 8008fba:	dc37      	bgt.n	800902c <_printf_float+0x370>
 8008fbc:	f04f 0b00 	mov.w	fp, #0
 8008fc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fc4:	f104 021a 	add.w	r2, r4, #26
 8008fc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fca:	9305      	str	r3, [sp, #20]
 8008fcc:	eba3 0309 	sub.w	r3, r3, r9
 8008fd0:	455b      	cmp	r3, fp
 8008fd2:	dc33      	bgt.n	800903c <_printf_float+0x380>
 8008fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	db3b      	blt.n	8009054 <_printf_float+0x398>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	07da      	lsls	r2, r3, #31
 8008fe0:	d438      	bmi.n	8009054 <_printf_float+0x398>
 8008fe2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008fe6:	eba2 0903 	sub.w	r9, r2, r3
 8008fea:	9b05      	ldr	r3, [sp, #20]
 8008fec:	1ad2      	subs	r2, r2, r3
 8008fee:	4591      	cmp	r9, r2
 8008ff0:	bfa8      	it	ge
 8008ff2:	4691      	movge	r9, r2
 8008ff4:	f1b9 0f00 	cmp.w	r9, #0
 8008ff8:	dc35      	bgt.n	8009066 <_printf_float+0x3aa>
 8008ffa:	f04f 0800 	mov.w	r8, #0
 8008ffe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009002:	f104 0a1a 	add.w	sl, r4, #26
 8009006:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800900a:	1a9b      	subs	r3, r3, r2
 800900c:	eba3 0309 	sub.w	r3, r3, r9
 8009010:	4543      	cmp	r3, r8
 8009012:	f77f af79 	ble.w	8008f08 <_printf_float+0x24c>
 8009016:	2301      	movs	r3, #1
 8009018:	4652      	mov	r2, sl
 800901a:	4631      	mov	r1, r6
 800901c:	4628      	mov	r0, r5
 800901e:	47b8      	blx	r7
 8009020:	3001      	adds	r0, #1
 8009022:	f43f aeaa 	beq.w	8008d7a <_printf_float+0xbe>
 8009026:	f108 0801 	add.w	r8, r8, #1
 800902a:	e7ec      	b.n	8009006 <_printf_float+0x34a>
 800902c:	4613      	mov	r3, r2
 800902e:	4631      	mov	r1, r6
 8009030:	4642      	mov	r2, r8
 8009032:	4628      	mov	r0, r5
 8009034:	47b8      	blx	r7
 8009036:	3001      	adds	r0, #1
 8009038:	d1c0      	bne.n	8008fbc <_printf_float+0x300>
 800903a:	e69e      	b.n	8008d7a <_printf_float+0xbe>
 800903c:	2301      	movs	r3, #1
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	9205      	str	r2, [sp, #20]
 8009044:	47b8      	blx	r7
 8009046:	3001      	adds	r0, #1
 8009048:	f43f ae97 	beq.w	8008d7a <_printf_float+0xbe>
 800904c:	9a05      	ldr	r2, [sp, #20]
 800904e:	f10b 0b01 	add.w	fp, fp, #1
 8009052:	e7b9      	b.n	8008fc8 <_printf_float+0x30c>
 8009054:	ee18 3a10 	vmov	r3, s16
 8009058:	4652      	mov	r2, sl
 800905a:	4631      	mov	r1, r6
 800905c:	4628      	mov	r0, r5
 800905e:	47b8      	blx	r7
 8009060:	3001      	adds	r0, #1
 8009062:	d1be      	bne.n	8008fe2 <_printf_float+0x326>
 8009064:	e689      	b.n	8008d7a <_printf_float+0xbe>
 8009066:	9a05      	ldr	r2, [sp, #20]
 8009068:	464b      	mov	r3, r9
 800906a:	4442      	add	r2, r8
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	d1c1      	bne.n	8008ffa <_printf_float+0x33e>
 8009076:	e680      	b.n	8008d7a <_printf_float+0xbe>
 8009078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800907a:	2a01      	cmp	r2, #1
 800907c:	dc01      	bgt.n	8009082 <_printf_float+0x3c6>
 800907e:	07db      	lsls	r3, r3, #31
 8009080:	d53a      	bpl.n	80090f8 <_printf_float+0x43c>
 8009082:	2301      	movs	r3, #1
 8009084:	4642      	mov	r2, r8
 8009086:	4631      	mov	r1, r6
 8009088:	4628      	mov	r0, r5
 800908a:	47b8      	blx	r7
 800908c:	3001      	adds	r0, #1
 800908e:	f43f ae74 	beq.w	8008d7a <_printf_float+0xbe>
 8009092:	ee18 3a10 	vmov	r3, s16
 8009096:	4652      	mov	r2, sl
 8009098:	4631      	mov	r1, r6
 800909a:	4628      	mov	r0, r5
 800909c:	47b8      	blx	r7
 800909e:	3001      	adds	r0, #1
 80090a0:	f43f ae6b 	beq.w	8008d7a <_printf_float+0xbe>
 80090a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090a8:	2200      	movs	r2, #0
 80090aa:	2300      	movs	r3, #0
 80090ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80090b0:	f7f7 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 80090b4:	b9d8      	cbnz	r0, 80090ee <_printf_float+0x432>
 80090b6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80090ba:	f108 0201 	add.w	r2, r8, #1
 80090be:	4631      	mov	r1, r6
 80090c0:	4628      	mov	r0, r5
 80090c2:	47b8      	blx	r7
 80090c4:	3001      	adds	r0, #1
 80090c6:	d10e      	bne.n	80090e6 <_printf_float+0x42a>
 80090c8:	e657      	b.n	8008d7a <_printf_float+0xbe>
 80090ca:	2301      	movs	r3, #1
 80090cc:	4652      	mov	r2, sl
 80090ce:	4631      	mov	r1, r6
 80090d0:	4628      	mov	r0, r5
 80090d2:	47b8      	blx	r7
 80090d4:	3001      	adds	r0, #1
 80090d6:	f43f ae50 	beq.w	8008d7a <_printf_float+0xbe>
 80090da:	f108 0801 	add.w	r8, r8, #1
 80090de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e0:	3b01      	subs	r3, #1
 80090e2:	4543      	cmp	r3, r8
 80090e4:	dcf1      	bgt.n	80090ca <_printf_float+0x40e>
 80090e6:	464b      	mov	r3, r9
 80090e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090ec:	e6da      	b.n	8008ea4 <_printf_float+0x1e8>
 80090ee:	f04f 0800 	mov.w	r8, #0
 80090f2:	f104 0a1a 	add.w	sl, r4, #26
 80090f6:	e7f2      	b.n	80090de <_printf_float+0x422>
 80090f8:	2301      	movs	r3, #1
 80090fa:	4642      	mov	r2, r8
 80090fc:	e7df      	b.n	80090be <_printf_float+0x402>
 80090fe:	2301      	movs	r3, #1
 8009100:	464a      	mov	r2, r9
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	47b8      	blx	r7
 8009108:	3001      	adds	r0, #1
 800910a:	f43f ae36 	beq.w	8008d7a <_printf_float+0xbe>
 800910e:	f108 0801 	add.w	r8, r8, #1
 8009112:	68e3      	ldr	r3, [r4, #12]
 8009114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009116:	1a5b      	subs	r3, r3, r1
 8009118:	4543      	cmp	r3, r8
 800911a:	dcf0      	bgt.n	80090fe <_printf_float+0x442>
 800911c:	e6f8      	b.n	8008f10 <_printf_float+0x254>
 800911e:	f04f 0800 	mov.w	r8, #0
 8009122:	f104 0919 	add.w	r9, r4, #25
 8009126:	e7f4      	b.n	8009112 <_printf_float+0x456>

08009128 <_printf_common>:
 8009128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800912c:	4616      	mov	r6, r2
 800912e:	4699      	mov	r9, r3
 8009130:	688a      	ldr	r2, [r1, #8]
 8009132:	690b      	ldr	r3, [r1, #16]
 8009134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009138:	4293      	cmp	r3, r2
 800913a:	bfb8      	it	lt
 800913c:	4613      	movlt	r3, r2
 800913e:	6033      	str	r3, [r6, #0]
 8009140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009144:	4607      	mov	r7, r0
 8009146:	460c      	mov	r4, r1
 8009148:	b10a      	cbz	r2, 800914e <_printf_common+0x26>
 800914a:	3301      	adds	r3, #1
 800914c:	6033      	str	r3, [r6, #0]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	0699      	lsls	r1, r3, #26
 8009152:	bf42      	ittt	mi
 8009154:	6833      	ldrmi	r3, [r6, #0]
 8009156:	3302      	addmi	r3, #2
 8009158:	6033      	strmi	r3, [r6, #0]
 800915a:	6825      	ldr	r5, [r4, #0]
 800915c:	f015 0506 	ands.w	r5, r5, #6
 8009160:	d106      	bne.n	8009170 <_printf_common+0x48>
 8009162:	f104 0a19 	add.w	sl, r4, #25
 8009166:	68e3      	ldr	r3, [r4, #12]
 8009168:	6832      	ldr	r2, [r6, #0]
 800916a:	1a9b      	subs	r3, r3, r2
 800916c:	42ab      	cmp	r3, r5
 800916e:	dc26      	bgt.n	80091be <_printf_common+0x96>
 8009170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009174:	1e13      	subs	r3, r2, #0
 8009176:	6822      	ldr	r2, [r4, #0]
 8009178:	bf18      	it	ne
 800917a:	2301      	movne	r3, #1
 800917c:	0692      	lsls	r2, r2, #26
 800917e:	d42b      	bmi.n	80091d8 <_printf_common+0xb0>
 8009180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009184:	4649      	mov	r1, r9
 8009186:	4638      	mov	r0, r7
 8009188:	47c0      	blx	r8
 800918a:	3001      	adds	r0, #1
 800918c:	d01e      	beq.n	80091cc <_printf_common+0xa4>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	6922      	ldr	r2, [r4, #16]
 8009192:	f003 0306 	and.w	r3, r3, #6
 8009196:	2b04      	cmp	r3, #4
 8009198:	bf02      	ittt	eq
 800919a:	68e5      	ldreq	r5, [r4, #12]
 800919c:	6833      	ldreq	r3, [r6, #0]
 800919e:	1aed      	subeq	r5, r5, r3
 80091a0:	68a3      	ldr	r3, [r4, #8]
 80091a2:	bf0c      	ite	eq
 80091a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a8:	2500      	movne	r5, #0
 80091aa:	4293      	cmp	r3, r2
 80091ac:	bfc4      	itt	gt
 80091ae:	1a9b      	subgt	r3, r3, r2
 80091b0:	18ed      	addgt	r5, r5, r3
 80091b2:	2600      	movs	r6, #0
 80091b4:	341a      	adds	r4, #26
 80091b6:	42b5      	cmp	r5, r6
 80091b8:	d11a      	bne.n	80091f0 <_printf_common+0xc8>
 80091ba:	2000      	movs	r0, #0
 80091bc:	e008      	b.n	80091d0 <_printf_common+0xa8>
 80091be:	2301      	movs	r3, #1
 80091c0:	4652      	mov	r2, sl
 80091c2:	4649      	mov	r1, r9
 80091c4:	4638      	mov	r0, r7
 80091c6:	47c0      	blx	r8
 80091c8:	3001      	adds	r0, #1
 80091ca:	d103      	bne.n	80091d4 <_printf_common+0xac>
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d4:	3501      	adds	r5, #1
 80091d6:	e7c6      	b.n	8009166 <_printf_common+0x3e>
 80091d8:	18e1      	adds	r1, r4, r3
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	2030      	movs	r0, #48	; 0x30
 80091de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091e2:	4422      	add	r2, r4
 80091e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091ec:	3302      	adds	r3, #2
 80091ee:	e7c7      	b.n	8009180 <_printf_common+0x58>
 80091f0:	2301      	movs	r3, #1
 80091f2:	4622      	mov	r2, r4
 80091f4:	4649      	mov	r1, r9
 80091f6:	4638      	mov	r0, r7
 80091f8:	47c0      	blx	r8
 80091fa:	3001      	adds	r0, #1
 80091fc:	d0e6      	beq.n	80091cc <_printf_common+0xa4>
 80091fe:	3601      	adds	r6, #1
 8009200:	e7d9      	b.n	80091b6 <_printf_common+0x8e>
	...

08009204 <_printf_i>:
 8009204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009208:	7e0f      	ldrb	r7, [r1, #24]
 800920a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800920c:	2f78      	cmp	r7, #120	; 0x78
 800920e:	4691      	mov	r9, r2
 8009210:	4680      	mov	r8, r0
 8009212:	460c      	mov	r4, r1
 8009214:	469a      	mov	sl, r3
 8009216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800921a:	d807      	bhi.n	800922c <_printf_i+0x28>
 800921c:	2f62      	cmp	r7, #98	; 0x62
 800921e:	d80a      	bhi.n	8009236 <_printf_i+0x32>
 8009220:	2f00      	cmp	r7, #0
 8009222:	f000 80d4 	beq.w	80093ce <_printf_i+0x1ca>
 8009226:	2f58      	cmp	r7, #88	; 0x58
 8009228:	f000 80c0 	beq.w	80093ac <_printf_i+0x1a8>
 800922c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009234:	e03a      	b.n	80092ac <_printf_i+0xa8>
 8009236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800923a:	2b15      	cmp	r3, #21
 800923c:	d8f6      	bhi.n	800922c <_printf_i+0x28>
 800923e:	a101      	add	r1, pc, #4	; (adr r1, 8009244 <_printf_i+0x40>)
 8009240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009244:	0800929d 	.word	0x0800929d
 8009248:	080092b1 	.word	0x080092b1
 800924c:	0800922d 	.word	0x0800922d
 8009250:	0800922d 	.word	0x0800922d
 8009254:	0800922d 	.word	0x0800922d
 8009258:	0800922d 	.word	0x0800922d
 800925c:	080092b1 	.word	0x080092b1
 8009260:	0800922d 	.word	0x0800922d
 8009264:	0800922d 	.word	0x0800922d
 8009268:	0800922d 	.word	0x0800922d
 800926c:	0800922d 	.word	0x0800922d
 8009270:	080093b5 	.word	0x080093b5
 8009274:	080092dd 	.word	0x080092dd
 8009278:	0800936f 	.word	0x0800936f
 800927c:	0800922d 	.word	0x0800922d
 8009280:	0800922d 	.word	0x0800922d
 8009284:	080093d7 	.word	0x080093d7
 8009288:	0800922d 	.word	0x0800922d
 800928c:	080092dd 	.word	0x080092dd
 8009290:	0800922d 	.word	0x0800922d
 8009294:	0800922d 	.word	0x0800922d
 8009298:	08009377 	.word	0x08009377
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	1d1a      	adds	r2, r3, #4
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	602a      	str	r2, [r5, #0]
 80092a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092ac:	2301      	movs	r3, #1
 80092ae:	e09f      	b.n	80093f0 <_printf_i+0x1ec>
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	682b      	ldr	r3, [r5, #0]
 80092b4:	0607      	lsls	r7, r0, #24
 80092b6:	f103 0104 	add.w	r1, r3, #4
 80092ba:	6029      	str	r1, [r5, #0]
 80092bc:	d501      	bpl.n	80092c2 <_printf_i+0xbe>
 80092be:	681e      	ldr	r6, [r3, #0]
 80092c0:	e003      	b.n	80092ca <_printf_i+0xc6>
 80092c2:	0646      	lsls	r6, r0, #25
 80092c4:	d5fb      	bpl.n	80092be <_printf_i+0xba>
 80092c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80092ca:	2e00      	cmp	r6, #0
 80092cc:	da03      	bge.n	80092d6 <_printf_i+0xd2>
 80092ce:	232d      	movs	r3, #45	; 0x2d
 80092d0:	4276      	negs	r6, r6
 80092d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d6:	485a      	ldr	r0, [pc, #360]	; (8009440 <_printf_i+0x23c>)
 80092d8:	230a      	movs	r3, #10
 80092da:	e012      	b.n	8009302 <_printf_i+0xfe>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	1d19      	adds	r1, r3, #4
 80092e2:	6029      	str	r1, [r5, #0]
 80092e4:	0605      	lsls	r5, r0, #24
 80092e6:	d501      	bpl.n	80092ec <_printf_i+0xe8>
 80092e8:	681e      	ldr	r6, [r3, #0]
 80092ea:	e002      	b.n	80092f2 <_printf_i+0xee>
 80092ec:	0641      	lsls	r1, r0, #25
 80092ee:	d5fb      	bpl.n	80092e8 <_printf_i+0xe4>
 80092f0:	881e      	ldrh	r6, [r3, #0]
 80092f2:	4853      	ldr	r0, [pc, #332]	; (8009440 <_printf_i+0x23c>)
 80092f4:	2f6f      	cmp	r7, #111	; 0x6f
 80092f6:	bf0c      	ite	eq
 80092f8:	2308      	moveq	r3, #8
 80092fa:	230a      	movne	r3, #10
 80092fc:	2100      	movs	r1, #0
 80092fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009302:	6865      	ldr	r5, [r4, #4]
 8009304:	60a5      	str	r5, [r4, #8]
 8009306:	2d00      	cmp	r5, #0
 8009308:	bfa2      	ittt	ge
 800930a:	6821      	ldrge	r1, [r4, #0]
 800930c:	f021 0104 	bicge.w	r1, r1, #4
 8009310:	6021      	strge	r1, [r4, #0]
 8009312:	b90e      	cbnz	r6, 8009318 <_printf_i+0x114>
 8009314:	2d00      	cmp	r5, #0
 8009316:	d04b      	beq.n	80093b0 <_printf_i+0x1ac>
 8009318:	4615      	mov	r5, r2
 800931a:	fbb6 f1f3 	udiv	r1, r6, r3
 800931e:	fb03 6711 	mls	r7, r3, r1, r6
 8009322:	5dc7      	ldrb	r7, [r0, r7]
 8009324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009328:	4637      	mov	r7, r6
 800932a:	42bb      	cmp	r3, r7
 800932c:	460e      	mov	r6, r1
 800932e:	d9f4      	bls.n	800931a <_printf_i+0x116>
 8009330:	2b08      	cmp	r3, #8
 8009332:	d10b      	bne.n	800934c <_printf_i+0x148>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	07de      	lsls	r6, r3, #31
 8009338:	d508      	bpl.n	800934c <_printf_i+0x148>
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	6861      	ldr	r1, [r4, #4]
 800933e:	4299      	cmp	r1, r3
 8009340:	bfde      	ittt	le
 8009342:	2330      	movle	r3, #48	; 0x30
 8009344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009348:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800934c:	1b52      	subs	r2, r2, r5
 800934e:	6122      	str	r2, [r4, #16]
 8009350:	f8cd a000 	str.w	sl, [sp]
 8009354:	464b      	mov	r3, r9
 8009356:	aa03      	add	r2, sp, #12
 8009358:	4621      	mov	r1, r4
 800935a:	4640      	mov	r0, r8
 800935c:	f7ff fee4 	bl	8009128 <_printf_common>
 8009360:	3001      	adds	r0, #1
 8009362:	d14a      	bne.n	80093fa <_printf_i+0x1f6>
 8009364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009368:	b004      	add	sp, #16
 800936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	f043 0320 	orr.w	r3, r3, #32
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	4833      	ldr	r0, [pc, #204]	; (8009444 <_printf_i+0x240>)
 8009378:	2778      	movs	r7, #120	; 0x78
 800937a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	6829      	ldr	r1, [r5, #0]
 8009382:	061f      	lsls	r7, r3, #24
 8009384:	f851 6b04 	ldr.w	r6, [r1], #4
 8009388:	d402      	bmi.n	8009390 <_printf_i+0x18c>
 800938a:	065f      	lsls	r7, r3, #25
 800938c:	bf48      	it	mi
 800938e:	b2b6      	uxthmi	r6, r6
 8009390:	07df      	lsls	r7, r3, #31
 8009392:	bf48      	it	mi
 8009394:	f043 0320 	orrmi.w	r3, r3, #32
 8009398:	6029      	str	r1, [r5, #0]
 800939a:	bf48      	it	mi
 800939c:	6023      	strmi	r3, [r4, #0]
 800939e:	b91e      	cbnz	r6, 80093a8 <_printf_i+0x1a4>
 80093a0:	6823      	ldr	r3, [r4, #0]
 80093a2:	f023 0320 	bic.w	r3, r3, #32
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	2310      	movs	r3, #16
 80093aa:	e7a7      	b.n	80092fc <_printf_i+0xf8>
 80093ac:	4824      	ldr	r0, [pc, #144]	; (8009440 <_printf_i+0x23c>)
 80093ae:	e7e4      	b.n	800937a <_printf_i+0x176>
 80093b0:	4615      	mov	r5, r2
 80093b2:	e7bd      	b.n	8009330 <_printf_i+0x12c>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	6826      	ldr	r6, [r4, #0]
 80093b8:	6961      	ldr	r1, [r4, #20]
 80093ba:	1d18      	adds	r0, r3, #4
 80093bc:	6028      	str	r0, [r5, #0]
 80093be:	0635      	lsls	r5, r6, #24
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	d501      	bpl.n	80093c8 <_printf_i+0x1c4>
 80093c4:	6019      	str	r1, [r3, #0]
 80093c6:	e002      	b.n	80093ce <_printf_i+0x1ca>
 80093c8:	0670      	lsls	r0, r6, #25
 80093ca:	d5fb      	bpl.n	80093c4 <_printf_i+0x1c0>
 80093cc:	8019      	strh	r1, [r3, #0]
 80093ce:	2300      	movs	r3, #0
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	4615      	mov	r5, r2
 80093d4:	e7bc      	b.n	8009350 <_printf_i+0x14c>
 80093d6:	682b      	ldr	r3, [r5, #0]
 80093d8:	1d1a      	adds	r2, r3, #4
 80093da:	602a      	str	r2, [r5, #0]
 80093dc:	681d      	ldr	r5, [r3, #0]
 80093de:	6862      	ldr	r2, [r4, #4]
 80093e0:	2100      	movs	r1, #0
 80093e2:	4628      	mov	r0, r5
 80093e4:	f7f6 fefc 	bl	80001e0 <memchr>
 80093e8:	b108      	cbz	r0, 80093ee <_printf_i+0x1ea>
 80093ea:	1b40      	subs	r0, r0, r5
 80093ec:	6060      	str	r0, [r4, #4]
 80093ee:	6863      	ldr	r3, [r4, #4]
 80093f0:	6123      	str	r3, [r4, #16]
 80093f2:	2300      	movs	r3, #0
 80093f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093f8:	e7aa      	b.n	8009350 <_printf_i+0x14c>
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	462a      	mov	r2, r5
 80093fe:	4649      	mov	r1, r9
 8009400:	4640      	mov	r0, r8
 8009402:	47d0      	blx	sl
 8009404:	3001      	adds	r0, #1
 8009406:	d0ad      	beq.n	8009364 <_printf_i+0x160>
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	079b      	lsls	r3, r3, #30
 800940c:	d413      	bmi.n	8009436 <_printf_i+0x232>
 800940e:	68e0      	ldr	r0, [r4, #12]
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	4298      	cmp	r0, r3
 8009414:	bfb8      	it	lt
 8009416:	4618      	movlt	r0, r3
 8009418:	e7a6      	b.n	8009368 <_printf_i+0x164>
 800941a:	2301      	movs	r3, #1
 800941c:	4632      	mov	r2, r6
 800941e:	4649      	mov	r1, r9
 8009420:	4640      	mov	r0, r8
 8009422:	47d0      	blx	sl
 8009424:	3001      	adds	r0, #1
 8009426:	d09d      	beq.n	8009364 <_printf_i+0x160>
 8009428:	3501      	adds	r5, #1
 800942a:	68e3      	ldr	r3, [r4, #12]
 800942c:	9903      	ldr	r1, [sp, #12]
 800942e:	1a5b      	subs	r3, r3, r1
 8009430:	42ab      	cmp	r3, r5
 8009432:	dcf2      	bgt.n	800941a <_printf_i+0x216>
 8009434:	e7eb      	b.n	800940e <_printf_i+0x20a>
 8009436:	2500      	movs	r5, #0
 8009438:	f104 0619 	add.w	r6, r4, #25
 800943c:	e7f5      	b.n	800942a <_printf_i+0x226>
 800943e:	bf00      	nop
 8009440:	0800d87a 	.word	0x0800d87a
 8009444:	0800d88b 	.word	0x0800d88b

08009448 <_scanf_float>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	b087      	sub	sp, #28
 800944e:	4617      	mov	r7, r2
 8009450:	9303      	str	r3, [sp, #12]
 8009452:	688b      	ldr	r3, [r1, #8]
 8009454:	1e5a      	subs	r2, r3, #1
 8009456:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800945a:	bf83      	ittte	hi
 800945c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009460:	195b      	addhi	r3, r3, r5
 8009462:	9302      	strhi	r3, [sp, #8]
 8009464:	2300      	movls	r3, #0
 8009466:	bf86      	itte	hi
 8009468:	f240 135d 	movwhi	r3, #349	; 0x15d
 800946c:	608b      	strhi	r3, [r1, #8]
 800946e:	9302      	strls	r3, [sp, #8]
 8009470:	680b      	ldr	r3, [r1, #0]
 8009472:	468b      	mov	fp, r1
 8009474:	2500      	movs	r5, #0
 8009476:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800947a:	f84b 3b1c 	str.w	r3, [fp], #28
 800947e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009482:	4680      	mov	r8, r0
 8009484:	460c      	mov	r4, r1
 8009486:	465e      	mov	r6, fp
 8009488:	46aa      	mov	sl, r5
 800948a:	46a9      	mov	r9, r5
 800948c:	9501      	str	r5, [sp, #4]
 800948e:	68a2      	ldr	r2, [r4, #8]
 8009490:	b152      	cbz	r2, 80094a8 <_scanf_float+0x60>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b4e      	cmp	r3, #78	; 0x4e
 8009498:	d864      	bhi.n	8009564 <_scanf_float+0x11c>
 800949a:	2b40      	cmp	r3, #64	; 0x40
 800949c:	d83c      	bhi.n	8009518 <_scanf_float+0xd0>
 800949e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80094a2:	b2c8      	uxtb	r0, r1
 80094a4:	280e      	cmp	r0, #14
 80094a6:	d93a      	bls.n	800951e <_scanf_float+0xd6>
 80094a8:	f1b9 0f00 	cmp.w	r9, #0
 80094ac:	d003      	beq.n	80094b6 <_scanf_float+0x6e>
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80094ba:	f1ba 0f01 	cmp.w	sl, #1
 80094be:	f200 8113 	bhi.w	80096e8 <_scanf_float+0x2a0>
 80094c2:	455e      	cmp	r6, fp
 80094c4:	f200 8105 	bhi.w	80096d2 <_scanf_float+0x28a>
 80094c8:	2501      	movs	r5, #1
 80094ca:	4628      	mov	r0, r5
 80094cc:	b007      	add	sp, #28
 80094ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80094d6:	2a0d      	cmp	r2, #13
 80094d8:	d8e6      	bhi.n	80094a8 <_scanf_float+0x60>
 80094da:	a101      	add	r1, pc, #4	; (adr r1, 80094e0 <_scanf_float+0x98>)
 80094dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80094e0:	0800961f 	.word	0x0800961f
 80094e4:	080094a9 	.word	0x080094a9
 80094e8:	080094a9 	.word	0x080094a9
 80094ec:	080094a9 	.word	0x080094a9
 80094f0:	0800967f 	.word	0x0800967f
 80094f4:	08009657 	.word	0x08009657
 80094f8:	080094a9 	.word	0x080094a9
 80094fc:	080094a9 	.word	0x080094a9
 8009500:	0800962d 	.word	0x0800962d
 8009504:	080094a9 	.word	0x080094a9
 8009508:	080094a9 	.word	0x080094a9
 800950c:	080094a9 	.word	0x080094a9
 8009510:	080094a9 	.word	0x080094a9
 8009514:	080095e5 	.word	0x080095e5
 8009518:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800951c:	e7db      	b.n	80094d6 <_scanf_float+0x8e>
 800951e:	290e      	cmp	r1, #14
 8009520:	d8c2      	bhi.n	80094a8 <_scanf_float+0x60>
 8009522:	a001      	add	r0, pc, #4	; (adr r0, 8009528 <_scanf_float+0xe0>)
 8009524:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009528:	080095d7 	.word	0x080095d7
 800952c:	080094a9 	.word	0x080094a9
 8009530:	080095d7 	.word	0x080095d7
 8009534:	0800966b 	.word	0x0800966b
 8009538:	080094a9 	.word	0x080094a9
 800953c:	08009585 	.word	0x08009585
 8009540:	080095c1 	.word	0x080095c1
 8009544:	080095c1 	.word	0x080095c1
 8009548:	080095c1 	.word	0x080095c1
 800954c:	080095c1 	.word	0x080095c1
 8009550:	080095c1 	.word	0x080095c1
 8009554:	080095c1 	.word	0x080095c1
 8009558:	080095c1 	.word	0x080095c1
 800955c:	080095c1 	.word	0x080095c1
 8009560:	080095c1 	.word	0x080095c1
 8009564:	2b6e      	cmp	r3, #110	; 0x6e
 8009566:	d809      	bhi.n	800957c <_scanf_float+0x134>
 8009568:	2b60      	cmp	r3, #96	; 0x60
 800956a:	d8b2      	bhi.n	80094d2 <_scanf_float+0x8a>
 800956c:	2b54      	cmp	r3, #84	; 0x54
 800956e:	d077      	beq.n	8009660 <_scanf_float+0x218>
 8009570:	2b59      	cmp	r3, #89	; 0x59
 8009572:	d199      	bne.n	80094a8 <_scanf_float+0x60>
 8009574:	2d07      	cmp	r5, #7
 8009576:	d197      	bne.n	80094a8 <_scanf_float+0x60>
 8009578:	2508      	movs	r5, #8
 800957a:	e029      	b.n	80095d0 <_scanf_float+0x188>
 800957c:	2b74      	cmp	r3, #116	; 0x74
 800957e:	d06f      	beq.n	8009660 <_scanf_float+0x218>
 8009580:	2b79      	cmp	r3, #121	; 0x79
 8009582:	e7f6      	b.n	8009572 <_scanf_float+0x12a>
 8009584:	6821      	ldr	r1, [r4, #0]
 8009586:	05c8      	lsls	r0, r1, #23
 8009588:	d51a      	bpl.n	80095c0 <_scanf_float+0x178>
 800958a:	9b02      	ldr	r3, [sp, #8]
 800958c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009590:	6021      	str	r1, [r4, #0]
 8009592:	f109 0901 	add.w	r9, r9, #1
 8009596:	b11b      	cbz	r3, 80095a0 <_scanf_float+0x158>
 8009598:	3b01      	subs	r3, #1
 800959a:	3201      	adds	r2, #1
 800959c:	9302      	str	r3, [sp, #8]
 800959e:	60a2      	str	r2, [r4, #8]
 80095a0:	68a3      	ldr	r3, [r4, #8]
 80095a2:	3b01      	subs	r3, #1
 80095a4:	60a3      	str	r3, [r4, #8]
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	3301      	adds	r3, #1
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	607b      	str	r3, [r7, #4]
 80095b4:	f340 8084 	ble.w	80096c0 <_scanf_float+0x278>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	3301      	adds	r3, #1
 80095bc:	603b      	str	r3, [r7, #0]
 80095be:	e766      	b.n	800948e <_scanf_float+0x46>
 80095c0:	eb1a 0f05 	cmn.w	sl, r5
 80095c4:	f47f af70 	bne.w	80094a8 <_scanf_float+0x60>
 80095c8:	6822      	ldr	r2, [r4, #0]
 80095ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80095ce:	6022      	str	r2, [r4, #0]
 80095d0:	f806 3b01 	strb.w	r3, [r6], #1
 80095d4:	e7e4      	b.n	80095a0 <_scanf_float+0x158>
 80095d6:	6822      	ldr	r2, [r4, #0]
 80095d8:	0610      	lsls	r0, r2, #24
 80095da:	f57f af65 	bpl.w	80094a8 <_scanf_float+0x60>
 80095de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095e2:	e7f4      	b.n	80095ce <_scanf_float+0x186>
 80095e4:	f1ba 0f00 	cmp.w	sl, #0
 80095e8:	d10e      	bne.n	8009608 <_scanf_float+0x1c0>
 80095ea:	f1b9 0f00 	cmp.w	r9, #0
 80095ee:	d10e      	bne.n	800960e <_scanf_float+0x1c6>
 80095f0:	6822      	ldr	r2, [r4, #0]
 80095f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80095f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80095fa:	d108      	bne.n	800960e <_scanf_float+0x1c6>
 80095fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009600:	6022      	str	r2, [r4, #0]
 8009602:	f04f 0a01 	mov.w	sl, #1
 8009606:	e7e3      	b.n	80095d0 <_scanf_float+0x188>
 8009608:	f1ba 0f02 	cmp.w	sl, #2
 800960c:	d055      	beq.n	80096ba <_scanf_float+0x272>
 800960e:	2d01      	cmp	r5, #1
 8009610:	d002      	beq.n	8009618 <_scanf_float+0x1d0>
 8009612:	2d04      	cmp	r5, #4
 8009614:	f47f af48 	bne.w	80094a8 <_scanf_float+0x60>
 8009618:	3501      	adds	r5, #1
 800961a:	b2ed      	uxtb	r5, r5
 800961c:	e7d8      	b.n	80095d0 <_scanf_float+0x188>
 800961e:	f1ba 0f01 	cmp.w	sl, #1
 8009622:	f47f af41 	bne.w	80094a8 <_scanf_float+0x60>
 8009626:	f04f 0a02 	mov.w	sl, #2
 800962a:	e7d1      	b.n	80095d0 <_scanf_float+0x188>
 800962c:	b97d      	cbnz	r5, 800964e <_scanf_float+0x206>
 800962e:	f1b9 0f00 	cmp.w	r9, #0
 8009632:	f47f af3c 	bne.w	80094ae <_scanf_float+0x66>
 8009636:	6822      	ldr	r2, [r4, #0]
 8009638:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800963c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009640:	f47f af39 	bne.w	80094b6 <_scanf_float+0x6e>
 8009644:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009648:	6022      	str	r2, [r4, #0]
 800964a:	2501      	movs	r5, #1
 800964c:	e7c0      	b.n	80095d0 <_scanf_float+0x188>
 800964e:	2d03      	cmp	r5, #3
 8009650:	d0e2      	beq.n	8009618 <_scanf_float+0x1d0>
 8009652:	2d05      	cmp	r5, #5
 8009654:	e7de      	b.n	8009614 <_scanf_float+0x1cc>
 8009656:	2d02      	cmp	r5, #2
 8009658:	f47f af26 	bne.w	80094a8 <_scanf_float+0x60>
 800965c:	2503      	movs	r5, #3
 800965e:	e7b7      	b.n	80095d0 <_scanf_float+0x188>
 8009660:	2d06      	cmp	r5, #6
 8009662:	f47f af21 	bne.w	80094a8 <_scanf_float+0x60>
 8009666:	2507      	movs	r5, #7
 8009668:	e7b2      	b.n	80095d0 <_scanf_float+0x188>
 800966a:	6822      	ldr	r2, [r4, #0]
 800966c:	0591      	lsls	r1, r2, #22
 800966e:	f57f af1b 	bpl.w	80094a8 <_scanf_float+0x60>
 8009672:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009676:	6022      	str	r2, [r4, #0]
 8009678:	f8cd 9004 	str.w	r9, [sp, #4]
 800967c:	e7a8      	b.n	80095d0 <_scanf_float+0x188>
 800967e:	6822      	ldr	r2, [r4, #0]
 8009680:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009684:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009688:	d006      	beq.n	8009698 <_scanf_float+0x250>
 800968a:	0550      	lsls	r0, r2, #21
 800968c:	f57f af0c 	bpl.w	80094a8 <_scanf_float+0x60>
 8009690:	f1b9 0f00 	cmp.w	r9, #0
 8009694:	f43f af0f 	beq.w	80094b6 <_scanf_float+0x6e>
 8009698:	0591      	lsls	r1, r2, #22
 800969a:	bf58      	it	pl
 800969c:	9901      	ldrpl	r1, [sp, #4]
 800969e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096a2:	bf58      	it	pl
 80096a4:	eba9 0101 	subpl.w	r1, r9, r1
 80096a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80096ac:	bf58      	it	pl
 80096ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80096b2:	6022      	str	r2, [r4, #0]
 80096b4:	f04f 0900 	mov.w	r9, #0
 80096b8:	e78a      	b.n	80095d0 <_scanf_float+0x188>
 80096ba:	f04f 0a03 	mov.w	sl, #3
 80096be:	e787      	b.n	80095d0 <_scanf_float+0x188>
 80096c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096c4:	4639      	mov	r1, r7
 80096c6:	4640      	mov	r0, r8
 80096c8:	4798      	blx	r3
 80096ca:	2800      	cmp	r0, #0
 80096cc:	f43f aedf 	beq.w	800948e <_scanf_float+0x46>
 80096d0:	e6ea      	b.n	80094a8 <_scanf_float+0x60>
 80096d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096da:	463a      	mov	r2, r7
 80096dc:	4640      	mov	r0, r8
 80096de:	4798      	blx	r3
 80096e0:	6923      	ldr	r3, [r4, #16]
 80096e2:	3b01      	subs	r3, #1
 80096e4:	6123      	str	r3, [r4, #16]
 80096e6:	e6ec      	b.n	80094c2 <_scanf_float+0x7a>
 80096e8:	1e6b      	subs	r3, r5, #1
 80096ea:	2b06      	cmp	r3, #6
 80096ec:	d825      	bhi.n	800973a <_scanf_float+0x2f2>
 80096ee:	2d02      	cmp	r5, #2
 80096f0:	d836      	bhi.n	8009760 <_scanf_float+0x318>
 80096f2:	455e      	cmp	r6, fp
 80096f4:	f67f aee8 	bls.w	80094c8 <_scanf_float+0x80>
 80096f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009700:	463a      	mov	r2, r7
 8009702:	4640      	mov	r0, r8
 8009704:	4798      	blx	r3
 8009706:	6923      	ldr	r3, [r4, #16]
 8009708:	3b01      	subs	r3, #1
 800970a:	6123      	str	r3, [r4, #16]
 800970c:	e7f1      	b.n	80096f2 <_scanf_float+0x2aa>
 800970e:	9802      	ldr	r0, [sp, #8]
 8009710:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009714:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009718:	9002      	str	r0, [sp, #8]
 800971a:	463a      	mov	r2, r7
 800971c:	4640      	mov	r0, r8
 800971e:	4798      	blx	r3
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	3b01      	subs	r3, #1
 8009724:	6123      	str	r3, [r4, #16]
 8009726:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800972a:	fa5f fa8a 	uxtb.w	sl, sl
 800972e:	f1ba 0f02 	cmp.w	sl, #2
 8009732:	d1ec      	bne.n	800970e <_scanf_float+0x2c6>
 8009734:	3d03      	subs	r5, #3
 8009736:	b2ed      	uxtb	r5, r5
 8009738:	1b76      	subs	r6, r6, r5
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	05da      	lsls	r2, r3, #23
 800973e:	d52f      	bpl.n	80097a0 <_scanf_float+0x358>
 8009740:	055b      	lsls	r3, r3, #21
 8009742:	d510      	bpl.n	8009766 <_scanf_float+0x31e>
 8009744:	455e      	cmp	r6, fp
 8009746:	f67f aebf 	bls.w	80094c8 <_scanf_float+0x80>
 800974a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800974e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009752:	463a      	mov	r2, r7
 8009754:	4640      	mov	r0, r8
 8009756:	4798      	blx	r3
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	3b01      	subs	r3, #1
 800975c:	6123      	str	r3, [r4, #16]
 800975e:	e7f1      	b.n	8009744 <_scanf_float+0x2fc>
 8009760:	46aa      	mov	sl, r5
 8009762:	9602      	str	r6, [sp, #8]
 8009764:	e7df      	b.n	8009726 <_scanf_float+0x2de>
 8009766:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	2965      	cmp	r1, #101	; 0x65
 800976e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009772:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009776:	6123      	str	r3, [r4, #16]
 8009778:	d00c      	beq.n	8009794 <_scanf_float+0x34c>
 800977a:	2945      	cmp	r1, #69	; 0x45
 800977c:	d00a      	beq.n	8009794 <_scanf_float+0x34c>
 800977e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009782:	463a      	mov	r2, r7
 8009784:	4640      	mov	r0, r8
 8009786:	4798      	blx	r3
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800978e:	3b01      	subs	r3, #1
 8009790:	1eb5      	subs	r5, r6, #2
 8009792:	6123      	str	r3, [r4, #16]
 8009794:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009798:	463a      	mov	r2, r7
 800979a:	4640      	mov	r0, r8
 800979c:	4798      	blx	r3
 800979e:	462e      	mov	r6, r5
 80097a0:	6825      	ldr	r5, [r4, #0]
 80097a2:	f015 0510 	ands.w	r5, r5, #16
 80097a6:	d158      	bne.n	800985a <_scanf_float+0x412>
 80097a8:	7035      	strb	r5, [r6, #0]
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097b4:	d11c      	bne.n	80097f0 <_scanf_float+0x3a8>
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	454b      	cmp	r3, r9
 80097ba:	eba3 0209 	sub.w	r2, r3, r9
 80097be:	d124      	bne.n	800980a <_scanf_float+0x3c2>
 80097c0:	2200      	movs	r2, #0
 80097c2:	4659      	mov	r1, fp
 80097c4:	4640      	mov	r0, r8
 80097c6:	f002 fdbf 	bl	800c348 <_strtod_r>
 80097ca:	9b03      	ldr	r3, [sp, #12]
 80097cc:	6821      	ldr	r1, [r4, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f011 0f02 	tst.w	r1, #2
 80097d4:	ec57 6b10 	vmov	r6, r7, d0
 80097d8:	f103 0204 	add.w	r2, r3, #4
 80097dc:	d020      	beq.n	8009820 <_scanf_float+0x3d8>
 80097de:	9903      	ldr	r1, [sp, #12]
 80097e0:	600a      	str	r2, [r1, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	e9c3 6700 	strd	r6, r7, [r3]
 80097e8:	68e3      	ldr	r3, [r4, #12]
 80097ea:	3301      	adds	r3, #1
 80097ec:	60e3      	str	r3, [r4, #12]
 80097ee:	e66c      	b.n	80094ca <_scanf_float+0x82>
 80097f0:	9b04      	ldr	r3, [sp, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0e4      	beq.n	80097c0 <_scanf_float+0x378>
 80097f6:	9905      	ldr	r1, [sp, #20]
 80097f8:	230a      	movs	r3, #10
 80097fa:	462a      	mov	r2, r5
 80097fc:	3101      	adds	r1, #1
 80097fe:	4640      	mov	r0, r8
 8009800:	f002 fe2a 	bl	800c458 <_strtol_r>
 8009804:	9b04      	ldr	r3, [sp, #16]
 8009806:	9e05      	ldr	r6, [sp, #20]
 8009808:	1ac2      	subs	r2, r0, r3
 800980a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800980e:	429e      	cmp	r6, r3
 8009810:	bf28      	it	cs
 8009812:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009816:	4912      	ldr	r1, [pc, #72]	; (8009860 <_scanf_float+0x418>)
 8009818:	4630      	mov	r0, r6
 800981a:	f000 f943 	bl	8009aa4 <siprintf>
 800981e:	e7cf      	b.n	80097c0 <_scanf_float+0x378>
 8009820:	f011 0f04 	tst.w	r1, #4
 8009824:	9903      	ldr	r1, [sp, #12]
 8009826:	600a      	str	r2, [r1, #0]
 8009828:	d1db      	bne.n	80097e2 <_scanf_float+0x39a>
 800982a:	f8d3 8000 	ldr.w	r8, [r3]
 800982e:	ee10 2a10 	vmov	r2, s0
 8009832:	ee10 0a10 	vmov	r0, s0
 8009836:	463b      	mov	r3, r7
 8009838:	4639      	mov	r1, r7
 800983a:	f7f7 f97f 	bl	8000b3c <__aeabi_dcmpun>
 800983e:	b128      	cbz	r0, 800984c <_scanf_float+0x404>
 8009840:	4808      	ldr	r0, [pc, #32]	; (8009864 <_scanf_float+0x41c>)
 8009842:	f000 fb45 	bl	8009ed0 <nanf>
 8009846:	ed88 0a00 	vstr	s0, [r8]
 800984a:	e7cd      	b.n	80097e8 <_scanf_float+0x3a0>
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f7f7 f9d2 	bl	8000bf8 <__aeabi_d2f>
 8009854:	f8c8 0000 	str.w	r0, [r8]
 8009858:	e7c6      	b.n	80097e8 <_scanf_float+0x3a0>
 800985a:	2500      	movs	r5, #0
 800985c:	e635      	b.n	80094ca <_scanf_float+0x82>
 800985e:	bf00      	nop
 8009860:	0800d89c 	.word	0x0800d89c
 8009864:	0800dc2d 	.word	0x0800dc2d

08009868 <std>:
 8009868:	2300      	movs	r3, #0
 800986a:	b510      	push	{r4, lr}
 800986c:	4604      	mov	r4, r0
 800986e:	e9c0 3300 	strd	r3, r3, [r0]
 8009872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009876:	6083      	str	r3, [r0, #8]
 8009878:	8181      	strh	r1, [r0, #12]
 800987a:	6643      	str	r3, [r0, #100]	; 0x64
 800987c:	81c2      	strh	r2, [r0, #14]
 800987e:	6183      	str	r3, [r0, #24]
 8009880:	4619      	mov	r1, r3
 8009882:	2208      	movs	r2, #8
 8009884:	305c      	adds	r0, #92	; 0x5c
 8009886:	f000 fa3f 	bl	8009d08 <memset>
 800988a:	4b0d      	ldr	r3, [pc, #52]	; (80098c0 <std+0x58>)
 800988c:	6263      	str	r3, [r4, #36]	; 0x24
 800988e:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <std+0x5c>)
 8009890:	62a3      	str	r3, [r4, #40]	; 0x28
 8009892:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <std+0x60>)
 8009894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009896:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <std+0x64>)
 8009898:	6323      	str	r3, [r4, #48]	; 0x30
 800989a:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <std+0x68>)
 800989c:	6224      	str	r4, [r4, #32]
 800989e:	429c      	cmp	r4, r3
 80098a0:	d006      	beq.n	80098b0 <std+0x48>
 80098a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80098a6:	4294      	cmp	r4, r2
 80098a8:	d002      	beq.n	80098b0 <std+0x48>
 80098aa:	33d0      	adds	r3, #208	; 0xd0
 80098ac:	429c      	cmp	r4, r3
 80098ae:	d105      	bne.n	80098bc <std+0x54>
 80098b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098b8:	f000 baf8 	b.w	8009eac <__retarget_lock_init_recursive>
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	bf00      	nop
 80098c0:	08009ae5 	.word	0x08009ae5
 80098c4:	08009b07 	.word	0x08009b07
 80098c8:	08009b3f 	.word	0x08009b3f
 80098cc:	08009b63 	.word	0x08009b63
 80098d0:	200056a0 	.word	0x200056a0

080098d4 <stdio_exit_handler>:
 80098d4:	4a02      	ldr	r2, [pc, #8]	; (80098e0 <stdio_exit_handler+0xc>)
 80098d6:	4903      	ldr	r1, [pc, #12]	; (80098e4 <stdio_exit_handler+0x10>)
 80098d8:	4803      	ldr	r0, [pc, #12]	; (80098e8 <stdio_exit_handler+0x14>)
 80098da:	f000 b869 	b.w	80099b0 <_fwalk_sglue>
 80098de:	bf00      	nop
 80098e0:	20000010 	.word	0x20000010
 80098e4:	0800c819 	.word	0x0800c819
 80098e8:	2000001c 	.word	0x2000001c

080098ec <cleanup_stdio>:
 80098ec:	6841      	ldr	r1, [r0, #4]
 80098ee:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <cleanup_stdio+0x34>)
 80098f0:	4299      	cmp	r1, r3
 80098f2:	b510      	push	{r4, lr}
 80098f4:	4604      	mov	r4, r0
 80098f6:	d001      	beq.n	80098fc <cleanup_stdio+0x10>
 80098f8:	f002 ff8e 	bl	800c818 <_fflush_r>
 80098fc:	68a1      	ldr	r1, [r4, #8]
 80098fe:	4b09      	ldr	r3, [pc, #36]	; (8009924 <cleanup_stdio+0x38>)
 8009900:	4299      	cmp	r1, r3
 8009902:	d002      	beq.n	800990a <cleanup_stdio+0x1e>
 8009904:	4620      	mov	r0, r4
 8009906:	f002 ff87 	bl	800c818 <_fflush_r>
 800990a:	68e1      	ldr	r1, [r4, #12]
 800990c:	4b06      	ldr	r3, [pc, #24]	; (8009928 <cleanup_stdio+0x3c>)
 800990e:	4299      	cmp	r1, r3
 8009910:	d004      	beq.n	800991c <cleanup_stdio+0x30>
 8009912:	4620      	mov	r0, r4
 8009914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009918:	f002 bf7e 	b.w	800c818 <_fflush_r>
 800991c:	bd10      	pop	{r4, pc}
 800991e:	bf00      	nop
 8009920:	200056a0 	.word	0x200056a0
 8009924:	20005708 	.word	0x20005708
 8009928:	20005770 	.word	0x20005770

0800992c <global_stdio_init.part.0>:
 800992c:	b510      	push	{r4, lr}
 800992e:	4b0b      	ldr	r3, [pc, #44]	; (800995c <global_stdio_init.part.0+0x30>)
 8009930:	4c0b      	ldr	r4, [pc, #44]	; (8009960 <global_stdio_init.part.0+0x34>)
 8009932:	4a0c      	ldr	r2, [pc, #48]	; (8009964 <global_stdio_init.part.0+0x38>)
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	4620      	mov	r0, r4
 8009938:	2200      	movs	r2, #0
 800993a:	2104      	movs	r1, #4
 800993c:	f7ff ff94 	bl	8009868 <std>
 8009940:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009944:	2201      	movs	r2, #1
 8009946:	2109      	movs	r1, #9
 8009948:	f7ff ff8e 	bl	8009868 <std>
 800994c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009950:	2202      	movs	r2, #2
 8009952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009956:	2112      	movs	r1, #18
 8009958:	f7ff bf86 	b.w	8009868 <std>
 800995c:	200057d8 	.word	0x200057d8
 8009960:	200056a0 	.word	0x200056a0
 8009964:	080098d5 	.word	0x080098d5

08009968 <__sfp_lock_acquire>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__sfp_lock_acquire+0x8>)
 800996a:	f000 baa0 	b.w	8009eae <__retarget_lock_acquire_recursive>
 800996e:	bf00      	nop
 8009970:	200057e1 	.word	0x200057e1

08009974 <__sfp_lock_release>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__sfp_lock_release+0x8>)
 8009976:	f000 ba9b 	b.w	8009eb0 <__retarget_lock_release_recursive>
 800997a:	bf00      	nop
 800997c:	200057e1 	.word	0x200057e1

08009980 <__sinit>:
 8009980:	b510      	push	{r4, lr}
 8009982:	4604      	mov	r4, r0
 8009984:	f7ff fff0 	bl	8009968 <__sfp_lock_acquire>
 8009988:	6a23      	ldr	r3, [r4, #32]
 800998a:	b11b      	cbz	r3, 8009994 <__sinit+0x14>
 800998c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009990:	f7ff bff0 	b.w	8009974 <__sfp_lock_release>
 8009994:	4b04      	ldr	r3, [pc, #16]	; (80099a8 <__sinit+0x28>)
 8009996:	6223      	str	r3, [r4, #32]
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <__sinit+0x2c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1f5      	bne.n	800998c <__sinit+0xc>
 80099a0:	f7ff ffc4 	bl	800992c <global_stdio_init.part.0>
 80099a4:	e7f2      	b.n	800998c <__sinit+0xc>
 80099a6:	bf00      	nop
 80099a8:	080098ed 	.word	0x080098ed
 80099ac:	200057d8 	.word	0x200057d8

080099b0 <_fwalk_sglue>:
 80099b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b4:	4607      	mov	r7, r0
 80099b6:	4688      	mov	r8, r1
 80099b8:	4614      	mov	r4, r2
 80099ba:	2600      	movs	r6, #0
 80099bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099c0:	f1b9 0901 	subs.w	r9, r9, #1
 80099c4:	d505      	bpl.n	80099d2 <_fwalk_sglue+0x22>
 80099c6:	6824      	ldr	r4, [r4, #0]
 80099c8:	2c00      	cmp	r4, #0
 80099ca:	d1f7      	bne.n	80099bc <_fwalk_sglue+0xc>
 80099cc:	4630      	mov	r0, r6
 80099ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d2:	89ab      	ldrh	r3, [r5, #12]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d907      	bls.n	80099e8 <_fwalk_sglue+0x38>
 80099d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099dc:	3301      	adds	r3, #1
 80099de:	d003      	beq.n	80099e8 <_fwalk_sglue+0x38>
 80099e0:	4629      	mov	r1, r5
 80099e2:	4638      	mov	r0, r7
 80099e4:	47c0      	blx	r8
 80099e6:	4306      	orrs	r6, r0
 80099e8:	3568      	adds	r5, #104	; 0x68
 80099ea:	e7e9      	b.n	80099c0 <_fwalk_sglue+0x10>

080099ec <_puts_r>:
 80099ec:	6a03      	ldr	r3, [r0, #32]
 80099ee:	b570      	push	{r4, r5, r6, lr}
 80099f0:	6884      	ldr	r4, [r0, #8]
 80099f2:	4605      	mov	r5, r0
 80099f4:	460e      	mov	r6, r1
 80099f6:	b90b      	cbnz	r3, 80099fc <_puts_r+0x10>
 80099f8:	f7ff ffc2 	bl	8009980 <__sinit>
 80099fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099fe:	07db      	lsls	r3, r3, #31
 8009a00:	d405      	bmi.n	8009a0e <_puts_r+0x22>
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	0598      	lsls	r0, r3, #22
 8009a06:	d402      	bmi.n	8009a0e <_puts_r+0x22>
 8009a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a0a:	f000 fa50 	bl	8009eae <__retarget_lock_acquire_recursive>
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	0719      	lsls	r1, r3, #28
 8009a12:	d513      	bpl.n	8009a3c <_puts_r+0x50>
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	b18b      	cbz	r3, 8009a3c <_puts_r+0x50>
 8009a18:	3e01      	subs	r6, #1
 8009a1a:	68a3      	ldr	r3, [r4, #8]
 8009a1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a20:	3b01      	subs	r3, #1
 8009a22:	60a3      	str	r3, [r4, #8]
 8009a24:	b9e9      	cbnz	r1, 8009a62 <_puts_r+0x76>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	da2e      	bge.n	8009a88 <_puts_r+0x9c>
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	210a      	movs	r1, #10
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f000 f8d4 	bl	8009bdc <__swbuf_r>
 8009a34:	3001      	adds	r0, #1
 8009a36:	d007      	beq.n	8009a48 <_puts_r+0x5c>
 8009a38:	250a      	movs	r5, #10
 8009a3a:	e007      	b.n	8009a4c <_puts_r+0x60>
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f000 f90a 	bl	8009c58 <__swsetup_r>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d0e7      	beq.n	8009a18 <_puts_r+0x2c>
 8009a48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009a4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a4e:	07da      	lsls	r2, r3, #31
 8009a50:	d405      	bmi.n	8009a5e <_puts_r+0x72>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	059b      	lsls	r3, r3, #22
 8009a56:	d402      	bmi.n	8009a5e <_puts_r+0x72>
 8009a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5a:	f000 fa29 	bl	8009eb0 <__retarget_lock_release_recursive>
 8009a5e:	4628      	mov	r0, r5
 8009a60:	bd70      	pop	{r4, r5, r6, pc}
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da04      	bge.n	8009a70 <_puts_r+0x84>
 8009a66:	69a2      	ldr	r2, [r4, #24]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	dc06      	bgt.n	8009a7a <_puts_r+0x8e>
 8009a6c:	290a      	cmp	r1, #10
 8009a6e:	d004      	beq.n	8009a7a <_puts_r+0x8e>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	6022      	str	r2, [r4, #0]
 8009a76:	7019      	strb	r1, [r3, #0]
 8009a78:	e7cf      	b.n	8009a1a <_puts_r+0x2e>
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f000 f8ad 	bl	8009bdc <__swbuf_r>
 8009a82:	3001      	adds	r0, #1
 8009a84:	d1c9      	bne.n	8009a1a <_puts_r+0x2e>
 8009a86:	e7df      	b.n	8009a48 <_puts_r+0x5c>
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	250a      	movs	r5, #10
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	6022      	str	r2, [r4, #0]
 8009a90:	701d      	strb	r5, [r3, #0]
 8009a92:	e7db      	b.n	8009a4c <_puts_r+0x60>

08009a94 <puts>:
 8009a94:	4b02      	ldr	r3, [pc, #8]	; (8009aa0 <puts+0xc>)
 8009a96:	4601      	mov	r1, r0
 8009a98:	6818      	ldr	r0, [r3, #0]
 8009a9a:	f7ff bfa7 	b.w	80099ec <_puts_r>
 8009a9e:	bf00      	nop
 8009aa0:	20000068 	.word	0x20000068

08009aa4 <siprintf>:
 8009aa4:	b40e      	push	{r1, r2, r3}
 8009aa6:	b500      	push	{lr}
 8009aa8:	b09c      	sub	sp, #112	; 0x70
 8009aaa:	ab1d      	add	r3, sp, #116	; 0x74
 8009aac:	9002      	str	r0, [sp, #8]
 8009aae:	9006      	str	r0, [sp, #24]
 8009ab0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ab4:	4809      	ldr	r0, [pc, #36]	; (8009adc <siprintf+0x38>)
 8009ab6:	9107      	str	r1, [sp, #28]
 8009ab8:	9104      	str	r1, [sp, #16]
 8009aba:	4909      	ldr	r1, [pc, #36]	; (8009ae0 <siprintf+0x3c>)
 8009abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac0:	9105      	str	r1, [sp, #20]
 8009ac2:	6800      	ldr	r0, [r0, #0]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	a902      	add	r1, sp, #8
 8009ac8:	f002 fd22 	bl	800c510 <_svfiprintf_r>
 8009acc:	9b02      	ldr	r3, [sp, #8]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	b01c      	add	sp, #112	; 0x70
 8009ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad8:	b003      	add	sp, #12
 8009ada:	4770      	bx	lr
 8009adc:	20000068 	.word	0x20000068
 8009ae0:	ffff0208 	.word	0xffff0208

08009ae4 <__sread>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aec:	f000 f990 	bl	8009e10 <_read_r>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	bfab      	itete	ge
 8009af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009af6:	89a3      	ldrhlt	r3, [r4, #12]
 8009af8:	181b      	addge	r3, r3, r0
 8009afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009afe:	bfac      	ite	ge
 8009b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b02:	81a3      	strhlt	r3, [r4, #12]
 8009b04:	bd10      	pop	{r4, pc}

08009b06 <__swrite>:
 8009b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0a:	461f      	mov	r7, r3
 8009b0c:	898b      	ldrh	r3, [r1, #12]
 8009b0e:	05db      	lsls	r3, r3, #23
 8009b10:	4605      	mov	r5, r0
 8009b12:	460c      	mov	r4, r1
 8009b14:	4616      	mov	r6, r2
 8009b16:	d505      	bpl.n	8009b24 <__swrite+0x1e>
 8009b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f000 f964 	bl	8009dec <_lseek_r>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	4632      	mov	r2, r6
 8009b32:	463b      	mov	r3, r7
 8009b34:	4628      	mov	r0, r5
 8009b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3a:	f000 b97b 	b.w	8009e34 <_write_r>

08009b3e <__sseek>:
 8009b3e:	b510      	push	{r4, lr}
 8009b40:	460c      	mov	r4, r1
 8009b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b46:	f000 f951 	bl	8009dec <_lseek_r>
 8009b4a:	1c43      	adds	r3, r0, #1
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	bf15      	itete	ne
 8009b50:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b5a:	81a3      	strheq	r3, [r4, #12]
 8009b5c:	bf18      	it	ne
 8009b5e:	81a3      	strhne	r3, [r4, #12]
 8009b60:	bd10      	pop	{r4, pc}

08009b62 <__sclose>:
 8009b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b66:	f000 b8db 	b.w	8009d20 <_close_r>

08009b6a <_vsniprintf_r>:
 8009b6a:	b530      	push	{r4, r5, lr}
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	2c00      	cmp	r4, #0
 8009b70:	b09b      	sub	sp, #108	; 0x6c
 8009b72:	4605      	mov	r5, r0
 8009b74:	461a      	mov	r2, r3
 8009b76:	da05      	bge.n	8009b84 <_vsniprintf_r+0x1a>
 8009b78:	238b      	movs	r3, #139	; 0x8b
 8009b7a:	6003      	str	r3, [r0, #0]
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b80:	b01b      	add	sp, #108	; 0x6c
 8009b82:	bd30      	pop	{r4, r5, pc}
 8009b84:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009b8c:	bf14      	ite	ne
 8009b8e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009b92:	4623      	moveq	r3, r4
 8009b94:	9302      	str	r3, [sp, #8]
 8009b96:	9305      	str	r3, [sp, #20]
 8009b98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b9c:	9100      	str	r1, [sp, #0]
 8009b9e:	9104      	str	r1, [sp, #16]
 8009ba0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009ba4:	4669      	mov	r1, sp
 8009ba6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ba8:	f002 fcb2 	bl	800c510 <_svfiprintf_r>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	bfbc      	itt	lt
 8009bb0:	238b      	movlt	r3, #139	; 0x8b
 8009bb2:	602b      	strlt	r3, [r5, #0]
 8009bb4:	2c00      	cmp	r4, #0
 8009bb6:	d0e3      	beq.n	8009b80 <_vsniprintf_r+0x16>
 8009bb8:	9b00      	ldr	r3, [sp, #0]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	e7df      	b.n	8009b80 <_vsniprintf_r+0x16>

08009bc0 <vsniprintf>:
 8009bc0:	b507      	push	{r0, r1, r2, lr}
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	460a      	mov	r2, r1
 8009bc8:	4601      	mov	r1, r0
 8009bca:	4803      	ldr	r0, [pc, #12]	; (8009bd8 <vsniprintf+0x18>)
 8009bcc:	6800      	ldr	r0, [r0, #0]
 8009bce:	f7ff ffcc 	bl	8009b6a <_vsniprintf_r>
 8009bd2:	b003      	add	sp, #12
 8009bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bd8:	20000068 	.word	0x20000068

08009bdc <__swbuf_r>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	460e      	mov	r6, r1
 8009be0:	4614      	mov	r4, r2
 8009be2:	4605      	mov	r5, r0
 8009be4:	b118      	cbz	r0, 8009bee <__swbuf_r+0x12>
 8009be6:	6a03      	ldr	r3, [r0, #32]
 8009be8:	b90b      	cbnz	r3, 8009bee <__swbuf_r+0x12>
 8009bea:	f7ff fec9 	bl	8009980 <__sinit>
 8009bee:	69a3      	ldr	r3, [r4, #24]
 8009bf0:	60a3      	str	r3, [r4, #8]
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	071a      	lsls	r2, r3, #28
 8009bf6:	d525      	bpl.n	8009c44 <__swbuf_r+0x68>
 8009bf8:	6923      	ldr	r3, [r4, #16]
 8009bfa:	b31b      	cbz	r3, 8009c44 <__swbuf_r+0x68>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	6922      	ldr	r2, [r4, #16]
 8009c00:	1a98      	subs	r0, r3, r2
 8009c02:	6963      	ldr	r3, [r4, #20]
 8009c04:	b2f6      	uxtb	r6, r6
 8009c06:	4283      	cmp	r3, r0
 8009c08:	4637      	mov	r7, r6
 8009c0a:	dc04      	bgt.n	8009c16 <__swbuf_r+0x3a>
 8009c0c:	4621      	mov	r1, r4
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f002 fe02 	bl	800c818 <_fflush_r>
 8009c14:	b9e0      	cbnz	r0, 8009c50 <__swbuf_r+0x74>
 8009c16:	68a3      	ldr	r3, [r4, #8]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	60a3      	str	r3, [r4, #8]
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	6022      	str	r2, [r4, #0]
 8009c22:	701e      	strb	r6, [r3, #0]
 8009c24:	6962      	ldr	r2, [r4, #20]
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d004      	beq.n	8009c36 <__swbuf_r+0x5a>
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	07db      	lsls	r3, r3, #31
 8009c30:	d506      	bpl.n	8009c40 <__swbuf_r+0x64>
 8009c32:	2e0a      	cmp	r6, #10
 8009c34:	d104      	bne.n	8009c40 <__swbuf_r+0x64>
 8009c36:	4621      	mov	r1, r4
 8009c38:	4628      	mov	r0, r5
 8009c3a:	f002 fded 	bl	800c818 <_fflush_r>
 8009c3e:	b938      	cbnz	r0, 8009c50 <__swbuf_r+0x74>
 8009c40:	4638      	mov	r0, r7
 8009c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c44:	4621      	mov	r1, r4
 8009c46:	4628      	mov	r0, r5
 8009c48:	f000 f806 	bl	8009c58 <__swsetup_r>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d0d5      	beq.n	8009bfc <__swbuf_r+0x20>
 8009c50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c54:	e7f4      	b.n	8009c40 <__swbuf_r+0x64>
	...

08009c58 <__swsetup_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4b2a      	ldr	r3, [pc, #168]	; (8009d04 <__swsetup_r+0xac>)
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	460c      	mov	r4, r1
 8009c62:	b118      	cbz	r0, 8009c6c <__swsetup_r+0x14>
 8009c64:	6a03      	ldr	r3, [r0, #32]
 8009c66:	b90b      	cbnz	r3, 8009c6c <__swsetup_r+0x14>
 8009c68:	f7ff fe8a 	bl	8009980 <__sinit>
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c72:	0718      	lsls	r0, r3, #28
 8009c74:	d422      	bmi.n	8009cbc <__swsetup_r+0x64>
 8009c76:	06d9      	lsls	r1, r3, #27
 8009c78:	d407      	bmi.n	8009c8a <__swsetup_r+0x32>
 8009c7a:	2309      	movs	r3, #9
 8009c7c:	602b      	str	r3, [r5, #0]
 8009c7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c88:	e034      	b.n	8009cf4 <__swsetup_r+0x9c>
 8009c8a:	0758      	lsls	r0, r3, #29
 8009c8c:	d512      	bpl.n	8009cb4 <__swsetup_r+0x5c>
 8009c8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c90:	b141      	cbz	r1, 8009ca4 <__swsetup_r+0x4c>
 8009c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c96:	4299      	cmp	r1, r3
 8009c98:	d002      	beq.n	8009ca0 <__swsetup_r+0x48>
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f000 ff9a 	bl	800abd4 <_free_r>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	6363      	str	r3, [r4, #52]	; 0x34
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	2300      	movs	r3, #0
 8009cae:	6063      	str	r3, [r4, #4]
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	f043 0308 	orr.w	r3, r3, #8
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	6923      	ldr	r3, [r4, #16]
 8009cbe:	b94b      	cbnz	r3, 8009cd4 <__swsetup_r+0x7c>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cca:	d003      	beq.n	8009cd4 <__swsetup_r+0x7c>
 8009ccc:	4621      	mov	r1, r4
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f002 fdf0 	bl	800c8b4 <__smakebuf_r>
 8009cd4:	89a0      	ldrh	r0, [r4, #12]
 8009cd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cda:	f010 0301 	ands.w	r3, r0, #1
 8009cde:	d00a      	beq.n	8009cf6 <__swsetup_r+0x9e>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60a3      	str	r3, [r4, #8]
 8009ce4:	6963      	ldr	r3, [r4, #20]
 8009ce6:	425b      	negs	r3, r3
 8009ce8:	61a3      	str	r3, [r4, #24]
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	b943      	cbnz	r3, 8009d00 <__swsetup_r+0xa8>
 8009cee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cf2:	d1c4      	bne.n	8009c7e <__swsetup_r+0x26>
 8009cf4:	bd38      	pop	{r3, r4, r5, pc}
 8009cf6:	0781      	lsls	r1, r0, #30
 8009cf8:	bf58      	it	pl
 8009cfa:	6963      	ldrpl	r3, [r4, #20]
 8009cfc:	60a3      	str	r3, [r4, #8]
 8009cfe:	e7f4      	b.n	8009cea <__swsetup_r+0x92>
 8009d00:	2000      	movs	r0, #0
 8009d02:	e7f7      	b.n	8009cf4 <__swsetup_r+0x9c>
 8009d04:	20000068 	.word	0x20000068

08009d08 <memset>:
 8009d08:	4402      	add	r2, r0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d100      	bne.n	8009d12 <memset+0xa>
 8009d10:	4770      	bx	lr
 8009d12:	f803 1b01 	strb.w	r1, [r3], #1
 8009d16:	e7f9      	b.n	8009d0c <memset+0x4>

08009d18 <_localeconv_r>:
 8009d18:	4800      	ldr	r0, [pc, #0]	; (8009d1c <_localeconv_r+0x4>)
 8009d1a:	4770      	bx	lr
 8009d1c:	2000015c 	.word	0x2000015c

08009d20 <_close_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4d06      	ldr	r5, [pc, #24]	; (8009d3c <_close_r+0x1c>)
 8009d24:	2300      	movs	r3, #0
 8009d26:	4604      	mov	r4, r0
 8009d28:	4608      	mov	r0, r1
 8009d2a:	602b      	str	r3, [r5, #0]
 8009d2c:	f7f8 f81f 	bl	8001d6e <_close>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d102      	bne.n	8009d3a <_close_r+0x1a>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	b103      	cbz	r3, 8009d3a <_close_r+0x1a>
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}
 8009d3c:	200057dc 	.word	0x200057dc

08009d40 <_reclaim_reent>:
 8009d40:	4b29      	ldr	r3, [pc, #164]	; (8009de8 <_reclaim_reent+0xa8>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4283      	cmp	r3, r0
 8009d46:	b570      	push	{r4, r5, r6, lr}
 8009d48:	4604      	mov	r4, r0
 8009d4a:	d04b      	beq.n	8009de4 <_reclaim_reent+0xa4>
 8009d4c:	69c3      	ldr	r3, [r0, #28]
 8009d4e:	b143      	cbz	r3, 8009d62 <_reclaim_reent+0x22>
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d144      	bne.n	8009de0 <_reclaim_reent+0xa0>
 8009d56:	69e3      	ldr	r3, [r4, #28]
 8009d58:	6819      	ldr	r1, [r3, #0]
 8009d5a:	b111      	cbz	r1, 8009d62 <_reclaim_reent+0x22>
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 ff39 	bl	800abd4 <_free_r>
 8009d62:	6961      	ldr	r1, [r4, #20]
 8009d64:	b111      	cbz	r1, 8009d6c <_reclaim_reent+0x2c>
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 ff34 	bl	800abd4 <_free_r>
 8009d6c:	69e1      	ldr	r1, [r4, #28]
 8009d6e:	b111      	cbz	r1, 8009d76 <_reclaim_reent+0x36>
 8009d70:	4620      	mov	r0, r4
 8009d72:	f000 ff2f 	bl	800abd4 <_free_r>
 8009d76:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009d78:	b111      	cbz	r1, 8009d80 <_reclaim_reent+0x40>
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 ff2a 	bl	800abd4 <_free_r>
 8009d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d82:	b111      	cbz	r1, 8009d8a <_reclaim_reent+0x4a>
 8009d84:	4620      	mov	r0, r4
 8009d86:	f000 ff25 	bl	800abd4 <_free_r>
 8009d8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009d8c:	b111      	cbz	r1, 8009d94 <_reclaim_reent+0x54>
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f000 ff20 	bl	800abd4 <_free_r>
 8009d94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d96:	b111      	cbz	r1, 8009d9e <_reclaim_reent+0x5e>
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 ff1b 	bl	800abd4 <_free_r>
 8009d9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009da0:	b111      	cbz	r1, 8009da8 <_reclaim_reent+0x68>
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 ff16 	bl	800abd4 <_free_r>
 8009da8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009daa:	b111      	cbz	r1, 8009db2 <_reclaim_reent+0x72>
 8009dac:	4620      	mov	r0, r4
 8009dae:	f000 ff11 	bl	800abd4 <_free_r>
 8009db2:	6a23      	ldr	r3, [r4, #32]
 8009db4:	b1b3      	cbz	r3, 8009de4 <_reclaim_reent+0xa4>
 8009db6:	4620      	mov	r0, r4
 8009db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009dbc:	4718      	bx	r3
 8009dbe:	5949      	ldr	r1, [r1, r5]
 8009dc0:	b941      	cbnz	r1, 8009dd4 <_reclaim_reent+0x94>
 8009dc2:	3504      	adds	r5, #4
 8009dc4:	69e3      	ldr	r3, [r4, #28]
 8009dc6:	2d80      	cmp	r5, #128	; 0x80
 8009dc8:	68d9      	ldr	r1, [r3, #12]
 8009dca:	d1f8      	bne.n	8009dbe <_reclaim_reent+0x7e>
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 ff01 	bl	800abd4 <_free_r>
 8009dd2:	e7c0      	b.n	8009d56 <_reclaim_reent+0x16>
 8009dd4:	680e      	ldr	r6, [r1, #0]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fefc 	bl	800abd4 <_free_r>
 8009ddc:	4631      	mov	r1, r6
 8009dde:	e7ef      	b.n	8009dc0 <_reclaim_reent+0x80>
 8009de0:	2500      	movs	r5, #0
 8009de2:	e7ef      	b.n	8009dc4 <_reclaim_reent+0x84>
 8009de4:	bd70      	pop	{r4, r5, r6, pc}
 8009de6:	bf00      	nop
 8009de8:	20000068 	.word	0x20000068

08009dec <_lseek_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	; (8009e0c <_lseek_r+0x20>)
 8009df0:	4604      	mov	r4, r0
 8009df2:	4608      	mov	r0, r1
 8009df4:	4611      	mov	r1, r2
 8009df6:	2200      	movs	r2, #0
 8009df8:	602a      	str	r2, [r5, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f7f7 ffde 	bl	8001dbc <_lseek>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_lseek_r+0x1e>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_lseek_r+0x1e>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	200057dc 	.word	0x200057dc

08009e10 <_read_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4d07      	ldr	r5, [pc, #28]	; (8009e30 <_read_r+0x20>)
 8009e14:	4604      	mov	r4, r0
 8009e16:	4608      	mov	r0, r1
 8009e18:	4611      	mov	r1, r2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	602a      	str	r2, [r5, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	f7f7 ff6c 	bl	8001cfc <_read>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_read_r+0x1e>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_read_r+0x1e>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	200057dc 	.word	0x200057dc

08009e34 <_write_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	; (8009e54 <_write_r+0x20>)
 8009e38:	4604      	mov	r4, r0
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7f7 ff77 	bl	8001d36 <_write>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_write_r+0x1e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_write_r+0x1e>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	200057dc 	.word	0x200057dc

08009e58 <__errno>:
 8009e58:	4b01      	ldr	r3, [pc, #4]	; (8009e60 <__errno+0x8>)
 8009e5a:	6818      	ldr	r0, [r3, #0]
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	20000068 	.word	0x20000068

08009e64 <__libc_init_array>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	4d0d      	ldr	r5, [pc, #52]	; (8009e9c <__libc_init_array+0x38>)
 8009e68:	4c0d      	ldr	r4, [pc, #52]	; (8009ea0 <__libc_init_array+0x3c>)
 8009e6a:	1b64      	subs	r4, r4, r5
 8009e6c:	10a4      	asrs	r4, r4, #2
 8009e6e:	2600      	movs	r6, #0
 8009e70:	42a6      	cmp	r6, r4
 8009e72:	d109      	bne.n	8009e88 <__libc_init_array+0x24>
 8009e74:	4d0b      	ldr	r5, [pc, #44]	; (8009ea4 <__libc_init_array+0x40>)
 8009e76:	4c0c      	ldr	r4, [pc, #48]	; (8009ea8 <__libc_init_array+0x44>)
 8009e78:	f003 fbe2 	bl	800d640 <_init>
 8009e7c:	1b64      	subs	r4, r4, r5
 8009e7e:	10a4      	asrs	r4, r4, #2
 8009e80:	2600      	movs	r6, #0
 8009e82:	42a6      	cmp	r6, r4
 8009e84:	d105      	bne.n	8009e92 <__libc_init_array+0x2e>
 8009e86:	bd70      	pop	{r4, r5, r6, pc}
 8009e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e8c:	4798      	blx	r3
 8009e8e:	3601      	adds	r6, #1
 8009e90:	e7ee      	b.n	8009e70 <__libc_init_array+0xc>
 8009e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e96:	4798      	blx	r3
 8009e98:	3601      	adds	r6, #1
 8009e9a:	e7f2      	b.n	8009e82 <__libc_init_array+0x1e>
 8009e9c:	0800dca0 	.word	0x0800dca0
 8009ea0:	0800dca0 	.word	0x0800dca0
 8009ea4:	0800dca0 	.word	0x0800dca0
 8009ea8:	0800dca4 	.word	0x0800dca4

08009eac <__retarget_lock_init_recursive>:
 8009eac:	4770      	bx	lr

08009eae <__retarget_lock_acquire_recursive>:
 8009eae:	4770      	bx	lr

08009eb0 <__retarget_lock_release_recursive>:
 8009eb0:	4770      	bx	lr

08009eb2 <memcpy>:
 8009eb2:	440a      	add	r2, r1
 8009eb4:	4291      	cmp	r1, r2
 8009eb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009eba:	d100      	bne.n	8009ebe <memcpy+0xc>
 8009ebc:	4770      	bx	lr
 8009ebe:	b510      	push	{r4, lr}
 8009ec0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ec4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ec8:	4291      	cmp	r1, r2
 8009eca:	d1f9      	bne.n	8009ec0 <memcpy+0xe>
 8009ecc:	bd10      	pop	{r4, pc}
	...

08009ed0 <nanf>:
 8009ed0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009ed8 <nanf+0x8>
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	7fc00000 	.word	0x7fc00000

08009edc <quorem>:
 8009edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	6903      	ldr	r3, [r0, #16]
 8009ee2:	690c      	ldr	r4, [r1, #16]
 8009ee4:	42a3      	cmp	r3, r4
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	db7e      	blt.n	8009fe8 <quorem+0x10c>
 8009eea:	3c01      	subs	r4, #1
 8009eec:	f101 0814 	add.w	r8, r1, #20
 8009ef0:	f100 0514 	add.w	r5, r0, #20
 8009ef4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009efe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f02:	3301      	adds	r3, #1
 8009f04:	429a      	cmp	r2, r3
 8009f06:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f12:	d331      	bcc.n	8009f78 <quorem+0x9c>
 8009f14:	f04f 0e00 	mov.w	lr, #0
 8009f18:	4640      	mov	r0, r8
 8009f1a:	46ac      	mov	ip, r5
 8009f1c:	46f2      	mov	sl, lr
 8009f1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f22:	b293      	uxth	r3, r2
 8009f24:	fb06 e303 	mla	r3, r6, r3, lr
 8009f28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f2c:	0c1a      	lsrs	r2, r3, #16
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	ebaa 0303 	sub.w	r3, sl, r3
 8009f34:	f8dc a000 	ldr.w	sl, [ip]
 8009f38:	fa13 f38a 	uxtah	r3, r3, sl
 8009f3c:	fb06 220e 	mla	r2, r6, lr, r2
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	9b00      	ldr	r3, [sp, #0]
 8009f44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f48:	b292      	uxth	r2, r2
 8009f4a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f52:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f56:	4581      	cmp	r9, r0
 8009f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f5c:	f84c 3b04 	str.w	r3, [ip], #4
 8009f60:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f64:	d2db      	bcs.n	8009f1e <quorem+0x42>
 8009f66:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f6a:	b92b      	cbnz	r3, 8009f78 <quorem+0x9c>
 8009f6c:	9b01      	ldr	r3, [sp, #4]
 8009f6e:	3b04      	subs	r3, #4
 8009f70:	429d      	cmp	r5, r3
 8009f72:	461a      	mov	r2, r3
 8009f74:	d32c      	bcc.n	8009fd0 <quorem+0xf4>
 8009f76:	613c      	str	r4, [r7, #16]
 8009f78:	4638      	mov	r0, r7
 8009f7a:	f001 f9f1 	bl	800b360 <__mcmp>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	db22      	blt.n	8009fc8 <quorem+0xec>
 8009f82:	3601      	adds	r6, #1
 8009f84:	4629      	mov	r1, r5
 8009f86:	2000      	movs	r0, #0
 8009f88:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f8c:	f8d1 c000 	ldr.w	ip, [r1]
 8009f90:	b293      	uxth	r3, r2
 8009f92:	1ac3      	subs	r3, r0, r3
 8009f94:	0c12      	lsrs	r2, r2, #16
 8009f96:	fa13 f38c 	uxtah	r3, r3, ip
 8009f9a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009f9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fa8:	45c1      	cmp	r9, r8
 8009faa:	f841 3b04 	str.w	r3, [r1], #4
 8009fae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009fb2:	d2e9      	bcs.n	8009f88 <quorem+0xac>
 8009fb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fbc:	b922      	cbnz	r2, 8009fc8 <quorem+0xec>
 8009fbe:	3b04      	subs	r3, #4
 8009fc0:	429d      	cmp	r5, r3
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	d30a      	bcc.n	8009fdc <quorem+0x100>
 8009fc6:	613c      	str	r4, [r7, #16]
 8009fc8:	4630      	mov	r0, r6
 8009fca:	b003      	add	sp, #12
 8009fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd0:	6812      	ldr	r2, [r2, #0]
 8009fd2:	3b04      	subs	r3, #4
 8009fd4:	2a00      	cmp	r2, #0
 8009fd6:	d1ce      	bne.n	8009f76 <quorem+0x9a>
 8009fd8:	3c01      	subs	r4, #1
 8009fda:	e7c9      	b.n	8009f70 <quorem+0x94>
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	3b04      	subs	r3, #4
 8009fe0:	2a00      	cmp	r2, #0
 8009fe2:	d1f0      	bne.n	8009fc6 <quorem+0xea>
 8009fe4:	3c01      	subs	r4, #1
 8009fe6:	e7eb      	b.n	8009fc0 <quorem+0xe4>
 8009fe8:	2000      	movs	r0, #0
 8009fea:	e7ee      	b.n	8009fca <quorem+0xee>
 8009fec:	0000      	movs	r0, r0
	...

08009ff0 <_dtoa_r>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	ed2d 8b04 	vpush	{d8-d9}
 8009ff8:	69c5      	ldr	r5, [r0, #28]
 8009ffa:	b093      	sub	sp, #76	; 0x4c
 8009ffc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a000:	ec57 6b10 	vmov	r6, r7, d0
 800a004:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a008:	9107      	str	r1, [sp, #28]
 800a00a:	4604      	mov	r4, r0
 800a00c:	920a      	str	r2, [sp, #40]	; 0x28
 800a00e:	930d      	str	r3, [sp, #52]	; 0x34
 800a010:	b975      	cbnz	r5, 800a030 <_dtoa_r+0x40>
 800a012:	2010      	movs	r0, #16
 800a014:	f000 fe2a 	bl	800ac6c <malloc>
 800a018:	4602      	mov	r2, r0
 800a01a:	61e0      	str	r0, [r4, #28]
 800a01c:	b920      	cbnz	r0, 800a028 <_dtoa_r+0x38>
 800a01e:	4bae      	ldr	r3, [pc, #696]	; (800a2d8 <_dtoa_r+0x2e8>)
 800a020:	21ef      	movs	r1, #239	; 0xef
 800a022:	48ae      	ldr	r0, [pc, #696]	; (800a2dc <_dtoa_r+0x2ec>)
 800a024:	f002 fce8 	bl	800c9f8 <__assert_func>
 800a028:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a02c:	6005      	str	r5, [r0, #0]
 800a02e:	60c5      	str	r5, [r0, #12]
 800a030:	69e3      	ldr	r3, [r4, #28]
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	b151      	cbz	r1, 800a04c <_dtoa_r+0x5c>
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	604a      	str	r2, [r1, #4]
 800a03a:	2301      	movs	r3, #1
 800a03c:	4093      	lsls	r3, r2
 800a03e:	608b      	str	r3, [r1, #8]
 800a040:	4620      	mov	r0, r4
 800a042:	f000 ff07 	bl	800ae54 <_Bfree>
 800a046:	69e3      	ldr	r3, [r4, #28]
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]
 800a04c:	1e3b      	subs	r3, r7, #0
 800a04e:	bfbb      	ittet	lt
 800a050:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a054:	9303      	strlt	r3, [sp, #12]
 800a056:	2300      	movge	r3, #0
 800a058:	2201      	movlt	r2, #1
 800a05a:	bfac      	ite	ge
 800a05c:	f8c8 3000 	strge.w	r3, [r8]
 800a060:	f8c8 2000 	strlt.w	r2, [r8]
 800a064:	4b9e      	ldr	r3, [pc, #632]	; (800a2e0 <_dtoa_r+0x2f0>)
 800a066:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a06a:	ea33 0308 	bics.w	r3, r3, r8
 800a06e:	d11b      	bne.n	800a0a8 <_dtoa_r+0xb8>
 800a070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a072:	f242 730f 	movw	r3, #9999	; 0x270f
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a07c:	4333      	orrs	r3, r6
 800a07e:	f000 8593 	beq.w	800aba8 <_dtoa_r+0xbb8>
 800a082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a084:	b963      	cbnz	r3, 800a0a0 <_dtoa_r+0xb0>
 800a086:	4b97      	ldr	r3, [pc, #604]	; (800a2e4 <_dtoa_r+0x2f4>)
 800a088:	e027      	b.n	800a0da <_dtoa_r+0xea>
 800a08a:	4b97      	ldr	r3, [pc, #604]	; (800a2e8 <_dtoa_r+0x2f8>)
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	3308      	adds	r3, #8
 800a090:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	9800      	ldr	r0, [sp, #0]
 800a096:	b013      	add	sp, #76	; 0x4c
 800a098:	ecbd 8b04 	vpop	{d8-d9}
 800a09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a0:	4b90      	ldr	r3, [pc, #576]	; (800a2e4 <_dtoa_r+0x2f4>)
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	3303      	adds	r3, #3
 800a0a6:	e7f3      	b.n	800a090 <_dtoa_r+0xa0>
 800a0a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	ec51 0b17 	vmov	r0, r1, d7
 800a0b2:	eeb0 8a47 	vmov.f32	s16, s14
 800a0b6:	eef0 8a67 	vmov.f32	s17, s15
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f7f6 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0c0:	4681      	mov	r9, r0
 800a0c2:	b160      	cbz	r0, 800a0de <_dtoa_r+0xee>
 800a0c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 8568 	beq.w	800aba2 <_dtoa_r+0xbb2>
 800a0d2:	4b86      	ldr	r3, [pc, #536]	; (800a2ec <_dtoa_r+0x2fc>)
 800a0d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	e7da      	b.n	800a094 <_dtoa_r+0xa4>
 800a0de:	aa10      	add	r2, sp, #64	; 0x40
 800a0e0:	a911      	add	r1, sp, #68	; 0x44
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a0e8:	eef0 0a68 	vmov.f32	s1, s17
 800a0ec:	f001 fa4e 	bl	800b58c <__d2b>
 800a0f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a0f4:	4682      	mov	sl, r0
 800a0f6:	2d00      	cmp	r5, #0
 800a0f8:	d07f      	beq.n	800a1fa <_dtoa_r+0x20a>
 800a0fa:	ee18 3a90 	vmov	r3, s17
 800a0fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a102:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a106:	ec51 0b18 	vmov	r0, r1, d8
 800a10a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a10e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a112:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a116:	4619      	mov	r1, r3
 800a118:	2200      	movs	r2, #0
 800a11a:	4b75      	ldr	r3, [pc, #468]	; (800a2f0 <_dtoa_r+0x300>)
 800a11c:	f7f6 f8bc 	bl	8000298 <__aeabi_dsub>
 800a120:	a367      	add	r3, pc, #412	; (adr r3, 800a2c0 <_dtoa_r+0x2d0>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f7f6 fa6f 	bl	8000608 <__aeabi_dmul>
 800a12a:	a367      	add	r3, pc, #412	; (adr r3, 800a2c8 <_dtoa_r+0x2d8>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	f7f6 f8b4 	bl	800029c <__adddf3>
 800a134:	4606      	mov	r6, r0
 800a136:	4628      	mov	r0, r5
 800a138:	460f      	mov	r7, r1
 800a13a:	f7f6 f9fb 	bl	8000534 <__aeabi_i2d>
 800a13e:	a364      	add	r3, pc, #400	; (adr r3, 800a2d0 <_dtoa_r+0x2e0>)
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	f7f6 fa60 	bl	8000608 <__aeabi_dmul>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	4630      	mov	r0, r6
 800a14e:	4639      	mov	r1, r7
 800a150:	f7f6 f8a4 	bl	800029c <__adddf3>
 800a154:	4606      	mov	r6, r0
 800a156:	460f      	mov	r7, r1
 800a158:	f7f6 fd06 	bl	8000b68 <__aeabi_d2iz>
 800a15c:	2200      	movs	r2, #0
 800a15e:	4683      	mov	fp, r0
 800a160:	2300      	movs	r3, #0
 800a162:	4630      	mov	r0, r6
 800a164:	4639      	mov	r1, r7
 800a166:	f7f6 fcc1 	bl	8000aec <__aeabi_dcmplt>
 800a16a:	b148      	cbz	r0, 800a180 <_dtoa_r+0x190>
 800a16c:	4658      	mov	r0, fp
 800a16e:	f7f6 f9e1 	bl	8000534 <__aeabi_i2d>
 800a172:	4632      	mov	r2, r6
 800a174:	463b      	mov	r3, r7
 800a176:	f7f6 fcaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a17a:	b908      	cbnz	r0, 800a180 <_dtoa_r+0x190>
 800a17c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a180:	f1bb 0f16 	cmp.w	fp, #22
 800a184:	d857      	bhi.n	800a236 <_dtoa_r+0x246>
 800a186:	4b5b      	ldr	r3, [pc, #364]	; (800a2f4 <_dtoa_r+0x304>)
 800a188:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	ec51 0b18 	vmov	r0, r1, d8
 800a194:	f7f6 fcaa 	bl	8000aec <__aeabi_dcmplt>
 800a198:	2800      	cmp	r0, #0
 800a19a:	d04e      	beq.n	800a23a <_dtoa_r+0x24a>
 800a19c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	930c      	str	r3, [sp, #48]	; 0x30
 800a1a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1a6:	1b5b      	subs	r3, r3, r5
 800a1a8:	1e5a      	subs	r2, r3, #1
 800a1aa:	bf45      	ittet	mi
 800a1ac:	f1c3 0301 	rsbmi	r3, r3, #1
 800a1b0:	9305      	strmi	r3, [sp, #20]
 800a1b2:	2300      	movpl	r3, #0
 800a1b4:	2300      	movmi	r3, #0
 800a1b6:	9206      	str	r2, [sp, #24]
 800a1b8:	bf54      	ite	pl
 800a1ba:	9305      	strpl	r3, [sp, #20]
 800a1bc:	9306      	strmi	r3, [sp, #24]
 800a1be:	f1bb 0f00 	cmp.w	fp, #0
 800a1c2:	db3c      	blt.n	800a23e <_dtoa_r+0x24e>
 800a1c4:	9b06      	ldr	r3, [sp, #24]
 800a1c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a1ca:	445b      	add	r3, fp
 800a1cc:	9306      	str	r3, [sp, #24]
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	9308      	str	r3, [sp, #32]
 800a1d2:	9b07      	ldr	r3, [sp, #28]
 800a1d4:	2b09      	cmp	r3, #9
 800a1d6:	d868      	bhi.n	800a2aa <_dtoa_r+0x2ba>
 800a1d8:	2b05      	cmp	r3, #5
 800a1da:	bfc4      	itt	gt
 800a1dc:	3b04      	subgt	r3, #4
 800a1de:	9307      	strgt	r3, [sp, #28]
 800a1e0:	9b07      	ldr	r3, [sp, #28]
 800a1e2:	f1a3 0302 	sub.w	r3, r3, #2
 800a1e6:	bfcc      	ite	gt
 800a1e8:	2500      	movgt	r5, #0
 800a1ea:	2501      	movle	r5, #1
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	f200 8085 	bhi.w	800a2fc <_dtoa_r+0x30c>
 800a1f2:	e8df f003 	tbb	[pc, r3]
 800a1f6:	3b2e      	.short	0x3b2e
 800a1f8:	5839      	.short	0x5839
 800a1fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a1fe:	441d      	add	r5, r3
 800a200:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a204:	2b20      	cmp	r3, #32
 800a206:	bfc1      	itttt	gt
 800a208:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a20c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a210:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a214:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a218:	bfd6      	itet	le
 800a21a:	f1c3 0320 	rsble	r3, r3, #32
 800a21e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a222:	fa06 f003 	lslle.w	r0, r6, r3
 800a226:	f7f6 f975 	bl	8000514 <__aeabi_ui2d>
 800a22a:	2201      	movs	r2, #1
 800a22c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a230:	3d01      	subs	r5, #1
 800a232:	920e      	str	r2, [sp, #56]	; 0x38
 800a234:	e76f      	b.n	800a116 <_dtoa_r+0x126>
 800a236:	2301      	movs	r3, #1
 800a238:	e7b3      	b.n	800a1a2 <_dtoa_r+0x1b2>
 800a23a:	900c      	str	r0, [sp, #48]	; 0x30
 800a23c:	e7b2      	b.n	800a1a4 <_dtoa_r+0x1b4>
 800a23e:	9b05      	ldr	r3, [sp, #20]
 800a240:	eba3 030b 	sub.w	r3, r3, fp
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	f1cb 0300 	rsb	r3, fp, #0
 800a24a:	9308      	str	r3, [sp, #32]
 800a24c:	2300      	movs	r3, #0
 800a24e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a250:	e7bf      	b.n	800a1d2 <_dtoa_r+0x1e2>
 800a252:	2300      	movs	r3, #0
 800a254:	9309      	str	r3, [sp, #36]	; 0x24
 800a256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dc52      	bgt.n	800a302 <_dtoa_r+0x312>
 800a25c:	2301      	movs	r3, #1
 800a25e:	9301      	str	r3, [sp, #4]
 800a260:	9304      	str	r3, [sp, #16]
 800a262:	461a      	mov	r2, r3
 800a264:	920a      	str	r2, [sp, #40]	; 0x28
 800a266:	e00b      	b.n	800a280 <_dtoa_r+0x290>
 800a268:	2301      	movs	r3, #1
 800a26a:	e7f3      	b.n	800a254 <_dtoa_r+0x264>
 800a26c:	2300      	movs	r3, #0
 800a26e:	9309      	str	r3, [sp, #36]	; 0x24
 800a270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a272:	445b      	add	r3, fp
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	3301      	adds	r3, #1
 800a278:	2b01      	cmp	r3, #1
 800a27a:	9304      	str	r3, [sp, #16]
 800a27c:	bfb8      	it	lt
 800a27e:	2301      	movlt	r3, #1
 800a280:	69e0      	ldr	r0, [r4, #28]
 800a282:	2100      	movs	r1, #0
 800a284:	2204      	movs	r2, #4
 800a286:	f102 0614 	add.w	r6, r2, #20
 800a28a:	429e      	cmp	r6, r3
 800a28c:	d93d      	bls.n	800a30a <_dtoa_r+0x31a>
 800a28e:	6041      	str	r1, [r0, #4]
 800a290:	4620      	mov	r0, r4
 800a292:	f000 fd9f 	bl	800add4 <_Balloc>
 800a296:	9000      	str	r0, [sp, #0]
 800a298:	2800      	cmp	r0, #0
 800a29a:	d139      	bne.n	800a310 <_dtoa_r+0x320>
 800a29c:	4b16      	ldr	r3, [pc, #88]	; (800a2f8 <_dtoa_r+0x308>)
 800a29e:	4602      	mov	r2, r0
 800a2a0:	f240 11af 	movw	r1, #431	; 0x1af
 800a2a4:	e6bd      	b.n	800a022 <_dtoa_r+0x32>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e7e1      	b.n	800a26e <_dtoa_r+0x27e>
 800a2aa:	2501      	movs	r5, #1
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	9307      	str	r3, [sp, #28]
 800a2b0:	9509      	str	r5, [sp, #36]	; 0x24
 800a2b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2b6:	9301      	str	r3, [sp, #4]
 800a2b8:	9304      	str	r3, [sp, #16]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2312      	movs	r3, #18
 800a2be:	e7d1      	b.n	800a264 <_dtoa_r+0x274>
 800a2c0:	636f4361 	.word	0x636f4361
 800a2c4:	3fd287a7 	.word	0x3fd287a7
 800a2c8:	8b60c8b3 	.word	0x8b60c8b3
 800a2cc:	3fc68a28 	.word	0x3fc68a28
 800a2d0:	509f79fb 	.word	0x509f79fb
 800a2d4:	3fd34413 	.word	0x3fd34413
 800a2d8:	0800d8ae 	.word	0x0800d8ae
 800a2dc:	0800d8c5 	.word	0x0800d8c5
 800a2e0:	7ff00000 	.word	0x7ff00000
 800a2e4:	0800d8aa 	.word	0x0800d8aa
 800a2e8:	0800d8a1 	.word	0x0800d8a1
 800a2ec:	0800d879 	.word	0x0800d879
 800a2f0:	3ff80000 	.word	0x3ff80000
 800a2f4:	0800d9b0 	.word	0x0800d9b0
 800a2f8:	0800d91d 	.word	0x0800d91d
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a300:	e7d7      	b.n	800a2b2 <_dtoa_r+0x2c2>
 800a302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	9304      	str	r3, [sp, #16]
 800a308:	e7ba      	b.n	800a280 <_dtoa_r+0x290>
 800a30a:	3101      	adds	r1, #1
 800a30c:	0052      	lsls	r2, r2, #1
 800a30e:	e7ba      	b.n	800a286 <_dtoa_r+0x296>
 800a310:	69e3      	ldr	r3, [r4, #28]
 800a312:	9a00      	ldr	r2, [sp, #0]
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	9b04      	ldr	r3, [sp, #16]
 800a318:	2b0e      	cmp	r3, #14
 800a31a:	f200 80a8 	bhi.w	800a46e <_dtoa_r+0x47e>
 800a31e:	2d00      	cmp	r5, #0
 800a320:	f000 80a5 	beq.w	800a46e <_dtoa_r+0x47e>
 800a324:	f1bb 0f00 	cmp.w	fp, #0
 800a328:	dd38      	ble.n	800a39c <_dtoa_r+0x3ac>
 800a32a:	4bc0      	ldr	r3, [pc, #768]	; (800a62c <_dtoa_r+0x63c>)
 800a32c:	f00b 020f 	and.w	r2, fp, #15
 800a330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a334:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a338:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a33c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a340:	d019      	beq.n	800a376 <_dtoa_r+0x386>
 800a342:	4bbb      	ldr	r3, [pc, #748]	; (800a630 <_dtoa_r+0x640>)
 800a344:	ec51 0b18 	vmov	r0, r1, d8
 800a348:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a34c:	f7f6 fa86 	bl	800085c <__aeabi_ddiv>
 800a350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a354:	f008 080f 	and.w	r8, r8, #15
 800a358:	2503      	movs	r5, #3
 800a35a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a630 <_dtoa_r+0x640>
 800a35e:	f1b8 0f00 	cmp.w	r8, #0
 800a362:	d10a      	bne.n	800a37a <_dtoa_r+0x38a>
 800a364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a368:	4632      	mov	r2, r6
 800a36a:	463b      	mov	r3, r7
 800a36c:	f7f6 fa76 	bl	800085c <__aeabi_ddiv>
 800a370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a374:	e02b      	b.n	800a3ce <_dtoa_r+0x3de>
 800a376:	2502      	movs	r5, #2
 800a378:	e7ef      	b.n	800a35a <_dtoa_r+0x36a>
 800a37a:	f018 0f01 	tst.w	r8, #1
 800a37e:	d008      	beq.n	800a392 <_dtoa_r+0x3a2>
 800a380:	4630      	mov	r0, r6
 800a382:	4639      	mov	r1, r7
 800a384:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a388:	f7f6 f93e 	bl	8000608 <__aeabi_dmul>
 800a38c:	3501      	adds	r5, #1
 800a38e:	4606      	mov	r6, r0
 800a390:	460f      	mov	r7, r1
 800a392:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a396:	f109 0908 	add.w	r9, r9, #8
 800a39a:	e7e0      	b.n	800a35e <_dtoa_r+0x36e>
 800a39c:	f000 809f 	beq.w	800a4de <_dtoa_r+0x4ee>
 800a3a0:	f1cb 0600 	rsb	r6, fp, #0
 800a3a4:	4ba1      	ldr	r3, [pc, #644]	; (800a62c <_dtoa_r+0x63c>)
 800a3a6:	4fa2      	ldr	r7, [pc, #648]	; (800a630 <_dtoa_r+0x640>)
 800a3a8:	f006 020f 	and.w	r2, r6, #15
 800a3ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	ec51 0b18 	vmov	r0, r1, d8
 800a3b8:	f7f6 f926 	bl	8000608 <__aeabi_dmul>
 800a3bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3c0:	1136      	asrs	r6, r6, #4
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2502      	movs	r5, #2
 800a3c6:	2e00      	cmp	r6, #0
 800a3c8:	d17e      	bne.n	800a4c8 <_dtoa_r+0x4d8>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1d0      	bne.n	800a370 <_dtoa_r+0x380>
 800a3ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 8084 	beq.w	800a4e2 <_dtoa_r+0x4f2>
 800a3da:	4b96      	ldr	r3, [pc, #600]	; (800a634 <_dtoa_r+0x644>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	f7f6 fb83 	bl	8000aec <__aeabi_dcmplt>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d07b      	beq.n	800a4e2 <_dtoa_r+0x4f2>
 800a3ea:	9b04      	ldr	r3, [sp, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d078      	beq.n	800a4e2 <_dtoa_r+0x4f2>
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	dd39      	ble.n	800a46a <_dtoa_r+0x47a>
 800a3f6:	4b90      	ldr	r3, [pc, #576]	; (800a638 <_dtoa_r+0x648>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	f7f6 f903 	bl	8000608 <__aeabi_dmul>
 800a402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a406:	9e01      	ldr	r6, [sp, #4]
 800a408:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a40c:	3501      	adds	r5, #1
 800a40e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a412:	4628      	mov	r0, r5
 800a414:	f7f6 f88e 	bl	8000534 <__aeabi_i2d>
 800a418:	4642      	mov	r2, r8
 800a41a:	464b      	mov	r3, r9
 800a41c:	f7f6 f8f4 	bl	8000608 <__aeabi_dmul>
 800a420:	4b86      	ldr	r3, [pc, #536]	; (800a63c <_dtoa_r+0x64c>)
 800a422:	2200      	movs	r2, #0
 800a424:	f7f5 ff3a 	bl	800029c <__adddf3>
 800a428:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a42c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a430:	9303      	str	r3, [sp, #12]
 800a432:	2e00      	cmp	r6, #0
 800a434:	d158      	bne.n	800a4e8 <_dtoa_r+0x4f8>
 800a436:	4b82      	ldr	r3, [pc, #520]	; (800a640 <_dtoa_r+0x650>)
 800a438:	2200      	movs	r2, #0
 800a43a:	4640      	mov	r0, r8
 800a43c:	4649      	mov	r1, r9
 800a43e:	f7f5 ff2b 	bl	8000298 <__aeabi_dsub>
 800a442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a446:	4680      	mov	r8, r0
 800a448:	4689      	mov	r9, r1
 800a44a:	f7f6 fb6d 	bl	8000b28 <__aeabi_dcmpgt>
 800a44e:	2800      	cmp	r0, #0
 800a450:	f040 8296 	bne.w	800a980 <_dtoa_r+0x990>
 800a454:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a458:	4640      	mov	r0, r8
 800a45a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a45e:	4649      	mov	r1, r9
 800a460:	f7f6 fb44 	bl	8000aec <__aeabi_dcmplt>
 800a464:	2800      	cmp	r0, #0
 800a466:	f040 8289 	bne.w	800a97c <_dtoa_r+0x98c>
 800a46a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a46e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a470:	2b00      	cmp	r3, #0
 800a472:	f2c0 814e 	blt.w	800a712 <_dtoa_r+0x722>
 800a476:	f1bb 0f0e 	cmp.w	fp, #14
 800a47a:	f300 814a 	bgt.w	800a712 <_dtoa_r+0x722>
 800a47e:	4b6b      	ldr	r3, [pc, #428]	; (800a62c <_dtoa_r+0x63c>)
 800a480:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a484:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f280 80dc 	bge.w	800a648 <_dtoa_r+0x658>
 800a490:	9b04      	ldr	r3, [sp, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	f300 80d8 	bgt.w	800a648 <_dtoa_r+0x658>
 800a498:	f040 826f 	bne.w	800a97a <_dtoa_r+0x98a>
 800a49c:	4b68      	ldr	r3, [pc, #416]	; (800a640 <_dtoa_r+0x650>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	f7f6 f8b0 	bl	8000608 <__aeabi_dmul>
 800a4a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4ac:	f7f6 fb32 	bl	8000b14 <__aeabi_dcmpge>
 800a4b0:	9e04      	ldr	r6, [sp, #16]
 800a4b2:	4637      	mov	r7, r6
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	f040 8245 	bne.w	800a944 <_dtoa_r+0x954>
 800a4ba:	9d00      	ldr	r5, [sp, #0]
 800a4bc:	2331      	movs	r3, #49	; 0x31
 800a4be:	f805 3b01 	strb.w	r3, [r5], #1
 800a4c2:	f10b 0b01 	add.w	fp, fp, #1
 800a4c6:	e241      	b.n	800a94c <_dtoa_r+0x95c>
 800a4c8:	07f2      	lsls	r2, r6, #31
 800a4ca:	d505      	bpl.n	800a4d8 <_dtoa_r+0x4e8>
 800a4cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4d0:	f7f6 f89a 	bl	8000608 <__aeabi_dmul>
 800a4d4:	3501      	adds	r5, #1
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	1076      	asrs	r6, r6, #1
 800a4da:	3708      	adds	r7, #8
 800a4dc:	e773      	b.n	800a3c6 <_dtoa_r+0x3d6>
 800a4de:	2502      	movs	r5, #2
 800a4e0:	e775      	b.n	800a3ce <_dtoa_r+0x3de>
 800a4e2:	9e04      	ldr	r6, [sp, #16]
 800a4e4:	465f      	mov	r7, fp
 800a4e6:	e792      	b.n	800a40e <_dtoa_r+0x41e>
 800a4e8:	9900      	ldr	r1, [sp, #0]
 800a4ea:	4b50      	ldr	r3, [pc, #320]	; (800a62c <_dtoa_r+0x63c>)
 800a4ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4f0:	4431      	add	r1, r6
 800a4f2:	9102      	str	r1, [sp, #8]
 800a4f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4f6:	eeb0 9a47 	vmov.f32	s18, s14
 800a4fa:	eef0 9a67 	vmov.f32	s19, s15
 800a4fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a502:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a506:	2900      	cmp	r1, #0
 800a508:	d044      	beq.n	800a594 <_dtoa_r+0x5a4>
 800a50a:	494e      	ldr	r1, [pc, #312]	; (800a644 <_dtoa_r+0x654>)
 800a50c:	2000      	movs	r0, #0
 800a50e:	f7f6 f9a5 	bl	800085c <__aeabi_ddiv>
 800a512:	ec53 2b19 	vmov	r2, r3, d9
 800a516:	f7f5 febf 	bl	8000298 <__aeabi_dsub>
 800a51a:	9d00      	ldr	r5, [sp, #0]
 800a51c:	ec41 0b19 	vmov	d9, r0, r1
 800a520:	4649      	mov	r1, r9
 800a522:	4640      	mov	r0, r8
 800a524:	f7f6 fb20 	bl	8000b68 <__aeabi_d2iz>
 800a528:	4606      	mov	r6, r0
 800a52a:	f7f6 f803 	bl	8000534 <__aeabi_i2d>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	4640      	mov	r0, r8
 800a534:	4649      	mov	r1, r9
 800a536:	f7f5 feaf 	bl	8000298 <__aeabi_dsub>
 800a53a:	3630      	adds	r6, #48	; 0x30
 800a53c:	f805 6b01 	strb.w	r6, [r5], #1
 800a540:	ec53 2b19 	vmov	r2, r3, d9
 800a544:	4680      	mov	r8, r0
 800a546:	4689      	mov	r9, r1
 800a548:	f7f6 fad0 	bl	8000aec <__aeabi_dcmplt>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d164      	bne.n	800a61a <_dtoa_r+0x62a>
 800a550:	4642      	mov	r2, r8
 800a552:	464b      	mov	r3, r9
 800a554:	4937      	ldr	r1, [pc, #220]	; (800a634 <_dtoa_r+0x644>)
 800a556:	2000      	movs	r0, #0
 800a558:	f7f5 fe9e 	bl	8000298 <__aeabi_dsub>
 800a55c:	ec53 2b19 	vmov	r2, r3, d9
 800a560:	f7f6 fac4 	bl	8000aec <__aeabi_dcmplt>
 800a564:	2800      	cmp	r0, #0
 800a566:	f040 80b6 	bne.w	800a6d6 <_dtoa_r+0x6e6>
 800a56a:	9b02      	ldr	r3, [sp, #8]
 800a56c:	429d      	cmp	r5, r3
 800a56e:	f43f af7c 	beq.w	800a46a <_dtoa_r+0x47a>
 800a572:	4b31      	ldr	r3, [pc, #196]	; (800a638 <_dtoa_r+0x648>)
 800a574:	ec51 0b19 	vmov	r0, r1, d9
 800a578:	2200      	movs	r2, #0
 800a57a:	f7f6 f845 	bl	8000608 <__aeabi_dmul>
 800a57e:	4b2e      	ldr	r3, [pc, #184]	; (800a638 <_dtoa_r+0x648>)
 800a580:	ec41 0b19 	vmov	d9, r0, r1
 800a584:	2200      	movs	r2, #0
 800a586:	4640      	mov	r0, r8
 800a588:	4649      	mov	r1, r9
 800a58a:	f7f6 f83d 	bl	8000608 <__aeabi_dmul>
 800a58e:	4680      	mov	r8, r0
 800a590:	4689      	mov	r9, r1
 800a592:	e7c5      	b.n	800a520 <_dtoa_r+0x530>
 800a594:	ec51 0b17 	vmov	r0, r1, d7
 800a598:	f7f6 f836 	bl	8000608 <__aeabi_dmul>
 800a59c:	9b02      	ldr	r3, [sp, #8]
 800a59e:	9d00      	ldr	r5, [sp, #0]
 800a5a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5a2:	ec41 0b19 	vmov	d9, r0, r1
 800a5a6:	4649      	mov	r1, r9
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	f7f6 fadd 	bl	8000b68 <__aeabi_d2iz>
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	f7f5 ffc0 	bl	8000534 <__aeabi_i2d>
 800a5b4:	3630      	adds	r6, #48	; 0x30
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	4649      	mov	r1, r9
 800a5be:	f7f5 fe6b 	bl	8000298 <__aeabi_dsub>
 800a5c2:	f805 6b01 	strb.w	r6, [r5], #1
 800a5c6:	9b02      	ldr	r3, [sp, #8]
 800a5c8:	429d      	cmp	r5, r3
 800a5ca:	4680      	mov	r8, r0
 800a5cc:	4689      	mov	r9, r1
 800a5ce:	f04f 0200 	mov.w	r2, #0
 800a5d2:	d124      	bne.n	800a61e <_dtoa_r+0x62e>
 800a5d4:	4b1b      	ldr	r3, [pc, #108]	; (800a644 <_dtoa_r+0x654>)
 800a5d6:	ec51 0b19 	vmov	r0, r1, d9
 800a5da:	f7f5 fe5f 	bl	800029c <__adddf3>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	f7f6 fa9f 	bl	8000b28 <__aeabi_dcmpgt>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d173      	bne.n	800a6d6 <_dtoa_r+0x6e6>
 800a5ee:	ec53 2b19 	vmov	r2, r3, d9
 800a5f2:	4914      	ldr	r1, [pc, #80]	; (800a644 <_dtoa_r+0x654>)
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	f7f5 fe4f 	bl	8000298 <__aeabi_dsub>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4640      	mov	r0, r8
 800a600:	4649      	mov	r1, r9
 800a602:	f7f6 fa73 	bl	8000aec <__aeabi_dcmplt>
 800a606:	2800      	cmp	r0, #0
 800a608:	f43f af2f 	beq.w	800a46a <_dtoa_r+0x47a>
 800a60c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a60e:	1e6b      	subs	r3, r5, #1
 800a610:	930f      	str	r3, [sp, #60]	; 0x3c
 800a612:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a616:	2b30      	cmp	r3, #48	; 0x30
 800a618:	d0f8      	beq.n	800a60c <_dtoa_r+0x61c>
 800a61a:	46bb      	mov	fp, r7
 800a61c:	e04a      	b.n	800a6b4 <_dtoa_r+0x6c4>
 800a61e:	4b06      	ldr	r3, [pc, #24]	; (800a638 <_dtoa_r+0x648>)
 800a620:	f7f5 fff2 	bl	8000608 <__aeabi_dmul>
 800a624:	4680      	mov	r8, r0
 800a626:	4689      	mov	r9, r1
 800a628:	e7bd      	b.n	800a5a6 <_dtoa_r+0x5b6>
 800a62a:	bf00      	nop
 800a62c:	0800d9b0 	.word	0x0800d9b0
 800a630:	0800d988 	.word	0x0800d988
 800a634:	3ff00000 	.word	0x3ff00000
 800a638:	40240000 	.word	0x40240000
 800a63c:	401c0000 	.word	0x401c0000
 800a640:	40140000 	.word	0x40140000
 800a644:	3fe00000 	.word	0x3fe00000
 800a648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a64c:	9d00      	ldr	r5, [sp, #0]
 800a64e:	4642      	mov	r2, r8
 800a650:	464b      	mov	r3, r9
 800a652:	4630      	mov	r0, r6
 800a654:	4639      	mov	r1, r7
 800a656:	f7f6 f901 	bl	800085c <__aeabi_ddiv>
 800a65a:	f7f6 fa85 	bl	8000b68 <__aeabi_d2iz>
 800a65e:	9001      	str	r0, [sp, #4]
 800a660:	f7f5 ff68 	bl	8000534 <__aeabi_i2d>
 800a664:	4642      	mov	r2, r8
 800a666:	464b      	mov	r3, r9
 800a668:	f7f5 ffce 	bl	8000608 <__aeabi_dmul>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4630      	mov	r0, r6
 800a672:	4639      	mov	r1, r7
 800a674:	f7f5 fe10 	bl	8000298 <__aeabi_dsub>
 800a678:	9e01      	ldr	r6, [sp, #4]
 800a67a:	9f04      	ldr	r7, [sp, #16]
 800a67c:	3630      	adds	r6, #48	; 0x30
 800a67e:	f805 6b01 	strb.w	r6, [r5], #1
 800a682:	9e00      	ldr	r6, [sp, #0]
 800a684:	1bae      	subs	r6, r5, r6
 800a686:	42b7      	cmp	r7, r6
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	d134      	bne.n	800a6f8 <_dtoa_r+0x708>
 800a68e:	f7f5 fe05 	bl	800029c <__adddf3>
 800a692:	4642      	mov	r2, r8
 800a694:	464b      	mov	r3, r9
 800a696:	4606      	mov	r6, r0
 800a698:	460f      	mov	r7, r1
 800a69a:	f7f6 fa45 	bl	8000b28 <__aeabi_dcmpgt>
 800a69e:	b9c8      	cbnz	r0, 800a6d4 <_dtoa_r+0x6e4>
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	464b      	mov	r3, r9
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f7f6 fa16 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6ac:	b110      	cbz	r0, 800a6b4 <_dtoa_r+0x6c4>
 800a6ae:	9b01      	ldr	r3, [sp, #4]
 800a6b0:	07db      	lsls	r3, r3, #31
 800a6b2:	d40f      	bmi.n	800a6d4 <_dtoa_r+0x6e4>
 800a6b4:	4651      	mov	r1, sl
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f000 fbcc 	bl	800ae54 <_Bfree>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6c0:	702b      	strb	r3, [r5, #0]
 800a6c2:	f10b 0301 	add.w	r3, fp, #1
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f43f ace2 	beq.w	800a094 <_dtoa_r+0xa4>
 800a6d0:	601d      	str	r5, [r3, #0]
 800a6d2:	e4df      	b.n	800a094 <_dtoa_r+0xa4>
 800a6d4:	465f      	mov	r7, fp
 800a6d6:	462b      	mov	r3, r5
 800a6d8:	461d      	mov	r5, r3
 800a6da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6de:	2a39      	cmp	r2, #57	; 0x39
 800a6e0:	d106      	bne.n	800a6f0 <_dtoa_r+0x700>
 800a6e2:	9a00      	ldr	r2, [sp, #0]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d1f7      	bne.n	800a6d8 <_dtoa_r+0x6e8>
 800a6e8:	9900      	ldr	r1, [sp, #0]
 800a6ea:	2230      	movs	r2, #48	; 0x30
 800a6ec:	3701      	adds	r7, #1
 800a6ee:	700a      	strb	r2, [r1, #0]
 800a6f0:	781a      	ldrb	r2, [r3, #0]
 800a6f2:	3201      	adds	r2, #1
 800a6f4:	701a      	strb	r2, [r3, #0]
 800a6f6:	e790      	b.n	800a61a <_dtoa_r+0x62a>
 800a6f8:	4ba3      	ldr	r3, [pc, #652]	; (800a988 <_dtoa_r+0x998>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f7f5 ff84 	bl	8000608 <__aeabi_dmul>
 800a700:	2200      	movs	r2, #0
 800a702:	2300      	movs	r3, #0
 800a704:	4606      	mov	r6, r0
 800a706:	460f      	mov	r7, r1
 800a708:	f7f6 f9e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d09e      	beq.n	800a64e <_dtoa_r+0x65e>
 800a710:	e7d0      	b.n	800a6b4 <_dtoa_r+0x6c4>
 800a712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a714:	2a00      	cmp	r2, #0
 800a716:	f000 80ca 	beq.w	800a8ae <_dtoa_r+0x8be>
 800a71a:	9a07      	ldr	r2, [sp, #28]
 800a71c:	2a01      	cmp	r2, #1
 800a71e:	f300 80ad 	bgt.w	800a87c <_dtoa_r+0x88c>
 800a722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a724:	2a00      	cmp	r2, #0
 800a726:	f000 80a5 	beq.w	800a874 <_dtoa_r+0x884>
 800a72a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a72e:	9e08      	ldr	r6, [sp, #32]
 800a730:	9d05      	ldr	r5, [sp, #20]
 800a732:	9a05      	ldr	r2, [sp, #20]
 800a734:	441a      	add	r2, r3
 800a736:	9205      	str	r2, [sp, #20]
 800a738:	9a06      	ldr	r2, [sp, #24]
 800a73a:	2101      	movs	r1, #1
 800a73c:	441a      	add	r2, r3
 800a73e:	4620      	mov	r0, r4
 800a740:	9206      	str	r2, [sp, #24]
 800a742:	f000 fc87 	bl	800b054 <__i2b>
 800a746:	4607      	mov	r7, r0
 800a748:	b165      	cbz	r5, 800a764 <_dtoa_r+0x774>
 800a74a:	9b06      	ldr	r3, [sp, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	dd09      	ble.n	800a764 <_dtoa_r+0x774>
 800a750:	42ab      	cmp	r3, r5
 800a752:	9a05      	ldr	r2, [sp, #20]
 800a754:	bfa8      	it	ge
 800a756:	462b      	movge	r3, r5
 800a758:	1ad2      	subs	r2, r2, r3
 800a75a:	9205      	str	r2, [sp, #20]
 800a75c:	9a06      	ldr	r2, [sp, #24]
 800a75e:	1aed      	subs	r5, r5, r3
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	9306      	str	r3, [sp, #24]
 800a764:	9b08      	ldr	r3, [sp, #32]
 800a766:	b1f3      	cbz	r3, 800a7a6 <_dtoa_r+0x7b6>
 800a768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 80a3 	beq.w	800a8b6 <_dtoa_r+0x8c6>
 800a770:	2e00      	cmp	r6, #0
 800a772:	dd10      	ble.n	800a796 <_dtoa_r+0x7a6>
 800a774:	4639      	mov	r1, r7
 800a776:	4632      	mov	r2, r6
 800a778:	4620      	mov	r0, r4
 800a77a:	f000 fd2b 	bl	800b1d4 <__pow5mult>
 800a77e:	4652      	mov	r2, sl
 800a780:	4601      	mov	r1, r0
 800a782:	4607      	mov	r7, r0
 800a784:	4620      	mov	r0, r4
 800a786:	f000 fc7b 	bl	800b080 <__multiply>
 800a78a:	4651      	mov	r1, sl
 800a78c:	4680      	mov	r8, r0
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 fb60 	bl	800ae54 <_Bfree>
 800a794:	46c2      	mov	sl, r8
 800a796:	9b08      	ldr	r3, [sp, #32]
 800a798:	1b9a      	subs	r2, r3, r6
 800a79a:	d004      	beq.n	800a7a6 <_dtoa_r+0x7b6>
 800a79c:	4651      	mov	r1, sl
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 fd18 	bl	800b1d4 <__pow5mult>
 800a7a4:	4682      	mov	sl, r0
 800a7a6:	2101      	movs	r1, #1
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 fc53 	bl	800b054 <__i2b>
 800a7ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	f340 8081 	ble.w	800a8ba <_dtoa_r+0x8ca>
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4601      	mov	r1, r0
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 fd09 	bl	800b1d4 <__pow5mult>
 800a7c2:	9b07      	ldr	r3, [sp, #28]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	dd7a      	ble.n	800a8c0 <_dtoa_r+0x8d0>
 800a7ca:	f04f 0800 	mov.w	r8, #0
 800a7ce:	6933      	ldr	r3, [r6, #16]
 800a7d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a7d4:	6918      	ldr	r0, [r3, #16]
 800a7d6:	f000 fbef 	bl	800afb8 <__hi0bits>
 800a7da:	f1c0 0020 	rsb	r0, r0, #32
 800a7de:	9b06      	ldr	r3, [sp, #24]
 800a7e0:	4418      	add	r0, r3
 800a7e2:	f010 001f 	ands.w	r0, r0, #31
 800a7e6:	f000 8094 	beq.w	800a912 <_dtoa_r+0x922>
 800a7ea:	f1c0 0320 	rsb	r3, r0, #32
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	f340 8085 	ble.w	800a8fe <_dtoa_r+0x90e>
 800a7f4:	9b05      	ldr	r3, [sp, #20]
 800a7f6:	f1c0 001c 	rsb	r0, r0, #28
 800a7fa:	4403      	add	r3, r0
 800a7fc:	9305      	str	r3, [sp, #20]
 800a7fe:	9b06      	ldr	r3, [sp, #24]
 800a800:	4403      	add	r3, r0
 800a802:	4405      	add	r5, r0
 800a804:	9306      	str	r3, [sp, #24]
 800a806:	9b05      	ldr	r3, [sp, #20]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dd05      	ble.n	800a818 <_dtoa_r+0x828>
 800a80c:	4651      	mov	r1, sl
 800a80e:	461a      	mov	r2, r3
 800a810:	4620      	mov	r0, r4
 800a812:	f000 fd39 	bl	800b288 <__lshift>
 800a816:	4682      	mov	sl, r0
 800a818:	9b06      	ldr	r3, [sp, #24]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	dd05      	ble.n	800a82a <_dtoa_r+0x83a>
 800a81e:	4631      	mov	r1, r6
 800a820:	461a      	mov	r2, r3
 800a822:	4620      	mov	r0, r4
 800a824:	f000 fd30 	bl	800b288 <__lshift>
 800a828:	4606      	mov	r6, r0
 800a82a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d072      	beq.n	800a916 <_dtoa_r+0x926>
 800a830:	4631      	mov	r1, r6
 800a832:	4650      	mov	r0, sl
 800a834:	f000 fd94 	bl	800b360 <__mcmp>
 800a838:	2800      	cmp	r0, #0
 800a83a:	da6c      	bge.n	800a916 <_dtoa_r+0x926>
 800a83c:	2300      	movs	r3, #0
 800a83e:	4651      	mov	r1, sl
 800a840:	220a      	movs	r2, #10
 800a842:	4620      	mov	r0, r4
 800a844:	f000 fb28 	bl	800ae98 <__multadd>
 800a848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a84e:	4682      	mov	sl, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 81b0 	beq.w	800abb6 <_dtoa_r+0xbc6>
 800a856:	2300      	movs	r3, #0
 800a858:	4639      	mov	r1, r7
 800a85a:	220a      	movs	r2, #10
 800a85c:	4620      	mov	r0, r4
 800a85e:	f000 fb1b 	bl	800ae98 <__multadd>
 800a862:	9b01      	ldr	r3, [sp, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	4607      	mov	r7, r0
 800a868:	f300 8096 	bgt.w	800a998 <_dtoa_r+0x9a8>
 800a86c:	9b07      	ldr	r3, [sp, #28]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	dc59      	bgt.n	800a926 <_dtoa_r+0x936>
 800a872:	e091      	b.n	800a998 <_dtoa_r+0x9a8>
 800a874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a87a:	e758      	b.n	800a72e <_dtoa_r+0x73e>
 800a87c:	9b04      	ldr	r3, [sp, #16]
 800a87e:	1e5e      	subs	r6, r3, #1
 800a880:	9b08      	ldr	r3, [sp, #32]
 800a882:	42b3      	cmp	r3, r6
 800a884:	bfbf      	itttt	lt
 800a886:	9b08      	ldrlt	r3, [sp, #32]
 800a888:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a88a:	9608      	strlt	r6, [sp, #32]
 800a88c:	1af3      	sublt	r3, r6, r3
 800a88e:	bfb4      	ite	lt
 800a890:	18d2      	addlt	r2, r2, r3
 800a892:	1b9e      	subge	r6, r3, r6
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	bfbc      	itt	lt
 800a898:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a89a:	2600      	movlt	r6, #0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	bfb7      	itett	lt
 800a8a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a8a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a8a8:	1a9d      	sublt	r5, r3, r2
 800a8aa:	2300      	movlt	r3, #0
 800a8ac:	e741      	b.n	800a732 <_dtoa_r+0x742>
 800a8ae:	9e08      	ldr	r6, [sp, #32]
 800a8b0:	9d05      	ldr	r5, [sp, #20]
 800a8b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a8b4:	e748      	b.n	800a748 <_dtoa_r+0x758>
 800a8b6:	9a08      	ldr	r2, [sp, #32]
 800a8b8:	e770      	b.n	800a79c <_dtoa_r+0x7ac>
 800a8ba:	9b07      	ldr	r3, [sp, #28]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	dc19      	bgt.n	800a8f4 <_dtoa_r+0x904>
 800a8c0:	9b02      	ldr	r3, [sp, #8]
 800a8c2:	b9bb      	cbnz	r3, 800a8f4 <_dtoa_r+0x904>
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8ca:	b99b      	cbnz	r3, 800a8f4 <_dtoa_r+0x904>
 800a8cc:	9b03      	ldr	r3, [sp, #12]
 800a8ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8d2:	0d1b      	lsrs	r3, r3, #20
 800a8d4:	051b      	lsls	r3, r3, #20
 800a8d6:	b183      	cbz	r3, 800a8fa <_dtoa_r+0x90a>
 800a8d8:	9b05      	ldr	r3, [sp, #20]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	9305      	str	r3, [sp, #20]
 800a8de:	9b06      	ldr	r3, [sp, #24]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	9306      	str	r3, [sp, #24]
 800a8e4:	f04f 0801 	mov.w	r8, #1
 800a8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f47f af6f 	bne.w	800a7ce <_dtoa_r+0x7de>
 800a8f0:	2001      	movs	r0, #1
 800a8f2:	e774      	b.n	800a7de <_dtoa_r+0x7ee>
 800a8f4:	f04f 0800 	mov.w	r8, #0
 800a8f8:	e7f6      	b.n	800a8e8 <_dtoa_r+0x8f8>
 800a8fa:	4698      	mov	r8, r3
 800a8fc:	e7f4      	b.n	800a8e8 <_dtoa_r+0x8f8>
 800a8fe:	d082      	beq.n	800a806 <_dtoa_r+0x816>
 800a900:	9a05      	ldr	r2, [sp, #20]
 800a902:	331c      	adds	r3, #28
 800a904:	441a      	add	r2, r3
 800a906:	9205      	str	r2, [sp, #20]
 800a908:	9a06      	ldr	r2, [sp, #24]
 800a90a:	441a      	add	r2, r3
 800a90c:	441d      	add	r5, r3
 800a90e:	9206      	str	r2, [sp, #24]
 800a910:	e779      	b.n	800a806 <_dtoa_r+0x816>
 800a912:	4603      	mov	r3, r0
 800a914:	e7f4      	b.n	800a900 <_dtoa_r+0x910>
 800a916:	9b04      	ldr	r3, [sp, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	dc37      	bgt.n	800a98c <_dtoa_r+0x99c>
 800a91c:	9b07      	ldr	r3, [sp, #28]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	dd34      	ble.n	800a98c <_dtoa_r+0x99c>
 800a922:	9b04      	ldr	r3, [sp, #16]
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	b963      	cbnz	r3, 800a944 <_dtoa_r+0x954>
 800a92a:	4631      	mov	r1, r6
 800a92c:	2205      	movs	r2, #5
 800a92e:	4620      	mov	r0, r4
 800a930:	f000 fab2 	bl	800ae98 <__multadd>
 800a934:	4601      	mov	r1, r0
 800a936:	4606      	mov	r6, r0
 800a938:	4650      	mov	r0, sl
 800a93a:	f000 fd11 	bl	800b360 <__mcmp>
 800a93e:	2800      	cmp	r0, #0
 800a940:	f73f adbb 	bgt.w	800a4ba <_dtoa_r+0x4ca>
 800a944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a946:	9d00      	ldr	r5, [sp, #0]
 800a948:	ea6f 0b03 	mvn.w	fp, r3
 800a94c:	f04f 0800 	mov.w	r8, #0
 800a950:	4631      	mov	r1, r6
 800a952:	4620      	mov	r0, r4
 800a954:	f000 fa7e 	bl	800ae54 <_Bfree>
 800a958:	2f00      	cmp	r7, #0
 800a95a:	f43f aeab 	beq.w	800a6b4 <_dtoa_r+0x6c4>
 800a95e:	f1b8 0f00 	cmp.w	r8, #0
 800a962:	d005      	beq.n	800a970 <_dtoa_r+0x980>
 800a964:	45b8      	cmp	r8, r7
 800a966:	d003      	beq.n	800a970 <_dtoa_r+0x980>
 800a968:	4641      	mov	r1, r8
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 fa72 	bl	800ae54 <_Bfree>
 800a970:	4639      	mov	r1, r7
 800a972:	4620      	mov	r0, r4
 800a974:	f000 fa6e 	bl	800ae54 <_Bfree>
 800a978:	e69c      	b.n	800a6b4 <_dtoa_r+0x6c4>
 800a97a:	2600      	movs	r6, #0
 800a97c:	4637      	mov	r7, r6
 800a97e:	e7e1      	b.n	800a944 <_dtoa_r+0x954>
 800a980:	46bb      	mov	fp, r7
 800a982:	4637      	mov	r7, r6
 800a984:	e599      	b.n	800a4ba <_dtoa_r+0x4ca>
 800a986:	bf00      	nop
 800a988:	40240000 	.word	0x40240000
 800a98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 80c8 	beq.w	800ab24 <_dtoa_r+0xb34>
 800a994:	9b04      	ldr	r3, [sp, #16]
 800a996:	9301      	str	r3, [sp, #4]
 800a998:	2d00      	cmp	r5, #0
 800a99a:	dd05      	ble.n	800a9a8 <_dtoa_r+0x9b8>
 800a99c:	4639      	mov	r1, r7
 800a99e:	462a      	mov	r2, r5
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f000 fc71 	bl	800b288 <__lshift>
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	f1b8 0f00 	cmp.w	r8, #0
 800a9ac:	d05b      	beq.n	800aa66 <_dtoa_r+0xa76>
 800a9ae:	6879      	ldr	r1, [r7, #4]
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f000 fa0f 	bl	800add4 <_Balloc>
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	b928      	cbnz	r0, 800a9c6 <_dtoa_r+0x9d6>
 800a9ba:	4b83      	ldr	r3, [pc, #524]	; (800abc8 <_dtoa_r+0xbd8>)
 800a9bc:	4602      	mov	r2, r0
 800a9be:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a9c2:	f7ff bb2e 	b.w	800a022 <_dtoa_r+0x32>
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	3202      	adds	r2, #2
 800a9ca:	0092      	lsls	r2, r2, #2
 800a9cc:	f107 010c 	add.w	r1, r7, #12
 800a9d0:	300c      	adds	r0, #12
 800a9d2:	f7ff fa6e 	bl	8009eb2 <memcpy>
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	4629      	mov	r1, r5
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 fc54 	bl	800b288 <__lshift>
 800a9e0:	9b00      	ldr	r3, [sp, #0]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	9304      	str	r3, [sp, #16]
 800a9e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	9308      	str	r3, [sp, #32]
 800a9ee:	9b02      	ldr	r3, [sp, #8]
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	46b8      	mov	r8, r7
 800a9f6:	9306      	str	r3, [sp, #24]
 800a9f8:	4607      	mov	r7, r0
 800a9fa:	9b04      	ldr	r3, [sp, #16]
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	4650      	mov	r0, sl
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	f7ff fa6a 	bl	8009edc <quorem>
 800aa08:	4641      	mov	r1, r8
 800aa0a:	9002      	str	r0, [sp, #8]
 800aa0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa10:	4650      	mov	r0, sl
 800aa12:	f000 fca5 	bl	800b360 <__mcmp>
 800aa16:	463a      	mov	r2, r7
 800aa18:	9005      	str	r0, [sp, #20]
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 fcbb 	bl	800b398 <__mdiff>
 800aa22:	68c2      	ldr	r2, [r0, #12]
 800aa24:	4605      	mov	r5, r0
 800aa26:	bb02      	cbnz	r2, 800aa6a <_dtoa_r+0xa7a>
 800aa28:	4601      	mov	r1, r0
 800aa2a:	4650      	mov	r0, sl
 800aa2c:	f000 fc98 	bl	800b360 <__mcmp>
 800aa30:	4602      	mov	r2, r0
 800aa32:	4629      	mov	r1, r5
 800aa34:	4620      	mov	r0, r4
 800aa36:	9209      	str	r2, [sp, #36]	; 0x24
 800aa38:	f000 fa0c 	bl	800ae54 <_Bfree>
 800aa3c:	9b07      	ldr	r3, [sp, #28]
 800aa3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa40:	9d04      	ldr	r5, [sp, #16]
 800aa42:	ea43 0102 	orr.w	r1, r3, r2
 800aa46:	9b06      	ldr	r3, [sp, #24]
 800aa48:	4319      	orrs	r1, r3
 800aa4a:	d110      	bne.n	800aa6e <_dtoa_r+0xa7e>
 800aa4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa50:	d029      	beq.n	800aaa6 <_dtoa_r+0xab6>
 800aa52:	9b05      	ldr	r3, [sp, #20]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	dd02      	ble.n	800aa5e <_dtoa_r+0xa6e>
 800aa58:	9b02      	ldr	r3, [sp, #8]
 800aa5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aa5e:	9b01      	ldr	r3, [sp, #4]
 800aa60:	f883 9000 	strb.w	r9, [r3]
 800aa64:	e774      	b.n	800a950 <_dtoa_r+0x960>
 800aa66:	4638      	mov	r0, r7
 800aa68:	e7ba      	b.n	800a9e0 <_dtoa_r+0x9f0>
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	e7e1      	b.n	800aa32 <_dtoa_r+0xa42>
 800aa6e:	9b05      	ldr	r3, [sp, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	db04      	blt.n	800aa7e <_dtoa_r+0xa8e>
 800aa74:	9907      	ldr	r1, [sp, #28]
 800aa76:	430b      	orrs	r3, r1
 800aa78:	9906      	ldr	r1, [sp, #24]
 800aa7a:	430b      	orrs	r3, r1
 800aa7c:	d120      	bne.n	800aac0 <_dtoa_r+0xad0>
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	dded      	ble.n	800aa5e <_dtoa_r+0xa6e>
 800aa82:	4651      	mov	r1, sl
 800aa84:	2201      	movs	r2, #1
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 fbfe 	bl	800b288 <__lshift>
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4682      	mov	sl, r0
 800aa90:	f000 fc66 	bl	800b360 <__mcmp>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	dc03      	bgt.n	800aaa0 <_dtoa_r+0xab0>
 800aa98:	d1e1      	bne.n	800aa5e <_dtoa_r+0xa6e>
 800aa9a:	f019 0f01 	tst.w	r9, #1
 800aa9e:	d0de      	beq.n	800aa5e <_dtoa_r+0xa6e>
 800aaa0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aaa4:	d1d8      	bne.n	800aa58 <_dtoa_r+0xa68>
 800aaa6:	9a01      	ldr	r2, [sp, #4]
 800aaa8:	2339      	movs	r3, #57	; 0x39
 800aaaa:	7013      	strb	r3, [r2, #0]
 800aaac:	462b      	mov	r3, r5
 800aaae:	461d      	mov	r5, r3
 800aab0:	3b01      	subs	r3, #1
 800aab2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aab6:	2a39      	cmp	r2, #57	; 0x39
 800aab8:	d06c      	beq.n	800ab94 <_dtoa_r+0xba4>
 800aaba:	3201      	adds	r2, #1
 800aabc:	701a      	strb	r2, [r3, #0]
 800aabe:	e747      	b.n	800a950 <_dtoa_r+0x960>
 800aac0:	2a00      	cmp	r2, #0
 800aac2:	dd07      	ble.n	800aad4 <_dtoa_r+0xae4>
 800aac4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aac8:	d0ed      	beq.n	800aaa6 <_dtoa_r+0xab6>
 800aaca:	9a01      	ldr	r2, [sp, #4]
 800aacc:	f109 0301 	add.w	r3, r9, #1
 800aad0:	7013      	strb	r3, [r2, #0]
 800aad2:	e73d      	b.n	800a950 <_dtoa_r+0x960>
 800aad4:	9b04      	ldr	r3, [sp, #16]
 800aad6:	9a08      	ldr	r2, [sp, #32]
 800aad8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aadc:	4293      	cmp	r3, r2
 800aade:	d043      	beq.n	800ab68 <_dtoa_r+0xb78>
 800aae0:	4651      	mov	r1, sl
 800aae2:	2300      	movs	r3, #0
 800aae4:	220a      	movs	r2, #10
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 f9d6 	bl	800ae98 <__multadd>
 800aaec:	45b8      	cmp	r8, r7
 800aaee:	4682      	mov	sl, r0
 800aaf0:	f04f 0300 	mov.w	r3, #0
 800aaf4:	f04f 020a 	mov.w	r2, #10
 800aaf8:	4641      	mov	r1, r8
 800aafa:	4620      	mov	r0, r4
 800aafc:	d107      	bne.n	800ab0e <_dtoa_r+0xb1e>
 800aafe:	f000 f9cb 	bl	800ae98 <__multadd>
 800ab02:	4680      	mov	r8, r0
 800ab04:	4607      	mov	r7, r0
 800ab06:	9b04      	ldr	r3, [sp, #16]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	9304      	str	r3, [sp, #16]
 800ab0c:	e775      	b.n	800a9fa <_dtoa_r+0xa0a>
 800ab0e:	f000 f9c3 	bl	800ae98 <__multadd>
 800ab12:	4639      	mov	r1, r7
 800ab14:	4680      	mov	r8, r0
 800ab16:	2300      	movs	r3, #0
 800ab18:	220a      	movs	r2, #10
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 f9bc 	bl	800ae98 <__multadd>
 800ab20:	4607      	mov	r7, r0
 800ab22:	e7f0      	b.n	800ab06 <_dtoa_r+0xb16>
 800ab24:	9b04      	ldr	r3, [sp, #16]
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	9d00      	ldr	r5, [sp, #0]
 800ab2a:	4631      	mov	r1, r6
 800ab2c:	4650      	mov	r0, sl
 800ab2e:	f7ff f9d5 	bl	8009edc <quorem>
 800ab32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab36:	9b00      	ldr	r3, [sp, #0]
 800ab38:	f805 9b01 	strb.w	r9, [r5], #1
 800ab3c:	1aea      	subs	r2, r5, r3
 800ab3e:	9b01      	ldr	r3, [sp, #4]
 800ab40:	4293      	cmp	r3, r2
 800ab42:	dd07      	ble.n	800ab54 <_dtoa_r+0xb64>
 800ab44:	4651      	mov	r1, sl
 800ab46:	2300      	movs	r3, #0
 800ab48:	220a      	movs	r2, #10
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 f9a4 	bl	800ae98 <__multadd>
 800ab50:	4682      	mov	sl, r0
 800ab52:	e7ea      	b.n	800ab2a <_dtoa_r+0xb3a>
 800ab54:	9b01      	ldr	r3, [sp, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	bfc8      	it	gt
 800ab5a:	461d      	movgt	r5, r3
 800ab5c:	9b00      	ldr	r3, [sp, #0]
 800ab5e:	bfd8      	it	le
 800ab60:	2501      	movle	r5, #1
 800ab62:	441d      	add	r5, r3
 800ab64:	f04f 0800 	mov.w	r8, #0
 800ab68:	4651      	mov	r1, sl
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f000 fb8b 	bl	800b288 <__lshift>
 800ab72:	4631      	mov	r1, r6
 800ab74:	4682      	mov	sl, r0
 800ab76:	f000 fbf3 	bl	800b360 <__mcmp>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	dc96      	bgt.n	800aaac <_dtoa_r+0xabc>
 800ab7e:	d102      	bne.n	800ab86 <_dtoa_r+0xb96>
 800ab80:	f019 0f01 	tst.w	r9, #1
 800ab84:	d192      	bne.n	800aaac <_dtoa_r+0xabc>
 800ab86:	462b      	mov	r3, r5
 800ab88:	461d      	mov	r5, r3
 800ab8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab8e:	2a30      	cmp	r2, #48	; 0x30
 800ab90:	d0fa      	beq.n	800ab88 <_dtoa_r+0xb98>
 800ab92:	e6dd      	b.n	800a950 <_dtoa_r+0x960>
 800ab94:	9a00      	ldr	r2, [sp, #0]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d189      	bne.n	800aaae <_dtoa_r+0xabe>
 800ab9a:	f10b 0b01 	add.w	fp, fp, #1
 800ab9e:	2331      	movs	r3, #49	; 0x31
 800aba0:	e796      	b.n	800aad0 <_dtoa_r+0xae0>
 800aba2:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <_dtoa_r+0xbdc>)
 800aba4:	f7ff ba99 	b.w	800a0da <_dtoa_r+0xea>
 800aba8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f47f aa6d 	bne.w	800a08a <_dtoa_r+0x9a>
 800abb0:	4b07      	ldr	r3, [pc, #28]	; (800abd0 <_dtoa_r+0xbe0>)
 800abb2:	f7ff ba92 	b.w	800a0da <_dtoa_r+0xea>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dcb5      	bgt.n	800ab28 <_dtoa_r+0xb38>
 800abbc:	9b07      	ldr	r3, [sp, #28]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	f73f aeb1 	bgt.w	800a926 <_dtoa_r+0x936>
 800abc4:	e7b0      	b.n	800ab28 <_dtoa_r+0xb38>
 800abc6:	bf00      	nop
 800abc8:	0800d91d 	.word	0x0800d91d
 800abcc:	0800d878 	.word	0x0800d878
 800abd0:	0800d8a1 	.word	0x0800d8a1

0800abd4 <_free_r>:
 800abd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abd6:	2900      	cmp	r1, #0
 800abd8:	d044      	beq.n	800ac64 <_free_r+0x90>
 800abda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abde:	9001      	str	r0, [sp, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f1a1 0404 	sub.w	r4, r1, #4
 800abe6:	bfb8      	it	lt
 800abe8:	18e4      	addlt	r4, r4, r3
 800abea:	f000 f8e7 	bl	800adbc <__malloc_lock>
 800abee:	4a1e      	ldr	r2, [pc, #120]	; (800ac68 <_free_r+0x94>)
 800abf0:	9801      	ldr	r0, [sp, #4]
 800abf2:	6813      	ldr	r3, [r2, #0]
 800abf4:	b933      	cbnz	r3, 800ac04 <_free_r+0x30>
 800abf6:	6063      	str	r3, [r4, #4]
 800abf8:	6014      	str	r4, [r2, #0]
 800abfa:	b003      	add	sp, #12
 800abfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac00:	f000 b8e2 	b.w	800adc8 <__malloc_unlock>
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	d908      	bls.n	800ac1a <_free_r+0x46>
 800ac08:	6825      	ldr	r5, [r4, #0]
 800ac0a:	1961      	adds	r1, r4, r5
 800ac0c:	428b      	cmp	r3, r1
 800ac0e:	bf01      	itttt	eq
 800ac10:	6819      	ldreq	r1, [r3, #0]
 800ac12:	685b      	ldreq	r3, [r3, #4]
 800ac14:	1949      	addeq	r1, r1, r5
 800ac16:	6021      	streq	r1, [r4, #0]
 800ac18:	e7ed      	b.n	800abf6 <_free_r+0x22>
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	b10b      	cbz	r3, 800ac24 <_free_r+0x50>
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	d9fa      	bls.n	800ac1a <_free_r+0x46>
 800ac24:	6811      	ldr	r1, [r2, #0]
 800ac26:	1855      	adds	r5, r2, r1
 800ac28:	42a5      	cmp	r5, r4
 800ac2a:	d10b      	bne.n	800ac44 <_free_r+0x70>
 800ac2c:	6824      	ldr	r4, [r4, #0]
 800ac2e:	4421      	add	r1, r4
 800ac30:	1854      	adds	r4, r2, r1
 800ac32:	42a3      	cmp	r3, r4
 800ac34:	6011      	str	r1, [r2, #0]
 800ac36:	d1e0      	bne.n	800abfa <_free_r+0x26>
 800ac38:	681c      	ldr	r4, [r3, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	6053      	str	r3, [r2, #4]
 800ac3e:	440c      	add	r4, r1
 800ac40:	6014      	str	r4, [r2, #0]
 800ac42:	e7da      	b.n	800abfa <_free_r+0x26>
 800ac44:	d902      	bls.n	800ac4c <_free_r+0x78>
 800ac46:	230c      	movs	r3, #12
 800ac48:	6003      	str	r3, [r0, #0]
 800ac4a:	e7d6      	b.n	800abfa <_free_r+0x26>
 800ac4c:	6825      	ldr	r5, [r4, #0]
 800ac4e:	1961      	adds	r1, r4, r5
 800ac50:	428b      	cmp	r3, r1
 800ac52:	bf04      	itt	eq
 800ac54:	6819      	ldreq	r1, [r3, #0]
 800ac56:	685b      	ldreq	r3, [r3, #4]
 800ac58:	6063      	str	r3, [r4, #4]
 800ac5a:	bf04      	itt	eq
 800ac5c:	1949      	addeq	r1, r1, r5
 800ac5e:	6021      	streq	r1, [r4, #0]
 800ac60:	6054      	str	r4, [r2, #4]
 800ac62:	e7ca      	b.n	800abfa <_free_r+0x26>
 800ac64:	b003      	add	sp, #12
 800ac66:	bd30      	pop	{r4, r5, pc}
 800ac68:	200057e4 	.word	0x200057e4

0800ac6c <malloc>:
 800ac6c:	4b02      	ldr	r3, [pc, #8]	; (800ac78 <malloc+0xc>)
 800ac6e:	4601      	mov	r1, r0
 800ac70:	6818      	ldr	r0, [r3, #0]
 800ac72:	f000 b823 	b.w	800acbc <_malloc_r>
 800ac76:	bf00      	nop
 800ac78:	20000068 	.word	0x20000068

0800ac7c <sbrk_aligned>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	4e0e      	ldr	r6, [pc, #56]	; (800acb8 <sbrk_aligned+0x3c>)
 800ac80:	460c      	mov	r4, r1
 800ac82:	6831      	ldr	r1, [r6, #0]
 800ac84:	4605      	mov	r5, r0
 800ac86:	b911      	cbnz	r1, 800ac8e <sbrk_aligned+0x12>
 800ac88:	f001 fe9e 	bl	800c9c8 <_sbrk_r>
 800ac8c:	6030      	str	r0, [r6, #0]
 800ac8e:	4621      	mov	r1, r4
 800ac90:	4628      	mov	r0, r5
 800ac92:	f001 fe99 	bl	800c9c8 <_sbrk_r>
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	d00a      	beq.n	800acb0 <sbrk_aligned+0x34>
 800ac9a:	1cc4      	adds	r4, r0, #3
 800ac9c:	f024 0403 	bic.w	r4, r4, #3
 800aca0:	42a0      	cmp	r0, r4
 800aca2:	d007      	beq.n	800acb4 <sbrk_aligned+0x38>
 800aca4:	1a21      	subs	r1, r4, r0
 800aca6:	4628      	mov	r0, r5
 800aca8:	f001 fe8e 	bl	800c9c8 <_sbrk_r>
 800acac:	3001      	adds	r0, #1
 800acae:	d101      	bne.n	800acb4 <sbrk_aligned+0x38>
 800acb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800acb4:	4620      	mov	r0, r4
 800acb6:	bd70      	pop	{r4, r5, r6, pc}
 800acb8:	200057e8 	.word	0x200057e8

0800acbc <_malloc_r>:
 800acbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc0:	1ccd      	adds	r5, r1, #3
 800acc2:	f025 0503 	bic.w	r5, r5, #3
 800acc6:	3508      	adds	r5, #8
 800acc8:	2d0c      	cmp	r5, #12
 800acca:	bf38      	it	cc
 800accc:	250c      	movcc	r5, #12
 800acce:	2d00      	cmp	r5, #0
 800acd0:	4607      	mov	r7, r0
 800acd2:	db01      	blt.n	800acd8 <_malloc_r+0x1c>
 800acd4:	42a9      	cmp	r1, r5
 800acd6:	d905      	bls.n	800ace4 <_malloc_r+0x28>
 800acd8:	230c      	movs	r3, #12
 800acda:	603b      	str	r3, [r7, #0]
 800acdc:	2600      	movs	r6, #0
 800acde:	4630      	mov	r0, r6
 800ace0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ace4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800adb8 <_malloc_r+0xfc>
 800ace8:	f000 f868 	bl	800adbc <__malloc_lock>
 800acec:	f8d8 3000 	ldr.w	r3, [r8]
 800acf0:	461c      	mov	r4, r3
 800acf2:	bb5c      	cbnz	r4, 800ad4c <_malloc_r+0x90>
 800acf4:	4629      	mov	r1, r5
 800acf6:	4638      	mov	r0, r7
 800acf8:	f7ff ffc0 	bl	800ac7c <sbrk_aligned>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	4604      	mov	r4, r0
 800ad00:	d155      	bne.n	800adae <_malloc_r+0xf2>
 800ad02:	f8d8 4000 	ldr.w	r4, [r8]
 800ad06:	4626      	mov	r6, r4
 800ad08:	2e00      	cmp	r6, #0
 800ad0a:	d145      	bne.n	800ad98 <_malloc_r+0xdc>
 800ad0c:	2c00      	cmp	r4, #0
 800ad0e:	d048      	beq.n	800ada2 <_malloc_r+0xe6>
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	4631      	mov	r1, r6
 800ad14:	4638      	mov	r0, r7
 800ad16:	eb04 0903 	add.w	r9, r4, r3
 800ad1a:	f001 fe55 	bl	800c9c8 <_sbrk_r>
 800ad1e:	4581      	cmp	r9, r0
 800ad20:	d13f      	bne.n	800ada2 <_malloc_r+0xe6>
 800ad22:	6821      	ldr	r1, [r4, #0]
 800ad24:	1a6d      	subs	r5, r5, r1
 800ad26:	4629      	mov	r1, r5
 800ad28:	4638      	mov	r0, r7
 800ad2a:	f7ff ffa7 	bl	800ac7c <sbrk_aligned>
 800ad2e:	3001      	adds	r0, #1
 800ad30:	d037      	beq.n	800ada2 <_malloc_r+0xe6>
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	442b      	add	r3, r5
 800ad36:	6023      	str	r3, [r4, #0]
 800ad38:	f8d8 3000 	ldr.w	r3, [r8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d038      	beq.n	800adb2 <_malloc_r+0xf6>
 800ad40:	685a      	ldr	r2, [r3, #4]
 800ad42:	42a2      	cmp	r2, r4
 800ad44:	d12b      	bne.n	800ad9e <_malloc_r+0xe2>
 800ad46:	2200      	movs	r2, #0
 800ad48:	605a      	str	r2, [r3, #4]
 800ad4a:	e00f      	b.n	800ad6c <_malloc_r+0xb0>
 800ad4c:	6822      	ldr	r2, [r4, #0]
 800ad4e:	1b52      	subs	r2, r2, r5
 800ad50:	d41f      	bmi.n	800ad92 <_malloc_r+0xd6>
 800ad52:	2a0b      	cmp	r2, #11
 800ad54:	d917      	bls.n	800ad86 <_malloc_r+0xca>
 800ad56:	1961      	adds	r1, r4, r5
 800ad58:	42a3      	cmp	r3, r4
 800ad5a:	6025      	str	r5, [r4, #0]
 800ad5c:	bf18      	it	ne
 800ad5e:	6059      	strne	r1, [r3, #4]
 800ad60:	6863      	ldr	r3, [r4, #4]
 800ad62:	bf08      	it	eq
 800ad64:	f8c8 1000 	streq.w	r1, [r8]
 800ad68:	5162      	str	r2, [r4, r5]
 800ad6a:	604b      	str	r3, [r1, #4]
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	f104 060b 	add.w	r6, r4, #11
 800ad72:	f000 f829 	bl	800adc8 <__malloc_unlock>
 800ad76:	f026 0607 	bic.w	r6, r6, #7
 800ad7a:	1d23      	adds	r3, r4, #4
 800ad7c:	1af2      	subs	r2, r6, r3
 800ad7e:	d0ae      	beq.n	800acde <_malloc_r+0x22>
 800ad80:	1b9b      	subs	r3, r3, r6
 800ad82:	50a3      	str	r3, [r4, r2]
 800ad84:	e7ab      	b.n	800acde <_malloc_r+0x22>
 800ad86:	42a3      	cmp	r3, r4
 800ad88:	6862      	ldr	r2, [r4, #4]
 800ad8a:	d1dd      	bne.n	800ad48 <_malloc_r+0x8c>
 800ad8c:	f8c8 2000 	str.w	r2, [r8]
 800ad90:	e7ec      	b.n	800ad6c <_malloc_r+0xb0>
 800ad92:	4623      	mov	r3, r4
 800ad94:	6864      	ldr	r4, [r4, #4]
 800ad96:	e7ac      	b.n	800acf2 <_malloc_r+0x36>
 800ad98:	4634      	mov	r4, r6
 800ad9a:	6876      	ldr	r6, [r6, #4]
 800ad9c:	e7b4      	b.n	800ad08 <_malloc_r+0x4c>
 800ad9e:	4613      	mov	r3, r2
 800ada0:	e7cc      	b.n	800ad3c <_malloc_r+0x80>
 800ada2:	230c      	movs	r3, #12
 800ada4:	603b      	str	r3, [r7, #0]
 800ada6:	4638      	mov	r0, r7
 800ada8:	f000 f80e 	bl	800adc8 <__malloc_unlock>
 800adac:	e797      	b.n	800acde <_malloc_r+0x22>
 800adae:	6025      	str	r5, [r4, #0]
 800adb0:	e7dc      	b.n	800ad6c <_malloc_r+0xb0>
 800adb2:	605b      	str	r3, [r3, #4]
 800adb4:	deff      	udf	#255	; 0xff
 800adb6:	bf00      	nop
 800adb8:	200057e4 	.word	0x200057e4

0800adbc <__malloc_lock>:
 800adbc:	4801      	ldr	r0, [pc, #4]	; (800adc4 <__malloc_lock+0x8>)
 800adbe:	f7ff b876 	b.w	8009eae <__retarget_lock_acquire_recursive>
 800adc2:	bf00      	nop
 800adc4:	200057e0 	.word	0x200057e0

0800adc8 <__malloc_unlock>:
 800adc8:	4801      	ldr	r0, [pc, #4]	; (800add0 <__malloc_unlock+0x8>)
 800adca:	f7ff b871 	b.w	8009eb0 <__retarget_lock_release_recursive>
 800adce:	bf00      	nop
 800add0:	200057e0 	.word	0x200057e0

0800add4 <_Balloc>:
 800add4:	b570      	push	{r4, r5, r6, lr}
 800add6:	69c6      	ldr	r6, [r0, #28]
 800add8:	4604      	mov	r4, r0
 800adda:	460d      	mov	r5, r1
 800addc:	b976      	cbnz	r6, 800adfc <_Balloc+0x28>
 800adde:	2010      	movs	r0, #16
 800ade0:	f7ff ff44 	bl	800ac6c <malloc>
 800ade4:	4602      	mov	r2, r0
 800ade6:	61e0      	str	r0, [r4, #28]
 800ade8:	b920      	cbnz	r0, 800adf4 <_Balloc+0x20>
 800adea:	4b18      	ldr	r3, [pc, #96]	; (800ae4c <_Balloc+0x78>)
 800adec:	4818      	ldr	r0, [pc, #96]	; (800ae50 <_Balloc+0x7c>)
 800adee:	216b      	movs	r1, #107	; 0x6b
 800adf0:	f001 fe02 	bl	800c9f8 <__assert_func>
 800adf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adf8:	6006      	str	r6, [r0, #0]
 800adfa:	60c6      	str	r6, [r0, #12]
 800adfc:	69e6      	ldr	r6, [r4, #28]
 800adfe:	68f3      	ldr	r3, [r6, #12]
 800ae00:	b183      	cbz	r3, 800ae24 <_Balloc+0x50>
 800ae02:	69e3      	ldr	r3, [r4, #28]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae0a:	b9b8      	cbnz	r0, 800ae3c <_Balloc+0x68>
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	fa01 f605 	lsl.w	r6, r1, r5
 800ae12:	1d72      	adds	r2, r6, #5
 800ae14:	0092      	lsls	r2, r2, #2
 800ae16:	4620      	mov	r0, r4
 800ae18:	f001 fe0c 	bl	800ca34 <_calloc_r>
 800ae1c:	b160      	cbz	r0, 800ae38 <_Balloc+0x64>
 800ae1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae22:	e00e      	b.n	800ae42 <_Balloc+0x6e>
 800ae24:	2221      	movs	r2, #33	; 0x21
 800ae26:	2104      	movs	r1, #4
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f001 fe03 	bl	800ca34 <_calloc_r>
 800ae2e:	69e3      	ldr	r3, [r4, #28]
 800ae30:	60f0      	str	r0, [r6, #12]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1e4      	bne.n	800ae02 <_Balloc+0x2e>
 800ae38:	2000      	movs	r0, #0
 800ae3a:	bd70      	pop	{r4, r5, r6, pc}
 800ae3c:	6802      	ldr	r2, [r0, #0]
 800ae3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae42:	2300      	movs	r3, #0
 800ae44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae48:	e7f7      	b.n	800ae3a <_Balloc+0x66>
 800ae4a:	bf00      	nop
 800ae4c:	0800d8ae 	.word	0x0800d8ae
 800ae50:	0800d92e 	.word	0x0800d92e

0800ae54 <_Bfree>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	69c6      	ldr	r6, [r0, #28]
 800ae58:	4605      	mov	r5, r0
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	b976      	cbnz	r6, 800ae7c <_Bfree+0x28>
 800ae5e:	2010      	movs	r0, #16
 800ae60:	f7ff ff04 	bl	800ac6c <malloc>
 800ae64:	4602      	mov	r2, r0
 800ae66:	61e8      	str	r0, [r5, #28]
 800ae68:	b920      	cbnz	r0, 800ae74 <_Bfree+0x20>
 800ae6a:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <_Bfree+0x3c>)
 800ae6c:	4809      	ldr	r0, [pc, #36]	; (800ae94 <_Bfree+0x40>)
 800ae6e:	218f      	movs	r1, #143	; 0x8f
 800ae70:	f001 fdc2 	bl	800c9f8 <__assert_func>
 800ae74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae78:	6006      	str	r6, [r0, #0]
 800ae7a:	60c6      	str	r6, [r0, #12]
 800ae7c:	b13c      	cbz	r4, 800ae8e <_Bfree+0x3a>
 800ae7e:	69eb      	ldr	r3, [r5, #28]
 800ae80:	6862      	ldr	r2, [r4, #4]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae88:	6021      	str	r1, [r4, #0]
 800ae8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	0800d8ae 	.word	0x0800d8ae
 800ae94:	0800d92e 	.word	0x0800d92e

0800ae98 <__multadd>:
 800ae98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9c:	690d      	ldr	r5, [r1, #16]
 800ae9e:	4607      	mov	r7, r0
 800aea0:	460c      	mov	r4, r1
 800aea2:	461e      	mov	r6, r3
 800aea4:	f101 0c14 	add.w	ip, r1, #20
 800aea8:	2000      	movs	r0, #0
 800aeaa:	f8dc 3000 	ldr.w	r3, [ip]
 800aeae:	b299      	uxth	r1, r3
 800aeb0:	fb02 6101 	mla	r1, r2, r1, r6
 800aeb4:	0c1e      	lsrs	r6, r3, #16
 800aeb6:	0c0b      	lsrs	r3, r1, #16
 800aeb8:	fb02 3306 	mla	r3, r2, r6, r3
 800aebc:	b289      	uxth	r1, r1
 800aebe:	3001      	adds	r0, #1
 800aec0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aec4:	4285      	cmp	r5, r0
 800aec6:	f84c 1b04 	str.w	r1, [ip], #4
 800aeca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aece:	dcec      	bgt.n	800aeaa <__multadd+0x12>
 800aed0:	b30e      	cbz	r6, 800af16 <__multadd+0x7e>
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	42ab      	cmp	r3, r5
 800aed6:	dc19      	bgt.n	800af0c <__multadd+0x74>
 800aed8:	6861      	ldr	r1, [r4, #4]
 800aeda:	4638      	mov	r0, r7
 800aedc:	3101      	adds	r1, #1
 800aede:	f7ff ff79 	bl	800add4 <_Balloc>
 800aee2:	4680      	mov	r8, r0
 800aee4:	b928      	cbnz	r0, 800aef2 <__multadd+0x5a>
 800aee6:	4602      	mov	r2, r0
 800aee8:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <__multadd+0x84>)
 800aeea:	480d      	ldr	r0, [pc, #52]	; (800af20 <__multadd+0x88>)
 800aeec:	21ba      	movs	r1, #186	; 0xba
 800aeee:	f001 fd83 	bl	800c9f8 <__assert_func>
 800aef2:	6922      	ldr	r2, [r4, #16]
 800aef4:	3202      	adds	r2, #2
 800aef6:	f104 010c 	add.w	r1, r4, #12
 800aefa:	0092      	lsls	r2, r2, #2
 800aefc:	300c      	adds	r0, #12
 800aefe:	f7fe ffd8 	bl	8009eb2 <memcpy>
 800af02:	4621      	mov	r1, r4
 800af04:	4638      	mov	r0, r7
 800af06:	f7ff ffa5 	bl	800ae54 <_Bfree>
 800af0a:	4644      	mov	r4, r8
 800af0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af10:	3501      	adds	r5, #1
 800af12:	615e      	str	r6, [r3, #20]
 800af14:	6125      	str	r5, [r4, #16]
 800af16:	4620      	mov	r0, r4
 800af18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af1c:	0800d91d 	.word	0x0800d91d
 800af20:	0800d92e 	.word	0x0800d92e

0800af24 <__s2b>:
 800af24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af28:	460c      	mov	r4, r1
 800af2a:	4615      	mov	r5, r2
 800af2c:	461f      	mov	r7, r3
 800af2e:	2209      	movs	r2, #9
 800af30:	3308      	adds	r3, #8
 800af32:	4606      	mov	r6, r0
 800af34:	fb93 f3f2 	sdiv	r3, r3, r2
 800af38:	2100      	movs	r1, #0
 800af3a:	2201      	movs	r2, #1
 800af3c:	429a      	cmp	r2, r3
 800af3e:	db09      	blt.n	800af54 <__s2b+0x30>
 800af40:	4630      	mov	r0, r6
 800af42:	f7ff ff47 	bl	800add4 <_Balloc>
 800af46:	b940      	cbnz	r0, 800af5a <__s2b+0x36>
 800af48:	4602      	mov	r2, r0
 800af4a:	4b19      	ldr	r3, [pc, #100]	; (800afb0 <__s2b+0x8c>)
 800af4c:	4819      	ldr	r0, [pc, #100]	; (800afb4 <__s2b+0x90>)
 800af4e:	21d3      	movs	r1, #211	; 0xd3
 800af50:	f001 fd52 	bl	800c9f8 <__assert_func>
 800af54:	0052      	lsls	r2, r2, #1
 800af56:	3101      	adds	r1, #1
 800af58:	e7f0      	b.n	800af3c <__s2b+0x18>
 800af5a:	9b08      	ldr	r3, [sp, #32]
 800af5c:	6143      	str	r3, [r0, #20]
 800af5e:	2d09      	cmp	r5, #9
 800af60:	f04f 0301 	mov.w	r3, #1
 800af64:	6103      	str	r3, [r0, #16]
 800af66:	dd16      	ble.n	800af96 <__s2b+0x72>
 800af68:	f104 0909 	add.w	r9, r4, #9
 800af6c:	46c8      	mov	r8, r9
 800af6e:	442c      	add	r4, r5
 800af70:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af74:	4601      	mov	r1, r0
 800af76:	3b30      	subs	r3, #48	; 0x30
 800af78:	220a      	movs	r2, #10
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7ff ff8c 	bl	800ae98 <__multadd>
 800af80:	45a0      	cmp	r8, r4
 800af82:	d1f5      	bne.n	800af70 <__s2b+0x4c>
 800af84:	f1a5 0408 	sub.w	r4, r5, #8
 800af88:	444c      	add	r4, r9
 800af8a:	1b2d      	subs	r5, r5, r4
 800af8c:	1963      	adds	r3, r4, r5
 800af8e:	42bb      	cmp	r3, r7
 800af90:	db04      	blt.n	800af9c <__s2b+0x78>
 800af92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af96:	340a      	adds	r4, #10
 800af98:	2509      	movs	r5, #9
 800af9a:	e7f6      	b.n	800af8a <__s2b+0x66>
 800af9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afa0:	4601      	mov	r1, r0
 800afa2:	3b30      	subs	r3, #48	; 0x30
 800afa4:	220a      	movs	r2, #10
 800afa6:	4630      	mov	r0, r6
 800afa8:	f7ff ff76 	bl	800ae98 <__multadd>
 800afac:	e7ee      	b.n	800af8c <__s2b+0x68>
 800afae:	bf00      	nop
 800afb0:	0800d91d 	.word	0x0800d91d
 800afb4:	0800d92e 	.word	0x0800d92e

0800afb8 <__hi0bits>:
 800afb8:	0c03      	lsrs	r3, r0, #16
 800afba:	041b      	lsls	r3, r3, #16
 800afbc:	b9d3      	cbnz	r3, 800aff4 <__hi0bits+0x3c>
 800afbe:	0400      	lsls	r0, r0, #16
 800afc0:	2310      	movs	r3, #16
 800afc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800afc6:	bf04      	itt	eq
 800afc8:	0200      	lsleq	r0, r0, #8
 800afca:	3308      	addeq	r3, #8
 800afcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afd0:	bf04      	itt	eq
 800afd2:	0100      	lsleq	r0, r0, #4
 800afd4:	3304      	addeq	r3, #4
 800afd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afda:	bf04      	itt	eq
 800afdc:	0080      	lsleq	r0, r0, #2
 800afde:	3302      	addeq	r3, #2
 800afe0:	2800      	cmp	r0, #0
 800afe2:	db05      	blt.n	800aff0 <__hi0bits+0x38>
 800afe4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afe8:	f103 0301 	add.w	r3, r3, #1
 800afec:	bf08      	it	eq
 800afee:	2320      	moveq	r3, #32
 800aff0:	4618      	mov	r0, r3
 800aff2:	4770      	bx	lr
 800aff4:	2300      	movs	r3, #0
 800aff6:	e7e4      	b.n	800afc2 <__hi0bits+0xa>

0800aff8 <__lo0bits>:
 800aff8:	6803      	ldr	r3, [r0, #0]
 800affa:	f013 0207 	ands.w	r2, r3, #7
 800affe:	d00c      	beq.n	800b01a <__lo0bits+0x22>
 800b000:	07d9      	lsls	r1, r3, #31
 800b002:	d422      	bmi.n	800b04a <__lo0bits+0x52>
 800b004:	079a      	lsls	r2, r3, #30
 800b006:	bf49      	itett	mi
 800b008:	085b      	lsrmi	r3, r3, #1
 800b00a:	089b      	lsrpl	r3, r3, #2
 800b00c:	6003      	strmi	r3, [r0, #0]
 800b00e:	2201      	movmi	r2, #1
 800b010:	bf5c      	itt	pl
 800b012:	6003      	strpl	r3, [r0, #0]
 800b014:	2202      	movpl	r2, #2
 800b016:	4610      	mov	r0, r2
 800b018:	4770      	bx	lr
 800b01a:	b299      	uxth	r1, r3
 800b01c:	b909      	cbnz	r1, 800b022 <__lo0bits+0x2a>
 800b01e:	0c1b      	lsrs	r3, r3, #16
 800b020:	2210      	movs	r2, #16
 800b022:	b2d9      	uxtb	r1, r3
 800b024:	b909      	cbnz	r1, 800b02a <__lo0bits+0x32>
 800b026:	3208      	adds	r2, #8
 800b028:	0a1b      	lsrs	r3, r3, #8
 800b02a:	0719      	lsls	r1, r3, #28
 800b02c:	bf04      	itt	eq
 800b02e:	091b      	lsreq	r3, r3, #4
 800b030:	3204      	addeq	r2, #4
 800b032:	0799      	lsls	r1, r3, #30
 800b034:	bf04      	itt	eq
 800b036:	089b      	lsreq	r3, r3, #2
 800b038:	3202      	addeq	r2, #2
 800b03a:	07d9      	lsls	r1, r3, #31
 800b03c:	d403      	bmi.n	800b046 <__lo0bits+0x4e>
 800b03e:	085b      	lsrs	r3, r3, #1
 800b040:	f102 0201 	add.w	r2, r2, #1
 800b044:	d003      	beq.n	800b04e <__lo0bits+0x56>
 800b046:	6003      	str	r3, [r0, #0]
 800b048:	e7e5      	b.n	800b016 <__lo0bits+0x1e>
 800b04a:	2200      	movs	r2, #0
 800b04c:	e7e3      	b.n	800b016 <__lo0bits+0x1e>
 800b04e:	2220      	movs	r2, #32
 800b050:	e7e1      	b.n	800b016 <__lo0bits+0x1e>
	...

0800b054 <__i2b>:
 800b054:	b510      	push	{r4, lr}
 800b056:	460c      	mov	r4, r1
 800b058:	2101      	movs	r1, #1
 800b05a:	f7ff febb 	bl	800add4 <_Balloc>
 800b05e:	4602      	mov	r2, r0
 800b060:	b928      	cbnz	r0, 800b06e <__i2b+0x1a>
 800b062:	4b05      	ldr	r3, [pc, #20]	; (800b078 <__i2b+0x24>)
 800b064:	4805      	ldr	r0, [pc, #20]	; (800b07c <__i2b+0x28>)
 800b066:	f240 1145 	movw	r1, #325	; 0x145
 800b06a:	f001 fcc5 	bl	800c9f8 <__assert_func>
 800b06e:	2301      	movs	r3, #1
 800b070:	6144      	str	r4, [r0, #20]
 800b072:	6103      	str	r3, [r0, #16]
 800b074:	bd10      	pop	{r4, pc}
 800b076:	bf00      	nop
 800b078:	0800d91d 	.word	0x0800d91d
 800b07c:	0800d92e 	.word	0x0800d92e

0800b080 <__multiply>:
 800b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	4691      	mov	r9, r2
 800b086:	690a      	ldr	r2, [r1, #16]
 800b088:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	bfb8      	it	lt
 800b090:	460b      	movlt	r3, r1
 800b092:	460c      	mov	r4, r1
 800b094:	bfbc      	itt	lt
 800b096:	464c      	movlt	r4, r9
 800b098:	4699      	movlt	r9, r3
 800b09a:	6927      	ldr	r7, [r4, #16]
 800b09c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0a0:	68a3      	ldr	r3, [r4, #8]
 800b0a2:	6861      	ldr	r1, [r4, #4]
 800b0a4:	eb07 060a 	add.w	r6, r7, sl
 800b0a8:	42b3      	cmp	r3, r6
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	bfb8      	it	lt
 800b0ae:	3101      	addlt	r1, #1
 800b0b0:	f7ff fe90 	bl	800add4 <_Balloc>
 800b0b4:	b930      	cbnz	r0, 800b0c4 <__multiply+0x44>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	4b44      	ldr	r3, [pc, #272]	; (800b1cc <__multiply+0x14c>)
 800b0ba:	4845      	ldr	r0, [pc, #276]	; (800b1d0 <__multiply+0x150>)
 800b0bc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b0c0:	f001 fc9a 	bl	800c9f8 <__assert_func>
 800b0c4:	f100 0514 	add.w	r5, r0, #20
 800b0c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0cc:	462b      	mov	r3, r5
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	4543      	cmp	r3, r8
 800b0d2:	d321      	bcc.n	800b118 <__multiply+0x98>
 800b0d4:	f104 0314 	add.w	r3, r4, #20
 800b0d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0dc:	f109 0314 	add.w	r3, r9, #20
 800b0e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0e4:	9202      	str	r2, [sp, #8]
 800b0e6:	1b3a      	subs	r2, r7, r4
 800b0e8:	3a15      	subs	r2, #21
 800b0ea:	f022 0203 	bic.w	r2, r2, #3
 800b0ee:	3204      	adds	r2, #4
 800b0f0:	f104 0115 	add.w	r1, r4, #21
 800b0f4:	428f      	cmp	r7, r1
 800b0f6:	bf38      	it	cc
 800b0f8:	2204      	movcc	r2, #4
 800b0fa:	9201      	str	r2, [sp, #4]
 800b0fc:	9a02      	ldr	r2, [sp, #8]
 800b0fe:	9303      	str	r3, [sp, #12]
 800b100:	429a      	cmp	r2, r3
 800b102:	d80c      	bhi.n	800b11e <__multiply+0x9e>
 800b104:	2e00      	cmp	r6, #0
 800b106:	dd03      	ble.n	800b110 <__multiply+0x90>
 800b108:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d05b      	beq.n	800b1c8 <__multiply+0x148>
 800b110:	6106      	str	r6, [r0, #16]
 800b112:	b005      	add	sp, #20
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	f843 2b04 	str.w	r2, [r3], #4
 800b11c:	e7d8      	b.n	800b0d0 <__multiply+0x50>
 800b11e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b122:	f1ba 0f00 	cmp.w	sl, #0
 800b126:	d024      	beq.n	800b172 <__multiply+0xf2>
 800b128:	f104 0e14 	add.w	lr, r4, #20
 800b12c:	46a9      	mov	r9, r5
 800b12e:	f04f 0c00 	mov.w	ip, #0
 800b132:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b136:	f8d9 1000 	ldr.w	r1, [r9]
 800b13a:	fa1f fb82 	uxth.w	fp, r2
 800b13e:	b289      	uxth	r1, r1
 800b140:	fb0a 110b 	mla	r1, sl, fp, r1
 800b144:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b148:	f8d9 2000 	ldr.w	r2, [r9]
 800b14c:	4461      	add	r1, ip
 800b14e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b152:	fb0a c20b 	mla	r2, sl, fp, ip
 800b156:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b15a:	b289      	uxth	r1, r1
 800b15c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b160:	4577      	cmp	r7, lr
 800b162:	f849 1b04 	str.w	r1, [r9], #4
 800b166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b16a:	d8e2      	bhi.n	800b132 <__multiply+0xb2>
 800b16c:	9a01      	ldr	r2, [sp, #4]
 800b16e:	f845 c002 	str.w	ip, [r5, r2]
 800b172:	9a03      	ldr	r2, [sp, #12]
 800b174:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b178:	3304      	adds	r3, #4
 800b17a:	f1b9 0f00 	cmp.w	r9, #0
 800b17e:	d021      	beq.n	800b1c4 <__multiply+0x144>
 800b180:	6829      	ldr	r1, [r5, #0]
 800b182:	f104 0c14 	add.w	ip, r4, #20
 800b186:	46ae      	mov	lr, r5
 800b188:	f04f 0a00 	mov.w	sl, #0
 800b18c:	f8bc b000 	ldrh.w	fp, [ip]
 800b190:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b194:	fb09 220b 	mla	r2, r9, fp, r2
 800b198:	4452      	add	r2, sl
 800b19a:	b289      	uxth	r1, r1
 800b19c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1a0:	f84e 1b04 	str.w	r1, [lr], #4
 800b1a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b1a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1ac:	f8be 1000 	ldrh.w	r1, [lr]
 800b1b0:	fb09 110a 	mla	r1, r9, sl, r1
 800b1b4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b1b8:	4567      	cmp	r7, ip
 800b1ba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1be:	d8e5      	bhi.n	800b18c <__multiply+0x10c>
 800b1c0:	9a01      	ldr	r2, [sp, #4]
 800b1c2:	50a9      	str	r1, [r5, r2]
 800b1c4:	3504      	adds	r5, #4
 800b1c6:	e799      	b.n	800b0fc <__multiply+0x7c>
 800b1c8:	3e01      	subs	r6, #1
 800b1ca:	e79b      	b.n	800b104 <__multiply+0x84>
 800b1cc:	0800d91d 	.word	0x0800d91d
 800b1d0:	0800d92e 	.word	0x0800d92e

0800b1d4 <__pow5mult>:
 800b1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1d8:	4615      	mov	r5, r2
 800b1da:	f012 0203 	ands.w	r2, r2, #3
 800b1de:	4606      	mov	r6, r0
 800b1e0:	460f      	mov	r7, r1
 800b1e2:	d007      	beq.n	800b1f4 <__pow5mult+0x20>
 800b1e4:	4c25      	ldr	r4, [pc, #148]	; (800b27c <__pow5mult+0xa8>)
 800b1e6:	3a01      	subs	r2, #1
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1ee:	f7ff fe53 	bl	800ae98 <__multadd>
 800b1f2:	4607      	mov	r7, r0
 800b1f4:	10ad      	asrs	r5, r5, #2
 800b1f6:	d03d      	beq.n	800b274 <__pow5mult+0xa0>
 800b1f8:	69f4      	ldr	r4, [r6, #28]
 800b1fa:	b97c      	cbnz	r4, 800b21c <__pow5mult+0x48>
 800b1fc:	2010      	movs	r0, #16
 800b1fe:	f7ff fd35 	bl	800ac6c <malloc>
 800b202:	4602      	mov	r2, r0
 800b204:	61f0      	str	r0, [r6, #28]
 800b206:	b928      	cbnz	r0, 800b214 <__pow5mult+0x40>
 800b208:	4b1d      	ldr	r3, [pc, #116]	; (800b280 <__pow5mult+0xac>)
 800b20a:	481e      	ldr	r0, [pc, #120]	; (800b284 <__pow5mult+0xb0>)
 800b20c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b210:	f001 fbf2 	bl	800c9f8 <__assert_func>
 800b214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b218:	6004      	str	r4, [r0, #0]
 800b21a:	60c4      	str	r4, [r0, #12]
 800b21c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b224:	b94c      	cbnz	r4, 800b23a <__pow5mult+0x66>
 800b226:	f240 2171 	movw	r1, #625	; 0x271
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7ff ff12 	bl	800b054 <__i2b>
 800b230:	2300      	movs	r3, #0
 800b232:	f8c8 0008 	str.w	r0, [r8, #8]
 800b236:	4604      	mov	r4, r0
 800b238:	6003      	str	r3, [r0, #0]
 800b23a:	f04f 0900 	mov.w	r9, #0
 800b23e:	07eb      	lsls	r3, r5, #31
 800b240:	d50a      	bpl.n	800b258 <__pow5mult+0x84>
 800b242:	4639      	mov	r1, r7
 800b244:	4622      	mov	r2, r4
 800b246:	4630      	mov	r0, r6
 800b248:	f7ff ff1a 	bl	800b080 <__multiply>
 800b24c:	4639      	mov	r1, r7
 800b24e:	4680      	mov	r8, r0
 800b250:	4630      	mov	r0, r6
 800b252:	f7ff fdff 	bl	800ae54 <_Bfree>
 800b256:	4647      	mov	r7, r8
 800b258:	106d      	asrs	r5, r5, #1
 800b25a:	d00b      	beq.n	800b274 <__pow5mult+0xa0>
 800b25c:	6820      	ldr	r0, [r4, #0]
 800b25e:	b938      	cbnz	r0, 800b270 <__pow5mult+0x9c>
 800b260:	4622      	mov	r2, r4
 800b262:	4621      	mov	r1, r4
 800b264:	4630      	mov	r0, r6
 800b266:	f7ff ff0b 	bl	800b080 <__multiply>
 800b26a:	6020      	str	r0, [r4, #0]
 800b26c:	f8c0 9000 	str.w	r9, [r0]
 800b270:	4604      	mov	r4, r0
 800b272:	e7e4      	b.n	800b23e <__pow5mult+0x6a>
 800b274:	4638      	mov	r0, r7
 800b276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27a:	bf00      	nop
 800b27c:	0800da78 	.word	0x0800da78
 800b280:	0800d8ae 	.word	0x0800d8ae
 800b284:	0800d92e 	.word	0x0800d92e

0800b288 <__lshift>:
 800b288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b28c:	460c      	mov	r4, r1
 800b28e:	6849      	ldr	r1, [r1, #4]
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b296:	68a3      	ldr	r3, [r4, #8]
 800b298:	4607      	mov	r7, r0
 800b29a:	4691      	mov	r9, r2
 800b29c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2a0:	f108 0601 	add.w	r6, r8, #1
 800b2a4:	42b3      	cmp	r3, r6
 800b2a6:	db0b      	blt.n	800b2c0 <__lshift+0x38>
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	f7ff fd93 	bl	800add4 <_Balloc>
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	b948      	cbnz	r0, 800b2c6 <__lshift+0x3e>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	4b28      	ldr	r3, [pc, #160]	; (800b358 <__lshift+0xd0>)
 800b2b6:	4829      	ldr	r0, [pc, #164]	; (800b35c <__lshift+0xd4>)
 800b2b8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b2bc:	f001 fb9c 	bl	800c9f8 <__assert_func>
 800b2c0:	3101      	adds	r1, #1
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	e7ee      	b.n	800b2a4 <__lshift+0x1c>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	f100 0114 	add.w	r1, r0, #20
 800b2cc:	f100 0210 	add.w	r2, r0, #16
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	4553      	cmp	r3, sl
 800b2d4:	db33      	blt.n	800b33e <__lshift+0xb6>
 800b2d6:	6920      	ldr	r0, [r4, #16]
 800b2d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2dc:	f104 0314 	add.w	r3, r4, #20
 800b2e0:	f019 091f 	ands.w	r9, r9, #31
 800b2e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2ec:	d02b      	beq.n	800b346 <__lshift+0xbe>
 800b2ee:	f1c9 0e20 	rsb	lr, r9, #32
 800b2f2:	468a      	mov	sl, r1
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	6818      	ldr	r0, [r3, #0]
 800b2f8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2fc:	4310      	orrs	r0, r2
 800b2fe:	f84a 0b04 	str.w	r0, [sl], #4
 800b302:	f853 2b04 	ldr.w	r2, [r3], #4
 800b306:	459c      	cmp	ip, r3
 800b308:	fa22 f20e 	lsr.w	r2, r2, lr
 800b30c:	d8f3      	bhi.n	800b2f6 <__lshift+0x6e>
 800b30e:	ebac 0304 	sub.w	r3, ip, r4
 800b312:	3b15      	subs	r3, #21
 800b314:	f023 0303 	bic.w	r3, r3, #3
 800b318:	3304      	adds	r3, #4
 800b31a:	f104 0015 	add.w	r0, r4, #21
 800b31e:	4584      	cmp	ip, r0
 800b320:	bf38      	it	cc
 800b322:	2304      	movcc	r3, #4
 800b324:	50ca      	str	r2, [r1, r3]
 800b326:	b10a      	cbz	r2, 800b32c <__lshift+0xa4>
 800b328:	f108 0602 	add.w	r6, r8, #2
 800b32c:	3e01      	subs	r6, #1
 800b32e:	4638      	mov	r0, r7
 800b330:	612e      	str	r6, [r5, #16]
 800b332:	4621      	mov	r1, r4
 800b334:	f7ff fd8e 	bl	800ae54 <_Bfree>
 800b338:	4628      	mov	r0, r5
 800b33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b342:	3301      	adds	r3, #1
 800b344:	e7c5      	b.n	800b2d2 <__lshift+0x4a>
 800b346:	3904      	subs	r1, #4
 800b348:	f853 2b04 	ldr.w	r2, [r3], #4
 800b34c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b350:	459c      	cmp	ip, r3
 800b352:	d8f9      	bhi.n	800b348 <__lshift+0xc0>
 800b354:	e7ea      	b.n	800b32c <__lshift+0xa4>
 800b356:	bf00      	nop
 800b358:	0800d91d 	.word	0x0800d91d
 800b35c:	0800d92e 	.word	0x0800d92e

0800b360 <__mcmp>:
 800b360:	b530      	push	{r4, r5, lr}
 800b362:	6902      	ldr	r2, [r0, #16]
 800b364:	690c      	ldr	r4, [r1, #16]
 800b366:	1b12      	subs	r2, r2, r4
 800b368:	d10e      	bne.n	800b388 <__mcmp+0x28>
 800b36a:	f100 0314 	add.w	r3, r0, #20
 800b36e:	3114      	adds	r1, #20
 800b370:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b374:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b378:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b37c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b380:	42a5      	cmp	r5, r4
 800b382:	d003      	beq.n	800b38c <__mcmp+0x2c>
 800b384:	d305      	bcc.n	800b392 <__mcmp+0x32>
 800b386:	2201      	movs	r2, #1
 800b388:	4610      	mov	r0, r2
 800b38a:	bd30      	pop	{r4, r5, pc}
 800b38c:	4283      	cmp	r3, r0
 800b38e:	d3f3      	bcc.n	800b378 <__mcmp+0x18>
 800b390:	e7fa      	b.n	800b388 <__mcmp+0x28>
 800b392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b396:	e7f7      	b.n	800b388 <__mcmp+0x28>

0800b398 <__mdiff>:
 800b398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	460c      	mov	r4, r1
 800b39e:	4606      	mov	r6, r0
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	4690      	mov	r8, r2
 800b3a6:	f7ff ffdb 	bl	800b360 <__mcmp>
 800b3aa:	1e05      	subs	r5, r0, #0
 800b3ac:	d110      	bne.n	800b3d0 <__mdiff+0x38>
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f7ff fd0f 	bl	800add4 <_Balloc>
 800b3b6:	b930      	cbnz	r0, 800b3c6 <__mdiff+0x2e>
 800b3b8:	4b3a      	ldr	r3, [pc, #232]	; (800b4a4 <__mdiff+0x10c>)
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	f240 2137 	movw	r1, #567	; 0x237
 800b3c0:	4839      	ldr	r0, [pc, #228]	; (800b4a8 <__mdiff+0x110>)
 800b3c2:	f001 fb19 	bl	800c9f8 <__assert_func>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d0:	bfa4      	itt	ge
 800b3d2:	4643      	movge	r3, r8
 800b3d4:	46a0      	movge	r8, r4
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3dc:	bfa6      	itte	ge
 800b3de:	461c      	movge	r4, r3
 800b3e0:	2500      	movge	r5, #0
 800b3e2:	2501      	movlt	r5, #1
 800b3e4:	f7ff fcf6 	bl	800add4 <_Balloc>
 800b3e8:	b920      	cbnz	r0, 800b3f4 <__mdiff+0x5c>
 800b3ea:	4b2e      	ldr	r3, [pc, #184]	; (800b4a4 <__mdiff+0x10c>)
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	f240 2145 	movw	r1, #581	; 0x245
 800b3f2:	e7e5      	b.n	800b3c0 <__mdiff+0x28>
 800b3f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3f8:	6926      	ldr	r6, [r4, #16]
 800b3fa:	60c5      	str	r5, [r0, #12]
 800b3fc:	f104 0914 	add.w	r9, r4, #20
 800b400:	f108 0514 	add.w	r5, r8, #20
 800b404:	f100 0e14 	add.w	lr, r0, #20
 800b408:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b40c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b410:	f108 0210 	add.w	r2, r8, #16
 800b414:	46f2      	mov	sl, lr
 800b416:	2100      	movs	r1, #0
 800b418:	f859 3b04 	ldr.w	r3, [r9], #4
 800b41c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b420:	fa11 f88b 	uxtah	r8, r1, fp
 800b424:	b299      	uxth	r1, r3
 800b426:	0c1b      	lsrs	r3, r3, #16
 800b428:	eba8 0801 	sub.w	r8, r8, r1
 800b42c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b430:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b434:	fa1f f888 	uxth.w	r8, r8
 800b438:	1419      	asrs	r1, r3, #16
 800b43a:	454e      	cmp	r6, r9
 800b43c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b440:	f84a 3b04 	str.w	r3, [sl], #4
 800b444:	d8e8      	bhi.n	800b418 <__mdiff+0x80>
 800b446:	1b33      	subs	r3, r6, r4
 800b448:	3b15      	subs	r3, #21
 800b44a:	f023 0303 	bic.w	r3, r3, #3
 800b44e:	3304      	adds	r3, #4
 800b450:	3415      	adds	r4, #21
 800b452:	42a6      	cmp	r6, r4
 800b454:	bf38      	it	cc
 800b456:	2304      	movcc	r3, #4
 800b458:	441d      	add	r5, r3
 800b45a:	4473      	add	r3, lr
 800b45c:	469e      	mov	lr, r3
 800b45e:	462e      	mov	r6, r5
 800b460:	4566      	cmp	r6, ip
 800b462:	d30e      	bcc.n	800b482 <__mdiff+0xea>
 800b464:	f10c 0203 	add.w	r2, ip, #3
 800b468:	1b52      	subs	r2, r2, r5
 800b46a:	f022 0203 	bic.w	r2, r2, #3
 800b46e:	3d03      	subs	r5, #3
 800b470:	45ac      	cmp	ip, r5
 800b472:	bf38      	it	cc
 800b474:	2200      	movcc	r2, #0
 800b476:	4413      	add	r3, r2
 800b478:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b47c:	b17a      	cbz	r2, 800b49e <__mdiff+0x106>
 800b47e:	6107      	str	r7, [r0, #16]
 800b480:	e7a4      	b.n	800b3cc <__mdiff+0x34>
 800b482:	f856 8b04 	ldr.w	r8, [r6], #4
 800b486:	fa11 f288 	uxtah	r2, r1, r8
 800b48a:	1414      	asrs	r4, r2, #16
 800b48c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b490:	b292      	uxth	r2, r2
 800b492:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b496:	f84e 2b04 	str.w	r2, [lr], #4
 800b49a:	1421      	asrs	r1, r4, #16
 800b49c:	e7e0      	b.n	800b460 <__mdiff+0xc8>
 800b49e:	3f01      	subs	r7, #1
 800b4a0:	e7ea      	b.n	800b478 <__mdiff+0xe0>
 800b4a2:	bf00      	nop
 800b4a4:	0800d91d 	.word	0x0800d91d
 800b4a8:	0800d92e 	.word	0x0800d92e

0800b4ac <__ulp>:
 800b4ac:	b082      	sub	sp, #8
 800b4ae:	ed8d 0b00 	vstr	d0, [sp]
 800b4b2:	9a01      	ldr	r2, [sp, #4]
 800b4b4:	4b0f      	ldr	r3, [pc, #60]	; (800b4f4 <__ulp+0x48>)
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dc08      	bgt.n	800b4d2 <__ulp+0x26>
 800b4c0:	425b      	negs	r3, r3
 800b4c2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b4c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4ca:	da04      	bge.n	800b4d6 <__ulp+0x2a>
 800b4cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b4d0:	4113      	asrs	r3, r2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	e008      	b.n	800b4e8 <__ulp+0x3c>
 800b4d6:	f1a2 0314 	sub.w	r3, r2, #20
 800b4da:	2b1e      	cmp	r3, #30
 800b4dc:	bfda      	itte	le
 800b4de:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b4e2:	40da      	lsrle	r2, r3
 800b4e4:	2201      	movgt	r2, #1
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	ec41 0b10 	vmov	d0, r0, r1
 800b4f0:	b002      	add	sp, #8
 800b4f2:	4770      	bx	lr
 800b4f4:	7ff00000 	.word	0x7ff00000

0800b4f8 <__b2d>:
 800b4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fc:	6906      	ldr	r6, [r0, #16]
 800b4fe:	f100 0814 	add.w	r8, r0, #20
 800b502:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b506:	1f37      	subs	r7, r6, #4
 800b508:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b50c:	4610      	mov	r0, r2
 800b50e:	f7ff fd53 	bl	800afb8 <__hi0bits>
 800b512:	f1c0 0320 	rsb	r3, r0, #32
 800b516:	280a      	cmp	r0, #10
 800b518:	600b      	str	r3, [r1, #0]
 800b51a:	491b      	ldr	r1, [pc, #108]	; (800b588 <__b2d+0x90>)
 800b51c:	dc15      	bgt.n	800b54a <__b2d+0x52>
 800b51e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b522:	fa22 f30c 	lsr.w	r3, r2, ip
 800b526:	45b8      	cmp	r8, r7
 800b528:	ea43 0501 	orr.w	r5, r3, r1
 800b52c:	bf34      	ite	cc
 800b52e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b532:	2300      	movcs	r3, #0
 800b534:	3015      	adds	r0, #21
 800b536:	fa02 f000 	lsl.w	r0, r2, r0
 800b53a:	fa23 f30c 	lsr.w	r3, r3, ip
 800b53e:	4303      	orrs	r3, r0
 800b540:	461c      	mov	r4, r3
 800b542:	ec45 4b10 	vmov	d0, r4, r5
 800b546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b54a:	45b8      	cmp	r8, r7
 800b54c:	bf3a      	itte	cc
 800b54e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b552:	f1a6 0708 	subcc.w	r7, r6, #8
 800b556:	2300      	movcs	r3, #0
 800b558:	380b      	subs	r0, #11
 800b55a:	d012      	beq.n	800b582 <__b2d+0x8a>
 800b55c:	f1c0 0120 	rsb	r1, r0, #32
 800b560:	fa23 f401 	lsr.w	r4, r3, r1
 800b564:	4082      	lsls	r2, r0
 800b566:	4322      	orrs	r2, r4
 800b568:	4547      	cmp	r7, r8
 800b56a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b56e:	bf8c      	ite	hi
 800b570:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b574:	2200      	movls	r2, #0
 800b576:	4083      	lsls	r3, r0
 800b578:	40ca      	lsrs	r2, r1
 800b57a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b57e:	4313      	orrs	r3, r2
 800b580:	e7de      	b.n	800b540 <__b2d+0x48>
 800b582:	ea42 0501 	orr.w	r5, r2, r1
 800b586:	e7db      	b.n	800b540 <__b2d+0x48>
 800b588:	3ff00000 	.word	0x3ff00000

0800b58c <__d2b>:
 800b58c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b590:	460f      	mov	r7, r1
 800b592:	2101      	movs	r1, #1
 800b594:	ec59 8b10 	vmov	r8, r9, d0
 800b598:	4616      	mov	r6, r2
 800b59a:	f7ff fc1b 	bl	800add4 <_Balloc>
 800b59e:	4604      	mov	r4, r0
 800b5a0:	b930      	cbnz	r0, 800b5b0 <__d2b+0x24>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	4b24      	ldr	r3, [pc, #144]	; (800b638 <__d2b+0xac>)
 800b5a6:	4825      	ldr	r0, [pc, #148]	; (800b63c <__d2b+0xb0>)
 800b5a8:	f240 310f 	movw	r1, #783	; 0x30f
 800b5ac:	f001 fa24 	bl	800c9f8 <__assert_func>
 800b5b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5b8:	bb2d      	cbnz	r5, 800b606 <__d2b+0x7a>
 800b5ba:	9301      	str	r3, [sp, #4]
 800b5bc:	f1b8 0300 	subs.w	r3, r8, #0
 800b5c0:	d026      	beq.n	800b610 <__d2b+0x84>
 800b5c2:	4668      	mov	r0, sp
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	f7ff fd17 	bl	800aff8 <__lo0bits>
 800b5ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5ce:	b1e8      	cbz	r0, 800b60c <__d2b+0x80>
 800b5d0:	f1c0 0320 	rsb	r3, r0, #32
 800b5d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5d8:	430b      	orrs	r3, r1
 800b5da:	40c2      	lsrs	r2, r0
 800b5dc:	6163      	str	r3, [r4, #20]
 800b5de:	9201      	str	r2, [sp, #4]
 800b5e0:	9b01      	ldr	r3, [sp, #4]
 800b5e2:	61a3      	str	r3, [r4, #24]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	bf14      	ite	ne
 800b5e8:	2202      	movne	r2, #2
 800b5ea:	2201      	moveq	r2, #1
 800b5ec:	6122      	str	r2, [r4, #16]
 800b5ee:	b1bd      	cbz	r5, 800b620 <__d2b+0x94>
 800b5f0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5f4:	4405      	add	r5, r0
 800b5f6:	603d      	str	r5, [r7, #0]
 800b5f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5fc:	6030      	str	r0, [r6, #0]
 800b5fe:	4620      	mov	r0, r4
 800b600:	b003      	add	sp, #12
 800b602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b60a:	e7d6      	b.n	800b5ba <__d2b+0x2e>
 800b60c:	6161      	str	r1, [r4, #20]
 800b60e:	e7e7      	b.n	800b5e0 <__d2b+0x54>
 800b610:	a801      	add	r0, sp, #4
 800b612:	f7ff fcf1 	bl	800aff8 <__lo0bits>
 800b616:	9b01      	ldr	r3, [sp, #4]
 800b618:	6163      	str	r3, [r4, #20]
 800b61a:	3020      	adds	r0, #32
 800b61c:	2201      	movs	r2, #1
 800b61e:	e7e5      	b.n	800b5ec <__d2b+0x60>
 800b620:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b624:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b628:	6038      	str	r0, [r7, #0]
 800b62a:	6918      	ldr	r0, [r3, #16]
 800b62c:	f7ff fcc4 	bl	800afb8 <__hi0bits>
 800b630:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b634:	e7e2      	b.n	800b5fc <__d2b+0x70>
 800b636:	bf00      	nop
 800b638:	0800d91d 	.word	0x0800d91d
 800b63c:	0800d92e 	.word	0x0800d92e

0800b640 <__ratio>:
 800b640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b644:	4688      	mov	r8, r1
 800b646:	4669      	mov	r1, sp
 800b648:	4681      	mov	r9, r0
 800b64a:	f7ff ff55 	bl	800b4f8 <__b2d>
 800b64e:	a901      	add	r1, sp, #4
 800b650:	4640      	mov	r0, r8
 800b652:	ec55 4b10 	vmov	r4, r5, d0
 800b656:	f7ff ff4f 	bl	800b4f8 <__b2d>
 800b65a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b65e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b662:	eba3 0c02 	sub.w	ip, r3, r2
 800b666:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b66a:	1a9b      	subs	r3, r3, r2
 800b66c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b670:	ec51 0b10 	vmov	r0, r1, d0
 800b674:	2b00      	cmp	r3, #0
 800b676:	bfd6      	itet	le
 800b678:	460a      	movle	r2, r1
 800b67a:	462a      	movgt	r2, r5
 800b67c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b680:	468b      	mov	fp, r1
 800b682:	462f      	mov	r7, r5
 800b684:	bfd4      	ite	le
 800b686:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b68a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b68e:	4620      	mov	r0, r4
 800b690:	ee10 2a10 	vmov	r2, s0
 800b694:	465b      	mov	r3, fp
 800b696:	4639      	mov	r1, r7
 800b698:	f7f5 f8e0 	bl	800085c <__aeabi_ddiv>
 800b69c:	ec41 0b10 	vmov	d0, r0, r1
 800b6a0:	b003      	add	sp, #12
 800b6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6a6 <__copybits>:
 800b6a6:	3901      	subs	r1, #1
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	1149      	asrs	r1, r1, #5
 800b6ac:	6914      	ldr	r4, [r2, #16]
 800b6ae:	3101      	adds	r1, #1
 800b6b0:	f102 0314 	add.w	r3, r2, #20
 800b6b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6bc:	1f05      	subs	r5, r0, #4
 800b6be:	42a3      	cmp	r3, r4
 800b6c0:	d30c      	bcc.n	800b6dc <__copybits+0x36>
 800b6c2:	1aa3      	subs	r3, r4, r2
 800b6c4:	3b11      	subs	r3, #17
 800b6c6:	f023 0303 	bic.w	r3, r3, #3
 800b6ca:	3211      	adds	r2, #17
 800b6cc:	42a2      	cmp	r2, r4
 800b6ce:	bf88      	it	hi
 800b6d0:	2300      	movhi	r3, #0
 800b6d2:	4418      	add	r0, r3
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4288      	cmp	r0, r1
 800b6d8:	d305      	bcc.n	800b6e6 <__copybits+0x40>
 800b6da:	bd70      	pop	{r4, r5, r6, pc}
 800b6dc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6e0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6e4:	e7eb      	b.n	800b6be <__copybits+0x18>
 800b6e6:	f840 3b04 	str.w	r3, [r0], #4
 800b6ea:	e7f4      	b.n	800b6d6 <__copybits+0x30>

0800b6ec <__any_on>:
 800b6ec:	f100 0214 	add.w	r2, r0, #20
 800b6f0:	6900      	ldr	r0, [r0, #16]
 800b6f2:	114b      	asrs	r3, r1, #5
 800b6f4:	4298      	cmp	r0, r3
 800b6f6:	b510      	push	{r4, lr}
 800b6f8:	db11      	blt.n	800b71e <__any_on+0x32>
 800b6fa:	dd0a      	ble.n	800b712 <__any_on+0x26>
 800b6fc:	f011 011f 	ands.w	r1, r1, #31
 800b700:	d007      	beq.n	800b712 <__any_on+0x26>
 800b702:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b706:	fa24 f001 	lsr.w	r0, r4, r1
 800b70a:	fa00 f101 	lsl.w	r1, r0, r1
 800b70e:	428c      	cmp	r4, r1
 800b710:	d10b      	bne.n	800b72a <__any_on+0x3e>
 800b712:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b716:	4293      	cmp	r3, r2
 800b718:	d803      	bhi.n	800b722 <__any_on+0x36>
 800b71a:	2000      	movs	r0, #0
 800b71c:	bd10      	pop	{r4, pc}
 800b71e:	4603      	mov	r3, r0
 800b720:	e7f7      	b.n	800b712 <__any_on+0x26>
 800b722:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b726:	2900      	cmp	r1, #0
 800b728:	d0f5      	beq.n	800b716 <__any_on+0x2a>
 800b72a:	2001      	movs	r0, #1
 800b72c:	e7f6      	b.n	800b71c <__any_on+0x30>

0800b72e <sulp>:
 800b72e:	b570      	push	{r4, r5, r6, lr}
 800b730:	4604      	mov	r4, r0
 800b732:	460d      	mov	r5, r1
 800b734:	ec45 4b10 	vmov	d0, r4, r5
 800b738:	4616      	mov	r6, r2
 800b73a:	f7ff feb7 	bl	800b4ac <__ulp>
 800b73e:	ec51 0b10 	vmov	r0, r1, d0
 800b742:	b17e      	cbz	r6, 800b764 <sulp+0x36>
 800b744:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b748:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dd09      	ble.n	800b764 <sulp+0x36>
 800b750:	051b      	lsls	r3, r3, #20
 800b752:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b756:	2400      	movs	r4, #0
 800b758:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b75c:	4622      	mov	r2, r4
 800b75e:	462b      	mov	r3, r5
 800b760:	f7f4 ff52 	bl	8000608 <__aeabi_dmul>
 800b764:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b768 <_strtod_l>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	ed2d 8b02 	vpush	{d8}
 800b770:	b09b      	sub	sp, #108	; 0x6c
 800b772:	4604      	mov	r4, r0
 800b774:	9213      	str	r2, [sp, #76]	; 0x4c
 800b776:	2200      	movs	r2, #0
 800b778:	9216      	str	r2, [sp, #88]	; 0x58
 800b77a:	460d      	mov	r5, r1
 800b77c:	f04f 0800 	mov.w	r8, #0
 800b780:	f04f 0900 	mov.w	r9, #0
 800b784:	460a      	mov	r2, r1
 800b786:	9215      	str	r2, [sp, #84]	; 0x54
 800b788:	7811      	ldrb	r1, [r2, #0]
 800b78a:	292b      	cmp	r1, #43	; 0x2b
 800b78c:	d04c      	beq.n	800b828 <_strtod_l+0xc0>
 800b78e:	d83a      	bhi.n	800b806 <_strtod_l+0x9e>
 800b790:	290d      	cmp	r1, #13
 800b792:	d834      	bhi.n	800b7fe <_strtod_l+0x96>
 800b794:	2908      	cmp	r1, #8
 800b796:	d834      	bhi.n	800b802 <_strtod_l+0x9a>
 800b798:	2900      	cmp	r1, #0
 800b79a:	d03d      	beq.n	800b818 <_strtod_l+0xb0>
 800b79c:	2200      	movs	r2, #0
 800b79e:	920a      	str	r2, [sp, #40]	; 0x28
 800b7a0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b7a2:	7832      	ldrb	r2, [r6, #0]
 800b7a4:	2a30      	cmp	r2, #48	; 0x30
 800b7a6:	f040 80b4 	bne.w	800b912 <_strtod_l+0x1aa>
 800b7aa:	7872      	ldrb	r2, [r6, #1]
 800b7ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b7b0:	2a58      	cmp	r2, #88	; 0x58
 800b7b2:	d170      	bne.n	800b896 <_strtod_l+0x12e>
 800b7b4:	9302      	str	r3, [sp, #8]
 800b7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	ab16      	add	r3, sp, #88	; 0x58
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	4a8e      	ldr	r2, [pc, #568]	; (800b9f8 <_strtod_l+0x290>)
 800b7c0:	ab17      	add	r3, sp, #92	; 0x5c
 800b7c2:	a915      	add	r1, sp, #84	; 0x54
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f001 f9b3 	bl	800cb30 <__gethex>
 800b7ca:	f010 070f 	ands.w	r7, r0, #15
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	d005      	beq.n	800b7de <_strtod_l+0x76>
 800b7d2:	2f06      	cmp	r7, #6
 800b7d4:	d12a      	bne.n	800b82c <_strtod_l+0xc4>
 800b7d6:	3601      	adds	r6, #1
 800b7d8:	2300      	movs	r3, #0
 800b7da:	9615      	str	r6, [sp, #84]	; 0x54
 800b7dc:	930a      	str	r3, [sp, #40]	; 0x28
 800b7de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f040 857f 	bne.w	800c2e4 <_strtod_l+0xb7c>
 800b7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7e8:	b1db      	cbz	r3, 800b822 <_strtod_l+0xba>
 800b7ea:	4642      	mov	r2, r8
 800b7ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b7f0:	ec43 2b10 	vmov	d0, r2, r3
 800b7f4:	b01b      	add	sp, #108	; 0x6c
 800b7f6:	ecbd 8b02 	vpop	{d8}
 800b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fe:	2920      	cmp	r1, #32
 800b800:	d1cc      	bne.n	800b79c <_strtod_l+0x34>
 800b802:	3201      	adds	r2, #1
 800b804:	e7bf      	b.n	800b786 <_strtod_l+0x1e>
 800b806:	292d      	cmp	r1, #45	; 0x2d
 800b808:	d1c8      	bne.n	800b79c <_strtod_l+0x34>
 800b80a:	2101      	movs	r1, #1
 800b80c:	910a      	str	r1, [sp, #40]	; 0x28
 800b80e:	1c51      	adds	r1, r2, #1
 800b810:	9115      	str	r1, [sp, #84]	; 0x54
 800b812:	7852      	ldrb	r2, [r2, #1]
 800b814:	2a00      	cmp	r2, #0
 800b816:	d1c3      	bne.n	800b7a0 <_strtod_l+0x38>
 800b818:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b81a:	9515      	str	r5, [sp, #84]	; 0x54
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f040 855f 	bne.w	800c2e0 <_strtod_l+0xb78>
 800b822:	4642      	mov	r2, r8
 800b824:	464b      	mov	r3, r9
 800b826:	e7e3      	b.n	800b7f0 <_strtod_l+0x88>
 800b828:	2100      	movs	r1, #0
 800b82a:	e7ef      	b.n	800b80c <_strtod_l+0xa4>
 800b82c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b82e:	b13a      	cbz	r2, 800b840 <_strtod_l+0xd8>
 800b830:	2135      	movs	r1, #53	; 0x35
 800b832:	a818      	add	r0, sp, #96	; 0x60
 800b834:	f7ff ff37 	bl	800b6a6 <__copybits>
 800b838:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7ff fb0a 	bl	800ae54 <_Bfree>
 800b840:	3f01      	subs	r7, #1
 800b842:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b844:	2f04      	cmp	r7, #4
 800b846:	d806      	bhi.n	800b856 <_strtod_l+0xee>
 800b848:	e8df f007 	tbb	[pc, r7]
 800b84c:	201d0314 	.word	0x201d0314
 800b850:	14          	.byte	0x14
 800b851:	00          	.byte	0x00
 800b852:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b856:	05e9      	lsls	r1, r5, #23
 800b858:	bf48      	it	mi
 800b85a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b85e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b862:	0d1b      	lsrs	r3, r3, #20
 800b864:	051b      	lsls	r3, r3, #20
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1b9      	bne.n	800b7de <_strtod_l+0x76>
 800b86a:	f7fe faf5 	bl	8009e58 <__errno>
 800b86e:	2322      	movs	r3, #34	; 0x22
 800b870:	6003      	str	r3, [r0, #0]
 800b872:	e7b4      	b.n	800b7de <_strtod_l+0x76>
 800b874:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b878:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b87c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b880:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b884:	e7e7      	b.n	800b856 <_strtod_l+0xee>
 800b886:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ba00 <_strtod_l+0x298>
 800b88a:	e7e4      	b.n	800b856 <_strtod_l+0xee>
 800b88c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b890:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b894:	e7df      	b.n	800b856 <_strtod_l+0xee>
 800b896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	9215      	str	r2, [sp, #84]	; 0x54
 800b89c:	785b      	ldrb	r3, [r3, #1]
 800b89e:	2b30      	cmp	r3, #48	; 0x30
 800b8a0:	d0f9      	beq.n	800b896 <_strtod_l+0x12e>
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d09b      	beq.n	800b7de <_strtod_l+0x76>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	f04f 0a00 	mov.w	sl, #0
 800b8ac:	9304      	str	r3, [sp, #16]
 800b8ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8b2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b8b6:	46d3      	mov	fp, sl
 800b8b8:	220a      	movs	r2, #10
 800b8ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b8bc:	7806      	ldrb	r6, [r0, #0]
 800b8be:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b8c2:	b2d9      	uxtb	r1, r3
 800b8c4:	2909      	cmp	r1, #9
 800b8c6:	d926      	bls.n	800b916 <_strtod_l+0x1ae>
 800b8c8:	494c      	ldr	r1, [pc, #304]	; (800b9fc <_strtod_l+0x294>)
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f001 f848 	bl	800c960 <strncmp>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d030      	beq.n	800b936 <_strtod_l+0x1ce>
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	4632      	mov	r2, r6
 800b8d8:	9005      	str	r0, [sp, #20]
 800b8da:	465e      	mov	r6, fp
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2a65      	cmp	r2, #101	; 0x65
 800b8e0:	d001      	beq.n	800b8e6 <_strtod_l+0x17e>
 800b8e2:	2a45      	cmp	r2, #69	; 0x45
 800b8e4:	d113      	bne.n	800b90e <_strtod_l+0x1a6>
 800b8e6:	b91e      	cbnz	r6, 800b8f0 <_strtod_l+0x188>
 800b8e8:	9a04      	ldr	r2, [sp, #16]
 800b8ea:	4302      	orrs	r2, r0
 800b8ec:	d094      	beq.n	800b818 <_strtod_l+0xb0>
 800b8ee:	2600      	movs	r6, #0
 800b8f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b8f2:	1c6a      	adds	r2, r5, #1
 800b8f4:	9215      	str	r2, [sp, #84]	; 0x54
 800b8f6:	786a      	ldrb	r2, [r5, #1]
 800b8f8:	2a2b      	cmp	r2, #43	; 0x2b
 800b8fa:	d074      	beq.n	800b9e6 <_strtod_l+0x27e>
 800b8fc:	2a2d      	cmp	r2, #45	; 0x2d
 800b8fe:	d078      	beq.n	800b9f2 <_strtod_l+0x28a>
 800b900:	f04f 0c00 	mov.w	ip, #0
 800b904:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b908:	2909      	cmp	r1, #9
 800b90a:	d97f      	bls.n	800ba0c <_strtod_l+0x2a4>
 800b90c:	9515      	str	r5, [sp, #84]	; 0x54
 800b90e:	2700      	movs	r7, #0
 800b910:	e09e      	b.n	800ba50 <_strtod_l+0x2e8>
 800b912:	2300      	movs	r3, #0
 800b914:	e7c8      	b.n	800b8a8 <_strtod_l+0x140>
 800b916:	f1bb 0f08 	cmp.w	fp, #8
 800b91a:	bfd8      	it	le
 800b91c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b91e:	f100 0001 	add.w	r0, r0, #1
 800b922:	bfda      	itte	le
 800b924:	fb02 3301 	mlale	r3, r2, r1, r3
 800b928:	9309      	strle	r3, [sp, #36]	; 0x24
 800b92a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b92e:	f10b 0b01 	add.w	fp, fp, #1
 800b932:	9015      	str	r0, [sp, #84]	; 0x54
 800b934:	e7c1      	b.n	800b8ba <_strtod_l+0x152>
 800b936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b938:	1c5a      	adds	r2, r3, #1
 800b93a:	9215      	str	r2, [sp, #84]	; 0x54
 800b93c:	785a      	ldrb	r2, [r3, #1]
 800b93e:	f1bb 0f00 	cmp.w	fp, #0
 800b942:	d037      	beq.n	800b9b4 <_strtod_l+0x24c>
 800b944:	9005      	str	r0, [sp, #20]
 800b946:	465e      	mov	r6, fp
 800b948:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b94c:	2b09      	cmp	r3, #9
 800b94e:	d912      	bls.n	800b976 <_strtod_l+0x20e>
 800b950:	2301      	movs	r3, #1
 800b952:	e7c4      	b.n	800b8de <_strtod_l+0x176>
 800b954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b956:	1c5a      	adds	r2, r3, #1
 800b958:	9215      	str	r2, [sp, #84]	; 0x54
 800b95a:	785a      	ldrb	r2, [r3, #1]
 800b95c:	3001      	adds	r0, #1
 800b95e:	2a30      	cmp	r2, #48	; 0x30
 800b960:	d0f8      	beq.n	800b954 <_strtod_l+0x1ec>
 800b962:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b966:	2b08      	cmp	r3, #8
 800b968:	f200 84c1 	bhi.w	800c2ee <_strtod_l+0xb86>
 800b96c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b96e:	9005      	str	r0, [sp, #20]
 800b970:	2000      	movs	r0, #0
 800b972:	930b      	str	r3, [sp, #44]	; 0x2c
 800b974:	4606      	mov	r6, r0
 800b976:	3a30      	subs	r2, #48	; 0x30
 800b978:	f100 0301 	add.w	r3, r0, #1
 800b97c:	d014      	beq.n	800b9a8 <_strtod_l+0x240>
 800b97e:	9905      	ldr	r1, [sp, #20]
 800b980:	4419      	add	r1, r3
 800b982:	9105      	str	r1, [sp, #20]
 800b984:	4633      	mov	r3, r6
 800b986:	eb00 0c06 	add.w	ip, r0, r6
 800b98a:	210a      	movs	r1, #10
 800b98c:	4563      	cmp	r3, ip
 800b98e:	d113      	bne.n	800b9b8 <_strtod_l+0x250>
 800b990:	1833      	adds	r3, r6, r0
 800b992:	2b08      	cmp	r3, #8
 800b994:	f106 0601 	add.w	r6, r6, #1
 800b998:	4406      	add	r6, r0
 800b99a:	dc1a      	bgt.n	800b9d2 <_strtod_l+0x26a>
 800b99c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b99e:	230a      	movs	r3, #10
 800b9a0:	fb03 2301 	mla	r3, r3, r1, r2
 800b9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b9aa:	1c51      	adds	r1, r2, #1
 800b9ac:	9115      	str	r1, [sp, #84]	; 0x54
 800b9ae:	7852      	ldrb	r2, [r2, #1]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	e7c9      	b.n	800b948 <_strtod_l+0x1e0>
 800b9b4:	4658      	mov	r0, fp
 800b9b6:	e7d2      	b.n	800b95e <_strtod_l+0x1f6>
 800b9b8:	2b08      	cmp	r3, #8
 800b9ba:	f103 0301 	add.w	r3, r3, #1
 800b9be:	dc03      	bgt.n	800b9c8 <_strtod_l+0x260>
 800b9c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b9c2:	434f      	muls	r7, r1
 800b9c4:	9709      	str	r7, [sp, #36]	; 0x24
 800b9c6:	e7e1      	b.n	800b98c <_strtod_l+0x224>
 800b9c8:	2b10      	cmp	r3, #16
 800b9ca:	bfd8      	it	le
 800b9cc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b9d0:	e7dc      	b.n	800b98c <_strtod_l+0x224>
 800b9d2:	2e10      	cmp	r6, #16
 800b9d4:	bfdc      	itt	le
 800b9d6:	230a      	movle	r3, #10
 800b9d8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b9dc:	e7e3      	b.n	800b9a6 <_strtod_l+0x23e>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	9305      	str	r3, [sp, #20]
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e780      	b.n	800b8e8 <_strtod_l+0x180>
 800b9e6:	f04f 0c00 	mov.w	ip, #0
 800b9ea:	1caa      	adds	r2, r5, #2
 800b9ec:	9215      	str	r2, [sp, #84]	; 0x54
 800b9ee:	78aa      	ldrb	r2, [r5, #2]
 800b9f0:	e788      	b.n	800b904 <_strtod_l+0x19c>
 800b9f2:	f04f 0c01 	mov.w	ip, #1
 800b9f6:	e7f8      	b.n	800b9ea <_strtod_l+0x282>
 800b9f8:	0800da88 	.word	0x0800da88
 800b9fc:	0800da84 	.word	0x0800da84
 800ba00:	7ff00000 	.word	0x7ff00000
 800ba04:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba06:	1c51      	adds	r1, r2, #1
 800ba08:	9115      	str	r1, [sp, #84]	; 0x54
 800ba0a:	7852      	ldrb	r2, [r2, #1]
 800ba0c:	2a30      	cmp	r2, #48	; 0x30
 800ba0e:	d0f9      	beq.n	800ba04 <_strtod_l+0x29c>
 800ba10:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ba14:	2908      	cmp	r1, #8
 800ba16:	f63f af7a 	bhi.w	800b90e <_strtod_l+0x1a6>
 800ba1a:	3a30      	subs	r2, #48	; 0x30
 800ba1c:	9208      	str	r2, [sp, #32]
 800ba1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba20:	920c      	str	r2, [sp, #48]	; 0x30
 800ba22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba24:	1c57      	adds	r7, r2, #1
 800ba26:	9715      	str	r7, [sp, #84]	; 0x54
 800ba28:	7852      	ldrb	r2, [r2, #1]
 800ba2a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ba2e:	f1be 0f09 	cmp.w	lr, #9
 800ba32:	d938      	bls.n	800baa6 <_strtod_l+0x33e>
 800ba34:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba36:	1a7f      	subs	r7, r7, r1
 800ba38:	2f08      	cmp	r7, #8
 800ba3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ba3e:	dc03      	bgt.n	800ba48 <_strtod_l+0x2e0>
 800ba40:	9908      	ldr	r1, [sp, #32]
 800ba42:	428f      	cmp	r7, r1
 800ba44:	bfa8      	it	ge
 800ba46:	460f      	movge	r7, r1
 800ba48:	f1bc 0f00 	cmp.w	ip, #0
 800ba4c:	d000      	beq.n	800ba50 <_strtod_l+0x2e8>
 800ba4e:	427f      	negs	r7, r7
 800ba50:	2e00      	cmp	r6, #0
 800ba52:	d14f      	bne.n	800baf4 <_strtod_l+0x38c>
 800ba54:	9904      	ldr	r1, [sp, #16]
 800ba56:	4301      	orrs	r1, r0
 800ba58:	f47f aec1 	bne.w	800b7de <_strtod_l+0x76>
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f47f aedb 	bne.w	800b818 <_strtod_l+0xb0>
 800ba62:	2a69      	cmp	r2, #105	; 0x69
 800ba64:	d029      	beq.n	800baba <_strtod_l+0x352>
 800ba66:	dc26      	bgt.n	800bab6 <_strtod_l+0x34e>
 800ba68:	2a49      	cmp	r2, #73	; 0x49
 800ba6a:	d026      	beq.n	800baba <_strtod_l+0x352>
 800ba6c:	2a4e      	cmp	r2, #78	; 0x4e
 800ba6e:	f47f aed3 	bne.w	800b818 <_strtod_l+0xb0>
 800ba72:	499b      	ldr	r1, [pc, #620]	; (800bce0 <_strtod_l+0x578>)
 800ba74:	a815      	add	r0, sp, #84	; 0x54
 800ba76:	f001 fa9b 	bl	800cfb0 <__match>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	f43f aecc 	beq.w	800b818 <_strtod_l+0xb0>
 800ba80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	2b28      	cmp	r3, #40	; 0x28
 800ba86:	d12f      	bne.n	800bae8 <_strtod_l+0x380>
 800ba88:	4996      	ldr	r1, [pc, #600]	; (800bce4 <_strtod_l+0x57c>)
 800ba8a:	aa18      	add	r2, sp, #96	; 0x60
 800ba8c:	a815      	add	r0, sp, #84	; 0x54
 800ba8e:	f001 faa3 	bl	800cfd8 <__hexnan>
 800ba92:	2805      	cmp	r0, #5
 800ba94:	d128      	bne.n	800bae8 <_strtod_l+0x380>
 800ba96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800baa0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800baa4:	e69b      	b.n	800b7de <_strtod_l+0x76>
 800baa6:	9f08      	ldr	r7, [sp, #32]
 800baa8:	210a      	movs	r1, #10
 800baaa:	fb01 2107 	mla	r1, r1, r7, r2
 800baae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bab2:	9208      	str	r2, [sp, #32]
 800bab4:	e7b5      	b.n	800ba22 <_strtod_l+0x2ba>
 800bab6:	2a6e      	cmp	r2, #110	; 0x6e
 800bab8:	e7d9      	b.n	800ba6e <_strtod_l+0x306>
 800baba:	498b      	ldr	r1, [pc, #556]	; (800bce8 <_strtod_l+0x580>)
 800babc:	a815      	add	r0, sp, #84	; 0x54
 800babe:	f001 fa77 	bl	800cfb0 <__match>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	f43f aea8 	beq.w	800b818 <_strtod_l+0xb0>
 800bac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baca:	4988      	ldr	r1, [pc, #544]	; (800bcec <_strtod_l+0x584>)
 800bacc:	3b01      	subs	r3, #1
 800bace:	a815      	add	r0, sp, #84	; 0x54
 800bad0:	9315      	str	r3, [sp, #84]	; 0x54
 800bad2:	f001 fa6d 	bl	800cfb0 <__match>
 800bad6:	b910      	cbnz	r0, 800bade <_strtod_l+0x376>
 800bad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bada:	3301      	adds	r3, #1
 800badc:	9315      	str	r3, [sp, #84]	; 0x54
 800bade:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bcfc <_strtod_l+0x594>
 800bae2:	f04f 0800 	mov.w	r8, #0
 800bae6:	e67a      	b.n	800b7de <_strtod_l+0x76>
 800bae8:	4881      	ldr	r0, [pc, #516]	; (800bcf0 <_strtod_l+0x588>)
 800baea:	f000 ff7d 	bl	800c9e8 <nan>
 800baee:	ec59 8b10 	vmov	r8, r9, d0
 800baf2:	e674      	b.n	800b7de <_strtod_l+0x76>
 800baf4:	9b05      	ldr	r3, [sp, #20]
 800baf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baf8:	1afb      	subs	r3, r7, r3
 800bafa:	f1bb 0f00 	cmp.w	fp, #0
 800bafe:	bf08      	it	eq
 800bb00:	46b3      	moveq	fp, r6
 800bb02:	2e10      	cmp	r6, #16
 800bb04:	9308      	str	r3, [sp, #32]
 800bb06:	4635      	mov	r5, r6
 800bb08:	bfa8      	it	ge
 800bb0a:	2510      	movge	r5, #16
 800bb0c:	f7f4 fd02 	bl	8000514 <__aeabi_ui2d>
 800bb10:	2e09      	cmp	r6, #9
 800bb12:	4680      	mov	r8, r0
 800bb14:	4689      	mov	r9, r1
 800bb16:	dd13      	ble.n	800bb40 <_strtod_l+0x3d8>
 800bb18:	4b76      	ldr	r3, [pc, #472]	; (800bcf4 <_strtod_l+0x58c>)
 800bb1a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bb1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bb22:	f7f4 fd71 	bl	8000608 <__aeabi_dmul>
 800bb26:	4680      	mov	r8, r0
 800bb28:	4650      	mov	r0, sl
 800bb2a:	4689      	mov	r9, r1
 800bb2c:	f7f4 fcf2 	bl	8000514 <__aeabi_ui2d>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4640      	mov	r0, r8
 800bb36:	4649      	mov	r1, r9
 800bb38:	f7f4 fbb0 	bl	800029c <__adddf3>
 800bb3c:	4680      	mov	r8, r0
 800bb3e:	4689      	mov	r9, r1
 800bb40:	2e0f      	cmp	r6, #15
 800bb42:	dc38      	bgt.n	800bbb6 <_strtod_l+0x44e>
 800bb44:	9b08      	ldr	r3, [sp, #32]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f43f ae49 	beq.w	800b7de <_strtod_l+0x76>
 800bb4c:	dd24      	ble.n	800bb98 <_strtod_l+0x430>
 800bb4e:	2b16      	cmp	r3, #22
 800bb50:	dc0b      	bgt.n	800bb6a <_strtod_l+0x402>
 800bb52:	4968      	ldr	r1, [pc, #416]	; (800bcf4 <_strtod_l+0x58c>)
 800bb54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb5c:	4642      	mov	r2, r8
 800bb5e:	464b      	mov	r3, r9
 800bb60:	f7f4 fd52 	bl	8000608 <__aeabi_dmul>
 800bb64:	4680      	mov	r8, r0
 800bb66:	4689      	mov	r9, r1
 800bb68:	e639      	b.n	800b7de <_strtod_l+0x76>
 800bb6a:	9a08      	ldr	r2, [sp, #32]
 800bb6c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bb70:	4293      	cmp	r3, r2
 800bb72:	db20      	blt.n	800bbb6 <_strtod_l+0x44e>
 800bb74:	4c5f      	ldr	r4, [pc, #380]	; (800bcf4 <_strtod_l+0x58c>)
 800bb76:	f1c6 060f 	rsb	r6, r6, #15
 800bb7a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bb7e:	4642      	mov	r2, r8
 800bb80:	464b      	mov	r3, r9
 800bb82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb86:	f7f4 fd3f 	bl	8000608 <__aeabi_dmul>
 800bb8a:	9b08      	ldr	r3, [sp, #32]
 800bb8c:	1b9e      	subs	r6, r3, r6
 800bb8e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bb92:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb96:	e7e3      	b.n	800bb60 <_strtod_l+0x3f8>
 800bb98:	9b08      	ldr	r3, [sp, #32]
 800bb9a:	3316      	adds	r3, #22
 800bb9c:	db0b      	blt.n	800bbb6 <_strtod_l+0x44e>
 800bb9e:	9b05      	ldr	r3, [sp, #20]
 800bba0:	1bdf      	subs	r7, r3, r7
 800bba2:	4b54      	ldr	r3, [pc, #336]	; (800bcf4 <_strtod_l+0x58c>)
 800bba4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbac:	4640      	mov	r0, r8
 800bbae:	4649      	mov	r1, r9
 800bbb0:	f7f4 fe54 	bl	800085c <__aeabi_ddiv>
 800bbb4:	e7d6      	b.n	800bb64 <_strtod_l+0x3fc>
 800bbb6:	9b08      	ldr	r3, [sp, #32]
 800bbb8:	1b75      	subs	r5, r6, r5
 800bbba:	441d      	add	r5, r3
 800bbbc:	2d00      	cmp	r5, #0
 800bbbe:	dd70      	ble.n	800bca2 <_strtod_l+0x53a>
 800bbc0:	f015 030f 	ands.w	r3, r5, #15
 800bbc4:	d00a      	beq.n	800bbdc <_strtod_l+0x474>
 800bbc6:	494b      	ldr	r1, [pc, #300]	; (800bcf4 <_strtod_l+0x58c>)
 800bbc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbcc:	4642      	mov	r2, r8
 800bbce:	464b      	mov	r3, r9
 800bbd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbd4:	f7f4 fd18 	bl	8000608 <__aeabi_dmul>
 800bbd8:	4680      	mov	r8, r0
 800bbda:	4689      	mov	r9, r1
 800bbdc:	f035 050f 	bics.w	r5, r5, #15
 800bbe0:	d04d      	beq.n	800bc7e <_strtod_l+0x516>
 800bbe2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bbe6:	dd22      	ble.n	800bc2e <_strtod_l+0x4c6>
 800bbe8:	2500      	movs	r5, #0
 800bbea:	46ab      	mov	fp, r5
 800bbec:	9509      	str	r5, [sp, #36]	; 0x24
 800bbee:	9505      	str	r5, [sp, #20]
 800bbf0:	2322      	movs	r3, #34	; 0x22
 800bbf2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bcfc <_strtod_l+0x594>
 800bbf6:	6023      	str	r3, [r4, #0]
 800bbf8:	f04f 0800 	mov.w	r8, #0
 800bbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f43f aded 	beq.w	800b7de <_strtod_l+0x76>
 800bc04:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bc06:	4620      	mov	r0, r4
 800bc08:	f7ff f924 	bl	800ae54 <_Bfree>
 800bc0c:	9905      	ldr	r1, [sp, #20]
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7ff f920 	bl	800ae54 <_Bfree>
 800bc14:	4659      	mov	r1, fp
 800bc16:	4620      	mov	r0, r4
 800bc18:	f7ff f91c 	bl	800ae54 <_Bfree>
 800bc1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f7ff f918 	bl	800ae54 <_Bfree>
 800bc24:	4629      	mov	r1, r5
 800bc26:	4620      	mov	r0, r4
 800bc28:	f7ff f914 	bl	800ae54 <_Bfree>
 800bc2c:	e5d7      	b.n	800b7de <_strtod_l+0x76>
 800bc2e:	4b32      	ldr	r3, [pc, #200]	; (800bcf8 <_strtod_l+0x590>)
 800bc30:	9304      	str	r3, [sp, #16]
 800bc32:	2300      	movs	r3, #0
 800bc34:	112d      	asrs	r5, r5, #4
 800bc36:	4640      	mov	r0, r8
 800bc38:	4649      	mov	r1, r9
 800bc3a:	469a      	mov	sl, r3
 800bc3c:	2d01      	cmp	r5, #1
 800bc3e:	dc21      	bgt.n	800bc84 <_strtod_l+0x51c>
 800bc40:	b10b      	cbz	r3, 800bc46 <_strtod_l+0x4de>
 800bc42:	4680      	mov	r8, r0
 800bc44:	4689      	mov	r9, r1
 800bc46:	492c      	ldr	r1, [pc, #176]	; (800bcf8 <_strtod_l+0x590>)
 800bc48:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bc4c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bc50:	4642      	mov	r2, r8
 800bc52:	464b      	mov	r3, r9
 800bc54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc58:	f7f4 fcd6 	bl	8000608 <__aeabi_dmul>
 800bc5c:	4b27      	ldr	r3, [pc, #156]	; (800bcfc <_strtod_l+0x594>)
 800bc5e:	460a      	mov	r2, r1
 800bc60:	400b      	ands	r3, r1
 800bc62:	4927      	ldr	r1, [pc, #156]	; (800bd00 <_strtod_l+0x598>)
 800bc64:	428b      	cmp	r3, r1
 800bc66:	4680      	mov	r8, r0
 800bc68:	d8be      	bhi.n	800bbe8 <_strtod_l+0x480>
 800bc6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bc6e:	428b      	cmp	r3, r1
 800bc70:	bf86      	itte	hi
 800bc72:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bd04 <_strtod_l+0x59c>
 800bc76:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800bc7a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bc7e:	2300      	movs	r3, #0
 800bc80:	9304      	str	r3, [sp, #16]
 800bc82:	e07b      	b.n	800bd7c <_strtod_l+0x614>
 800bc84:	07ea      	lsls	r2, r5, #31
 800bc86:	d505      	bpl.n	800bc94 <_strtod_l+0x52c>
 800bc88:	9b04      	ldr	r3, [sp, #16]
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	f7f4 fcbb 	bl	8000608 <__aeabi_dmul>
 800bc92:	2301      	movs	r3, #1
 800bc94:	9a04      	ldr	r2, [sp, #16]
 800bc96:	3208      	adds	r2, #8
 800bc98:	f10a 0a01 	add.w	sl, sl, #1
 800bc9c:	106d      	asrs	r5, r5, #1
 800bc9e:	9204      	str	r2, [sp, #16]
 800bca0:	e7cc      	b.n	800bc3c <_strtod_l+0x4d4>
 800bca2:	d0ec      	beq.n	800bc7e <_strtod_l+0x516>
 800bca4:	426d      	negs	r5, r5
 800bca6:	f015 020f 	ands.w	r2, r5, #15
 800bcaa:	d00a      	beq.n	800bcc2 <_strtod_l+0x55a>
 800bcac:	4b11      	ldr	r3, [pc, #68]	; (800bcf4 <_strtod_l+0x58c>)
 800bcae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcb2:	4640      	mov	r0, r8
 800bcb4:	4649      	mov	r1, r9
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	f7f4 fdcf 	bl	800085c <__aeabi_ddiv>
 800bcbe:	4680      	mov	r8, r0
 800bcc0:	4689      	mov	r9, r1
 800bcc2:	112d      	asrs	r5, r5, #4
 800bcc4:	d0db      	beq.n	800bc7e <_strtod_l+0x516>
 800bcc6:	2d1f      	cmp	r5, #31
 800bcc8:	dd1e      	ble.n	800bd08 <_strtod_l+0x5a0>
 800bcca:	2500      	movs	r5, #0
 800bccc:	46ab      	mov	fp, r5
 800bcce:	9509      	str	r5, [sp, #36]	; 0x24
 800bcd0:	9505      	str	r5, [sp, #20]
 800bcd2:	2322      	movs	r3, #34	; 0x22
 800bcd4:	f04f 0800 	mov.w	r8, #0
 800bcd8:	f04f 0900 	mov.w	r9, #0
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	e78d      	b.n	800bbfc <_strtod_l+0x494>
 800bce0:	0800d875 	.word	0x0800d875
 800bce4:	0800da9c 	.word	0x0800da9c
 800bce8:	0800d86d 	.word	0x0800d86d
 800bcec:	0800d8a4 	.word	0x0800d8a4
 800bcf0:	0800dc2d 	.word	0x0800dc2d
 800bcf4:	0800d9b0 	.word	0x0800d9b0
 800bcf8:	0800d988 	.word	0x0800d988
 800bcfc:	7ff00000 	.word	0x7ff00000
 800bd00:	7ca00000 	.word	0x7ca00000
 800bd04:	7fefffff 	.word	0x7fefffff
 800bd08:	f015 0310 	ands.w	r3, r5, #16
 800bd0c:	bf18      	it	ne
 800bd0e:	236a      	movne	r3, #106	; 0x6a
 800bd10:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c0b4 <_strtod_l+0x94c>
 800bd14:	9304      	str	r3, [sp, #16]
 800bd16:	4640      	mov	r0, r8
 800bd18:	4649      	mov	r1, r9
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	07ea      	lsls	r2, r5, #31
 800bd1e:	d504      	bpl.n	800bd2a <_strtod_l+0x5c2>
 800bd20:	e9da 2300 	ldrd	r2, r3, [sl]
 800bd24:	f7f4 fc70 	bl	8000608 <__aeabi_dmul>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	106d      	asrs	r5, r5, #1
 800bd2c:	f10a 0a08 	add.w	sl, sl, #8
 800bd30:	d1f4      	bne.n	800bd1c <_strtod_l+0x5b4>
 800bd32:	b10b      	cbz	r3, 800bd38 <_strtod_l+0x5d0>
 800bd34:	4680      	mov	r8, r0
 800bd36:	4689      	mov	r9, r1
 800bd38:	9b04      	ldr	r3, [sp, #16]
 800bd3a:	b1bb      	cbz	r3, 800bd6c <_strtod_l+0x604>
 800bd3c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bd40:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	4649      	mov	r1, r9
 800bd48:	dd10      	ble.n	800bd6c <_strtod_l+0x604>
 800bd4a:	2b1f      	cmp	r3, #31
 800bd4c:	f340 811e 	ble.w	800bf8c <_strtod_l+0x824>
 800bd50:	2b34      	cmp	r3, #52	; 0x34
 800bd52:	bfde      	ittt	le
 800bd54:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800bd58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bd5c:	4093      	lslle	r3, r2
 800bd5e:	f04f 0800 	mov.w	r8, #0
 800bd62:	bfcc      	ite	gt
 800bd64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bd68:	ea03 0901 	andle.w	r9, r3, r1
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	2300      	movs	r3, #0
 800bd70:	4640      	mov	r0, r8
 800bd72:	4649      	mov	r1, r9
 800bd74:	f7f4 feb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d1a6      	bne.n	800bcca <_strtod_l+0x562>
 800bd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd82:	4633      	mov	r3, r6
 800bd84:	465a      	mov	r2, fp
 800bd86:	4620      	mov	r0, r4
 800bd88:	f7ff f8cc 	bl	800af24 <__s2b>
 800bd8c:	9009      	str	r0, [sp, #36]	; 0x24
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f43f af2a 	beq.w	800bbe8 <_strtod_l+0x480>
 800bd94:	9a08      	ldr	r2, [sp, #32]
 800bd96:	9b05      	ldr	r3, [sp, #20]
 800bd98:	2a00      	cmp	r2, #0
 800bd9a:	eba3 0307 	sub.w	r3, r3, r7
 800bd9e:	bfa8      	it	ge
 800bda0:	2300      	movge	r3, #0
 800bda2:	930c      	str	r3, [sp, #48]	; 0x30
 800bda4:	2500      	movs	r5, #0
 800bda6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bdaa:	9312      	str	r3, [sp, #72]	; 0x48
 800bdac:	46ab      	mov	fp, r5
 800bdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	6859      	ldr	r1, [r3, #4]
 800bdb4:	f7ff f80e 	bl	800add4 <_Balloc>
 800bdb8:	9005      	str	r0, [sp, #20]
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	f43f af18 	beq.w	800bbf0 <_strtod_l+0x488>
 800bdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc2:	691a      	ldr	r2, [r3, #16]
 800bdc4:	3202      	adds	r2, #2
 800bdc6:	f103 010c 	add.w	r1, r3, #12
 800bdca:	0092      	lsls	r2, r2, #2
 800bdcc:	300c      	adds	r0, #12
 800bdce:	f7fe f870 	bl	8009eb2 <memcpy>
 800bdd2:	ec49 8b10 	vmov	d0, r8, r9
 800bdd6:	aa18      	add	r2, sp, #96	; 0x60
 800bdd8:	a917      	add	r1, sp, #92	; 0x5c
 800bdda:	4620      	mov	r0, r4
 800bddc:	f7ff fbd6 	bl	800b58c <__d2b>
 800bde0:	ec49 8b18 	vmov	d8, r8, r9
 800bde4:	9016      	str	r0, [sp, #88]	; 0x58
 800bde6:	2800      	cmp	r0, #0
 800bde8:	f43f af02 	beq.w	800bbf0 <_strtod_l+0x488>
 800bdec:	2101      	movs	r1, #1
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f7ff f930 	bl	800b054 <__i2b>
 800bdf4:	4683      	mov	fp, r0
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f43f aefa 	beq.w	800bbf0 <_strtod_l+0x488>
 800bdfc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bdfe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be00:	2e00      	cmp	r6, #0
 800be02:	bfab      	itete	ge
 800be04:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800be06:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800be08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800be0a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800be0e:	bfac      	ite	ge
 800be10:	eb06 0a03 	addge.w	sl, r6, r3
 800be14:	1b9f      	sublt	r7, r3, r6
 800be16:	9b04      	ldr	r3, [sp, #16]
 800be18:	1af6      	subs	r6, r6, r3
 800be1a:	4416      	add	r6, r2
 800be1c:	4ba0      	ldr	r3, [pc, #640]	; (800c0a0 <_strtod_l+0x938>)
 800be1e:	3e01      	subs	r6, #1
 800be20:	429e      	cmp	r6, r3
 800be22:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be26:	f280 80c4 	bge.w	800bfb2 <_strtod_l+0x84a>
 800be2a:	1b9b      	subs	r3, r3, r6
 800be2c:	2b1f      	cmp	r3, #31
 800be2e:	eba2 0203 	sub.w	r2, r2, r3
 800be32:	f04f 0101 	mov.w	r1, #1
 800be36:	f300 80b0 	bgt.w	800bf9a <_strtod_l+0x832>
 800be3a:	fa01 f303 	lsl.w	r3, r1, r3
 800be3e:	930e      	str	r3, [sp, #56]	; 0x38
 800be40:	2300      	movs	r3, #0
 800be42:	930d      	str	r3, [sp, #52]	; 0x34
 800be44:	eb0a 0602 	add.w	r6, sl, r2
 800be48:	9b04      	ldr	r3, [sp, #16]
 800be4a:	45b2      	cmp	sl, r6
 800be4c:	4417      	add	r7, r2
 800be4e:	441f      	add	r7, r3
 800be50:	4653      	mov	r3, sl
 800be52:	bfa8      	it	ge
 800be54:	4633      	movge	r3, r6
 800be56:	42bb      	cmp	r3, r7
 800be58:	bfa8      	it	ge
 800be5a:	463b      	movge	r3, r7
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	bfc2      	ittt	gt
 800be60:	1af6      	subgt	r6, r6, r3
 800be62:	1aff      	subgt	r7, r7, r3
 800be64:	ebaa 0a03 	subgt.w	sl, sl, r3
 800be68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	dd17      	ble.n	800be9e <_strtod_l+0x736>
 800be6e:	4659      	mov	r1, fp
 800be70:	461a      	mov	r2, r3
 800be72:	4620      	mov	r0, r4
 800be74:	f7ff f9ae 	bl	800b1d4 <__pow5mult>
 800be78:	4683      	mov	fp, r0
 800be7a:	2800      	cmp	r0, #0
 800be7c:	f43f aeb8 	beq.w	800bbf0 <_strtod_l+0x488>
 800be80:	4601      	mov	r1, r0
 800be82:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be84:	4620      	mov	r0, r4
 800be86:	f7ff f8fb 	bl	800b080 <__multiply>
 800be8a:	900b      	str	r0, [sp, #44]	; 0x2c
 800be8c:	2800      	cmp	r0, #0
 800be8e:	f43f aeaf 	beq.w	800bbf0 <_strtod_l+0x488>
 800be92:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be94:	4620      	mov	r0, r4
 800be96:	f7fe ffdd 	bl	800ae54 <_Bfree>
 800be9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be9c:	9316      	str	r3, [sp, #88]	; 0x58
 800be9e:	2e00      	cmp	r6, #0
 800bea0:	f300 808c 	bgt.w	800bfbc <_strtod_l+0x854>
 800bea4:	9b08      	ldr	r3, [sp, #32]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	dd08      	ble.n	800bebc <_strtod_l+0x754>
 800beaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800beac:	9905      	ldr	r1, [sp, #20]
 800beae:	4620      	mov	r0, r4
 800beb0:	f7ff f990 	bl	800b1d4 <__pow5mult>
 800beb4:	9005      	str	r0, [sp, #20]
 800beb6:	2800      	cmp	r0, #0
 800beb8:	f43f ae9a 	beq.w	800bbf0 <_strtod_l+0x488>
 800bebc:	2f00      	cmp	r7, #0
 800bebe:	dd08      	ble.n	800bed2 <_strtod_l+0x76a>
 800bec0:	9905      	ldr	r1, [sp, #20]
 800bec2:	463a      	mov	r2, r7
 800bec4:	4620      	mov	r0, r4
 800bec6:	f7ff f9df 	bl	800b288 <__lshift>
 800beca:	9005      	str	r0, [sp, #20]
 800becc:	2800      	cmp	r0, #0
 800bece:	f43f ae8f 	beq.w	800bbf0 <_strtod_l+0x488>
 800bed2:	f1ba 0f00 	cmp.w	sl, #0
 800bed6:	dd08      	ble.n	800beea <_strtod_l+0x782>
 800bed8:	4659      	mov	r1, fp
 800beda:	4652      	mov	r2, sl
 800bedc:	4620      	mov	r0, r4
 800bede:	f7ff f9d3 	bl	800b288 <__lshift>
 800bee2:	4683      	mov	fp, r0
 800bee4:	2800      	cmp	r0, #0
 800bee6:	f43f ae83 	beq.w	800bbf0 <_strtod_l+0x488>
 800beea:	9a05      	ldr	r2, [sp, #20]
 800beec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800beee:	4620      	mov	r0, r4
 800bef0:	f7ff fa52 	bl	800b398 <__mdiff>
 800bef4:	4605      	mov	r5, r0
 800bef6:	2800      	cmp	r0, #0
 800bef8:	f43f ae7a 	beq.w	800bbf0 <_strtod_l+0x488>
 800befc:	68c3      	ldr	r3, [r0, #12]
 800befe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf00:	2300      	movs	r3, #0
 800bf02:	60c3      	str	r3, [r0, #12]
 800bf04:	4659      	mov	r1, fp
 800bf06:	f7ff fa2b 	bl	800b360 <__mcmp>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	da60      	bge.n	800bfd0 <_strtod_l+0x868>
 800bf0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf10:	ea53 0308 	orrs.w	r3, r3, r8
 800bf14:	f040 8084 	bne.w	800c020 <_strtod_l+0x8b8>
 800bf18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d17f      	bne.n	800c020 <_strtod_l+0x8b8>
 800bf20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf24:	0d1b      	lsrs	r3, r3, #20
 800bf26:	051b      	lsls	r3, r3, #20
 800bf28:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf2c:	d978      	bls.n	800c020 <_strtod_l+0x8b8>
 800bf2e:	696b      	ldr	r3, [r5, #20]
 800bf30:	b913      	cbnz	r3, 800bf38 <_strtod_l+0x7d0>
 800bf32:	692b      	ldr	r3, [r5, #16]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	dd73      	ble.n	800c020 <_strtod_l+0x8b8>
 800bf38:	4629      	mov	r1, r5
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f7ff f9a3 	bl	800b288 <__lshift>
 800bf42:	4659      	mov	r1, fp
 800bf44:	4605      	mov	r5, r0
 800bf46:	f7ff fa0b 	bl	800b360 <__mcmp>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	dd68      	ble.n	800c020 <_strtod_l+0x8b8>
 800bf4e:	9904      	ldr	r1, [sp, #16]
 800bf50:	4a54      	ldr	r2, [pc, #336]	; (800c0a4 <_strtod_l+0x93c>)
 800bf52:	464b      	mov	r3, r9
 800bf54:	2900      	cmp	r1, #0
 800bf56:	f000 8084 	beq.w	800c062 <_strtod_l+0x8fa>
 800bf5a:	ea02 0109 	and.w	r1, r2, r9
 800bf5e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bf62:	dc7e      	bgt.n	800c062 <_strtod_l+0x8fa>
 800bf64:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bf68:	f77f aeb3 	ble.w	800bcd2 <_strtod_l+0x56a>
 800bf6c:	4b4e      	ldr	r3, [pc, #312]	; (800c0a8 <_strtod_l+0x940>)
 800bf6e:	4640      	mov	r0, r8
 800bf70:	4649      	mov	r1, r9
 800bf72:	2200      	movs	r2, #0
 800bf74:	f7f4 fb48 	bl	8000608 <__aeabi_dmul>
 800bf78:	4b4a      	ldr	r3, [pc, #296]	; (800c0a4 <_strtod_l+0x93c>)
 800bf7a:	400b      	ands	r3, r1
 800bf7c:	4680      	mov	r8, r0
 800bf7e:	4689      	mov	r9, r1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f47f ae3f 	bne.w	800bc04 <_strtod_l+0x49c>
 800bf86:	2322      	movs	r3, #34	; 0x22
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	e63b      	b.n	800bc04 <_strtod_l+0x49c>
 800bf8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf90:	fa02 f303 	lsl.w	r3, r2, r3
 800bf94:	ea03 0808 	and.w	r8, r3, r8
 800bf98:	e6e8      	b.n	800bd6c <_strtod_l+0x604>
 800bf9a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bf9e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bfa2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bfa6:	36e2      	adds	r6, #226	; 0xe2
 800bfa8:	fa01 f306 	lsl.w	r3, r1, r6
 800bfac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bfb0:	e748      	b.n	800be44 <_strtod_l+0x6dc>
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800bfba:	e743      	b.n	800be44 <_strtod_l+0x6dc>
 800bfbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bfbe:	4632      	mov	r2, r6
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f7ff f961 	bl	800b288 <__lshift>
 800bfc6:	9016      	str	r0, [sp, #88]	; 0x58
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	f47f af6b 	bne.w	800bea4 <_strtod_l+0x73c>
 800bfce:	e60f      	b.n	800bbf0 <_strtod_l+0x488>
 800bfd0:	46ca      	mov	sl, r9
 800bfd2:	d171      	bne.n	800c0b8 <_strtod_l+0x950>
 800bfd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfda:	b352      	cbz	r2, 800c032 <_strtod_l+0x8ca>
 800bfdc:	4a33      	ldr	r2, [pc, #204]	; (800c0ac <_strtod_l+0x944>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d12a      	bne.n	800c038 <_strtod_l+0x8d0>
 800bfe2:	9b04      	ldr	r3, [sp, #16]
 800bfe4:	4641      	mov	r1, r8
 800bfe6:	b1fb      	cbz	r3, 800c028 <_strtod_l+0x8c0>
 800bfe8:	4b2e      	ldr	r3, [pc, #184]	; (800c0a4 <_strtod_l+0x93c>)
 800bfea:	ea09 0303 	and.w	r3, r9, r3
 800bfee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bff6:	d81a      	bhi.n	800c02e <_strtod_l+0x8c6>
 800bff8:	0d1b      	lsrs	r3, r3, #20
 800bffa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bffe:	fa02 f303 	lsl.w	r3, r2, r3
 800c002:	4299      	cmp	r1, r3
 800c004:	d118      	bne.n	800c038 <_strtod_l+0x8d0>
 800c006:	4b2a      	ldr	r3, [pc, #168]	; (800c0b0 <_strtod_l+0x948>)
 800c008:	459a      	cmp	sl, r3
 800c00a:	d102      	bne.n	800c012 <_strtod_l+0x8aa>
 800c00c:	3101      	adds	r1, #1
 800c00e:	f43f adef 	beq.w	800bbf0 <_strtod_l+0x488>
 800c012:	4b24      	ldr	r3, [pc, #144]	; (800c0a4 <_strtod_l+0x93c>)
 800c014:	ea0a 0303 	and.w	r3, sl, r3
 800c018:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c01c:	f04f 0800 	mov.w	r8, #0
 800c020:	9b04      	ldr	r3, [sp, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1a2      	bne.n	800bf6c <_strtod_l+0x804>
 800c026:	e5ed      	b.n	800bc04 <_strtod_l+0x49c>
 800c028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c02c:	e7e9      	b.n	800c002 <_strtod_l+0x89a>
 800c02e:	4613      	mov	r3, r2
 800c030:	e7e7      	b.n	800c002 <_strtod_l+0x89a>
 800c032:	ea53 0308 	orrs.w	r3, r3, r8
 800c036:	d08a      	beq.n	800bf4e <_strtod_l+0x7e6>
 800c038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c03a:	b1e3      	cbz	r3, 800c076 <_strtod_l+0x90e>
 800c03c:	ea13 0f0a 	tst.w	r3, sl
 800c040:	d0ee      	beq.n	800c020 <_strtod_l+0x8b8>
 800c042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c044:	9a04      	ldr	r2, [sp, #16]
 800c046:	4640      	mov	r0, r8
 800c048:	4649      	mov	r1, r9
 800c04a:	b1c3      	cbz	r3, 800c07e <_strtod_l+0x916>
 800c04c:	f7ff fb6f 	bl	800b72e <sulp>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	ec51 0b18 	vmov	r0, r1, d8
 800c058:	f7f4 f920 	bl	800029c <__adddf3>
 800c05c:	4680      	mov	r8, r0
 800c05e:	4689      	mov	r9, r1
 800c060:	e7de      	b.n	800c020 <_strtod_l+0x8b8>
 800c062:	4013      	ands	r3, r2
 800c064:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c068:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c06c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c070:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c074:	e7d4      	b.n	800c020 <_strtod_l+0x8b8>
 800c076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c078:	ea13 0f08 	tst.w	r3, r8
 800c07c:	e7e0      	b.n	800c040 <_strtod_l+0x8d8>
 800c07e:	f7ff fb56 	bl	800b72e <sulp>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	ec51 0b18 	vmov	r0, r1, d8
 800c08a:	f7f4 f905 	bl	8000298 <__aeabi_dsub>
 800c08e:	2200      	movs	r2, #0
 800c090:	2300      	movs	r3, #0
 800c092:	4680      	mov	r8, r0
 800c094:	4689      	mov	r9, r1
 800c096:	f7f4 fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d0c0      	beq.n	800c020 <_strtod_l+0x8b8>
 800c09e:	e618      	b.n	800bcd2 <_strtod_l+0x56a>
 800c0a0:	fffffc02 	.word	0xfffffc02
 800c0a4:	7ff00000 	.word	0x7ff00000
 800c0a8:	39500000 	.word	0x39500000
 800c0ac:	000fffff 	.word	0x000fffff
 800c0b0:	7fefffff 	.word	0x7fefffff
 800c0b4:	0800dab0 	.word	0x0800dab0
 800c0b8:	4659      	mov	r1, fp
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f7ff fac0 	bl	800b640 <__ratio>
 800c0c0:	ec57 6b10 	vmov	r6, r7, d0
 800c0c4:	ee10 0a10 	vmov	r0, s0
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	f7f4 fd16 	bl	8000b00 <__aeabi_dcmple>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d071      	beq.n	800c1bc <_strtod_l+0xa54>
 800c0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d17c      	bne.n	800c1d8 <_strtod_l+0xa70>
 800c0de:	f1b8 0f00 	cmp.w	r8, #0
 800c0e2:	d15a      	bne.n	800c19a <_strtod_l+0xa32>
 800c0e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d15d      	bne.n	800c1a8 <_strtod_l+0xa40>
 800c0ec:	4b90      	ldr	r3, [pc, #576]	; (800c330 <_strtod_l+0xbc8>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	4639      	mov	r1, r7
 800c0f4:	f7f4 fcfa 	bl	8000aec <__aeabi_dcmplt>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d15c      	bne.n	800c1b6 <_strtod_l+0xa4e>
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	4639      	mov	r1, r7
 800c100:	4b8c      	ldr	r3, [pc, #560]	; (800c334 <_strtod_l+0xbcc>)
 800c102:	2200      	movs	r2, #0
 800c104:	f7f4 fa80 	bl	8000608 <__aeabi_dmul>
 800c108:	4606      	mov	r6, r0
 800c10a:	460f      	mov	r7, r1
 800c10c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c110:	9606      	str	r6, [sp, #24]
 800c112:	9307      	str	r3, [sp, #28]
 800c114:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c118:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c11c:	4b86      	ldr	r3, [pc, #536]	; (800c338 <_strtod_l+0xbd0>)
 800c11e:	ea0a 0303 	and.w	r3, sl, r3
 800c122:	930d      	str	r3, [sp, #52]	; 0x34
 800c124:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c126:	4b85      	ldr	r3, [pc, #532]	; (800c33c <_strtod_l+0xbd4>)
 800c128:	429a      	cmp	r2, r3
 800c12a:	f040 8090 	bne.w	800c24e <_strtod_l+0xae6>
 800c12e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c132:	ec49 8b10 	vmov	d0, r8, r9
 800c136:	f7ff f9b9 	bl	800b4ac <__ulp>
 800c13a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c13e:	ec51 0b10 	vmov	r0, r1, d0
 800c142:	f7f4 fa61 	bl	8000608 <__aeabi_dmul>
 800c146:	4642      	mov	r2, r8
 800c148:	464b      	mov	r3, r9
 800c14a:	f7f4 f8a7 	bl	800029c <__adddf3>
 800c14e:	460b      	mov	r3, r1
 800c150:	4979      	ldr	r1, [pc, #484]	; (800c338 <_strtod_l+0xbd0>)
 800c152:	4a7b      	ldr	r2, [pc, #492]	; (800c340 <_strtod_l+0xbd8>)
 800c154:	4019      	ands	r1, r3
 800c156:	4291      	cmp	r1, r2
 800c158:	4680      	mov	r8, r0
 800c15a:	d944      	bls.n	800c1e6 <_strtod_l+0xa7e>
 800c15c:	ee18 2a90 	vmov	r2, s17
 800c160:	4b78      	ldr	r3, [pc, #480]	; (800c344 <_strtod_l+0xbdc>)
 800c162:	429a      	cmp	r2, r3
 800c164:	d104      	bne.n	800c170 <_strtod_l+0xa08>
 800c166:	ee18 3a10 	vmov	r3, s16
 800c16a:	3301      	adds	r3, #1
 800c16c:	f43f ad40 	beq.w	800bbf0 <_strtod_l+0x488>
 800c170:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c344 <_strtod_l+0xbdc>
 800c174:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c178:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c17a:	4620      	mov	r0, r4
 800c17c:	f7fe fe6a 	bl	800ae54 <_Bfree>
 800c180:	9905      	ldr	r1, [sp, #20]
 800c182:	4620      	mov	r0, r4
 800c184:	f7fe fe66 	bl	800ae54 <_Bfree>
 800c188:	4659      	mov	r1, fp
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7fe fe62 	bl	800ae54 <_Bfree>
 800c190:	4629      	mov	r1, r5
 800c192:	4620      	mov	r0, r4
 800c194:	f7fe fe5e 	bl	800ae54 <_Bfree>
 800c198:	e609      	b.n	800bdae <_strtod_l+0x646>
 800c19a:	f1b8 0f01 	cmp.w	r8, #1
 800c19e:	d103      	bne.n	800c1a8 <_strtod_l+0xa40>
 800c1a0:	f1b9 0f00 	cmp.w	r9, #0
 800c1a4:	f43f ad95 	beq.w	800bcd2 <_strtod_l+0x56a>
 800c1a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c300 <_strtod_l+0xb98>
 800c1ac:	4f60      	ldr	r7, [pc, #384]	; (800c330 <_strtod_l+0xbc8>)
 800c1ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1b2:	2600      	movs	r6, #0
 800c1b4:	e7ae      	b.n	800c114 <_strtod_l+0x9ac>
 800c1b6:	4f5f      	ldr	r7, [pc, #380]	; (800c334 <_strtod_l+0xbcc>)
 800c1b8:	2600      	movs	r6, #0
 800c1ba:	e7a7      	b.n	800c10c <_strtod_l+0x9a4>
 800c1bc:	4b5d      	ldr	r3, [pc, #372]	; (800c334 <_strtod_l+0xbcc>)
 800c1be:	4630      	mov	r0, r6
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f7f4 fa20 	bl	8000608 <__aeabi_dmul>
 800c1c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	460f      	mov	r7, r1
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d09c      	beq.n	800c10c <_strtod_l+0x9a4>
 800c1d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c1d6:	e79d      	b.n	800c114 <_strtod_l+0x9ac>
 800c1d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c308 <_strtod_l+0xba0>
 800c1dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1e0:	ec57 6b17 	vmov	r6, r7, d7
 800c1e4:	e796      	b.n	800c114 <_strtod_l+0x9ac>
 800c1e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c1ea:	9b04      	ldr	r3, [sp, #16]
 800c1ec:	46ca      	mov	sl, r9
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1c2      	bne.n	800c178 <_strtod_l+0xa10>
 800c1f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c1f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1f8:	0d1b      	lsrs	r3, r3, #20
 800c1fa:	051b      	lsls	r3, r3, #20
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d1bb      	bne.n	800c178 <_strtod_l+0xa10>
 800c200:	4630      	mov	r0, r6
 800c202:	4639      	mov	r1, r7
 800c204:	f7f4 fd60 	bl	8000cc8 <__aeabi_d2lz>
 800c208:	f7f4 f9d0 	bl	80005ac <__aeabi_l2d>
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	4630      	mov	r0, r6
 800c212:	4639      	mov	r1, r7
 800c214:	f7f4 f840 	bl	8000298 <__aeabi_dsub>
 800c218:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c21a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c21e:	ea43 0308 	orr.w	r3, r3, r8
 800c222:	4313      	orrs	r3, r2
 800c224:	4606      	mov	r6, r0
 800c226:	460f      	mov	r7, r1
 800c228:	d054      	beq.n	800c2d4 <_strtod_l+0xb6c>
 800c22a:	a339      	add	r3, pc, #228	; (adr r3, 800c310 <_strtod_l+0xba8>)
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	f7f4 fc5c 	bl	8000aec <__aeabi_dcmplt>
 800c234:	2800      	cmp	r0, #0
 800c236:	f47f ace5 	bne.w	800bc04 <_strtod_l+0x49c>
 800c23a:	a337      	add	r3, pc, #220	; (adr r3, 800c318 <_strtod_l+0xbb0>)
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	4630      	mov	r0, r6
 800c242:	4639      	mov	r1, r7
 800c244:	f7f4 fc70 	bl	8000b28 <__aeabi_dcmpgt>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d095      	beq.n	800c178 <_strtod_l+0xa10>
 800c24c:	e4da      	b.n	800bc04 <_strtod_l+0x49c>
 800c24e:	9b04      	ldr	r3, [sp, #16]
 800c250:	b333      	cbz	r3, 800c2a0 <_strtod_l+0xb38>
 800c252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c254:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c258:	d822      	bhi.n	800c2a0 <_strtod_l+0xb38>
 800c25a:	a331      	add	r3, pc, #196	; (adr r3, 800c320 <_strtod_l+0xbb8>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	4630      	mov	r0, r6
 800c262:	4639      	mov	r1, r7
 800c264:	f7f4 fc4c 	bl	8000b00 <__aeabi_dcmple>
 800c268:	b1a0      	cbz	r0, 800c294 <_strtod_l+0xb2c>
 800c26a:	4639      	mov	r1, r7
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7f4 fca3 	bl	8000bb8 <__aeabi_d2uiz>
 800c272:	2801      	cmp	r0, #1
 800c274:	bf38      	it	cc
 800c276:	2001      	movcc	r0, #1
 800c278:	f7f4 f94c 	bl	8000514 <__aeabi_ui2d>
 800c27c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c27e:	4606      	mov	r6, r0
 800c280:	460f      	mov	r7, r1
 800c282:	bb23      	cbnz	r3, 800c2ce <_strtod_l+0xb66>
 800c284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c288:	9010      	str	r0, [sp, #64]	; 0x40
 800c28a:	9311      	str	r3, [sp, #68]	; 0x44
 800c28c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c290:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c298:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c29c:	1a9b      	subs	r3, r3, r2
 800c29e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c2a4:	eeb0 0a48 	vmov.f32	s0, s16
 800c2a8:	eef0 0a68 	vmov.f32	s1, s17
 800c2ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c2b0:	f7ff f8fc 	bl	800b4ac <__ulp>
 800c2b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c2b8:	ec53 2b10 	vmov	r2, r3, d0
 800c2bc:	f7f4 f9a4 	bl	8000608 <__aeabi_dmul>
 800c2c0:	ec53 2b18 	vmov	r2, r3, d8
 800c2c4:	f7f3 ffea 	bl	800029c <__adddf3>
 800c2c8:	4680      	mov	r8, r0
 800c2ca:	4689      	mov	r9, r1
 800c2cc:	e78d      	b.n	800c1ea <_strtod_l+0xa82>
 800c2ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c2d2:	e7db      	b.n	800c28c <_strtod_l+0xb24>
 800c2d4:	a314      	add	r3, pc, #80	; (adr r3, 800c328 <_strtod_l+0xbc0>)
 800c2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2da:	f7f4 fc07 	bl	8000aec <__aeabi_dcmplt>
 800c2de:	e7b3      	b.n	800c248 <_strtod_l+0xae0>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c2e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2e8:	6013      	str	r3, [r2, #0]
 800c2ea:	f7ff ba7c 	b.w	800b7e6 <_strtod_l+0x7e>
 800c2ee:	2a65      	cmp	r2, #101	; 0x65
 800c2f0:	f43f ab75 	beq.w	800b9de <_strtod_l+0x276>
 800c2f4:	2a45      	cmp	r2, #69	; 0x45
 800c2f6:	f43f ab72 	beq.w	800b9de <_strtod_l+0x276>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	f7ff bbaa 	b.w	800ba54 <_strtod_l+0x2ec>
 800c300:	00000000 	.word	0x00000000
 800c304:	bff00000 	.word	0xbff00000
 800c308:	00000000 	.word	0x00000000
 800c30c:	3ff00000 	.word	0x3ff00000
 800c310:	94a03595 	.word	0x94a03595
 800c314:	3fdfffff 	.word	0x3fdfffff
 800c318:	35afe535 	.word	0x35afe535
 800c31c:	3fe00000 	.word	0x3fe00000
 800c320:	ffc00000 	.word	0xffc00000
 800c324:	41dfffff 	.word	0x41dfffff
 800c328:	94a03595 	.word	0x94a03595
 800c32c:	3fcfffff 	.word	0x3fcfffff
 800c330:	3ff00000 	.word	0x3ff00000
 800c334:	3fe00000 	.word	0x3fe00000
 800c338:	7ff00000 	.word	0x7ff00000
 800c33c:	7fe00000 	.word	0x7fe00000
 800c340:	7c9fffff 	.word	0x7c9fffff
 800c344:	7fefffff 	.word	0x7fefffff

0800c348 <_strtod_r>:
 800c348:	4b01      	ldr	r3, [pc, #4]	; (800c350 <_strtod_r+0x8>)
 800c34a:	f7ff ba0d 	b.w	800b768 <_strtod_l>
 800c34e:	bf00      	nop
 800c350:	2000006c 	.word	0x2000006c

0800c354 <_strtol_l.constprop.0>:
 800c354:	2b01      	cmp	r3, #1
 800c356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c35a:	d001      	beq.n	800c360 <_strtol_l.constprop.0+0xc>
 800c35c:	2b24      	cmp	r3, #36	; 0x24
 800c35e:	d906      	bls.n	800c36e <_strtol_l.constprop.0+0x1a>
 800c360:	f7fd fd7a 	bl	8009e58 <__errno>
 800c364:	2316      	movs	r3, #22
 800c366:	6003      	str	r3, [r0, #0]
 800c368:	2000      	movs	r0, #0
 800c36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c454 <_strtol_l.constprop.0+0x100>
 800c372:	460d      	mov	r5, r1
 800c374:	462e      	mov	r6, r5
 800c376:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c37a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c37e:	f017 0708 	ands.w	r7, r7, #8
 800c382:	d1f7      	bne.n	800c374 <_strtol_l.constprop.0+0x20>
 800c384:	2c2d      	cmp	r4, #45	; 0x2d
 800c386:	d132      	bne.n	800c3ee <_strtol_l.constprop.0+0x9a>
 800c388:	782c      	ldrb	r4, [r5, #0]
 800c38a:	2701      	movs	r7, #1
 800c38c:	1cb5      	adds	r5, r6, #2
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d05b      	beq.n	800c44a <_strtol_l.constprop.0+0xf6>
 800c392:	2b10      	cmp	r3, #16
 800c394:	d109      	bne.n	800c3aa <_strtol_l.constprop.0+0x56>
 800c396:	2c30      	cmp	r4, #48	; 0x30
 800c398:	d107      	bne.n	800c3aa <_strtol_l.constprop.0+0x56>
 800c39a:	782c      	ldrb	r4, [r5, #0]
 800c39c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c3a0:	2c58      	cmp	r4, #88	; 0x58
 800c3a2:	d14d      	bne.n	800c440 <_strtol_l.constprop.0+0xec>
 800c3a4:	786c      	ldrb	r4, [r5, #1]
 800c3a6:	2310      	movs	r3, #16
 800c3a8:	3502      	adds	r5, #2
 800c3aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c3ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c3b2:	f04f 0e00 	mov.w	lr, #0
 800c3b6:	fbb8 f9f3 	udiv	r9, r8, r3
 800c3ba:	4676      	mov	r6, lr
 800c3bc:	fb03 8a19 	mls	sl, r3, r9, r8
 800c3c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c3c4:	f1bc 0f09 	cmp.w	ip, #9
 800c3c8:	d816      	bhi.n	800c3f8 <_strtol_l.constprop.0+0xa4>
 800c3ca:	4664      	mov	r4, ip
 800c3cc:	42a3      	cmp	r3, r4
 800c3ce:	dd24      	ble.n	800c41a <_strtol_l.constprop.0+0xc6>
 800c3d0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c3d4:	d008      	beq.n	800c3e8 <_strtol_l.constprop.0+0x94>
 800c3d6:	45b1      	cmp	r9, r6
 800c3d8:	d31c      	bcc.n	800c414 <_strtol_l.constprop.0+0xc0>
 800c3da:	d101      	bne.n	800c3e0 <_strtol_l.constprop.0+0x8c>
 800c3dc:	45a2      	cmp	sl, r4
 800c3de:	db19      	blt.n	800c414 <_strtol_l.constprop.0+0xc0>
 800c3e0:	fb06 4603 	mla	r6, r6, r3, r4
 800c3e4:	f04f 0e01 	mov.w	lr, #1
 800c3e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3ec:	e7e8      	b.n	800c3c0 <_strtol_l.constprop.0+0x6c>
 800c3ee:	2c2b      	cmp	r4, #43	; 0x2b
 800c3f0:	bf04      	itt	eq
 800c3f2:	782c      	ldrbeq	r4, [r5, #0]
 800c3f4:	1cb5      	addeq	r5, r6, #2
 800c3f6:	e7ca      	b.n	800c38e <_strtol_l.constprop.0+0x3a>
 800c3f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c3fc:	f1bc 0f19 	cmp.w	ip, #25
 800c400:	d801      	bhi.n	800c406 <_strtol_l.constprop.0+0xb2>
 800c402:	3c37      	subs	r4, #55	; 0x37
 800c404:	e7e2      	b.n	800c3cc <_strtol_l.constprop.0+0x78>
 800c406:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c40a:	f1bc 0f19 	cmp.w	ip, #25
 800c40e:	d804      	bhi.n	800c41a <_strtol_l.constprop.0+0xc6>
 800c410:	3c57      	subs	r4, #87	; 0x57
 800c412:	e7db      	b.n	800c3cc <_strtol_l.constprop.0+0x78>
 800c414:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c418:	e7e6      	b.n	800c3e8 <_strtol_l.constprop.0+0x94>
 800c41a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c41e:	d105      	bne.n	800c42c <_strtol_l.constprop.0+0xd8>
 800c420:	2322      	movs	r3, #34	; 0x22
 800c422:	6003      	str	r3, [r0, #0]
 800c424:	4646      	mov	r6, r8
 800c426:	b942      	cbnz	r2, 800c43a <_strtol_l.constprop.0+0xe6>
 800c428:	4630      	mov	r0, r6
 800c42a:	e79e      	b.n	800c36a <_strtol_l.constprop.0+0x16>
 800c42c:	b107      	cbz	r7, 800c430 <_strtol_l.constprop.0+0xdc>
 800c42e:	4276      	negs	r6, r6
 800c430:	2a00      	cmp	r2, #0
 800c432:	d0f9      	beq.n	800c428 <_strtol_l.constprop.0+0xd4>
 800c434:	f1be 0f00 	cmp.w	lr, #0
 800c438:	d000      	beq.n	800c43c <_strtol_l.constprop.0+0xe8>
 800c43a:	1e69      	subs	r1, r5, #1
 800c43c:	6011      	str	r1, [r2, #0]
 800c43e:	e7f3      	b.n	800c428 <_strtol_l.constprop.0+0xd4>
 800c440:	2430      	movs	r4, #48	; 0x30
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1b1      	bne.n	800c3aa <_strtol_l.constprop.0+0x56>
 800c446:	2308      	movs	r3, #8
 800c448:	e7af      	b.n	800c3aa <_strtol_l.constprop.0+0x56>
 800c44a:	2c30      	cmp	r4, #48	; 0x30
 800c44c:	d0a5      	beq.n	800c39a <_strtol_l.constprop.0+0x46>
 800c44e:	230a      	movs	r3, #10
 800c450:	e7ab      	b.n	800c3aa <_strtol_l.constprop.0+0x56>
 800c452:	bf00      	nop
 800c454:	0800dad9 	.word	0x0800dad9

0800c458 <_strtol_r>:
 800c458:	f7ff bf7c 	b.w	800c354 <_strtol_l.constprop.0>

0800c45c <__ssputs_r>:
 800c45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c460:	688e      	ldr	r6, [r1, #8]
 800c462:	461f      	mov	r7, r3
 800c464:	42be      	cmp	r6, r7
 800c466:	680b      	ldr	r3, [r1, #0]
 800c468:	4682      	mov	sl, r0
 800c46a:	460c      	mov	r4, r1
 800c46c:	4690      	mov	r8, r2
 800c46e:	d82c      	bhi.n	800c4ca <__ssputs_r+0x6e>
 800c470:	898a      	ldrh	r2, [r1, #12]
 800c472:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c476:	d026      	beq.n	800c4c6 <__ssputs_r+0x6a>
 800c478:	6965      	ldr	r5, [r4, #20]
 800c47a:	6909      	ldr	r1, [r1, #16]
 800c47c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c480:	eba3 0901 	sub.w	r9, r3, r1
 800c484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c488:	1c7b      	adds	r3, r7, #1
 800c48a:	444b      	add	r3, r9
 800c48c:	106d      	asrs	r5, r5, #1
 800c48e:	429d      	cmp	r5, r3
 800c490:	bf38      	it	cc
 800c492:	461d      	movcc	r5, r3
 800c494:	0553      	lsls	r3, r2, #21
 800c496:	d527      	bpl.n	800c4e8 <__ssputs_r+0x8c>
 800c498:	4629      	mov	r1, r5
 800c49a:	f7fe fc0f 	bl	800acbc <_malloc_r>
 800c49e:	4606      	mov	r6, r0
 800c4a0:	b360      	cbz	r0, 800c4fc <__ssputs_r+0xa0>
 800c4a2:	6921      	ldr	r1, [r4, #16]
 800c4a4:	464a      	mov	r2, r9
 800c4a6:	f7fd fd04 	bl	8009eb2 <memcpy>
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4b4:	81a3      	strh	r3, [r4, #12]
 800c4b6:	6126      	str	r6, [r4, #16]
 800c4b8:	6165      	str	r5, [r4, #20]
 800c4ba:	444e      	add	r6, r9
 800c4bc:	eba5 0509 	sub.w	r5, r5, r9
 800c4c0:	6026      	str	r6, [r4, #0]
 800c4c2:	60a5      	str	r5, [r4, #8]
 800c4c4:	463e      	mov	r6, r7
 800c4c6:	42be      	cmp	r6, r7
 800c4c8:	d900      	bls.n	800c4cc <__ssputs_r+0x70>
 800c4ca:	463e      	mov	r6, r7
 800c4cc:	6820      	ldr	r0, [r4, #0]
 800c4ce:	4632      	mov	r2, r6
 800c4d0:	4641      	mov	r1, r8
 800c4d2:	f000 fa2b 	bl	800c92c <memmove>
 800c4d6:	68a3      	ldr	r3, [r4, #8]
 800c4d8:	1b9b      	subs	r3, r3, r6
 800c4da:	60a3      	str	r3, [r4, #8]
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	4433      	add	r3, r6
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e8:	462a      	mov	r2, r5
 800c4ea:	f000 fe22 	bl	800d132 <_realloc_r>
 800c4ee:	4606      	mov	r6, r0
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d1e0      	bne.n	800c4b6 <__ssputs_r+0x5a>
 800c4f4:	6921      	ldr	r1, [r4, #16]
 800c4f6:	4650      	mov	r0, sl
 800c4f8:	f7fe fb6c 	bl	800abd4 <_free_r>
 800c4fc:	230c      	movs	r3, #12
 800c4fe:	f8ca 3000 	str.w	r3, [sl]
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c508:	81a3      	strh	r3, [r4, #12]
 800c50a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c50e:	e7e9      	b.n	800c4e4 <__ssputs_r+0x88>

0800c510 <_svfiprintf_r>:
 800c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	4698      	mov	r8, r3
 800c516:	898b      	ldrh	r3, [r1, #12]
 800c518:	061b      	lsls	r3, r3, #24
 800c51a:	b09d      	sub	sp, #116	; 0x74
 800c51c:	4607      	mov	r7, r0
 800c51e:	460d      	mov	r5, r1
 800c520:	4614      	mov	r4, r2
 800c522:	d50e      	bpl.n	800c542 <_svfiprintf_r+0x32>
 800c524:	690b      	ldr	r3, [r1, #16]
 800c526:	b963      	cbnz	r3, 800c542 <_svfiprintf_r+0x32>
 800c528:	2140      	movs	r1, #64	; 0x40
 800c52a:	f7fe fbc7 	bl	800acbc <_malloc_r>
 800c52e:	6028      	str	r0, [r5, #0]
 800c530:	6128      	str	r0, [r5, #16]
 800c532:	b920      	cbnz	r0, 800c53e <_svfiprintf_r+0x2e>
 800c534:	230c      	movs	r3, #12
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c53c:	e0d0      	b.n	800c6e0 <_svfiprintf_r+0x1d0>
 800c53e:	2340      	movs	r3, #64	; 0x40
 800c540:	616b      	str	r3, [r5, #20]
 800c542:	2300      	movs	r3, #0
 800c544:	9309      	str	r3, [sp, #36]	; 0x24
 800c546:	2320      	movs	r3, #32
 800c548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c54c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c550:	2330      	movs	r3, #48	; 0x30
 800c552:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c6f8 <_svfiprintf_r+0x1e8>
 800c556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c55a:	f04f 0901 	mov.w	r9, #1
 800c55e:	4623      	mov	r3, r4
 800c560:	469a      	mov	sl, r3
 800c562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c566:	b10a      	cbz	r2, 800c56c <_svfiprintf_r+0x5c>
 800c568:	2a25      	cmp	r2, #37	; 0x25
 800c56a:	d1f9      	bne.n	800c560 <_svfiprintf_r+0x50>
 800c56c:	ebba 0b04 	subs.w	fp, sl, r4
 800c570:	d00b      	beq.n	800c58a <_svfiprintf_r+0x7a>
 800c572:	465b      	mov	r3, fp
 800c574:	4622      	mov	r2, r4
 800c576:	4629      	mov	r1, r5
 800c578:	4638      	mov	r0, r7
 800c57a:	f7ff ff6f 	bl	800c45c <__ssputs_r>
 800c57e:	3001      	adds	r0, #1
 800c580:	f000 80a9 	beq.w	800c6d6 <_svfiprintf_r+0x1c6>
 800c584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c586:	445a      	add	r2, fp
 800c588:	9209      	str	r2, [sp, #36]	; 0x24
 800c58a:	f89a 3000 	ldrb.w	r3, [sl]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f000 80a1 	beq.w	800c6d6 <_svfiprintf_r+0x1c6>
 800c594:	2300      	movs	r3, #0
 800c596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c59a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c59e:	f10a 0a01 	add.w	sl, sl, #1
 800c5a2:	9304      	str	r3, [sp, #16]
 800c5a4:	9307      	str	r3, [sp, #28]
 800c5a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c5ac:	4654      	mov	r4, sl
 800c5ae:	2205      	movs	r2, #5
 800c5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b4:	4850      	ldr	r0, [pc, #320]	; (800c6f8 <_svfiprintf_r+0x1e8>)
 800c5b6:	f7f3 fe13 	bl	80001e0 <memchr>
 800c5ba:	9a04      	ldr	r2, [sp, #16]
 800c5bc:	b9d8      	cbnz	r0, 800c5f6 <_svfiprintf_r+0xe6>
 800c5be:	06d0      	lsls	r0, r2, #27
 800c5c0:	bf44      	itt	mi
 800c5c2:	2320      	movmi	r3, #32
 800c5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c8:	0711      	lsls	r1, r2, #28
 800c5ca:	bf44      	itt	mi
 800c5cc:	232b      	movmi	r3, #43	; 0x2b
 800c5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5d8:	d015      	beq.n	800c606 <_svfiprintf_r+0xf6>
 800c5da:	9a07      	ldr	r2, [sp, #28]
 800c5dc:	4654      	mov	r4, sl
 800c5de:	2000      	movs	r0, #0
 800c5e0:	f04f 0c0a 	mov.w	ip, #10
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ea:	3b30      	subs	r3, #48	; 0x30
 800c5ec:	2b09      	cmp	r3, #9
 800c5ee:	d94d      	bls.n	800c68c <_svfiprintf_r+0x17c>
 800c5f0:	b1b0      	cbz	r0, 800c620 <_svfiprintf_r+0x110>
 800c5f2:	9207      	str	r2, [sp, #28]
 800c5f4:	e014      	b.n	800c620 <_svfiprintf_r+0x110>
 800c5f6:	eba0 0308 	sub.w	r3, r0, r8
 800c5fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c5fe:	4313      	orrs	r3, r2
 800c600:	9304      	str	r3, [sp, #16]
 800c602:	46a2      	mov	sl, r4
 800c604:	e7d2      	b.n	800c5ac <_svfiprintf_r+0x9c>
 800c606:	9b03      	ldr	r3, [sp, #12]
 800c608:	1d19      	adds	r1, r3, #4
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	9103      	str	r1, [sp, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	bfbb      	ittet	lt
 800c612:	425b      	neglt	r3, r3
 800c614:	f042 0202 	orrlt.w	r2, r2, #2
 800c618:	9307      	strge	r3, [sp, #28]
 800c61a:	9307      	strlt	r3, [sp, #28]
 800c61c:	bfb8      	it	lt
 800c61e:	9204      	strlt	r2, [sp, #16]
 800c620:	7823      	ldrb	r3, [r4, #0]
 800c622:	2b2e      	cmp	r3, #46	; 0x2e
 800c624:	d10c      	bne.n	800c640 <_svfiprintf_r+0x130>
 800c626:	7863      	ldrb	r3, [r4, #1]
 800c628:	2b2a      	cmp	r3, #42	; 0x2a
 800c62a:	d134      	bne.n	800c696 <_svfiprintf_r+0x186>
 800c62c:	9b03      	ldr	r3, [sp, #12]
 800c62e:	1d1a      	adds	r2, r3, #4
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	9203      	str	r2, [sp, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	bfb8      	it	lt
 800c638:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c63c:	3402      	adds	r4, #2
 800c63e:	9305      	str	r3, [sp, #20]
 800c640:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c708 <_svfiprintf_r+0x1f8>
 800c644:	7821      	ldrb	r1, [r4, #0]
 800c646:	2203      	movs	r2, #3
 800c648:	4650      	mov	r0, sl
 800c64a:	f7f3 fdc9 	bl	80001e0 <memchr>
 800c64e:	b138      	cbz	r0, 800c660 <_svfiprintf_r+0x150>
 800c650:	9b04      	ldr	r3, [sp, #16]
 800c652:	eba0 000a 	sub.w	r0, r0, sl
 800c656:	2240      	movs	r2, #64	; 0x40
 800c658:	4082      	lsls	r2, r0
 800c65a:	4313      	orrs	r3, r2
 800c65c:	3401      	adds	r4, #1
 800c65e:	9304      	str	r3, [sp, #16]
 800c660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c664:	4825      	ldr	r0, [pc, #148]	; (800c6fc <_svfiprintf_r+0x1ec>)
 800c666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c66a:	2206      	movs	r2, #6
 800c66c:	f7f3 fdb8 	bl	80001e0 <memchr>
 800c670:	2800      	cmp	r0, #0
 800c672:	d038      	beq.n	800c6e6 <_svfiprintf_r+0x1d6>
 800c674:	4b22      	ldr	r3, [pc, #136]	; (800c700 <_svfiprintf_r+0x1f0>)
 800c676:	bb1b      	cbnz	r3, 800c6c0 <_svfiprintf_r+0x1b0>
 800c678:	9b03      	ldr	r3, [sp, #12]
 800c67a:	3307      	adds	r3, #7
 800c67c:	f023 0307 	bic.w	r3, r3, #7
 800c680:	3308      	adds	r3, #8
 800c682:	9303      	str	r3, [sp, #12]
 800c684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c686:	4433      	add	r3, r6
 800c688:	9309      	str	r3, [sp, #36]	; 0x24
 800c68a:	e768      	b.n	800c55e <_svfiprintf_r+0x4e>
 800c68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c690:	460c      	mov	r4, r1
 800c692:	2001      	movs	r0, #1
 800c694:	e7a6      	b.n	800c5e4 <_svfiprintf_r+0xd4>
 800c696:	2300      	movs	r3, #0
 800c698:	3401      	adds	r4, #1
 800c69a:	9305      	str	r3, [sp, #20]
 800c69c:	4619      	mov	r1, r3
 800c69e:	f04f 0c0a 	mov.w	ip, #10
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6a8:	3a30      	subs	r2, #48	; 0x30
 800c6aa:	2a09      	cmp	r2, #9
 800c6ac:	d903      	bls.n	800c6b6 <_svfiprintf_r+0x1a6>
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d0c6      	beq.n	800c640 <_svfiprintf_r+0x130>
 800c6b2:	9105      	str	r1, [sp, #20]
 800c6b4:	e7c4      	b.n	800c640 <_svfiprintf_r+0x130>
 800c6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e7f0      	b.n	800c6a2 <_svfiprintf_r+0x192>
 800c6c0:	ab03      	add	r3, sp, #12
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	462a      	mov	r2, r5
 800c6c6:	4b0f      	ldr	r3, [pc, #60]	; (800c704 <_svfiprintf_r+0x1f4>)
 800c6c8:	a904      	add	r1, sp, #16
 800c6ca:	4638      	mov	r0, r7
 800c6cc:	f7fc faf6 	bl	8008cbc <_printf_float>
 800c6d0:	1c42      	adds	r2, r0, #1
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	d1d6      	bne.n	800c684 <_svfiprintf_r+0x174>
 800c6d6:	89ab      	ldrh	r3, [r5, #12]
 800c6d8:	065b      	lsls	r3, r3, #25
 800c6da:	f53f af2d 	bmi.w	800c538 <_svfiprintf_r+0x28>
 800c6de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6e0:	b01d      	add	sp, #116	; 0x74
 800c6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e6:	ab03      	add	r3, sp, #12
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	4b05      	ldr	r3, [pc, #20]	; (800c704 <_svfiprintf_r+0x1f4>)
 800c6ee:	a904      	add	r1, sp, #16
 800c6f0:	4638      	mov	r0, r7
 800c6f2:	f7fc fd87 	bl	8009204 <_printf_i>
 800c6f6:	e7eb      	b.n	800c6d0 <_svfiprintf_r+0x1c0>
 800c6f8:	0800dbd9 	.word	0x0800dbd9
 800c6fc:	0800dbe3 	.word	0x0800dbe3
 800c700:	08008cbd 	.word	0x08008cbd
 800c704:	0800c45d 	.word	0x0800c45d
 800c708:	0800dbdf 	.word	0x0800dbdf

0800c70c <__sflush_r>:
 800c70c:	898a      	ldrh	r2, [r1, #12]
 800c70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c712:	4605      	mov	r5, r0
 800c714:	0710      	lsls	r0, r2, #28
 800c716:	460c      	mov	r4, r1
 800c718:	d458      	bmi.n	800c7cc <__sflush_r+0xc0>
 800c71a:	684b      	ldr	r3, [r1, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	dc05      	bgt.n	800c72c <__sflush_r+0x20>
 800c720:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c722:	2b00      	cmp	r3, #0
 800c724:	dc02      	bgt.n	800c72c <__sflush_r+0x20>
 800c726:	2000      	movs	r0, #0
 800c728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c72c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c72e:	2e00      	cmp	r6, #0
 800c730:	d0f9      	beq.n	800c726 <__sflush_r+0x1a>
 800c732:	2300      	movs	r3, #0
 800c734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c738:	682f      	ldr	r7, [r5, #0]
 800c73a:	6a21      	ldr	r1, [r4, #32]
 800c73c:	602b      	str	r3, [r5, #0]
 800c73e:	d032      	beq.n	800c7a6 <__sflush_r+0x9a>
 800c740:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	075a      	lsls	r2, r3, #29
 800c746:	d505      	bpl.n	800c754 <__sflush_r+0x48>
 800c748:	6863      	ldr	r3, [r4, #4]
 800c74a:	1ac0      	subs	r0, r0, r3
 800c74c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c74e:	b10b      	cbz	r3, 800c754 <__sflush_r+0x48>
 800c750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c752:	1ac0      	subs	r0, r0, r3
 800c754:	2300      	movs	r3, #0
 800c756:	4602      	mov	r2, r0
 800c758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c75a:	6a21      	ldr	r1, [r4, #32]
 800c75c:	4628      	mov	r0, r5
 800c75e:	47b0      	blx	r6
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	89a3      	ldrh	r3, [r4, #12]
 800c764:	d106      	bne.n	800c774 <__sflush_r+0x68>
 800c766:	6829      	ldr	r1, [r5, #0]
 800c768:	291d      	cmp	r1, #29
 800c76a:	d82b      	bhi.n	800c7c4 <__sflush_r+0xb8>
 800c76c:	4a29      	ldr	r2, [pc, #164]	; (800c814 <__sflush_r+0x108>)
 800c76e:	410a      	asrs	r2, r1
 800c770:	07d6      	lsls	r6, r2, #31
 800c772:	d427      	bmi.n	800c7c4 <__sflush_r+0xb8>
 800c774:	2200      	movs	r2, #0
 800c776:	6062      	str	r2, [r4, #4]
 800c778:	04d9      	lsls	r1, r3, #19
 800c77a:	6922      	ldr	r2, [r4, #16]
 800c77c:	6022      	str	r2, [r4, #0]
 800c77e:	d504      	bpl.n	800c78a <__sflush_r+0x7e>
 800c780:	1c42      	adds	r2, r0, #1
 800c782:	d101      	bne.n	800c788 <__sflush_r+0x7c>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	b903      	cbnz	r3, 800c78a <__sflush_r+0x7e>
 800c788:	6560      	str	r0, [r4, #84]	; 0x54
 800c78a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c78c:	602f      	str	r7, [r5, #0]
 800c78e:	2900      	cmp	r1, #0
 800c790:	d0c9      	beq.n	800c726 <__sflush_r+0x1a>
 800c792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c796:	4299      	cmp	r1, r3
 800c798:	d002      	beq.n	800c7a0 <__sflush_r+0x94>
 800c79a:	4628      	mov	r0, r5
 800c79c:	f7fe fa1a 	bl	800abd4 <_free_r>
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	6360      	str	r0, [r4, #52]	; 0x34
 800c7a4:	e7c0      	b.n	800c728 <__sflush_r+0x1c>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	47b0      	blx	r6
 800c7ac:	1c41      	adds	r1, r0, #1
 800c7ae:	d1c8      	bne.n	800c742 <__sflush_r+0x36>
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d0c5      	beq.n	800c742 <__sflush_r+0x36>
 800c7b6:	2b1d      	cmp	r3, #29
 800c7b8:	d001      	beq.n	800c7be <__sflush_r+0xb2>
 800c7ba:	2b16      	cmp	r3, #22
 800c7bc:	d101      	bne.n	800c7c2 <__sflush_r+0xb6>
 800c7be:	602f      	str	r7, [r5, #0]
 800c7c0:	e7b1      	b.n	800c726 <__sflush_r+0x1a>
 800c7c2:	89a3      	ldrh	r3, [r4, #12]
 800c7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	e7ad      	b.n	800c728 <__sflush_r+0x1c>
 800c7cc:	690f      	ldr	r7, [r1, #16]
 800c7ce:	2f00      	cmp	r7, #0
 800c7d0:	d0a9      	beq.n	800c726 <__sflush_r+0x1a>
 800c7d2:	0793      	lsls	r3, r2, #30
 800c7d4:	680e      	ldr	r6, [r1, #0]
 800c7d6:	bf08      	it	eq
 800c7d8:	694b      	ldreq	r3, [r1, #20]
 800c7da:	600f      	str	r7, [r1, #0]
 800c7dc:	bf18      	it	ne
 800c7de:	2300      	movne	r3, #0
 800c7e0:	eba6 0807 	sub.w	r8, r6, r7
 800c7e4:	608b      	str	r3, [r1, #8]
 800c7e6:	f1b8 0f00 	cmp.w	r8, #0
 800c7ea:	dd9c      	ble.n	800c726 <__sflush_r+0x1a>
 800c7ec:	6a21      	ldr	r1, [r4, #32]
 800c7ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7f0:	4643      	mov	r3, r8
 800c7f2:	463a      	mov	r2, r7
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	47b0      	blx	r6
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	dc06      	bgt.n	800c80a <__sflush_r+0xfe>
 800c7fc:	89a3      	ldrh	r3, [r4, #12]
 800c7fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c802:	81a3      	strh	r3, [r4, #12]
 800c804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c808:	e78e      	b.n	800c728 <__sflush_r+0x1c>
 800c80a:	4407      	add	r7, r0
 800c80c:	eba8 0800 	sub.w	r8, r8, r0
 800c810:	e7e9      	b.n	800c7e6 <__sflush_r+0xda>
 800c812:	bf00      	nop
 800c814:	dfbffffe 	.word	0xdfbffffe

0800c818 <_fflush_r>:
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	690b      	ldr	r3, [r1, #16]
 800c81c:	4605      	mov	r5, r0
 800c81e:	460c      	mov	r4, r1
 800c820:	b913      	cbnz	r3, 800c828 <_fflush_r+0x10>
 800c822:	2500      	movs	r5, #0
 800c824:	4628      	mov	r0, r5
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	b118      	cbz	r0, 800c832 <_fflush_r+0x1a>
 800c82a:	6a03      	ldr	r3, [r0, #32]
 800c82c:	b90b      	cbnz	r3, 800c832 <_fflush_r+0x1a>
 800c82e:	f7fd f8a7 	bl	8009980 <__sinit>
 800c832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d0f3      	beq.n	800c822 <_fflush_r+0xa>
 800c83a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c83c:	07d0      	lsls	r0, r2, #31
 800c83e:	d404      	bmi.n	800c84a <_fflush_r+0x32>
 800c840:	0599      	lsls	r1, r3, #22
 800c842:	d402      	bmi.n	800c84a <_fflush_r+0x32>
 800c844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c846:	f7fd fb32 	bl	8009eae <__retarget_lock_acquire_recursive>
 800c84a:	4628      	mov	r0, r5
 800c84c:	4621      	mov	r1, r4
 800c84e:	f7ff ff5d 	bl	800c70c <__sflush_r>
 800c852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c854:	07da      	lsls	r2, r3, #31
 800c856:	4605      	mov	r5, r0
 800c858:	d4e4      	bmi.n	800c824 <_fflush_r+0xc>
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	059b      	lsls	r3, r3, #22
 800c85e:	d4e1      	bmi.n	800c824 <_fflush_r+0xc>
 800c860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c862:	f7fd fb25 	bl	8009eb0 <__retarget_lock_release_recursive>
 800c866:	e7dd      	b.n	800c824 <_fflush_r+0xc>

0800c868 <__swhatbuf_r>:
 800c868:	b570      	push	{r4, r5, r6, lr}
 800c86a:	460c      	mov	r4, r1
 800c86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c870:	2900      	cmp	r1, #0
 800c872:	b096      	sub	sp, #88	; 0x58
 800c874:	4615      	mov	r5, r2
 800c876:	461e      	mov	r6, r3
 800c878:	da0d      	bge.n	800c896 <__swhatbuf_r+0x2e>
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c880:	f04f 0100 	mov.w	r1, #0
 800c884:	bf0c      	ite	eq
 800c886:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c88a:	2340      	movne	r3, #64	; 0x40
 800c88c:	2000      	movs	r0, #0
 800c88e:	6031      	str	r1, [r6, #0]
 800c890:	602b      	str	r3, [r5, #0]
 800c892:	b016      	add	sp, #88	; 0x58
 800c894:	bd70      	pop	{r4, r5, r6, pc}
 800c896:	466a      	mov	r2, sp
 800c898:	f000 f874 	bl	800c984 <_fstat_r>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	dbec      	blt.n	800c87a <__swhatbuf_r+0x12>
 800c8a0:	9901      	ldr	r1, [sp, #4]
 800c8a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c8a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c8aa:	4259      	negs	r1, r3
 800c8ac:	4159      	adcs	r1, r3
 800c8ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8b2:	e7eb      	b.n	800c88c <__swhatbuf_r+0x24>

0800c8b4 <__smakebuf_r>:
 800c8b4:	898b      	ldrh	r3, [r1, #12]
 800c8b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8b8:	079d      	lsls	r5, r3, #30
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	460c      	mov	r4, r1
 800c8be:	d507      	bpl.n	800c8d0 <__smakebuf_r+0x1c>
 800c8c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c8c4:	6023      	str	r3, [r4, #0]
 800c8c6:	6123      	str	r3, [r4, #16]
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	6163      	str	r3, [r4, #20]
 800c8cc:	b002      	add	sp, #8
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}
 800c8d0:	ab01      	add	r3, sp, #4
 800c8d2:	466a      	mov	r2, sp
 800c8d4:	f7ff ffc8 	bl	800c868 <__swhatbuf_r>
 800c8d8:	9900      	ldr	r1, [sp, #0]
 800c8da:	4605      	mov	r5, r0
 800c8dc:	4630      	mov	r0, r6
 800c8de:	f7fe f9ed 	bl	800acbc <_malloc_r>
 800c8e2:	b948      	cbnz	r0, 800c8f8 <__smakebuf_r+0x44>
 800c8e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8e8:	059a      	lsls	r2, r3, #22
 800c8ea:	d4ef      	bmi.n	800c8cc <__smakebuf_r+0x18>
 800c8ec:	f023 0303 	bic.w	r3, r3, #3
 800c8f0:	f043 0302 	orr.w	r3, r3, #2
 800c8f4:	81a3      	strh	r3, [r4, #12]
 800c8f6:	e7e3      	b.n	800c8c0 <__smakebuf_r+0xc>
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	6020      	str	r0, [r4, #0]
 800c8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	9b00      	ldr	r3, [sp, #0]
 800c904:	6163      	str	r3, [r4, #20]
 800c906:	9b01      	ldr	r3, [sp, #4]
 800c908:	6120      	str	r0, [r4, #16]
 800c90a:	b15b      	cbz	r3, 800c924 <__smakebuf_r+0x70>
 800c90c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c910:	4630      	mov	r0, r6
 800c912:	f000 f849 	bl	800c9a8 <_isatty_r>
 800c916:	b128      	cbz	r0, 800c924 <__smakebuf_r+0x70>
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	f023 0303 	bic.w	r3, r3, #3
 800c91e:	f043 0301 	orr.w	r3, r3, #1
 800c922:	81a3      	strh	r3, [r4, #12]
 800c924:	89a3      	ldrh	r3, [r4, #12]
 800c926:	431d      	orrs	r5, r3
 800c928:	81a5      	strh	r5, [r4, #12]
 800c92a:	e7cf      	b.n	800c8cc <__smakebuf_r+0x18>

0800c92c <memmove>:
 800c92c:	4288      	cmp	r0, r1
 800c92e:	b510      	push	{r4, lr}
 800c930:	eb01 0402 	add.w	r4, r1, r2
 800c934:	d902      	bls.n	800c93c <memmove+0x10>
 800c936:	4284      	cmp	r4, r0
 800c938:	4623      	mov	r3, r4
 800c93a:	d807      	bhi.n	800c94c <memmove+0x20>
 800c93c:	1e43      	subs	r3, r0, #1
 800c93e:	42a1      	cmp	r1, r4
 800c940:	d008      	beq.n	800c954 <memmove+0x28>
 800c942:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c94a:	e7f8      	b.n	800c93e <memmove+0x12>
 800c94c:	4402      	add	r2, r0
 800c94e:	4601      	mov	r1, r0
 800c950:	428a      	cmp	r2, r1
 800c952:	d100      	bne.n	800c956 <memmove+0x2a>
 800c954:	bd10      	pop	{r4, pc}
 800c956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c95a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c95e:	e7f7      	b.n	800c950 <memmove+0x24>

0800c960 <strncmp>:
 800c960:	b510      	push	{r4, lr}
 800c962:	b16a      	cbz	r2, 800c980 <strncmp+0x20>
 800c964:	3901      	subs	r1, #1
 800c966:	1884      	adds	r4, r0, r2
 800c968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c96c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c970:	429a      	cmp	r2, r3
 800c972:	d103      	bne.n	800c97c <strncmp+0x1c>
 800c974:	42a0      	cmp	r0, r4
 800c976:	d001      	beq.n	800c97c <strncmp+0x1c>
 800c978:	2a00      	cmp	r2, #0
 800c97a:	d1f5      	bne.n	800c968 <strncmp+0x8>
 800c97c:	1ad0      	subs	r0, r2, r3
 800c97e:	bd10      	pop	{r4, pc}
 800c980:	4610      	mov	r0, r2
 800c982:	e7fc      	b.n	800c97e <strncmp+0x1e>

0800c984 <_fstat_r>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	4d07      	ldr	r5, [pc, #28]	; (800c9a4 <_fstat_r+0x20>)
 800c988:	2300      	movs	r3, #0
 800c98a:	4604      	mov	r4, r0
 800c98c:	4608      	mov	r0, r1
 800c98e:	4611      	mov	r1, r2
 800c990:	602b      	str	r3, [r5, #0]
 800c992:	f7f5 f9f8 	bl	8001d86 <_fstat>
 800c996:	1c43      	adds	r3, r0, #1
 800c998:	d102      	bne.n	800c9a0 <_fstat_r+0x1c>
 800c99a:	682b      	ldr	r3, [r5, #0]
 800c99c:	b103      	cbz	r3, 800c9a0 <_fstat_r+0x1c>
 800c99e:	6023      	str	r3, [r4, #0]
 800c9a0:	bd38      	pop	{r3, r4, r5, pc}
 800c9a2:	bf00      	nop
 800c9a4:	200057dc 	.word	0x200057dc

0800c9a8 <_isatty_r>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	4d06      	ldr	r5, [pc, #24]	; (800c9c4 <_isatty_r+0x1c>)
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	4608      	mov	r0, r1
 800c9b2:	602b      	str	r3, [r5, #0]
 800c9b4:	f7f5 f9f7 	bl	8001da6 <_isatty>
 800c9b8:	1c43      	adds	r3, r0, #1
 800c9ba:	d102      	bne.n	800c9c2 <_isatty_r+0x1a>
 800c9bc:	682b      	ldr	r3, [r5, #0]
 800c9be:	b103      	cbz	r3, 800c9c2 <_isatty_r+0x1a>
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	bd38      	pop	{r3, r4, r5, pc}
 800c9c4:	200057dc 	.word	0x200057dc

0800c9c8 <_sbrk_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4d06      	ldr	r5, [pc, #24]	; (800c9e4 <_sbrk_r+0x1c>)
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	4608      	mov	r0, r1
 800c9d2:	602b      	str	r3, [r5, #0]
 800c9d4:	f7f5 fa00 	bl	8001dd8 <_sbrk>
 800c9d8:	1c43      	adds	r3, r0, #1
 800c9da:	d102      	bne.n	800c9e2 <_sbrk_r+0x1a>
 800c9dc:	682b      	ldr	r3, [r5, #0]
 800c9de:	b103      	cbz	r3, 800c9e2 <_sbrk_r+0x1a>
 800c9e0:	6023      	str	r3, [r4, #0]
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}
 800c9e4:	200057dc 	.word	0x200057dc

0800c9e8 <nan>:
 800c9e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c9f0 <nan+0x8>
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	00000000 	.word	0x00000000
 800c9f4:	7ff80000 	.word	0x7ff80000

0800c9f8 <__assert_func>:
 800c9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9fa:	4614      	mov	r4, r2
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	4b09      	ldr	r3, [pc, #36]	; (800ca24 <__assert_func+0x2c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4605      	mov	r5, r0
 800ca04:	68d8      	ldr	r0, [r3, #12]
 800ca06:	b14c      	cbz	r4, 800ca1c <__assert_func+0x24>
 800ca08:	4b07      	ldr	r3, [pc, #28]	; (800ca28 <__assert_func+0x30>)
 800ca0a:	9100      	str	r1, [sp, #0]
 800ca0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca10:	4906      	ldr	r1, [pc, #24]	; (800ca2c <__assert_func+0x34>)
 800ca12:	462b      	mov	r3, r5
 800ca14:	f000 fbca 	bl	800d1ac <fiprintf>
 800ca18:	f000 fbda 	bl	800d1d0 <abort>
 800ca1c:	4b04      	ldr	r3, [pc, #16]	; (800ca30 <__assert_func+0x38>)
 800ca1e:	461c      	mov	r4, r3
 800ca20:	e7f3      	b.n	800ca0a <__assert_func+0x12>
 800ca22:	bf00      	nop
 800ca24:	20000068 	.word	0x20000068
 800ca28:	0800dbf2 	.word	0x0800dbf2
 800ca2c:	0800dbff 	.word	0x0800dbff
 800ca30:	0800dc2d 	.word	0x0800dc2d

0800ca34 <_calloc_r>:
 800ca34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca36:	fba1 2402 	umull	r2, r4, r1, r2
 800ca3a:	b94c      	cbnz	r4, 800ca50 <_calloc_r+0x1c>
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	9201      	str	r2, [sp, #4]
 800ca40:	f7fe f93c 	bl	800acbc <_malloc_r>
 800ca44:	9a01      	ldr	r2, [sp, #4]
 800ca46:	4605      	mov	r5, r0
 800ca48:	b930      	cbnz	r0, 800ca58 <_calloc_r+0x24>
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	b003      	add	sp, #12
 800ca4e:	bd30      	pop	{r4, r5, pc}
 800ca50:	220c      	movs	r2, #12
 800ca52:	6002      	str	r2, [r0, #0]
 800ca54:	2500      	movs	r5, #0
 800ca56:	e7f8      	b.n	800ca4a <_calloc_r+0x16>
 800ca58:	4621      	mov	r1, r4
 800ca5a:	f7fd f955 	bl	8009d08 <memset>
 800ca5e:	e7f4      	b.n	800ca4a <_calloc_r+0x16>

0800ca60 <rshift>:
 800ca60:	6903      	ldr	r3, [r0, #16]
 800ca62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca6e:	f100 0414 	add.w	r4, r0, #20
 800ca72:	dd45      	ble.n	800cb00 <rshift+0xa0>
 800ca74:	f011 011f 	ands.w	r1, r1, #31
 800ca78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca80:	d10c      	bne.n	800ca9c <rshift+0x3c>
 800ca82:	f100 0710 	add.w	r7, r0, #16
 800ca86:	4629      	mov	r1, r5
 800ca88:	42b1      	cmp	r1, r6
 800ca8a:	d334      	bcc.n	800caf6 <rshift+0x96>
 800ca8c:	1a9b      	subs	r3, r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	1eea      	subs	r2, r5, #3
 800ca92:	4296      	cmp	r6, r2
 800ca94:	bf38      	it	cc
 800ca96:	2300      	movcc	r3, #0
 800ca98:	4423      	add	r3, r4
 800ca9a:	e015      	b.n	800cac8 <rshift+0x68>
 800ca9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800caa0:	f1c1 0820 	rsb	r8, r1, #32
 800caa4:	40cf      	lsrs	r7, r1
 800caa6:	f105 0e04 	add.w	lr, r5, #4
 800caaa:	46a1      	mov	r9, r4
 800caac:	4576      	cmp	r6, lr
 800caae:	46f4      	mov	ip, lr
 800cab0:	d815      	bhi.n	800cade <rshift+0x7e>
 800cab2:	1a9a      	subs	r2, r3, r2
 800cab4:	0092      	lsls	r2, r2, #2
 800cab6:	3a04      	subs	r2, #4
 800cab8:	3501      	adds	r5, #1
 800caba:	42ae      	cmp	r6, r5
 800cabc:	bf38      	it	cc
 800cabe:	2200      	movcc	r2, #0
 800cac0:	18a3      	adds	r3, r4, r2
 800cac2:	50a7      	str	r7, [r4, r2]
 800cac4:	b107      	cbz	r7, 800cac8 <rshift+0x68>
 800cac6:	3304      	adds	r3, #4
 800cac8:	1b1a      	subs	r2, r3, r4
 800caca:	42a3      	cmp	r3, r4
 800cacc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cad0:	bf08      	it	eq
 800cad2:	2300      	moveq	r3, #0
 800cad4:	6102      	str	r2, [r0, #16]
 800cad6:	bf08      	it	eq
 800cad8:	6143      	streq	r3, [r0, #20]
 800cada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cade:	f8dc c000 	ldr.w	ip, [ip]
 800cae2:	fa0c fc08 	lsl.w	ip, ip, r8
 800cae6:	ea4c 0707 	orr.w	r7, ip, r7
 800caea:	f849 7b04 	str.w	r7, [r9], #4
 800caee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800caf2:	40cf      	lsrs	r7, r1
 800caf4:	e7da      	b.n	800caac <rshift+0x4c>
 800caf6:	f851 cb04 	ldr.w	ip, [r1], #4
 800cafa:	f847 cf04 	str.w	ip, [r7, #4]!
 800cafe:	e7c3      	b.n	800ca88 <rshift+0x28>
 800cb00:	4623      	mov	r3, r4
 800cb02:	e7e1      	b.n	800cac8 <rshift+0x68>

0800cb04 <__hexdig_fun>:
 800cb04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cb08:	2b09      	cmp	r3, #9
 800cb0a:	d802      	bhi.n	800cb12 <__hexdig_fun+0xe>
 800cb0c:	3820      	subs	r0, #32
 800cb0e:	b2c0      	uxtb	r0, r0
 800cb10:	4770      	bx	lr
 800cb12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cb16:	2b05      	cmp	r3, #5
 800cb18:	d801      	bhi.n	800cb1e <__hexdig_fun+0x1a>
 800cb1a:	3847      	subs	r0, #71	; 0x47
 800cb1c:	e7f7      	b.n	800cb0e <__hexdig_fun+0xa>
 800cb1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cb22:	2b05      	cmp	r3, #5
 800cb24:	d801      	bhi.n	800cb2a <__hexdig_fun+0x26>
 800cb26:	3827      	subs	r0, #39	; 0x27
 800cb28:	e7f1      	b.n	800cb0e <__hexdig_fun+0xa>
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	4770      	bx	lr
	...

0800cb30 <__gethex>:
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	4617      	mov	r7, r2
 800cb36:	680a      	ldr	r2, [r1, #0]
 800cb38:	b085      	sub	sp, #20
 800cb3a:	f102 0b02 	add.w	fp, r2, #2
 800cb3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cb42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cb46:	4681      	mov	r9, r0
 800cb48:	468a      	mov	sl, r1
 800cb4a:	9302      	str	r3, [sp, #8]
 800cb4c:	32fe      	adds	r2, #254	; 0xfe
 800cb4e:	eb02 030b 	add.w	r3, r2, fp
 800cb52:	46d8      	mov	r8, fp
 800cb54:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cb58:	9301      	str	r3, [sp, #4]
 800cb5a:	2830      	cmp	r0, #48	; 0x30
 800cb5c:	d0f7      	beq.n	800cb4e <__gethex+0x1e>
 800cb5e:	f7ff ffd1 	bl	800cb04 <__hexdig_fun>
 800cb62:	4604      	mov	r4, r0
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d138      	bne.n	800cbda <__gethex+0xaa>
 800cb68:	49a7      	ldr	r1, [pc, #668]	; (800ce08 <__gethex+0x2d8>)
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	4640      	mov	r0, r8
 800cb6e:	f7ff fef7 	bl	800c960 <strncmp>
 800cb72:	4606      	mov	r6, r0
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d169      	bne.n	800cc4c <__gethex+0x11c>
 800cb78:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cb7c:	465d      	mov	r5, fp
 800cb7e:	f7ff ffc1 	bl	800cb04 <__hexdig_fun>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d064      	beq.n	800cc50 <__gethex+0x120>
 800cb86:	465a      	mov	r2, fp
 800cb88:	7810      	ldrb	r0, [r2, #0]
 800cb8a:	2830      	cmp	r0, #48	; 0x30
 800cb8c:	4690      	mov	r8, r2
 800cb8e:	f102 0201 	add.w	r2, r2, #1
 800cb92:	d0f9      	beq.n	800cb88 <__gethex+0x58>
 800cb94:	f7ff ffb6 	bl	800cb04 <__hexdig_fun>
 800cb98:	2301      	movs	r3, #1
 800cb9a:	fab0 f480 	clz	r4, r0
 800cb9e:	0964      	lsrs	r4, r4, #5
 800cba0:	465e      	mov	r6, fp
 800cba2:	9301      	str	r3, [sp, #4]
 800cba4:	4642      	mov	r2, r8
 800cba6:	4615      	mov	r5, r2
 800cba8:	3201      	adds	r2, #1
 800cbaa:	7828      	ldrb	r0, [r5, #0]
 800cbac:	f7ff ffaa 	bl	800cb04 <__hexdig_fun>
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d1f8      	bne.n	800cba6 <__gethex+0x76>
 800cbb4:	4994      	ldr	r1, [pc, #592]	; (800ce08 <__gethex+0x2d8>)
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f7ff fed1 	bl	800c960 <strncmp>
 800cbbe:	b978      	cbnz	r0, 800cbe0 <__gethex+0xb0>
 800cbc0:	b946      	cbnz	r6, 800cbd4 <__gethex+0xa4>
 800cbc2:	1c6e      	adds	r6, r5, #1
 800cbc4:	4632      	mov	r2, r6
 800cbc6:	4615      	mov	r5, r2
 800cbc8:	3201      	adds	r2, #1
 800cbca:	7828      	ldrb	r0, [r5, #0]
 800cbcc:	f7ff ff9a 	bl	800cb04 <__hexdig_fun>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d1f8      	bne.n	800cbc6 <__gethex+0x96>
 800cbd4:	1b73      	subs	r3, r6, r5
 800cbd6:	009e      	lsls	r6, r3, #2
 800cbd8:	e004      	b.n	800cbe4 <__gethex+0xb4>
 800cbda:	2400      	movs	r4, #0
 800cbdc:	4626      	mov	r6, r4
 800cbde:	e7e1      	b.n	800cba4 <__gethex+0x74>
 800cbe0:	2e00      	cmp	r6, #0
 800cbe2:	d1f7      	bne.n	800cbd4 <__gethex+0xa4>
 800cbe4:	782b      	ldrb	r3, [r5, #0]
 800cbe6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cbea:	2b50      	cmp	r3, #80	; 0x50
 800cbec:	d13d      	bne.n	800cc6a <__gethex+0x13a>
 800cbee:	786b      	ldrb	r3, [r5, #1]
 800cbf0:	2b2b      	cmp	r3, #43	; 0x2b
 800cbf2:	d02f      	beq.n	800cc54 <__gethex+0x124>
 800cbf4:	2b2d      	cmp	r3, #45	; 0x2d
 800cbf6:	d031      	beq.n	800cc5c <__gethex+0x12c>
 800cbf8:	1c69      	adds	r1, r5, #1
 800cbfa:	f04f 0b00 	mov.w	fp, #0
 800cbfe:	7808      	ldrb	r0, [r1, #0]
 800cc00:	f7ff ff80 	bl	800cb04 <__hexdig_fun>
 800cc04:	1e42      	subs	r2, r0, #1
 800cc06:	b2d2      	uxtb	r2, r2
 800cc08:	2a18      	cmp	r2, #24
 800cc0a:	d82e      	bhi.n	800cc6a <__gethex+0x13a>
 800cc0c:	f1a0 0210 	sub.w	r2, r0, #16
 800cc10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc14:	f7ff ff76 	bl	800cb04 <__hexdig_fun>
 800cc18:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800cc1c:	fa5f fc8c 	uxtb.w	ip, ip
 800cc20:	f1bc 0f18 	cmp.w	ip, #24
 800cc24:	d91d      	bls.n	800cc62 <__gethex+0x132>
 800cc26:	f1bb 0f00 	cmp.w	fp, #0
 800cc2a:	d000      	beq.n	800cc2e <__gethex+0xfe>
 800cc2c:	4252      	negs	r2, r2
 800cc2e:	4416      	add	r6, r2
 800cc30:	f8ca 1000 	str.w	r1, [sl]
 800cc34:	b1dc      	cbz	r4, 800cc6e <__gethex+0x13e>
 800cc36:	9b01      	ldr	r3, [sp, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	bf14      	ite	ne
 800cc3c:	f04f 0800 	movne.w	r8, #0
 800cc40:	f04f 0806 	moveq.w	r8, #6
 800cc44:	4640      	mov	r0, r8
 800cc46:	b005      	add	sp, #20
 800cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4c:	4645      	mov	r5, r8
 800cc4e:	4626      	mov	r6, r4
 800cc50:	2401      	movs	r4, #1
 800cc52:	e7c7      	b.n	800cbe4 <__gethex+0xb4>
 800cc54:	f04f 0b00 	mov.w	fp, #0
 800cc58:	1ca9      	adds	r1, r5, #2
 800cc5a:	e7d0      	b.n	800cbfe <__gethex+0xce>
 800cc5c:	f04f 0b01 	mov.w	fp, #1
 800cc60:	e7fa      	b.n	800cc58 <__gethex+0x128>
 800cc62:	230a      	movs	r3, #10
 800cc64:	fb03 0002 	mla	r0, r3, r2, r0
 800cc68:	e7d0      	b.n	800cc0c <__gethex+0xdc>
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	e7e0      	b.n	800cc30 <__gethex+0x100>
 800cc6e:	eba5 0308 	sub.w	r3, r5, r8
 800cc72:	3b01      	subs	r3, #1
 800cc74:	4621      	mov	r1, r4
 800cc76:	2b07      	cmp	r3, #7
 800cc78:	dc0a      	bgt.n	800cc90 <__gethex+0x160>
 800cc7a:	4648      	mov	r0, r9
 800cc7c:	f7fe f8aa 	bl	800add4 <_Balloc>
 800cc80:	4604      	mov	r4, r0
 800cc82:	b940      	cbnz	r0, 800cc96 <__gethex+0x166>
 800cc84:	4b61      	ldr	r3, [pc, #388]	; (800ce0c <__gethex+0x2dc>)
 800cc86:	4602      	mov	r2, r0
 800cc88:	21e4      	movs	r1, #228	; 0xe4
 800cc8a:	4861      	ldr	r0, [pc, #388]	; (800ce10 <__gethex+0x2e0>)
 800cc8c:	f7ff feb4 	bl	800c9f8 <__assert_func>
 800cc90:	3101      	adds	r1, #1
 800cc92:	105b      	asrs	r3, r3, #1
 800cc94:	e7ef      	b.n	800cc76 <__gethex+0x146>
 800cc96:	f100 0a14 	add.w	sl, r0, #20
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	495a      	ldr	r1, [pc, #360]	; (800ce08 <__gethex+0x2d8>)
 800cc9e:	f8cd a004 	str.w	sl, [sp, #4]
 800cca2:	469b      	mov	fp, r3
 800cca4:	45a8      	cmp	r8, r5
 800cca6:	d342      	bcc.n	800cd2e <__gethex+0x1fe>
 800cca8:	9801      	ldr	r0, [sp, #4]
 800ccaa:	f840 bb04 	str.w	fp, [r0], #4
 800ccae:	eba0 000a 	sub.w	r0, r0, sl
 800ccb2:	1080      	asrs	r0, r0, #2
 800ccb4:	6120      	str	r0, [r4, #16]
 800ccb6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ccba:	4658      	mov	r0, fp
 800ccbc:	f7fe f97c 	bl	800afb8 <__hi0bits>
 800ccc0:	683d      	ldr	r5, [r7, #0]
 800ccc2:	eba8 0000 	sub.w	r0, r8, r0
 800ccc6:	42a8      	cmp	r0, r5
 800ccc8:	dd59      	ble.n	800cd7e <__gethex+0x24e>
 800ccca:	eba0 0805 	sub.w	r8, r0, r5
 800ccce:	4641      	mov	r1, r8
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f7fe fd0b 	bl	800b6ec <__any_on>
 800ccd6:	4683      	mov	fp, r0
 800ccd8:	b1b8      	cbz	r0, 800cd0a <__gethex+0x1da>
 800ccda:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800ccde:	1159      	asrs	r1, r3, #5
 800cce0:	f003 021f 	and.w	r2, r3, #31
 800cce4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cce8:	f04f 0b01 	mov.w	fp, #1
 800ccec:	fa0b f202 	lsl.w	r2, fp, r2
 800ccf0:	420a      	tst	r2, r1
 800ccf2:	d00a      	beq.n	800cd0a <__gethex+0x1da>
 800ccf4:	455b      	cmp	r3, fp
 800ccf6:	dd06      	ble.n	800cd06 <__gethex+0x1d6>
 800ccf8:	f1a8 0102 	sub.w	r1, r8, #2
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f7fe fcf5 	bl	800b6ec <__any_on>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d138      	bne.n	800cd78 <__gethex+0x248>
 800cd06:	f04f 0b02 	mov.w	fp, #2
 800cd0a:	4641      	mov	r1, r8
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f7ff fea7 	bl	800ca60 <rshift>
 800cd12:	4446      	add	r6, r8
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	42b3      	cmp	r3, r6
 800cd18:	da41      	bge.n	800cd9e <__gethex+0x26e>
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4648      	mov	r0, r9
 800cd1e:	f7fe f899 	bl	800ae54 <_Bfree>
 800cd22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd24:	2300      	movs	r3, #0
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cd2c:	e78a      	b.n	800cc44 <__gethex+0x114>
 800cd2e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cd32:	2a2e      	cmp	r2, #46	; 0x2e
 800cd34:	d014      	beq.n	800cd60 <__gethex+0x230>
 800cd36:	2b20      	cmp	r3, #32
 800cd38:	d106      	bne.n	800cd48 <__gethex+0x218>
 800cd3a:	9b01      	ldr	r3, [sp, #4]
 800cd3c:	f843 bb04 	str.w	fp, [r3], #4
 800cd40:	f04f 0b00 	mov.w	fp, #0
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	465b      	mov	r3, fp
 800cd48:	7828      	ldrb	r0, [r5, #0]
 800cd4a:	9303      	str	r3, [sp, #12]
 800cd4c:	f7ff feda 	bl	800cb04 <__hexdig_fun>
 800cd50:	9b03      	ldr	r3, [sp, #12]
 800cd52:	f000 000f 	and.w	r0, r0, #15
 800cd56:	4098      	lsls	r0, r3
 800cd58:	ea4b 0b00 	orr.w	fp, fp, r0
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	e7a1      	b.n	800cca4 <__gethex+0x174>
 800cd60:	45a8      	cmp	r8, r5
 800cd62:	d8e8      	bhi.n	800cd36 <__gethex+0x206>
 800cd64:	2201      	movs	r2, #1
 800cd66:	4628      	mov	r0, r5
 800cd68:	9303      	str	r3, [sp, #12]
 800cd6a:	f7ff fdf9 	bl	800c960 <strncmp>
 800cd6e:	4926      	ldr	r1, [pc, #152]	; (800ce08 <__gethex+0x2d8>)
 800cd70:	9b03      	ldr	r3, [sp, #12]
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d1df      	bne.n	800cd36 <__gethex+0x206>
 800cd76:	e795      	b.n	800cca4 <__gethex+0x174>
 800cd78:	f04f 0b03 	mov.w	fp, #3
 800cd7c:	e7c5      	b.n	800cd0a <__gethex+0x1da>
 800cd7e:	da0b      	bge.n	800cd98 <__gethex+0x268>
 800cd80:	eba5 0800 	sub.w	r8, r5, r0
 800cd84:	4621      	mov	r1, r4
 800cd86:	4642      	mov	r2, r8
 800cd88:	4648      	mov	r0, r9
 800cd8a:	f7fe fa7d 	bl	800b288 <__lshift>
 800cd8e:	eba6 0608 	sub.w	r6, r6, r8
 800cd92:	4604      	mov	r4, r0
 800cd94:	f100 0a14 	add.w	sl, r0, #20
 800cd98:	f04f 0b00 	mov.w	fp, #0
 800cd9c:	e7ba      	b.n	800cd14 <__gethex+0x1e4>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	42b3      	cmp	r3, r6
 800cda2:	dd73      	ble.n	800ce8c <__gethex+0x35c>
 800cda4:	1b9e      	subs	r6, r3, r6
 800cda6:	42b5      	cmp	r5, r6
 800cda8:	dc34      	bgt.n	800ce14 <__gethex+0x2e4>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d023      	beq.n	800cdf8 <__gethex+0x2c8>
 800cdb0:	2b03      	cmp	r3, #3
 800cdb2:	d025      	beq.n	800ce00 <__gethex+0x2d0>
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d115      	bne.n	800cde4 <__gethex+0x2b4>
 800cdb8:	42b5      	cmp	r5, r6
 800cdba:	d113      	bne.n	800cde4 <__gethex+0x2b4>
 800cdbc:	2d01      	cmp	r5, #1
 800cdbe:	d10b      	bne.n	800cdd8 <__gethex+0x2a8>
 800cdc0:	9a02      	ldr	r2, [sp, #8]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6013      	str	r3, [r2, #0]
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	6123      	str	r3, [r4, #16]
 800cdca:	f8ca 3000 	str.w	r3, [sl]
 800cdce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdd0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cdd4:	601c      	str	r4, [r3, #0]
 800cdd6:	e735      	b.n	800cc44 <__gethex+0x114>
 800cdd8:	1e69      	subs	r1, r5, #1
 800cdda:	4620      	mov	r0, r4
 800cddc:	f7fe fc86 	bl	800b6ec <__any_on>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d1ed      	bne.n	800cdc0 <__gethex+0x290>
 800cde4:	4621      	mov	r1, r4
 800cde6:	4648      	mov	r0, r9
 800cde8:	f7fe f834 	bl	800ae54 <_Bfree>
 800cdec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdee:	2300      	movs	r3, #0
 800cdf0:	6013      	str	r3, [r2, #0]
 800cdf2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cdf6:	e725      	b.n	800cc44 <__gethex+0x114>
 800cdf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1f2      	bne.n	800cde4 <__gethex+0x2b4>
 800cdfe:	e7df      	b.n	800cdc0 <__gethex+0x290>
 800ce00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1dc      	bne.n	800cdc0 <__gethex+0x290>
 800ce06:	e7ed      	b.n	800cde4 <__gethex+0x2b4>
 800ce08:	0800da84 	.word	0x0800da84
 800ce0c:	0800d91d 	.word	0x0800d91d
 800ce10:	0800dc2e 	.word	0x0800dc2e
 800ce14:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800ce18:	f1bb 0f00 	cmp.w	fp, #0
 800ce1c:	d133      	bne.n	800ce86 <__gethex+0x356>
 800ce1e:	f1b8 0f00 	cmp.w	r8, #0
 800ce22:	d004      	beq.n	800ce2e <__gethex+0x2fe>
 800ce24:	4641      	mov	r1, r8
 800ce26:	4620      	mov	r0, r4
 800ce28:	f7fe fc60 	bl	800b6ec <__any_on>
 800ce2c:	4683      	mov	fp, r0
 800ce2e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ce32:	2301      	movs	r3, #1
 800ce34:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ce38:	f008 081f 	and.w	r8, r8, #31
 800ce3c:	fa03 f308 	lsl.w	r3, r3, r8
 800ce40:	4213      	tst	r3, r2
 800ce42:	4631      	mov	r1, r6
 800ce44:	4620      	mov	r0, r4
 800ce46:	bf18      	it	ne
 800ce48:	f04b 0b02 	orrne.w	fp, fp, #2
 800ce4c:	1bad      	subs	r5, r5, r6
 800ce4e:	f7ff fe07 	bl	800ca60 <rshift>
 800ce52:	687e      	ldr	r6, [r7, #4]
 800ce54:	f04f 0802 	mov.w	r8, #2
 800ce58:	f1bb 0f00 	cmp.w	fp, #0
 800ce5c:	d04a      	beq.n	800cef4 <__gethex+0x3c4>
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d016      	beq.n	800ce92 <__gethex+0x362>
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	d018      	beq.n	800ce9a <__gethex+0x36a>
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d109      	bne.n	800ce80 <__gethex+0x350>
 800ce6c:	f01b 0f02 	tst.w	fp, #2
 800ce70:	d006      	beq.n	800ce80 <__gethex+0x350>
 800ce72:	f8da 3000 	ldr.w	r3, [sl]
 800ce76:	ea4b 0b03 	orr.w	fp, fp, r3
 800ce7a:	f01b 0f01 	tst.w	fp, #1
 800ce7e:	d10f      	bne.n	800cea0 <__gethex+0x370>
 800ce80:	f048 0810 	orr.w	r8, r8, #16
 800ce84:	e036      	b.n	800cef4 <__gethex+0x3c4>
 800ce86:	f04f 0b01 	mov.w	fp, #1
 800ce8a:	e7d0      	b.n	800ce2e <__gethex+0x2fe>
 800ce8c:	f04f 0801 	mov.w	r8, #1
 800ce90:	e7e2      	b.n	800ce58 <__gethex+0x328>
 800ce92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce94:	f1c3 0301 	rsb	r3, r3, #1
 800ce98:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d0ef      	beq.n	800ce80 <__gethex+0x350>
 800cea0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cea4:	f104 0214 	add.w	r2, r4, #20
 800cea8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ceac:	9301      	str	r3, [sp, #4]
 800ceae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	4694      	mov	ip, r2
 800ceb6:	f852 1b04 	ldr.w	r1, [r2], #4
 800ceba:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800cebe:	d01e      	beq.n	800cefe <__gethex+0x3ce>
 800cec0:	3101      	adds	r1, #1
 800cec2:	f8cc 1000 	str.w	r1, [ip]
 800cec6:	f1b8 0f02 	cmp.w	r8, #2
 800ceca:	f104 0214 	add.w	r2, r4, #20
 800cece:	d13d      	bne.n	800cf4c <__gethex+0x41c>
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	3b01      	subs	r3, #1
 800ced4:	42ab      	cmp	r3, r5
 800ced6:	d10b      	bne.n	800cef0 <__gethex+0x3c0>
 800ced8:	1169      	asrs	r1, r5, #5
 800ceda:	2301      	movs	r3, #1
 800cedc:	f005 051f 	and.w	r5, r5, #31
 800cee0:	fa03 f505 	lsl.w	r5, r3, r5
 800cee4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cee8:	421d      	tst	r5, r3
 800ceea:	bf18      	it	ne
 800ceec:	f04f 0801 	movne.w	r8, #1
 800cef0:	f048 0820 	orr.w	r8, r8, #32
 800cef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cef6:	601c      	str	r4, [r3, #0]
 800cef8:	9b02      	ldr	r3, [sp, #8]
 800cefa:	601e      	str	r6, [r3, #0]
 800cefc:	e6a2      	b.n	800cc44 <__gethex+0x114>
 800cefe:	4290      	cmp	r0, r2
 800cf00:	f842 3c04 	str.w	r3, [r2, #-4]
 800cf04:	d8d6      	bhi.n	800ceb4 <__gethex+0x384>
 800cf06:	68a2      	ldr	r2, [r4, #8]
 800cf08:	4593      	cmp	fp, r2
 800cf0a:	db17      	blt.n	800cf3c <__gethex+0x40c>
 800cf0c:	6861      	ldr	r1, [r4, #4]
 800cf0e:	4648      	mov	r0, r9
 800cf10:	3101      	adds	r1, #1
 800cf12:	f7fd ff5f 	bl	800add4 <_Balloc>
 800cf16:	4682      	mov	sl, r0
 800cf18:	b918      	cbnz	r0, 800cf22 <__gethex+0x3f2>
 800cf1a:	4b1b      	ldr	r3, [pc, #108]	; (800cf88 <__gethex+0x458>)
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	2184      	movs	r1, #132	; 0x84
 800cf20:	e6b3      	b.n	800cc8a <__gethex+0x15a>
 800cf22:	6922      	ldr	r2, [r4, #16]
 800cf24:	3202      	adds	r2, #2
 800cf26:	f104 010c 	add.w	r1, r4, #12
 800cf2a:	0092      	lsls	r2, r2, #2
 800cf2c:	300c      	adds	r0, #12
 800cf2e:	f7fc ffc0 	bl	8009eb2 <memcpy>
 800cf32:	4621      	mov	r1, r4
 800cf34:	4648      	mov	r0, r9
 800cf36:	f7fd ff8d 	bl	800ae54 <_Bfree>
 800cf3a:	4654      	mov	r4, sl
 800cf3c:	6922      	ldr	r2, [r4, #16]
 800cf3e:	1c51      	adds	r1, r2, #1
 800cf40:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cf44:	6121      	str	r1, [r4, #16]
 800cf46:	2101      	movs	r1, #1
 800cf48:	6151      	str	r1, [r2, #20]
 800cf4a:	e7bc      	b.n	800cec6 <__gethex+0x396>
 800cf4c:	6921      	ldr	r1, [r4, #16]
 800cf4e:	4559      	cmp	r1, fp
 800cf50:	dd0b      	ble.n	800cf6a <__gethex+0x43a>
 800cf52:	2101      	movs	r1, #1
 800cf54:	4620      	mov	r0, r4
 800cf56:	f7ff fd83 	bl	800ca60 <rshift>
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	3601      	adds	r6, #1
 800cf5e:	42b3      	cmp	r3, r6
 800cf60:	f6ff aedb 	blt.w	800cd1a <__gethex+0x1ea>
 800cf64:	f04f 0801 	mov.w	r8, #1
 800cf68:	e7c2      	b.n	800cef0 <__gethex+0x3c0>
 800cf6a:	f015 051f 	ands.w	r5, r5, #31
 800cf6e:	d0f9      	beq.n	800cf64 <__gethex+0x434>
 800cf70:	9b01      	ldr	r3, [sp, #4]
 800cf72:	441a      	add	r2, r3
 800cf74:	f1c5 0520 	rsb	r5, r5, #32
 800cf78:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cf7c:	f7fe f81c 	bl	800afb8 <__hi0bits>
 800cf80:	42a8      	cmp	r0, r5
 800cf82:	dbe6      	blt.n	800cf52 <__gethex+0x422>
 800cf84:	e7ee      	b.n	800cf64 <__gethex+0x434>
 800cf86:	bf00      	nop
 800cf88:	0800d91d 	.word	0x0800d91d

0800cf8c <L_shift>:
 800cf8c:	f1c2 0208 	rsb	r2, r2, #8
 800cf90:	0092      	lsls	r2, r2, #2
 800cf92:	b570      	push	{r4, r5, r6, lr}
 800cf94:	f1c2 0620 	rsb	r6, r2, #32
 800cf98:	6843      	ldr	r3, [r0, #4]
 800cf9a:	6804      	ldr	r4, [r0, #0]
 800cf9c:	fa03 f506 	lsl.w	r5, r3, r6
 800cfa0:	432c      	orrs	r4, r5
 800cfa2:	40d3      	lsrs	r3, r2
 800cfa4:	6004      	str	r4, [r0, #0]
 800cfa6:	f840 3f04 	str.w	r3, [r0, #4]!
 800cfaa:	4288      	cmp	r0, r1
 800cfac:	d3f4      	bcc.n	800cf98 <L_shift+0xc>
 800cfae:	bd70      	pop	{r4, r5, r6, pc}

0800cfb0 <__match>:
 800cfb0:	b530      	push	{r4, r5, lr}
 800cfb2:	6803      	ldr	r3, [r0, #0]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfba:	b914      	cbnz	r4, 800cfc2 <__match+0x12>
 800cfbc:	6003      	str	r3, [r0, #0]
 800cfbe:	2001      	movs	r0, #1
 800cfc0:	bd30      	pop	{r4, r5, pc}
 800cfc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cfca:	2d19      	cmp	r5, #25
 800cfcc:	bf98      	it	ls
 800cfce:	3220      	addls	r2, #32
 800cfd0:	42a2      	cmp	r2, r4
 800cfd2:	d0f0      	beq.n	800cfb6 <__match+0x6>
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e7f3      	b.n	800cfc0 <__match+0x10>

0800cfd8 <__hexnan>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	680b      	ldr	r3, [r1, #0]
 800cfde:	6801      	ldr	r1, [r0, #0]
 800cfe0:	115e      	asrs	r6, r3, #5
 800cfe2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cfe6:	f013 031f 	ands.w	r3, r3, #31
 800cfea:	b087      	sub	sp, #28
 800cfec:	bf18      	it	ne
 800cfee:	3604      	addne	r6, #4
 800cff0:	2500      	movs	r5, #0
 800cff2:	1f37      	subs	r7, r6, #4
 800cff4:	4682      	mov	sl, r0
 800cff6:	4690      	mov	r8, r2
 800cff8:	9301      	str	r3, [sp, #4]
 800cffa:	f846 5c04 	str.w	r5, [r6, #-4]
 800cffe:	46b9      	mov	r9, r7
 800d000:	463c      	mov	r4, r7
 800d002:	9502      	str	r5, [sp, #8]
 800d004:	46ab      	mov	fp, r5
 800d006:	784a      	ldrb	r2, [r1, #1]
 800d008:	1c4b      	adds	r3, r1, #1
 800d00a:	9303      	str	r3, [sp, #12]
 800d00c:	b342      	cbz	r2, 800d060 <__hexnan+0x88>
 800d00e:	4610      	mov	r0, r2
 800d010:	9105      	str	r1, [sp, #20]
 800d012:	9204      	str	r2, [sp, #16]
 800d014:	f7ff fd76 	bl	800cb04 <__hexdig_fun>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d14f      	bne.n	800d0bc <__hexnan+0xe4>
 800d01c:	9a04      	ldr	r2, [sp, #16]
 800d01e:	9905      	ldr	r1, [sp, #20]
 800d020:	2a20      	cmp	r2, #32
 800d022:	d818      	bhi.n	800d056 <__hexnan+0x7e>
 800d024:	9b02      	ldr	r3, [sp, #8]
 800d026:	459b      	cmp	fp, r3
 800d028:	dd13      	ble.n	800d052 <__hexnan+0x7a>
 800d02a:	454c      	cmp	r4, r9
 800d02c:	d206      	bcs.n	800d03c <__hexnan+0x64>
 800d02e:	2d07      	cmp	r5, #7
 800d030:	dc04      	bgt.n	800d03c <__hexnan+0x64>
 800d032:	462a      	mov	r2, r5
 800d034:	4649      	mov	r1, r9
 800d036:	4620      	mov	r0, r4
 800d038:	f7ff ffa8 	bl	800cf8c <L_shift>
 800d03c:	4544      	cmp	r4, r8
 800d03e:	d950      	bls.n	800d0e2 <__hexnan+0x10a>
 800d040:	2300      	movs	r3, #0
 800d042:	f1a4 0904 	sub.w	r9, r4, #4
 800d046:	f844 3c04 	str.w	r3, [r4, #-4]
 800d04a:	f8cd b008 	str.w	fp, [sp, #8]
 800d04e:	464c      	mov	r4, r9
 800d050:	461d      	mov	r5, r3
 800d052:	9903      	ldr	r1, [sp, #12]
 800d054:	e7d7      	b.n	800d006 <__hexnan+0x2e>
 800d056:	2a29      	cmp	r2, #41	; 0x29
 800d058:	d155      	bne.n	800d106 <__hexnan+0x12e>
 800d05a:	3102      	adds	r1, #2
 800d05c:	f8ca 1000 	str.w	r1, [sl]
 800d060:	f1bb 0f00 	cmp.w	fp, #0
 800d064:	d04f      	beq.n	800d106 <__hexnan+0x12e>
 800d066:	454c      	cmp	r4, r9
 800d068:	d206      	bcs.n	800d078 <__hexnan+0xa0>
 800d06a:	2d07      	cmp	r5, #7
 800d06c:	dc04      	bgt.n	800d078 <__hexnan+0xa0>
 800d06e:	462a      	mov	r2, r5
 800d070:	4649      	mov	r1, r9
 800d072:	4620      	mov	r0, r4
 800d074:	f7ff ff8a 	bl	800cf8c <L_shift>
 800d078:	4544      	cmp	r4, r8
 800d07a:	d934      	bls.n	800d0e6 <__hexnan+0x10e>
 800d07c:	f1a8 0204 	sub.w	r2, r8, #4
 800d080:	4623      	mov	r3, r4
 800d082:	f853 1b04 	ldr.w	r1, [r3], #4
 800d086:	f842 1f04 	str.w	r1, [r2, #4]!
 800d08a:	429f      	cmp	r7, r3
 800d08c:	d2f9      	bcs.n	800d082 <__hexnan+0xaa>
 800d08e:	1b3b      	subs	r3, r7, r4
 800d090:	f023 0303 	bic.w	r3, r3, #3
 800d094:	3304      	adds	r3, #4
 800d096:	3e03      	subs	r6, #3
 800d098:	3401      	adds	r4, #1
 800d09a:	42a6      	cmp	r6, r4
 800d09c:	bf38      	it	cc
 800d09e:	2304      	movcc	r3, #4
 800d0a0:	4443      	add	r3, r8
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f843 2b04 	str.w	r2, [r3], #4
 800d0a8:	429f      	cmp	r7, r3
 800d0aa:	d2fb      	bcs.n	800d0a4 <__hexnan+0xcc>
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	b91b      	cbnz	r3, 800d0b8 <__hexnan+0xe0>
 800d0b0:	4547      	cmp	r7, r8
 800d0b2:	d126      	bne.n	800d102 <__hexnan+0x12a>
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	603b      	str	r3, [r7, #0]
 800d0b8:	2005      	movs	r0, #5
 800d0ba:	e025      	b.n	800d108 <__hexnan+0x130>
 800d0bc:	3501      	adds	r5, #1
 800d0be:	2d08      	cmp	r5, #8
 800d0c0:	f10b 0b01 	add.w	fp, fp, #1
 800d0c4:	dd06      	ble.n	800d0d4 <__hexnan+0xfc>
 800d0c6:	4544      	cmp	r4, r8
 800d0c8:	d9c3      	bls.n	800d052 <__hexnan+0x7a>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0d0:	2501      	movs	r5, #1
 800d0d2:	3c04      	subs	r4, #4
 800d0d4:	6822      	ldr	r2, [r4, #0]
 800d0d6:	f000 000f 	and.w	r0, r0, #15
 800d0da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d0de:	6020      	str	r0, [r4, #0]
 800d0e0:	e7b7      	b.n	800d052 <__hexnan+0x7a>
 800d0e2:	2508      	movs	r5, #8
 800d0e4:	e7b5      	b.n	800d052 <__hexnan+0x7a>
 800d0e6:	9b01      	ldr	r3, [sp, #4]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d0df      	beq.n	800d0ac <__hexnan+0xd4>
 800d0ec:	f1c3 0320 	rsb	r3, r3, #32
 800d0f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0f4:	40da      	lsrs	r2, r3
 800d0f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800d100:	e7d4      	b.n	800d0ac <__hexnan+0xd4>
 800d102:	3f04      	subs	r7, #4
 800d104:	e7d2      	b.n	800d0ac <__hexnan+0xd4>
 800d106:	2004      	movs	r0, #4
 800d108:	b007      	add	sp, #28
 800d10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d10e <__ascii_mbtowc>:
 800d10e:	b082      	sub	sp, #8
 800d110:	b901      	cbnz	r1, 800d114 <__ascii_mbtowc+0x6>
 800d112:	a901      	add	r1, sp, #4
 800d114:	b142      	cbz	r2, 800d128 <__ascii_mbtowc+0x1a>
 800d116:	b14b      	cbz	r3, 800d12c <__ascii_mbtowc+0x1e>
 800d118:	7813      	ldrb	r3, [r2, #0]
 800d11a:	600b      	str	r3, [r1, #0]
 800d11c:	7812      	ldrb	r2, [r2, #0]
 800d11e:	1e10      	subs	r0, r2, #0
 800d120:	bf18      	it	ne
 800d122:	2001      	movne	r0, #1
 800d124:	b002      	add	sp, #8
 800d126:	4770      	bx	lr
 800d128:	4610      	mov	r0, r2
 800d12a:	e7fb      	b.n	800d124 <__ascii_mbtowc+0x16>
 800d12c:	f06f 0001 	mvn.w	r0, #1
 800d130:	e7f8      	b.n	800d124 <__ascii_mbtowc+0x16>

0800d132 <_realloc_r>:
 800d132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d136:	4680      	mov	r8, r0
 800d138:	4614      	mov	r4, r2
 800d13a:	460e      	mov	r6, r1
 800d13c:	b921      	cbnz	r1, 800d148 <_realloc_r+0x16>
 800d13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d142:	4611      	mov	r1, r2
 800d144:	f7fd bdba 	b.w	800acbc <_malloc_r>
 800d148:	b92a      	cbnz	r2, 800d156 <_realloc_r+0x24>
 800d14a:	f7fd fd43 	bl	800abd4 <_free_r>
 800d14e:	4625      	mov	r5, r4
 800d150:	4628      	mov	r0, r5
 800d152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d156:	f000 f842 	bl	800d1de <_malloc_usable_size_r>
 800d15a:	4284      	cmp	r4, r0
 800d15c:	4607      	mov	r7, r0
 800d15e:	d802      	bhi.n	800d166 <_realloc_r+0x34>
 800d160:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d164:	d812      	bhi.n	800d18c <_realloc_r+0x5a>
 800d166:	4621      	mov	r1, r4
 800d168:	4640      	mov	r0, r8
 800d16a:	f7fd fda7 	bl	800acbc <_malloc_r>
 800d16e:	4605      	mov	r5, r0
 800d170:	2800      	cmp	r0, #0
 800d172:	d0ed      	beq.n	800d150 <_realloc_r+0x1e>
 800d174:	42bc      	cmp	r4, r7
 800d176:	4622      	mov	r2, r4
 800d178:	4631      	mov	r1, r6
 800d17a:	bf28      	it	cs
 800d17c:	463a      	movcs	r2, r7
 800d17e:	f7fc fe98 	bl	8009eb2 <memcpy>
 800d182:	4631      	mov	r1, r6
 800d184:	4640      	mov	r0, r8
 800d186:	f7fd fd25 	bl	800abd4 <_free_r>
 800d18a:	e7e1      	b.n	800d150 <_realloc_r+0x1e>
 800d18c:	4635      	mov	r5, r6
 800d18e:	e7df      	b.n	800d150 <_realloc_r+0x1e>

0800d190 <__ascii_wctomb>:
 800d190:	b149      	cbz	r1, 800d1a6 <__ascii_wctomb+0x16>
 800d192:	2aff      	cmp	r2, #255	; 0xff
 800d194:	bf85      	ittet	hi
 800d196:	238a      	movhi	r3, #138	; 0x8a
 800d198:	6003      	strhi	r3, [r0, #0]
 800d19a:	700a      	strbls	r2, [r1, #0]
 800d19c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d1a0:	bf98      	it	ls
 800d1a2:	2001      	movls	r0, #1
 800d1a4:	4770      	bx	lr
 800d1a6:	4608      	mov	r0, r1
 800d1a8:	4770      	bx	lr
	...

0800d1ac <fiprintf>:
 800d1ac:	b40e      	push	{r1, r2, r3}
 800d1ae:	b503      	push	{r0, r1, lr}
 800d1b0:	4601      	mov	r1, r0
 800d1b2:	ab03      	add	r3, sp, #12
 800d1b4:	4805      	ldr	r0, [pc, #20]	; (800d1cc <fiprintf+0x20>)
 800d1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ba:	6800      	ldr	r0, [r0, #0]
 800d1bc:	9301      	str	r3, [sp, #4]
 800d1be:	f000 f83f 	bl	800d240 <_vfiprintf_r>
 800d1c2:	b002      	add	sp, #8
 800d1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1c8:	b003      	add	sp, #12
 800d1ca:	4770      	bx	lr
 800d1cc:	20000068 	.word	0x20000068

0800d1d0 <abort>:
 800d1d0:	b508      	push	{r3, lr}
 800d1d2:	2006      	movs	r0, #6
 800d1d4:	f000 f976 	bl	800d4c4 <raise>
 800d1d8:	2001      	movs	r0, #1
 800d1da:	f7f4 fd85 	bl	8001ce8 <_exit>

0800d1de <_malloc_usable_size_r>:
 800d1de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1e2:	1f18      	subs	r0, r3, #4
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	bfbc      	itt	lt
 800d1e8:	580b      	ldrlt	r3, [r1, r0]
 800d1ea:	18c0      	addlt	r0, r0, r3
 800d1ec:	4770      	bx	lr

0800d1ee <__sfputc_r>:
 800d1ee:	6893      	ldr	r3, [r2, #8]
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	b410      	push	{r4}
 800d1f6:	6093      	str	r3, [r2, #8]
 800d1f8:	da08      	bge.n	800d20c <__sfputc_r+0x1e>
 800d1fa:	6994      	ldr	r4, [r2, #24]
 800d1fc:	42a3      	cmp	r3, r4
 800d1fe:	db01      	blt.n	800d204 <__sfputc_r+0x16>
 800d200:	290a      	cmp	r1, #10
 800d202:	d103      	bne.n	800d20c <__sfputc_r+0x1e>
 800d204:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d208:	f7fc bce8 	b.w	8009bdc <__swbuf_r>
 800d20c:	6813      	ldr	r3, [r2, #0]
 800d20e:	1c58      	adds	r0, r3, #1
 800d210:	6010      	str	r0, [r2, #0]
 800d212:	7019      	strb	r1, [r3, #0]
 800d214:	4608      	mov	r0, r1
 800d216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <__sfputs_r>:
 800d21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21e:	4606      	mov	r6, r0
 800d220:	460f      	mov	r7, r1
 800d222:	4614      	mov	r4, r2
 800d224:	18d5      	adds	r5, r2, r3
 800d226:	42ac      	cmp	r4, r5
 800d228:	d101      	bne.n	800d22e <__sfputs_r+0x12>
 800d22a:	2000      	movs	r0, #0
 800d22c:	e007      	b.n	800d23e <__sfputs_r+0x22>
 800d22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d232:	463a      	mov	r2, r7
 800d234:	4630      	mov	r0, r6
 800d236:	f7ff ffda 	bl	800d1ee <__sfputc_r>
 800d23a:	1c43      	adds	r3, r0, #1
 800d23c:	d1f3      	bne.n	800d226 <__sfputs_r+0xa>
 800d23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d240 <_vfiprintf_r>:
 800d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	460d      	mov	r5, r1
 800d246:	b09d      	sub	sp, #116	; 0x74
 800d248:	4614      	mov	r4, r2
 800d24a:	4698      	mov	r8, r3
 800d24c:	4606      	mov	r6, r0
 800d24e:	b118      	cbz	r0, 800d258 <_vfiprintf_r+0x18>
 800d250:	6a03      	ldr	r3, [r0, #32]
 800d252:	b90b      	cbnz	r3, 800d258 <_vfiprintf_r+0x18>
 800d254:	f7fc fb94 	bl	8009980 <__sinit>
 800d258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d25a:	07d9      	lsls	r1, r3, #31
 800d25c:	d405      	bmi.n	800d26a <_vfiprintf_r+0x2a>
 800d25e:	89ab      	ldrh	r3, [r5, #12]
 800d260:	059a      	lsls	r2, r3, #22
 800d262:	d402      	bmi.n	800d26a <_vfiprintf_r+0x2a>
 800d264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d266:	f7fc fe22 	bl	8009eae <__retarget_lock_acquire_recursive>
 800d26a:	89ab      	ldrh	r3, [r5, #12]
 800d26c:	071b      	lsls	r3, r3, #28
 800d26e:	d501      	bpl.n	800d274 <_vfiprintf_r+0x34>
 800d270:	692b      	ldr	r3, [r5, #16]
 800d272:	b99b      	cbnz	r3, 800d29c <_vfiprintf_r+0x5c>
 800d274:	4629      	mov	r1, r5
 800d276:	4630      	mov	r0, r6
 800d278:	f7fc fcee 	bl	8009c58 <__swsetup_r>
 800d27c:	b170      	cbz	r0, 800d29c <_vfiprintf_r+0x5c>
 800d27e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d280:	07dc      	lsls	r4, r3, #31
 800d282:	d504      	bpl.n	800d28e <_vfiprintf_r+0x4e>
 800d284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d288:	b01d      	add	sp, #116	; 0x74
 800d28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28e:	89ab      	ldrh	r3, [r5, #12]
 800d290:	0598      	lsls	r0, r3, #22
 800d292:	d4f7      	bmi.n	800d284 <_vfiprintf_r+0x44>
 800d294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d296:	f7fc fe0b 	bl	8009eb0 <__retarget_lock_release_recursive>
 800d29a:	e7f3      	b.n	800d284 <_vfiprintf_r+0x44>
 800d29c:	2300      	movs	r3, #0
 800d29e:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a0:	2320      	movs	r3, #32
 800d2a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2aa:	2330      	movs	r3, #48	; 0x30
 800d2ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d460 <_vfiprintf_r+0x220>
 800d2b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2b4:	f04f 0901 	mov.w	r9, #1
 800d2b8:	4623      	mov	r3, r4
 800d2ba:	469a      	mov	sl, r3
 800d2bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2c0:	b10a      	cbz	r2, 800d2c6 <_vfiprintf_r+0x86>
 800d2c2:	2a25      	cmp	r2, #37	; 0x25
 800d2c4:	d1f9      	bne.n	800d2ba <_vfiprintf_r+0x7a>
 800d2c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ca:	d00b      	beq.n	800d2e4 <_vfiprintf_r+0xa4>
 800d2cc:	465b      	mov	r3, fp
 800d2ce:	4622      	mov	r2, r4
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	f7ff ffa2 	bl	800d21c <__sfputs_r>
 800d2d8:	3001      	adds	r0, #1
 800d2da:	f000 80a9 	beq.w	800d430 <_vfiprintf_r+0x1f0>
 800d2de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2e0:	445a      	add	r2, fp
 800d2e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f000 80a1 	beq.w	800d430 <_vfiprintf_r+0x1f0>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2f8:	f10a 0a01 	add.w	sl, sl, #1
 800d2fc:	9304      	str	r3, [sp, #16]
 800d2fe:	9307      	str	r3, [sp, #28]
 800d300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d304:	931a      	str	r3, [sp, #104]	; 0x68
 800d306:	4654      	mov	r4, sl
 800d308:	2205      	movs	r2, #5
 800d30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30e:	4854      	ldr	r0, [pc, #336]	; (800d460 <_vfiprintf_r+0x220>)
 800d310:	f7f2 ff66 	bl	80001e0 <memchr>
 800d314:	9a04      	ldr	r2, [sp, #16]
 800d316:	b9d8      	cbnz	r0, 800d350 <_vfiprintf_r+0x110>
 800d318:	06d1      	lsls	r1, r2, #27
 800d31a:	bf44      	itt	mi
 800d31c:	2320      	movmi	r3, #32
 800d31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d322:	0713      	lsls	r3, r2, #28
 800d324:	bf44      	itt	mi
 800d326:	232b      	movmi	r3, #43	; 0x2b
 800d328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d32c:	f89a 3000 	ldrb.w	r3, [sl]
 800d330:	2b2a      	cmp	r3, #42	; 0x2a
 800d332:	d015      	beq.n	800d360 <_vfiprintf_r+0x120>
 800d334:	9a07      	ldr	r2, [sp, #28]
 800d336:	4654      	mov	r4, sl
 800d338:	2000      	movs	r0, #0
 800d33a:	f04f 0c0a 	mov.w	ip, #10
 800d33e:	4621      	mov	r1, r4
 800d340:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d344:	3b30      	subs	r3, #48	; 0x30
 800d346:	2b09      	cmp	r3, #9
 800d348:	d94d      	bls.n	800d3e6 <_vfiprintf_r+0x1a6>
 800d34a:	b1b0      	cbz	r0, 800d37a <_vfiprintf_r+0x13a>
 800d34c:	9207      	str	r2, [sp, #28]
 800d34e:	e014      	b.n	800d37a <_vfiprintf_r+0x13a>
 800d350:	eba0 0308 	sub.w	r3, r0, r8
 800d354:	fa09 f303 	lsl.w	r3, r9, r3
 800d358:	4313      	orrs	r3, r2
 800d35a:	9304      	str	r3, [sp, #16]
 800d35c:	46a2      	mov	sl, r4
 800d35e:	e7d2      	b.n	800d306 <_vfiprintf_r+0xc6>
 800d360:	9b03      	ldr	r3, [sp, #12]
 800d362:	1d19      	adds	r1, r3, #4
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	9103      	str	r1, [sp, #12]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	bfbb      	ittet	lt
 800d36c:	425b      	neglt	r3, r3
 800d36e:	f042 0202 	orrlt.w	r2, r2, #2
 800d372:	9307      	strge	r3, [sp, #28]
 800d374:	9307      	strlt	r3, [sp, #28]
 800d376:	bfb8      	it	lt
 800d378:	9204      	strlt	r2, [sp, #16]
 800d37a:	7823      	ldrb	r3, [r4, #0]
 800d37c:	2b2e      	cmp	r3, #46	; 0x2e
 800d37e:	d10c      	bne.n	800d39a <_vfiprintf_r+0x15a>
 800d380:	7863      	ldrb	r3, [r4, #1]
 800d382:	2b2a      	cmp	r3, #42	; 0x2a
 800d384:	d134      	bne.n	800d3f0 <_vfiprintf_r+0x1b0>
 800d386:	9b03      	ldr	r3, [sp, #12]
 800d388:	1d1a      	adds	r2, r3, #4
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	9203      	str	r2, [sp, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	bfb8      	it	lt
 800d392:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d396:	3402      	adds	r4, #2
 800d398:	9305      	str	r3, [sp, #20]
 800d39a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d470 <_vfiprintf_r+0x230>
 800d39e:	7821      	ldrb	r1, [r4, #0]
 800d3a0:	2203      	movs	r2, #3
 800d3a2:	4650      	mov	r0, sl
 800d3a4:	f7f2 ff1c 	bl	80001e0 <memchr>
 800d3a8:	b138      	cbz	r0, 800d3ba <_vfiprintf_r+0x17a>
 800d3aa:	9b04      	ldr	r3, [sp, #16]
 800d3ac:	eba0 000a 	sub.w	r0, r0, sl
 800d3b0:	2240      	movs	r2, #64	; 0x40
 800d3b2:	4082      	lsls	r2, r0
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	3401      	adds	r4, #1
 800d3b8:	9304      	str	r3, [sp, #16]
 800d3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3be:	4829      	ldr	r0, [pc, #164]	; (800d464 <_vfiprintf_r+0x224>)
 800d3c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3c4:	2206      	movs	r2, #6
 800d3c6:	f7f2 ff0b 	bl	80001e0 <memchr>
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	d03f      	beq.n	800d44e <_vfiprintf_r+0x20e>
 800d3ce:	4b26      	ldr	r3, [pc, #152]	; (800d468 <_vfiprintf_r+0x228>)
 800d3d0:	bb1b      	cbnz	r3, 800d41a <_vfiprintf_r+0x1da>
 800d3d2:	9b03      	ldr	r3, [sp, #12]
 800d3d4:	3307      	adds	r3, #7
 800d3d6:	f023 0307 	bic.w	r3, r3, #7
 800d3da:	3308      	adds	r3, #8
 800d3dc:	9303      	str	r3, [sp, #12]
 800d3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e0:	443b      	add	r3, r7
 800d3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3e4:	e768      	b.n	800d2b8 <_vfiprintf_r+0x78>
 800d3e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	e7a6      	b.n	800d33e <_vfiprintf_r+0xfe>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	3401      	adds	r4, #1
 800d3f4:	9305      	str	r3, [sp, #20]
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	f04f 0c0a 	mov.w	ip, #10
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d402:	3a30      	subs	r2, #48	; 0x30
 800d404:	2a09      	cmp	r2, #9
 800d406:	d903      	bls.n	800d410 <_vfiprintf_r+0x1d0>
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d0c6      	beq.n	800d39a <_vfiprintf_r+0x15a>
 800d40c:	9105      	str	r1, [sp, #20]
 800d40e:	e7c4      	b.n	800d39a <_vfiprintf_r+0x15a>
 800d410:	fb0c 2101 	mla	r1, ip, r1, r2
 800d414:	4604      	mov	r4, r0
 800d416:	2301      	movs	r3, #1
 800d418:	e7f0      	b.n	800d3fc <_vfiprintf_r+0x1bc>
 800d41a:	ab03      	add	r3, sp, #12
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	462a      	mov	r2, r5
 800d420:	4b12      	ldr	r3, [pc, #72]	; (800d46c <_vfiprintf_r+0x22c>)
 800d422:	a904      	add	r1, sp, #16
 800d424:	4630      	mov	r0, r6
 800d426:	f7fb fc49 	bl	8008cbc <_printf_float>
 800d42a:	4607      	mov	r7, r0
 800d42c:	1c78      	adds	r0, r7, #1
 800d42e:	d1d6      	bne.n	800d3de <_vfiprintf_r+0x19e>
 800d430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d432:	07d9      	lsls	r1, r3, #31
 800d434:	d405      	bmi.n	800d442 <_vfiprintf_r+0x202>
 800d436:	89ab      	ldrh	r3, [r5, #12]
 800d438:	059a      	lsls	r2, r3, #22
 800d43a:	d402      	bmi.n	800d442 <_vfiprintf_r+0x202>
 800d43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d43e:	f7fc fd37 	bl	8009eb0 <__retarget_lock_release_recursive>
 800d442:	89ab      	ldrh	r3, [r5, #12]
 800d444:	065b      	lsls	r3, r3, #25
 800d446:	f53f af1d 	bmi.w	800d284 <_vfiprintf_r+0x44>
 800d44a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d44c:	e71c      	b.n	800d288 <_vfiprintf_r+0x48>
 800d44e:	ab03      	add	r3, sp, #12
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	462a      	mov	r2, r5
 800d454:	4b05      	ldr	r3, [pc, #20]	; (800d46c <_vfiprintf_r+0x22c>)
 800d456:	a904      	add	r1, sp, #16
 800d458:	4630      	mov	r0, r6
 800d45a:	f7fb fed3 	bl	8009204 <_printf_i>
 800d45e:	e7e4      	b.n	800d42a <_vfiprintf_r+0x1ea>
 800d460:	0800dbd9 	.word	0x0800dbd9
 800d464:	0800dbe3 	.word	0x0800dbe3
 800d468:	08008cbd 	.word	0x08008cbd
 800d46c:	0800d21d 	.word	0x0800d21d
 800d470:	0800dbdf 	.word	0x0800dbdf

0800d474 <_raise_r>:
 800d474:	291f      	cmp	r1, #31
 800d476:	b538      	push	{r3, r4, r5, lr}
 800d478:	4604      	mov	r4, r0
 800d47a:	460d      	mov	r5, r1
 800d47c:	d904      	bls.n	800d488 <_raise_r+0x14>
 800d47e:	2316      	movs	r3, #22
 800d480:	6003      	str	r3, [r0, #0]
 800d482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d486:	bd38      	pop	{r3, r4, r5, pc}
 800d488:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d48a:	b112      	cbz	r2, 800d492 <_raise_r+0x1e>
 800d48c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d490:	b94b      	cbnz	r3, 800d4a6 <_raise_r+0x32>
 800d492:	4620      	mov	r0, r4
 800d494:	f000 f830 	bl	800d4f8 <_getpid_r>
 800d498:	462a      	mov	r2, r5
 800d49a:	4601      	mov	r1, r0
 800d49c:	4620      	mov	r0, r4
 800d49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a2:	f000 b817 	b.w	800d4d4 <_kill_r>
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d00a      	beq.n	800d4c0 <_raise_r+0x4c>
 800d4aa:	1c59      	adds	r1, r3, #1
 800d4ac:	d103      	bne.n	800d4b6 <_raise_r+0x42>
 800d4ae:	2316      	movs	r3, #22
 800d4b0:	6003      	str	r3, [r0, #0]
 800d4b2:	2001      	movs	r0, #1
 800d4b4:	e7e7      	b.n	800d486 <_raise_r+0x12>
 800d4b6:	2400      	movs	r4, #0
 800d4b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4bc:	4628      	mov	r0, r5
 800d4be:	4798      	blx	r3
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	e7e0      	b.n	800d486 <_raise_r+0x12>

0800d4c4 <raise>:
 800d4c4:	4b02      	ldr	r3, [pc, #8]	; (800d4d0 <raise+0xc>)
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	6818      	ldr	r0, [r3, #0]
 800d4ca:	f7ff bfd3 	b.w	800d474 <_raise_r>
 800d4ce:	bf00      	nop
 800d4d0:	20000068 	.word	0x20000068

0800d4d4 <_kill_r>:
 800d4d4:	b538      	push	{r3, r4, r5, lr}
 800d4d6:	4d07      	ldr	r5, [pc, #28]	; (800d4f4 <_kill_r+0x20>)
 800d4d8:	2300      	movs	r3, #0
 800d4da:	4604      	mov	r4, r0
 800d4dc:	4608      	mov	r0, r1
 800d4de:	4611      	mov	r1, r2
 800d4e0:	602b      	str	r3, [r5, #0]
 800d4e2:	f7f4 fbf1 	bl	8001cc8 <_kill>
 800d4e6:	1c43      	adds	r3, r0, #1
 800d4e8:	d102      	bne.n	800d4f0 <_kill_r+0x1c>
 800d4ea:	682b      	ldr	r3, [r5, #0]
 800d4ec:	b103      	cbz	r3, 800d4f0 <_kill_r+0x1c>
 800d4ee:	6023      	str	r3, [r4, #0]
 800d4f0:	bd38      	pop	{r3, r4, r5, pc}
 800d4f2:	bf00      	nop
 800d4f4:	200057dc 	.word	0x200057dc

0800d4f8 <_getpid_r>:
 800d4f8:	f7f4 bbde 	b.w	8001cb8 <_getpid>

0800d4fc <fmodf>:
 800d4fc:	b508      	push	{r3, lr}
 800d4fe:	ed2d 8b02 	vpush	{d8}
 800d502:	eef0 8a40 	vmov.f32	s17, s0
 800d506:	eeb0 8a60 	vmov.f32	s16, s1
 800d50a:	f000 f817 	bl	800d53c <__ieee754_fmodf>
 800d50e:	eef4 8a48 	vcmp.f32	s17, s16
 800d512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d516:	d60c      	bvs.n	800d532 <fmodf+0x36>
 800d518:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d538 <fmodf+0x3c>
 800d51c:	eeb4 8a68 	vcmp.f32	s16, s17
 800d520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d524:	d105      	bne.n	800d532 <fmodf+0x36>
 800d526:	f7fc fc97 	bl	8009e58 <__errno>
 800d52a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d52e:	2321      	movs	r3, #33	; 0x21
 800d530:	6003      	str	r3, [r0, #0]
 800d532:	ecbd 8b02 	vpop	{d8}
 800d536:	bd08      	pop	{r3, pc}
 800d538:	00000000 	.word	0x00000000

0800d53c <__ieee754_fmodf>:
 800d53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d53e:	ee10 4a90 	vmov	r4, s1
 800d542:	f034 4000 	bics.w	r0, r4, #2147483648	; 0x80000000
 800d546:	d009      	beq.n	800d55c <__ieee754_fmodf+0x20>
 800d548:	ee10 3a10 	vmov	r3, s0
 800d54c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800d550:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800d554:	da02      	bge.n	800d55c <__ieee754_fmodf+0x20>
 800d556:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d55a:	dd04      	ble.n	800d566 <__ieee754_fmodf+0x2a>
 800d55c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800d560:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800d564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d566:	4286      	cmp	r6, r0
 800d568:	dbfc      	blt.n	800d564 <__ieee754_fmodf+0x28>
 800d56a:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 800d56e:	d105      	bne.n	800d57c <__ieee754_fmodf+0x40>
 800d570:	4b32      	ldr	r3, [pc, #200]	; (800d63c <__ieee754_fmodf+0x100>)
 800d572:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800d576:	ed93 0a00 	vldr	s0, [r3]
 800d57a:	e7f3      	b.n	800d564 <__ieee754_fmodf+0x28>
 800d57c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d580:	d140      	bne.n	800d604 <__ieee754_fmodf+0xc8>
 800d582:	0232      	lsls	r2, r6, #8
 800d584:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800d588:	2a00      	cmp	r2, #0
 800d58a:	dc38      	bgt.n	800d5fe <__ieee754_fmodf+0xc2>
 800d58c:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 800d590:	d13e      	bne.n	800d610 <__ieee754_fmodf+0xd4>
 800d592:	0207      	lsls	r7, r0, #8
 800d594:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800d598:	2f00      	cmp	r7, #0
 800d59a:	da36      	bge.n	800d60a <__ieee754_fmodf+0xce>
 800d59c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800d5a0:	bfb9      	ittee	lt
 800d5a2:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800d5a6:	1a5b      	sublt	r3, r3, r1
 800d5a8:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800d5ac:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800d5b0:	bfb8      	it	lt
 800d5b2:	fa06 f303 	lsllt.w	r3, r6, r3
 800d5b6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800d5ba:	bfb5      	itete	lt
 800d5bc:	f06f 047d 	mvnlt.w	r4, #125	; 0x7d
 800d5c0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800d5c4:	1aa4      	sublt	r4, r4, r2
 800d5c6:	f444 0000 	orrge.w	r0, r4, #8388608	; 0x800000
 800d5ca:	bfb8      	it	lt
 800d5cc:	40a0      	lsllt	r0, r4
 800d5ce:	1a89      	subs	r1, r1, r2
 800d5d0:	1a1c      	subs	r4, r3, r0
 800d5d2:	bb01      	cbnz	r1, 800d616 <__ieee754_fmodf+0xda>
 800d5d4:	ea13 0324 	ands.w	r3, r3, r4, asr #32
 800d5d8:	bf38      	it	cc
 800d5da:	4623      	movcc	r3, r4
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d0c7      	beq.n	800d570 <__ieee754_fmodf+0x34>
 800d5e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d5e4:	db1f      	blt.n	800d626 <__ieee754_fmodf+0xea>
 800d5e6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800d5ea:	db1f      	blt.n	800d62c <__ieee754_fmodf+0xf0>
 800d5ec:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800d5f0:	327f      	adds	r2, #127	; 0x7f
 800d5f2:	432b      	orrs	r3, r5
 800d5f4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d5f8:	ee00 3a10 	vmov	s0, r3
 800d5fc:	e7b2      	b.n	800d564 <__ieee754_fmodf+0x28>
 800d5fe:	3901      	subs	r1, #1
 800d600:	0052      	lsls	r2, r2, #1
 800d602:	e7c1      	b.n	800d588 <__ieee754_fmodf+0x4c>
 800d604:	15f1      	asrs	r1, r6, #23
 800d606:	397f      	subs	r1, #127	; 0x7f
 800d608:	e7c0      	b.n	800d58c <__ieee754_fmodf+0x50>
 800d60a:	3a01      	subs	r2, #1
 800d60c:	007f      	lsls	r7, r7, #1
 800d60e:	e7c3      	b.n	800d598 <__ieee754_fmodf+0x5c>
 800d610:	15c2      	asrs	r2, r0, #23
 800d612:	3a7f      	subs	r2, #127	; 0x7f
 800d614:	e7c2      	b.n	800d59c <__ieee754_fmodf+0x60>
 800d616:	2c00      	cmp	r4, #0
 800d618:	da02      	bge.n	800d620 <__ieee754_fmodf+0xe4>
 800d61a:	005b      	lsls	r3, r3, #1
 800d61c:	3901      	subs	r1, #1
 800d61e:	e7d7      	b.n	800d5d0 <__ieee754_fmodf+0x94>
 800d620:	d0a6      	beq.n	800d570 <__ieee754_fmodf+0x34>
 800d622:	0063      	lsls	r3, r4, #1
 800d624:	e7fa      	b.n	800d61c <__ieee754_fmodf+0xe0>
 800d626:	005b      	lsls	r3, r3, #1
 800d628:	3a01      	subs	r2, #1
 800d62a:	e7d9      	b.n	800d5e0 <__ieee754_fmodf+0xa4>
 800d62c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d630:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d634:	3282      	adds	r2, #130	; 0x82
 800d636:	4113      	asrs	r3, r2
 800d638:	432b      	orrs	r3, r5
 800d63a:	e7dd      	b.n	800d5f8 <__ieee754_fmodf+0xbc>
 800d63c:	0800dc90 	.word	0x0800dc90

0800d640 <_init>:
 800d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d642:	bf00      	nop
 800d644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d646:	bc08      	pop	{r3}
 800d648:	469e      	mov	lr, r3
 800d64a:	4770      	bx	lr

0800d64c <_fini>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	bf00      	nop
 800d650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d652:	bc08      	pop	{r3}
 800d654:	469e      	mov	lr, r3
 800d656:	4770      	bx	lr
