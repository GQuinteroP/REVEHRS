
L452_ACC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram2        00000000  10000000  10000000  00030310  2**0
                  CONTENTS
  1 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0001aef8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013c80  0801b098  0801b098  0001c098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802ed18  0802ed18  00030310  2**0
                  CONTENTS
  5 .ARM          00000008  0802ed18  0802ed18  0002fd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802ed20  0802ed20  00030310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0802ed20  0802ed20  0002fd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0802ed24  0802ed24  0002fd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000310  20000000  0802ed28  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000230b8  20000310  0802f038  00030310  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200233c8  0802f038  000303c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY
 13 .debug_info   00039691  00000000  00000000  00030340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007a33  00000000  00000000  000699d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002848  00000000  00000000  00071408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001df5  00000000  00000000  00073c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c34a  00000000  00000000  00075a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031a58  00000000  00000000  000a1d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fad8c  00000000  00000000  000d37e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  001ce573  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c1bc  00000000  00000000  001ce62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001da7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00003c05  00000000  00000000  001da85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000001a8  00000000  00000000  001de45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000310 	.word	0x20000310
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b080 	.word	0x0801b080

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000314 	.word	0x20000314
 80001dc:	0801b080 	.word	0x0801b080

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <ADXL355_Init>:

/**
   @brief Initialization the accelerometer sensor
   @return none
**/
void ADXL355_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
//   DioPulPin(DATARDYACC_PORT, DATARDYACC_PIN_NUMBER, 0);         /* Disable the internal pull up on INT2ACC pin */
//   DioOenPin(DATARDYACC_PORT, DATARDYACC_PIN_NUMBER, 0);         /* Set INT2ACC pin as input */

	/* Quick verification test for boards */

   uint32_t volatile ui32test = ADXL355_SPI_Read(DEVID_AD);                  /* Read the ID register */
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f001 f826 	bl	800204c <ADXL355_SPI_Read>
 8001000:	4603      	mov	r3, r0
 8001002:	60fb      	str	r3, [r7, #12]
   uint32_t volatile ui32test2 = ADXL355_SPI_Read(DEVID_MST);                  /* Read the ID register */
 8001004:	2001      	movs	r0, #1
 8001006:	f001 f821 	bl	800204c <ADXL355_SPI_Read>
 800100a:	4603      	mov	r3, r0
 800100c:	60bb      	str	r3, [r7, #8]
   uint32_t volatile ui32test3 = ADXL355_SPI_Read(PARTID);                  /* Read the ID register */
 800100e:	2002      	movs	r0, #2
 8001010:	f001 f81c 	bl	800204c <ADXL355_SPI_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	607b      	str	r3, [r7, #4]
   uint32_t volatile ui32test4 = ADXL355_SPI_Read(REVID);                 /* Read the ID register */
 8001018:	2003      	movs	r0, #3
 800101a:	f001 f817 	bl	800204c <ADXL355_SPI_Read>
 800101e:	4603      	mov	r3, r0
 8001020:	603b      	str	r3, [r7, #0]

   if ((ui32test == 0xAD) && (ui32test2 == 0x1D) && (ui32test3 == 0xED) && (ui32test4 == 0x01)) {
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2bad      	cmp	r3, #173	@ 0xad
 8001026:	d111      	bne.n	800104c <ADXL355_Init+0x58>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b1d      	cmp	r3, #29
 800102c:	d10e      	bne.n	800104c <ADXL355_Init+0x58>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2bed      	cmp	r3, #237	@ 0xed
 8001032:	d10b      	bne.n	800104c <ADXL355_Init+0x58>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <ADXL355_Init+0x58>
	   kappa("\n\rReset and initialized.\n\r");
 800103a:	4808      	ldr	r0, [pc, #32]	@ (800105c <ADXL355_Init+0x68>)
 800103c:	f000 f9cc 	bl	80013d8 <kappa>
	   ADXL355_SPI_Write(0x2F, 0x52, 1); //reset
 8001040:	2201      	movs	r2, #1
 8001042:	2152      	movs	r1, #82	@ 0x52
 8001044:	202f      	movs	r0, #47	@ 0x2f
 8001046:	f001 f83f 	bl	80020c8 <ADXL355_SPI_Write>
   if ((ui32test == 0xAD) && (ui32test2 == 0x1D) && (ui32test3 == 0xED) && (ui32test4 == 0x01)) {
 800104a:	e003      	b.n	8001054 <ADXL355_Init+0x60>
   }
   else
	   kappa("Error initializing\n\r");
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <ADXL355_Init+0x6c>)
 800104e:	f000 f9c3 	bl	80013d8 <kappa>
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0801b098 	.word	0x0801b098
 8001060:	0801b0b4 	.word	0x0801b0b4

08001064 <ADXL355_Start_Sensor>:

/**
   @brief Turns on accelerometer measurement mode.
   @return none
**/
void ADXL355_Start_Sensor(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
   uint8_t ui8temp;

   ui8temp = (uint8_t)ADXL355_SPI_Read(POWER_CTL);       /* Read POWER_CTL register, before modifying it */
 800106a:	202d      	movs	r0, #45	@ 0x2d
 800106c:	f000 ffee 	bl	800204c <ADXL355_SPI_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]

   ui8temp = ui8temp & 0xFE;                                          /* Set measurement bit in POWER_CTL register */
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f023 0301 	bic.w	r3, r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]

   ADXL355_SPI_Write(POWER_CTL, ui8temp, SPI_WRITE_ONE_REG);                    /* Write the new value to POWER_CTL register */
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	202d      	movs	r0, #45	@ 0x2d
 8001084:	f001 f820 	bl	80020c8 <ADXL355_SPI_Write>

   kappa("\n\rSensors started.\n\r");
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <ADXL355_Start_Sensor+0x34>)
 800108a:	f000 f9a5 	bl	80013d8 <kappa>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	0801b0cc 	.word	0x0801b0cc

0800109c <ADXL355_Acceleration_Data_Conversion>:
   @brief Convert the two's complement data in X,Y,Z registers to signed integers
   @param ui32SensorData - raw data from register
   @return int32_t - signed integer data
**/
int32_t ADXL355_Acceleration_Data_Conversion (uint32_t ui32SensorData)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
   int32_t volatile i32Conversion = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]

   ui32SensorData = ( ui32SensorData >> 4);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	607b      	str	r3, [r7, #4]

   ui32SensorData = (ui32SensorData & 0x000FFFFF);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010b4:	607b      	str	r3, [r7, #4]

   if((ui32SensorData & 0x00080000)  == 0x00080000){ //checking if most sig bit is set
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <ADXL355_Acceleration_Data_Conversion+0x32>
         i32Conversion = (ui32SensorData | 0xFFF00000); //if its set, we try to make it negative
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80010c6:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e001      	b.n	80010d2 <ADXL355_Acceleration_Data_Conversion+0x36>
   }
   else{
         i32Conversion = ui32SensorData;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]
   }

   return i32Conversion;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <get_eeprom_data_len>:
#include "EEPROM.h"
#include "m95p32.h"


uint16_t get_eeprom_data_len()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
	uint8_t		status;
	uint16_t	data_len = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	81fb      	strh	r3, [r7, #14]

	for(int ii=0;ii<eeprom_size;ii++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	e00f      	b.n	8001110 <get_eeprom_data_len+0x30>
	{
		Single_Read(&status, ii*M95P32_PAGESIZE ,1);
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	0259      	lsls	r1, r3, #9
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	2201      	movs	r2, #1
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f8db 	bl	80012b4 <Single_Read>
		//kappa("\r\n [%d]: %x", ii, status);
		if(status!=0xFF)
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2bff      	cmp	r3, #255	@ 0xff
 8001102:	d002      	beq.n	800110a <get_eeprom_data_len+0x2a>
			data_len++;
 8001104:	89fb      	ldrh	r3, [r7, #14]
 8001106:	3301      	adds	r3, #1
 8001108:	81fb      	strh	r3, [r7, #14]
	for(int ii=0;ii<eeprom_size;ii++)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	3301      	adds	r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8001116:	4293      	cmp	r3, r2
 8001118:	ddea      	ble.n	80010f0 <get_eeprom_data_len+0x10>
	}
	//kappa("\r\nData_len:%d", data_len);
	return data_len;
 800111a:	89fb      	ldrh	r3, [r7, #14]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <vPortSuppressTicksAndSleep>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <EEPROMEX_CTRL_HIGH>:
  * @brief  This function gives high on selected control pin
  * @param  None
  * @retval None
  */  
void EEPROMEX_CTRL_HIGH(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(M95P32_EEPROM_SPI_CS_PORT,M95P32_EEPROM_SPI_CS_PIN,GPIO_PIN_SET );
 800113c:	2201      	movs	r2, #1
 800113e:	2110      	movs	r1, #16
 8001140:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001144:	f003 f938 	bl	80043b8 <HAL_GPIO_WritePin>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <EEPROMEX_CTRL_LOW>:
  * @brief  This function gives low on selected control pin
  * @param  None
  * @retval None
  */  
void EEPROMEX_CTRL_LOW(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(M95P32_EEPROM_SPI_CS_PORT,M95P32_EEPROM_SPI_CS_PIN,GPIO_PIN_RESET );
 8001150:	2200      	movs	r2, #0
 8001152:	2110      	movs	r1, #16
 8001154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001158:	f003 f92e 	bl	80043b8 <HAL_GPIO_WritePin>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <Transmit_Data_polling>:
  * @brief  This function polls WIP bit of status register
  * @param  None
  * @retval None
  */ 
void Transmit_Data_polling(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  /* read status register until WIP bit become 0 */
  HAL_StatusTypeDef  Rep;
  CmdBuff[0] = CMD_READ_STATUS_REG;
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <Transmit_Data_polling+0x80>)
 8001168:	2205      	movs	r2, #5
 800116a:	701a      	strb	r2, [r3, #0]
  EEPROMEX_CTRL_LOW();
 800116c:	f7ff ffee 	bl	800114c <EEPROMEX_CTRL_LOW>
  Rep = HAL_SPI_Transmit_DMA(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_1_BYTE);
 8001170:	2201      	movs	r2, #1
 8001172:	491b      	ldr	r1, [pc, #108]	@ (80011e0 <Transmit_Data_polling+0x80>)
 8001174:	481b      	ldr	r0, [pc, #108]	@ (80011e4 <Transmit_Data_polling+0x84>)
 8001176:	f007 fa55 	bl	8008624 <HAL_SPI_Transmit_DMA>
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  osSemaphoreAcquire(sem_SPI_tx, osWaitForever);
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <Transmit_Data_polling+0x88>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001186:	4618      	mov	r0, r3
 8001188:	f00d ff58 	bl	800f03c <osSemaphoreAcquire>
  //Rep = HAL_SPI_Transmit(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_1_BYTE, SPI_DATA_TIMEOUT);
  if(Rep != HAL_OK)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <Transmit_Data_polling+0x36>
  {
    Error_Handler();
 8001192:	f001 fd09 	bl	8002ba8 <Error_Handler>
  }
  RxCom[0] = 1;
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <Transmit_Data_polling+0x8c>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
  while ((RxCom[0] & 0x01U) != 0U)
 800119c:	e014      	b.n	80011c8 <Transmit_Data_polling+0x68>
  {
    Rep = HAL_SPI_Receive_DMA(&SPI_INSTANCE, RxCom, INSTRUCTION_LEN_1_BYTE);
 800119e:	2201      	movs	r2, #1
 80011a0:	4912      	ldr	r1, [pc, #72]	@ (80011ec <Transmit_Data_polling+0x8c>)
 80011a2:	4810      	ldr	r0, [pc, #64]	@ (80011e4 <Transmit_Data_polling+0x84>)
 80011a4:	f007 fb2e 	bl	8008804 <HAL_SPI_Receive_DMA>
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
    osSemaphoreAcquire(sem_SPI_rx, osWaitForever);
 80011ac:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <Transmit_Data_polling+0x90>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00d ff41 	bl	800f03c <osSemaphoreAcquire>
    //vTaskDelay(1);
    //Rep = HAL_SPI_Receive(&SPI_INSTANCE, RxCom, INSTRUCTION_LEN_1_BYTE, SPI_DATA_TIMEOUT);

    if(Rep != HAL_OK)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <Transmit_Data_polling+0x68>
    {
      EEPROMEX_CTRL_HIGH();
 80011c0:	f7ff ffba 	bl	8001138 <EEPROMEX_CTRL_HIGH>
      Error_Handler();
 80011c4:	f001 fcf0 	bl	8002ba8 <Error_Handler>
  while ((RxCom[0] & 0x01U) != 0U)
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <Transmit_Data_polling+0x8c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1e4      	bne.n	800119e <Transmit_Data_polling+0x3e>
    }
  }
  EEPROMEX_CTRL_HIGH();
 80011d4:	f7ff ffb0 	bl	8001138 <EEPROMEX_CTRL_HIGH>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000032c 	.word	0x2000032c
 80011e4:	200007b4 	.word	0x200007b4
 80011e8:	20000ac8 	.word	0x20000ac8
 80011ec:	20000590 	.word	0x20000590
 80011f0:	20000acc 	.word	0x20000acc

080011f4 <WRITE_ENABLE>:
  *               register to a 1
  * @param  None
  * @retval BSP status
  */
int32_t WRITE_ENABLE(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	70fb      	strb	r3, [r7, #3]
  int32_t ret = M95_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
  

  EEPROMEX_CTRL_LOW();
 8001202:	f7ff ffa3 	bl	800114c <EEPROMEX_CTRL_LOW>
  CmdBuff[0] = CMD_WREN;
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <WRITE_ENABLE+0x54>)
 8001208:	2206      	movs	r2, #6
 800120a:	701a      	strb	r2, [r3, #0]
  status = HAL_SPI_Transmit_DMA(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_1_BYTE);
 800120c:	2201      	movs	r2, #1
 800120e:	490e      	ldr	r1, [pc, #56]	@ (8001248 <WRITE_ENABLE+0x54>)
 8001210:	480e      	ldr	r0, [pc, #56]	@ (800124c <WRITE_ENABLE+0x58>)
 8001212:	f007 fa07 	bl	8008624 <HAL_SPI_Transmit_DMA>
 8001216:	4603      	mov	r3, r0
 8001218:	70fb      	strb	r3, [r7, #3]
  osSemaphoreAcquire(sem_SPI_tx, osWaitForever);
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <WRITE_ENABLE+0x5c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001222:	4618      	mov	r0, r3
 8001224:	f00d ff0a 	bl	800f03c <osSemaphoreAcquire>
  EEPROMEX_CTRL_HIGH();
 8001228:	f7ff ff86 	bl	8001138 <EEPROMEX_CTRL_HIGH>

  if( status != HAL_OK)
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <WRITE_ENABLE+0x46>
  {
    ret = M95_ERROR;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	e001      	b.n	800123e <WRITE_ENABLE+0x4a>
  }
  else
  {
    ret = M95_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
  }
  return ret;
 800123e:	687b      	ldr	r3, [r7, #4]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000032c 	.word	0x2000032c
 800124c:	200007b4 	.word	0x200007b4
 8001250:	20000ac8 	.word	0x20000ac8

08001254 <WRITE_DISABLE>:
  *               register to a 0
  * @param  None
  * @retval BSP status
  */
int32_t WRITE_DISABLE(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = M95_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  
#if defined (USE_QUADSPI)
  status = QSPI_WriteDisable(&QSPI_INSTANCE);

#elif defined (USE_SPI)
  EEPROMEX_CTRL_LOW();
 8001262:	f7ff ff73 	bl	800114c <EEPROMEX_CTRL_LOW>
  CmdBuff[0] = CMD_WRDI;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <WRITE_DISABLE+0x58>)
 8001268:	2204      	movs	r2, #4
 800126a:	701a      	strb	r2, [r3, #0]
  status = HAL_SPI_Transmit(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_1_BYTE, SPI_DATA_TIMEOUT);
 800126c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001270:	2201      	movs	r2, #1
 8001272:	490e      	ldr	r1, [pc, #56]	@ (80012ac <WRITE_DISABLE+0x58>)
 8001274:	480e      	ldr	r0, [pc, #56]	@ (80012b0 <WRITE_DISABLE+0x5c>)
 8001276:	f006 fd06 	bl	8007c86 <HAL_SPI_Transmit>
 800127a:	4603      	mov	r3, r0
 800127c:	70fb      	strb	r3, [r7, #3]
  EEPROMEX_CTRL_HIGH();
 800127e:	f7ff ff5b 	bl	8001138 <EEPROMEX_CTRL_HIGH>
  memset(&CmdBuff, 0, sizeof(CmdBuff));
 8001282:	f240 2262 	movw	r2, #610	@ 0x262
 8001286:	2100      	movs	r1, #0
 8001288:	4808      	ldr	r0, [pc, #32]	@ (80012ac <WRITE_DISABLE+0x58>)
 800128a:	f014 fa1d 	bl	80156c8 <memset>
#else
  /* Select SPI or QUADSPI interface */
#endif
  
  if( status != HAL_OK)
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <WRITE_DISABLE+0x48>
  {
    ret = M95_ERROR;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	e001      	b.n	80012a0 <WRITE_DISABLE+0x4c>
  }
  else
  {
    ret = M95_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
  }
  return ret;
 80012a0:	687b      	ldr	r3, [r7, #4]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000032c 	.word	0x2000032c
 80012b0:	200007b4 	.word	0x200007b4

080012b4 <Single_Read>:
  * @param  Size : Number of Bytes of data to be read
  * @retval BSP status
  */

int32_t Single_Read(uint8_t *pData, uint32_t TarAddr, uint32_t Size)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	75fb      	strb	r3, [r7, #23]
  int32_t ret = M95_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]


  CmdBuff[0] = CMD_READ_DATA;
 80012c8:	4b26      	ldr	r3, [pc, #152]	@ (8001364 <Single_Read+0xb0>)
 80012ca:	2203      	movs	r2, #3
 80012cc:	701a      	strb	r2, [r3, #0]
  CmdBuff[1] = (uint8_t)((TarAddr & MSK_BYTE3) >> SHIFT_16BIT);
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <Single_Read+0xb0>)
 80012d6:	705a      	strb	r2, [r3, #1]
  CmdBuff[2] = (uint8_t)((TarAddr & MSK_BYTE2) >> SHIFT_8BIT);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <Single_Read+0xb0>)
 80012e0:	709a      	strb	r2, [r3, #2]
  CmdBuff[3] = (uint8_t)(TarAddr & MSK_BYTE1);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <Single_Read+0xb0>)
 80012e8:	70da      	strb	r2, [r3, #3]
  
  EEPROMEX_CTRL_LOW();
 80012ea:	f7ff ff2f 	bl	800114c <EEPROMEX_CTRL_LOW>
  
  status = HAL_SPI_Transmit_DMA(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_4_BYTE);
 80012ee:	2204      	movs	r2, #4
 80012f0:	491c      	ldr	r1, [pc, #112]	@ (8001364 <Single_Read+0xb0>)
 80012f2:	481d      	ldr	r0, [pc, #116]	@ (8001368 <Single_Read+0xb4>)
 80012f4:	f007 f996 	bl	8008624 <HAL_SPI_Transmit_DMA>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75fb      	strb	r3, [r7, #23]
  osSemaphoreAcquire(sem_SPI_tx, osWaitForever);
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <Single_Read+0xb8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001304:	4618      	mov	r0, r3
 8001306:	f00d fe99 	bl	800f03c <osSemaphoreAcquire>
  if(status != HAL_OK)
 800130a:	7dfb      	ldrb	r3, [r7, #23]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <Single_Read+0x62>
  {
    EEPROMEX_CTRL_HIGH();
 8001310:	f7ff ff12 	bl	8001138 <EEPROMEX_CTRL_HIGH>
 8001314:	e011      	b.n	800133a <Single_Read+0x86>
  }
  else
  {
    status = HAL_SPI_Receive_DMA(&SPI_INSTANCE, pData, (uint16_t)Size);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	b29b      	uxth	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	4812      	ldr	r0, [pc, #72]	@ (8001368 <Single_Read+0xb4>)
 8001320:	f007 fa70 	bl	8008804 <HAL_SPI_Receive_DMA>
 8001324:	4603      	mov	r3, r0
 8001326:	75fb      	strb	r3, [r7, #23]
    osSemaphoreAcquire(sem_SPI_rx, osWaitForever);
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <Single_Read+0xbc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001330:	4618      	mov	r0, r3
 8001332:	f00d fe83 	bl	800f03c <osSemaphoreAcquire>
    EEPROMEX_CTRL_HIGH();
 8001336:	f7ff feff 	bl	8001138 <EEPROMEX_CTRL_HIGH>
  }
  memset(&CmdBuff, 0, sizeof(CmdBuff));
 800133a:	f240 2262 	movw	r2, #610	@ 0x262
 800133e:	2100      	movs	r1, #0
 8001340:	4808      	ldr	r0, [pc, #32]	@ (8001364 <Single_Read+0xb0>)
 8001342:	f014 f9c1 	bl	80156c8 <memset>

  if( status != HAL_OK)
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <Single_Read+0xa0>
  {
    ret = M95_ERROR;
 800134c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	e001      	b.n	8001358 <Single_Read+0xa4>
  }
  else
  {
    ret = M95_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  }
  return ret;
 8001358:	693b      	ldr	r3, [r7, #16]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000032c 	.word	0x2000032c
 8001368:	200007b4 	.word	0x200007b4
 800136c:	20000ac8 	.word	0x20000ac8
 8001370:	20000acc 	.word	0x20000acc

08001374 <Chip_Erase>:
  *               state of all 1s(FFh)
  * @param  Add Starting address of the erase command
  * @retval BSP status
  */
int32_t Chip_Erase(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = M95_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  
#if defined (USE_QUADSPI)
  status = QSPI_ChipErase(&QSPI_INSTANCE);

#elif defined (USE_SPI)
  CmdBuff[0] = CMD_ERASE_CHIP;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <Chip_Erase+0x5c>)
 8001384:	22c7      	movs	r2, #199	@ 0xc7
 8001386:	701a      	strb	r2, [r3, #0]
  EEPROMEX_CTRL_LOW();
 8001388:	f7ff fee0 	bl	800114c <EEPROMEX_CTRL_LOW>
  status = HAL_SPI_Transmit(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_1_BYTE, SPI_DATA_TIMEOUT);
 800138c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001390:	2201      	movs	r2, #1
 8001392:	490f      	ldr	r1, [pc, #60]	@ (80013d0 <Chip_Erase+0x5c>)
 8001394:	480f      	ldr	r0, [pc, #60]	@ (80013d4 <Chip_Erase+0x60>)
 8001396:	f006 fc76 	bl	8007c86 <HAL_SPI_Transmit>
 800139a:	4603      	mov	r3, r0
 800139c:	70fb      	strb	r3, [r7, #3]
  EEPROMEX_CTRL_HIGH();
 800139e:	f7ff fecb 	bl	8001138 <EEPROMEX_CTRL_HIGH>
  
  Transmit_Data_polling();
 80013a2:	f7ff fedd 	bl	8001160 <Transmit_Data_polling>
  memset(&CmdBuff, 0, sizeof(CmdBuff));
 80013a6:	f240 2262 	movw	r2, #610	@ 0x262
 80013aa:	2100      	movs	r1, #0
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <Chip_Erase+0x5c>)
 80013ae:	f014 f98b 	bl	80156c8 <memset>
#else
  /* Select SPI or QUADSPI interface */  
#endif
  
  if( status != HAL_OK)
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <Chip_Erase+0x4c>
  {
    ret = M95_ERROR;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	e001      	b.n	80013c4 <Chip_Erase+0x50>
  }
  else
  {
    ret = M95_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
  }
  return ret;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000032c 	.word	0x2000032c
 80013d4:	200007b4 	.word	0x200007b4

080013d8 <kappa>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void kappa(const char *fmt, ...)
{
 80013d8:	b40f      	push	{r0, r1, r2, r3}
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ee:	480b      	ldr	r0, [pc, #44]	@ (800141c <kappa+0x44>)
 80013f0:	f014 f8c8 	bl	8015584 <vsniprintf>
	va_end(args);
	int len = strlen(buffer);
 80013f4:	4809      	ldr	r0, [pc, #36]	@ (800141c <kappa+0x44>)
 80013f6:	f7fe ff43 	bl	8000280 <strlen>
 80013fa:	4603      	mov	r3, r0
 80013fc:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	b29a      	uxth	r2, r3
 8001402:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001406:	4905      	ldr	r1, [pc, #20]	@ (800141c <kappa+0x44>)
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <kappa+0x48>)
 800140a:	f008 fbb7 	bl	8009b7c <HAL_UART_Transmit>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001418:	b004      	add	sp, #16
 800141a:	4770      	bx	lr
 800141c:	20018994 	.word	0x20018994
 8001420:	200009e8 	.word	0x200009e8

08001424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001428:	f001 ffb1 	bl	800338e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142c:	f000 f8a4 	bl	8001578 <SystemClock_Config>
		  MX_USART1_UART_Init();
		  MX_SPI1_Init();
	  }
	#else
	  //SystemClock_Config_HIGH();
	  MX_GPIO_Init();
 8001430:	f000 fa5c 	bl	80018ec <MX_GPIO_Init>
	  MX_DMA_Init();
 8001434:	f000 fa10 	bl	8001858 <MX_DMA_Init>
	  MX_RTC_Init();
 8001438:	f000 f900 	bl	800163c <MX_RTC_Init>
	  MX_USART1_UART_Init();
 800143c:	f000 f9dc 	bl	80017f8 <MX_USART1_UART_Init>
	  MX_SPI1_Init();
 8001440:	f000 f938 	bl	80016b4 <MX_SPI1_Init>
	  SET_BIT(PWR->CR2, PWR_PVM_1);
 8001444:	4b35      	ldr	r3, [pc, #212]	@ (800151c <main+0xf8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4a34      	ldr	r2, [pc, #208]	@ (800151c <main+0xf8>)
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	6053      	str	r3, [r2, #4]
	  HAL_Delay(500);
 8001450:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001454:	f002 f810 	bl	8003478 <HAL_Delay>
	  if (!HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_PVMO1)) //Detect USBVDD
 8001458:	4b30      	ldr	r3, [pc, #192]	@ (800151c <main+0xf8>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001464:	d001      	beq.n	800146a <main+0x46>
		  MX_USB_DEVICE_Init();
 8001466:	f011 f887 	bl	8012578 <MX_USB_DEVICE_Init>

  //GPIO_ConfigAN();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_SPI2_Init();
 800146a:	f000 f961 	bl	8001730 <MX_SPI2_Init>
  MX_TIM16_Init();
 800146e:	f000 f99d 	bl	80017ac <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001472:	f00d fbf7 	bl	800ec64 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_buffer */
  mutex_bufferHandle = osMutexNew(&mutex_buffer_attributes);
 8001476:	482a      	ldr	r0, [pc, #168]	@ (8001520 <main+0xfc>)
 8001478:	f00d fcd0 	bl	800ee1c <osMutexNew>
 800147c:	4603      	mov	r3, r0
 800147e:	4a29      	ldr	r2, [pc, #164]	@ (8001524 <main+0x100>)
 8001480:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sem_mem_write */
  sem_mem_writeHandle = osSemaphoreNew(1, 0, &sem_mem_write_attributes);
 8001482:	4a29      	ldr	r2, [pc, #164]	@ (8001528 <main+0x104>)
 8001484:	2100      	movs	r1, #0
 8001486:	2001      	movs	r0, #1
 8001488:	f00d fd4e 	bl	800ef28 <osSemaphoreNew>
 800148c:	4603      	mov	r3, r0
 800148e:	4a27      	ldr	r2, [pc, #156]	@ (800152c <main+0x108>)
 8001490:	6013      	str	r3, [r2, #0]

  /* creation of sem_mem_read */
  sem_mem_readHandle = osSemaphoreNew(1, 0, &sem_mem_read_attributes);
 8001492:	4a27      	ldr	r2, [pc, #156]	@ (8001530 <main+0x10c>)
 8001494:	2100      	movs	r1, #0
 8001496:	2001      	movs	r0, #1
 8001498:	f00d fd46 	bl	800ef28 <osSemaphoreNew>
 800149c:	4603      	mov	r3, r0
 800149e:	4a25      	ldr	r2, [pc, #148]	@ (8001534 <main+0x110>)
 80014a0:	6013      	str	r3, [r2, #0]

  /* creation of sem_usb */
  sem_usbHandle = osSemaphoreNew(1, 0, &sem_usb_attributes);
 80014a2:	4a25      	ldr	r2, [pc, #148]	@ (8001538 <main+0x114>)
 80014a4:	2100      	movs	r1, #0
 80014a6:	2001      	movs	r0, #1
 80014a8:	f00d fd3e 	bl	800ef28 <osSemaphoreNew>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a23      	ldr	r2, [pc, #140]	@ (800153c <main+0x118>)
 80014b0:	6013      	str	r3, [r2, #0]

  /* creation of sem_SPI_DMA */
  sem_SPI_DMAHandle = osSemaphoreNew(1, 0, &sem_SPI_DMA_attributes);
 80014b2:	4a23      	ldr	r2, [pc, #140]	@ (8001540 <main+0x11c>)
 80014b4:	2100      	movs	r1, #0
 80014b6:	2001      	movs	r0, #1
 80014b8:	f00d fd36 	bl	800ef28 <osSemaphoreNew>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a21      	ldr	r2, [pc, #132]	@ (8001544 <main+0x120>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* creation of sem_processing */
  sem_processingHandle = osSemaphoreNew(1, 0, &sem_processing_attributes);
 80014c2:	4a21      	ldr	r2, [pc, #132]	@ (8001548 <main+0x124>)
 80014c4:	2100      	movs	r1, #0
 80014c6:	2001      	movs	r0, #1
 80014c8:	f00d fd2e 	bl	800ef28 <osSemaphoreNew>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a1f      	ldr	r2, [pc, #124]	@ (800154c <main+0x128>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* creation of sem_sampling */
  sem_samplingHandle = osSemaphoreNew(1, 0, &sem_sampling_attributes);
 80014d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001550 <main+0x12c>)
 80014d4:	2100      	movs	r1, #0
 80014d6:	2001      	movs	r0, #1
 80014d8:	f00d fd26 	bl	800ef28 <osSemaphoreNew>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a1d      	ldr	r2, [pc, #116]	@ (8001554 <main+0x130>)
 80014e0:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of usb_cmd_queue */
  usb_cmd_queueHandle = osMessageQueueNew (30, sizeof(uint8_t), &usb_cmd_queue_attributes);
 80014e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001558 <main+0x134>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	201e      	movs	r0, #30
 80014e8:	f00d fe3e 	bl	800f168 <osMessageQueueNew>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <main+0x138>)
 80014f0:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of main_task */
  main_taskHandle = osThreadNew(task_main, NULL, &main_task_attributes);
 80014f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001560 <main+0x13c>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	481b      	ldr	r0, [pc, #108]	@ (8001564 <main+0x140>)
 80014f8:	f00d fbfe 	bl	800ecf8 <osThreadNew>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001568 <main+0x144>)
 8001500:	6013      	str	r3, [r2, #0]

  /* creation of task_sampling */
  task_samplingHandle = osThreadNew(sampling_task, NULL, &task_sampling_attributes);
 8001502:	4a1a      	ldr	r2, [pc, #104]	@ (800156c <main+0x148>)
 8001504:	2100      	movs	r1, #0
 8001506:	481a      	ldr	r0, [pc, #104]	@ (8001570 <main+0x14c>)
 8001508:	f00d fbf6 	bl	800ecf8 <osThreadNew>
 800150c:	4603      	mov	r3, r0
 800150e:	4a19      	ldr	r2, [pc, #100]	@ (8001574 <main+0x150>)
 8001510:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001512:	f00d fbcb 	bl	800ecac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001516:	bf00      	nop
 8001518:	e7fd      	b.n	8001516 <main+0xf2>
 800151a:	bf00      	nop
 800151c:	40007000 	.word	0x40007000
 8001520:	0801b514 	.word	0x0801b514
 8001524:	20000ac4 	.word	0x20000ac4
 8001528:	0801b524 	.word	0x0801b524
 800152c:	20000ac8 	.word	0x20000ac8
 8001530:	0801b534 	.word	0x0801b534
 8001534:	20000acc 	.word	0x20000acc
 8001538:	0801b544 	.word	0x0801b544
 800153c:	20000ad0 	.word	0x20000ad0
 8001540:	0801b554 	.word	0x0801b554
 8001544:	20000ad4 	.word	0x20000ad4
 8001548:	0801b564 	.word	0x0801b564
 800154c:	20000ad8 	.word	0x20000ad8
 8001550:	0801b574 	.word	0x0801b574
 8001554:	20000adc 	.word	0x20000adc
 8001558:	0801b4fc 	.word	0x0801b4fc
 800155c:	20000ac0 	.word	0x20000ac0
 8001560:	0801b4b4 	.word	0x0801b4b4
 8001564:	08002a7d 	.word	0x08002a7d
 8001568:	20000ab8 	.word	0x20000ab8
 800156c:	0801b4d8 	.word	0x0801b4d8
 8001570:	08002b59 	.word	0x08002b59
 8001574:	20000abc 	.word	0x20000abc

08001578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b096      	sub	sp, #88	@ 0x58
 800157c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2244      	movs	r2, #68	@ 0x44
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f014 f89e 	bl	80156c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800158c:	463b      	mov	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800159a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800159e:	f004 fd25 	bl	8005fec <HAL_PWREx_ControlVoltageScaling>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015a8:	f001 fafe 	bl	8002ba8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015ac:	f004 fccc 	bl	8005f48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015b0:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <SystemClock_Config+0xc0>)
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b6:	4a20      	ldr	r2, [pc, #128]	@ (8001638 <SystemClock_Config+0xc0>)
 80015b8:	f023 0318 	bic.w	r3, r3, #24
 80015bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 80015c0:	2305      	movs	r3, #5
 80015c2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_OFF;
 80015ce:	2300      	movs	r3, #0
 80015d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	2302      	movs	r3, #2
 80015d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d6:	2303      	movs	r3, #3
 80015d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80015da:	2302      	movs	r3, #2
 80015dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 14;
 80015de:	230e      	movs	r3, #14
 80015e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV19;
 80015e2:	2313      	movs	r3, #19
 80015e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80015e6:	2308      	movs	r3, #8
 80015e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80015ea:	2308      	movs	r3, #8
 80015ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fda8 	bl	8006148 <HAL_RCC_OscConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015fe:	f001 fad3 	bl	8002ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	230f      	movs	r3, #15
 8001604:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001606:	2303      	movs	r3, #3
 8001608:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;//RCC_SYSCLK_DIV1;
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001616:	463b      	mov	r3, r7
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f005 f9ac 	bl	8006978 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001626:	f001 fabf 	bl	8002ba8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800162a:	f005 fb69 	bl	8006d00 <HAL_RCC_EnableCSS>
}
 800162e:	bf00      	nop
 8001630:	3758      	adds	r7, #88	@ 0x58
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <MX_RTC_Init+0x6c>)
 8001642:	4a1a      	ldr	r2, [pc, #104]	@ (80016ac <MX_RTC_Init+0x70>)
 8001644:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_RTC_Init+0x6c>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <MX_RTC_Init+0x6c>)
 800164e:	227f      	movs	r2, #127	@ 0x7f
 8001650:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <MX_RTC_Init+0x6c>)
 8001654:	22ff      	movs	r2, #255	@ 0xff
 8001656:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MX_RTC_Init+0x6c>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_RTC_Init+0x6c>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001664:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <MX_RTC_Init+0x6c>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_RTC_Init+0x6c>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001670:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <MX_RTC_Init+0x6c>)
 8001672:	f005 ff2f 	bl	80074d4 <HAL_RTC_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800167c:	f001 fa94 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  time_ref.tm_hour = 0x00;
 8001680:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <MX_RTC_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  time_ref.tm_min = 0x00;
 8001686:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <MX_RTC_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
  time_ref.tm_sec = 0x00;
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <MX_RTC_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
  time_ref.tm_mday = 0x01;
 8001692:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <MX_RTC_Init+0x74>)
 8001694:	2201      	movs	r2, #1
 8001696:	60da      	str	r2, [r3, #12]
  time_ref.tm_mon = 0x01;
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <MX_RTC_Init+0x74>)
 800169a:	2201      	movs	r2, #1
 800169c:	611a      	str	r2, [r3, #16]
  time_ref.tm_year = 0x22;
 800169e:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <MX_RTC_Init+0x74>)
 80016a0:	2222      	movs	r2, #34	@ 0x22
 80016a2:	615a      	str	r2, [r3, #20]
  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD);
  HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);*/

  /* USER CODE END RTC_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000790 	.word	0x20000790
 80016ac:	40002800 	.word	0x40002800
 80016b0:	20000ae4 	.word	0x20000ae4

080016b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016ba:	4a1c      	ldr	r2, [pc, #112]	@ (800172c <MX_SPI1_Init+0x78>)
 80016bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016be:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80016d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016ea:	2210      	movs	r2, #16
 80016ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_SPI1_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_SPI1_Init+0x74>)
 8001702:	2207      	movs	r2, #7
 8001704:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_SPI1_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_SPI1_Init+0x74>)
 800170e:	2208      	movs	r2, #8
 8001710:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_SPI1_Init+0x74>)
 8001714:	f006 fa14 	bl	8007b40 <HAL_SPI_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800171e:	f001 fa43 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200007b4 	.word	0x200007b4
 800172c:	40013000 	.word	0x40013000

08001730 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <MX_SPI2_Init+0x74>)
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <MX_SPI2_Init+0x78>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <MX_SPI2_Init+0x74>)
 800173c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001742:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <MX_SPI2_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <MX_SPI2_Init+0x74>)
 800174a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800174e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <MX_SPI2_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <MX_SPI2_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <MX_SPI2_Init+0x74>)
 800175e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001762:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <MX_SPI2_Init+0x74>)
 8001766:	2228      	movs	r2, #40	@ 0x28
 8001768:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <MX_SPI2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_SPI2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <MX_SPI2_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_SPI2_Init+0x74>)
 800177e:	2207      	movs	r2, #7
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001782:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <MX_SPI2_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <MX_SPI2_Init+0x74>)
 800178a:	2208      	movs	r2, #8
 800178c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_SPI2_Init+0x74>)
 8001790:	f006 f9d6 	bl	8007b40 <HAL_SPI_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800179a:	f001 fa05 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000818 	.word	0x20000818
 80017a8:	40003800 	.word	0x40003800

080017ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <MX_TIM16_Init+0x44>)
 80017b2:	4a10      	ldr	r2, [pc, #64]	@ (80017f4 <MX_TIM16_Init+0x48>)
 80017b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <MX_TIM16_Init+0x44>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <MX_TIM16_Init+0x44>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 64000;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <MX_TIM16_Init+0x44>)
 80017c4:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 80017c8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <MX_TIM16_Init+0x44>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80017d0:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <MX_TIM16_Init+0x44>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d6:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <MX_TIM16_Init+0x44>)
 80017d8:	2280      	movs	r2, #128	@ 0x80
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	@ (80017f0 <MX_TIM16_Init+0x44>)
 80017de:	f007 fee5 	bl	80095ac <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80017e8:	f001 f9de 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000099c 	.word	0x2000099c
 80017f4:	40014400 	.word	0x40014400

080017f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017fc:	4b13      	ldr	r3, [pc, #76]	@ (800184c <MX_USART1_UART_Init+0x54>)
 80017fe:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <MX_USART1_UART_Init+0x58>)
 8001800:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 400000;
 8001802:	4b12      	ldr	r3, [pc, #72]	@ (800184c <MX_USART1_UART_Init+0x54>)
 8001804:	4a13      	ldr	r2, [pc, #76]	@ (8001854 <MX_USART1_UART_Init+0x5c>)
 8001806:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001808:	4b10      	ldr	r3, [pc, #64]	@ (800184c <MX_USART1_UART_Init+0x54>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_USART1_UART_Init+0x54>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <MX_USART1_UART_Init+0x54>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800181a:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_USART1_UART_Init+0x54>)
 800181c:	220c      	movs	r2, #12
 800181e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <MX_USART1_UART_Init+0x54>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_USART1_UART_Init+0x54>)
 8001828:	2200      	movs	r2, #0
 800182a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182c:	4b07      	ldr	r3, [pc, #28]	@ (800184c <MX_USART1_UART_Init+0x54>)
 800182e:	2200      	movs	r2, #0
 8001830:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_USART1_UART_Init+0x54>)
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	@ (800184c <MX_USART1_UART_Init+0x54>)
 800183a:	f008 f951 	bl	8009ae0 <HAL_UART_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001844:	f001 f9b0 	bl	8002ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200009e8 	.word	0x200009e8
 8001850:	40013800 	.word	0x40013800
 8001854:	00061a80 	.word	0x00061a80

08001858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800185e:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <MX_DMA_Init+0x90>)
 8001860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001862:	4a21      	ldr	r2, [pc, #132]	@ (80018e8 <MX_DMA_Init+0x90>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6493      	str	r3, [r2, #72]	@ 0x48
 800186a:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <MX_DMA_Init+0x90>)
 800186c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001876:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <MX_DMA_Init+0x90>)
 8001878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800187a:	4a1b      	ldr	r2, [pc, #108]	@ (80018e8 <MX_DMA_Init+0x90>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6493      	str	r3, [r2, #72]	@ 0x48
 8001882:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <MX_DMA_Init+0x90>)
 8001884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2105      	movs	r1, #5
 8001892:	200c      	movs	r0, #12
 8001894:	f001 ff23 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001898:	200c      	movs	r0, #12
 800189a:	f001 ff3c 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2105      	movs	r1, #5
 80018a2:	200d      	movs	r0, #13
 80018a4:	f001 ff1b 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018a8:	200d      	movs	r0, #13
 80018aa:	f001 ff34 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2105      	movs	r1, #5
 80018b2:	200e      	movs	r0, #14
 80018b4:	f001 ff13 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018b8:	200e      	movs	r0, #14
 80018ba:	f001 ff2c 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2105      	movs	r1, #5
 80018c2:	200f      	movs	r0, #15
 80018c4:	f001 ff0b 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018c8:	200f      	movs	r0, #15
 80018ca:	f001 ff24 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2105      	movs	r1, #5
 80018d2:	2044      	movs	r0, #68	@ 0x44
 80018d4:	f001 ff03 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80018d8:	2044      	movs	r0, #68	@ 0x44
 80018da:	f001 ff1c 	bl	8003716 <HAL_NVIC_EnableIRQ>

}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	4b4a      	ldr	r3, [pc, #296]	@ (8001a2c <MX_GPIO_Init+0x140>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001906:	4a49      	ldr	r2, [pc, #292]	@ (8001a2c <MX_GPIO_Init+0x140>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800190e:	4b47      	ldr	r3, [pc, #284]	@ (8001a2c <MX_GPIO_Init+0x140>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800191a:	4b44      	ldr	r3, [pc, #272]	@ (8001a2c <MX_GPIO_Init+0x140>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	4a43      	ldr	r2, [pc, #268]	@ (8001a2c <MX_GPIO_Init+0x140>)
 8001920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001926:	4b41      	ldr	r3, [pc, #260]	@ (8001a2c <MX_GPIO_Init+0x140>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b3e      	ldr	r3, [pc, #248]	@ (8001a2c <MX_GPIO_Init+0x140>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	4a3d      	ldr	r2, [pc, #244]	@ (8001a2c <MX_GPIO_Init+0x140>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a2c <MX_GPIO_Init+0x140>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b38      	ldr	r3, [pc, #224]	@ (8001a2c <MX_GPIO_Init+0x140>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	4a37      	ldr	r2, [pc, #220]	@ (8001a2c <MX_GPIO_Init+0x140>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001956:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <MX_GPIO_Init+0x140>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2110      	movs	r1, #16
 8001966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196a:	f002 fd25 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001974:	482e      	ldr	r0, [pc, #184]	@ (8001a30 <MX_GPIO_Init+0x144>)
 8001976:	f002 fd1f 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS_P_Pin|STATUS_N_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	21c0      	movs	r1, #192	@ 0xc0
 800197e:	482d      	ldr	r0, [pc, #180]	@ (8001a34 <MX_GPIO_Init+0x148>)
 8001980:	f002 fd1a 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001984:	2310      	movs	r3, #16
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199e:	f002 fb91 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80019a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	481d      	ldr	r0, [pc, #116]	@ (8001a30 <MX_GPIO_Init+0x144>)
 80019bc:	f002 fb82 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB_ST_Pin */
  GPIO_InitStruct.Pin = PB_ST_Pin;
 80019c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB_ST_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4816      	ldr	r0, [pc, #88]	@ (8001a30 <MX_GPIO_Init+0x144>)
 80019d8:	f002 fb74 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_P_Pin */
  GPIO_InitStruct.Pin = STATUS_P_Pin;
 80019dc:	2340      	movs	r3, #64	@ 0x40
 80019de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_P_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	4810      	ldr	r0, [pc, #64]	@ (8001a34 <MX_GPIO_Init+0x148>)
 80019f4:	f002 fb66 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_N_Pin */
  GPIO_InitStruct.Pin = STATUS_N_Pin;
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_N_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <MX_GPIO_Init+0x148>)
 8001a10:	f002 fb58 	bl	80040c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2105      	movs	r1, #5
 8001a18:	2028      	movs	r0, #40	@ 0x28
 8001a1a:	f001 fe60 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a1e:	2028      	movs	r0, #40	@ 0x28
 8001a20:	f001 fe79 	bl	8003716 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	@ 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	48000800 	.word	0x48000800

08001a38 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	kappa("Alarm!\r\n");
 8001a40:	4803      	ldr	r0, [pc, #12]	@ (8001a50 <HAL_RTC_AlarmAEventCallback+0x18>)
 8001a42:	f7ff fcc9 	bl	80013d8 <kappa>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	0801b214 	.word	0x0801b214

08001a54 <Queue_put>:

	return t;
}

osStatus_t Queue_put(struct BUFF *queue, uint8_t *msg_in, uint8_t msg_len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	71fb      	strb	r3, [r7, #7]
	if (queue->bufferLength == max_msgs)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	d105      	bne.n	8001a76 <Queue_put+0x22>
	{
		#ifdef DEBUG
			kappa("\r\nBuffer is full!");
 8001a6a:	481c      	ldr	r0, [pc, #112]	@ (8001adc <Queue_put+0x88>)
 8001a6c:	f7ff fcb4 	bl	80013d8 <kappa>
		#endif
		return osError;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a74:	e02d      	b.n	8001ad2 <Queue_put+0x7e>
	}
	queue->bufferMain[queue->writeIndex][0] = msg_len;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	885b      	ldrh	r3, [r3, #2]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	2364      	movs	r3, #100	@ 0x64
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3306      	adds	r3, #6
 8001a88:	79fa      	ldrb	r2, [r7, #7]
 8001a8a:	701a      	strb	r2, [r3, #0]
	//memset(queue->bufferMain[queue->writeIndex], 0, buffer_size);	TODO: Make this work//Clear buffer for previous data
	memcpy(&queue->bufferMain[queue->writeIndex][1], msg_in, msg_len);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	885b      	ldrh	r3, [r3, #2]
 8001a90:	461a      	mov	r2, r3
 8001a92:	2364      	movs	r3, #100	@ 0x64
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3306      	adds	r3, #6
 8001aa0:	79fa      	ldrb	r2, [r7, #7]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f013 fee4 	bl	8015872 <memcpy>

	queue->bufferLength++;	 //	Increase buffer size after writing
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	801a      	strh	r2, [r3, #0]
	queue->writeIndex++;	 //	Increase writeIndex position to prepare for next write
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	885b      	ldrh	r3, [r3, #2]
 8001aba:	3301      	adds	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	805a      	strh	r2, [r3, #2]

	// If at last index in buffer, set writeIndex back to 0
	if (queue->writeIndex == max_msgs)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	885b      	ldrh	r3, [r3, #2]
 8001ac6:	2b0a      	cmp	r3, #10
 8001ac8:	d102      	bne.n	8001ad0 <Queue_put+0x7c>
		queue->writeIndex = 0;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	805a      	strh	r2, [r3, #2]

	return osOK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	0801b220 	.word	0x0801b220

08001ae0 <Queue_get>:

osStatus_t Queue_get(struct BUFF *queue, uint8_t *msg_out)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	if (queue->bufferLength == 0)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d105      	bne.n	8001afe <Queue_get+0x1e>
	{
		#ifdef DEBUG
			kappa("\r\nBuffer is empty!");
 8001af2:	481b      	ldr	r0, [pc, #108]	@ (8001b60 <Queue_get+0x80>)
 8001af4:	f7ff fc70 	bl	80013d8 <kappa>
		#endif
		return osError;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001afc:	e02b      	b.n	8001b56 <Queue_get+0x76>
	}

	memcpy(msg_out, queue->bufferMain[queue->readIndex], queue->bufferMain[queue->readIndex][0]+1);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	889b      	ldrh	r3, [r3, #4]
 8001b02:	461a      	mov	r2, r3
 8001b04:	2364      	movs	r3, #100	@ 0x64
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	1d99      	adds	r1, r3, #6
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	889b      	ldrh	r3, [r3, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	2364      	movs	r3, #100	@ 0x64
 8001b1a:	fb00 f303 	mul.w	r3, r0, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3306      	adds	r3, #6
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	461a      	mov	r2, r3
 8001b28:	6838      	ldr	r0, [r7, #0]
 8001b2a:	f013 fea2 	bl	8015872 <memcpy>
	queue->bufferLength--;	 //	Decrease buffer size after reading
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	801a      	strh	r2, [r3, #0]
	queue->readIndex++;	 //	Increase readIndex position to prepare for next read
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	889b      	ldrh	r3, [r3, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	809a      	strh	r2, [r3, #4]

	// If at last index in buffer, set readIndex back to 0
	if (queue->readIndex == max_msgs)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	889b      	ldrh	r3, [r3, #4]
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d102      	bne.n	8001b54 <Queue_get+0x74>
		queue->readIndex = 0;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	809a      	strh	r2, [r3, #4]

	return osOK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	0801b234 	.word	0x0801b234

08001b64 <task_usb>:

	return osOK;
}

void task_usb(void *argument)
{
 8001b64:	b5b0      	push	{r4, r5, r7, lr}
 8001b66:	b090      	sub	sp, #64	@ 0x40
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN task_usb */
	uint16_t data_len = 0, tout = 100;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001b70:	2364      	movs	r3, #100	@ 0x64
 8001b72:	863b      	strh	r3, [r7, #48]	@ 0x30
	uint64_t p;

	uint64_t config_val = 0;
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	RTC_DateTypeDef date;

	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(sem_usbHandle, osWaitForever);
 8001b80:	4b64      	ldr	r3, [pc, #400]	@ (8001d14 <task_usb+0x1b0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00d fa57 	bl	800f03c <osSemaphoreAcquire>
		#ifdef debug_USB
			//kappa("\r\ncmd0:%02x%02x%02x", usb_cmd[0], usb_cmd[1], usb_cmd[2]);
		#endif

		kappa("\r\nQueue out [%d]: ", USB_msgs.bufferLength);
 8001b8e:	4b62      	ldr	r3, [pc, #392]	@ (8001d18 <task_usb+0x1b4>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	4619      	mov	r1, r3
 8001b94:	4861      	ldr	r0, [pc, #388]	@ (8001d1c <task_usb+0x1b8>)
 8001b96:	f7ff fc1f 	bl	80013d8 <kappa>
		while(USB_msgs.bufferLength>0)
 8001b9a:	e017      	b.n	8001bcc <task_usb+0x68>
		{
			Queue_get(&USB_msgs, usb_cmd);
 8001b9c:	4960      	ldr	r1, [pc, #384]	@ (8001d20 <task_usb+0x1bc>)
 8001b9e:	485e      	ldr	r0, [pc, #376]	@ (8001d18 <task_usb+0x1b4>)
 8001ba0:	f7ff ff9e 	bl	8001ae0 <Queue_get>
			for(int ii=0;ii<usb_cmd[0];ii++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ba8:	e00a      	b.n	8001bc0 <task_usb+0x5c>
				kappa("%c", usb_cmd[ii+1]);
 8001baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a5c      	ldr	r2, [pc, #368]	@ (8001d20 <task_usb+0x1bc>)
 8001bb0:	5cd3      	ldrb	r3, [r2, r3]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	485b      	ldr	r0, [pc, #364]	@ (8001d24 <task_usb+0x1c0>)
 8001bb6:	f7ff fc0f 	bl	80013d8 <kappa>
			for(int ii=0;ii<usb_cmd[0];ii++)
 8001bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc0:	4b57      	ldr	r3, [pc, #348]	@ (8001d20 <task_usb+0x1bc>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	dbee      	blt.n	8001baa <task_usb+0x46>
		while(USB_msgs.bufferLength>0)
 8001bcc:	4b52      	ldr	r3, [pc, #328]	@ (8001d18 <task_usb+0x1b4>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e3      	bne.n	8001b9c <task_usb+0x38>
		}

		switch(usb_cmd[1])
 8001bd4:	4b52      	ldr	r3, [pc, #328]	@ (8001d20 <task_usb+0x1bc>)
 8001bd6:	785b      	ldrb	r3, [r3, #1]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	dc19      	bgt.n	8001c10 <task_usb+0xac>
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f340 8093 	ble.w	8001d08 <task_usb+0x1a4>
 8001be2:	3b01      	subs	r3, #1
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	f200 808f 	bhi.w	8001d08 <task_usb+0x1a4>
 8001bea:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf0 <task_usb+0x8c>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c23 	.word	0x08001c23
 8001bf4:	08001c39 	.word	0x08001c39
 8001bf8:	08001c5b 	.word	0x08001c5b
 8001bfc:	08001c63 	.word	0x08001c63
 8001c00:	08001c7b 	.word	0x08001c7b
 8001c04:	08001cb3 	.word	0x08001cb3
 8001c08:	08001cfb 	.word	0x08001cfb
 8001c0c:	08001d11 	.word	0x08001d11
 8001c10:	2bff      	cmp	r3, #255	@ 0xff
 8001c12:	d179      	bne.n	8001d08 <task_usb+0x1a4>
		{
			case 0xFF:	//Validate PC connection sending the random bytes back
				CDC_Transmit_FS(&usb_cmd[1], usb_cmd[0]);
 8001c14:	4b42      	ldr	r3, [pc, #264]	@ (8001d20 <task_usb+0x1bc>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4843      	ldr	r0, [pc, #268]	@ (8001d28 <task_usb+0x1c4>)
 8001c1c:	f010 fda4 	bl	8012768 <CDC_Transmit_FS>
				#ifdef debug_USB
					kappa("\r\nConnected!");
				#endif
			break;
 8001c20:	e077      	b.n	8001d12 <task_usb+0x1ae>

			case 0x01:	//Get EEPROM data length
				data_len = get_eeprom_data_len();
 8001c22:	f7ff fa5d 	bl	80010e0 <get_eeprom_data_len>
 8001c26:	4603      	mov	r3, r0
 8001c28:	867b      	strh	r3, [r7, #50]	@ 0x32
				#ifdef debug_USB
					kappa("\r\nData_len: %d", data_len);
				#endif
				CDC_Transmit_FS((uint8_t*)&data_len, 2);
 8001c2a:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 8001c2e:	2102      	movs	r1, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f010 fd99 	bl	8012768 <CDC_Transmit_FS>
			break;
 8001c36:	e06c      	b.n	8001d12 <task_usb+0x1ae>

			case 0x02: //Read EEPROM data
				memcpy(&data_len, &usb_cmd[2], 2);
 8001c38:	4b39      	ldr	r3, [pc, #228]	@ (8001d20 <task_usb+0x1bc>)
 8001c3a:	885b      	ldrh	r3, [r3, #2]
 8001c3c:	867b      	strh	r3, [r7, #50]	@ 0x32
				Single_Read(eeprom_aux_buffer, data_len*M95P32_PAGESIZE, block_len*2);
 8001c3e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001c40:	025b      	lsls	r3, r3, #9
 8001c42:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 8001c46:	4619      	mov	r1, r3
 8001c48:	4838      	ldr	r0, [pc, #224]	@ (8001d2c <task_usb+0x1c8>)
 8001c4a:	f7ff fb33 	bl	80012b4 <Single_Read>
					kappa("\r\nSel data: %d", data_len);
					kappa("\r\nRead: ");
					for(int ii=0;ii<block_len*2;ii++)
						kappa("%02x", eeprom_aux_buffer[ii]);
				#endif
				CDC_Transmit_FS(eeprom_aux_buffer, block_len*2);
 8001c4e:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 8001c52:	4836      	ldr	r0, [pc, #216]	@ (8001d2c <task_usb+0x1c8>)
 8001c54:	f010 fd88 	bl	8012768 <CDC_Transmit_FS>
			break;
 8001c58:	e05b      	b.n	8001d12 <task_usb+0x1ae>

			case 0x03:	//Enter LPWA configuration
				memcpy(&tout, &usb_cmd[2], 2);
 8001c5a:	4b31      	ldr	r3, [pc, #196]	@ (8001d20 <task_usb+0x1bc>)
 8001c5c:	885b      	ldrh	r3, [r3, #2]
 8001c5e:	863b      	strh	r3, [r7, #48]	@ 0x30

				#ifdef debug_USB
					kappa("\r\nIoT Config! (Tout=%d)", tout);
				#endif

			break;
 8001c60:	e057      	b.n	8001d12 <task_usb+0x1ae>

			case 0x04:	//Get configuration value from flash memory
				p = *(uint64_t *)ADDR_FLASH_PAGE_252;
 8001c62:	4b33      	ldr	r3, [pc, #204]	@ (8001d30 <task_usb+0x1cc>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
				#ifdef debug_USB
					kappa("\r\nConfig. value:%lx - %lx",(uint32_t)(p>>32), (uint32_t)(p&0xFFFFFFFF));
				#endif
				CDC_Transmit_FS((uint8_t*)&p, 8);
 8001c6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c70:	2108      	movs	r1, #8
 8001c72:	4618      	mov	r0, r3
 8001c74:	f010 fd78 	bl	8012768 <CDC_Transmit_FS>
			break;
 8001c78:	e04b      	b.n	8001d12 <task_usb+0x1ae>

			case 0x05:	//Receive 64bit configuration data and store it in flash

				memcpy(&config_val, &usb_cmd[2], 8);
 8001c7a:	4b29      	ldr	r3, [pc, #164]	@ (8001d20 <task_usb+0x1bc>)
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	681c      	ldr	r4, [r3, #0]
 8001c80:	685d      	ldr	r5, [r3, #4]
 8001c82:	4622      	mov	r2, r4
 8001c84:	462b      	mov	r3, r5
 8001c86:	e9c7 2308 	strd	r2, r3, [r7, #32]

				#ifdef debug_USB
					kappa("\r\nConfig_val: %d", config_val);
				#endif
				store_config_64(config_val);
 8001c8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f000 f85f 	bl	8001d54 <store_config_64>
				vTaskDelay(100);
 8001c96:	2064      	movs	r0, #100	@ 0x64
 8001c98:	f00e fdf8 	bl	801088c <vTaskDelay>
				load_config(&cal, &gps_enabled, &lpwa_enabled, &octave, &RecTime, &LeqTime);
 8001c9c:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <task_usb+0x1d0>)
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <task_usb+0x1d4>)
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <task_usb+0x1d8>)
 8001ca6:	4a26      	ldr	r2, [pc, #152]	@ (8001d40 <task_usb+0x1dc>)
 8001ca8:	4926      	ldr	r1, [pc, #152]	@ (8001d44 <task_usb+0x1e0>)
 8001caa:	4827      	ldr	r0, [pc, #156]	@ (8001d48 <task_usb+0x1e4>)
 8001cac:	f000 f8fc 	bl	8001ea8 <load_config>
				#ifdef debug_USB
					kappa("\r\nCal: %f, gps:%d, lwpa:%d, octave:%d, Rec:%d, Leq:%d", cal, gps_enabled, lpwa_enabled, octave, RecTime, LeqTime);
				#endif
			break;
 8001cb0:	e02f      	b.n	8001d12 <task_usb+0x1ae>

			case 0x06:
				time.Hours = usb_cmd[2];
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <task_usb+0x1bc>)
 8001cb4:	789b      	ldrb	r3, [r3, #2]
 8001cb6:	733b      	strb	r3, [r7, #12]
				time.Minutes = usb_cmd[3];
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <task_usb+0x1bc>)
 8001cba:	78db      	ldrb	r3, [r3, #3]
 8001cbc:	737b      	strb	r3, [r7, #13]
				time.Seconds = usb_cmd[4];
 8001cbe:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <task_usb+0x1bc>)
 8001cc0:	791b      	ldrb	r3, [r3, #4]
 8001cc2:	73bb      	strb	r3, [r7, #14]
				date.WeekDay = usb_cmd[5];
 8001cc4:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <task_usb+0x1bc>)
 8001cc6:	795b      	ldrb	r3, [r3, #5]
 8001cc8:	723b      	strb	r3, [r7, #8]
				date.Year = usb_cmd[6];
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <task_usb+0x1bc>)
 8001ccc:	799b      	ldrb	r3, [r3, #6]
 8001cce:	72fb      	strb	r3, [r7, #11]
				date.Month = usb_cmd[7];
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <task_usb+0x1bc>)
 8001cd2:	79db      	ldrb	r3, [r3, #7]
 8001cd4:	727b      	strb	r3, [r7, #9]
				date.Date = usb_cmd[8];
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <task_usb+0x1bc>)
 8001cd8:	7a1b      	ldrb	r3, [r3, #8]
 8001cda:	72bb      	strb	r3, [r7, #10]
				HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4819      	ldr	r0, [pc, #100]	@ (8001d4c <task_usb+0x1e8>)
 8001ce6:	f005 fc7d 	bl	80075e4 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4816      	ldr	r0, [pc, #88]	@ (8001d4c <task_usb+0x1e8>)
 8001cf4:	f005 fd13 	bl	800771e <HAL_RTC_SetDate>
					sprintf((char *)currTimeBuff, "%02d/%02d/%02d %02d:%02d:%02d %04lu/%04lu", rtc_date.Date, rtc_date.Month, rtc_date.Year,
								rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, rtc_time.SubSeconds, rtc_time.SecondFraction);
					kappa("\r\n%s", currTimeBuff);
					kappa("\r\nDatetime Configuration EXIT!");
				#endif
			break;
 8001cf8:	e00b      	b.n	8001d12 <task_usb+0x1ae>

			case 0x07:
				//TODO: Return data to validate erase ok
				WRITE_ENABLE();
 8001cfa:	f7ff fa7b 	bl	80011f4 <WRITE_ENABLE>
				Chip_Erase();
 8001cfe:	f7ff fb39 	bl	8001374 <Chip_Erase>
				WRITE_DISABLE();
 8001d02:	f7ff faa7 	bl	8001254 <WRITE_DISABLE>
				#ifdef debug_USB
					kappa("\r\nChip_Erase");
				#endif
			break;
 8001d06:	e004      	b.n	8001d12 <task_usb+0x1ae>
			case 0x08:

			break;

			default:
				kappa("\r\nUnknown command!");
 8001d08:	4811      	ldr	r0, [pc, #68]	@ (8001d50 <task_usb+0x1ec>)
 8001d0a:	f7ff fb65 	bl	80013d8 <kappa>
			break;
 8001d0e:	e000      	b.n	8001d12 <task_usb+0x1ae>
			break;
 8001d10:	bf00      	nop
		osSemaphoreAcquire(sem_usbHandle, osWaitForever);
 8001d12:	e735      	b.n	8001b80 <task_usb+0x1c>
 8001d14:	20000ad0 	.word	0x20000ad0
 8001d18:	20000b90 	.word	0x20000b90
 8001d1c:	0801b274 	.word	0x0801b274
 8001d20:	20000b20 	.word	0x20000b20
 8001d24:	0801b288 	.word	0x0801b288
 8001d28:	20000b21 	.word	0x20000b21
 8001d2c:	20018794 	.word	0x20018794
 8001d30:	0807e000 	.word	0x0807e000
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000b8c 	.word	0x20000b8c
 8001d3c:	20000002 	.word	0x20000002
 8001d40:	20000b86 	.word	0x20000b86
 8001d44:	20000b85 	.word	0x20000b85
 8001d48:	20000b88 	.word	0x20000b88
 8001d4c:	20000790 	.word	0x20000790
 8001d50:	0801b28c 	.word	0x0801b28c

08001d54 <store_config_64>:
	}
	//kappa("\r\n");
}

void store_config_64(uint64_t config_data)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t ctr = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef stat = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73bb      	strb	r3, [r7, #14]
	if (HAL_FLASH_Unlock()!= HAL_OK)
 8001d66:	f001 ffa3 	bl	8003cb0 <HAL_FLASH_Unlock>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <store_config_64+0x24>
			kappa("\r\nError unlocking memory...");
 8001d70:	4842      	ldr	r0, [pc, #264]	@ (8001e7c <store_config_64+0x128>)
 8001d72:	f7ff fb31 	bl	80013d8 <kappa>
 8001d76:	e002      	b.n	8001d7e <store_config_64+0x2a>
	else
		kappa("\r\nMEMORY UNLOCKED!");
 8001d78:	4841      	ldr	r0, [pc, #260]	@ (8001e80 <store_config_64+0x12c>)
 8001d7a:	f7ff fb2d 	bl	80013d8 <kappa>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001d7e:	4b41      	ldr	r3, [pc, #260]	@ (8001e84 <store_config_64+0x130>)
 8001d80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d84:	611a      	str	r2, [r3, #16]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d86:	4b40      	ldr	r3, [pc, #256]	@ (8001e88 <store_config_64+0x134>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
	//EraseInitStruct.TypeErase = FLASH_TYPEERASE_MASSERASE;
	EraseInitStruct.NbPages = 1;
 8001d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e88 <store_config_64+0x134>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	60da      	str	r2, [r3, #12]
	EraseInitStruct.Page	= 252;
 8001d92:	4b3d      	ldr	r3, [pc, #244]	@ (8001e88 <store_config_64+0x134>)
 8001d94:	22fc      	movs	r2, #252	@ 0xfc
 8001d96:	609a      	str	r2, [r3, #8]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8001d98:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <store_config_64+0x134>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	605a      	str	r2, [r3, #4]
	vTaskDelay(150);
 8001d9e:	2096      	movs	r0, #150	@ 0x96
 8001da0:	f00e fd74 	bl	801088c <vTaskDelay>
	stat = HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) ;
 8001da4:	4939      	ldr	r1, [pc, #228]	@ (8001e8c <store_config_64+0x138>)
 8001da6:	4838      	ldr	r0, [pc, #224]	@ (8001e88 <store_config_64+0x134>)
 8001da8:	f002 f866 	bl	8003e78 <HAL_FLASHEx_Erase>
 8001dac:	4603      	mov	r3, r0
 8001dae:	73bb      	strb	r3, [r7, #14]
	while ((stat!= HAL_OK) & (ctr<3))
 8001db0:	e00e      	b.n	8001dd0 <store_config_64+0x7c>
	{
		kappa("\r\nError clearing memory...");
 8001db2:	4837      	ldr	r0, [pc, #220]	@ (8001e90 <store_config_64+0x13c>)
 8001db4:	f7ff fb10 	bl	80013d8 <kappa>
		ctr++;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(150);
 8001dbe:	2096      	movs	r0, #150	@ 0x96
 8001dc0:	f00e fd64 	bl	801088c <vTaskDelay>
		stat = HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) ;
 8001dc4:	4931      	ldr	r1, [pc, #196]	@ (8001e8c <store_config_64+0x138>)
 8001dc6:	4830      	ldr	r0, [pc, #192]	@ (8001e88 <store_config_64+0x134>)
 8001dc8:	f002 f856 	bl	8003e78 <HAL_FLASHEx_Erase>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	73bb      	strb	r3, [r7, #14]
	while ((stat!= HAL_OK) & (ctr<3))
 8001dd0:	7bbb      	ldrb	r3, [r7, #14]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	bf94      	ite	ls
 8001de2:	2301      	movls	r3, #1
 8001de4:	2300      	movhi	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4013      	ands	r3, r2
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1e0      	bne.n	8001db2 <store_config_64+0x5e>
	}
	if (stat==HAL_OK)
 8001df0:	7bbb      	ldrb	r3, [r7, #14]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <store_config_64+0xa8>
		kappa("\r\nMEMORY ERASED!");
 8001df6:	4827      	ldr	r0, [pc, #156]	@ (8001e94 <store_config_64+0x140>)
 8001df8:	f7ff faee 	bl	80013d8 <kappa>

	vTaskDelay(150);
 8001dfc:	2096      	movs	r0, #150	@ 0x96
 8001dfe:	f00e fd45 	bl	801088c <vTaskDelay>
	ctr=0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
	stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_252,  config_data);
 8001e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e0a:	4923      	ldr	r1, [pc, #140]	@ (8001e98 <store_config_64+0x144>)
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f001 fee3 	bl	8003bd8 <HAL_FLASH_Program>
 8001e12:	4603      	mov	r3, r0
 8001e14:	73bb      	strb	r3, [r7, #14]
	while ( (stat != HAL_OK) & (ctr<3))
 8001e16:	e012      	b.n	8001e3e <store_config_64+0xea>
	{
		kappa("\r\nError writing config (%d)...", stat);
 8001e18:	7bbb      	ldrb	r3, [r7, #14]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	481f      	ldr	r0, [pc, #124]	@ (8001e9c <store_config_64+0x148>)
 8001e1e:	f7ff fadb 	bl	80013d8 <kappa>
		ctr++;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	3301      	adds	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(150);
 8001e28:	2096      	movs	r0, #150	@ 0x96
 8001e2a:	f00e fd2f 	bl	801088c <vTaskDelay>
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_252,  config_data);
 8001e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e32:	4919      	ldr	r1, [pc, #100]	@ (8001e98 <store_config_64+0x144>)
 8001e34:	2000      	movs	r0, #0
 8001e36:	f001 fecf 	bl	8003bd8 <HAL_FLASH_Program>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	73bb      	strb	r3, [r7, #14]
	while ( (stat != HAL_OK) & (ctr<3))
 8001e3e:	7bbb      	ldrb	r3, [r7, #14]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4013      	ands	r3, r2
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1dc      	bne.n	8001e18 <store_config_64+0xc4>
	}

	if (stat==HAL_OK)
 8001e5e:	7bbb      	ldrb	r3, [r7, #14]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <store_config_64+0x116>
		kappa("\r\nCONFIG STORED!");
 8001e64:	480e      	ldr	r0, [pc, #56]	@ (8001ea0 <store_config_64+0x14c>)
 8001e66:	f7ff fab7 	bl	80013d8 <kappa>

	HAL_FLASH_Lock();
 8001e6a:	f001 ff43 	bl	8003cf4 <HAL_FLASH_Lock>

	kappa("\r\nStore_config_64 finished!");
 8001e6e:	480d      	ldr	r0, [pc, #52]	@ (8001ea4 <store_config_64+0x150>)
 8001e70:	f7ff fab2 	bl	80013d8 <kappa>
}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	0801b2a0 	.word	0x0801b2a0
 8001e80:	0801b2bc 	.word	0x0801b2bc
 8001e84:	40022000 	.word	0x40022000
 8001e88:	20000b10 	.word	0x20000b10
 8001e8c:	20000b0c 	.word	0x20000b0c
 8001e90:	0801b2d0 	.word	0x0801b2d0
 8001e94:	0801b2ec 	.word	0x0801b2ec
 8001e98:	0807e000 	.word	0x0807e000
 8001e9c:	0801b300 	.word	0x0801b300
 8001ea0:	0801b320 	.word	0x0801b320
 8001ea4:	0801b334 	.word	0x0801b334

08001ea8 <load_config>:
	////kappa("\r\nstore_config Done!");
}

void load_config(float32_t *cal_loc, uint8_t *gps_loc, uint8_t *lpwa_loc,
			uint8_t *octave_loc, uint16_t *RecTime_loc, uint16_t	*LeqTime_loc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	@ 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
	Address =ADDR_FLASH_PAGE_252;
 8001eb6:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <load_config+0x98>)
 8001eb8:	4a22      	ldr	r2, [pc, #136]	@ (8001f44 <load_config+0x9c>)
 8001eba:	601a      	str	r2, [r3, #0]
	uint64_t *p = (uint64_t *)ADDR_FLASH_PAGE_252;
 8001ebc:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <load_config+0x9c>)
 8001ebe:	61fb      	str	r3, [r7, #28]
	////kappa("\r\nload_config: %lx - %lx",(uint32_t)((*p)>>32), (uint32_t)((*p)&0xFFFFFFFF));
	uint32_t pt1 = (*p)>>32;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	000a      	movs	r2, r1
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]
	uint32_t pt2 = (uint32_t)((*p)&0xFFFFFFFF);
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	4613      	mov	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
	*cal_loc = *(float32_t*)&pt1;
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	601a      	str	r2, [r3, #0]
	*gps_loc = (pt2>>31);
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	0fdb      	lsrs	r3, r3, #31
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	701a      	strb	r2, [r3, #0]
	*lpwa_loc = (pt2>>30)&0x01;
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	0f9b      	lsrs	r3, r3, #30
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	701a      	strb	r2, [r3, #0]
	*octave_loc = (pt2>>29)&0x01;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	0f5b      	lsrs	r3, r3, #29
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	701a      	strb	r2, [r3, #0]
	*RecTime_loc = ((pt2>>16)&0x1FFF);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	0c1b      	lsrs	r3, r3, #16
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f22:	801a      	strh	r2, [r3, #0]
	*LeqTime_loc = ((pt2>>4)&0xFFF);
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f32:	801a      	strh	r2, [r3, #0]
	////kappa("\r\nload_config Done!");
}
 8001f34:	bf00      	nop
 8001f36:	3724      	adds	r7, #36	@ 0x24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20000b08 	.word	0x20000b08
 8001f44:	0807e000 	.word	0x0807e000

08001f48 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	kappa("\r\nWakeup timer");
 8001f50:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8001f52:	f7ff fa41 	bl	80013d8 <kappa>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f56:	2028      	movs	r0, #40	@ 0x28
 8001f58:	f001 fbdd 	bl	8003716 <HAL_NVIC_EnableIRQ>
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f005 fd61 	bl	8007a24 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	0801b350 	.word	0x0801b350

08001f70 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(sem_SPI_DMAHandle);
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <HAL_SPI_TxCpltCallback+0x1c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00d f8af 	bl	800f0e0 <osSemaphoreRelease>

	//TODO: IMPLEMENT SPI port identification
	//osSemaphoreRelease(sem_mem_writeHandle);
	//kappa("\r\nSPI Tx!");
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000ad4 	.word	0x20000ad4

08001f90 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(sem_SPI_DMAHandle);
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <HAL_SPI_RxCpltCallback+0x1c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00d f89f 	bl	800f0e0 <osSemaphoreRelease>

	//TODO: IMPLEMENT SPI port identification
	//osSemaphoreRelease(sem_mem_readHandle);
	//kappa("\r\nSPI Rx!");
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000ad4 	.word	0x20000ad4

08001fb0 <ADXL355_SPI_Read_DMA>:

uint32_t ADXL355_SPI_Read_DMA(uint8_t ui8address) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;
	uint8_t recieveData;
	uint8_t txData;

	txData = (ui8address << 1) | 1 ;
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET); //ON
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fd0:	481a      	ldr	r0, [pc, #104]	@ (800203c <ADXL355_SPI_Read_DMA+0x8c>)
 8001fd2:	f002 f9f1 	bl	80043b8 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit_DMA(&hspi2, &txData, 1);
 8001fd6:	f107 030d 	add.w	r3, r7, #13
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4818      	ldr	r0, [pc, #96]	@ (8002040 <ADXL355_SPI_Read_DMA+0x90>)
 8001fe0:	f006 fb20 	bl	8008624 <HAL_SPI_Transmit_DMA>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]
	osSemaphoreAcquire(sem_SPI_DMAHandle, osWaitForever);
 8001fe8:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <ADXL355_SPI_Read_DMA+0x94>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00d f823 	bl	800f03c <osSemaphoreAcquire>

	status = HAL_SPI_Receive_DMA(&hspi2, &recieveData, 1);
 8001ff6:	f107 030e 	add.w	r3, r7, #14
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4810      	ldr	r0, [pc, #64]	@ (8002040 <ADXL355_SPI_Read_DMA+0x90>)
 8002000:	f006 fc00 	bl	8008804 <HAL_SPI_Receive_DMA>
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]
	osSemaphoreAcquire(sem_SPI_DMAHandle, osWaitForever);
 8002008:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <ADXL355_SPI_Read_DMA+0x94>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002010:	4618      	mov	r0, r3
 8002012:	f00d f813 	bl	800f03c <osSemaphoreAcquire>

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET); //OFF
 8002016:	2201      	movs	r2, #1
 8002018:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800201c:	4807      	ldr	r0, [pc, #28]	@ (800203c <ADXL355_SPI_Read_DMA+0x8c>)
 800201e:	f002 f9cb 	bl	80043b8 <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <ADXL355_SPI_Read_DMA+0x7c>
		return recieveData;
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	e003      	b.n	8002034 <ADXL355_SPI_Read_DMA+0x84>
	else
		printf("\r\nError Reading: Invalid HAL_STATUS\r\n");
 800202c:	4806      	ldr	r0, [pc, #24]	@ (8002048 <ADXL355_SPI_Read_DMA+0x98>)
 800202e:	f013 fa13 	bl	8015458 <puts>

	return 255;
 8002032:	23ff      	movs	r3, #255	@ 0xff
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	48000400 	.word	0x48000400
 8002040:	20000818 	.word	0x20000818
 8002044:	20000ad4 	.word	0x20000ad4
 8002048:	0801b360 	.word	0x0801b360

0800204c <ADXL355_SPI_Read>:

uint32_t ADXL355_SPI_Read(uint8_t ui8address) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;
	uint8_t recieveData;
	uint8_t txData;

	txData = (ui8address << 1) | 1 ;
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	b25b      	sxtb	r3, r3
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	b25b      	sxtb	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET); //ON
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800206c:	4813      	ldr	r0, [pc, #76]	@ (80020bc <ADXL355_SPI_Read+0x70>)
 800206e:	f002 f9a3 	bl	80043b8 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit (&hspi2, &txData, 1, 100);
 8002072:	f107 010d 	add.w	r1, r7, #13
 8002076:	2364      	movs	r3, #100	@ 0x64
 8002078:	2201      	movs	r2, #1
 800207a:	4811      	ldr	r0, [pc, #68]	@ (80020c0 <ADXL355_SPI_Read+0x74>)
 800207c:	f005 fe03 	bl	8007c86 <HAL_SPI_Transmit>
 8002080:	4603      	mov	r3, r0
 8002082:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Receive (&hspi2, &recieveData, 1, 100);
 8002084:	f107 010e 	add.w	r1, r7, #14
 8002088:	2364      	movs	r3, #100	@ 0x64
 800208a:	2201      	movs	r2, #1
 800208c:	480c      	ldr	r0, [pc, #48]	@ (80020c0 <ADXL355_SPI_Read+0x74>)
 800208e:	f005 ff6f 	bl	8007f70 <HAL_SPI_Receive>
 8002092:	4603      	mov	r3, r0
 8002094:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET); //OFF
 8002096:	2201      	movs	r2, #1
 8002098:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800209c:	4807      	ldr	r0, [pc, #28]	@ (80020bc <ADXL355_SPI_Read+0x70>)
 800209e:	f002 f98b 	bl	80043b8 <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <ADXL355_SPI_Read+0x60>
		return recieveData;
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	e003      	b.n	80020b4 <ADXL355_SPI_Read+0x68>
	else
		kappa("\r\nError Reading: Invalid HAL_STATUS\r\n");
 80020ac:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <ADXL355_SPI_Read+0x78>)
 80020ae:	f7ff f993 	bl	80013d8 <kappa>

	return 255;
 80020b2:	23ff      	movs	r3, #255	@ 0xff
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	48000400 	.word	0x48000400
 80020c0:	20000818 	.word	0x20000818
 80020c4:	0801b388 	.word	0x0801b388

080020c8 <ADXL355_SPI_Write>:
 * @param : enMode - regarding how many bytes of data you will write, i chose to not really use this and hardcoded a
 *                   1 for '1 byte' in every write I ever used
 *
 * This function is a callback for the accelerometer write
 */
void ADXL355_SPI_Write(uint8_t ui8address, uint8_t ui8Data, enWriteData enMode) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
 80020d2:	460b      	mov	r3, r1
 80020d4:	71bb      	strb	r3, [r7, #6]
 80020d6:	4613      	mov	r3, r2
 80020d8:	717b      	strb	r3, [r7, #5]

	HAL_StatusTypeDef status;
	uint8_t address;

	address = ((ui8address << 1) & 0xFE);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET); //ON
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020e8:	4811      	ldr	r0, [pc, #68]	@ (8002130 <ADXL355_SPI_Write+0x68>)
 80020ea:	f002 f965 	bl	80043b8 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit (&hspi2, &address, 1, 100);
 80020ee:	f107 010e 	add.w	r1, r7, #14
 80020f2:	2364      	movs	r3, #100	@ 0x64
 80020f4:	2201      	movs	r2, #1
 80020f6:	480f      	ldr	r0, [pc, #60]	@ (8002134 <ADXL355_SPI_Write+0x6c>)
 80020f8:	f005 fdc5 	bl	8007c86 <HAL_SPI_Transmit>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit (&hspi2, &ui8Data, 1, 100);
 8002100:	1db9      	adds	r1, r7, #6
 8002102:	2364      	movs	r3, #100	@ 0x64
 8002104:	2201      	movs	r2, #1
 8002106:	480b      	ldr	r0, [pc, #44]	@ (8002134 <ADXL355_SPI_Write+0x6c>)
 8002108:	f005 fdbd 	bl	8007c86 <HAL_SPI_Transmit>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET); //OFF
 8002110:	2201      	movs	r2, #1
 8002112:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002116:	4806      	ldr	r0, [pc, #24]	@ (8002130 <ADXL355_SPI_Write+0x68>)
 8002118:	f002 f94e 	bl	80043b8 <HAL_GPIO_WritePin>

	if (status != HAL_OK)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <ADXL355_SPI_Write+0x60>
		printf("\r\nError writing: Invalid HAL STATUS\r\n");
 8002122:	4805      	ldr	r0, [pc, #20]	@ (8002138 <ADXL355_SPI_Write+0x70>)
 8002124:	f013 f998 	bl	8015458 <puts>
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	48000400 	.word	0x48000400
 8002134:	20000818 	.word	0x20000818
 8002138:	0801b3b0 	.word	0x0801b3b0

0800213c <ADXL355_SPI_READ_ACC>:

int32_t ADXL355_SPI_READ_ACC(uint8_t axis)	//Axis = 0x00 - x, 0x01 - y, 0x02 - z
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
	uint32_t acc_val_raw3 = 0, acc_val_raw2 = 0, acc_val_raw1 = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
	int32_t acc_val = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]

	switch(axis)
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d020      	beq.n	800219e <ADXL355_SPI_READ_ACC+0x62>
 800215c:	2b02      	cmp	r3, #2
 800215e:	dc2b      	bgt.n	80021b8 <ADXL355_SPI_READ_ACC+0x7c>
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <ADXL355_SPI_READ_ACC+0x2e>
 8002164:	2b01      	cmp	r3, #1
 8002166:	d00d      	beq.n	8002184 <ADXL355_SPI_READ_ACC+0x48>
 8002168:	e026      	b.n	80021b8 <ADXL355_SPI_READ_ACC+0x7c>
	{
		case 0x00:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(XDATA3);
 800216a:	2008      	movs	r0, #8
 800216c:	f7ff ff20 	bl	8001fb0 <ADXL355_SPI_Read_DMA>
 8002170:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(XDATA2);
 8002172:	2009      	movs	r0, #9
 8002174:	f7ff ff1c 	bl	8001fb0 <ADXL355_SPI_Read_DMA>
 8002178:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(XDATA1);
 800217a:	200a      	movs	r0, #10
 800217c:	f7ff ff18 	bl	8001fb0 <ADXL355_SPI_Read_DMA>
 8002180:	60f8      	str	r0, [r7, #12]
		break;
 8002182:	e019      	b.n	80021b8 <ADXL355_SPI_READ_ACC+0x7c>

		case 0x01:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(YDATA3);
 8002184:	200b      	movs	r0, #11
 8002186:	f7ff ff13 	bl	8001fb0 <ADXL355_SPI_Read_DMA>
 800218a:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(YDATA2);
 800218c:	200c      	movs	r0, #12
 800218e:	f7ff ff0f 	bl	8001fb0 <ADXL355_SPI_Read_DMA>
 8002192:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(YDATA1);
 8002194:	200d      	movs	r0, #13
 8002196:	f7ff ff0b 	bl	8001fb0 <ADXL355_SPI_Read_DMA>
 800219a:	60f8      	str	r0, [r7, #12]
		break;
 800219c:	e00c      	b.n	80021b8 <ADXL355_SPI_READ_ACC+0x7c>

		case 0x02:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(ZDATA3);
 800219e:	200e      	movs	r0, #14
 80021a0:	f7ff ff06 	bl	8001fb0 <ADXL355_SPI_Read_DMA>
 80021a4:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(ZDATA2);
 80021a6:	200f      	movs	r0, #15
 80021a8:	f7ff ff02 	bl	8001fb0 <ADXL355_SPI_Read_DMA>
 80021ac:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(ZDATA1);
 80021ae:	2010      	movs	r0, #16
 80021b0:	f7ff fefe 	bl	8001fb0 <ADXL355_SPI_Read_DMA>
 80021b4:	60f8      	str	r0, [r7, #12]

			/*acc_val_raw3 = ADXL355_SPI_Read(ZDATA3);
			acc_val_raw2 = ADXL355_SPI_Read(ZDATA2);
			acc_val_raw1 = ADXL355_SPI_Read(ZDATA1);*/
		break;
 80021b6:	bf00      	nop
	}

	acc_val = ADXL355_Acceleration_Data_Conversion(
							((acc_val_raw3<<16) & 0x00FF0000) |
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
									((acc_val_raw2<<8) & 0x0000FF00) |
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b29b      	uxth	r3, r3
							((acc_val_raw3<<16) & 0x00FF0000) |
 80021c6:	431a      	orrs	r2, r3
											(acc_val_raw1 & 0x000000FF));
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	b2db      	uxtb	r3, r3
	acc_val = ADXL355_Acceleration_Data_Conversion(
 80021cc:	4313      	orrs	r3, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe ff64 	bl	800109c <ADXL355_Acceleration_Data_Conversion>
 80021d4:	60b8      	str	r0, [r7, #8]
	return acc_val;
 80021d6:	68bb      	ldr	r3, [r7, #8]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021f0:	d10b      	bne.n	800220a <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80021f2:	2028      	movs	r0, #40	@ 0x28
 80021f4:	f001 fa9d 	bl	8003732 <HAL_NVIC_DisableIRQ>
		data_ctr = 0;
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_GPIO_EXTI_Callback+0x34>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

		HAL_TIM_Base_Start_IT(&htim16);
 80021fe:	4806      	ldr	r0, [pc, #24]	@ (8002218 <HAL_GPIO_EXTI_Callback+0x38>)
 8002200:	f007 fa2c 	bl	800965c <HAL_TIM_Base_Start_IT>
		kappa("Iniciado\r\n");
 8002204:	4805      	ldr	r0, [pc, #20]	@ (800221c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002206:	f7ff f8e7 	bl	80013d8 <kappa>
	}
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000f80 	.word	0x20000f80
 8002218:	2000099c 	.word	0x2000099c
 800221c:	0801b3d8 	.word	0x0801b3d8

08002220 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	//kappa("Timer\r\n");
	if(data_ctr < data_buff_len)
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002230:	d205      	bcs.n	800223e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		osSemaphoreRelease(sem_samplingHandle);
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f00c ff52 	bl	800f0e0 <osSemaphoreRelease>
	}else
	{
		HAL_TIM_Base_Stop_IT(&htim16);
		osSemaphoreRelease(sem_processingHandle);
	}
}
 800223c:	e007      	b.n	800224e <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_Base_Stop_IT(&htim16);
 800223e:	4808      	ldr	r0, [pc, #32]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002240:	f007 fa68 	bl	8009714 <HAL_TIM_Base_Stop_IT>
		osSemaphoreRelease(sem_processingHandle);
 8002244:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f00c ff49 	bl	800f0e0 <osSemaphoreRelease>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000f80 	.word	0x20000f80
 800225c:	20000adc 	.word	0x20000adc
 8002260:	2000099c 	.word	0x2000099c
 8002264:	20000ad8 	.word	0x20000ad8

08002268 <postprocessing>:

void postprocessing()
{
 8002268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800226c:	b0a6      	sub	sp, #152	@ 0x98
 800226e:	af00      	add	r7, sp, #0
	float	Octavas_Final ; //envío de datos
	arm_rfft_fast_instance_f32 S;	//for FFT
	arm_rfft_fast_instance_f32 K;	// for InverseFFT
	arm_rfft_fast_instance_f32 M;	// for third-octave FFT

	for(int ii=0;ii<data_buff_len;ii++)
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002276:	e030      	b.n	80022da <postprocessing+0x72>
	{


		//input_buf[ii] = 1000*data_array[ii] / 26214.4;
		input_f32[ii]= 1000*((data_array[ii] / 26214.4)-9.722);
 8002278:	4a6f      	ldr	r2, [pc, #444]	@ (8002438 <postprocessing+0x1d0>)
 800227a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f956 	bl	8000534 <__aeabi_i2d>
 8002288:	a367      	add	r3, pc, #412	@ (adr r3, 8002428 <postprocessing+0x1c0>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f7fe fae5 	bl	800085c <__aeabi_ddiv>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	a365      	add	r3, pc, #404	@ (adr r3, 8002430 <postprocessing+0x1c8>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fd fffa 	bl	8000298 <__aeabi_dsub>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b62      	ldr	r3, [pc, #392]	@ (800243c <postprocessing+0x1d4>)
 80022b2:	f7fe f9a9 	bl	8000608 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f7fe fc9b 	bl	8000bf8 <__aeabi_d2f>
 80022c2:	4602      	mov	r2, r0
 80022c4:	495e      	ldr	r1, [pc, #376]	@ (8002440 <postprocessing+0x1d8>)
 80022c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	601a      	str	r2, [r3, #0]
	for(int ii=0;ii<data_buff_len;ii++)
 80022d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022d4:	3301      	adds	r3, #1
 80022d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022e2:	dbc9      	blt.n	8002278 <postprocessing+0x10>
			kappa("%d.%d\r\n", (int) acc_val_flt, (int) (fmodf(fabs(acc_val_flt), 1.0)*1));
		#endif
	}

	//// FFT ////
	arm_rfft_fast_init_f32(&S,2048); //Initialize the rFFT
 80022e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022ec:	4618      	mov	r0, r3
 80022ee:	f011 f889 	bl	8013404 <arm_rfft_fast_init_f32>

	arm_rfft_fast_f32(&S, input_f32, output_f32, 0); //rFFT
 80022f2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80022f6:	2300      	movs	r3, #0
 80022f8:	4a52      	ldr	r2, [pc, #328]	@ (8002444 <postprocessing+0x1dc>)
 80022fa:	4951      	ldr	r1, [pc, #324]	@ (8002440 <postprocessing+0x1d8>)
 80022fc:	f011 f966 	bl	80135cc <arm_rfft_fast_f32>

	////////////


	 ////// Sign from the input
		int sig=0;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		while (sig<2048)
 8002306:	e03c      	b.n	8002382 <postprocessing+0x11a>
	   {

			if(output_f32[sig]>=0)
 8002308:	4a4e      	ldr	r2, [pc, #312]	@ (8002444 <postprocessing+0x1dc>)
 800230a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	edd3 7a00 	vldr	s15, [r3]
 8002316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	db10      	blt.n	8002342 <postprocessing+0xda>
			{
				signo[sig]=1;
 8002320:	4a49      	ldr	r2, [pc, #292]	@ (8002448 <postprocessing+0x1e0>)
 8002322:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800232e:	601a      	str	r2, [r3, #0]
				signo[sig+1]=1;
 8002330:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002334:	3301      	adds	r3, #1
 8002336:	4a44      	ldr	r2, [pc, #272]	@ (8002448 <postprocessing+0x1e0>)
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002340:	601a      	str	r2, [r3, #0]
			}
			if(output_f32[sig]<0)
 8002342:	4a40      	ldr	r2, [pc, #256]	@ (8002444 <postprocessing+0x1dc>)
 8002344:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	d50e      	bpl.n	8002378 <postprocessing+0x110>
			{
				signo[sig]=-1;
 800235a:	4a3b      	ldr	r2, [pc, #236]	@ (8002448 <postprocessing+0x1e0>)
 800235c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	4a39      	ldr	r2, [pc, #228]	@ (800244c <postprocessing+0x1e4>)
 8002366:	601a      	str	r2, [r3, #0]
				signo[sig+1]=-1;
 8002368:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800236c:	3301      	adds	r3, #1
 800236e:	4a36      	ldr	r2, [pc, #216]	@ (8002448 <postprocessing+0x1e0>)
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	4a35      	ldr	r2, [pc, #212]	@ (800244c <postprocessing+0x1e4>)
 8002376:	601a      	str	r2, [r3, #0]
			}

		 sig=sig+2;  	//incremento
 8002378:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800237c:	3302      	adds	r3, #2
 800237e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		while (sig<2048)
 8002382:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800238a:	dbbd      	blt.n	8002308 <postprocessing+0xa0>
	  //////////////////
	   }

	 ////// Angle (between real and imaginary data)
		int cc=0;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		int aa=0;
 8002392:	2300      	movs	r3, #0
 8002394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		while (cc<2048 && aa < 1024)
 8002398:	e031      	b.n	80023fe <postprocessing+0x196>
	   {
		rfft_angle[aa]=atan(output_f32[cc+1]/output_f32[cc]);
 800239a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800239e:	3301      	adds	r3, #1
 80023a0:	4a28      	ldr	r2, [pc, #160]	@ (8002444 <postprocessing+0x1dc>)
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	ed93 7a00 	vldr	s14, [r3]
 80023aa:	4a26      	ldr	r2, [pc, #152]	@ (8002444 <postprocessing+0x1dc>)
 80023ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023bc:	ee16 0a90 	vmov	r0, s13
 80023c0:	f7fe f8ca 	bl	8000558 <__aeabi_f2d>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	ec43 2b10 	vmov	d0, r2, r3
 80023cc:	f016 fdb4 	bl	8018f38 <atan>
 80023d0:	ec53 2b10 	vmov	r2, r3, d0
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fc0e 	bl	8000bf8 <__aeabi_d2f>
 80023dc:	4602      	mov	r2, r0
 80023de:	491c      	ldr	r1, [pc, #112]	@ (8002450 <postprocessing+0x1e8>)
 80023e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	601a      	str	r2, [r3, #0]
		cc=cc+2;  	//incremento
 80023ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ee:	3302      	adds	r3, #2
 80023f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		aa++;
 80023f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023f8:	3301      	adds	r3, #1
 80023fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		while (cc<2048 && aa < 1024)
 80023fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002406:	da04      	bge.n	8002412 <postprocessing+0x1aa>
 8002408:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002410:	dbc3      	blt.n	800239a <postprocessing+0x132>
	  //////////////////
	   }

		//Modulo FFT (ocupo aqui el mismo array despeus de haber extraido el angulo y eel signo)
		arm_cmplx_mag_f32(output_f32, output_f32, 1024);//1024 /magnitud porq tiene parte imaginaria
 8002412:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002416:	490b      	ldr	r1, [pc, #44]	@ (8002444 <postprocessing+0x1dc>)
 8002418:	480a      	ldr	r0, [pc, #40]	@ (8002444 <postprocessing+0x1dc>)
 800241a:	f011 fcb5 	bl	8013d88 <arm_cmplx_mag_f32>


		int q=0;  		 	//inicialización del contador
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		while (q<1024) 	//condicion  (para array de volyaje j=4096)///////////
 8002424:	e148      	b.n	80026b8 <postprocessing+0x450>
 8002426:	bf00      	nop
 8002428:	9999999a 	.word	0x9999999a
 800242c:	40d99999 	.word	0x40d99999
 8002430:	fbe76c8b 	.word	0xfbe76c8b
 8002434:	402371a9 	.word	0x402371a9
 8002438:	20000f84 	.word	0x20000f84
 800243c:	408f4000 	.word	0x408f4000
 8002440:	20001784 	.word	0x20001784
 8002444:	20003784 	.word	0x20003784
 8002448:	20007784 	.word	0x20007784
 800244c:	bf800000 	.word	0xbf800000
 8002450:	20005784 	.word	0x20005784

		//Ponderacion: H= PasoAlto * PasoBajo * PondFrecPura
		//Ponderacion: H= Hh * Hl * Ht

		//FRECUENCIA para ponderacion
		f[q]=q*0.125; //0.125 // 1024/125 = 8 //calculo de la frecuencia de cada muestra
 8002454:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002458:	f7fe f86c 	bl	8000534 <__aeabi_i2d>
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002464:	f7fe f8d0 	bl	8000608 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f7fe fbc2 	bl	8000bf8 <__aeabi_d2f>
 8002474:	4602      	mov	r2, r0
 8002476:	49d0      	ldr	r1, [pc, #832]	@ (80027b8 <postprocessing+0x550>)
 8002478:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	601a      	str	r2, [r3, #0]

		///PASO ALTO///
			//f1=10^-0.1Hz
		f1= 0.79432823472428150206591828283639; //pow(10,-0.1)
 8002482:	4bce      	ldr	r3, [pc, #824]	@ (80027bc <postprocessing+0x554>)
 8002484:	4ace      	ldr	r2, [pc, #824]	@ (80027c0 <postprocessing+0x558>)
 8002486:	601a      	str	r2, [r3, #0]
		//Hh= sqrt((pow(f,4)/(pow(f,4)+pow(f1,4)));
		//Hh[q]= sqrt(pow(f[q],4)/(pow(f[q],4)+pow(f1,4)));

		///PASO BAJO///
		f2=100;
 8002488:	4bce      	ldr	r3, [pc, #824]	@ (80027c4 <postprocessing+0x55c>)
 800248a:	4acf      	ldr	r2, [pc, #828]	@ (80027c8 <postprocessing+0x560>)
 800248c:	601a      	str	r2, [r3, #0]
		//Hl= sqrt((pow(f2,4)/(pow(f,4)+pow(f2,4)));
		//Hl[q]= sqrt(pow(f2,4)/(pow(f[q],4)+pow(f2,4)));

		///PONDERACION PURA///
		f3=5.6841051104248334203172772633041; //   formula: 1/(0.028*(2*M_PI));
 800248e:	4bcf      	ldr	r3, [pc, #828]	@ (80027cc <postprocessing+0x564>)
 8002490:	4acf      	ldr	r2, [pc, #828]	@ (80027d0 <postprocessing+0x568>)
 8002492:	601a      	str	r2, [r3, #0]
		//Ht[q]= sqrt(pow(f3,2)/(pow(f[q],2)+pow(f3,2)));

		///FUNCION DE TRASNFERENCIA///
			///Transformar a dB, (20log(x))///
		//H[q]= (Hh[q])*(Hl[q])*(Ht[q]);     /// realizo en un solo paso el calculo
		H[q]= (sqrt(pow(f[q],4)/(pow(f[q],4)+pow(f1,4))))*(sqrt(pow(f2,4)/(pow(f[q],4)+pow(f2,4))))
 8002494:	4ac8      	ldr	r2, [pc, #800]	@ (80027b8 <postprocessing+0x550>)
 8002496:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f859 	bl	8000558 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	ed9f 1bbf 	vldr	d1, [pc, #764]	@ 80027a8 <postprocessing+0x540>
 80024ae:	ec43 2b10 	vmov	d0, r2, r3
 80024b2:	f016 fca3 	bl	8018dfc <pow>
 80024b6:	ec55 4b10 	vmov	r4, r5, d0
 80024ba:	4abf      	ldr	r2, [pc, #764]	@ (80027b8 <postprocessing+0x550>)
 80024bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f846 	bl	8000558 <__aeabi_f2d>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	ed9f 1bb5 	vldr	d1, [pc, #724]	@ 80027a8 <postprocessing+0x540>
 80024d4:	ec43 2b10 	vmov	d0, r2, r3
 80024d8:	f016 fc90 	bl	8018dfc <pow>
 80024dc:	ec59 8b10 	vmov	r8, r9, d0
 80024e0:	4bb6      	ldr	r3, [pc, #728]	@ (80027bc <postprocessing+0x554>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f837 	bl	8000558 <__aeabi_f2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	ed9f 1bae 	vldr	d1, [pc, #696]	@ 80027a8 <postprocessing+0x540>
 80024f2:	ec43 2b10 	vmov	d0, r2, r3
 80024f6:	f016 fc81 	bl	8018dfc <pow>
 80024fa:	ec53 2b10 	vmov	r2, r3, d0
 80024fe:	4640      	mov	r0, r8
 8002500:	4649      	mov	r1, r9
 8002502:	f7fd fecb 	bl	800029c <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4620      	mov	r0, r4
 800250c:	4629      	mov	r1, r5
 800250e:	f7fe f9a5 	bl	800085c <__aeabi_ddiv>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	ec43 2b17 	vmov	d7, r2, r3
 800251a:	eeb0 0a47 	vmov.f32	s0, s14
 800251e:	eef0 0a67 	vmov.f32	s1, s15
 8002522:	f016 fcdb 	bl	8018edc <sqrt>
 8002526:	ec55 4b10 	vmov	r4, r5, d0
 800252a:	4ba6      	ldr	r3, [pc, #664]	@ (80027c4 <postprocessing+0x55c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f812 	bl	8000558 <__aeabi_f2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	ed9f 1b9b 	vldr	d1, [pc, #620]	@ 80027a8 <postprocessing+0x540>
 800253c:	ec43 2b10 	vmov	d0, r2, r3
 8002540:	f016 fc5c 	bl	8018dfc <pow>
 8002544:	ec59 8b10 	vmov	r8, r9, d0
 8002548:	4a9b      	ldr	r2, [pc, #620]	@ (80027b8 <postprocessing+0x550>)
 800254a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd ffff 	bl	8000558 <__aeabi_f2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	ed9f 1b92 	vldr	d1, [pc, #584]	@ 80027a8 <postprocessing+0x540>
 8002562:	ec43 2b10 	vmov	d0, r2, r3
 8002566:	f016 fc49 	bl	8018dfc <pow>
 800256a:	ec5b ab10 	vmov	sl, fp, d0
 800256e:	4b95      	ldr	r3, [pc, #596]	@ (80027c4 <postprocessing+0x55c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fff0 	bl	8000558 <__aeabi_f2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 80027a8 <postprocessing+0x540>
 8002580:	ec43 2b10 	vmov	d0, r2, r3
 8002584:	f016 fc3a 	bl	8018dfc <pow>
 8002588:	ec53 2b10 	vmov	r2, r3, d0
 800258c:	4650      	mov	r0, sl
 800258e:	4659      	mov	r1, fp
 8002590:	f7fd fe84 	bl	800029c <__adddf3>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4640      	mov	r0, r8
 800259a:	4649      	mov	r1, r9
 800259c:	f7fe f95e 	bl	800085c <__aeabi_ddiv>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	ec43 2b17 	vmov	d7, r2, r3
 80025a8:	eeb0 0a47 	vmov.f32	s0, s14
 80025ac:	eef0 0a67 	vmov.f32	s1, s15
 80025b0:	f016 fc94 	bl	8018edc <sqrt>
 80025b4:	ec53 2b10 	vmov	r2, r3, d0
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fe f824 	bl	8000608 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4614      	mov	r4, r2
 80025c6:	461d      	mov	r5, r3
			   *(sqrt(pow(f3,2)/(pow(f[q],2)+pow(f3,2))));
 80025c8:	4b80      	ldr	r3, [pc, #512]	@ (80027cc <postprocessing+0x564>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ffc3 	bl	8000558 <__aeabi_f2d>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 80027b0 <postprocessing+0x548>
 80025da:	ec43 2b10 	vmov	d0, r2, r3
 80025de:	f016 fc0d 	bl	8018dfc <pow>
 80025e2:	ec59 8b10 	vmov	r8, r9, d0
 80025e6:	4a74      	ldr	r2, [pc, #464]	@ (80027b8 <postprocessing+0x550>)
 80025e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ffb0 	bl	8000558 <__aeabi_f2d>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	ed9f 1b6c 	vldr	d1, [pc, #432]	@ 80027b0 <postprocessing+0x548>
 8002600:	ec43 2b10 	vmov	d0, r2, r3
 8002604:	f016 fbfa 	bl	8018dfc <pow>
 8002608:	ec5b ab10 	vmov	sl, fp, d0
 800260c:	4b6f      	ldr	r3, [pc, #444]	@ (80027cc <postprocessing+0x564>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd ffa1 	bl	8000558 <__aeabi_f2d>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	ed9f 1b65 	vldr	d1, [pc, #404]	@ 80027b0 <postprocessing+0x548>
 800261e:	ec43 2b10 	vmov	d0, r2, r3
 8002622:	f016 fbeb 	bl	8018dfc <pow>
 8002626:	ec53 2b10 	vmov	r2, r3, d0
 800262a:	4650      	mov	r0, sl
 800262c:	4659      	mov	r1, fp
 800262e:	f7fd fe35 	bl	800029c <__adddf3>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4640      	mov	r0, r8
 8002638:	4649      	mov	r1, r9
 800263a:	f7fe f90f 	bl	800085c <__aeabi_ddiv>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	ec43 2b17 	vmov	d7, r2, r3
 8002646:	eeb0 0a47 	vmov.f32	s0, s14
 800264a:	eef0 0a67 	vmov.f32	s1, s15
 800264e:	f016 fc45 	bl	8018edc <sqrt>
 8002652:	ec53 2b10 	vmov	r2, r3, d0
 8002656:	4620      	mov	r0, r4
 8002658:	4629      	mov	r1, r5
 800265a:	f7fd ffd5 	bl	8000608 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	f7fe fac7 	bl	8000bf8 <__aeabi_d2f>
 800266a:	4602      	mov	r2, r0
		H[q]= (sqrt(pow(f[q],4)/(pow(f[q],4)+pow(f1,4))))*(sqrt(pow(f2,4)/(pow(f[q],4)+pow(f2,4))))
 800266c:	4959      	ldr	r1, [pc, #356]	@ (80027d4 <postprocessing+0x56c>)
 800266e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	601a      	str	r2, [r3, #0]
		//Introducir ala salida compleja de FFT en ingreso de InverseFFT
		//y se multiplica por la ponderacio en frecuencia

		//inputIFFT_f32[q]=output_f32[q] * H[q];
		//inputIFFT_f32_mod[q]=output_rfft[q];
		output_f32[q]=(output_f32[q]*H[q])/1024;	//
 8002678:	4a57      	ldr	r2, [pc, #348]	@ (80027d8 <postprocessing+0x570>)
 800267a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	4a53      	ldr	r2, [pc, #332]	@ (80027d4 <postprocessing+0x56c>)
 8002688:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002698:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80027dc <postprocessing+0x574>
 800269c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026a0:	4a4d      	ldr	r2, [pc, #308]	@ (80027d8 <postprocessing+0x570>)
 80026a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	edc3 7a00 	vstr	s15, [r3]
		//output_f32[q]=(output_f32[q]*H[q])/1024;	//

			q++;  			//incremento
 80026ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026b2:	3301      	adds	r3, #1
 80026b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		while (q<1024) 	//condicion  (para array de volyaje j=4096)///////////
 80026b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c0:	f6ff aec8 	blt.w	8002454 <postprocessing+0x1ec>
	//////////////////
	//	   }

	////// Calculation of real e imaginary part  (base on module & angle)

			int www=0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			int aaa=0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
			while (www<2048 && aaa < 1024)
 80026ce:	e05e      	b.n	800278e <postprocessing+0x526>
				 {
				#ifdef debug
					output_INT=output_f32[aaa];
					kappa("%d.%d\r\n", (int) output_INT, (int) (fmodf(fabs(output_INT), 1.0)*1000));
				#endif
				inputIFFT_f32[www]=(cos(rfft_angle[aaa]))*(output_f32[aaa]);
 80026d0:	4a43      	ldr	r2, [pc, #268]	@ (80027e0 <postprocessing+0x578>)
 80026d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff3c 	bl	8000558 <__aeabi_f2d>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	ec43 2b10 	vmov	d0, r2, r3
 80026e8:	f016 fdbe 	bl	8019268 <cos>
 80026ec:	ec55 4b10 	vmov	r4, r5, d0
 80026f0:	4a39      	ldr	r2, [pc, #228]	@ (80027d8 <postprocessing+0x570>)
 80026f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd ff2c 	bl	8000558 <__aeabi_f2d>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4620      	mov	r0, r4
 8002706:	4629      	mov	r1, r5
 8002708:	f7fd ff7e 	bl	8000608 <__aeabi_dmul>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f7fe fa70 	bl	8000bf8 <__aeabi_d2f>
 8002718:	4602      	mov	r2, r0
 800271a:	4932      	ldr	r1, [pc, #200]	@ (80027e4 <postprocessing+0x57c>)
 800271c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	601a      	str	r2, [r3, #0]
				//inputIFFT_f32[www]=(cos(rfft_angle[aaa]))*(inputIFFT_f32_mod[aaa]);
				inputIFFT_f32[www+1]=(sin(rfft_angle[aaa]))*(output_f32[aaa]);
 8002726:	4a2e      	ldr	r2, [pc, #184]	@ (80027e0 <postprocessing+0x578>)
 8002728:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ff11 	bl	8000558 <__aeabi_f2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	ec43 2b10 	vmov	d0, r2, r3
 800273e:	f016 fdef 	bl	8019320 <sin>
 8002742:	ec55 4b10 	vmov	r4, r5, d0
 8002746:	4a24      	ldr	r2, [pc, #144]	@ (80027d8 <postprocessing+0x570>)
 8002748:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd ff01 	bl	8000558 <__aeabi_f2d>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4620      	mov	r0, r4
 800275c:	4629      	mov	r1, r5
 800275e:	f7fd ff53 	bl	8000608 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800276e:	1c5c      	adds	r4, r3, #1
 8002770:	f7fe fa42 	bl	8000bf8 <__aeabi_d2f>
 8002774:	4602      	mov	r2, r0
 8002776:	491b      	ldr	r1, [pc, #108]	@ (80027e4 <postprocessing+0x57c>)
 8002778:	00a3      	lsls	r3, r4, #2
 800277a:	440b      	add	r3, r1
 800277c:	601a      	str	r2, [r3, #0]
				//inputIFFT_f32[www+1]=(sin(rfft_angle[aaa]))*(inputIFFT_f32_mod[aaa]);

				www=www+2;  	//increment
 800277e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002782:	3302      	adds	r3, #2
 8002784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				aaa++;
 8002788:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800278a:	3301      	adds	r3, #1
 800278c:	67fb      	str	r3, [r7, #124]	@ 0x7c
			while (www<2048 && aaa < 1024)
 800278e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002792:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002796:	da03      	bge.n	80027a0 <postprocessing+0x538>
 8002798:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279e:	db97      	blt.n	80026d0 <postprocessing+0x468>
	//////////////////
		   }

	//// AÑADIR SIGNO
			int sig2=0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	67bb      	str	r3, [r7, #120]	@ 0x78
			while (sig2<2048)
 80027a4:	e037      	b.n	8002816 <postprocessing+0x5ae>
 80027a6:	bf00      	nop
 80027a8:	00000000 	.word	0x00000000
 80027ac:	40100000 	.word	0x40100000
 80027b0:	00000000 	.word	0x00000000
 80027b4:	40000000 	.word	0x40000000
 80027b8:	20013788 	.word	0x20013788
 80027bc:	20015788 	.word	0x20015788
 80027c0:	3f4b5918 	.word	0x3f4b5918
 80027c4:	2001578c 	.word	0x2001578c
 80027c8:	42c80000 	.word	0x42c80000
 80027cc:	20015790 	.word	0x20015790
 80027d0:	40b5e430 	.word	0x40b5e430
 80027d4:	20011788 	.word	0x20011788
 80027d8:	20003784 	.word	0x20003784
 80027dc:	44800000 	.word	0x44800000
 80027e0:	20005784 	.word	0x20005784
 80027e4:	20009784 	.word	0x20009784
		   {
			input_f32[sig2]= inputIFFT_f32[sig2]*signo[sig2];//se ocupa array anterior
 80027e8:	4a98      	ldr	r2, [pc, #608]	@ (8002a4c <postprocessing+0x7e4>)
 80027ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	4a96      	ldr	r2, [pc, #600]	@ (8002a50 <postprocessing+0x7e8>)
 80027f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002804:	4a93      	ldr	r2, [pc, #588]	@ (8002a54 <postprocessing+0x7ec>)
 8002806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	edc3 7a00 	vstr	s15, [r3]
			//output_signo[sig2]= inputIFFT_f32[sig2]*signo[sig2];

				sig2++;  	//incremento
 8002810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002812:	3301      	adds	r3, #1
 8002814:	67bb      	str	r3, [r7, #120]	@ 0x78
			while (sig2<2048)
 8002816:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800281c:	dbe4      	blt.n	80027e8 <postprocessing+0x580>
		  //////////////////
		   }

	/////INVERSE FFT ///
	arm_rfft_fast_init_f32(&K,2048); ///Initialize the riFFT
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002826:	4618      	mov	r0, r3
 8002828:	f010 fdec 	bl	8013404 <arm_rfft_fast_init_f32>
	arm_rfft_fast_f32(&K, input_f32, outputIFFT_f32, 1); //ingreso del output complejo de FFT en la funcion IFFT
 800282c:	f107 001c 	add.w	r0, r7, #28
 8002830:	2301      	movs	r3, #1
 8002832:	4a89      	ldr	r2, [pc, #548]	@ (8002a58 <postprocessing+0x7f0>)
 8002834:	4987      	ldr	r1, [pc, #540]	@ (8002a54 <postprocessing+0x7ec>)
 8002836:	f010 fec9 	bl	80135cc <arm_rfft_fast_f32>
//			   }

	//////////////// RMS ////////////////

	   // Calculate RMS values
		for (int i = 0; i < 2048; i++)
 800283a:	2300      	movs	r3, #0
 800283c:	677b      	str	r3, [r7, #116]	@ 0x74
 800283e:	e08a      	b.n	8002956 <postprocessing+0x6ee>
		{						 // 256 es el numero de muestras en 1 segundo
								 // velocidad del RMS movil 0,125sec
			if (i <= (2048-32)) // 32 muestras (0,125sec)total menos intervalo de RMS
 8002840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002842:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 8002846:	dc3d      	bgt.n	80028c4 <postprocessing+0x65c>
			{
				float suma_cuadrada = 0.0;
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	673b      	str	r3, [r7, #112]	@ 0x70
				for (int j = i; j < i+32; j++) // 32 samples = 0,125sec
 800284e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002850:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002852:	e016      	b.n	8002882 <postprocessing+0x61a>
				{
					suma_cuadrada += outputIFFT_f32[j] * outputIFFT_f32[j];
 8002854:	4a80      	ldr	r2, [pc, #512]	@ (8002a58 <postprocessing+0x7f0>)
 8002856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	4a7d      	ldr	r2, [pc, #500]	@ (8002a58 <postprocessing+0x7f0>)
 8002862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002878:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
				for (int j = i; j < i+32; j++) // 32 samples = 0,125sec
 800287c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800287e:	3301      	adds	r3, #1
 8002880:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002884:	331f      	adds	r3, #31
 8002886:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002888:	429a      	cmp	r2, r3
 800288a:	dde3      	ble.n	8002854 <postprocessing+0x5ec>
					}
					RunRMS[i] = sqrt(suma_cuadrada / 32); // 32 samples = 0,125sec
 800288c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002890:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8002a5c <postprocessing+0x7f4>
 8002894:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002898:	ee16 0a90 	vmov	r0, s13
 800289c:	f7fd fe5c 	bl	8000558 <__aeabi_f2d>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	ec43 2b10 	vmov	d0, r2, r3
 80028a8:	f016 fb18 	bl	8018edc <sqrt>
 80028ac:	ec53 2b10 	vmov	r2, r3, d0
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f7fe f9a0 	bl	8000bf8 <__aeabi_d2f>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4969      	ldr	r1, [pc, #420]	@ (8002a60 <postprocessing+0x7f8>)
 80028bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	601a      	str	r2, [r3, #0]
					//RunRunRMS[i] = sqrt(suma_cuadrada / 32);
						}
						if (i > (2048-32)) 	// 32 samples = 0,125sec
 80028c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028c6:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 80028ca:	dd41      	ble.n	8002950 <postprocessing+0x6e8>
						{
							float suma_cuadrada = 0.0;
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	66bb      	str	r3, [r7, #104]	@ 0x68
							for (int j = i; j < 2048; j++)
 80028d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80028d6:	e016      	b.n	8002906 <postprocessing+0x69e>
					 {
					suma_cuadrada += outputIFFT_f32[j] * outputIFFT_f32[j];
 80028d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002a58 <postprocessing+0x7f0>)
 80028da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	ed93 7a00 	vldr	s14, [r3]
 80028e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002a58 <postprocessing+0x7f0>)
 80028e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f4:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80028f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fc:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
							for (int j = i; j < 2048; j++)
 8002900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002902:	3301      	adds	r3, #1
 8002904:	667b      	str	r3, [r7, #100]	@ 0x64
 8002906:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800290c:	dbe4      	blt.n	80028d8 <postprocessing+0x670>
				}
				 RunRMS[i] = sqrt(suma_cuadrada / (2048 - i));
 800290e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002910:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002920:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002924:	ee16 0a90 	vmov	r0, s13
 8002928:	f7fd fe16 	bl	8000558 <__aeabi_f2d>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	ec43 2b10 	vmov	d0, r2, r3
 8002934:	f016 fad2 	bl	8018edc <sqrt>
 8002938:	ec53 2b10 	vmov	r2, r3, d0
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f95a 	bl	8000bf8 <__aeabi_d2f>
 8002944:	4602      	mov	r2, r0
 8002946:	4946      	ldr	r1, [pc, #280]	@ (8002a60 <postprocessing+0x7f8>)
 8002948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 2048; i++)
 8002950:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002952:	3301      	adds	r3, #1
 8002954:	677b      	str	r3, [r7, #116]	@ 0x74
 8002956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800295c:	f6ff af70 	blt.w	8002840 <postprocessing+0x5d8>
			 }
		}

		//// FFT para Tercios de octava////

		arm_rfft_fast_init_f32(&M,2048); //Initialize the rFFT
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002966:	4618      	mov	r0, r3
 8002968:	f010 fd4c 	bl	8013404 <arm_rfft_fast_init_f32>

		arm_rfft_fast_f32(&M, RunRMS, output_Run, 0); //rFFT
 800296c:	1d38      	adds	r0, r7, #4
 800296e:	2300      	movs	r3, #0
 8002970:	4a3c      	ldr	r2, [pc, #240]	@ (8002a64 <postprocessing+0x7fc>)
 8002972:	493b      	ldr	r1, [pc, #236]	@ (8002a60 <postprocessing+0x7f8>)
 8002974:	f010 fe2a 	bl	80135cc <arm_rfft_fast_f32>
		arm_cmplx_mag_f32(output_Run, output_Run_mag, 1024);//1024 /magnitud
 8002978:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800297c:	493a      	ldr	r1, [pc, #232]	@ (8002a68 <postprocessing+0x800>)
 800297e:	4839      	ldr	r0, [pc, #228]	@ (8002a64 <postprocessing+0x7fc>)
 8002980:	f011 fa02 	bl	8013d88 <arm_cmplx_mag_f32>

		//////////////// OCTAVE ////////////////
		for (int i = 0; i < 24; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	663b      	str	r3, [r7, #96]	@ 0x60
 8002988:	e047      	b.n	8002a1a <postprocessing+0x7b2>
		{
			// índice inicial y la cantidad de elementos para sumar
			int indice_inicial = NPosition[i];
 800298a:	4a38      	ldr	r2, [pc, #224]	@ (8002a6c <postprocessing+0x804>)
 800298c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800299a:	ee17 3a90 	vmov	r3, s15
 800299e:	653b      	str	r3, [r7, #80]	@ 0x50
			int elementos_a_sumar = Nband[i];
 80029a0:	4a33      	ldr	r2, [pc, #204]	@ (8002a70 <postprocessing+0x808>)
 80029a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b0:	ee17 3a90 	vmov	r3, s15
 80029b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

			// suma de los elementos
			float suma_amp = 0;
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
			for (int j = 0; j < elementos_a_sumar; j++)
 80029bc:	2300      	movs	r3, #0
 80029be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029c0:	e010      	b.n	80029e4 <postprocessing+0x77c>
			{
				suma_amp += output_Run_mag[indice_inicial + j];
 80029c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80029c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029c6:	4413      	add	r3, r2
 80029c8:	4a27      	ldr	r2, [pc, #156]	@ (8002a68 <postprocessing+0x800>)
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80029d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029da:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
			for (int j = 0; j < elementos_a_sumar; j++)
 80029de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029e0:	3301      	adds	r3, #1
 80029e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029e8:	429a      	cmp	r2, r3
 80029ea:	dbea      	blt.n	80029c2 <postprocessing+0x75a>
			}

		// Almacenar la suma (Altura x Base)(Amplitude x Bandwidth)(amplitud del bin de frecuwncia)
		Octave[i] = suma_amp*Nband[i]*0.125; //sumAmplitud*NumeroBandas*AnchoFreq
 80029ec:	4a20      	ldr	r2, [pc, #128]	@ (8002a70 <postprocessing+0x808>)
 80029ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	ed93 7a00 	vldr	s14, [r3]
 80029f8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80029fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a00:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a08:	4a1a      	ldr	r2, [pc, #104]	@ (8002a74 <postprocessing+0x80c>)
 8002a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 24; i++)
 8002a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a16:	3301      	adds	r3, #1
 8002a18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a1c:	2b17      	cmp	r3, #23
 8002a1e:	ddb4      	ble.n	800298a <postprocessing+0x722>
		}


		//Extraccion y envio de MTVV
		for(int iiii=0;iiii<1;iiii++) // solo 1 dato
 8002a20:	2300      	movs	r3, #0
 8002a22:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a24:	e009      	b.n	8002a3a <postprocessing+0x7d2>
		{
			//Max value of spectrum after Running RMS
			arm_max_f32(output_Run_mag, 2048, max_mtvv, output_Run_mag);
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <postprocessing+0x800>)
 8002a28:	4a13      	ldr	r2, [pc, #76]	@ (8002a78 <postprocessing+0x810>)
 8002a2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a2e:	480e      	ldr	r0, [pc, #56]	@ (8002a68 <postprocessing+0x800>)
 8002a30:	f010 fbb4 	bl	801319c <arm_max_f32>
		for(int iiii=0;iiii<1;iiii++) // solo 1 dato
 8002a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a36:	3301      	adds	r3, #1
 8002a38:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	ddf2      	ble.n	8002a26 <postprocessing+0x7be>
				Octavas_Final=Octave[iiii];
				kappa("%d.%d\r\n", (int) Octavas_Final, (int) (fmodf(fabs(Octavas_Final), 1.0)*1000));
				//kappa("%d.%d\r\n", (int) output_INT, (int) (fmodf(fabs(output_INT), 1.0)*1000));
			}
		#endif
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3798      	adds	r7, #152	@ 0x98
 8002a46:	46bd      	mov	sp, r7
 8002a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4c:	20009784 	.word	0x20009784
 8002a50:	20007784 	.word	0x20007784
 8002a54:	20001784 	.word	0x20001784
 8002a58:	2000b784 	.word	0x2000b784
 8002a5c:	42000000 	.word	0x42000000
 8002a60:	20015794 	.word	0x20015794
 8002a64:	2000d784 	.word	0x2000d784
 8002a68:	2000f784 	.word	0x2000f784
 8002a6c:	0801b60c 	.word	0x0801b60c
 8002a70:	0801b5a8 	.word	0x0801b5a8
 8002a74:	20017794 	.word	0x20017794
 8002a78:	20011784 	.word	0x20011784

08002a7c <task_main>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_main */
void task_main(void *argument)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	kappa("\r\n****STARTING...!****");
 8002a84:	4827      	ldr	r0, [pc, #156]	@ (8002b24 <task_main+0xa8>)
 8002a86:	f7fe fca7 	bl	80013d8 <kappa>

	/* Infinite loop */
	//HAL_LPTIM_Counter_Start_IT(&hlptim1, 797);	//DEBUG - 0.01 ms
	//TODO:Find out why this helps to start with low current consumption
	if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8002a8a:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <task_main+0xac>)
 8002a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d115      	bne.n	8002ac2 <task_main+0x46>
	{
		kappa("\r\nUSB (%d, %d)",  hUsbDeviceFS.ep0_state, hUsbDeviceFS.dev_state);
 8002a96:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <task_main+0xac>)
 8002a98:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8002a9c:	4a22      	ldr	r2, [pc, #136]	@ (8002b28 <task_main+0xac>)
 8002a9e:	f892 229c 	ldrb.w	r2, [r2, #668]	@ 0x29c
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4821      	ldr	r0, [pc, #132]	@ (8002b2c <task_main+0xb0>)
 8002aa8:	f7fe fc96 	bl	80013d8 <kappa>
		usb_taskHandle = osThreadNew(task_usb, NULL, &usb_task_attributes);
 8002aac:	4a20      	ldr	r2, [pc, #128]	@ (8002b30 <task_main+0xb4>)
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4820      	ldr	r0, [pc, #128]	@ (8002b34 <task_main+0xb8>)
 8002ab2:	f00c f921 	bl	800ecf8 <osThreadNew>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b38 <task_main+0xbc>)
 8002aba:	6013      	str	r3, [r2, #0]
		USB_plugged = 1;
 8002abc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <task_main+0xc0>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]

	} else {

	}

	vTaskDelay(1000);
 8002ac2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ac6:	f00d fee1 	bl	801088c <vTaskDelay>
	kappa("Program started!\r\n");
 8002aca:	481d      	ldr	r0, [pc, #116]	@ (8002b40 <task_main+0xc4>)
 8002acc:	f7fe fc84 	bl	80013d8 <kappa>
	ADXL355_Init();
 8002ad0:	f7fe fa90 	bl	8000ff4 <ADXL355_Init>
	vTaskDelay(100);
 8002ad4:	2064      	movs	r0, #100	@ 0x64
 8002ad6:	f00d fed9 	bl	801088c <vTaskDelay>
	ADXL355_Start_Sensor();
 8002ada:	f7fe fac3 	bl	8001064 <ADXL355_Start_Sensor>
	kappa("\r\nSYSTEM READY!\r\n");
 8002ade:	4819      	ldr	r0, [pc, #100]	@ (8002b44 <task_main+0xc8>)
 8002ae0:	f7fe fc7a 	bl	80013d8 <kappa>

	for (;;)
	{
		osSemaphoreAcquire(sem_processingHandle, osWaitForever);
 8002ae4:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <task_main+0xcc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002aec:	4618      	mov	r0, r3
 8002aee:	f00c faa5 	bl	800f03c <osSemaphoreAcquire>
		kappa("\r\nProcessing data!");
 8002af2:	4816      	ldr	r0, [pc, #88]	@ (8002b4c <task_main+0xd0>)
 8002af4:	f7fe fc70 	bl	80013d8 <kappa>

		postprocessing();
 8002af8:	f7ff fbb6 	bl	8002268 <postprocessing>

		kappa("\r\nDone!\r\n");
 8002afc:	4814      	ldr	r0, [pc, #80]	@ (8002b50 <task_main+0xd4>)
 8002afe:	f7fe fc6b 	bl	80013d8 <kappa>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8002b02:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <task_main+0xd8>)
 8002b04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b08:	615a      	str	r2, [r3, #20]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b0a:	2028      	movs	r0, #40	@ 0x28
 8002b0c:	f000 fe03 	bl	8003716 <HAL_NVIC_EnableIRQ>

		HAL_SuspendTick();
 8002b10:	f000 fcd6 	bl	80034c0 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002b14:	2101      	movs	r1, #1
 8002b16:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002b1a:	f003 fa25 	bl	8005f68 <HAL_PWR_EnterSLEEPMode>
		osSemaphoreAcquire(sem_processingHandle, osWaitForever);
 8002b1e:	bf00      	nop
 8002b20:	e7e0      	b.n	8002ae4 <task_main+0x68>
 8002b22:	bf00      	nop
 8002b24:	0801b3e4 	.word	0x0801b3e4
 8002b28:	20021888 	.word	0x20021888
 8002b2c:	0801b3fc 	.word	0x0801b3fc
 8002b30:	0801b584 	.word	0x0801b584
 8002b34:	08001b65 	.word	0x08001b65
 8002b38:	20000ae0 	.word	0x20000ae0
 8002b3c:	20000b84 	.word	0x20000b84
 8002b40:	0801b40c 	.word	0x0801b40c
 8002b44:	0801b420 	.word	0x0801b420
 8002b48:	20000ad8 	.word	0x20000ad8
 8002b4c:	0801b434 	.word	0x0801b434
 8002b50:	0801b448 	.word	0x0801b448
 8002b54:	40010400 	.word	0x40010400

08002b58 <sampling_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sampling_task */
void sampling_task(void *argument)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sampling_task */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(sem_samplingHandle, osWaitForever);
 8002b60:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <sampling_task+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00c fa67 	bl	800f03c <osSemaphoreAcquire>
	  HAL_GPIO_TogglePin(STATUS_P_GPIO_Port, STATUS_P_Pin);
 8002b6e:	2140      	movs	r1, #64	@ 0x40
 8002b70:	480a      	ldr	r0, [pc, #40]	@ (8002b9c <sampling_task+0x44>)
 8002b72:	f001 fc39 	bl	80043e8 <HAL_GPIO_TogglePin>
	  data_array[data_ctr] = ADXL355_SPI_READ_ACC(2);
 8002b76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <sampling_task+0x48>)
 8002b78:	681c      	ldr	r4, [r3, #0]
 8002b7a:	2002      	movs	r0, #2
 8002b7c:	f7ff fade 	bl	800213c <ADXL355_SPI_READ_ACC>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4a08      	ldr	r2, [pc, #32]	@ (8002ba4 <sampling_task+0x4c>)
 8002b84:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  data_ctr++;
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <sampling_task+0x48>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <sampling_task+0x48>)
 8002b90:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(sem_samplingHandle, osWaitForever);
 8002b92:	bf00      	nop
 8002b94:	e7e4      	b.n	8002b60 <sampling_task+0x8>
 8002b96:	bf00      	nop
 8002b98:	20000adc 	.word	0x20000adc
 8002b9c:	48000800 	.word	0x48000800
 8002ba0:	20000f80 	.word	0x20000f80
 8002ba4:	20000f84 	.word	0x20000f84

08002ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
}
 8002bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <Error_Handler+0x8>

08002bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bbe:	4a10      	ldr	r2, [pc, #64]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bde:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <HAL_MspInit+0x4c>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	210f      	movs	r1, #15
 8002bee:	f06f 0001 	mvn.w	r0, #1
 8002bf2:	f000 fd74 	bl	80036de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000

08002c04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b09c      	sub	sp, #112	@ 0x70
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	2268      	movs	r2, #104	@ 0x68
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f012 fd57 	bl	80156c8 <memset>
  if(hrtc->Instance==RTC)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <HAL_RTC_MspInit+0x68>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d11f      	bne.n	8002c64 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c28:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 f8ef 	bl	8006e18 <HAL_RCCEx_PeriphCLKConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002c40:	f7ff ffb2 	bl	8002ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c44:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <HAL_RTC_MspInit+0x6c>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4a:	4a09      	ldr	r2, [pc, #36]	@ (8002c70 <HAL_RTC_MspInit+0x6c>)
 8002c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8002c54:	2200      	movs	r2, #0
 8002c56:	2105      	movs	r1, #5
 8002c58:	2003      	movs	r0, #3
 8002c5a:	f000 fd40 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c5e:	2003      	movs	r0, #3
 8002c60:	f000 fd59 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c64:	bf00      	nop
 8002c66:	3770      	adds	r7, #112	@ 0x70
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40002800 	.word	0x40002800
 8002c70:	40021000 	.word	0x40021000

08002c74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08c      	sub	sp, #48	@ 0x30
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 031c 	add.w	r3, r7, #28
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a8a      	ldr	r2, [pc, #552]	@ (8002ebc <HAL_SPI_MspInit+0x248>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	f040 8084 	bne.w	8002da0 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c98:	4b89      	ldr	r3, [pc, #548]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9c:	4a88      	ldr	r2, [pc, #544]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002c9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ca2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ca4:	4b86      	ldr	r3, [pc, #536]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb0:	4b83      	ldr	r3, [pc, #524]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb4:	4a82      	ldr	r2, [pc, #520]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cbc:	4b80      	ldr	r3, [pc, #512]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cc8:	23e0      	movs	r3, #224	@ 0xe0
 8002cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cd8:	2305      	movs	r3, #5
 8002cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	f107 031c 	add.w	r3, r7, #28
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ce6:	f001 f9ed 	bl	80040c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002cea:	4b76      	ldr	r3, [pc, #472]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002cec:	4a76      	ldr	r2, [pc, #472]	@ (8002ec8 <HAL_SPI_MspInit+0x254>)
 8002cee:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002cf0:	4b74      	ldr	r3, [pc, #464]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf6:	4b73      	ldr	r3, [pc, #460]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cfc:	4b71      	ldr	r3, [pc, #452]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d02:	4b70      	ldr	r3, [pc, #448]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002d04:	2280      	movs	r2, #128	@ 0x80
 8002d06:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d08:	4b6e      	ldr	r3, [pc, #440]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002d14:	4b6b      	ldr	r3, [pc, #428]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d20:	4868      	ldr	r0, [pc, #416]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002d22:	f000 fd21 	bl	8003768 <HAL_DMA_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8002d2c:	f7ff ff3c 	bl	8002ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a64      	ldr	r2, [pc, #400]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002d34:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d36:	4a63      	ldr	r2, [pc, #396]	@ (8002ec4 <HAL_SPI_MspInit+0x250>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002d3c:	4b63      	ldr	r3, [pc, #396]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d3e:	4a64      	ldr	r2, [pc, #400]	@ (8002ed0 <HAL_SPI_MspInit+0x25c>)
 8002d40:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002d42:	4b62      	ldr	r3, [pc, #392]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d48:	4b60      	ldr	r3, [pc, #384]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d54:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d56:	2280      	movs	r2, #128	@ 0x80
 8002d58:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d60:	4b5a      	ldr	r3, [pc, #360]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002d66:	4b59      	ldr	r3, [pc, #356]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d6c:	4b57      	ldr	r3, [pc, #348]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002d72:	4856      	ldr	r0, [pc, #344]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d74:	f000 fcf8 	bl	8003768 <HAL_DMA_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8002d7e:	f7ff ff13 	bl	8002ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a51      	ldr	r2, [pc, #324]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d88:	4a50      	ldr	r2, [pc, #320]	@ (8002ecc <HAL_SPI_MspInit+0x258>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2105      	movs	r1, #5
 8002d92:	2023      	movs	r0, #35	@ 0x23
 8002d94:	f000 fca3 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002d98:	2023      	movs	r0, #35	@ 0x23
 8002d9a:	f000 fcbc 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d9e:	e088      	b.n	8002eb2 <HAL_SPI_MspInit+0x23e>
  else if(hspi->Instance==SPI2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed4 <HAL_SPI_MspInit+0x260>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	f040 8083 	bne.w	8002eb2 <HAL_SPI_MspInit+0x23e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dac:	4b44      	ldr	r3, [pc, #272]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	4a43      	ldr	r2, [pc, #268]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002db2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db8:	4b41      	ldr	r3, [pc, #260]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <HAL_SPI_MspInit+0x24c>)
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002ddc:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8002de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dee:	2305      	movs	r3, #5
 8002df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df2:	f107 031c 	add.w	r3, r7, #28
 8002df6:	4619      	mov	r1, r3
 8002df8:	4837      	ldr	r0, [pc, #220]	@ (8002ed8 <HAL_SPI_MspInit+0x264>)
 8002dfa:	f001 f963 	bl	80040c4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8002dfe:	4b37      	ldr	r3, [pc, #220]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e00:	4a37      	ldr	r2, [pc, #220]	@ (8002ee0 <HAL_SPI_MspInit+0x26c>)
 8002e02:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8002e04:	4b35      	ldr	r3, [pc, #212]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e0a:	4b34      	ldr	r3, [pc, #208]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e10:	4b32      	ldr	r3, [pc, #200]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e16:	4b31      	ldr	r3, [pc, #196]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e18:	2280      	movs	r2, #128	@ 0x80
 8002e1a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e22:	4b2e      	ldr	r3, [pc, #184]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002e28:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002e34:	4829      	ldr	r0, [pc, #164]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e36:	f000 fc97 	bl	8003768 <HAL_DMA_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_SPI_MspInit+0x1d0>
      Error_Handler();
 8002e40:	f7ff feb2 	bl	8002ba8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a25      	ldr	r2, [pc, #148]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e48:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e4a:	4a24      	ldr	r2, [pc, #144]	@ (8002edc <HAL_SPI_MspInit+0x268>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002e50:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e52:	4a25      	ldr	r2, [pc, #148]	@ (8002ee8 <HAL_SPI_MspInit+0x274>)
 8002e54:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8002e56:	4b23      	ldr	r3, [pc, #140]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e5e:	2210      	movs	r2, #16
 8002e60:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e62:	4b20      	ldr	r3, [pc, #128]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e6a:	2280      	movs	r2, #128	@ 0x80
 8002e6c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e80:	4b18      	ldr	r3, [pc, #96]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002e86:	4817      	ldr	r0, [pc, #92]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e88:	f000 fc6e 	bl	8003768 <HAL_DMA_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8002e92:	f7ff fe89 	bl	8002ba8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a12      	ldr	r2, [pc, #72]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e9c:	4a11      	ldr	r2, [pc, #68]	@ (8002ee4 <HAL_SPI_MspInit+0x270>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2105      	movs	r1, #5
 8002ea6:	2024      	movs	r0, #36	@ 0x24
 8002ea8:	f000 fc19 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002eac:	2024      	movs	r0, #36	@ 0x24
 8002eae:	f000 fc32 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3730      	adds	r7, #48	@ 0x30
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40013000 	.word	0x40013000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	2000087c 	.word	0x2000087c
 8002ec8:	4002001c 	.word	0x4002001c
 8002ecc:	200008c4 	.word	0x200008c4
 8002ed0:	40020030 	.word	0x40020030
 8002ed4:	40003800 	.word	0x40003800
 8002ed8:	48000400 	.word	0x48000400
 8002edc:	2000090c 	.word	0x2000090c
 8002ee0:	40020044 	.word	0x40020044
 8002ee4:	20000954 	.word	0x20000954
 8002ee8:	40020058 	.word	0x40020058

08002eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f30 <HAL_TIM_Base_MspInit+0x44>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d113      	bne.n	8002f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002efe:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <HAL_TIM_Base_MspInit+0x48>)
 8002f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f02:	4a0c      	ldr	r2, [pc, #48]	@ (8002f34 <HAL_TIM_Base_MspInit+0x48>)
 8002f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f34 <HAL_TIM_Base_MspInit+0x48>)
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2105      	movs	r1, #5
 8002f1a:	2019      	movs	r0, #25
 8002f1c:	f000 fbdf 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002f20:	2019      	movs	r0, #25
 8002f22:	f000 fbf8 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40014400 	.word	0x40014400
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b0a4      	sub	sp, #144	@ 0x90
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	2268      	movs	r2, #104	@ 0x68
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f012 fbb5 	bl	80156c8 <memset>
  if(huart->Instance==USART1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a35      	ldr	r2, [pc, #212]	@ (8003038 <HAL_UART_MspInit+0x100>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d162      	bne.n	800302e <HAL_UART_MspInit+0xf6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 ff4f 	bl	8006e18 <HAL_RCCEx_PeriphCLKConfig>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f80:	f7ff fe12 	bl	8002ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f84:	4b2d      	ldr	r3, [pc, #180]	@ (800303c <HAL_UART_MspInit+0x104>)
 8002f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f88:	4a2c      	ldr	r2, [pc, #176]	@ (800303c <HAL_UART_MspInit+0x104>)
 8002f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f90:	4b2a      	ldr	r3, [pc, #168]	@ (800303c <HAL_UART_MspInit+0x104>)
 8002f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9c:	4b27      	ldr	r3, [pc, #156]	@ (800303c <HAL_UART_MspInit+0x104>)
 8002f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa0:	4a26      	ldr	r2, [pc, #152]	@ (800303c <HAL_UART_MspInit+0x104>)
 8002fa2:	f043 0302 	orr.w	r3, r3, #2
 8002fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fa8:	4b24      	ldr	r3, [pc, #144]	@ (800303c <HAL_UART_MspInit+0x104>)
 8002faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_DEBUG_Tx_Pin|UART_DEBUG_Rx_Pin;
 8002fb4:	23c0      	movs	r3, #192	@ 0xc0
 8002fb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fca:	2307      	movs	r3, #7
 8002fcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	481a      	ldr	r0, [pc, #104]	@ (8003040 <HAL_UART_MspInit+0x108>)
 8002fd8:	f001 f874 	bl	80040c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8002fdc:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 8002fde:	4a1a      	ldr	r2, [pc, #104]	@ (8003048 <HAL_UART_MspInit+0x110>)
 8002fe0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8002fe2:	4b18      	ldr	r3, [pc, #96]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fe8:	4b16      	ldr	r3, [pc, #88]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 8002fea:	2210      	movs	r2, #16
 8002fec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ff4:	4b13      	ldr	r3, [pc, #76]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 8002ff6:	2280      	movs	r2, #128	@ 0x80
 8002ff8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ffa:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003000:	4b10      	ldr	r3, [pc, #64]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003006:	4b0f      	ldr	r3, [pc, #60]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 8003008:	2200      	movs	r2, #0
 800300a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800300c:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 800300e:	2200      	movs	r2, #0
 8003010:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003012:	480c      	ldr	r0, [pc, #48]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 8003014:	f000 fba8 	bl	8003768 <HAL_DMA_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 800301e:	f7ff fdc3 	bl	8002ba8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a07      	ldr	r2, [pc, #28]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 8003026:	671a      	str	r2, [r3, #112]	@ 0x70
 8003028:	4a06      	ldr	r2, [pc, #24]	@ (8003044 <HAL_UART_MspInit+0x10c>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800302e:	bf00      	nop
 8003030:	3790      	adds	r7, #144	@ 0x90
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40013800 	.word	0x40013800
 800303c:	40021000 	.word	0x40021000
 8003040:	48000400 	.word	0x48000400
 8003044:	20000a70 	.word	0x20000a70
 8003048:	4002046c 	.word	0x4002046c

0800304c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003050:	f003 fe66 	bl	8006d20 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003054:	bf00      	nop
 8003056:	e7fd      	b.n	8003054 <NMI_Handler+0x8>

08003058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <HardFault_Handler+0x4>

08003060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <MemManage_Handler+0x4>

08003068 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <BusFault_Handler+0x4>

08003070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <UsageFault_Handler+0x4>

08003078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800308a:	f000 f9d5 	bl	8003438 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800308e:	f00e f8f9 	bl	8011284 <xTaskGetSchedulerState>
 8003092:	4603      	mov	r3, r0
 8003094:	2b01      	cmp	r3, #1
 8003096:	d001      	beq.n	800309c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003098:	f00e ffee 	bl	8012078 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}

080030a0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80030a4:	4802      	ldr	r0, [pc, #8]	@ (80030b0 <RTC_WKUP_IRQHandler+0x10>)
 80030a6:	f004 fd1b 	bl	8007ae0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000790 	.word	0x20000790

080030b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80030b8:	4802      	ldr	r0, [pc, #8]	@ (80030c4 <DMA1_Channel2_IRQHandler+0x10>)
 80030ba:	f000 fcae 	bl	8003a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2000087c 	.word	0x2000087c

080030c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80030cc:	4802      	ldr	r0, [pc, #8]	@ (80030d8 <DMA1_Channel3_IRQHandler+0x10>)
 80030ce:	f000 fca4 	bl	8003a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200008c4 	.word	0x200008c4

080030dc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80030e0:	4802      	ldr	r0, [pc, #8]	@ (80030ec <DMA1_Channel4_IRQHandler+0x10>)
 80030e2:	f000 fc9a 	bl	8003a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000090c 	.word	0x2000090c

080030f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80030f4:	4802      	ldr	r0, [pc, #8]	@ (8003100 <DMA1_Channel5_IRQHandler+0x10>)
 80030f6:	f000 fc90 	bl	8003a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000954 	.word	0x20000954

08003104 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003108:	4802      	ldr	r0, [pc, #8]	@ (8003114 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800310a:	f006 fb32 	bl	8009772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2000099c 	.word	0x2000099c

08003118 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800311c:	4802      	ldr	r0, [pc, #8]	@ (8003128 <SPI1_IRQHandler+0x10>)
 800311e:	f005 fe15 	bl	8008d4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	200007b4 	.word	0x200007b4

0800312c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003130:	4802      	ldr	r0, [pc, #8]	@ (800313c <SPI2_IRQHandler+0x10>)
 8003132:	f005 fe0b 	bl	8008d4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000818 	.word	0x20000818

08003140 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB_ST_Pin);
 8003144:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003148:	f001 f968 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}

08003150 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003154:	4802      	ldr	r0, [pc, #8]	@ (8003160 <USB_IRQHandler+0x10>)
 8003156:	f001 faa1 	bl	800469c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20022d64 	.word	0x20022d64

08003164 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003168:	4802      	ldr	r0, [pc, #8]	@ (8003174 <DMA2_Channel6_IRQHandler+0x10>)
 800316a:	f000 fc56 	bl	8003a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000a70 	.word	0x20000a70

08003178 <RTC_Alarm_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_Alarm_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800317c:	4802      	ldr	r0, [pc, #8]	@ (8003188 <RTC_Alarm_IRQHandler+0x10>)
 800317e:	f004 fb55 	bl	800782c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000790 	.word	0x20000790

0800318c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return 1;
 8003190:	2301      	movs	r3, #1
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_kill>:

int _kill(int pid, int sig)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031a6:	f012 fb37 	bl	8015818 <__errno>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2216      	movs	r2, #22
 80031ae:	601a      	str	r2, [r3, #0]
  return -1;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <_exit>:

void _exit (int status)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ffe7 	bl	800319c <_kill>
  while (1) {}    /* Make sure we hang here */
 80031ce:	bf00      	nop
 80031d0:	e7fd      	b.n	80031ce <_exit+0x12>

080031d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e00a      	b.n	80031fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031e4:	f3af 8000 	nop.w
 80031e8:	4601      	mov	r1, r0
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	60ba      	str	r2, [r7, #8]
 80031f0:	b2ca      	uxtb	r2, r1
 80031f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3301      	adds	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	dbf0      	blt.n	80031e4 <_read+0x12>
  }

  return len;
 8003202:	687b      	ldr	r3, [r7, #4]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e009      	b.n	8003232 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	60ba      	str	r2, [r7, #8]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3301      	adds	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	dbf1      	blt.n	800321e <_write+0x12>
  }
  return len;
 800323a:	687b      	ldr	r3, [r7, #4]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <_close>:

int _close(int file)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800326c:	605a      	str	r2, [r3, #4]
  return 0;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <_isatty>:

int _isatty(int file)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003284:	2301      	movs	r3, #1
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <_sbrk+0x5c>)
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <_sbrk+0x60>)
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c0:	4b13      	ldr	r3, [pc, #76]	@ (8003310 <_sbrk+0x64>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032c8:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <_sbrk+0x64>)
 80032ca:	4a12      	ldr	r2, [pc, #72]	@ (8003314 <_sbrk+0x68>)
 80032cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ce:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <_sbrk+0x64>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d207      	bcs.n	80032ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032dc:	f012 fa9c 	bl	8015818 <__errno>
 80032e0:	4603      	mov	r3, r0
 80032e2:	220c      	movs	r2, #12
 80032e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032ea:	e009      	b.n	8003300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032ec:	4b08      	ldr	r3, [pc, #32]	@ (8003310 <_sbrk+0x64>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032f2:	4b07      	ldr	r3, [pc, #28]	@ (8003310 <_sbrk+0x64>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	4a05      	ldr	r2, [pc, #20]	@ (8003310 <_sbrk+0x64>)
 80032fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032fe:	68fb      	ldr	r3, [r7, #12]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20028000 	.word	0x20028000
 800330c:	00000400 	.word	0x00000400
 8003310:	20018a94 	.word	0x20018a94
 8003314:	200233c8 	.word	0x200233c8

08003318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <SystemInit+0x20>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003322:	4a05      	ldr	r2, [pc, #20]	@ (8003338 <SystemInit+0x20>)
 8003324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800333c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003374 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003340:	f7ff ffea 	bl	8003318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003344:	480c      	ldr	r0, [pc, #48]	@ (8003378 <LoopForever+0x6>)
  ldr r1, =_edata
 8003346:	490d      	ldr	r1, [pc, #52]	@ (800337c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003348:	4a0d      	ldr	r2, [pc, #52]	@ (8003380 <LoopForever+0xe>)
  movs r3, #0
 800334a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800334c:	e002      	b.n	8003354 <LoopCopyDataInit>

0800334e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800334e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003352:	3304      	adds	r3, #4

08003354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003358:	d3f9      	bcc.n	800334e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800335a:	4a0a      	ldr	r2, [pc, #40]	@ (8003384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800335c:	4c0a      	ldr	r4, [pc, #40]	@ (8003388 <LoopForever+0x16>)
  movs r3, #0
 800335e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003360:	e001      	b.n	8003366 <LoopFillZerobss>

08003362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003364:	3204      	adds	r2, #4

08003366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003368:	d3fb      	bcc.n	8003362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800336a:	f012 fa5b 	bl	8015824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800336e:	f7fe f859 	bl	8001424 <main>

08003372 <LoopForever>:

LoopForever:
    b LoopForever
 8003372:	e7fe      	b.n	8003372 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003374:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8003378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800337c:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8003380:	0802ed28 	.word	0x0802ed28
  ldr r2, =_sbss
 8003384:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8003388:	200233c8 	.word	0x200233c8

0800338c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800338c:	e7fe      	b.n	800338c <ADC1_IRQHandler>

0800338e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003398:	2003      	movs	r0, #3
 800339a:	f000 f995 	bl	80036c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800339e:	200f      	movs	r0, #15
 80033a0:	f000 f80e 	bl	80033c0 <HAL_InitTick>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	71fb      	strb	r3, [r7, #7]
 80033ae:	e001      	b.n	80033b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033b0:	f7ff fc00 	bl	8002bb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033b4:	79fb      	ldrb	r3, [r7, #7]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033cc:	4b17      	ldr	r3, [pc, #92]	@ (800342c <HAL_InitTick+0x6c>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d023      	beq.n	800341c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033d4:	4b16      	ldr	r3, [pc, #88]	@ (8003430 <HAL_InitTick+0x70>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b14      	ldr	r3, [pc, #80]	@ (800342c <HAL_InitTick+0x6c>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	4619      	mov	r1, r3
 80033de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f9af 	bl	800374e <HAL_SYSTICK_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10f      	bne.n	8003416 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b0f      	cmp	r3, #15
 80033fa:	d809      	bhi.n	8003410 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033fc:	2200      	movs	r2, #0
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003404:	f000 f96b 	bl	80036de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003408:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <HAL_InitTick+0x74>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e007      	b.n	8003420 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
 8003414:	e004      	b.n	8003420 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	e001      	b.n	8003420 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000000c 	.word	0x2000000c
 8003430:	20000004 	.word	0x20000004
 8003434:	20000008 	.word	0x20000008

08003438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800343c:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <HAL_IncTick+0x20>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	4b06      	ldr	r3, [pc, #24]	@ (800345c <HAL_IncTick+0x24>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4413      	add	r3, r2
 8003448:	4a04      	ldr	r2, [pc, #16]	@ (800345c <HAL_IncTick+0x24>)
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	2000000c 	.word	0x2000000c
 800345c:	20018a98 	.word	0x20018a98

08003460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return uwTick;
 8003464:	4b03      	ldr	r3, [pc, #12]	@ (8003474 <HAL_GetTick+0x14>)
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20018a98 	.word	0x20018a98

08003478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003480:	f7ff ffee 	bl	8003460 <HAL_GetTick>
 8003484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003490:	d005      	beq.n	800349e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003492:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <HAL_Delay+0x44>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800349e:	bf00      	nop
 80034a0:	f7ff ffde 	bl	8003460 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d8f7      	bhi.n	80034a0 <HAL_Delay+0x28>
  {
  }
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	2000000c 	.word	0x2000000c

080034c0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_SuspendTick+0x1c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <HAL_SuspendTick+0x1c>)
 80034ca:	f023 0302 	bic.w	r3, r3, #2
 80034ce:	6013      	str	r3, [r2, #0]
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000e010 	.word	0xe000e010

080034e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034fc:	4013      	ands	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800350c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003512:	4a04      	ldr	r2, [pc, #16]	@ (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	60d3      	str	r3, [r2, #12]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <__NVIC_GetPriorityGrouping+0x18>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	f003 0307 	and.w	r3, r3, #7
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	2b00      	cmp	r3, #0
 8003554:	db0b      	blt.n	800356e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	f003 021f 	and.w	r2, r3, #31
 800355c:	4907      	ldr	r1, [pc, #28]	@ (800357c <__NVIC_EnableIRQ+0x38>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2001      	movs	r0, #1
 8003566:	fa00 f202 	lsl.w	r2, r0, r2
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000e100 	.word	0xe000e100

08003580 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	2b00      	cmp	r3, #0
 8003590:	db12      	blt.n	80035b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	f003 021f 	and.w	r2, r3, #31
 8003598:	490a      	ldr	r1, [pc, #40]	@ (80035c4 <__NVIC_DisableIRQ+0x44>)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2001      	movs	r0, #1
 80035a2:	fa00 f202 	lsl.w	r2, r0, r2
 80035a6:	3320      	adds	r3, #32
 80035a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80035ac:	f3bf 8f4f 	dsb	sy
}
 80035b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035b2:	f3bf 8f6f 	isb	sy
}
 80035b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	@ (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	@ (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	@ 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	@ 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003694:	d301      	bcc.n	800369a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369a:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <SysTick_Config+0x40>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a2:	210f      	movs	r1, #15
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036a8:	f7ff ff8e 	bl	80035c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <SysTick_Config+0x40>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b2:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <SysTick_Config+0x40>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000e010 	.word	0xe000e010

080036c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff05 	bl	80034e0 <__NVIC_SetPriorityGrouping>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036f0:	f7ff ff1a 	bl	8003528 <__NVIC_GetPriorityGrouping>
 80036f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff8e 	bl	800361c <NVIC_EncodePriority>
 8003700:	4602      	mov	r2, r0
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5d 	bl	80035c8 <__NVIC_SetPriority>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff0d 	bl	8003544 <__NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff1d 	bl	8003580 <__NVIC_DisableIRQ>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ff94 	bl	8003684 <SysTick_Config>
 800375c:	4603      	mov	r3, r0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e098      	b.n	80038ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	4b4d      	ldr	r3, [pc, #308]	@ (80038b8 <HAL_DMA_Init+0x150>)
 8003782:	429a      	cmp	r2, r3
 8003784:	d80f      	bhi.n	80037a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	4b4b      	ldr	r3, [pc, #300]	@ (80038bc <HAL_DMA_Init+0x154>)
 800378e:	4413      	add	r3, r2
 8003790:	4a4b      	ldr	r2, [pc, #300]	@ (80038c0 <HAL_DMA_Init+0x158>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	009a      	lsls	r2, r3, #2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a48      	ldr	r2, [pc, #288]	@ (80038c4 <HAL_DMA_Init+0x15c>)
 80037a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80037a4:	e00e      	b.n	80037c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b46      	ldr	r3, [pc, #280]	@ (80038c8 <HAL_DMA_Init+0x160>)
 80037ae:	4413      	add	r3, r2
 80037b0:	4a43      	ldr	r2, [pc, #268]	@ (80038c0 <HAL_DMA_Init+0x158>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	009a      	lsls	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a42      	ldr	r2, [pc, #264]	@ (80038cc <HAL_DMA_Init+0x164>)
 80037c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800381e:	d039      	beq.n	8003894 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	4a27      	ldr	r2, [pc, #156]	@ (80038c4 <HAL_DMA_Init+0x15c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d11a      	bne.n	8003860 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800382a:	4b29      	ldr	r3, [pc, #164]	@ (80038d0 <HAL_DMA_Init+0x168>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003832:	f003 031c 	and.w	r3, r3, #28
 8003836:	210f      	movs	r1, #15
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	4924      	ldr	r1, [pc, #144]	@ (80038d0 <HAL_DMA_Init+0x168>)
 8003840:	4013      	ands	r3, r2
 8003842:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003844:	4b22      	ldr	r3, [pc, #136]	@ (80038d0 <HAL_DMA_Init+0x168>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	f003 031c 	and.w	r3, r3, #28
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	491d      	ldr	r1, [pc, #116]	@ (80038d0 <HAL_DMA_Init+0x168>)
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
 800385e:	e019      	b.n	8003894 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003860:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <HAL_DMA_Init+0x16c>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	f003 031c 	and.w	r3, r3, #28
 800386c:	210f      	movs	r1, #15
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	4917      	ldr	r1, [pc, #92]	@ (80038d4 <HAL_DMA_Init+0x16c>)
 8003876:	4013      	ands	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <HAL_DMA_Init+0x16c>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003886:	f003 031c 	and.w	r3, r3, #28
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	4911      	ldr	r1, [pc, #68]	@ (80038d4 <HAL_DMA_Init+0x16c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40020407 	.word	0x40020407
 80038bc:	bffdfff8 	.word	0xbffdfff8
 80038c0:	cccccccd 	.word	0xcccccccd
 80038c4:	40020000 	.word	0x40020000
 80038c8:	bffdfbf8 	.word	0xbffdfbf8
 80038cc:	40020400 	.word	0x40020400
 80038d0:	400200a8 	.word	0x400200a8
 80038d4:	400204a8 	.word	0x400204a8

080038d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_DMA_Start_IT+0x20>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e04b      	b.n	8003990 <HAL_DMA_Start_IT+0xb8>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d13a      	bne.n	8003982 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f921 	bl	8003b78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 020e 	orr.w	r2, r2, #14
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e00f      	b.n	8003970 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0204 	bic.w	r2, r2, #4
 800395e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 020a 	orr.w	r2, r2, #10
 800396e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e005      	b.n	800398e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800398a:	2302      	movs	r3, #2
 800398c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800398e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d005      	beq.n	80039bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2204      	movs	r2, #4
 80039b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
 80039ba:	e029      	b.n	8003a10 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 020e 	bic.w	r2, r2, #14
 80039ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e0:	f003 021c 	and.w	r2, r3, #28
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	2101      	movs	r1, #1
 80039ea:	fa01 f202 	lsl.w	r2, r1, r2
 80039ee:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
    }
  }
  return status;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	f003 031c 	and.w	r3, r3, #28
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d026      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x7a>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d021      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d107      	bne.n	8003a6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0204 	bic.w	r2, r2, #4
 8003a6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	f003 021c 	and.w	r2, r3, #28
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	2104      	movs	r1, #4
 8003a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d071      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a92:	e06c      	b.n	8003b6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a98:	f003 031c 	and.w	r3, r3, #28
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d02e      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xec>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d029      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10b      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 020a 	bic.w	r2, r2, #10
 8003ace:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003adc:	f003 021c 	and.w	r2, r3, #28
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d038      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b04:	e033      	b.n	8003b6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f003 031c 	and.w	r3, r3, #28
 8003b0e:	2208      	movs	r2, #8
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d02a      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x156>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d025      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 020e 	bic.w	r2, r2, #14
 8003b32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b38:	f003 021c 	and.w	r2, r3, #28
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f202 	lsl.w	r2, r1, r2
 8003b46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d004      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b6e:	bf00      	nop
 8003b70:	bf00      	nop
}
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	f003 021c 	and.w	r2, r3, #28
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	2101      	movs	r1, #1
 8003b94:	fa01 f202 	lsl.w	r2, r1, r2
 8003b98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d108      	bne.n	8003bbc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bba:	e007      	b.n	8003bcc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003bea:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca8 <HAL_FLASH_Program+0xd0>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_FLASH_Program+0x1e>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e053      	b.n	8003c9e <HAL_FLASH_Program+0xc6>
 8003bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca8 <HAL_FLASH_Program+0xd0>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bfc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003c00:	f000 f888 	bl	8003d14 <FLASH_WaitForLastOperation>
 8003c04:	4603      	mov	r3, r0
 8003c06:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d143      	bne.n	8003c96 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <HAL_FLASH_Program+0xd0>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003c14:	4b25      	ldr	r3, [pc, #148]	@ (8003cac <HAL_FLASH_Program+0xd4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d009      	beq.n	8003c34 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003c20:	4b22      	ldr	r3, [pc, #136]	@ (8003cac <HAL_FLASH_Program+0xd4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a21      	ldr	r2, [pc, #132]	@ (8003cac <HAL_FLASH_Program+0xd4>)
 8003c26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c2a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca8 <HAL_FLASH_Program+0xd0>)
 8003c2e:	2202      	movs	r2, #2
 8003c30:	771a      	strb	r2, [r3, #28]
 8003c32:	e002      	b.n	8003c3a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003c34:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <HAL_FLASH_Program+0xd0>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d107      	bne.n	8003c50 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c44:	68b8      	ldr	r0, [r7, #8]
 8003c46:	f000 f8bb 	bl	8003dc0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	e010      	b.n	8003c72 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d002      	beq.n	8003c5c <HAL_FLASH_Program+0x84>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d10a      	bne.n	8003c72 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	68b8      	ldr	r0, [r7, #8]
 8003c62:	f000 f8d3 	bl	8003e0c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d102      	bne.n	8003c72 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003c6c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003c70:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c72:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003c76:	f000 f84d 	bl	8003d14 <FLASH_WaitForLastOperation>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d006      	beq.n	8003c92 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003c84:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <HAL_FLASH_Program+0xd4>)
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	4907      	ldr	r1, [pc, #28]	@ (8003cac <HAL_FLASH_Program+0xd4>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003c92:	f000 f9cd 	bl	8004030 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c96:	4b04      	ldr	r3, [pc, #16]	@ (8003ca8 <HAL_FLASH_Program+0xd0>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]

  return status;
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000010 	.word	0x20000010
 8003cac:	40022000 	.word	0x40022000

08003cb0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003cba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <HAL_FLASH_Unlock+0x38>)
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da0b      	bge.n	8003cda <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003cc2:	4b09      	ldr	r3, [pc, #36]	@ (8003ce8 <HAL_FLASH_Unlock+0x38>)
 8003cc4:	4a09      	ldr	r2, [pc, #36]	@ (8003cec <HAL_FLASH_Unlock+0x3c>)
 8003cc6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003cc8:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <HAL_FLASH_Unlock+0x38>)
 8003cca:	4a09      	ldr	r2, [pc, #36]	@ (8003cf0 <HAL_FLASH_Unlock+0x40>)
 8003ccc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003cce:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <HAL_FLASH_Unlock+0x38>)
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	da01      	bge.n	8003cda <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003cda:	79fb      	ldrb	r3, [r7, #7]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40022000 	.word	0x40022000
 8003cec:	45670123 	.word	0x45670123
 8003cf0:	cdef89ab 	.word	0xcdef89ab

08003cf4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_FLASH_Lock+0x1c>)
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	4a04      	ldr	r2, [pc, #16]	@ (8003d10 <HAL_FLASH_Lock+0x1c>)
 8003cfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d02:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40022000 	.word	0x40022000

08003d14 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003d1c:	f7ff fba0 	bl	8003460 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003d22:	e00d      	b.n	8003d40 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d2a:	d009      	beq.n	8003d40 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003d2c:	f7ff fb98 	bl	8003460 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d801      	bhi.n	8003d40 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e035      	b.n	8003dac <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003d40:	4b1c      	ldr	r3, [pc, #112]	@ (8003db4 <FLASH_WaitForLastOperation+0xa0>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1eb      	bne.n	8003d24 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003d4c:	4b19      	ldr	r3, [pc, #100]	@ (8003db4 <FLASH_WaitForLastOperation+0xa0>)
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <FLASH_WaitForLastOperation+0xa4>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01d      	beq.n	8003d98 <FLASH_WaitForLastOperation+0x84>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003d5c:	4b17      	ldr	r3, [pc, #92]	@ (8003dbc <FLASH_WaitForLastOperation+0xa8>)
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	4a15      	ldr	r2, [pc, #84]	@ (8003dbc <FLASH_WaitForLastOperation+0xa8>)
 8003d66:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d6e:	d307      	bcc.n	8003d80 <FLASH_WaitForLastOperation+0x6c>
 8003d70:	4b10      	ldr	r3, [pc, #64]	@ (8003db4 <FLASH_WaitForLastOperation+0xa0>)
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003d7a:	490e      	ldr	r1, [pc, #56]	@ (8003db4 <FLASH_WaitForLastOperation+0xa0>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	618b      	str	r3, [r1, #24]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d004      	beq.n	8003d94 <FLASH_WaitForLastOperation+0x80>
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <FLASH_WaitForLastOperation+0xa0>)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003d92:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e009      	b.n	8003dac <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003d98:	4b06      	ldr	r3, [pc, #24]	@ (8003db4 <FLASH_WaitForLastOperation+0xa0>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <FLASH_WaitForLastOperation+0x96>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003da4:	4b03      	ldr	r3, [pc, #12]	@ (8003db4 <FLASH_WaitForLastOperation+0xa0>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40022000 	.word	0x40022000
 8003db8:	0002c3fa 	.word	0x0002c3fa
 8003dbc:	20000010 	.word	0x20000010

08003dc0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e08 <FLASH_Program_DoubleWord+0x48>)
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003e08 <FLASH_Program_DoubleWord+0x48>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003dde:	f3bf 8f6f 	isb	sy
}
 8003de2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003de4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	000a      	movs	r2, r1
 8003df2:	2300      	movs	r3, #0
 8003df4:	68f9      	ldr	r1, [r7, #12]
 8003df6:	3104      	adds	r1, #4
 8003df8:	4613      	mov	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40022000 	.word	0x40022000

08003e0c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	@ 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003e16:	2340      	movs	r3, #64	@ 0x40
 8003e18:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003e22:	4b14      	ldr	r3, [pc, #80]	@ (8003e74 <FLASH_Program_Fast+0x68>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4a13      	ldr	r2, [pc, #76]	@ (8003e74 <FLASH_Program_Fast+0x68>)
 8003e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e32:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e34:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e38:	b672      	cpsid	i
}
 8003e3a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	3304      	adds	r3, #4
 8003e48:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	617b      	str	r3, [r7, #20]
    row_index--;
 8003e50:	7ffb      	ldrb	r3, [r7, #31]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003e56:	7ffb      	ldrb	r3, [r7, #31]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ef      	bne.n	8003e3c <FLASH_Program_Fast+0x30>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f383 8810 	msr	PRIMASK, r3
}
 8003e66:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003e68:	bf00      	nop
 8003e6a:	3724      	adds	r7, #36	@ 0x24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40022000 	.word	0x40022000

08003e78 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e82:	4b48      	ldr	r3, [pc, #288]	@ (8003fa4 <HAL_FLASHEx_Erase+0x12c>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_FLASHEx_Erase+0x16>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e085      	b.n	8003f9a <HAL_FLASHEx_Erase+0x122>
 8003e8e:	4b45      	ldr	r3, [pc, #276]	@ (8003fa4 <HAL_FLASHEx_Erase+0x12c>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e94:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003e98:	f7ff ff3c 	bl	8003d14 <FLASH_WaitForLastOperation>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d175      	bne.n	8003f92 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa4 <HAL_FLASHEx_Erase+0x12c>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003eac:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003ec4:	4b38      	ldr	r3, [pc, #224]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a37      	ldr	r2, [pc, #220]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003eca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ece:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003ed0:	4b34      	ldr	r3, [pc, #208]	@ (8003fa4 <HAL_FLASHEx_Erase+0x12c>)
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	771a      	strb	r2, [r3, #28]
 8003ed6:	e016      	b.n	8003f06 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003ed8:	4b32      	ldr	r3, [pc, #200]	@ (8003fa4 <HAL_FLASHEx_Erase+0x12c>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	771a      	strb	r2, [r3, #28]
 8003ede:	e012      	b.n	8003f06 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003ee0:	4b31      	ldr	r3, [pc, #196]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003eec:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003ef2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ef6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa4 <HAL_FLASHEx_Erase+0x12c>)
 8003efa:	2202      	movs	r2, #2
 8003efc:	771a      	strb	r2, [r3, #28]
 8003efe:	e002      	b.n	8003f06 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003f00:	4b28      	ldr	r3, [pc, #160]	@ (8003fa4 <HAL_FLASHEx_Erase+0x12c>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d111      	bne.n	8003f32 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f84a 	bl	8003fac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f1c:	f7ff fefa 	bl	8003d14 <FLASH_WaitForLastOperation>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003f24:	4b20      	ldr	r3, [pc, #128]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003f2a:	f023 0304 	bic.w	r3, r3, #4
 8003f2e:	6153      	str	r3, [r2, #20]
 8003f30:	e02d      	b.n	8003f8e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f38:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	e01d      	b.n	8003f7e <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4619      	mov	r1, r3
 8003f48:	68b8      	ldr	r0, [r7, #8]
 8003f4a:	f000 f84d 	bl	8003fe8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f4e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f52:	f7ff fedf 	bl	8003d14 <FLASH_WaitForLastOperation>
 8003f56:	4603      	mov	r3, r0
 8003f58:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003f5a:	4b13      	ldr	r3, [pc, #76]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <HAL_FLASHEx_Erase+0x130>)
 8003f60:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003f64:	f023 0302 	bic.w	r3, r3, #2
 8003f68:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	601a      	str	r2, [r3, #0]
          break;
 8003f76:	e00a      	b.n	8003f8e <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d3d9      	bcc.n	8003f42 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003f8e:	f000 f84f 	bl	8004030 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f92:	4b04      	ldr	r3, [pc, #16]	@ (8003fa4 <HAL_FLASHEx_Erase+0x12c>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]

  return status;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000010 	.word	0x20000010
 8003fa8:	40022000 	.word	0x40022000

08003fac <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003fbe:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <FLASH_MassErase+0x38>)
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	4a08      	ldr	r2, [pc, #32]	@ (8003fe4 <FLASH_MassErase+0x38>)
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <FLASH_MassErase+0x38>)
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	4a05      	ldr	r2, [pc, #20]	@ (8003fe4 <FLASH_MassErase+0x38>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd4:	6153      	str	r3, [r2, #20]
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40022000 	.word	0x40022000

08003fe8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800402c <FLASH_PageErase+0x44>)
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8004002:	490a      	ldr	r1, [pc, #40]	@ (800402c <FLASH_PageErase+0x44>)
 8004004:	4313      	orrs	r3, r2
 8004006:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004008:	4b08      	ldr	r3, [pc, #32]	@ (800402c <FLASH_PageErase+0x44>)
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	4a07      	ldr	r2, [pc, #28]	@ (800402c <FLASH_PageErase+0x44>)
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004014:	4b05      	ldr	r3, [pc, #20]	@ (800402c <FLASH_PageErase+0x44>)
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	4a04      	ldr	r2, [pc, #16]	@ (800402c <FLASH_PageErase+0x44>)
 800401a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800401e:	6153      	str	r3, [r2, #20]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40022000 	.word	0x40022000

08004030 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004036:	4b21      	ldr	r3, [pc, #132]	@ (80040bc <FLASH_FlushCaches+0x8c>)
 8004038:	7f1b      	ldrb	r3, [r3, #28]
 800403a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d002      	beq.n	8004048 <FLASH_FlushCaches+0x18>
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d117      	bne.n	8004078 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004048:	4b1d      	ldr	r3, [pc, #116]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1c      	ldr	r2, [pc, #112]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 800404e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004052:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004054:	4b1a      	ldr	r3, [pc, #104]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a19      	ldr	r2, [pc, #100]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 800405a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b17      	ldr	r3, [pc, #92]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a16      	ldr	r2, [pc, #88]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 8004066:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800406a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800406c:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a13      	ldr	r2, [pc, #76]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 8004072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004076:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d002      	beq.n	8004084 <FLASH_FlushCaches+0x54>
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d111      	bne.n	80040a8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004084:	4b0e      	ldr	r3, [pc, #56]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a0d      	ldr	r2, [pc, #52]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 800408a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b0b      	ldr	r3, [pc, #44]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0a      	ldr	r2, [pc, #40]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 8004096:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800409a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800409c:	4b08      	ldr	r3, [pc, #32]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a07      	ldr	r2, [pc, #28]	@ (80040c0 <FLASH_FlushCaches+0x90>)
 80040a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040a6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80040a8:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <FLASH_FlushCaches+0x8c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	771a      	strb	r2, [r3, #28]
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000010 	.word	0x20000010
 80040c0:	40022000 	.word	0x40022000

080040c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040d2:	e154      	b.n	800437e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	2101      	movs	r1, #1
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	4013      	ands	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8146 	beq.w	8004378 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d005      	beq.n	8004104 <HAL_GPIO_Init+0x40>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d130      	bne.n	8004166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	2203      	movs	r2, #3
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4013      	ands	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800413a:	2201      	movs	r2, #1
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4013      	ands	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	f003 0201 	and.w	r2, r3, #1
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b03      	cmp	r3, #3
 8004170:	d017      	beq.n	80041a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d123      	bne.n	80041f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	08da      	lsrs	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3208      	adds	r2, #8
 80041b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	220f      	movs	r2, #15
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	08da      	lsrs	r2, r3, #3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3208      	adds	r2, #8
 80041f0:	6939      	ldr	r1, [r7, #16]
 80041f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0203 	and.w	r2, r3, #3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80a0 	beq.w	8004378 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004238:	4b58      	ldr	r3, [pc, #352]	@ (800439c <HAL_GPIO_Init+0x2d8>)
 800423a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423c:	4a57      	ldr	r2, [pc, #348]	@ (800439c <HAL_GPIO_Init+0x2d8>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6613      	str	r3, [r2, #96]	@ 0x60
 8004244:	4b55      	ldr	r3, [pc, #340]	@ (800439c <HAL_GPIO_Init+0x2d8>)
 8004246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004250:	4a53      	ldr	r2, [pc, #332]	@ (80043a0 <HAL_GPIO_Init+0x2dc>)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	089b      	lsrs	r3, r3, #2
 8004256:	3302      	adds	r3, #2
 8004258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	220f      	movs	r2, #15
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800427a:	d019      	beq.n	80042b0 <HAL_GPIO_Init+0x1ec>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a49      	ldr	r2, [pc, #292]	@ (80043a4 <HAL_GPIO_Init+0x2e0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_GPIO_Init+0x1e8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a48      	ldr	r2, [pc, #288]	@ (80043a8 <HAL_GPIO_Init+0x2e4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00d      	beq.n	80042a8 <HAL_GPIO_Init+0x1e4>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a47      	ldr	r2, [pc, #284]	@ (80043ac <HAL_GPIO_Init+0x2e8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <HAL_GPIO_Init+0x1e0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a46      	ldr	r2, [pc, #280]	@ (80043b0 <HAL_GPIO_Init+0x2ec>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d101      	bne.n	80042a0 <HAL_GPIO_Init+0x1dc>
 800429c:	2304      	movs	r3, #4
 800429e:	e008      	b.n	80042b2 <HAL_GPIO_Init+0x1ee>
 80042a0:	2307      	movs	r3, #7
 80042a2:	e006      	b.n	80042b2 <HAL_GPIO_Init+0x1ee>
 80042a4:	2303      	movs	r3, #3
 80042a6:	e004      	b.n	80042b2 <HAL_GPIO_Init+0x1ee>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e002      	b.n	80042b2 <HAL_GPIO_Init+0x1ee>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <HAL_GPIO_Init+0x1ee>
 80042b0:	2300      	movs	r3, #0
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	f002 0203 	and.w	r2, r2, #3
 80042b8:	0092      	lsls	r2, r2, #2
 80042ba:	4093      	lsls	r3, r2
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042c2:	4937      	ldr	r1, [pc, #220]	@ (80043a0 <HAL_GPIO_Init+0x2dc>)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	3302      	adds	r3, #2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042d0:	4b38      	ldr	r3, [pc, #224]	@ (80043b4 <HAL_GPIO_Init+0x2f0>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	43db      	mvns	r3, r3
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042f4:	4a2f      	ldr	r2, [pc, #188]	@ (80043b4 <HAL_GPIO_Init+0x2f0>)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042fa:	4b2e      	ldr	r3, [pc, #184]	@ (80043b4 <HAL_GPIO_Init+0x2f0>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	43db      	mvns	r3, r3
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4013      	ands	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800431e:	4a25      	ldr	r2, [pc, #148]	@ (80043b4 <HAL_GPIO_Init+0x2f0>)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004324:	4b23      	ldr	r3, [pc, #140]	@ (80043b4 <HAL_GPIO_Init+0x2f0>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	43db      	mvns	r3, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004348:	4a1a      	ldr	r2, [pc, #104]	@ (80043b4 <HAL_GPIO_Init+0x2f0>)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800434e:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <HAL_GPIO_Init+0x2f0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	43db      	mvns	r3, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4013      	ands	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004372:	4a10      	ldr	r2, [pc, #64]	@ (80043b4 <HAL_GPIO_Init+0x2f0>)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	3301      	adds	r3, #1
 800437c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f aea3 	bne.w	80040d4 <HAL_GPIO_Init+0x10>
  }
}
 800438e:	bf00      	nop
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40021000 	.word	0x40021000
 80043a0:	40010000 	.word	0x40010000
 80043a4:	48000400 	.word	0x48000400
 80043a8:	48000800 	.word	0x48000800
 80043ac:	48000c00 	.word	0x48000c00
 80043b0:	48001000 	.word	0x48001000
 80043b4:	40010400 	.word	0x40010400

080043b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]
 80043c4:	4613      	mov	r3, r2
 80043c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c8:	787b      	ldrb	r3, [r7, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ce:	887a      	ldrh	r2, [r7, #2]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043d4:	e002      	b.n	80043dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043fa:	887a      	ldrh	r2, [r7, #2]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4013      	ands	r3, r2
 8004400:	041a      	lsls	r2, r3, #16
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	43d9      	mvns	r1, r3
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	400b      	ands	r3, r1
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	619a      	str	r2, [r3, #24]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004426:	4b08      	ldr	r3, [pc, #32]	@ (8004448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d006      	beq.n	8004440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004432:	4a05      	ldr	r2, [pc, #20]	@ (8004448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	4618      	mov	r0, r3
 800443c:	f7fd fed0 	bl	80021e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40010400 	.word	0x40010400

0800444c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800444c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444e:	b08b      	sub	sp, #44	@ 0x2c
 8004450:	af06      	add	r7, sp, #24
 8004452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0f8      	b.n	8004650 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f00e fad2 	bl	8012a1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2203      	movs	r2, #3
 800447c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f006 f8c6 	bl	800a616 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	687e      	ldr	r6, [r7, #4]
 8004492:	466d      	mov	r5, sp
 8004494:	f106 0410 	add.w	r4, r6, #16
 8004498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800449a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	602b      	str	r3, [r5, #0]
 80044a0:	1d33      	adds	r3, r6, #4
 80044a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044a4:	6838      	ldr	r0, [r7, #0]
 80044a6:	f006 f88e 	bl	800a5c6 <USB_CoreInit>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0c9      	b.n	8004650 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f006 f8c2 	bl	800a64c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e040      	b.n	8004550 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	440b      	add	r3, r1
 80044de:	3301      	adds	r3, #1
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	440b      	add	r3, r1
 80044f4:	7bfa      	ldrb	r2, [r7, #15]
 80044f6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	440b      	add	r3, r1
 8004508:	3303      	adds	r3, #3
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800450e:	7bfa      	ldrb	r2, [r7, #15]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	440b      	add	r3, r1
 800451c:	3338      	adds	r3, #56	@ 0x38
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004522:	7bfa      	ldrb	r2, [r7, #15]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	440b      	add	r3, r1
 8004530:	333c      	adds	r3, #60	@ 0x3c
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	440b      	add	r3, r1
 8004544:	3340      	adds	r3, #64	@ 0x40
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	3301      	adds	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	7bfa      	ldrb	r2, [r7, #15]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	429a      	cmp	r2, r3
 8004558:	d3b9      	bcc.n	80044ce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
 800455e:	e044      	b.n	80045ea <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004560:	7bfa      	ldrb	r2, [r7, #15]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	440b      	add	r3, r1
 800456e:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004576:	7bfa      	ldrb	r2, [r7, #15]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	440b      	add	r3, r1
 8004584:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	440b      	add	r3, r1
 800459a:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	440b      	add	r3, r1
 80045b0:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045b8:	7bfa      	ldrb	r2, [r7, #15]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	440b      	add	r3, r1
 80045c6:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	440b      	add	r3, r1
 80045dc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	3301      	adds	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	7bfa      	ldrb	r2, [r7, #15]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d3b5      	bcc.n	8004560 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	603b      	str	r3, [r7, #0]
 80045fa:	687e      	ldr	r6, [r7, #4]
 80045fc:	466d      	mov	r5, sp
 80045fe:	f106 0410 	add.w	r4, r6, #16
 8004602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	602b      	str	r3, [r5, #0]
 800460a:	1d33      	adds	r3, r6, #4
 800460c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800460e:	6838      	ldr	r0, [r7, #0]
 8004610:	f006 f829 	bl	800a666 <USB_DevInit>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e014      	b.n	8004650 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d102      	bne.n	8004644 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f001 fc57 	bl	8005ef2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f008 fab9 	bl	800cbc0 <USB_DevDisconnect>

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004658 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_PCD_Start+0x16>
 800466a:	2302      	movs	r3, #2
 800466c:	e012      	b.n	8004694 <HAL_PCD_Start+0x3c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f005 ffb4 	bl	800a5e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f008 fa84 	bl	800cb92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f008 fa9e 	bl	800cbea <USB_ReadInterrupts>
 80046ae:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fb13 	bl	8004ce6 <PCD_EP_ISR_Handler>

    return;
 80046c0:	e110      	b.n	80048e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d013      	beq.n	80046f4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046de:	b292      	uxth	r2, r2
 80046e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f00e fa54 	bl	8012b92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80046ea:	2100      	movs	r1, #0
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f8fc 	bl	80048ea <HAL_PCD_SetAddress>

    return;
 80046f2:	e0f7      	b.n	80048e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004710:	b292      	uxth	r2, r2
 8004712:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004716:	e0e5      	b.n	80048e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800472a:	b29a      	uxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004734:	b292      	uxth	r2, r2
 8004736:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800473a:	e0d3      	b.n	80048e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d034      	beq.n	80047b0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800474e:	b29a      	uxth	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0204 	bic.w	r2, r2, #4
 8004758:	b292      	uxth	r2, r2
 800475a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0208 	bic.w	r2, r2, #8
 8004770:	b292      	uxth	r2, r2
 8004772:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 800477c:	2b01      	cmp	r3, #1
 800477e:	d107      	bne.n	8004790 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004788:	2100      	movs	r1, #0
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f00e fcb2 	bl	80130f4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f00e fa37 	bl	8012c04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800479e:	b29a      	uxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047a8:	b292      	uxth	r2, r2
 80047aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80047ae:	e099      	b.n	80048e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d027      	beq.n	800480a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0208 	orr.w	r2, r2, #8
 80047cc:	b292      	uxth	r2, r2
 80047ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047e4:	b292      	uxth	r2, r2
 80047e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0204 	orr.w	r2, r2, #4
 80047fc:	b292      	uxth	r2, r2
 80047fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f00e f9e4 	bl	8012bd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004808:	e06c      	b.n	80048e4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004810:	2b00      	cmp	r3, #0
 8004812:	d040      	beq.n	8004896 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800481c:	b29a      	uxth	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004826:	b292      	uxth	r2, r2
 8004828:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d12b      	bne.n	800488e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0204 	orr.w	r2, r2, #4
 8004848:	b292      	uxth	r2, r2
 800484a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004856:	b29a      	uxth	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0208 	orr.w	r2, r2, #8
 8004860:	b292      	uxth	r2, r2
 8004862:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004876:	b29b      	uxth	r3, r3
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004884:	2101      	movs	r1, #1
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f00e fc34 	bl	80130f4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800488c:	e02a      	b.n	80048e4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f00e f99e 	bl	8012bd0 <HAL_PCD_SuspendCallback>
    return;
 8004894:	e026      	b.n	80048e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00f      	beq.n	80048c0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80048b2:	b292      	uxth	r2, r2
 80048b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f00e f95c 	bl	8012b76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80048be:	e011      	b.n	80048e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048dc:	b292      	uxth	r2, r2
 80048de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80048e2:	bf00      	nop
  }
}
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_PCD_SetAddress+0x1a>
 8004900:	2302      	movs	r3, #2
 8004902:	e013      	b.n	800492c <HAL_PCD_SetAddress+0x42>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	78fa      	ldrb	r2, [r7, #3]
 8004910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f008 f924 	bl	800cb6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	461a      	mov	r2, r3
 8004942:	4603      	mov	r3, r0
 8004944:	70fb      	strb	r3, [r7, #3]
 8004946:	460b      	mov	r3, r1
 8004948:	803b      	strh	r3, [r7, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004956:	2b00      	cmp	r3, #0
 8004958:	da0e      	bge.n	8004978 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4413      	add	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	705a      	strb	r2, [r3, #1]
 8004976:	e00e      	b.n	8004996 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 0207 	and.w	r2, r3, #7
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049a2:	883a      	ldrh	r2, [r7, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	78ba      	ldrb	r2, [r7, #2]
 80049ac:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049ae:	78bb      	ldrb	r3, [r7, #2]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d102      	bne.n	80049ba <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_PCD_EP_Open+0x94>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e00e      	b.n	80049e6 <HAL_PCD_EP_Open+0xb2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68f9      	ldr	r1, [r7, #12]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f005 fe66 	bl	800a6a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80049e4:	7afb      	ldrb	r3, [r7, #11]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	460b      	mov	r3, r1
 80049f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da0e      	bge.n	8004a20 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	4413      	add	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	705a      	strb	r2, [r3, #1]
 8004a1e:	e00e      	b.n	8004a3e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_PCD_EP_Close+0x6a>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e00e      	b.n	8004a76 <HAL_PCD_EP_Close+0x88>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68f9      	ldr	r1, [r7, #12]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f006 f9e2 	bl	800ae30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b086      	sub	sp, #24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a8e:	7afb      	ldrb	r3, [r7, #11]
 8004a90:	f003 0207 	and.w	r2, r3, #7
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2200      	movs	r2, #0
 8004abc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004abe:	7afb      	ldrb	r3, [r7, #11]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6979      	ldr	r1, [r7, #20]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f006 fb9a 	bl	800b20a <USB_EPStartXfer>

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	f003 0207 	and.w	r2, r3, #7
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	440b      	add	r3, r1
 8004afe:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8004b02:	681b      	ldr	r3, [r3, #0]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b20:	7afb      	ldrb	r3, [r7, #11]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2200      	movs	r2, #0
 8004b54:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b5c:	7afb      	ldrb	r3, [r7, #11]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6979      	ldr	r1, [r7, #20]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f006 fb4b 	bl	800b20a <USB_EPStartXfer>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	f003 0207 	and.w	r2, r3, #7
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d901      	bls.n	8004b9c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e04c      	b.n	8004c36 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	da0e      	bge.n	8004bc2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	705a      	strb	r2, [r3, #1]
 8004bc0:	e00c      	b.n	8004bdc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_PCD_EP_SetStall+0x7e>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e01c      	b.n	8004c36 <HAL_PCD_EP_SetStall+0xb8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68f9      	ldr	r1, [r7, #12]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f007 feae 	bl	800c96c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d108      	bne.n	8004c2c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f007 ffef 	bl	800cc0a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	f003 020f 	and.w	r2, r3, #15
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d901      	bls.n	8004c5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e040      	b.n	8004cde <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	da0e      	bge.n	8004c82 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	705a      	strb	r2, [r3, #1]
 8004c80:	e00e      	b.n	8004ca0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	f003 0207 	and.w	r2, r3, #7
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	4413      	add	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_PCD_EP_ClrStall+0x82>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e00e      	b.n	8004cde <HAL_PCD_EP_ClrStall+0xa0>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68f9      	ldr	r1, [r7, #12]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f007 fe9d 	bl	800ca0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b096      	sub	sp, #88	@ 0x58
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cee:	e3b0      	b.n	8005452 <PCD_EP_ISR_Handler+0x76c>
  {
    wIstr = hpcd->Instance->ISTR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cf8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004d0a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f040 8172 	bne.w	8004ff8 <PCD_EP_ISR_Handler+0x312>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d14f      	bne.n	8004dc0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d30:	81fb      	strh	r3, [r7, #14]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	89fb      	ldrh	r3, [r7, #14]
 8004d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3328      	adds	r3, #40	@ 0x28
 8004d48:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	4413      	add	r3, r2
 8004d64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d7e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d80:	2100      	movs	r1, #0
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f00d fedd 	bl	8012b42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 835e 	beq.w	8005452 <PCD_EP_ISR_Handler+0x76c>
 8004d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f040 8359 	bne.w	8005452 <PCD_EP_ISR_Handler+0x76c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004dbe:	e348      	b.n	8005452 <PCD_EP_ISR_Handler+0x76c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004dc6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004dd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d032      	beq.n	8004e44 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	4413      	add	r3, r2
 8004df8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e04:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8004e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e12:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e16:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f007 ff44 	bl	800cca6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	823b      	strh	r3, [r7, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	8a3a      	ldrh	r2, [r7, #16]
 8004e34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e38:	b292      	uxth	r2, r2
 8004e3a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f00d fe53 	bl	8012ae8 <HAL_PCD_SetupStageCallback>
 8004e42:	e306      	b.n	8005452 <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e44:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f280 8302 	bge.w	8005452 <PCD_EP_ISR_Handler+0x76c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	83fb      	strh	r3, [r7, #30]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	8bfa      	ldrh	r2, [r7, #30]
 8004e64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	4413      	add	r3, r2
 8004e86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d019      	beq.n	8004ed0 <PCD_EP_ISR_Handler+0x1ea>
 8004e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d015      	beq.n	8004ed0 <PCD_EP_ISR_Handler+0x1ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eaa:	6959      	ldr	r1, [r3, #20]
 8004eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f007 fef6 	bl	800cca6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	441a      	add	r2, r3
 8004ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004ec8:	2100      	movs	r1, #0
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f00d fe1e 	bl	8012b0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004eda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 82b5 	bne.w	8005452 <PCD_EP_ISR_Handler+0x76c>
 8004ee8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004eec:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004ef0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ef4:	f000 82ad 	beq.w	8005452 <PCD_EP_ISR_Handler+0x76c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f2e:	d91d      	bls.n	8004f6c <PCD_EP_ISR_Handler+0x286>
 8004f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d102      	bne.n	8004f4a <PCD_EP_ISR_Handler+0x264>
 8004f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f46:	3b01      	subs	r3, #1
 8004f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	801a      	strh	r2, [r3, #0]
 8004f6a:	e026      	b.n	8004fba <PCD_EP_ISR_Handler+0x2d4>
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <PCD_EP_ISR_Handler+0x2a4>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	801a      	strh	r2, [r3, #0]
 8004f88:	e017      	b.n	8004fba <PCD_EP_ISR_Handler+0x2d4>
 8004f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <PCD_EP_ISR_Handler+0x2be>
 8004f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	029b      	lsls	r3, r3, #10
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fca:	827b      	strh	r3, [r7, #18]
 8004fcc:	8a7b      	ldrh	r3, [r7, #18]
 8004fce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004fd2:	827b      	strh	r3, [r7, #18]
 8004fd4:	8a7b      	ldrh	r3, [r7, #18]
 8004fd6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004fda:	827b      	strh	r3, [r7, #18]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	8a7b      	ldrh	r3, [r7, #18]
 8004fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	8013      	strh	r3, [r2, #0]
 8004ff6:	e22c      	b.n	8005452 <PCD_EP_ISR_Handler+0x76c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800500c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005010:	2b00      	cmp	r3, #0
 8005012:	f280 80f6 	bge.w	8005202 <PCD_EP_ISR_Handler+0x51c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29a      	uxth	r2, r3
 8005028:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800502c:	4013      	ands	r3, r2
 800502e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005044:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005048:	b292      	uxth	r2, r2
 800504a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800504c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	4413      	add	r3, r2
 8005060:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005064:	7b1b      	ldrb	r3, [r3, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d123      	bne.n	80050b2 <PCD_EP_ISR_Handler+0x3cc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005072:	b29b      	uxth	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	4413      	add	r3, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	4413      	add	r3, r2
 8005084:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800508e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005092:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 808e 	beq.w	80051b8 <PCD_EP_ISR_Handler+0x4d2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a2:	6959      	ldr	r1, [r3, #20]
 80050a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a6:	88da      	ldrh	r2, [r3, #6]
 80050a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80050ac:	f007 fdfb 	bl	800cca6 <USB_ReadPMA>
 80050b0:	e082      	b.n	80051b8 <PCD_EP_ISR_Handler+0x4d2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80050b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b4:	78db      	ldrb	r3, [r3, #3]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d10a      	bne.n	80050d0 <PCD_EP_ISR_Handler+0x3ea>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80050ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80050be:	461a      	mov	r2, r3
 80050c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f9d3 	bl	800546e <HAL_PCD_EP_DB_Receive>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80050ce:	e073      	b.n	80051b8 <PCD_EP_ISR_Handler+0x4d2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ea:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800510c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d022      	beq.n	8005174 <PCD_EP_ISR_Handler+0x48e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	4413      	add	r3, r2
 8005148:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005152:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005156:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800515a:	2b00      	cmp	r3, #0
 800515c:	d02c      	beq.n	80051b8 <PCD_EP_ISR_Handler+0x4d2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005164:	6959      	ldr	r1, [r3, #20]
 8005166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005168:	891a      	ldrh	r2, [r3, #8]
 800516a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800516e:	f007 fd9a 	bl	800cca6 <USB_ReadPMA>
 8005172:	e021      	b.n	80051b8 <PCD_EP_ISR_Handler+0x4d2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800517c:	b29b      	uxth	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	4413      	add	r3, r2
 800518e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005198:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800519c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <PCD_EP_ISR_Handler+0x4d2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051aa:	6959      	ldr	r1, [r3, #20]
 80051ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ae:	895a      	ldrh	r2, [r3, #10]
 80051b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80051b4:	f007 fd77 	bl	800cca6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80051b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80051c0:	441a      	add	r2, r3
 80051c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80051c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80051ce:	441a      	add	r2, r3
 80051d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80051d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <PCD_EP_ISR_Handler+0x502>
 80051dc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80051e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d206      	bcs.n	80051f6 <PCD_EP_ISR_Handler+0x510>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f00d fc8c 	bl	8012b0c <HAL_PCD_DataOutStageCallback>
 80051f4:	e005      	b.n	8005202 <PCD_EP_ISR_Handler+0x51c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051fc:	4618      	mov	r0, r3
 80051fe:	f006 f804 	bl	800b20a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005202:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8121 	beq.w	8005452 <PCD_EP_ISR_Handler+0x76c>
      {
        ep = &hpcd->IN_ep[epindex];
 8005210:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800523a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	441a      	add	r2, r3
 8005250:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525c:	b29b      	uxth	r3, r3
 800525e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005262:	78db      	ldrb	r3, [r3, #3]
 8005264:	2b01      	cmp	r3, #1
 8005266:	f040 80a2 	bne.w	80053ae <PCD_EP_ISR_Handler+0x6c8>
        {
          ep->xfer_len = 0U;
 800526a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800526c:	2200      	movs	r2, #0
 800526e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005272:	7b1b      	ldrb	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8093 	beq.w	80053a0 <PCD_EP_ISR_Handler+0x6ba>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800527a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800527e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d046      	beq.n	8005314 <PCD_EP_ISR_Handler+0x62e>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d126      	bne.n	80052dc <PCD_EP_ISR_Handler+0x5f6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800529c:	b29b      	uxth	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	4413      	add	r3, r2
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	00da      	lsls	r2, r3, #3
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	4413      	add	r3, r2
 80052b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052b4:	623b      	str	r3, [r7, #32]
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	e061      	b.n	80053a0 <PCD_EP_ISR_Handler+0x6ba>
 80052dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d15d      	bne.n	80053a0 <PCD_EP_ISR_Handler+0x6ba>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f8:	4413      	add	r3, r2
 80052fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	00da      	lsls	r2, r3, #3
 8005302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005304:	4413      	add	r3, r2
 8005306:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800530a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	2200      	movs	r2, #0
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e045      	b.n	80053a0 <PCD_EP_ISR_Handler+0x6ba>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800531a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d126      	bne.n	8005370 <PCD_EP_ISR_Handler+0x68a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	637b      	str	r3, [r7, #52]	@ 0x34
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005336:	4413      	add	r3, r2
 8005338:	637b      	str	r3, [r7, #52]	@ 0x34
 800533a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	00da      	lsls	r2, r3, #3
 8005340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005342:	4413      	add	r3, r2
 8005344:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005348:	633b      	str	r3, [r7, #48]	@ 0x30
 800534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005354:	b29a      	uxth	r2, r3
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005368:	b29a      	uxth	r2, r3
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	e017      	b.n	80053a0 <PCD_EP_ISR_Handler+0x6ba>
 8005370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d113      	bne.n	80053a0 <PCD_EP_ISR_Handler+0x6ba>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005380:	b29b      	uxth	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005386:	4413      	add	r3, r2
 8005388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800538a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	00da      	lsls	r2, r3, #3
 8005390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005392:	4413      	add	r3, r2
 8005394:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005398:	63bb      	str	r3, [r7, #56]	@ 0x38
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	2200      	movs	r2, #0
 800539e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f00d fbcb 	bl	8012b42 <HAL_PCD_DataInStageCallback>
 80053ac:	e051      	b.n	8005452 <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80053ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80053b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d144      	bne.n	8005444 <PCD_EP_ISR_Handler+0x75e>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4413      	add	r3, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80053e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d907      	bls.n	80053fe <PCD_EP_ISR_Handler+0x718>
            {
              ep->xfer_len -= TxPctSize;
 80053ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053fa:	619a      	str	r2, [r3, #24]
 80053fc:	e002      	b.n	8005404 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              ep->xfer_len = 0U;
 80053fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005400:	2200      	movs	r2, #0
 8005402:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <PCD_EP_ISR_Handler+0x734>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800540c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f00d fb95 	bl	8012b42 <HAL_PCD_DataInStageCallback>
 8005418:	e01b      	b.n	8005452 <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800541a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005422:	441a      	add	r2, r3
 8005424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005426:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005430:	441a      	add	r2, r3
 8005432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005434:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800543c:	4618      	mov	r0, r3
 800543e:	f005 fee4 	bl	800b20a <USB_EPStartXfer>
 8005442:	e006      	b.n	8005452 <PCD_EP_ISR_Handler+0x76c>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005444:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005448:	461a      	mov	r2, r3
 800544a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f917 	bl	8005680 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800545a:	b29b      	uxth	r3, r3
 800545c:	b21b      	sxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	f6ff ac46 	blt.w	8004cf0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3758      	adds	r7, #88	@ 0x58
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b088      	sub	sp, #32
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	4613      	mov	r3, r2
 800547a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d07c      	beq.n	8005580 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800548e:	b29b      	uxth	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	4413      	add	r3, r2
 80054a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	8b7b      	ldrh	r3, [r7, #26]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d306      	bcc.n	80054c4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	8b7b      	ldrh	r3, [r7, #26]
 80054bc:	1ad2      	subs	r2, r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	619a      	str	r2, [r3, #24]
 80054c2:	e002      	b.n	80054ca <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2200      	movs	r2, #0
 80054c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d123      	bne.n	800551a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ec:	833b      	strh	r3, [r7, #24]
 80054ee:	8b3b      	ldrh	r3, [r7, #24]
 80054f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80054f4:	833b      	strh	r3, [r7, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	8b3b      	ldrh	r3, [r7, #24]
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01f      	beq.n	8005564 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553e:	82fb      	strh	r3, [r7, #22]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	441a      	add	r2, r3
 800554e:	8afb      	ldrh	r3, [r7, #22]
 8005550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800555c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005560:	b29b      	uxth	r3, r3
 8005562:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005564:	8b7b      	ldrh	r3, [r7, #26]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8085 	beq.w	8005676 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6959      	ldr	r1, [r3, #20]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	891a      	ldrh	r2, [r3, #8]
 8005578:	8b7b      	ldrh	r3, [r7, #26]
 800557a:	f007 fb94 	bl	800cca6 <USB_ReadPMA>
 800557e:	e07a      	b.n	8005676 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005588:	b29b      	uxth	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4413      	add	r3, r2
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	4413      	add	r3, r2
 800559a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	8b7b      	ldrh	r3, [r7, #26]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d306      	bcc.n	80055be <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	8b7b      	ldrh	r3, [r7, #26]
 80055b6:	1ad2      	subs	r2, r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	619a      	str	r2, [r3, #24]
 80055bc:	e002      	b.n	80055c4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2200      	movs	r2, #0
 80055c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d123      	bne.n	8005614 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e6:	83fb      	strh	r3, [r7, #30]
 80055e8:	8bfb      	ldrh	r3, [r7, #30]
 80055ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80055ee:	83fb      	strh	r3, [r7, #30]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	8bfb      	ldrh	r3, [r7, #30]
 8005600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800560c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005610:	b29b      	uxth	r3, r3
 8005612:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d11f      	bne.n	800565e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005638:	83bb      	strh	r3, [r7, #28]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	441a      	add	r2, r3
 8005648:	8bbb      	ldrh	r3, [r7, #28]
 800564a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800564e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005656:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800565a:	b29b      	uxth	r3, r3
 800565c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800565e:	8b7b      	ldrh	r3, [r7, #26]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	6959      	ldr	r1, [r3, #20]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	895a      	ldrh	r2, [r3, #10]
 8005670:	8b7b      	ldrh	r3, [r7, #26]
 8005672:	f007 fb18 	bl	800cca6 <USB_ReadPMA>
    }
  }

  return count;
 8005676:	8b7b      	ldrh	r3, [r7, #26]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b0a4      	sub	sp, #144	@ 0x90
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 81db 	beq.w	8005a50 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	4413      	add	r3, r2
 80056b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056be:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d907      	bls.n	80056de <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	619a      	str	r2, [r3, #24]
 80056dc:	e002      	b.n	80056e4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2200      	movs	r2, #0
 80056e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f040 80b9 	bne.w	8005860 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d126      	bne.n	8005744 <HAL_PCD_EP_DB_Transmit+0xc4>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005704:	b29b      	uxth	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570a:	4413      	add	r3, r2
 800570c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	00da      	lsls	r2, r3, #3
 8005714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005716:	4413      	add	r3, r2
 8005718:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800571c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005728:	b29a      	uxth	r2, r3
 800572a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573c:	b29a      	uxth	r2, r3
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e01a      	b.n	800577a <HAL_PCD_EP_DB_Transmit+0xfa>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d116      	bne.n	800577a <HAL_PCD_EP_DB_Transmit+0xfa>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	637b      	str	r3, [r7, #52]	@ 0x34
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800575a:	b29b      	uxth	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005760:	4413      	add	r3, r2
 8005762:	637b      	str	r3, [r7, #52]	@ 0x34
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	00da      	lsls	r2, r3, #3
 800576a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576c:	4413      	add	r3, r2
 800576e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005772:	633b      	str	r3, [r7, #48]	@ 0x30
 8005774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005776:	2200      	movs	r2, #0
 8005778:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d126      	bne.n	80057d6 <HAL_PCD_EP_DB_Transmit+0x156>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005796:	b29b      	uxth	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	00da      	lsls	r2, r3, #3
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057ae:	61bb      	str	r3, [r7, #24]
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	801a      	strh	r2, [r3, #0]
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	801a      	strh	r2, [r3, #0]
 80057d4:	e017      	b.n	8005806 <HAL_PCD_EP_DB_Transmit+0x186>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d113      	bne.n	8005806 <HAL_PCD_EP_DB_Transmit+0x186>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	4413      	add	r3, r2
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	00da      	lsls	r2, r3, #3
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	4413      	add	r3, r2
 80057fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057fe:	623b      	str	r3, [r7, #32]
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2200      	movs	r2, #0
 8005804:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	4619      	mov	r1, r3
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f00d f998 	bl	8012b42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 82fa 	beq.w	8005e12 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005838:	82fb      	strh	r3, [r7, #22]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	441a      	add	r2, r3
 8005848:	8afb      	ldrh	r3, [r7, #22]
 800584a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800584e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800585a:	b29b      	uxth	r3, r3
 800585c:	8013      	strh	r3, [r2, #0]
 800585e:	e2d8      	b.n	8005e12 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d021      	beq.n	80058ae <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005884:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	441a      	add	r2, r3
 8005896:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800589a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800589e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	f040 82ac 	bne.w	8005e12 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80058c2:	441a      	add	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80058d0:	441a      	add	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6a1a      	ldr	r2, [r3, #32]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d30b      	bcc.n	80058fa <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6a1a      	ldr	r2, [r3, #32]
 80058ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058f2:	1ad2      	subs	r2, r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	621a      	str	r2, [r3, #32]
 80058f8:	e017      	b.n	800592a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d108      	bne.n	8005914 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005902:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005912:	e00a      	b.n	800592a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2200      	movs	r2, #0
 8005928:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d165      	bne.n	80059fe <HAL_PCD_EP_DB_Transmit+0x37e>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005940:	b29b      	uxth	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005946:	4413      	add	r3, r2
 8005948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	00da      	lsls	r2, r3, #3
 8005950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005952:	4413      	add	r3, r2
 8005954:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005958:	63bb      	str	r3, [r7, #56]	@ 0x38
 800595a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005964:	b29a      	uxth	r2, r3
 8005966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005968:	801a      	strh	r2, [r3, #0]
 800596a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800596e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005970:	d91d      	bls.n	80059ae <HAL_PCD_EP_DB_Transmit+0x32e>
 8005972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800597a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <HAL_PCD_EP_DB_Transmit+0x30c>
 8005986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005988:	3b01      	subs	r3, #1
 800598a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29a      	uxth	r2, r3
 8005992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005994:	b29b      	uxth	r3, r3
 8005996:	029b      	lsls	r3, r3, #10
 8005998:	b29b      	uxth	r3, r3
 800599a:	4313      	orrs	r3, r2
 800599c:	b29b      	uxth	r3, r3
 800599e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	e044      	b.n	8005a38 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80059ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <HAL_PCD_EP_DB_Transmit+0x34c>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	e035      	b.n	8005a38 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80059cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059d0:	085b      	lsrs	r3, r3, #1
 80059d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_PCD_EP_DB_Transmit+0x366>
 80059e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059e2:	3301      	adds	r3, #1
 80059e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	029b      	lsls	r3, r3, #10
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	4313      	orrs	r3, r2
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e01c      	b.n	8005a38 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d118      	bne.n	8005a38 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a1a:	4413      	add	r3, r2
 8005a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	00da      	lsls	r2, r3, #3
 8005a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a26:	4413      	add	r3, r2
 8005a28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a36:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6959      	ldr	r1, [r3, #20]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	891a      	ldrh	r2, [r3, #8]
 8005a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f007 f8ea 	bl	800cc22 <USB_WritePMA>
 8005a4e:	e1e0      	b.n	8005e12 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a74:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	699a      	ldr	r2, [r3, #24]
 8005a7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d307      	bcc.n	8005a94 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005a8c:	1ad2      	subs	r2, r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	619a      	str	r2, [r3, #24]
 8005a92:	e002      	b.n	8005a9a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f040 80c0 	bne.w	8005c24 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d126      	bne.n	8005afa <HAL_PCD_EP_DB_Transmit+0x47a>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ac0:	4413      	add	r3, r2
 8005ac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	00da      	lsls	r2, r3, #3
 8005aca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005acc:	4413      	add	r3, r2
 8005ace:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ad2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ad4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005af6:	801a      	strh	r2, [r3, #0]
 8005af8:	e01a      	b.n	8005b30 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d116      	bne.n	8005b30 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b16:	4413      	add	r3, r2
 8005b18:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	00da      	lsls	r2, r3, #3
 8005b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b22:	4413      	add	r3, r2
 8005b24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d12b      	bne.n	8005b96 <HAL_PCD_EP_DB_Transmit+0x516>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b52:	4413      	add	r3, r2
 8005b54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	00da      	lsls	r2, r3, #3
 8005b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b5e:	4413      	add	r3, r2
 8005b60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e017      	b.n	8005bc6 <HAL_PCD_EP_DB_Transmit+0x546>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d113      	bne.n	8005bc6 <HAL_PCD_EP_DB_Transmit+0x546>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bac:	4413      	add	r3, r2
 8005bae:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	00da      	lsls	r2, r3, #3
 8005bb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f00c ffb8 	bl	8012b42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f040 811a 	bne.w	8005e12 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	441a      	add	r2, r3
 8005c0a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005c0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	8013      	strh	r3, [r2, #0]
 8005c22:	e0f6      	b.n	8005e12 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d121      	bne.n	8005c72 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c48:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	f040 80ca 	bne.w	8005e12 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c86:	441a      	add	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c94:	441a      	add	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6a1a      	ldr	r2, [r3, #32]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d30b      	bcc.n	8005cbe <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6a1a      	ldr	r2, [r3, #32]
 8005cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cb6:	1ad2      	subs	r2, r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	621a      	str	r2, [r3, #32]
 8005cbc:	e017      	b.n	8005cee <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d108      	bne.n	8005cd8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005cc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005cd6:	e00a      	b.n	8005cee <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d165      	bne.n	8005dc8 <HAL_PCD_EP_DB_Transmit+0x748>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d10:	4413      	add	r3, r2
 8005d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	00da      	lsls	r2, r3, #3
 8005d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d38:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d3a:	d91d      	bls.n	8005d78 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005d50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d52:	3b01      	subs	r3, #1
 8005d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	029b      	lsls	r3, r3, #10
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4313      	orrs	r3, r2
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e041      	b.n	8005dfc <HAL_PCD_EP_DB_Transmit+0x77c>
 8005d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <HAL_PCD_EP_DB_Transmit+0x716>
 8005d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	e032      	b.n	8005dfc <HAL_PCD_EP_DB_Transmit+0x77c>
 8005d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d9a:	085b      	lsrs	r3, r3, #1
 8005d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x730>
 8005daa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dac:	3301      	adds	r3, #1
 8005dae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005db0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	029b      	lsls	r3, r3, #10
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	e019      	b.n	8005dfc <HAL_PCD_EP_DB_Transmit+0x77c>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d115      	bne.n	8005dfc <HAL_PCD_EP_DB_Transmit+0x77c>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dde:	4413      	add	r3, r2
 8005de0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	00da      	lsls	r2, r3, #3
 8005de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dea:	4413      	add	r3, r2
 8005dec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005df0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dfa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	6959      	ldr	r1, [r3, #20]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	895a      	ldrh	r2, [r3, #10]
 8005e08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f006 ff08 	bl	800cc22 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e2c:	82bb      	strh	r3, [r7, #20]
 8005e2e:	8abb      	ldrh	r3, [r7, #20]
 8005e30:	f083 0310 	eor.w	r3, r3, #16
 8005e34:	82bb      	strh	r3, [r7, #20]
 8005e36:	8abb      	ldrh	r3, [r7, #20]
 8005e38:	f083 0320 	eor.w	r3, r3, #32
 8005e3c:	82bb      	strh	r3, [r7, #20]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	441a      	add	r2, r3
 8005e4c:	8abb      	ldrh	r3, [r7, #20]
 8005e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3790      	adds	r7, #144	@ 0x90
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	817b      	strh	r3, [r7, #10]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e7e:	897b      	ldrh	r3, [r7, #10]
 8005e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e8a:	897b      	ldrh	r3, [r7, #10]
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e009      	b.n	8005eb6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ea2:	897a      	ldrh	r2, [r7, #10]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005eb6:	893b      	ldrh	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d107      	bne.n	8005ecc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	80da      	strh	r2, [r3, #6]
 8005eca:	e00b      	b.n	8005ee4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	0c1b      	lsrs	r3, r3, #16
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
  hpcd->LPM_State = LPM_L0;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f043 0302 	orr.w	r3, r3, #2
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f4c:	4b05      	ldr	r3, [pc, #20]	@ (8005f64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a04      	ldr	r2, [pc, #16]	@ (8005f64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f56:	6013      	str	r3, [r2, #0]
}
 8005f58:	bf00      	nop
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40007000 	.word	0x40007000

08005f68 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10c      	bne.n	8005f94 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005f7a:	4b13      	ldr	r3, [pc, #76]	@ (8005fc8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f86:	d10e      	bne.n	8005fa6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005f88:	f000 f8a6 	bl	80060d8 <HAL_PWREx_DisableLowPowerRunMode>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8005f92:	e016      	b.n	8005fc2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8005f94:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fa0:	d001      	beq.n	8005fa6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005fa2:	f000 f889 	bl	80060b8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005fa6:	4b09      	ldr	r3, [pc, #36]	@ (8005fcc <HAL_PWR_EnterSLEEPMode+0x64>)
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	4a08      	ldr	r2, [pc, #32]	@ (8005fcc <HAL_PWR_EnterSLEEPMode+0x64>)
 8005fac:	f023 0304 	bic.w	r3, r3, #4
 8005fb0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005fb8:	bf30      	wfi
 8005fba:	e002      	b.n	8005fc2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005fbc:	bf40      	sev
    __WFE();
 8005fbe:	bf20      	wfe
    __WFE();
 8005fc0:	bf20      	wfe
  }

}
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40007000 	.word	0x40007000
 8005fcc:	e000ed00 	.word	0xe000ed00

08005fd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005fd4:	4b04      	ldr	r3, [pc, #16]	@ (8005fe8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40007000 	.word	0x40007000

08005fec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ffa:	d130      	bne.n	800605e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ffc:	4b23      	ldr	r3, [pc, #140]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006008:	d038      	beq.n	800607c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800600a:	4b20      	ldr	r3, [pc, #128]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006012:	4a1e      	ldr	r2, [pc, #120]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006014:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006018:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800601a:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2232      	movs	r2, #50	@ 0x32
 8006020:	fb02 f303 	mul.w	r3, r2, r3
 8006024:	4a1b      	ldr	r2, [pc, #108]	@ (8006094 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006026:	fba2 2303 	umull	r2, r3, r2, r3
 800602a:	0c9b      	lsrs	r3, r3, #18
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006030:	e002      	b.n	8006038 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3b01      	subs	r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006038:	4b14      	ldr	r3, [pc, #80]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006044:	d102      	bne.n	800604c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f2      	bne.n	8006032 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800604c:	4b0f      	ldr	r3, [pc, #60]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006058:	d110      	bne.n	800607c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e00f      	b.n	800607e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800605e:	4b0b      	ldr	r3, [pc, #44]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800606a:	d007      	beq.n	800607c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800606c:	4b07      	ldr	r3, [pc, #28]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006074:	4a05      	ldr	r2, [pc, #20]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006076:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800607a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40007000 	.word	0x40007000
 8006090:	20000004 	.word	0x20000004
 8006094:	431bde83 	.word	0x431bde83

08006098 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	4a04      	ldr	r2, [pc, #16]	@ (80060b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80060a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060a6:	6053      	str	r3, [r2, #4]
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40007000 	.word	0x40007000

080060b8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80060bc:	4b05      	ldr	r3, [pc, #20]	@ (80060d4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a04      	ldr	r2, [pc, #16]	@ (80060d4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80060c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060c6:	6013      	str	r3, [r2, #0]
}
 80060c8:	bf00      	nop
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40007000 	.word	0x40007000

080060d8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80060de:	4b17      	ldr	r3, [pc, #92]	@ (800613c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a16      	ldr	r2, [pc, #88]	@ (800613c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80060e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060e8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060ea:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2232      	movs	r2, #50	@ 0x32
 80060f0:	fb02 f303 	mul.w	r3, r2, r3
 80060f4:	4a13      	ldr	r2, [pc, #76]	@ (8006144 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80060f6:	fba2 2303 	umull	r2, r3, r2, r3
 80060fa:	0c9b      	lsrs	r3, r3, #18
 80060fc:	3301      	adds	r3, #1
 80060fe:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006100:	e002      	b.n	8006108 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3b01      	subs	r3, #1
 8006106:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006108:	4b0c      	ldr	r3, [pc, #48]	@ (800613c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006114:	d102      	bne.n	800611c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1f2      	bne.n	8006102 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800611c:	4b07      	ldr	r3, [pc, #28]	@ (800613c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006128:	d101      	bne.n	800612e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e000      	b.n	8006130 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	40007000 	.word	0x40007000
 8006140:	20000004 	.word	0x20000004
 8006144:	431bde83 	.word	0x431bde83

08006148 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f000 bc06 	b.w	8006968 <HAL_RCC_OscConfig+0x820>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800615c:	4b96      	ldr	r3, [pc, #600]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 030c 	and.w	r3, r3, #12
 8006164:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006166:	4b94      	ldr	r3, [pc, #592]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80e4 	beq.w	8006346 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d007      	beq.n	8006194 <HAL_RCC_OscConfig+0x4c>
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b0c      	cmp	r3, #12
 8006188:	f040 808b 	bne.w	80062a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b01      	cmp	r3, #1
 8006190:	f040 8087 	bne.w	80062a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006194:	4b88      	ldr	r3, [pc, #544]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_RCC_OscConfig+0x64>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e3dd      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1a      	ldr	r2, [r3, #32]
 80061b0:	4b81      	ldr	r3, [pc, #516]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <HAL_RCC_OscConfig+0x7e>
 80061bc:	4b7e      	ldr	r3, [pc, #504]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061c4:	e005      	b.n	80061d2 <HAL_RCC_OscConfig+0x8a>
 80061c6:	4b7c      	ldr	r3, [pc, #496]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80061c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061cc:	091b      	lsrs	r3, r3, #4
 80061ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d223      	bcs.n	800621e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fdbc 	bl	8006d58 <RCC_SetFlashLatencyFromMSIRange>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e3be      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061ea:	4b73      	ldr	r3, [pc, #460]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a72      	ldr	r2, [pc, #456]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80061f0:	f043 0308 	orr.w	r3, r3, #8
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	4b70      	ldr	r3, [pc, #448]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	496d      	ldr	r1, [pc, #436]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006204:	4313      	orrs	r3, r2
 8006206:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006208:	4b6b      	ldr	r3, [pc, #428]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	021b      	lsls	r3, r3, #8
 8006216:	4968      	ldr	r1, [pc, #416]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006218:	4313      	orrs	r3, r2
 800621a:	604b      	str	r3, [r1, #4]
 800621c:	e025      	b.n	800626a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800621e:	4b66      	ldr	r3, [pc, #408]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a65      	ldr	r2, [pc, #404]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006224:	f043 0308 	orr.w	r3, r3, #8
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	4b63      	ldr	r3, [pc, #396]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	4960      	ldr	r1, [pc, #384]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006238:	4313      	orrs	r3, r2
 800623a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800623c:	4b5e      	ldr	r3, [pc, #376]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	495b      	ldr	r1, [pc, #364]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 800624c:	4313      	orrs	r3, r2
 800624e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fd7c 	bl	8006d58 <RCC_SetFlashLatencyFromMSIRange>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e37e      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800626a:	f000 fc85 	bl	8006b78 <HAL_RCC_GetSysClockFreq>
 800626e:	4602      	mov	r2, r0
 8006270:	4b51      	ldr	r3, [pc, #324]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	4950      	ldr	r1, [pc, #320]	@ (80063bc <HAL_RCC_OscConfig+0x274>)
 800627c:	5ccb      	ldrb	r3, [r1, r3]
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	fa22 f303 	lsr.w	r3, r2, r3
 8006286:	4a4e      	ldr	r2, [pc, #312]	@ (80063c0 <HAL_RCC_OscConfig+0x278>)
 8006288:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800628a:	4b4e      	ldr	r3, [pc, #312]	@ (80063c4 <HAL_RCC_OscConfig+0x27c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f7fd f896 	bl	80033c0 <HAL_InitTick>
 8006294:	4603      	mov	r3, r0
 8006296:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d052      	beq.n	8006344 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	e362      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d032      	beq.n	8006310 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80062aa:	4b43      	ldr	r3, [pc, #268]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a42      	ldr	r2, [pc, #264]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062b6:	f7fd f8d3 	bl	8003460 <HAL_GetTick>
 80062ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062be:	f7fd f8cf 	bl	8003460 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e34b      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062d0:	4b39      	ldr	r3, [pc, #228]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0f0      	beq.n	80062be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062dc:	4b36      	ldr	r3, [pc, #216]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a35      	ldr	r2, [pc, #212]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80062e2:	f043 0308 	orr.w	r3, r3, #8
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	4b33      	ldr	r3, [pc, #204]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	4930      	ldr	r1, [pc, #192]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062fa:	4b2f      	ldr	r3, [pc, #188]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	492b      	ldr	r1, [pc, #172]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 800630a:	4313      	orrs	r3, r2
 800630c:	604b      	str	r3, [r1, #4]
 800630e:	e01a      	b.n	8006346 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006310:	4b29      	ldr	r3, [pc, #164]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a28      	ldr	r2, [pc, #160]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006316:	f023 0301 	bic.w	r3, r3, #1
 800631a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800631c:	f7fd f8a0 	bl	8003460 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006324:	f7fd f89c 	bl	8003460 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e318      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006336:	4b20      	ldr	r3, [pc, #128]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x1dc>
 8006342:	e000      	b.n	8006346 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006344:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d077      	beq.n	8006442 <HAL_RCC_OscConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	2b08      	cmp	r3, #8
 8006356:	d005      	beq.n	8006364 <HAL_RCC_OscConfig+0x21c>
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b0c      	cmp	r3, #12
 800635c:	d10e      	bne.n	800637c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b03      	cmp	r3, #3
 8006362:	d10b      	bne.n	800637c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006364:	4b14      	ldr	r3, [pc, #80]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d067      	beq.n	8006440 <HAL_RCC_OscConfig+0x2f8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d163      	bne.n	8006440 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e2f5      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006384:	d106      	bne.n	8006394 <HAL_RCC_OscConfig+0x24c>
 8006386:	4b0c      	ldr	r3, [pc, #48]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a0b      	ldr	r2, [pc, #44]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 800638c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	e025      	b.n	80063e0 <HAL_RCC_OscConfig+0x298>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800639c:	d114      	bne.n	80063c8 <HAL_RCC_OscConfig+0x280>
 800639e:	4b06      	ldr	r3, [pc, #24]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a05      	ldr	r2, [pc, #20]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80063a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	4b03      	ldr	r3, [pc, #12]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a02      	ldr	r2, [pc, #8]	@ (80063b8 <HAL_RCC_OscConfig+0x270>)
 80063b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	e013      	b.n	80063e0 <HAL_RCC_OscConfig+0x298>
 80063b8:	40021000 	.word	0x40021000
 80063bc:	0801b670 	.word	0x0801b670
 80063c0:	20000004 	.word	0x20000004
 80063c4:	20000008 	.word	0x20000008
 80063c8:	4ba2      	ldr	r3, [pc, #648]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4aa1      	ldr	r2, [pc, #644]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80063ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	4b9f      	ldr	r3, [pc, #636]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a9e      	ldr	r2, [pc, #632]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80063da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d015      	beq.n	8006414 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e8:	f7fd f83a 	bl	8003460 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063ee:	e00a      	b.n	8006406 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f0:	f7fd f836 	bl	8003460 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e2b0      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006406:	4b93      	ldr	r3, [pc, #588]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0ee      	beq.n	80063f0 <HAL_RCC_OscConfig+0x2a8>
 8006412:	e016      	b.n	8006442 <HAL_RCC_OscConfig+0x2fa>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fd f824 	bl	8003460 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800641a:	e00a      	b.n	8006432 <HAL_RCC_OscConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641c:	f7fd f820 	bl	8003460 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e29a      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006432:	4b88      	ldr	r3, [pc, #544]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1ee      	bne.n	800641c <HAL_RCC_OscConfig+0x2d4>
 800643e:	e000      	b.n	8006442 <HAL_RCC_OscConfig+0x2fa>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d060      	beq.n	8006510 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b04      	cmp	r3, #4
 8006452:	d005      	beq.n	8006460 <HAL_RCC_OscConfig+0x318>
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b0c      	cmp	r3, #12
 8006458:	d119      	bne.n	800648e <HAL_RCC_OscConfig+0x346>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d116      	bne.n	800648e <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006460:	4b7c      	ldr	r3, [pc, #496]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_OscConfig+0x330>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e277      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006478:	4b76      	ldr	r3, [pc, #472]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	061b      	lsls	r3, r3, #24
 8006486:	4973      	ldr	r1, [pc, #460]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006488:	4313      	orrs	r3, r2
 800648a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800648c:	e040      	b.n	8006510 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d023      	beq.n	80064de <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006496:	4b6f      	ldr	r3, [pc, #444]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a6e      	ldr	r2, [pc, #440]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 800649c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a2:	f7fc ffdd 	bl	8003460 <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064aa:	f7fc ffd9 	bl	8003460 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e255      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064bc:	4b65      	ldr	r3, [pc, #404]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0f0      	beq.n	80064aa <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c8:	4b62      	ldr	r3, [pc, #392]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	061b      	lsls	r3, r3, #24
 80064d6:	495f      	ldr	r1, [pc, #380]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	604b      	str	r3, [r1, #4]
 80064dc:	e018      	b.n	8006510 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064de:	4b5d      	ldr	r3, [pc, #372]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a5c      	ldr	r2, [pc, #368]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80064e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fc ffb9 	bl	8003460 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f2:	f7fc ffb5 	bl	8003460 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e231      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006504:	4b53      	ldr	r3, [pc, #332]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f0      	bne.n	80064f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d03c      	beq.n	8006596 <HAL_RCC_OscConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01c      	beq.n	800655e <HAL_RCC_OscConfig+0x416>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006524:	4b4b      	ldr	r3, [pc, #300]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800652a:	4a4a      	ldr	r2, [pc, #296]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006534:	f7fc ff94 	bl	8003460 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x406>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800653c:	f7fc ff90 	bl	8003460 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x406>
        {
          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e20c      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800654e:	4b41      	ldr	r3, [pc, #260]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0ef      	beq.n	800653c <HAL_RCC_OscConfig+0x3f4>
 800655c:	e01b      	b.n	8006596 <HAL_RCC_OscConfig+0x44e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800655e:	4b3d      	ldr	r3, [pc, #244]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006564:	4a3b      	ldr	r2, [pc, #236]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656e:	f7fc ff77 	bl	8003460 <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x440>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006576:	f7fc ff73 	bl	8003460 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e1ef      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006588:	4b32      	ldr	r3, [pc, #200]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 800658a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1ef      	bne.n	8006576 <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 80a6 	beq.w	80066f0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065a4:	2300      	movs	r3, #0
 80065a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80065a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80065aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10d      	bne.n	80065d0 <HAL_RCC_OscConfig+0x488>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b4:	4b27      	ldr	r3, [pc, #156]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80065b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b8:	4a26      	ldr	r2, [pc, #152]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80065ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065be:	6593      	str	r3, [r2, #88]	@ 0x58
 80065c0:	4b24      	ldr	r3, [pc, #144]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 80065c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065c8:	60bb      	str	r3, [r7, #8]
 80065ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065cc:	2301      	movs	r3, #1
 80065ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065d0:	4b21      	ldr	r3, [pc, #132]	@ (8006658 <HAL_RCC_OscConfig+0x510>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d118      	bne.n	800660e <HAL_RCC_OscConfig+0x4c6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006658 <HAL_RCC_OscConfig+0x510>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006658 <HAL_RCC_OscConfig+0x510>)
 80065e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065e8:	f7fc ff3a 	bl	8003460 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x4ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f0:	f7fc ff36 	bl	8003460 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e1b2      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006602:	4b15      	ldr	r3, [pc, #84]	@ (8006658 <HAL_RCC_OscConfig+0x510>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0f0      	beq.n	80065f0 <HAL_RCC_OscConfig+0x4a8>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d108      	bne.n	8006628 <HAL_RCC_OscConfig+0x4e0>
 8006616:	4b0f      	ldr	r3, [pc, #60]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661c:	4a0d      	ldr	r2, [pc, #52]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006626:	e029      	b.n	800667c <HAL_RCC_OscConfig+0x534>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	2b05      	cmp	r3, #5
 800662e:	d115      	bne.n	800665c <HAL_RCC_OscConfig+0x514>
 8006630:	4b08      	ldr	r3, [pc, #32]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006636:	4a07      	ldr	r2, [pc, #28]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006638:	f043 0304 	orr.w	r3, r3, #4
 800663c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006640:	4b04      	ldr	r3, [pc, #16]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006646:	4a03      	ldr	r2, [pc, #12]	@ (8006654 <HAL_RCC_OscConfig+0x50c>)
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006650:	e014      	b.n	800667c <HAL_RCC_OscConfig+0x534>
 8006652:	bf00      	nop
 8006654:	40021000 	.word	0x40021000
 8006658:	40007000 	.word	0x40007000
 800665c:	4b9a      	ldr	r3, [pc, #616]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 800665e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006662:	4a99      	ldr	r2, [pc, #612]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800666c:	4b96      	ldr	r3, [pc, #600]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006672:	4a95      	ldr	r2, [pc, #596]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006674:	f023 0304 	bic.w	r3, r3, #4
 8006678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d016      	beq.n	80066b2 <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006684:	f7fc feec 	bl	8003460 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800668a:	e00a      	b.n	80066a2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800668c:	f7fc fee8 	bl	8003460 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800669a:	4293      	cmp	r3, r2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e162      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066a2:	4b89      	ldr	r3, [pc, #548]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0ed      	beq.n	800668c <HAL_RCC_OscConfig+0x544>
 80066b0:	e015      	b.n	80066de <HAL_RCC_OscConfig+0x596>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b2:	f7fc fed5 	bl	8003460 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066b8:	e00a      	b.n	80066d0 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f7fc fed1 	bl	8003460 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e14b      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066d0:	4b7d      	ldr	r3, [pc, #500]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 80066d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1ed      	bne.n	80066ba <HAL_RCC_OscConfig+0x572>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066de:	7ffb      	ldrb	r3, [r7, #31]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d105      	bne.n	80066f0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e4:	4b78      	ldr	r3, [pc, #480]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e8:	4a77      	ldr	r2, [pc, #476]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 80066ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d03c      	beq.n	8006776 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01c      	beq.n	800673e <HAL_RCC_OscConfig+0x5f6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006704:	4b70      	ldr	r3, [pc, #448]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800670a:	4a6f      	ldr	r2, [pc, #444]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 800670c:	f043 0301 	orr.w	r3, r3, #1
 8006710:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006714:	f7fc fea4 	bl	8003460 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0x5e6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800671c:	f7fc fea0 	bl	8003460 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x5e6>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e11c      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800672e:	4b66      	ldr	r3, [pc, #408]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006730:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0ef      	beq.n	800671c <HAL_RCC_OscConfig+0x5d4>
 800673c:	e01b      	b.n	8006776 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800673e:	4b62      	ldr	r3, [pc, #392]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006740:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006744:	4a60      	ldr	r2, [pc, #384]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006746:	f023 0301 	bic.w	r3, r3, #1
 800674a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800674e:	f7fc fe87 	bl	8003460 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006754:	e008      	b.n	8006768 <HAL_RCC_OscConfig+0x620>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006756:	f7fc fe83 	bl	8003460 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x620>
        {
          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e0ff      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006768:	4b57      	ldr	r3, [pc, #348]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 800676a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1ef      	bne.n	8006756 <HAL_RCC_OscConfig+0x60e>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 80f3 	beq.w	8006966 <HAL_RCC_OscConfig+0x81e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006784:	2b02      	cmp	r3, #2
 8006786:	f040 80c9 	bne.w	800691c <HAL_RCC_OscConfig+0x7d4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800678a:	4b4f      	ldr	r3, [pc, #316]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f003 0203 	and.w	r2, r3, #3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	429a      	cmp	r2, r3
 800679c:	d12c      	bne.n	80067f8 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a8:	3b01      	subs	r3, #1
 80067aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d123      	bne.n	80067f8 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067bc:	429a      	cmp	r2, r3
 80067be:	d11b      	bne.n	80067f8 <HAL_RCC_OscConfig+0x6b0>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d113      	bne.n	80067f8 <HAL_RCC_OscConfig+0x6b0>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067da:	085b      	lsrs	r3, r3, #1
 80067dc:	3b01      	subs	r3, #1
 80067de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d109      	bne.n	80067f8 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	3b01      	subs	r3, #1
 80067f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d06b      	beq.n	80068d0 <HAL_RCC_OscConfig+0x788>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	d062      	beq.n	80068c4 <HAL_RCC_OscConfig+0x77c>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80067fe:	4b32      	ldr	r3, [pc, #200]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e0ac      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800680e:	4b2e      	ldr	r3, [pc, #184]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a2d      	ldr	r2, [pc, #180]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006814:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006818:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800681a:	f7fc fe21 	bl	8003460 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x6ec>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006822:	f7fc fe1d 	bl	8003460 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x6ec>
              {
                return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e099      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006834:	4b24      	ldr	r3, [pc, #144]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f0      	bne.n	8006822 <HAL_RCC_OscConfig+0x6da>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006840:	4b21      	ldr	r3, [pc, #132]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	4b21      	ldr	r3, [pc, #132]	@ (80068cc <HAL_RCC_OscConfig+0x784>)
 8006846:	4013      	ands	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006850:	3a01      	subs	r2, #1
 8006852:	0112      	lsls	r2, r2, #4
 8006854:	4311      	orrs	r1, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800685a:	0212      	lsls	r2, r2, #8
 800685c:	4311      	orrs	r1, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006862:	0852      	lsrs	r2, r2, #1
 8006864:	3a01      	subs	r2, #1
 8006866:	0552      	lsls	r2, r2, #21
 8006868:	4311      	orrs	r1, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800686e:	0852      	lsrs	r2, r2, #1
 8006870:	3a01      	subs	r2, #1
 8006872:	0652      	lsls	r2, r2, #25
 8006874:	4311      	orrs	r1, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800687a:	06d2      	lsls	r2, r2, #27
 800687c:	430a      	orrs	r2, r1
 800687e:	4912      	ldr	r1, [pc, #72]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006880:	4313      	orrs	r3, r2
 8006882:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006884:	4b10      	ldr	r3, [pc, #64]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a0f      	ldr	r2, [pc, #60]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 800688a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800688e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006890:	4b0d      	ldr	r3, [pc, #52]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	4a0c      	ldr	r2, [pc, #48]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 8006896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800689a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800689c:	f7fc fde0 	bl	8003460 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x76e>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a4:	f7fc fddc 	bl	8003460 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x76e>
              {
                return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e058      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068b6:	4b04      	ldr	r3, [pc, #16]	@ (80068c8 <HAL_RCC_OscConfig+0x780>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0x75c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068c2:	e050      	b.n	8006966 <HAL_RCC_OscConfig+0x81e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e04f      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
 80068c8:	40021000 	.word	0x40021000
 80068cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068d0:	4b27      	ldr	r3, [pc, #156]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d144      	bne.n	8006966 <HAL_RCC_OscConfig+0x81e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068dc:	4b24      	ldr	r3, [pc, #144]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a23      	ldr	r2, [pc, #140]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 80068e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068e8:	4b21      	ldr	r3, [pc, #132]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	4a20      	ldr	r2, [pc, #128]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 80068ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068f4:	f7fc fdb4 	bl	8003460 <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x7c6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068fc:	f7fc fdb0 	bl	8003460 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x7c6>
            {
              return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e02c      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800690e:	4b18      	ldr	r3, [pc, #96]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0f0      	beq.n	80068fc <HAL_RCC_OscConfig+0x7b4>
 800691a:	e024      	b.n	8006966 <HAL_RCC_OscConfig+0x81e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b0c      	cmp	r3, #12
 8006920:	d01f      	beq.n	8006962 <HAL_RCC_OscConfig+0x81a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006922:	4b13      	ldr	r3, [pc, #76]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a12      	ldr	r2, [pc, #72]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 8006928:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800692c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692e:	f7fc fd97 	bl	8003460 <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006934:	e008      	b.n	8006948 <HAL_RCC_OscConfig+0x800>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006936:	f7fc fd93 	bl	8003460 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_OscConfig+0x800>
          {
            return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e00f      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006948:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f0      	bne.n	8006936 <HAL_RCC_OscConfig+0x7ee>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006954:	4b06      	ldr	r3, [pc, #24]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	4905      	ldr	r1, [pc, #20]	@ (8006970 <HAL_RCC_OscConfig+0x828>)
 800695a:	4b06      	ldr	r3, [pc, #24]	@ (8006974 <HAL_RCC_OscConfig+0x82c>)
 800695c:	4013      	ands	r3, r2
 800695e:	60cb      	str	r3, [r1, #12]
 8006960:	e001      	b.n	8006966 <HAL_RCC_OscConfig+0x81e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <HAL_RCC_OscConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40021000 	.word	0x40021000
 8006974:	feeefffc 	.word	0xfeeefffc

08006978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0e7      	b.n	8006b5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800698c:	4b75      	ldr	r3, [pc, #468]	@ (8006b64 <HAL_RCC_ClockConfig+0x1ec>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d910      	bls.n	80069bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699a:	4b72      	ldr	r3, [pc, #456]	@ (8006b64 <HAL_RCC_ClockConfig+0x1ec>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f023 0207 	bic.w	r2, r3, #7
 80069a2:	4970      	ldr	r1, [pc, #448]	@ (8006b64 <HAL_RCC_ClockConfig+0x1ec>)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069aa:	4b6e      	ldr	r3, [pc, #440]	@ (8006b64 <HAL_RCC_ClockConfig+0x1ec>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d001      	beq.n	80069bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e0cf      	b.n	8006b5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d010      	beq.n	80069ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	4b66      	ldr	r3, [pc, #408]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d908      	bls.n	80069ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069d8:	4b63      	ldr	r3, [pc, #396]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	4960      	ldr	r1, [pc, #384]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04c      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d107      	bne.n	8006a0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069fe:	4b5a      	ldr	r3, [pc, #360]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d121      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e0a6      	b.n	8006b5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d107      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a16:	4b54      	ldr	r3, [pc, #336]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d115      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e09a      	b.n	8006b5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d107      	bne.n	8006a3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e08e      	b.n	8006b5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e086      	b.n	8006b5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a4e:	4b46      	ldr	r3, [pc, #280]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f023 0203 	bic.w	r2, r3, #3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4943      	ldr	r1, [pc, #268]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a60:	f7fc fcfe 	bl	8003460 <HAL_GetTick>
 8006a64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a66:	e00a      	b.n	8006a7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a68:	f7fc fcfa 	bl	8003460 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e06e      	b.n	8006b5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 020c 	and.w	r2, r3, #12
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d1eb      	bne.n	8006a68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d010      	beq.n	8006abe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	4b31      	ldr	r3, [pc, #196]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d208      	bcs.n	8006abe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aac:	4b2e      	ldr	r3, [pc, #184]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	492b      	ldr	r1, [pc, #172]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006abe:	4b29      	ldr	r3, [pc, #164]	@ (8006b64 <HAL_RCC_ClockConfig+0x1ec>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d210      	bcs.n	8006aee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006acc:	4b25      	ldr	r3, [pc, #148]	@ (8006b64 <HAL_RCC_ClockConfig+0x1ec>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f023 0207 	bic.w	r2, r3, #7
 8006ad4:	4923      	ldr	r1, [pc, #140]	@ (8006b64 <HAL_RCC_ClockConfig+0x1ec>)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006adc:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <HAL_RCC_ClockConfig+0x1ec>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d001      	beq.n	8006aee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e036      	b.n	8006b5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0304 	and.w	r3, r3, #4
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d008      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006afa:	4b1b      	ldr	r3, [pc, #108]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	4918      	ldr	r1, [pc, #96]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b18:	4b13      	ldr	r3, [pc, #76]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	4910      	ldr	r1, [pc, #64]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b2c:	f000 f824 	bl	8006b78 <HAL_RCC_GetSysClockFreq>
 8006b30:	4602      	mov	r2, r0
 8006b32:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <HAL_RCC_ClockConfig+0x1f0>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	091b      	lsrs	r3, r3, #4
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	490b      	ldr	r1, [pc, #44]	@ (8006b6c <HAL_RCC_ClockConfig+0x1f4>)
 8006b3e:	5ccb      	ldrb	r3, [r1, r3]
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	fa22 f303 	lsr.w	r3, r2, r3
 8006b48:	4a09      	ldr	r2, [pc, #36]	@ (8006b70 <HAL_RCC_ClockConfig+0x1f8>)
 8006b4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b4c:	4b09      	ldr	r3, [pc, #36]	@ (8006b74 <HAL_RCC_ClockConfig+0x1fc>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fc fc35 	bl	80033c0 <HAL_InitTick>
 8006b56:	4603      	mov	r3, r0
 8006b58:	72fb      	strb	r3, [r7, #11]

  return status;
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	40022000 	.word	0x40022000
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	0801b670 	.word	0x0801b670
 8006b70:	20000004 	.word	0x20000004
 8006b74:	20000008 	.word	0x20000008

08006b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b089      	sub	sp, #36	@ 0x24
 8006b7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61fb      	str	r3, [r7, #28]
 8006b82:	2300      	movs	r3, #0
 8006b84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b86:	4b3f      	ldr	r3, [pc, #252]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 030c 	and.w	r3, r3, #12
 8006b8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b90:	4b3c      	ldr	r3, [pc, #240]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0303 	and.w	r3, r3, #3
 8006b98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <HAL_RCC_GetSysClockFreq+0x34>
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2b0c      	cmp	r3, #12
 8006ba4:	d121      	bne.n	8006bea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d11e      	bne.n	8006bea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006bac:	4b35      	ldr	r3, [pc, #212]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d107      	bne.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006bb8:	4b32      	ldr	r3, [pc, #200]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	e005      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	091b      	lsrs	r3, r3, #4
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8006c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10e      	bne.n	8006c02 <HAL_RCC_GetSysClockFreq+0x8a>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006be8:	e00b      	b.n	8006c02 <HAL_RCC_GetSysClockFreq+0x8a>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d102      	bne.n	8006bf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bf0:	4b26      	ldr	r3, [pc, #152]	@ (8006c8c <HAL_RCC_GetSysClockFreq+0x114>)
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e005      	b.n	8006c02 <HAL_RCC_GetSysClockFreq+0x8a>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d102      	bne.n	8006c02 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006bfc:	f44f 037a 	mov.w	r3, #16384000	@ 0xfa0000
 8006c00:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2b0c      	cmp	r3, #12
 8006c06:	d135      	bne.n	8006c74 <HAL_RCC_GetSysClockFreq+0xfc>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c08:	4b1e      	ldr	r3, [pc, #120]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0303 	and.w	r3, r3, #3
 8006c10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d003      	beq.n	8006c20 <HAL_RCC_GetSysClockFreq+0xa8>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d003      	beq.n	8006c26 <HAL_RCC_GetSysClockFreq+0xae>
 8006c1e:	e006      	b.n	8006c2e <HAL_RCC_GetSysClockFreq+0xb6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006c20:	4b1a      	ldr	r3, [pc, #104]	@ (8006c8c <HAL_RCC_GetSysClockFreq+0x114>)
 8006c22:	617b      	str	r3, [r7, #20]
      break;
 8006c24:	e006      	b.n	8006c34 <HAL_RCC_GetSysClockFreq+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006c26:	f44f 037a 	mov.w	r3, #16384000	@ 0xfa0000
 8006c2a:	617b      	str	r3, [r7, #20]
      break;
 8006c2c:	e002      	b.n	8006c34 <HAL_RCC_GetSysClockFreq+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	617b      	str	r3, [r7, #20]
      break;
 8006c32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c34:	4b13      	ldr	r3, [pc, #76]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	3301      	adds	r3, #1
 8006c40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c42:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	0a1b      	lsrs	r3, r3, #8
 8006c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	fb03 f202 	mul.w	r2, r3, r2
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	0e5b      	lsrs	r3, r3, #25
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	3301      	adds	r3, #1
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006c74:	69bb      	ldr	r3, [r7, #24]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3724      	adds	r7, #36	@ 0x24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40021000 	.word	0x40021000
 8006c88:	0801b688 	.word	0x0801b688
 8006c8c:	00f42400 	.word	0x00f42400

08006c90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c94:	4b03      	ldr	r3, [pc, #12]	@ (8006ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c96:	681b      	ldr	r3, [r3, #0]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20000004 	.word	0x20000004

08006ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006cac:	f7ff fff0 	bl	8006c90 <HAL_RCC_GetHCLKFreq>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	4b06      	ldr	r3, [pc, #24]	@ (8006ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	4904      	ldr	r1, [pc, #16]	@ (8006cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cbe:	5ccb      	ldrb	r3, [r1, r3]
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	0801b680 	.word	0x0801b680

08006cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006cd8:	f7ff ffda 	bl	8006c90 <HAL_RCC_GetHCLKFreq>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	0adb      	lsrs	r3, r3, #11
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	4904      	ldr	r1, [pc, #16]	@ (8006cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cea:	5ccb      	ldrb	r3, [r1, r3]
 8006cec:	f003 031f 	and.w	r3, r3, #31
 8006cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	0801b680 	.word	0x0801b680

08006d00 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8006d04:	4b05      	ldr	r3, [pc, #20]	@ (8006d1c <HAL_RCC_EnableCSS+0x1c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a04      	ldr	r2, [pc, #16]	@ (8006d1c <HAL_RCC_EnableCSS+0x1c>)
 8006d0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d0e:	6013      	str	r3, [r2, #0]
}
 8006d10:	bf00      	nop
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40021000 	.word	0x40021000

08006d20 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006d24:	4b07      	ldr	r3, [pc, #28]	@ (8006d44 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d30:	d105      	bne.n	8006d3e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006d32:	f000 f809 	bl	8006d48 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006d36:	4b03      	ldr	r3, [pc, #12]	@ (8006d44 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d3c:	621a      	str	r2, [r3, #32]
  }
}
 8006d3e:	bf00      	nop
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	40021000 	.word	0x40021000

08006d48 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d60:	2300      	movs	r3, #0
 8006d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d64:	4b2a      	ldr	r3, [pc, #168]	@ (8006e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d70:	f7ff f92e 	bl	8005fd0 <HAL_PWREx_GetVoltageRange>
 8006d74:	6178      	str	r0, [r7, #20]
 8006d76:	e014      	b.n	8006da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d78:	4b25      	ldr	r3, [pc, #148]	@ (8006e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d7c:	4a24      	ldr	r2, [pc, #144]	@ (8006e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d84:	4b22      	ldr	r3, [pc, #136]	@ (8006e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d90:	f7ff f91e 	bl	8005fd0 <HAL_PWREx_GetVoltageRange>
 8006d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d96:	4b1e      	ldr	r3, [pc, #120]	@ (8006e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006da0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da8:	d10b      	bne.n	8006dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b80      	cmp	r3, #128	@ 0x80
 8006dae:	d919      	bls.n	8006de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2ba0      	cmp	r3, #160	@ 0xa0
 8006db4:	d902      	bls.n	8006dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006db6:	2302      	movs	r3, #2
 8006db8:	613b      	str	r3, [r7, #16]
 8006dba:	e013      	b.n	8006de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	e010      	b.n	8006de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b80      	cmp	r3, #128	@ 0x80
 8006dc6:	d902      	bls.n	8006dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006dc8:	2303      	movs	r3, #3
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	e00a      	b.n	8006de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b80      	cmp	r3, #128	@ 0x80
 8006dd2:	d102      	bne.n	8006dda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	e004      	b.n	8006de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b70      	cmp	r3, #112	@ 0x70
 8006dde:	d101      	bne.n	8006de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006de0:	2301      	movs	r3, #1
 8006de2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006de4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f023 0207 	bic.w	r2, r3, #7
 8006dec:	4909      	ldr	r1, [pc, #36]	@ (8006e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006df4:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d001      	beq.n	8006e06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	40021000 	.word	0x40021000
 8006e14:	40022000 	.word	0x40022000

08006e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e20:	2300      	movs	r3, #0
 8006e22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e24:	2300      	movs	r3, #0
 8006e26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d031      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e3c:	d01a      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006e3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e42:	d814      	bhi.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d009      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e4c:	d10f      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006e4e:	4b5d      	ldr	r3, [pc, #372]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	4a5c      	ldr	r2, [pc, #368]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e5a:	e00c      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	2100      	movs	r1, #0
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fa44 	bl	80072f0 <RCCEx_PLLSAI1_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e6c:	e003      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	74fb      	strb	r3, [r7, #19]
      break;
 8006e72:	e000      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e76:	7cfb      	ldrb	r3, [r7, #19]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e7c:	4b51      	ldr	r3, [pc, #324]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8a:	494e      	ldr	r1, [pc, #312]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006e92:	e001      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e94:	7cfb      	ldrb	r3, [r7, #19]
 8006e96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 809e 	beq.w	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006eaa:	4b46      	ldr	r3, [pc, #280]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00d      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ec0:	4b40      	ldr	r3, [pc, #256]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec4:	4a3f      	ldr	r2, [pc, #252]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006edc:	4b3a      	ldr	r3, [pc, #232]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a39      	ldr	r2, [pc, #228]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ee6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ee8:	f7fc faba 	bl	8003460 <HAL_GetTick>
 8006eec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006eee:	e009      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef0:	f7fc fab6 	bl	8003460 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d902      	bls.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	74fb      	strb	r3, [r7, #19]
        break;
 8006f02:	e005      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f04:	4b30      	ldr	r3, [pc, #192]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0ef      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006f10:	7cfb      	ldrb	r3, [r7, #19]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d15a      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f16:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01e      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d019      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f32:	4b24      	ldr	r3, [pc, #144]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f3e:	4b21      	ldr	r3, [pc, #132]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f44:	4a1f      	ldr	r2, [pc, #124]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f54:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f5e:	4a19      	ldr	r2, [pc, #100]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d016      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f70:	f7fc fa76 	bl	8003460 <HAL_GetTick>
 8006f74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f76:	e00b      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f78:	f7fc fa72 	bl	8003460 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d902      	bls.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	74fb      	strb	r3, [r7, #19]
            break;
 8006f8e:	e006      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f90:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0ec      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006f9e:	7cfb      	ldrb	r3, [r7, #19]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10b      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fa4:	4b07      	ldr	r3, [pc, #28]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006faa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fb2:	4904      	ldr	r1, [pc, #16]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006fba:	e009      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fbc:	7cfb      	ldrb	r3, [r7, #19]
 8006fbe:	74bb      	strb	r3, [r7, #18]
 8006fc0:	e006      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006fc2:	bf00      	nop
 8006fc4:	40021000 	.word	0x40021000
 8006fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fcc:	7cfb      	ldrb	r3, [r7, #19]
 8006fce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fd0:	7c7b      	ldrb	r3, [r7, #17]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d105      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fd6:	4b9e      	ldr	r3, [pc, #632]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fda:	4a9d      	ldr	r2, [pc, #628]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fe0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fee:	4b98      	ldr	r3, [pc, #608]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff4:	f023 0203 	bic.w	r2, r3, #3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	4994      	ldr	r1, [pc, #592]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007010:	4b8f      	ldr	r3, [pc, #572]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007016:	f023 020c 	bic.w	r2, r3, #12
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701e:	498c      	ldr	r1, [pc, #560]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007020:	4313      	orrs	r3, r2
 8007022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007032:	4b87      	ldr	r3, [pc, #540]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007038:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007040:	4983      	ldr	r1, [pc, #524]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007042:	4313      	orrs	r3, r2
 8007044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0308 	and.w	r3, r3, #8
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007054:	4b7e      	ldr	r3, [pc, #504]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	497b      	ldr	r1, [pc, #492]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007076:	4b76      	ldr	r3, [pc, #472]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007084:	4972      	ldr	r1, [pc, #456]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00a      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007098:	4b6d      	ldr	r3, [pc, #436]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800709a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800709e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a6:	496a      	ldr	r1, [pc, #424]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070ba:	4b65      	ldr	r3, [pc, #404]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c8:	4961      	ldr	r1, [pc, #388]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ea:	4959      	ldr	r1, [pc, #356]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070fe:	4b54      	ldr	r3, [pc, #336]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007104:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710c:	4950      	ldr	r1, [pc, #320]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007120:	4b4b      	ldr	r3, [pc, #300]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007126:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712e:	4948      	ldr	r1, [pc, #288]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007142:	4b43      	ldr	r3, [pc, #268]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007144:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007148:	f023 0203 	bic.w	r2, r3, #3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007150:	493f      	ldr	r1, [pc, #252]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d028      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007164:	4b3a      	ldr	r3, [pc, #232]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007172:	4937      	ldr	r1, [pc, #220]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800717e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007182:	d106      	bne.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007184:	4b32      	ldr	r3, [pc, #200]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	4a31      	ldr	r2, [pc, #196]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800718a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800718e:	60d3      	str	r3, [r2, #12]
 8007190:	e011      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007196:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800719a:	d10c      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	2101      	movs	r1, #1
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 f8a4 	bl	80072f0 <RCCEx_PLLSAI1_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80071ac:	7cfb      	ldrb	r3, [r7, #19]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80071b2:	7cfb      	ldrb	r3, [r7, #19]
 80071b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d028      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071c2:	4b23      	ldr	r3, [pc, #140]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d0:	491f      	ldr	r1, [pc, #124]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071e0:	d106      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80071e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071ec:	60d3      	str	r3, [r2, #12]
 80071ee:	e011      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071f8:	d10c      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3304      	adds	r3, #4
 80071fe:	2101      	movs	r1, #1
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f875 	bl	80072f0 <RCCEx_PLLSAI1_Config>
 8007206:	4603      	mov	r3, r0
 8007208:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800720a:	7cfb      	ldrb	r3, [r7, #19]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8007210:	7cfb      	ldrb	r3, [r7, #19]
 8007212:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d02b      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007220:	4b0b      	ldr	r3, [pc, #44]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007226:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722e:	4908      	ldr	r1, [pc, #32]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800723a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800723e:	d109      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007240:	4b03      	ldr	r3, [pc, #12]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	4a02      	ldr	r2, [pc, #8]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800724a:	60d3      	str	r3, [r2, #12]
 800724c:	e014      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800724e:	bf00      	nop
 8007250:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007258:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800725c:	d10c      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	3304      	adds	r3, #4
 8007262:	2101      	movs	r1, #1
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f843 	bl	80072f0 <RCCEx_PLLSAI1_Config>
 800726a:	4603      	mov	r3, r0
 800726c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800726e:	7cfb      	ldrb	r3, [r7, #19]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8007274:	7cfb      	ldrb	r3, [r7, #19]
 8007276:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d01c      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007284:	4b19      	ldr	r3, [pc, #100]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800728a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007292:	4916      	ldr	r1, [pc, #88]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800729e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072a2:	d10c      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	2102      	movs	r1, #2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 f820 	bl	80072f0 <RCCEx_PLLSAI1_Config>
 80072b0:	4603      	mov	r3, r0
 80072b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072b4:	7cfb      	ldrb	r3, [r7, #19]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80072ba:	7cfb      	ldrb	r3, [r7, #19]
 80072bc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072ca:	4b08      	ldr	r3, [pc, #32]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80072cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d8:	4904      	ldr	r1, [pc, #16]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80072e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40021000 	.word	0x40021000

080072f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80072fe:	4b74      	ldr	r3, [pc, #464]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d018      	beq.n	800733c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800730a:	4b71      	ldr	r3, [pc, #452]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f003 0203 	and.w	r2, r3, #3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d10d      	bne.n	8007336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
       ||
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007322:	4b6b      	ldr	r3, [pc, #428]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	091b      	lsrs	r3, r3, #4
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
       ||
 8007332:	429a      	cmp	r2, r3
 8007334:	d047      	beq.n	80073c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	73fb      	strb	r3, [r7, #15]
 800733a:	e044      	b.n	80073c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b03      	cmp	r3, #3
 8007342:	d018      	beq.n	8007376 <RCCEx_PLLSAI1_Config+0x86>
 8007344:	2b03      	cmp	r3, #3
 8007346:	d825      	bhi.n	8007394 <RCCEx_PLLSAI1_Config+0xa4>
 8007348:	2b01      	cmp	r3, #1
 800734a:	d002      	beq.n	8007352 <RCCEx_PLLSAI1_Config+0x62>
 800734c:	2b02      	cmp	r3, #2
 800734e:	d009      	beq.n	8007364 <RCCEx_PLLSAI1_Config+0x74>
 8007350:	e020      	b.n	8007394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007352:	4b5f      	ldr	r3, [pc, #380]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d11d      	bne.n	800739a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007362:	e01a      	b.n	800739a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007364:	4b5a      	ldr	r3, [pc, #360]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800736c:	2b00      	cmp	r3, #0
 800736e:	d116      	bne.n	800739e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007374:	e013      	b.n	800739e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007376:	4b56      	ldr	r3, [pc, #344]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10f      	bne.n	80073a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007382:	4b53      	ldr	r3, [pc, #332]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d109      	bne.n	80073a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007392:	e006      	b.n	80073a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
      break;
 8007398:	e004      	b.n	80073a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800739a:	bf00      	nop
 800739c:	e002      	b.n	80073a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800739e:	bf00      	nop
 80073a0:	e000      	b.n	80073a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10d      	bne.n	80073c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80073aa:	4b49      	ldr	r3, [pc, #292]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6819      	ldr	r1, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	430b      	orrs	r3, r1
 80073c0:	4943      	ldr	r1, [pc, #268]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d17c      	bne.n	80074c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80073cc:	4b40      	ldr	r3, [pc, #256]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a3f      	ldr	r2, [pc, #252]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073d8:	f7fc f842 	bl	8003460 <HAL_GetTick>
 80073dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073de:	e009      	b.n	80073f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073e0:	f7fc f83e 	bl	8003460 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d902      	bls.n	80073f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	73fb      	strb	r3, [r7, #15]
        break;
 80073f2:	e005      	b.n	8007400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073f4:	4b36      	ldr	r3, [pc, #216]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1ef      	bne.n	80073e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d15f      	bne.n	80074c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d110      	bne.n	800742e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800740c:	4b30      	ldr	r3, [pc, #192]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007414:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6892      	ldr	r2, [r2, #8]
 800741c:	0211      	lsls	r1, r2, #8
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	68d2      	ldr	r2, [r2, #12]
 8007422:	06d2      	lsls	r2, r2, #27
 8007424:	430a      	orrs	r2, r1
 8007426:	492a      	ldr	r1, [pc, #168]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007428:	4313      	orrs	r3, r2
 800742a:	610b      	str	r3, [r1, #16]
 800742c:	e027      	b.n	800747e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d112      	bne.n	800745a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007434:	4b26      	ldr	r3, [pc, #152]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800743c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6892      	ldr	r2, [r2, #8]
 8007444:	0211      	lsls	r1, r2, #8
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6912      	ldr	r2, [r2, #16]
 800744a:	0852      	lsrs	r2, r2, #1
 800744c:	3a01      	subs	r2, #1
 800744e:	0552      	lsls	r2, r2, #21
 8007450:	430a      	orrs	r2, r1
 8007452:	491f      	ldr	r1, [pc, #124]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007454:	4313      	orrs	r3, r2
 8007456:	610b      	str	r3, [r1, #16]
 8007458:	e011      	b.n	800747e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800745a:	4b1d      	ldr	r3, [pc, #116]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007462:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6892      	ldr	r2, [r2, #8]
 800746a:	0211      	lsls	r1, r2, #8
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6952      	ldr	r2, [r2, #20]
 8007470:	0852      	lsrs	r2, r2, #1
 8007472:	3a01      	subs	r2, #1
 8007474:	0652      	lsls	r2, r2, #25
 8007476:	430a      	orrs	r2, r1
 8007478:	4915      	ldr	r1, [pc, #84]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800747a:	4313      	orrs	r3, r2
 800747c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800747e:	4b14      	ldr	r3, [pc, #80]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a13      	ldr	r2, [pc, #76]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007484:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007488:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748a:	f7fb ffe9 	bl	8003460 <HAL_GetTick>
 800748e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007490:	e009      	b.n	80074a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007492:	f7fb ffe5 	bl	8003460 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d902      	bls.n	80074a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	73fb      	strb	r3, [r7, #15]
          break;
 80074a4:	e005      	b.n	80074b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074a6:	4b0a      	ldr	r3, [pc, #40]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0ef      	beq.n	8007492 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d106      	bne.n	80074c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80074b8:	4b05      	ldr	r3, [pc, #20]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	4903      	ldr	r1, [pc, #12]	@ (80074d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40021000 	.word	0x40021000

080074d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d079      	beq.n	80075da <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fb fb82 	bl	8002c04 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	2b10      	cmp	r3, #16
 8007514:	d058      	beq.n	80075c8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	22ca      	movs	r2, #202	@ 0xca
 800751c:	625a      	str	r2, [r3, #36]	@ 0x24
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2253      	movs	r2, #83	@ 0x53
 8007524:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9ea 	bl	8007900 <RTC_EnterInitMode>
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d127      	bne.n	8007586 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007548:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6899      	ldr	r1, [r3, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	431a      	orrs	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	68d2      	ldr	r2, [r2, #12]
 8007570:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6919      	ldr	r1, [r3, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	041a      	lsls	r2, r3, #16
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f9ee 	bl	8007968 <RTC_ExitInitMode>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d113      	bne.n	80075be <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0203 	bic.w	r2, r2, #3
 80075a4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	69da      	ldr	r2, [r3, #28]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	22ff      	movs	r2, #255	@ 0xff
 80075c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80075c6:	e001      	b.n	80075cc <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d101      	bne.n	80075fe <HAL_RTC_SetTime+0x1a>
 80075fa:	2302      	movs	r3, #2
 80075fc:	e08b      	b.n	8007716 <HAL_RTC_SetTime+0x132>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2202      	movs	r2, #2
 800760a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	22ca      	movs	r2, #202	@ 0xca
 8007614:	625a      	str	r2, [r3, #36]	@ 0x24
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2253      	movs	r2, #83	@ 0x53
 800761c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 f96e 	bl	8007900 <RTC_EnterInitMode>
 8007624:	4603      	mov	r3, r0
 8007626:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007628:	7cfb      	ldrb	r3, [r7, #19]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d163      	bne.n	80076f6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d126      	bne.n	8007682 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2200      	movs	r2, #0
 8007646:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f9c9 	bl	80079e4 <RTC_ByteToBcd2>
 8007652:	4603      	mov	r3, r0
 8007654:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f9c2 	bl	80079e4 <RTC_ByteToBcd2>
 8007660:	4603      	mov	r3, r0
 8007662:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007664:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	789b      	ldrb	r3, [r3, #2]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f9ba 	bl	80079e4 <RTC_ByteToBcd2>
 8007670:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007672:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	78db      	ldrb	r3, [r3, #3]
 800767a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800767c:	4313      	orrs	r3, r2
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	e018      	b.n	80076b4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	785b      	ldrb	r3, [r3, #1]
 80076a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80076a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	78db      	ldrb	r3, [r3, #3]
 80076ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80076be:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80076c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80076d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6899      	ldr	r1, [r3, #8]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f93b 	bl	8007968 <RTC_ExitInitMode>
 80076f2:	4603      	mov	r3, r0
 80076f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	22ff      	movs	r2, #255	@ 0xff
 80076fc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80076fe:	7cfb      	ldrb	r3, [r7, #19]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d103      	bne.n	800770c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007714:	7cfb      	ldrb	r3, [r7, #19]
}
 8007716:	4618      	mov	r0, r3
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	bd90      	pop	{r4, r7, pc}

0800771e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800771e:	b590      	push	{r4, r7, lr}
 8007720:	b087      	sub	sp, #28
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_RTC_SetDate+0x1a>
 8007734:	2302      	movs	r3, #2
 8007736:	e075      	b.n	8007824 <HAL_RTC_SetDate+0x106>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10e      	bne.n	800776c <HAL_RTC_SetDate+0x4e>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b00      	cmp	r3, #0
 8007758:	d008      	beq.n	800776c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	f023 0310 	bic.w	r3, r3, #16
 8007762:	b2db      	uxtb	r3, r3
 8007764:	330a      	adds	r3, #10
 8007766:	b2da      	uxtb	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d11c      	bne.n	80077ac <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	78db      	ldrb	r3, [r3, #3]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f934 	bl	80079e4 <RTC_ByteToBcd2>
 800777c:	4603      	mov	r3, r0
 800777e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	785b      	ldrb	r3, [r3, #1]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 f92d 	bl	80079e4 <RTC_ByteToBcd2>
 800778a:	4603      	mov	r3, r0
 800778c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800778e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	789b      	ldrb	r3, [r3, #2]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 f925 	bl	80079e4 <RTC_ByteToBcd2>
 800779a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800779c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	e00e      	b.n	80077ca <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	78db      	ldrb	r3, [r3, #3]
 80077b0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80077b8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80077be:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	22ca      	movs	r2, #202	@ 0xca
 80077d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2253      	movs	r2, #83	@ 0x53
 80077d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 f890 	bl	8007900 <RTC_EnterInitMode>
 80077e0:	4603      	mov	r3, r0
 80077e2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80077e4:	7cfb      	ldrb	r3, [r7, #19]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10c      	bne.n	8007804 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80077f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80077f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f8b4 	bl	8007968 <RTC_ExitInitMode>
 8007800:	4603      	mov	r3, r0
 8007802:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	22ff      	movs	r2, #255	@ 0xff
 800780a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800780c:	7cfb      	ldrb	r3, [r7, #19]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d103      	bne.n	800781a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007822:	7cfb      	ldrb	r3, [r7, #19]
}
 8007824:	4618      	mov	r0, r3
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	bd90      	pop	{r4, r7, pc}

0800782c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007834:	4b1f      	ldr	r3, [pc, #124]	@ (80078b4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007836:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800783a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d012      	beq.n	8007870 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	b2da      	uxtb	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007868:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fa f8e4 	bl	8001a38 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d012      	beq.n	80078a4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00b      	beq.n	80078a4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800789c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f944 	bl	8007b2c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	40010400 	.word	0x40010400

080078b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a0d      	ldr	r2, [pc, #52]	@ (80078fc <HAL_RTC_WaitForSynchro+0x44>)
 80078c6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80078c8:	f7fb fdca 	bl	8003460 <HAL_GetTick>
 80078cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078ce:	e009      	b.n	80078e4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078d0:	f7fb fdc6 	bl	8003460 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078de:	d901      	bls.n	80078e4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e007      	b.n	80078f4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0ee      	beq.n	80078d0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	0003ff5f 	.word	0x0003ff5f

08007900 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d120      	bne.n	800795c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007922:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007924:	f7fb fd9c 	bl	8003460 <HAL_GetTick>
 8007928:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800792a:	e00d      	b.n	8007948 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800792c:	f7fb fd98 	bl	8003460 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800793a:	d905      	bls.n	8007948 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2203      	movs	r2, #3
 8007944:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d102      	bne.n	800795c <RTC_EnterInitMode+0x5c>
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	2b03      	cmp	r3, #3
 800795a:	d1e7      	bne.n	800792c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007974:	4b1a      	ldr	r3, [pc, #104]	@ (80079e0 <RTC_ExitInitMode+0x78>)
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	4a19      	ldr	r2, [pc, #100]	@ (80079e0 <RTC_ExitInitMode+0x78>)
 800797a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800797e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007980:	4b17      	ldr	r3, [pc, #92]	@ (80079e0 <RTC_ExitInitMode+0x78>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10c      	bne.n	80079a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff ff93 	bl	80078b8 <HAL_RTC_WaitForSynchro>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01e      	beq.n	80079d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2203      	movs	r2, #3
 800799c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	73fb      	strb	r3, [r7, #15]
 80079a4:	e017      	b.n	80079d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80079a6:	4b0e      	ldr	r3, [pc, #56]	@ (80079e0 <RTC_ExitInitMode+0x78>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	4a0d      	ldr	r2, [pc, #52]	@ (80079e0 <RTC_ExitInitMode+0x78>)
 80079ac:	f023 0320 	bic.w	r3, r3, #32
 80079b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff ff80 	bl	80078b8 <HAL_RTC_WaitForSynchro>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2203      	movs	r2, #3
 80079c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80079ca:	4b05      	ldr	r3, [pc, #20]	@ (80079e0 <RTC_ExitInitMode+0x78>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	4a04      	ldr	r2, [pc, #16]	@ (80079e0 <RTC_ExitInitMode+0x78>)
 80079d0:	f043 0320 	orr.w	r3, r3, #32
 80079d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40002800 	.word	0x40002800

080079e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80079f6:	e005      	b.n	8007a04 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3301      	adds	r3, #1
 80079fc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80079fe:	7afb      	ldrb	r3, [r7, #11]
 8007a00:	3b0a      	subs	r3, #10
 8007a02:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	2b09      	cmp	r3, #9
 8007a08:	d8f6      	bhi.n	80079f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b2db      	uxtb	r3, r3
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8007a36:	2302      	movs	r3, #2
 8007a38:	e04d      	b.n	8007ad6 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	22ca      	movs	r2, #202	@ 0xca
 8007a50:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2253      	movs	r2, #83	@ 0x53
 8007a58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a68:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a78:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8007a7a:	f7fb fcf1 	bl	8003460 <HAL_GetTick>
 8007a7e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a80:	e015      	b.n	8007aae <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a82:	f7fb fced 	bl	8003460 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a90:	d90d      	bls.n	8007aae <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	22ff      	movs	r2, #255	@ 0xff
 8007a98:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e013      	b.n	8007ad6 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0e2      	beq.n	8007a82 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	22ff      	movs	r2, #255	@ 0xff
 8007ac2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8007b28 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8007aea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007aee:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00b      	beq.n	8007b16 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007b0e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7fa fa19 	bl	8001f48 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	40010400 	.word	0x40010400

08007b2c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e095      	b.n	8007c7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d108      	bne.n	8007b6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b62:	d009      	beq.n	8007b78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	61da      	str	r2, [r3, #28]
 8007b6a:	e005      	b.n	8007b78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7fb f86e 	bl	8002c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007bb8:	d902      	bls.n	8007bc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e002      	b.n	8007bc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007bc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007bce:	d007      	beq.n	8007be0 <HAL_SPI_Init+0xa0>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007bd8:	d002      	beq.n	8007be0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c22:	ea42 0103 	orr.w	r1, r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	0c1b      	lsrs	r3, r3, #16
 8007c3c:	f003 0204 	and.w	r2, r3, #4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007c5c:	ea42 0103 	orr.w	r1, r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b088      	sub	sp, #32
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	603b      	str	r3, [r7, #0]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_SPI_Transmit+0x22>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e15f      	b.n	8007f68 <HAL_SPI_Transmit+0x2e2>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cb0:	f7fb fbd6 	bl	8003460 <HAL_GetTick>
 8007cb4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d002      	beq.n	8007ccc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cca:	e148      	b.n	8007f5e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_SPI_Transmit+0x52>
 8007cd2:	88fb      	ldrh	r3, [r7, #6]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d102      	bne.n	8007cde <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cdc:	e13f      	b.n	8007f5e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	88fa      	ldrh	r2, [r7, #6]
 8007cf6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	88fa      	ldrh	r2, [r7, #6]
 8007cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d28:	d10f      	bne.n	8007d4a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d54:	2b40      	cmp	r3, #64	@ 0x40
 8007d56:	d007      	beq.n	8007d68 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d70:	d94f      	bls.n	8007e12 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_SPI_Transmit+0xfa>
 8007d7a:	8afb      	ldrh	r3, [r7, #22]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d142      	bne.n	8007e06 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d84:	881a      	ldrh	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	1c9a      	adds	r2, r3, #2
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007da4:	e02f      	b.n	8007e06 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d112      	bne.n	8007dda <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db8:	881a      	ldrh	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	1c9a      	adds	r2, r3, #2
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007dd8:	e015      	b.n	8007e06 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dda:	f7fb fb41 	bl	8003460 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d803      	bhi.n	8007df2 <HAL_SPI_Transmit+0x16c>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007df0:	d102      	bne.n	8007df8 <HAL_SPI_Transmit+0x172>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d106      	bne.n	8007e06 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007e04:	e0ab      	b.n	8007f5e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1ca      	bne.n	8007da6 <HAL_SPI_Transmit+0x120>
 8007e10:	e080      	b.n	8007f14 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <HAL_SPI_Transmit+0x19a>
 8007e1a:	8afb      	ldrh	r3, [r7, #22]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d174      	bne.n	8007f0a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d912      	bls.n	8007e50 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2e:	881a      	ldrh	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3a:	1c9a      	adds	r2, r3, #2
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b02      	subs	r3, #2
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e4e:	e05c      	b.n	8007f0a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	330c      	adds	r3, #12
 8007e5a:	7812      	ldrb	r2, [r2, #0]
 8007e5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007e76:	e048      	b.n	8007f0a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d12b      	bne.n	8007ede <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d912      	bls.n	8007eb6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e94:	881a      	ldrh	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea0:	1c9a      	adds	r2, r3, #2
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	3b02      	subs	r3, #2
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007eb4:	e029      	b.n	8007f0a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	330c      	adds	r3, #12
 8007ec0:	7812      	ldrb	r2, [r2, #0]
 8007ec2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007edc:	e015      	b.n	8007f0a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ede:	f7fb fabf 	bl	8003460 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d803      	bhi.n	8007ef6 <HAL_SPI_Transmit+0x270>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ef4:	d102      	bne.n	8007efc <HAL_SPI_Transmit+0x276>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d106      	bne.n	8007f0a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007f08:	e029      	b.n	8007f5e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1b1      	bne.n	8007e78 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f001 fb01 	bl	8009520 <SPI_EndRxTxTransaction>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f32:	2300      	movs	r3, #0
 8007f34:	613b      	str	r3, [r7, #16]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	613b      	str	r3, [r7, #16]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	613b      	str	r3, [r7, #16]
 8007f46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	77fb      	strb	r3, [r7, #31]
 8007f54:	e003      	b.n	8007f5e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007f66:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d002      	beq.n	8007f96 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007f90:	2302      	movs	r3, #2
 8007f92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f94:	e11a      	b.n	80081cc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f9e:	d112      	bne.n	8007fc6 <HAL_SPI_Receive+0x56>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10e      	bne.n	8007fc6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2204      	movs	r2, #4
 8007fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007fb0:	88fa      	ldrh	r2, [r7, #6]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f90e 	bl	80081de <HAL_SPI_TransmitReceive>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	e107      	b.n	80081d6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d101      	bne.n	8007fd4 <HAL_SPI_Receive+0x64>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e100      	b.n	80081d6 <HAL_SPI_Receive+0x266>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fdc:	f7fb fa40 	bl	8003460 <HAL_GetTick>
 8007fe0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_SPI_Receive+0x7e>
 8007fe8:	88fb      	ldrh	r3, [r7, #6]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ff2:	e0eb      	b.n	80081cc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	88fa      	ldrh	r2, [r7, #6]
 800800c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	88fa      	ldrh	r2, [r7, #6]
 8008014:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800803e:	d908      	bls.n	8008052 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800804e:	605a      	str	r2, [r3, #4]
 8008050:	e007      	b.n	8008062 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008060:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800806a:	d10f      	bne.n	800808c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800807a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800808a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008096:	2b40      	cmp	r3, #64	@ 0x40
 8008098:	d007      	beq.n	80080aa <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80080b2:	d86f      	bhi.n	8008194 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80080b4:	e034      	b.n	8008120 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d117      	bne.n	80080f4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f103 020c 	add.w	r2, r3, #12
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	b2d2      	uxtb	r2, r2
 80080d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80080f2:	e015      	b.n	8008120 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080f4:	f7fb f9b4 	bl	8003460 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d803      	bhi.n	800810c <HAL_SPI_Receive+0x19c>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800810a:	d102      	bne.n	8008112 <HAL_SPI_Receive+0x1a2>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800811e:	e055      	b.n	80081cc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008126:	b29b      	uxth	r3, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1c4      	bne.n	80080b6 <HAL_SPI_Receive+0x146>
 800812c:	e038      	b.n	80081a0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b01      	cmp	r3, #1
 800813a:	d115      	bne.n	8008168 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008146:	b292      	uxth	r2, r2
 8008148:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814e:	1c9a      	adds	r2, r3, #2
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008166:	e015      	b.n	8008194 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008168:	f7fb f97a 	bl	8003460 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d803      	bhi.n	8008180 <HAL_SPI_Receive+0x210>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800817e:	d102      	bne.n	8008186 <HAL_SPI_Receive+0x216>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d106      	bne.n	8008194 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008192:	e01b      	b.n	80081cc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1c6      	bne.n	800812e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f001 f963 	bl	8009470 <SPI_EndRxTransaction>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2220      	movs	r2, #32
 80081b4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	75fb      	strb	r3, [r7, #23]
 80081c2:	e003      	b.n	80081cc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b08a      	sub	sp, #40	@ 0x28
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081ec:	2301      	movs	r3, #1
 80081ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_SPI_TransmitReceive+0x26>
 8008200:	2302      	movs	r3, #2
 8008202:	e20a      	b.n	800861a <HAL_SPI_TransmitReceive+0x43c>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800820c:	f7fb f928 	bl	8003460 <HAL_GetTick>
 8008210:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008218:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008220:	887b      	ldrh	r3, [r7, #2]
 8008222:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008224:	887b      	ldrh	r3, [r7, #2]
 8008226:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008228:	7efb      	ldrb	r3, [r7, #27]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d00e      	beq.n	800824c <HAL_SPI_TransmitReceive+0x6e>
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008234:	d106      	bne.n	8008244 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d102      	bne.n	8008244 <HAL_SPI_TransmitReceive+0x66>
 800823e:	7efb      	ldrb	r3, [r7, #27]
 8008240:	2b04      	cmp	r3, #4
 8008242:	d003      	beq.n	800824c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008244:	2302      	movs	r3, #2
 8008246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800824a:	e1e0      	b.n	800860e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <HAL_SPI_TransmitReceive+0x80>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <HAL_SPI_TransmitReceive+0x80>
 8008258:	887b      	ldrh	r3, [r7, #2]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d103      	bne.n	8008266 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008264:	e1d3      	b.n	800860e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b04      	cmp	r3, #4
 8008270:	d003      	beq.n	800827a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2205      	movs	r2, #5
 8008276:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	887a      	ldrh	r2, [r7, #2]
 800828a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	887a      	ldrh	r2, [r7, #2]
 8008292:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	887a      	ldrh	r2, [r7, #2]
 80082a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	887a      	ldrh	r2, [r7, #2]
 80082a6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80082bc:	d802      	bhi.n	80082c4 <HAL_SPI_TransmitReceive+0xe6>
 80082be:	8a3b      	ldrh	r3, [r7, #16]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d908      	bls.n	80082d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80082d2:	605a      	str	r2, [r3, #4]
 80082d4:	e007      	b.n	80082e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80082e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f0:	2b40      	cmp	r3, #64	@ 0x40
 80082f2:	d007      	beq.n	8008304 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800830c:	f240 8081 	bls.w	8008412 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <HAL_SPI_TransmitReceive+0x140>
 8008318:	8a7b      	ldrh	r3, [r7, #18]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d16d      	bne.n	80083fa <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	881a      	ldrh	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	1c9a      	adds	r2, r3, #2
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008342:	e05a      	b.n	80083fa <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	2b02      	cmp	r3, #2
 8008350:	d11b      	bne.n	800838a <HAL_SPI_TransmitReceive+0x1ac>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008356:	b29b      	uxth	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	d016      	beq.n	800838a <HAL_SPI_TransmitReceive+0x1ac>
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	2b01      	cmp	r3, #1
 8008360:	d113      	bne.n	800838a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008366:	881a      	ldrh	r2, [r3, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008372:	1c9a      	adds	r2, r3, #2
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800837c:	b29b      	uxth	r3, r3
 800837e:	3b01      	subs	r3, #1
 8008380:	b29a      	uxth	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b01      	cmp	r3, #1
 8008396:	d11c      	bne.n	80083d2 <HAL_SPI_TransmitReceive+0x1f4>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800839e:	b29b      	uxth	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d016      	beq.n	80083d2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ae:	b292      	uxth	r2, r2
 80083b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b6:	1c9a      	adds	r2, r3, #2
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083ce:	2301      	movs	r3, #1
 80083d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083d2:	f7fb f845 	bl	8003460 <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083de:	429a      	cmp	r2, r3
 80083e0:	d80b      	bhi.n	80083fa <HAL_SPI_TransmitReceive+0x21c>
 80083e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083e8:	d007      	beq.n	80083fa <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80083f8:	e109      	b.n	800860e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083fe:	b29b      	uxth	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d19f      	bne.n	8008344 <HAL_SPI_TransmitReceive+0x166>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800840a:	b29b      	uxth	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d199      	bne.n	8008344 <HAL_SPI_TransmitReceive+0x166>
 8008410:	e0e3      	b.n	80085da <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_SPI_TransmitReceive+0x244>
 800841a:	8a7b      	ldrh	r3, [r7, #18]
 800841c:	2b01      	cmp	r3, #1
 800841e:	f040 80cf 	bne.w	80085c0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008426:	b29b      	uxth	r3, r3
 8008428:	2b01      	cmp	r3, #1
 800842a:	d912      	bls.n	8008452 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008430:	881a      	ldrh	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843c:	1c9a      	adds	r2, r3, #2
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008446:	b29b      	uxth	r3, r3
 8008448:	3b02      	subs	r3, #2
 800844a:	b29a      	uxth	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008450:	e0b6      	b.n	80085c0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800846e:	b29b      	uxth	r3, r3
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008478:	e0a2      	b.n	80085c0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b02      	cmp	r3, #2
 8008486:	d134      	bne.n	80084f2 <HAL_SPI_TransmitReceive+0x314>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d02f      	beq.n	80084f2 <HAL_SPI_TransmitReceive+0x314>
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	2b01      	cmp	r3, #1
 8008496:	d12c      	bne.n	80084f2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800849c:	b29b      	uxth	r3, r3
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d912      	bls.n	80084c8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a6:	881a      	ldrh	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b2:	1c9a      	adds	r2, r3, #2
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084bc:	b29b      	uxth	r3, r3
 80084be:	3b02      	subs	r3, #2
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084c6:	e012      	b.n	80084ee <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	330c      	adds	r3, #12
 80084d2:	7812      	ldrb	r2, [r2, #0]
 80084d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d148      	bne.n	8008592 <HAL_SPI_TransmitReceive+0x3b4>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d042      	beq.n	8008592 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b01      	cmp	r3, #1
 8008516:	d923      	bls.n	8008560 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008522:	b292      	uxth	r2, r2
 8008524:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852a:	1c9a      	adds	r2, r3, #2
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008536:	b29b      	uxth	r3, r3
 8008538:	3b02      	subs	r3, #2
 800853a:	b29a      	uxth	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008548:	b29b      	uxth	r3, r3
 800854a:	2b01      	cmp	r3, #1
 800854c:	d81f      	bhi.n	800858e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800855c:	605a      	str	r2, [r3, #4]
 800855e:	e016      	b.n	800858e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f103 020c 	add.w	r2, r3, #12
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800856c:	7812      	ldrb	r2, [r2, #0]
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008582:	b29b      	uxth	r3, r3
 8008584:	3b01      	subs	r3, #1
 8008586:	b29a      	uxth	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800858e:	2301      	movs	r3, #1
 8008590:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008592:	f7fa ff65 	bl	8003460 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859e:	429a      	cmp	r2, r3
 80085a0:	d803      	bhi.n	80085aa <HAL_SPI_TransmitReceive+0x3cc>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085a8:	d102      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x3d2>
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d107      	bne.n	80085c0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80085be:	e026      	b.n	800860e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f47f af57 	bne.w	800847a <HAL_SPI_TransmitReceive+0x29c>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f47f af50 	bne.w	800847a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f000 ff9e 	bl	8009520 <SPI_EndRxTxTransaction>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2220      	movs	r2, #32
 80085f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008604:	e003      	b.n	800860e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008616:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800861a:	4618      	mov	r0, r3
 800861c:	3728      	adds	r7, #40	@ 0x28
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	4613      	mov	r3, r2
 8008630:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_SPI_Transmit_DMA+0x20>
 8008640:	2302      	movs	r3, #2
 8008642:	e0d4      	b.n	80087ee <HAL_SPI_Transmit_DMA+0x1ca>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b01      	cmp	r3, #1
 8008656:	d002      	beq.n	800865e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008658:	2302      	movs	r3, #2
 800865a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800865c:	e0c2      	b.n	80087e4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <HAL_SPI_Transmit_DMA+0x46>
 8008664:	88fb      	ldrh	r3, [r7, #6]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800866e:	e0b9      	b.n	80087e4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2203      	movs	r2, #3
 8008674:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	88fa      	ldrh	r2, [r7, #6]
 8008688:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	88fa      	ldrh	r2, [r7, #6]
 800868e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086ba:	d10f      	bne.n	80086dc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e0:	4a45      	ldr	r2, [pc, #276]	@ (80087f8 <HAL_SPI_Transmit_DMA+0x1d4>)
 80086e2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e8:	4a44      	ldr	r2, [pc, #272]	@ (80087fc <HAL_SPI_Transmit_DMA+0x1d8>)
 80086ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f0:	4a43      	ldr	r2, [pc, #268]	@ (8008800 <HAL_SPI_Transmit_DMA+0x1dc>)
 80086f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f8:	2200      	movs	r2, #0
 80086fa:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800870a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008714:	d82d      	bhi.n	8008772 <HAL_SPI_Transmit_DMA+0x14e>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008720:	d127      	bne.n	8008772 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008726:	b29b      	uxth	r3, r3
 8008728:	f003 0301 	and.w	r3, r3, #1
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10f      	bne.n	8008750 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800873e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008744:	b29b      	uxth	r3, r3
 8008746:	085b      	lsrs	r3, r3, #1
 8008748:	b29a      	uxth	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800874e:	e010      	b.n	8008772 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800875e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008764:	b29b      	uxth	r3, r3
 8008766:	085b      	lsrs	r3, r3, #1
 8008768:	b29b      	uxth	r3, r3
 800876a:	3301      	adds	r3, #1
 800876c:	b29a      	uxth	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877a:	4619      	mov	r1, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	330c      	adds	r3, #12
 8008782:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008788:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800878a:	f7fb f8a5 	bl	80038d8 <HAL_DMA_Start_IT>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d008      	beq.n	80087a6 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008798:	f043 0210 	orr.w	r2, r3, #16
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	75fb      	strb	r3, [r7, #23]

    goto error;
 80087a4:	e01e      	b.n	80087e4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b0:	2b40      	cmp	r3, #64	@ 0x40
 80087b2:	d007      	beq.n	80087c4 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087c2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0220 	orr.w	r2, r2, #32
 80087d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f042 0202 	orr.w	r2, r2, #2
 80087e2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	08009177 	.word	0x08009177
 80087fc:	08008f99 	.word	0x08008f99
 8008800:	080091cb 	.word	0x080091cb

08008804 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b01      	cmp	r3, #1
 8008820:	d002      	beq.n	8008828 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8008822:	2302      	movs	r3, #2
 8008824:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008826:	e0fe      	b.n	8008a26 <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d110      	bne.n	8008852 <HAL_SPI_Receive_DMA+0x4e>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008838:	d10b      	bne.n	8008852 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2204      	movs	r2, #4
 800883e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008842:	88fb      	ldrh	r3, [r7, #6]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f8fb 	bl	8008a44 <HAL_SPI_TransmitReceive_DMA>
 800884e:	4603      	mov	r3, r0
 8008850:	e0ee      	b.n	8008a30 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008858:	2b01      	cmp	r3, #1
 800885a:	d101      	bne.n	8008860 <HAL_SPI_Receive_DMA+0x5c>
 800885c:	2302      	movs	r3, #2
 800885e:	e0e7      	b.n	8008a30 <HAL_SPI_Receive_DMA+0x22c>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <HAL_SPI_Receive_DMA+0x70>
 800886e:	88fb      	ldrh	r3, [r7, #6]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008878:	e0d5      	b.n	8008a26 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2204      	movs	r2, #4
 800887e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	88fa      	ldrh	r2, [r7, #6]
 8008892:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	88fa      	ldrh	r2, [r7, #6]
 800889a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088be:	d10f      	bne.n	80088e0 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088ee:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80088f8:	d908      	bls.n	800890c <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	e042      	b.n	8008992 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800891a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008926:	d134      	bne.n	8008992 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008936:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800893e:	b29b      	uxth	r3, r3
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d111      	bne.n	800896c <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008956:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800895e:	b29b      	uxth	r3, r3
 8008960:	085b      	lsrs	r3, r3, #1
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800896a:	e012      	b.n	8008992 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800897a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008982:	b29b      	uxth	r3, r3
 8008984:	085b      	lsrs	r3, r3, #1
 8008986:	b29b      	uxth	r3, r3
 8008988:	3301      	adds	r3, #1
 800898a:	b29a      	uxth	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008996:	4a28      	ldr	r2, [pc, #160]	@ (8008a38 <HAL_SPI_Receive_DMA+0x234>)
 8008998:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800899e:	4a27      	ldr	r2, [pc, #156]	@ (8008a3c <HAL_SPI_Receive_DMA+0x238>)
 80089a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089a6:	4a26      	ldr	r2, [pc, #152]	@ (8008a40 <HAL_SPI_Receive_DMA+0x23c>)
 80089a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ae:	2200      	movs	r2, #0
 80089b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	330c      	adds	r3, #12
 80089bc:	4619      	mov	r1, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c2:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80089ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80089cc:	f7fa ff84 	bl	80038d8 <HAL_DMA_Start_IT>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d008      	beq.n	80089e8 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089da:	f043 0210 	orr.w	r2, r3, #16
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	75fb      	strb	r3, [r7, #23]

    goto error;
 80089e6:	e01e      	b.n	8008a26 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f2:	2b40      	cmp	r3, #64	@ 0x40
 80089f4:	d007      	beq.n	8008a06 <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a04:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f042 0220 	orr.w	r2, r2, #32
 8008a14:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f042 0201 	orr.w	r2, r2, #1
 8008a24:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	08009193 	.word	0x08009193
 8008a3c:	0800903f 	.word	0x0800903f
 8008a40:	080091cb 	.word	0x080091cb

08008a44 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d101      	bne.n	8008a64 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008a60:	2302      	movs	r3, #2
 8008a62:	e164      	b.n	8008d2e <HAL_SPI_TransmitReceive_DMA+0x2ea>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a72:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008a7a:	7dbb      	ldrb	r3, [r7, #22]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d00d      	beq.n	8008a9c <HAL_SPI_TransmitReceive_DMA+0x58>
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a86:	d106      	bne.n	8008a96 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <HAL_SPI_TransmitReceive_DMA+0x52>
 8008a90:	7dbb      	ldrb	r3, [r7, #22]
 8008a92:	2b04      	cmp	r3, #4
 8008a94:	d002      	beq.n	8008a9c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008a96:	2302      	movs	r3, #2
 8008a98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a9a:	e143      	b.n	8008d24 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d005      	beq.n	8008aae <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008aa8:	887b      	ldrh	r3, [r7, #2]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d102      	bne.n	8008ab4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ab2:	e137      	b.n	8008d24 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	d003      	beq.n	8008ac8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2205      	movs	r2, #5
 8008ac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	887a      	ldrh	r2, [r7, #2]
 8008ad8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	887a      	ldrh	r2, [r7, #2]
 8008ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	887a      	ldrh	r2, [r7, #2]
 8008aea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	887a      	ldrh	r2, [r7, #2]
 8008af2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008b10:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b1a:	d908      	bls.n	8008b2e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008b2a:	605a      	str	r2, [r3, #4]
 8008b2c:	e06f      	b.n	8008c0e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008b3c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b48:	d126      	bne.n	8008b98 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10f      	bne.n	8008b76 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b64:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	085b      	lsrs	r3, r3, #1
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b74:	e010      	b.n	8008b98 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b84:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	085b      	lsrs	r3, r3, #1
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	3301      	adds	r3, #1
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ba2:	d134      	bne.n	8008c0e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008bb2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d111      	bne.n	8008be8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bd2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	085b      	lsrs	r3, r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008be6:	e012      	b.n	8008c0e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bf6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	085b      	lsrs	r3, r3, #1
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	3301      	adds	r3, #1
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d108      	bne.n	8008c2c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c1e:	4a46      	ldr	r2, [pc, #280]	@ (8008d38 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8008c20:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c26:	4a45      	ldr	r2, [pc, #276]	@ (8008d3c <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8008c28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008c2a:	e007      	b.n	8008c3c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c30:	4a43      	ldr	r2, [pc, #268]	@ (8008d40 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8008c32:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c38:	4a42      	ldr	r2, [pc, #264]	@ (8008d44 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8008c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c40:	4a41      	ldr	r2, [pc, #260]	@ (8008d48 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008c42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c48:	2200      	movs	r2, #0
 8008c4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	330c      	adds	r3, #12
 8008c56:	4619      	mov	r1, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c64:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008c66:	f7fa fe37 	bl	80038d8 <HAL_DMA_Start_IT>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d008      	beq.n	8008c82 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c74:	f043 0210 	orr.w	r2, r3, #16
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008c80:	e050      	b.n	8008d24 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0201 	orr.w	r2, r2, #1
 8008c90:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c96:	2200      	movs	r2, #0
 8008c98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cae:	2200      	movs	r2, #0
 8008cb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cba:	4619      	mov	r1, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	330c      	adds	r3, #12
 8008cc2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cc8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008cca:	f7fa fe05 	bl	80038d8 <HAL_DMA_Start_IT>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d008      	beq.n	8008ce6 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cd8:	f043 0210 	orr.w	r2, r3, #16
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008ce4:	e01e      	b.n	8008d24 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf0:	2b40      	cmp	r3, #64	@ 0x40
 8008cf2:	d007      	beq.n	8008d04 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d02:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0220 	orr.w	r2, r2, #32
 8008d12:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f042 0202 	orr.w	r2, r2, #2
 8008d22:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	08009193 	.word	0x08009193
 8008d3c:	0800903f 	.word	0x0800903f
 8008d40:	080091af 	.word	0x080091af
 8008d44:	080090e7 	.word	0x080090e7
 8008d48:	080091cb 	.word	0x080091cb

08008d4c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b088      	sub	sp, #32
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10e      	bne.n	8008d8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d004      	beq.n	8008d8c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	4798      	blx	r3
    return;
 8008d8a:	e0ce      	b.n	8008f2a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <HAL_SPI_IRQHandler+0x5e>
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d004      	beq.n	8008daa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	4798      	blx	r3
    return;
 8008da8:	e0bf      	b.n	8008f2a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	f003 0320 	and.w	r3, r3, #32
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <HAL_SPI_IRQHandler+0x7e>
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d105      	bne.n	8008dca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 80b0 	beq.w	8008f2a <HAL_SPI_IRQHandler+0x1de>
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 80aa 	beq.w	8008f2a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d023      	beq.n	8008e28 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d011      	beq.n	8008e10 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008df0:	f043 0204 	orr.w	r2, r3, #4
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008df8:	2300      	movs	r3, #0
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	617b      	str	r3, [r7, #20]
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	e00b      	b.n	8008e28 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e10:	2300      	movs	r3, #0
 8008e12:	613b      	str	r3, [r7, #16]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	613b      	str	r3, [r7, #16]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	693b      	ldr	r3, [r7, #16]
        return;
 8008e26:	e080      	b.n	8008f2a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d014      	beq.n	8008e5c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e36:	f043 0201 	orr.w	r2, r3, #1
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00c      	beq.n	8008e80 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e6a:	f043 0208 	orr.w	r2, r3, #8
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e72:	2300      	movs	r3, #0
 8008e74:	60bb      	str	r3, [r7, #8]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	60bb      	str	r3, [r7, #8]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d04f      	beq.n	8008f28 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008e96:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <HAL_SPI_IRQHandler+0x168>
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d034      	beq.n	8008f1e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0203 	bic.w	r2, r2, #3
 8008ec2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d011      	beq.n	8008ef0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ed0:	4a17      	ldr	r2, [pc, #92]	@ (8008f30 <HAL_SPI_IRQHandler+0x1e4>)
 8008ed2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fa fd5d 	bl	8003998 <HAL_DMA_Abort_IT>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d005      	beq.n	8008ef0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ee8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d016      	beq.n	8008f26 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008efc:	4a0c      	ldr	r2, [pc, #48]	@ (8008f30 <HAL_SPI_IRQHandler+0x1e4>)
 8008efe:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fa fd47 	bl	8003998 <HAL_DMA_Abort_IT>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008f1c:	e003      	b.n	8008f26 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f830 	bl	8008f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008f24:	e000      	b.n	8008f28 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008f26:	bf00      	nop
    return;
 8008f28:	bf00      	nop
  }
}
 8008f2a:	3720      	adds	r7, #32
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	0800920b 	.word	0x0800920b

08008f34 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fa6:	f7fa fa5b 	bl	8003460 <HAL_GetTick>
 8008faa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0320 	and.w	r3, r3, #32
 8008fb6:	2b20      	cmp	r3, #32
 8008fb8:	d03b      	beq.n	8009032 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 0220 	bic.w	r2, r2, #32
 8008fc8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0202 	bic.w	r2, r2, #2
 8008fd8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	2164      	movs	r1, #100	@ 0x64
 8008fde:	6978      	ldr	r0, [r7, #20]
 8008fe0:	f000 fa9e 	bl	8009520 <SPI_EndRxTxTransaction>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d005      	beq.n	8008ff6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fee:	f043 0220 	orr.w	r2, r3, #32
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2200      	movs	r2, #0
 8009018:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800902a:	6978      	ldr	r0, [r7, #20]
 800902c:	f7ff ffaa 	bl	8008f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009030:	e002      	b.n	8009038 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009032:	6978      	ldr	r0, [r7, #20]
 8009034:	f7f8 ff9c 	bl	8001f70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800904c:	f7fa fa08 	bl	8003460 <HAL_GetTick>
 8009050:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0320 	and.w	r3, r3, #32
 800905c:	2b20      	cmp	r3, #32
 800905e:	d03c      	beq.n	80090da <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0220 	bic.w	r2, r2, #32
 800906e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10d      	bne.n	8009094 <SPI_DMAReceiveCplt+0x56>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009080:	d108      	bne.n	8009094 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 0203 	bic.w	r2, r2, #3
 8009090:	605a      	str	r2, [r3, #4]
 8009092:	e007      	b.n	80090a4 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0201 	bic.w	r2, r2, #1
 80090a2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	2164      	movs	r1, #100	@ 0x64
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f9e1 	bl	8009470 <SPI_EndRxTransaction>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2220      	movs	r2, #32
 80090b8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff ff56 	bl	8008f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80090d8:	e002      	b.n	80090e0 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f7f8 ff58 	bl	8001f90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090f4:	f7fa f9b4 	bl	8003460 <HAL_GetTick>
 80090f8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b20      	cmp	r3, #32
 8009106:	d030      	beq.n	800916a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 0220 	bic.w	r2, r2, #32
 8009116:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	2164      	movs	r1, #100	@ 0x64
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f9ff 	bl	8009520 <SPI_EndRxTxTransaction>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800912c:	f043 0220 	orr.w	r2, r3, #32
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0203 	bic.w	r2, r2, #3
 8009142:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff ff0e 	bl	8008f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009168:	e002      	b.n	8009170 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7ff fee2 	bl	8008f34 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009182:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f7ff fedf 	bl	8008f48 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800918a:	bf00      	nop
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7ff fedb 	bl	8008f5c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f7ff fed7 	bl	8008f70 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091c2:	bf00      	nop
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f022 0203 	bic.w	r2, r2, #3
 80091e6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ec:	f043 0210 	orr.w	r2, r3, #16
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7ff fec1 	bl	8008f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009202:	bf00      	nop
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009216:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff feac 	bl	8008f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	4613      	mov	r3, r2
 8009242:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009244:	f7fa f90c 	bl	8003460 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	1a9b      	subs	r3, r3, r2
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	4413      	add	r3, r2
 8009252:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009254:	f7fa f904 	bl	8003460 <HAL_GetTick>
 8009258:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800925a:	4b39      	ldr	r3, [pc, #228]	@ (8009340 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	015b      	lsls	r3, r3, #5
 8009260:	0d1b      	lsrs	r3, r3, #20
 8009262:	69fa      	ldr	r2, [r7, #28]
 8009264:	fb02 f303 	mul.w	r3, r2, r3
 8009268:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800926a:	e054      	b.n	8009316 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009272:	d050      	beq.n	8009316 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009274:	f7fa f8f4 	bl	8003460 <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	429a      	cmp	r2, r3
 8009282:	d902      	bls.n	800928a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d13d      	bne.n	8009306 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009298:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092a2:	d111      	bne.n	80092c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092ac:	d004      	beq.n	80092b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092b6:	d107      	bne.n	80092c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d0:	d10f      	bne.n	80092f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e017      	b.n	8009336 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800930c:	2300      	movs	r3, #0
 800930e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	3b01      	subs	r3, #1
 8009314:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4013      	ands	r3, r2
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	429a      	cmp	r2, r3
 8009324:	bf0c      	ite	eq
 8009326:	2301      	moveq	r3, #1
 8009328:	2300      	movne	r3, #0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	461a      	mov	r2, r3
 800932e:	79fb      	ldrb	r3, [r7, #7]
 8009330:	429a      	cmp	r2, r3
 8009332:	d19b      	bne.n	800926c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3720      	adds	r7, #32
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000004 	.word	0x20000004

08009344 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08a      	sub	sp, #40	@ 0x28
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009356:	f7fa f883 	bl	8003460 <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935e:	1a9b      	subs	r3, r3, r2
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	4413      	add	r3, r2
 8009364:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009366:	f7fa f87b 	bl	8003460 <HAL_GetTick>
 800936a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	330c      	adds	r3, #12
 8009372:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009374:	4b3d      	ldr	r3, [pc, #244]	@ (800946c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	00da      	lsls	r2, r3, #3
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	0d1b      	lsrs	r3, r3, #20
 8009384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009386:	fb02 f303 	mul.w	r3, r2, r3
 800938a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800938c:	e060      	b.n	8009450 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009394:	d107      	bne.n	80093a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093ac:	d050      	beq.n	8009450 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093ae:	f7fa f857 	bl	8003460 <HAL_GetTick>
 80093b2:	4602      	mov	r2, r0
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d902      	bls.n	80093c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d13d      	bne.n	8009440 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093dc:	d111      	bne.n	8009402 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093e6:	d004      	beq.n	80093f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093f0:	d107      	bne.n	8009402 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009400:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800940a:	d10f      	bne.n	800942c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800942a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e010      	b.n	8009462 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	3b01      	subs	r3, #1
 800944e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	4013      	ands	r3, r2
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	429a      	cmp	r2, r3
 800945e:	d196      	bne.n	800938e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3728      	adds	r7, #40	@ 0x28
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20000004 	.word	0x20000004

08009470 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af02      	add	r7, sp, #8
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009484:	d111      	bne.n	80094aa <SPI_EndRxTransaction+0x3a>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800948e:	d004      	beq.n	800949a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009498:	d107      	bne.n	80094aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2200      	movs	r2, #0
 80094b2:	2180      	movs	r1, #128	@ 0x80
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f7ff febd 	bl	8009234 <SPI_WaitFlagStateUntilTimeout>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d007      	beq.n	80094d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094c4:	f043 0220 	orr.w	r2, r3, #32
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e023      	b.n	8009518 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094d8:	d11d      	bne.n	8009516 <SPI_EndRxTransaction+0xa6>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094e2:	d004      	beq.n	80094ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ec:	d113      	bne.n	8009516 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff ff22 	bl	8009344 <SPI_WaitFifoStateUntilTimeout>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800950a:	f043 0220 	orr.w	r2, r3, #32
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e000      	b.n	8009518 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af02      	add	r7, sp, #8
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2200      	movs	r2, #0
 8009534:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff ff03 	bl	8009344 <SPI_WaitFifoStateUntilTimeout>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009548:	f043 0220 	orr.w	r2, r3, #32
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e027      	b.n	80095a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2200      	movs	r2, #0
 800955c:	2180      	movs	r1, #128	@ 0x80
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f7ff fe68 	bl	8009234 <SPI_WaitFlagStateUntilTimeout>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d007      	beq.n	800957a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800956e:	f043 0220 	orr.w	r2, r3, #32
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e014      	b.n	80095a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2200      	movs	r2, #0
 8009582:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff fedc 	bl	8009344 <SPI_WaitFifoStateUntilTimeout>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009596:	f043 0220 	orr.w	r2, r3, #32
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e000      	b.n	80095a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e049      	b.n	8009652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7f9 fc8a 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3304      	adds	r3, #4
 80095e8:	4619      	mov	r1, r3
 80095ea:	4610      	mov	r0, r2
 80095ec:	f000 f9ec 	bl	80099c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b01      	cmp	r3, #1
 800966e:	d001      	beq.n	8009674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e040      	b.n	80096f6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2202      	movs	r2, #2
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f042 0201 	orr.w	r2, r2, #1
 800968a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a1c      	ldr	r2, [pc, #112]	@ (8009704 <HAL_TIM_Base_Start_IT+0xa8>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d00e      	beq.n	80096b4 <HAL_TIM_Base_Start_IT+0x58>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800969e:	d009      	beq.n	80096b4 <HAL_TIM_Base_Start_IT+0x58>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a18      	ldr	r2, [pc, #96]	@ (8009708 <HAL_TIM_Base_Start_IT+0xac>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d004      	beq.n	80096b4 <HAL_TIM_Base_Start_IT+0x58>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a17      	ldr	r2, [pc, #92]	@ (800970c <HAL_TIM_Base_Start_IT+0xb0>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d115      	bne.n	80096e0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689a      	ldr	r2, [r3, #8]
 80096ba:	4b15      	ldr	r3, [pc, #84]	@ (8009710 <HAL_TIM_Base_Start_IT+0xb4>)
 80096bc:	4013      	ands	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b06      	cmp	r3, #6
 80096c4:	d015      	beq.n	80096f2 <HAL_TIM_Base_Start_IT+0x96>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096cc:	d011      	beq.n	80096f2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0201 	orr.w	r2, r2, #1
 80096dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096de:	e008      	b.n	80096f2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f042 0201 	orr.w	r2, r2, #1
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	e000      	b.n	80096f4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	40012c00 	.word	0x40012c00
 8009708:	40000400 	.word	0x40000400
 800970c:	40014000 	.word	0x40014000
 8009710:	00010007 	.word	0x00010007

08009714 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 0201 	bic.w	r2, r2, #1
 800972a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6a1a      	ldr	r2, [r3, #32]
 8009732:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009736:	4013      	ands	r3, r2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10f      	bne.n	800975c <HAL_TIM_Base_Stop_IT+0x48>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6a1a      	ldr	r2, [r3, #32]
 8009742:	f240 4344 	movw	r3, #1092	@ 0x444
 8009746:	4013      	ands	r3, r2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d107      	bne.n	800975c <HAL_TIM_Base_Stop_IT+0x48>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 0201 	bic.w	r2, r2, #1
 800975a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b00      	cmp	r3, #0
 8009792:	d020      	beq.n	80097d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f003 0302 	and.w	r3, r3, #2
 800979a:	2b00      	cmp	r3, #0
 800979c:	d01b      	beq.n	80097d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f06f 0202 	mvn.w	r2, #2
 80097a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	f003 0303 	and.w	r3, r3, #3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f8e4 	bl	800998a <HAL_TIM_IC_CaptureCallback>
 80097c2:	e005      	b.n	80097d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f8d6 	bl	8009976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f8e7 	bl	800999e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d020      	beq.n	8009822 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f003 0304 	and.w	r3, r3, #4
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d01b      	beq.n	8009822 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f06f 0204 	mvn.w	r2, #4
 80097f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2202      	movs	r2, #2
 80097f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f8be 	bl	800998a <HAL_TIM_IC_CaptureCallback>
 800980e:	e005      	b.n	800981c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f8b0 	bl	8009976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f8c1 	bl	800999e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	f003 0308 	and.w	r3, r3, #8
 8009828:	2b00      	cmp	r3, #0
 800982a:	d020      	beq.n	800986e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	2b00      	cmp	r3, #0
 8009834:	d01b      	beq.n	800986e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f06f 0208 	mvn.w	r2, #8
 800983e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2204      	movs	r2, #4
 8009844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	f003 0303 	and.w	r3, r3, #3
 8009850:	2b00      	cmp	r3, #0
 8009852:	d003      	beq.n	800985c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f898 	bl	800998a <HAL_TIM_IC_CaptureCallback>
 800985a:	e005      	b.n	8009868 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f88a 	bl	8009976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f89b 	bl	800999e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	2b00      	cmp	r3, #0
 8009876:	d020      	beq.n	80098ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f003 0310 	and.w	r3, r3, #16
 800987e:	2b00      	cmp	r3, #0
 8009880:	d01b      	beq.n	80098ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f06f 0210 	mvn.w	r2, #16
 800988a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2208      	movs	r2, #8
 8009890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f872 	bl	800998a <HAL_TIM_IC_CaptureCallback>
 80098a6:	e005      	b.n	80098b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f864 	bl	8009976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f875 	bl	800999e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00c      	beq.n	80098de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d007      	beq.n	80098de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f06f 0201 	mvn.w	r2, #1
 80098d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7f8 fca1 	bl	8002220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00c      	beq.n	8009902 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d007      	beq.n	8009902 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80098fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f8db 	bl	8009ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00c      	beq.n	8009926 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009912:	2b00      	cmp	r3, #0
 8009914:	d007      	beq.n	8009926 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800991e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f8d3 	bl	8009acc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00c      	beq.n	800994a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009936:	2b00      	cmp	r3, #0
 8009938:	d007      	beq.n	800994a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f834 	bl	80099b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	f003 0320 	and.w	r3, r3, #32
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00c      	beq.n	800996e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	d007      	beq.n	800996e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f06f 0220 	mvn.w	r2, #32
 8009966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f89b 	bl	8009aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800997e:	bf00      	nop
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099a6:	bf00      	nop
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099ba:	bf00      	nop
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
	...

080099c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a2e      	ldr	r2, [pc, #184]	@ (8009a94 <TIM_Base_SetConfig+0xcc>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d007      	beq.n	80099f0 <TIM_Base_SetConfig+0x28>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099e6:	d003      	beq.n	80099f0 <TIM_Base_SetConfig+0x28>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a2b      	ldr	r2, [pc, #172]	@ (8009a98 <TIM_Base_SetConfig+0xd0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d108      	bne.n	8009a02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a23      	ldr	r2, [pc, #140]	@ (8009a94 <TIM_Base_SetConfig+0xcc>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00f      	beq.n	8009a2a <TIM_Base_SetConfig+0x62>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a10:	d00b      	beq.n	8009a2a <TIM_Base_SetConfig+0x62>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a20      	ldr	r2, [pc, #128]	@ (8009a98 <TIM_Base_SetConfig+0xd0>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d007      	beq.n	8009a2a <TIM_Base_SetConfig+0x62>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8009a9c <TIM_Base_SetConfig+0xd4>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d003      	beq.n	8009a2a <TIM_Base_SetConfig+0x62>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a1e      	ldr	r2, [pc, #120]	@ (8009aa0 <TIM_Base_SetConfig+0xd8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d108      	bne.n	8009a3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a0c      	ldr	r2, [pc, #48]	@ (8009a94 <TIM_Base_SetConfig+0xcc>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d007      	beq.n	8009a78 <TIM_Base_SetConfig+0xb0>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8009a9c <TIM_Base_SetConfig+0xd4>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d003      	beq.n	8009a78 <TIM_Base_SetConfig+0xb0>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a0b      	ldr	r2, [pc, #44]	@ (8009aa0 <TIM_Base_SetConfig+0xd8>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d103      	bne.n	8009a80 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	691a      	ldr	r2, [r3, #16]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	615a      	str	r2, [r3, #20]
}
 8009a86:	bf00      	nop
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	40012c00 	.word	0x40012c00
 8009a98:	40000400 	.word	0x40000400
 8009a9c:	40014000 	.word	0x40014000
 8009aa0:	40014400 	.word	0x40014400

08009aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e040      	b.n	8009b74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d106      	bne.n	8009b08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7f9 fa18 	bl	8002f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2224      	movs	r2, #36	@ 0x24
 8009b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f022 0201 	bic.w	r2, r2, #1
 8009b1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fb38 	bl	800a19c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f8af 	bl	8009c90 <UART_SetConfig>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d101      	bne.n	8009b3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e01b      	b.n	8009b74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	689a      	ldr	r2, [r3, #8]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f042 0201 	orr.w	r2, r2, #1
 8009b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fbb7 	bl	800a2e0 <UART_CheckIdleState>
 8009b72:	4603      	mov	r3, r0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08a      	sub	sp, #40	@ 0x28
 8009b80:	af02      	add	r7, sp, #8
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b90:	2b20      	cmp	r3, #32
 8009b92:	d177      	bne.n	8009c84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d002      	beq.n	8009ba0 <HAL_UART_Transmit+0x24>
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e070      	b.n	8009c86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2221      	movs	r2, #33	@ 0x21
 8009bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bb2:	f7f9 fc55 	bl	8003460 <HAL_GetTick>
 8009bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	88fa      	ldrh	r2, [r7, #6]
 8009bbc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	88fa      	ldrh	r2, [r7, #6]
 8009bc4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bd0:	d108      	bne.n	8009be4 <HAL_UART_Transmit+0x68>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d104      	bne.n	8009be4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	61bb      	str	r3, [r7, #24]
 8009be2:	e003      	b.n	8009bec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009be8:	2300      	movs	r3, #0
 8009bea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009bec:	e02f      	b.n	8009c4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2180      	movs	r1, #128	@ 0x80
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f000 fc19 	bl	800a430 <UART_WaitOnFlagUntilTimeout>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2220      	movs	r2, #32
 8009c08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e03b      	b.n	8009c86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10b      	bne.n	8009c2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	881a      	ldrh	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c20:	b292      	uxth	r2, r2
 8009c22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	3302      	adds	r3, #2
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	e007      	b.n	8009c3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	781a      	ldrb	r2, [r3, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	3b01      	subs	r3, #1
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1c9      	bne.n	8009bee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2200      	movs	r2, #0
 8009c62:	2140      	movs	r1, #64	@ 0x40
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 fbe3 	bl	800a430 <UART_WaitOnFlagUntilTimeout>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d004      	beq.n	8009c7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2220      	movs	r2, #32
 8009c74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e005      	b.n	8009c86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e000      	b.n	8009c86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009c84:	2302      	movs	r3, #2
  }
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3720      	adds	r7, #32
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c94:	b08a      	sub	sp, #40	@ 0x28
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	431a      	orrs	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	431a      	orrs	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	4ba5      	ldr	r3, [pc, #660]	@ (8009f54 <UART_SetConfig+0x2c4>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	6812      	ldr	r2, [r2, #0]
 8009cc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009cc8:	430b      	orrs	r3, r1
 8009cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	68da      	ldr	r2, [r3, #12]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a9a      	ldr	r2, [pc, #616]	@ (8009f58 <UART_SetConfig+0x2c8>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d004      	beq.n	8009cfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a91      	ldr	r2, [pc, #580]	@ (8009f5c <UART_SetConfig+0x2cc>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d126      	bne.n	8009d68 <UART_SetConfig+0xd8>
 8009d1a:	4b91      	ldr	r3, [pc, #580]	@ (8009f60 <UART_SetConfig+0x2d0>)
 8009d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d20:	f003 0303 	and.w	r3, r3, #3
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	d81b      	bhi.n	8009d60 <UART_SetConfig+0xd0>
 8009d28:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <UART_SetConfig+0xa0>)
 8009d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2e:	bf00      	nop
 8009d30:	08009d41 	.word	0x08009d41
 8009d34:	08009d51 	.word	0x08009d51
 8009d38:	08009d49 	.word	0x08009d49
 8009d3c:	08009d59 	.word	0x08009d59
 8009d40:	2301      	movs	r3, #1
 8009d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d46:	e0d6      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d4e:	e0d2      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009d50:	2304      	movs	r3, #4
 8009d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d56:	e0ce      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009d58:	2308      	movs	r3, #8
 8009d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d5e:	e0ca      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009d60:	2310      	movs	r3, #16
 8009d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d66:	e0c6      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a7d      	ldr	r2, [pc, #500]	@ (8009f64 <UART_SetConfig+0x2d4>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d138      	bne.n	8009de4 <UART_SetConfig+0x154>
 8009d72:	4b7b      	ldr	r3, [pc, #492]	@ (8009f60 <UART_SetConfig+0x2d0>)
 8009d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d78:	f003 030c 	and.w	r3, r3, #12
 8009d7c:	2b0c      	cmp	r3, #12
 8009d7e:	d82d      	bhi.n	8009ddc <UART_SetConfig+0x14c>
 8009d80:	a201      	add	r2, pc, #4	@ (adr r2, 8009d88 <UART_SetConfig+0xf8>)
 8009d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d86:	bf00      	nop
 8009d88:	08009dbd 	.word	0x08009dbd
 8009d8c:	08009ddd 	.word	0x08009ddd
 8009d90:	08009ddd 	.word	0x08009ddd
 8009d94:	08009ddd 	.word	0x08009ddd
 8009d98:	08009dcd 	.word	0x08009dcd
 8009d9c:	08009ddd 	.word	0x08009ddd
 8009da0:	08009ddd 	.word	0x08009ddd
 8009da4:	08009ddd 	.word	0x08009ddd
 8009da8:	08009dc5 	.word	0x08009dc5
 8009dac:	08009ddd 	.word	0x08009ddd
 8009db0:	08009ddd 	.word	0x08009ddd
 8009db4:	08009ddd 	.word	0x08009ddd
 8009db8:	08009dd5 	.word	0x08009dd5
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dc2:	e098      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dca:	e094      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009dcc:	2304      	movs	r3, #4
 8009dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dd2:	e090      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009dd4:	2308      	movs	r3, #8
 8009dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dda:	e08c      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009ddc:	2310      	movs	r3, #16
 8009dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009de2:	e088      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a5f      	ldr	r2, [pc, #380]	@ (8009f68 <UART_SetConfig+0x2d8>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d125      	bne.n	8009e3a <UART_SetConfig+0x1aa>
 8009dee:	4b5c      	ldr	r3, [pc, #368]	@ (8009f60 <UART_SetConfig+0x2d0>)
 8009df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009df4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009df8:	2b30      	cmp	r3, #48	@ 0x30
 8009dfa:	d016      	beq.n	8009e2a <UART_SetConfig+0x19a>
 8009dfc:	2b30      	cmp	r3, #48	@ 0x30
 8009dfe:	d818      	bhi.n	8009e32 <UART_SetConfig+0x1a2>
 8009e00:	2b20      	cmp	r3, #32
 8009e02:	d00a      	beq.n	8009e1a <UART_SetConfig+0x18a>
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	d814      	bhi.n	8009e32 <UART_SetConfig+0x1a2>
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <UART_SetConfig+0x182>
 8009e0c:	2b10      	cmp	r3, #16
 8009e0e:	d008      	beq.n	8009e22 <UART_SetConfig+0x192>
 8009e10:	e00f      	b.n	8009e32 <UART_SetConfig+0x1a2>
 8009e12:	2300      	movs	r3, #0
 8009e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e18:	e06d      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e20:	e069      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009e22:	2304      	movs	r3, #4
 8009e24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e28:	e065      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009e2a:	2308      	movs	r3, #8
 8009e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e30:	e061      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009e32:	2310      	movs	r3, #16
 8009e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e38:	e05d      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a4b      	ldr	r2, [pc, #300]	@ (8009f6c <UART_SetConfig+0x2dc>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d125      	bne.n	8009e90 <UART_SetConfig+0x200>
 8009e44:	4b46      	ldr	r3, [pc, #280]	@ (8009f60 <UART_SetConfig+0x2d0>)
 8009e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e50:	d016      	beq.n	8009e80 <UART_SetConfig+0x1f0>
 8009e52:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e54:	d818      	bhi.n	8009e88 <UART_SetConfig+0x1f8>
 8009e56:	2b80      	cmp	r3, #128	@ 0x80
 8009e58:	d00a      	beq.n	8009e70 <UART_SetConfig+0x1e0>
 8009e5a:	2b80      	cmp	r3, #128	@ 0x80
 8009e5c:	d814      	bhi.n	8009e88 <UART_SetConfig+0x1f8>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <UART_SetConfig+0x1d8>
 8009e62:	2b40      	cmp	r3, #64	@ 0x40
 8009e64:	d008      	beq.n	8009e78 <UART_SetConfig+0x1e8>
 8009e66:	e00f      	b.n	8009e88 <UART_SetConfig+0x1f8>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e6e:	e042      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009e70:	2302      	movs	r3, #2
 8009e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e76:	e03e      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009e78:	2304      	movs	r3, #4
 8009e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e7e:	e03a      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009e80:	2308      	movs	r3, #8
 8009e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e86:	e036      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009e88:	2310      	movs	r3, #16
 8009e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e8e:	e032      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a30      	ldr	r2, [pc, #192]	@ (8009f58 <UART_SetConfig+0x2c8>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d12a      	bne.n	8009ef0 <UART_SetConfig+0x260>
 8009e9a:	4b31      	ldr	r3, [pc, #196]	@ (8009f60 <UART_SetConfig+0x2d0>)
 8009e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ea0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ea4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ea8:	d01a      	beq.n	8009ee0 <UART_SetConfig+0x250>
 8009eaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009eae:	d81b      	bhi.n	8009ee8 <UART_SetConfig+0x258>
 8009eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eb4:	d00c      	beq.n	8009ed0 <UART_SetConfig+0x240>
 8009eb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eba:	d815      	bhi.n	8009ee8 <UART_SetConfig+0x258>
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d003      	beq.n	8009ec8 <UART_SetConfig+0x238>
 8009ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ec4:	d008      	beq.n	8009ed8 <UART_SetConfig+0x248>
 8009ec6:	e00f      	b.n	8009ee8 <UART_SetConfig+0x258>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ece:	e012      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ed6:	e00e      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009ed8:	2304      	movs	r3, #4
 8009eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ede:	e00a      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009ee0:	2308      	movs	r3, #8
 8009ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ee6:	e006      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009ee8:	2310      	movs	r3, #16
 8009eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eee:	e002      	b.n	8009ef6 <UART_SetConfig+0x266>
 8009ef0:	2310      	movs	r3, #16
 8009ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a17      	ldr	r2, [pc, #92]	@ (8009f58 <UART_SetConfig+0x2c8>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	f040 808b 	bne.w	800a018 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f06:	2b08      	cmp	r3, #8
 8009f08:	d834      	bhi.n	8009f74 <UART_SetConfig+0x2e4>
 8009f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f10 <UART_SetConfig+0x280>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f35 	.word	0x08009f35
 8009f14:	08009f75 	.word	0x08009f75
 8009f18:	08009f3d 	.word	0x08009f3d
 8009f1c:	08009f75 	.word	0x08009f75
 8009f20:	08009f43 	.word	0x08009f43
 8009f24:	08009f75 	.word	0x08009f75
 8009f28:	08009f75 	.word	0x08009f75
 8009f2c:	08009f75 	.word	0x08009f75
 8009f30:	08009f4b 	.word	0x08009f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f34:	f7fc feb8 	bl	8006ca8 <HAL_RCC_GetPCLK1Freq>
 8009f38:	61f8      	str	r0, [r7, #28]
        break;
 8009f3a:	e021      	b.n	8009f80 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f70 <UART_SetConfig+0x2e0>)
 8009f3e:	61fb      	str	r3, [r7, #28]
        break;
 8009f40:	e01e      	b.n	8009f80 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f42:	f7fc fe19 	bl	8006b78 <HAL_RCC_GetSysClockFreq>
 8009f46:	61f8      	str	r0, [r7, #28]
        break;
 8009f48:	e01a      	b.n	8009f80 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f4e:	61fb      	str	r3, [r7, #28]
        break;
 8009f50:	e016      	b.n	8009f80 <UART_SetConfig+0x2f0>
 8009f52:	bf00      	nop
 8009f54:	efff69f3 	.word	0xefff69f3
 8009f58:	40008000 	.word	0x40008000
 8009f5c:	40013800 	.word	0x40013800
 8009f60:	40021000 	.word	0x40021000
 8009f64:	40004400 	.word	0x40004400
 8009f68:	40004800 	.word	0x40004800
 8009f6c:	40004c00 	.word	0x40004c00
 8009f70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009f7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 80fa 	beq.w	800a17c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	4413      	add	r3, r2
 8009f92:	69fa      	ldr	r2, [r7, #28]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d305      	bcc.n	8009fa4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f9e:	69fa      	ldr	r2, [r7, #28]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d903      	bls.n	8009fac <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009faa:	e0e7      	b.n	800a17c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	461c      	mov	r4, r3
 8009fb2:	4615      	mov	r5, r2
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	f04f 0300 	mov.w	r3, #0
 8009fbc:	022b      	lsls	r3, r5, #8
 8009fbe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009fc2:	0222      	lsls	r2, r4, #8
 8009fc4:	68f9      	ldr	r1, [r7, #12]
 8009fc6:	6849      	ldr	r1, [r1, #4]
 8009fc8:	0849      	lsrs	r1, r1, #1
 8009fca:	2000      	movs	r0, #0
 8009fcc:	4688      	mov	r8, r1
 8009fce:	4681      	mov	r9, r0
 8009fd0:	eb12 0a08 	adds.w	sl, r2, r8
 8009fd4:	eb43 0b09 	adc.w	fp, r3, r9
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	607a      	str	r2, [r7, #4]
 8009fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe6:	4650      	mov	r0, sl
 8009fe8:	4659      	mov	r1, fp
 8009fea:	f7f6 fe55 	bl	8000c98 <__aeabi_uldivmod>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ffc:	d308      	bcc.n	800a010 <UART_SetConfig+0x380>
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a004:	d204      	bcs.n	800a010 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	60da      	str	r2, [r3, #12]
 800a00e:	e0b5      	b.n	800a17c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a016:	e0b1      	b.n	800a17c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a020:	d15d      	bne.n	800a0de <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800a022:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a026:	2b08      	cmp	r3, #8
 800a028:	d827      	bhi.n	800a07a <UART_SetConfig+0x3ea>
 800a02a:	a201      	add	r2, pc, #4	@ (adr r2, 800a030 <UART_SetConfig+0x3a0>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a055 	.word	0x0800a055
 800a034:	0800a05d 	.word	0x0800a05d
 800a038:	0800a065 	.word	0x0800a065
 800a03c:	0800a07b 	.word	0x0800a07b
 800a040:	0800a06b 	.word	0x0800a06b
 800a044:	0800a07b 	.word	0x0800a07b
 800a048:	0800a07b 	.word	0x0800a07b
 800a04c:	0800a07b 	.word	0x0800a07b
 800a050:	0800a073 	.word	0x0800a073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a054:	f7fc fe28 	bl	8006ca8 <HAL_RCC_GetPCLK1Freq>
 800a058:	61f8      	str	r0, [r7, #28]
        break;
 800a05a:	e014      	b.n	800a086 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a05c:	f7fc fe3a 	bl	8006cd4 <HAL_RCC_GetPCLK2Freq>
 800a060:	61f8      	str	r0, [r7, #28]
        break;
 800a062:	e010      	b.n	800a086 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a064:	4b4c      	ldr	r3, [pc, #304]	@ (800a198 <UART_SetConfig+0x508>)
 800a066:	61fb      	str	r3, [r7, #28]
        break;
 800a068:	e00d      	b.n	800a086 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a06a:	f7fc fd85 	bl	8006b78 <HAL_RCC_GetSysClockFreq>
 800a06e:	61f8      	str	r0, [r7, #28]
        break;
 800a070:	e009      	b.n	800a086 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a076:	61fb      	str	r3, [r7, #28]
        break;
 800a078:	e005      	b.n	800a086 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800a07a:	2300      	movs	r3, #0
 800a07c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d077      	beq.n	800a17c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	005a      	lsls	r2, r3, #1
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	085b      	lsrs	r3, r3, #1
 800a096:	441a      	add	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	2b0f      	cmp	r3, #15
 800a0a6:	d916      	bls.n	800a0d6 <UART_SetConfig+0x446>
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0ae:	d212      	bcs.n	800a0d6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	f023 030f 	bic.w	r3, r3, #15
 800a0b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	085b      	lsrs	r3, r3, #1
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	f003 0307 	and.w	r3, r3, #7
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	8afb      	ldrh	r3, [r7, #22]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	8afa      	ldrh	r2, [r7, #22]
 800a0d2:	60da      	str	r2, [r3, #12]
 800a0d4:	e052      	b.n	800a17c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a0dc:	e04e      	b.n	800a17c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a0e2:	2b08      	cmp	r3, #8
 800a0e4:	d827      	bhi.n	800a136 <UART_SetConfig+0x4a6>
 800a0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ec <UART_SetConfig+0x45c>)
 800a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ec:	0800a111 	.word	0x0800a111
 800a0f0:	0800a119 	.word	0x0800a119
 800a0f4:	0800a121 	.word	0x0800a121
 800a0f8:	0800a137 	.word	0x0800a137
 800a0fc:	0800a127 	.word	0x0800a127
 800a100:	0800a137 	.word	0x0800a137
 800a104:	0800a137 	.word	0x0800a137
 800a108:	0800a137 	.word	0x0800a137
 800a10c:	0800a12f 	.word	0x0800a12f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a110:	f7fc fdca 	bl	8006ca8 <HAL_RCC_GetPCLK1Freq>
 800a114:	61f8      	str	r0, [r7, #28]
        break;
 800a116:	e014      	b.n	800a142 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a118:	f7fc fddc 	bl	8006cd4 <HAL_RCC_GetPCLK2Freq>
 800a11c:	61f8      	str	r0, [r7, #28]
        break;
 800a11e:	e010      	b.n	800a142 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a120:	4b1d      	ldr	r3, [pc, #116]	@ (800a198 <UART_SetConfig+0x508>)
 800a122:	61fb      	str	r3, [r7, #28]
        break;
 800a124:	e00d      	b.n	800a142 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a126:	f7fc fd27 	bl	8006b78 <HAL_RCC_GetSysClockFreq>
 800a12a:	61f8      	str	r0, [r7, #28]
        break;
 800a12c:	e009      	b.n	800a142 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a12e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a132:	61fb      	str	r3, [r7, #28]
        break;
 800a134:	e005      	b.n	800a142 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a140:	bf00      	nop
    }

    if (pclk != 0U)
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d019      	beq.n	800a17c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	085a      	lsrs	r2, r3, #1
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	441a      	add	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	fbb2 f3f3 	udiv	r3, r2, r3
 800a15a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	2b0f      	cmp	r3, #15
 800a160:	d909      	bls.n	800a176 <UART_SetConfig+0x4e6>
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a168:	d205      	bcs.n	800a176 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60da      	str	r2, [r3, #12]
 800a174:	e002      	b.n	800a17c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a188:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3728      	adds	r7, #40	@ 0x28
 800a190:	46bd      	mov	sp, r7
 800a192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a196:	bf00      	nop
 800a198:	00f42400 	.word	0x00f42400

0800a19c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a8:	f003 0308 	and.w	r3, r3, #8
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00a      	beq.n	800a1c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00a      	beq.n	800a1e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ec:	f003 0302 	and.w	r3, r3, #2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00a      	beq.n	800a20a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	430a      	orrs	r2, r1
 800a208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00a      	beq.n	800a22c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	430a      	orrs	r2, r1
 800a22a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a230:	f003 0310 	and.w	r3, r3, #16
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	430a      	orrs	r2, r1
 800a24c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a252:	f003 0320 	and.w	r3, r3, #32
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	430a      	orrs	r2, r1
 800a26e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01a      	beq.n	800a2b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	430a      	orrs	r2, r1
 800a290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a29a:	d10a      	bne.n	800a2b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	430a      	orrs	r2, r1
 800a2b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00a      	beq.n	800a2d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	605a      	str	r2, [r3, #4]
  }
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b098      	sub	sp, #96	@ 0x60
 800a2e4:	af02      	add	r7, sp, #8
 800a2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2f0:	f7f9 f8b6 	bl	8003460 <HAL_GetTick>
 800a2f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0308 	and.w	r3, r3, #8
 800a300:	2b08      	cmp	r3, #8
 800a302:	d12e      	bne.n	800a362 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a304:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a30c:	2200      	movs	r2, #0
 800a30e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f88c 	bl	800a430 <UART_WaitOnFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d021      	beq.n	800a362 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a332:	653b      	str	r3, [r7, #80]	@ 0x50
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	461a      	mov	r2, r3
 800a33a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a33c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a33e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e6      	bne.n	800a31e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2220      	movs	r2, #32
 800a354:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e062      	b.n	800a428 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0304 	and.w	r3, r3, #4
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	d149      	bne.n	800a404 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a378:	2200      	movs	r2, #0
 800a37a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f856 	bl	800a430 <UART_WaitOnFlagUntilTimeout>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d03c      	beq.n	800a404 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a392:	e853 3f00 	ldrex	r3, [r3]
 800a396:	623b      	str	r3, [r7, #32]
   return(result);
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a39e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b0:	e841 2300 	strex	r3, r2, [r1]
 800a3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1e6      	bne.n	800a38a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	e853 3f00 	ldrex	r3, [r3]
 800a3ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 0301 	bic.w	r3, r3, #1
 800a3d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3308      	adds	r3, #8
 800a3da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3dc:	61fa      	str	r2, [r7, #28]
 800a3de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e0:	69b9      	ldr	r1, [r7, #24]
 800a3e2:	69fa      	ldr	r2, [r7, #28]
 800a3e4:	e841 2300 	strex	r3, r2, [r1]
 800a3e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e5      	bne.n	800a3bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e011      	b.n	800a428 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2220      	movs	r2, #32
 800a408:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3758      	adds	r7, #88	@ 0x58
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	603b      	str	r3, [r7, #0]
 800a43c:	4613      	mov	r3, r2
 800a43e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a440:	e049      	b.n	800a4d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a448:	d045      	beq.n	800a4d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a44a:	f7f9 f809 	bl	8003460 <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	69ba      	ldr	r2, [r7, #24]
 800a456:	429a      	cmp	r2, r3
 800a458:	d302      	bcc.n	800a460 <UART_WaitOnFlagUntilTimeout+0x30>
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e048      	b.n	800a4f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0304 	and.w	r3, r3, #4
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d031      	beq.n	800a4d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	f003 0308 	and.w	r3, r3, #8
 800a47c:	2b08      	cmp	r3, #8
 800a47e:	d110      	bne.n	800a4a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2208      	movs	r2, #8
 800a486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 f838 	bl	800a4fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2208      	movs	r2, #8
 800a492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e029      	b.n	800a4f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	69db      	ldr	r3, [r3, #28]
 800a4a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4b0:	d111      	bne.n	800a4d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f81e 	bl	800a4fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2220      	movs	r2, #32
 800a4c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e00f      	b.n	800a4f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	69da      	ldr	r2, [r3, #28]
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	4013      	ands	r3, r2
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	bf0c      	ite	eq
 800a4e6:	2301      	moveq	r3, #1
 800a4e8:	2300      	movne	r3, #0
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d0a6      	beq.n	800a442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b095      	sub	sp, #84	@ 0x54
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50e:	e853 3f00 	ldrex	r3, [r3]
 800a512:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a516:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a51a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	461a      	mov	r2, r3
 800a522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a524:	643b      	str	r3, [r7, #64]	@ 0x40
 800a526:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a528:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a52a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a52c:	e841 2300 	strex	r3, r2, [r1]
 800a530:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1e6      	bne.n	800a506 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	3308      	adds	r3, #8
 800a53e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	e853 3f00 	ldrex	r3, [r3]
 800a546:	61fb      	str	r3, [r7, #28]
   return(result);
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	f023 0301 	bic.w	r3, r3, #1
 800a54e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3308      	adds	r3, #8
 800a556:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a558:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a55a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a55e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a560:	e841 2300 	strex	r3, r2, [r1]
 800a564:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1e5      	bne.n	800a538 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a570:	2b01      	cmp	r3, #1
 800a572:	d118      	bne.n	800a5a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	e853 3f00 	ldrex	r3, [r3]
 800a580:	60bb      	str	r3, [r7, #8]
   return(result);
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f023 0310 	bic.w	r3, r3, #16
 800a588:	647b      	str	r3, [r7, #68]	@ 0x44
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a592:	61bb      	str	r3, [r7, #24]
 800a594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a596:	6979      	ldr	r1, [r7, #20]
 800a598:	69ba      	ldr	r2, [r7, #24]
 800a59a:	e841 2300 	strex	r3, r2, [r1]
 800a59e:	613b      	str	r3, [r7, #16]
   return(result);
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1e6      	bne.n	800a574 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2220      	movs	r2, #32
 800a5aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a5ba:	bf00      	nop
 800a5bc:	3754      	adds	r7, #84	@ 0x54
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	f107 0014 	add.w	r0, r7, #20
 800a5d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	b004      	add	sp, #16
 800a5e6:	4770      	bx	lr

0800a5e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a5f8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a5fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	b29a      	uxth	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a616:	b480      	push	{r7}
 800a618:	b085      	sub	sp, #20
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a61e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a622:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	b29b      	uxth	r3, r3
 800a630:	43db      	mvns	r3, r3
 800a632:	b29b      	uxth	r3, r3
 800a634:	4013      	ands	r3, r2
 800a636:	b29a      	uxth	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a666:	b084      	sub	sp, #16
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	f107 0014 	add.w	r0, r7, #20
 800a674:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	b004      	add	sp, #16
 800a6a6:	4770      	bx	lr

0800a6a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b09d      	sub	sp, #116	@ 0x74
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4413      	add	r3, r2
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a6ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	78db      	ldrb	r3, [r3, #3]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d81f      	bhi.n	800a71a <USB_ActivateEndpoint+0x72>
 800a6da:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e0 <USB_ActivateEndpoint+0x38>)
 800a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e0:	0800a6f1 	.word	0x0800a6f1
 800a6e4:	0800a70d 	.word	0x0800a70d
 800a6e8:	0800a723 	.word	0x0800a723
 800a6ec:	0800a6ff 	.word	0x0800a6ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a6f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a6f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a6f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a6fc:	e012      	b.n	800a724 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a6fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a702:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a706:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a70a:	e00b      	b.n	800a724 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a70c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a710:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a714:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a718:	e004      	b.n	800a724 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800a720:	e000      	b.n	800a724 <USB_ActivateEndpoint+0x7c>
      break;
 800a722:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	441a      	add	r2, r3
 800a72e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a73a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a73e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a742:	b29b      	uxth	r3, r3
 800a744:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	b29b      	uxth	r3, r3
 800a754:	b21b      	sxth	r3, r3
 800a756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a75a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a75e:	b21a      	sxth	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	b21b      	sxth	r3, r3
 800a766:	4313      	orrs	r3, r2
 800a768:	b21b      	sxth	r3, r3
 800a76a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	441a      	add	r2, r3
 800a778:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a77c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	7b1b      	ldrb	r3, [r3, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	f040 8178 	bne.w	800aa8a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	785b      	ldrb	r3, [r3, #1]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 8084 	beq.w	800a8ac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	61bb      	str	r3, [r7, #24]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	61bb      	str	r3, [r7, #24]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	00da      	lsls	r2, r3, #3
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	88db      	ldrh	r3, [r3, #6]
 800a7cc:	085b      	lsrs	r3, r3, #1
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4413      	add	r3, r2
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	827b      	strh	r3, [r7, #18]
 800a7e6:	8a7b      	ldrh	r3, [r7, #18]
 800a7e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d01b      	beq.n	800a828 <USB_ActivateEndpoint+0x180>
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a806:	823b      	strh	r3, [r7, #16]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	441a      	add	r2, r3
 800a812:	8a3b      	ldrh	r3, [r7, #16]
 800a814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a81c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a820:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a824:	b29b      	uxth	r3, r3
 800a826:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	78db      	ldrb	r3, [r3, #3]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d020      	beq.n	800a872 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a846:	81bb      	strh	r3, [r7, #12]
 800a848:	89bb      	ldrh	r3, [r7, #12]
 800a84a:	f083 0320 	eor.w	r3, r3, #32
 800a84e:	81bb      	strh	r3, [r7, #12]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	441a      	add	r2, r3
 800a85a:	89bb      	ldrh	r3, [r7, #12]
 800a85c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	8013      	strh	r3, [r2, #0]
 800a870:	e2d5      	b.n	800ae1e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	881b      	ldrh	r3, [r3, #0]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a888:	81fb      	strh	r3, [r7, #14]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	441a      	add	r2, r3
 800a894:	89fb      	ldrh	r3, [r7, #14]
 800a896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a89a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a89e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	8013      	strh	r3, [r2, #0]
 800a8aa:	e2b8      	b.n	800ae1e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8bc:	4413      	add	r3, r2
 800a8be:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	00da      	lsls	r2, r3, #3
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	88db      	ldrh	r3, [r3, #6]
 800a8d4:	085b      	lsrs	r3, r3, #1
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8de:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	4413      	add	r3, r2
 800a8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	00da      	lsls	r2, r3, #3
 800a8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a902:	627b      	str	r3, [r7, #36]	@ 0x24
 800a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	b29b      	uxth	r3, r3
 800a90a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a90e:	b29a      	uxth	r2, r3
 800a910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a912:	801a      	strh	r2, [r3, #0]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	2b3e      	cmp	r3, #62	@ 0x3e
 800a91a:	d91d      	bls.n	800a958 <USB_ActivateEndpoint+0x2b0>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	095b      	lsrs	r3, r3, #5
 800a922:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	f003 031f 	and.w	r3, r3, #31
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d102      	bne.n	800a936 <USB_ActivateEndpoint+0x28e>
 800a930:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a932:	3b01      	subs	r3, #1
 800a934:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a93e:	b29b      	uxth	r3, r3
 800a940:	029b      	lsls	r3, r3, #10
 800a942:	b29b      	uxth	r3, r3
 800a944:	4313      	orrs	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a94c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a950:	b29a      	uxth	r2, r3
 800a952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a954:	801a      	strh	r2, [r3, #0]
 800a956:	e026      	b.n	800a9a6 <USB_ActivateEndpoint+0x2fe>
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10a      	bne.n	800a976 <USB_ActivateEndpoint+0x2ce>
 800a960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a962:	881b      	ldrh	r3, [r3, #0]
 800a964:	b29b      	uxth	r3, r3
 800a966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a96a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a96e:	b29a      	uxth	r2, r3
 800a970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a972:	801a      	strh	r2, [r3, #0]
 800a974:	e017      	b.n	800a9a6 <USB_ActivateEndpoint+0x2fe>
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	085b      	lsrs	r3, r3, #1
 800a97c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	d002      	beq.n	800a990 <USB_ActivateEndpoint+0x2e8>
 800a98a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a98c:	3301      	adds	r3, #1
 800a98e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	b29a      	uxth	r2, r3
 800a996:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a998:	b29b      	uxth	r3, r3
 800a99a:	029b      	lsls	r3, r3, #10
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a9b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d01b      	beq.n	800a9f6 <USB_ActivateEndpoint+0x34e>
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	881b      	ldrh	r3, [r3, #0]
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9d4:	843b      	strh	r3, [r7, #32]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	441a      	add	r2, r3
 800a9e0:	8c3b      	ldrh	r3, [r7, #32]
 800a9e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a9ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d124      	bne.n	800aa48 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa14:	83bb      	strh	r3, [r7, #28]
 800aa16:	8bbb      	ldrh	r3, [r7, #28]
 800aa18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa1c:	83bb      	strh	r3, [r7, #28]
 800aa1e:	8bbb      	ldrh	r3, [r7, #28]
 800aa20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa24:	83bb      	strh	r3, [r7, #28]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	441a      	add	r2, r3
 800aa30:	8bbb      	ldrh	r3, [r7, #28]
 800aa32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	8013      	strh	r3, [r2, #0]
 800aa46:	e1ea      	b.n	800ae1e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	4413      	add	r3, r2
 800aa52:	881b      	ldrh	r3, [r3, #0]
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa5e:	83fb      	strh	r3, [r7, #30]
 800aa60:	8bfb      	ldrh	r3, [r7, #30]
 800aa62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa66:	83fb      	strh	r3, [r7, #30]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	441a      	add	r2, r3
 800aa72:	8bfb      	ldrh	r3, [r7, #30]
 800aa74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	8013      	strh	r3, [r2, #0]
 800aa88:	e1c9      	b.n	800ae1e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	78db      	ldrb	r3, [r3, #3]
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d11e      	bne.n	800aad0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aaa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaa8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	441a      	add	r2, r3
 800aab6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800aaba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aabe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aac2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800aac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	8013      	strh	r3, [r2, #0]
 800aace:	e01d      	b.n	800ab0c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	b29b      	uxth	r3, r3
 800aade:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800aae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aae6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	441a      	add	r2, r3
 800aaf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800aaf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aafc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	461a      	mov	r2, r3
 800ab1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab1c:	4413      	add	r3, r2
 800ab1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	00da      	lsls	r2, r3, #3
 800ab26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab28:	4413      	add	r3, r2
 800ab2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	891b      	ldrh	r3, [r3, #8]
 800ab34:	085b      	lsrs	r3, r3, #1
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	005b      	lsls	r3, r3, #1
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab3e:	801a      	strh	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab50:	4413      	add	r3, r2
 800ab52:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	00da      	lsls	r2, r3, #3
 800ab5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ab62:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	895b      	ldrh	r3, [r3, #10]
 800ab68:	085b      	lsrs	r3, r3, #1
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	005b      	lsls	r3, r3, #1
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab72:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	785b      	ldrb	r3, [r3, #1]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f040 8093 	bne.w	800aca4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800ab8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ab92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d01b      	beq.n	800abd2 <USB_ActivateEndpoint+0x52a>
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abb0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	441a      	add	r2, r3
 800abbc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800abca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abce:	b29b      	uxth	r3, r3
 800abd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	881b      	ldrh	r3, [r3, #0]
 800abde:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800abe0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800abe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d01b      	beq.n	800ac22 <USB_ActivateEndpoint+0x57a>
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac00:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	441a      	add	r2, r3
 800ac0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ac0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac38:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ac3a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ac3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac40:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ac42:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ac44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac48:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	441a      	add	r2, r3
 800ac54:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ac56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	881b      	ldrh	r3, [r3, #0]
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac80:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	441a      	add	r2, r3
 800ac8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	8013      	strh	r3, [r2, #0]
 800aca2:	e0bc      	b.n	800ae1e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	881b      	ldrh	r3, [r3, #0]
 800acb0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800acb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800acb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d01d      	beq.n	800acfc <USB_ActivateEndpoint+0x654>
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	881b      	ldrh	r3, [r3, #0]
 800accc:	b29b      	uxth	r3, r3
 800acce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acd6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	441a      	add	r2, r3
 800ace4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ace8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800acf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800ad0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800ad10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d01d      	beq.n	800ad54 <USB_ActivateEndpoint+0x6ac>
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad2e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	441a      	add	r2, r3
 800ad3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800ad40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	78db      	ldrb	r3, [r3, #3]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d024      	beq.n	800ada6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad72:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ad76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ad7a:	f083 0320 	eor.w	r3, r3, #32
 800ad7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	441a      	add	r2, r3
 800ad8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ad90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	8013      	strh	r3, [r2, #0]
 800ada4:	e01d      	b.n	800ade2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	881b      	ldrh	r3, [r3, #0]
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	441a      	add	r2, r3
 800adca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800adce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800add2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800add6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adde:	b29b      	uxth	r3, r3
 800ade0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	881b      	ldrh	r3, [r3, #0]
 800adee:	b29b      	uxth	r3, r3
 800adf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800adf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adf8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	441a      	add	r2, r3
 800ae06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ae0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ae1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3774      	adds	r7, #116	@ 0x74
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop

0800ae30 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b08d      	sub	sp, #52	@ 0x34
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	7b1b      	ldrb	r3, [r3, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f040 808e 	bne.w	800af60 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	785b      	ldrb	r3, [r3, #1]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d044      	beq.n	800aed6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	81bb      	strh	r3, [r7, #12]
 800ae5a:	89bb      	ldrh	r3, [r7, #12]
 800ae5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d01b      	beq.n	800ae9c <USB_DeactivateEndpoint+0x6c>
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4413      	add	r3, r2
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae7a:	817b      	strh	r3, [r7, #10]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	441a      	add	r2, r3
 800ae86:	897b      	ldrh	r3, [r7, #10]
 800ae88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aeb2:	813b      	strh	r3, [r7, #8]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	441a      	add	r2, r3
 800aebe:	893b      	ldrh	r3, [r7, #8]
 800aec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	8013      	strh	r3, [r2, #0]
 800aed4:	e192      	b.n	800b1fc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4413      	add	r3, r2
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	827b      	strh	r3, [r7, #18]
 800aee4:	8a7b      	ldrh	r3, [r7, #18]
 800aee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d01b      	beq.n	800af26 <USB_DeactivateEndpoint+0xf6>
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af04:	823b      	strh	r3, [r7, #16]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	441a      	add	r2, r3
 800af10:	8a3b      	ldrh	r3, [r7, #16]
 800af12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af22:	b29b      	uxth	r3, r3
 800af24:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	b29b      	uxth	r3, r3
 800af34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af3c:	81fb      	strh	r3, [r7, #14]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	441a      	add	r2, r3
 800af48:	89fb      	ldrh	r3, [r7, #14]
 800af4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	8013      	strh	r3, [r2, #0]
 800af5e:	e14d      	b.n	800b1fc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	785b      	ldrb	r3, [r3, #1]
 800af64:	2b00      	cmp	r3, #0
 800af66:	f040 80a5 	bne.w	800b0b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	881b      	ldrh	r3, [r3, #0]
 800af76:	843b      	strh	r3, [r7, #32]
 800af78:	8c3b      	ldrh	r3, [r7, #32]
 800af7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d01b      	beq.n	800afba <USB_DeactivateEndpoint+0x18a>
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	b29b      	uxth	r3, r3
 800af90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af98:	83fb      	strh	r3, [r7, #30]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	441a      	add	r2, r3
 800afa4:	8bfb      	ldrh	r3, [r7, #30]
 800afa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800afb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	83bb      	strh	r3, [r7, #28]
 800afc8:	8bbb      	ldrh	r3, [r7, #28]
 800afca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d01b      	beq.n	800b00a <USB_DeactivateEndpoint+0x1da>
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4413      	add	r3, r2
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afe8:	837b      	strh	r3, [r7, #26]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	441a      	add	r2, r3
 800aff4:	8b7b      	ldrh	r3, [r7, #26]
 800aff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800affa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800affe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b002:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b006:	b29b      	uxth	r3, r3
 800b008:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	881b      	ldrh	r3, [r3, #0]
 800b016:	b29b      	uxth	r3, r3
 800b018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b01c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b020:	833b      	strh	r3, [r7, #24]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	441a      	add	r2, r3
 800b02c:	8b3b      	ldrh	r3, [r7, #24]
 800b02e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b03a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b03e:	b29b      	uxth	r3, r3
 800b040:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	b29b      	uxth	r3, r3
 800b050:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b058:	82fb      	strh	r3, [r7, #22]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	441a      	add	r2, r3
 800b064:	8afb      	ldrh	r3, [r7, #22]
 800b066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b06a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b06e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b076:	b29b      	uxth	r3, r3
 800b078:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	881b      	ldrh	r3, [r3, #0]
 800b086:	b29b      	uxth	r3, r3
 800b088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b08c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b090:	82bb      	strh	r3, [r7, #20]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	441a      	add	r2, r3
 800b09c:	8abb      	ldrh	r3, [r7, #20]
 800b09e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	8013      	strh	r3, [r2, #0]
 800b0b2:	e0a3      	b.n	800b1fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	881b      	ldrh	r3, [r3, #0]
 800b0c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b0c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b0c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d01b      	beq.n	800b104 <USB_DeactivateEndpoint+0x2d4>
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	441a      	add	r2, r3
 800b0ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b0f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b0fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b100:	b29b      	uxth	r3, r3
 800b102:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4413      	add	r3, r2
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b112:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d01b      	beq.n	800b154 <USB_DeactivateEndpoint+0x324>
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4413      	add	r3, r2
 800b126:	881b      	ldrh	r3, [r3, #0]
 800b128:	b29b      	uxth	r3, r3
 800b12a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b12e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b132:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	441a      	add	r2, r3
 800b13e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b14c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b150:	b29b      	uxth	r3, r3
 800b152:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	b29b      	uxth	r3, r3
 800b162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b16a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	441a      	add	r2, r3
 800b176:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b178:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b17c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b180:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b188:	b29b      	uxth	r3, r3
 800b18a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	881b      	ldrh	r3, [r3, #0]
 800b198:	b29b      	uxth	r3, r3
 800b19a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b19e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	441a      	add	r2, r3
 800b1ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4413      	add	r3, r2
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b1d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1da:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	441a      	add	r2, r3
 800b1e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b1e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3734      	adds	r7, #52	@ 0x34
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b0c2      	sub	sp, #264	@ 0x108
 800b20e:	af00      	add	r7, sp, #0
 800b210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b218:	6018      	str	r0, [r3, #0]
 800b21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b21e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b222:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	785b      	ldrb	r3, [r3, #1]
 800b230:	2b01      	cmp	r3, #1
 800b232:	f040 86b7 	bne.w	800bfa4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b23a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	699a      	ldr	r2, [r3, #24]
 800b242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d908      	bls.n	800b264 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b262:	e007      	b.n	800b274 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	7b1b      	ldrb	r3, [r3, #12]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d13a      	bne.n	800b2fa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	6959      	ldr	r1, [r3, #20]
 800b290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	88da      	ldrh	r2, [r3, #6]
 800b29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b2a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b2aa:	6800      	ldr	r0, [r0, #0]
 800b2ac:	f001 fcb9 	bl	800cc22 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b2b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	613b      	str	r3, [r7, #16]
 800b2bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	613b      	str	r3, [r7, #16]
 800b2d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	00da      	lsls	r2, r3, #3
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	801a      	strh	r2, [r3, #0]
 800b2f6:	f000 be1f 	b.w	800bf38 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b2fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	78db      	ldrb	r3, [r3, #3]
 800b306:	2b02      	cmp	r3, #2
 800b308:	f040 8462 	bne.w	800bbd0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b30c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6a1a      	ldr	r2, [r3, #32]
 800b318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b31c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	429a      	cmp	r2, r3
 800b326:	f240 83df 	bls.w	800bae8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b32a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b32e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	b29b      	uxth	r3, r3
 800b348:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b34c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b350:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	441a      	add	r2, r3
 800b36e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b37a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b37e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b382:	b29b      	uxth	r3, r3
 800b384:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b38a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6a1a      	ldr	r2, [r3, #32]
 800b392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b396:	1ad2      	subs	r2, r2, r3
 800b398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b39c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	881b      	ldrh	r3, [r3, #0]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 81c7 	beq.w	800b75a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b3cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	785b      	ldrb	r3, [r3, #1]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d177      	bne.n	800b4d8 <USB_EPStartXfer+0x2ce>
 800b3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b402:	b29b      	uxth	r3, r3
 800b404:	461a      	mov	r2, r3
 800b406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b408:	4413      	add	r3, r2
 800b40a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b40c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	00da      	lsls	r2, r3, #3
 800b41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41c:	4413      	add	r3, r2
 800b41e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b422:	627b      	str	r3, [r7, #36]	@ 0x24
 800b424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b426:	881b      	ldrh	r3, [r3, #0]
 800b428:	b29b      	uxth	r3, r3
 800b42a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b42e:	b29a      	uxth	r2, r3
 800b430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b432:	801a      	strh	r2, [r3, #0]
 800b434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b438:	2b3e      	cmp	r3, #62	@ 0x3e
 800b43a:	d921      	bls.n	800b480 <USB_EPStartXfer+0x276>
 800b43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b440:	095b      	lsrs	r3, r3, #5
 800b442:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b44a:	f003 031f 	and.w	r3, r3, #31
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d104      	bne.n	800b45c <USB_EPStartXfer+0x252>
 800b452:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b456:	3b01      	subs	r3, #1
 800b458:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45e:	881b      	ldrh	r3, [r3, #0]
 800b460:	b29a      	uxth	r2, r3
 800b462:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b466:	b29b      	uxth	r3, r3
 800b468:	029b      	lsls	r3, r3, #10
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	4313      	orrs	r3, r2
 800b46e:	b29b      	uxth	r3, r3
 800b470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b478:	b29a      	uxth	r2, r3
 800b47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47c:	801a      	strh	r2, [r3, #0]
 800b47e:	e050      	b.n	800b522 <USB_EPStartXfer+0x318>
 800b480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10a      	bne.n	800b49e <USB_EPStartXfer+0x294>
 800b488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b496:	b29a      	uxth	r2, r3
 800b498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49a:	801a      	strh	r2, [r3, #0]
 800b49c:	e041      	b.n	800b522 <USB_EPStartXfer+0x318>
 800b49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4a2:	085b      	lsrs	r3, r3, #1
 800b4a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4ac:	f003 0301 	and.w	r3, r3, #1
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d004      	beq.n	800b4be <USB_EPStartXfer+0x2b4>
 800b4b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c0:	881b      	ldrh	r3, [r3, #0]
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	029b      	lsls	r3, r3, #10
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d4:	801a      	strh	r2, [r3, #0]
 800b4d6:	e024      	b.n	800b522 <USB_EPStartXfer+0x318>
 800b4d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	785b      	ldrb	r3, [r3, #1]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d11c      	bne.n	800b522 <USB_EPStartXfer+0x318>
 800b4e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fc:	4413      	add	r3, r2
 800b4fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800b500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	00da      	lsls	r2, r3, #3
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	4413      	add	r3, r2
 800b512:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b520:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	895b      	ldrh	r3, [r3, #10]
 800b52e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6959      	ldr	r1, [r3, #20]
 800b53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b542:	b29b      	uxth	r3, r3
 800b544:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b548:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b54c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b550:	6800      	ldr	r0, [r0, #0]
 800b552:	f001 fb66 	bl	800cc22 <USB_WritePMA>
            ep->xfer_buff += len;
 800b556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b55a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	695a      	ldr	r2, [r3, #20]
 800b562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b566:	441a      	add	r2, r3
 800b568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b56c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	6a1a      	ldr	r2, [r3, #32]
 800b580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d90f      	bls.n	800b5b0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	6a1a      	ldr	r2, [r3, #32]
 800b59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5a0:	1ad2      	subs	r2, r2, r3
 800b5a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	621a      	str	r2, [r3, #32]
 800b5ae:	e00e      	b.n	800b5ce <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b5b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	6a1b      	ldr	r3, [r3, #32]
 800b5bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b5c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b5ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	785b      	ldrb	r3, [r3, #1]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d177      	bne.n	800b6ce <USB_EPStartXfer+0x4c4>
 800b5de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	61bb      	str	r3, [r7, #24]
 800b5ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	4413      	add	r3, r2
 800b600:	61bb      	str	r3, [r7, #24]
 800b602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	00da      	lsls	r2, r3, #3
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	4413      	add	r3, r2
 800b614:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b618:	617b      	str	r3, [r7, #20]
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b624:	b29a      	uxth	r2, r3
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	801a      	strh	r2, [r3, #0]
 800b62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b62e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b630:	d921      	bls.n	800b676 <USB_EPStartXfer+0x46c>
 800b632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b636:	095b      	lsrs	r3, r3, #5
 800b638:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b640:	f003 031f 	and.w	r3, r3, #31
 800b644:	2b00      	cmp	r3, #0
 800b646:	d104      	bne.n	800b652 <USB_EPStartXfer+0x448>
 800b648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b64c:	3b01      	subs	r3, #1
 800b64e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	881b      	ldrh	r3, [r3, #0]
 800b656:	b29a      	uxth	r2, r3
 800b658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	029b      	lsls	r3, r3, #10
 800b660:	b29b      	uxth	r3, r3
 800b662:	4313      	orrs	r3, r2
 800b664:	b29b      	uxth	r3, r3
 800b666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b66a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b66e:	b29a      	uxth	r2, r3
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	801a      	strh	r2, [r3, #0]
 800b674:	e056      	b.n	800b724 <USB_EPStartXfer+0x51a>
 800b676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10a      	bne.n	800b694 <USB_EPStartXfer+0x48a>
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	881b      	ldrh	r3, [r3, #0]
 800b682:	b29b      	uxth	r3, r3
 800b684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	801a      	strh	r2, [r3, #0]
 800b692:	e047      	b.n	800b724 <USB_EPStartXfer+0x51a>
 800b694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b698:	085b      	lsrs	r3, r3, #1
 800b69a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d004      	beq.n	800b6b4 <USB_EPStartXfer+0x4aa>
 800b6aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	881b      	ldrh	r3, [r3, #0]
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	029b      	lsls	r3, r3, #10
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	801a      	strh	r2, [r3, #0]
 800b6cc:	e02a      	b.n	800b724 <USB_EPStartXfer+0x51a>
 800b6ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	785b      	ldrb	r3, [r3, #1]
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d122      	bne.n	800b724 <USB_EPStartXfer+0x51a>
 800b6de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	623b      	str	r3, [r7, #32]
 800b6ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	4413      	add	r3, r2
 800b700:	623b      	str	r3, [r7, #32]
 800b702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	00da      	lsls	r2, r3, #3
 800b710:	6a3b      	ldr	r3, [r7, #32]
 800b712:	4413      	add	r3, r2
 800b714:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b718:	61fb      	str	r3, [r7, #28]
 800b71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b71e:	b29a      	uxth	r2, r3
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	891b      	ldrh	r3, [r3, #8]
 800b730:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6959      	ldr	r1, [r3, #20]
 800b740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b744:	b29b      	uxth	r3, r3
 800b746:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b74a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b74e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b752:	6800      	ldr	r0, [r0, #0]
 800b754:	f001 fa65 	bl	800cc22 <USB_WritePMA>
 800b758:	e3ee      	b.n	800bf38 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b75a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b75e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	785b      	ldrb	r3, [r3, #1]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d177      	bne.n	800b85a <USB_EPStartXfer+0x650>
 800b76a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b76e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b77a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b784:	b29b      	uxth	r3, r3
 800b786:	461a      	mov	r2, r3
 800b788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b78a:	4413      	add	r3, r2
 800b78c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	00da      	lsls	r2, r3, #3
 800b79c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b79e:	4413      	add	r3, r2
 800b7a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b7a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7b4:	801a      	strh	r2, [r3, #0]
 800b7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ba:	2b3e      	cmp	r3, #62	@ 0x3e
 800b7bc:	d921      	bls.n	800b802 <USB_EPStartXfer+0x5f8>
 800b7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7c2:	095b      	lsrs	r3, r3, #5
 800b7c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7cc:	f003 031f 	and.w	r3, r3, #31
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d104      	bne.n	800b7de <USB_EPStartXfer+0x5d4>
 800b7d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b7de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7e0:	881b      	ldrh	r3, [r3, #0]
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	029b      	lsls	r3, r3, #10
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7fe:	801a      	strh	r2, [r3, #0]
 800b800:	e056      	b.n	800b8b0 <USB_EPStartXfer+0x6a6>
 800b802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10a      	bne.n	800b820 <USB_EPStartXfer+0x616>
 800b80a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b80c:	881b      	ldrh	r3, [r3, #0]
 800b80e:	b29b      	uxth	r3, r3
 800b810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b818:	b29a      	uxth	r2, r3
 800b81a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b81c:	801a      	strh	r2, [r3, #0]
 800b81e:	e047      	b.n	800b8b0 <USB_EPStartXfer+0x6a6>
 800b820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b824:	085b      	lsrs	r3, r3, #1
 800b826:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b82e:	f003 0301 	and.w	r3, r3, #1
 800b832:	2b00      	cmp	r3, #0
 800b834:	d004      	beq.n	800b840 <USB_EPStartXfer+0x636>
 800b836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b83a:	3301      	adds	r3, #1
 800b83c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b842:	881b      	ldrh	r3, [r3, #0]
 800b844:	b29a      	uxth	r2, r3
 800b846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	029b      	lsls	r3, r3, #10
 800b84e:	b29b      	uxth	r3, r3
 800b850:	4313      	orrs	r3, r2
 800b852:	b29a      	uxth	r2, r3
 800b854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b856:	801a      	strh	r2, [r3, #0]
 800b858:	e02a      	b.n	800b8b0 <USB_EPStartXfer+0x6a6>
 800b85a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b85e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	785b      	ldrb	r3, [r3, #1]
 800b866:	2b01      	cmp	r3, #1
 800b868:	d122      	bne.n	800b8b0 <USB_EPStartXfer+0x6a6>
 800b86a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b86e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	653b      	str	r3, [r7, #80]	@ 0x50
 800b876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b87a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b884:	b29b      	uxth	r3, r3
 800b886:	461a      	mov	r2, r3
 800b888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b88a:	4413      	add	r3, r2
 800b88c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b88e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	00da      	lsls	r2, r3, #3
 800b89c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b89e:	4413      	add	r3, r2
 800b8a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b8a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b8b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	891b      	ldrh	r3, [r3, #8]
 800b8bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6959      	ldr	r1, [r3, #20]
 800b8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b8d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b8da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b8de:	6800      	ldr	r0, [r0, #0]
 800b8e0:	f001 f99f 	bl	800cc22 <USB_WritePMA>
            ep->xfer_buff += len;
 800b8e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	695a      	ldr	r2, [r3, #20]
 800b8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8f4:	441a      	add	r2, r3
 800b8f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6a1a      	ldr	r2, [r3, #32]
 800b90e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d90f      	bls.n	800b93e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b91e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	6a1a      	ldr	r2, [r3, #32]
 800b92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	621a      	str	r2, [r3, #32]
 800b93c:	e00e      	b.n	800b95c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b94e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2200      	movs	r2, #0
 800b95a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b95c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b960:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	643b      	str	r3, [r7, #64]	@ 0x40
 800b968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b96c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	785b      	ldrb	r3, [r3, #1]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d177      	bne.n	800ba68 <USB_EPStartXfer+0x85e>
 800b978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b97c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b992:	b29b      	uxth	r3, r3
 800b994:	461a      	mov	r2, r3
 800b996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b998:	4413      	add	r3, r2
 800b99a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b99c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	00da      	lsls	r2, r3, #3
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b9b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9b6:	881b      	ldrh	r3, [r3, #0]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9c2:	801a      	strh	r2, [r3, #0]
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b9ca:	d921      	bls.n	800ba10 <USB_EPStartXfer+0x806>
 800b9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d0:	095b      	lsrs	r3, r3, #5
 800b9d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9da:	f003 031f 	and.w	r3, r3, #31
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d104      	bne.n	800b9ec <USB_EPStartXfer+0x7e2>
 800b9e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	029b      	lsls	r3, r3, #10
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba0c:	801a      	strh	r2, [r3, #0]
 800ba0e:	e050      	b.n	800bab2 <USB_EPStartXfer+0x8a8>
 800ba10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10a      	bne.n	800ba2e <USB_EPStartXfer+0x824>
 800ba18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2a:	801a      	strh	r2, [r3, #0]
 800ba2c:	e041      	b.n	800bab2 <USB_EPStartXfer+0x8a8>
 800ba2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba32:	085b      	lsrs	r3, r3, #1
 800ba34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ba38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d004      	beq.n	800ba4e <USB_EPStartXfer+0x844>
 800ba44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba48:	3301      	adds	r3, #1
 800ba4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ba4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	029b      	lsls	r3, r3, #10
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba64:	801a      	strh	r2, [r3, #0]
 800ba66:	e024      	b.n	800bab2 <USB_EPStartXfer+0x8a8>
 800ba68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	785b      	ldrb	r3, [r3, #1]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d11c      	bne.n	800bab2 <USB_EPStartXfer+0x8a8>
 800ba78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	461a      	mov	r2, r3
 800ba8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba8c:	4413      	add	r3, r2
 800ba8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	00da      	lsls	r2, r3, #3
 800ba9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baa0:	4413      	add	r3, r2
 800baa2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800baa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baac:	b29a      	uxth	r2, r3
 800baae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bab0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	895b      	ldrh	r3, [r3, #10]
 800babe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6959      	ldr	r1, [r3, #20]
 800bace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bad8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800badc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bae0:	6800      	ldr	r0, [r0, #0]
 800bae2:	f001 f89e 	bl	800cc22 <USB_WritePMA>
 800bae6:	e227      	b.n	800bf38 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	6a1b      	ldr	r3, [r3, #32]
 800baf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800baf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bafc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4413      	add	r3, r2
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800bb1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb1e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800bb22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	441a      	add	r2, r3
 800bb3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bb40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bb54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	461a      	mov	r2, r3
 800bb72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb74:	4413      	add	r3, r2
 800bb76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	00da      	lsls	r2, r3, #3
 800bb86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb88:	4413      	add	r3, r2
 800bb8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bb8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bb9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	891b      	ldrh	r3, [r3, #8]
 800bba6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6959      	ldr	r1, [r3, #20]
 800bbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bbc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bbc4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bbc8:	6800      	ldr	r0, [r0, #0]
 800bbca:	f001 f82a 	bl	800cc22 <USB_WritePMA>
 800bbce:	e1b3      	b.n	800bf38 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bbd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	6a1a      	ldr	r2, [r3, #32]
 800bbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbe0:	1ad2      	subs	r2, r2, r3
 800bbe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bbee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 80c6 	beq.w	800bda2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bc16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	673b      	str	r3, [r7, #112]	@ 0x70
 800bc22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	785b      	ldrb	r3, [r3, #1]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d177      	bne.n	800bd22 <USB_EPStartXfer+0xb18>
 800bc32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	461a      	mov	r2, r3
 800bc50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc52:	4413      	add	r3, r2
 800bc54:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	00da      	lsls	r2, r3, #3
 800bc64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc66:	4413      	add	r3, r2
 800bc68:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bc6c:	667b      	str	r3, [r7, #100]	@ 0x64
 800bc6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc7c:	801a      	strh	r2, [r3, #0]
 800bc7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc82:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc84:	d921      	bls.n	800bcca <USB_EPStartXfer+0xac0>
 800bc86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc8a:	095b      	lsrs	r3, r3, #5
 800bc8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc94:	f003 031f 	and.w	r3, r3, #31
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d104      	bne.n	800bca6 <USB_EPStartXfer+0xa9c>
 800bc9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bca0:	3b01      	subs	r3, #1
 800bca2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	029b      	lsls	r3, r3, #10
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcc6:	801a      	strh	r2, [r3, #0]
 800bcc8:	e050      	b.n	800bd6c <USB_EPStartXfer+0xb62>
 800bcca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <USB_EPStartXfer+0xade>
 800bcd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcd4:	881b      	ldrh	r3, [r3, #0]
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bce4:	801a      	strh	r2, [r3, #0]
 800bce6:	e041      	b.n	800bd6c <USB_EPStartXfer+0xb62>
 800bce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcec:	085b      	lsrs	r3, r3, #1
 800bcee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bcf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d004      	beq.n	800bd08 <USB_EPStartXfer+0xafe>
 800bcfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bd02:	3301      	adds	r3, #1
 800bd04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bd08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	029b      	lsls	r3, r3, #10
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd1e:	801a      	strh	r2, [r3, #0]
 800bd20:	e024      	b.n	800bd6c <USB_EPStartXfer+0xb62>
 800bd22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	785b      	ldrb	r3, [r3, #1]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d11c      	bne.n	800bd6c <USB_EPStartXfer+0xb62>
 800bd32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	461a      	mov	r2, r3
 800bd44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd46:	4413      	add	r3, r2
 800bd48:	673b      	str	r3, [r7, #112]	@ 0x70
 800bd4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	00da      	lsls	r2, r3, #3
 800bd58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd5a:	4413      	add	r3, r2
 800bd5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bd60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bd62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bd6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	895b      	ldrh	r3, [r3, #10]
 800bd78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6959      	ldr	r1, [r3, #20]
 800bd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bd92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bd96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bd9a:	6800      	ldr	r0, [r0, #0]
 800bd9c:	f000 ff41 	bl	800cc22 <USB_WritePMA>
 800bda0:	e0ca      	b.n	800bf38 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bda2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	785b      	ldrb	r3, [r3, #1]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d177      	bne.n	800bea2 <USB_EPStartXfer+0xc98>
 800bdb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bdbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	461a      	mov	r2, r3
 800bdd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bdd2:	4413      	add	r3, r2
 800bdd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bdd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	00da      	lsls	r2, r3, #3
 800bde4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bde6:	4413      	add	r3, r2
 800bde8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bdec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bdee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bdfc:	801a      	strh	r2, [r3, #0]
 800bdfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be02:	2b3e      	cmp	r3, #62	@ 0x3e
 800be04:	d921      	bls.n	800be4a <USB_EPStartXfer+0xc40>
 800be06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be0a:	095b      	lsrs	r3, r3, #5
 800be0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800be10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be14:	f003 031f 	and.w	r3, r3, #31
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d104      	bne.n	800be26 <USB_EPStartXfer+0xc1c>
 800be1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800be20:	3b01      	subs	r3, #1
 800be22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800be26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800be30:	b29b      	uxth	r3, r3
 800be32:	029b      	lsls	r3, r3, #10
 800be34:	b29b      	uxth	r3, r3
 800be36:	4313      	orrs	r3, r2
 800be38:	b29b      	uxth	r3, r3
 800be3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be42:	b29a      	uxth	r2, r3
 800be44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be46:	801a      	strh	r2, [r3, #0]
 800be48:	e05c      	b.n	800bf04 <USB_EPStartXfer+0xcfa>
 800be4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10a      	bne.n	800be68 <USB_EPStartXfer+0xc5e>
 800be52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	b29b      	uxth	r3, r3
 800be58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be60:	b29a      	uxth	r2, r3
 800be62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be64:	801a      	strh	r2, [r3, #0]
 800be66:	e04d      	b.n	800bf04 <USB_EPStartXfer+0xcfa>
 800be68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be6c:	085b      	lsrs	r3, r3, #1
 800be6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800be72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be76:	f003 0301 	and.w	r3, r3, #1
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d004      	beq.n	800be88 <USB_EPStartXfer+0xc7e>
 800be7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800be82:	3301      	adds	r3, #1
 800be84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800be88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800be92:	b29b      	uxth	r3, r3
 800be94:	029b      	lsls	r3, r3, #10
 800be96:	b29b      	uxth	r3, r3
 800be98:	4313      	orrs	r3, r2
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be9e:	801a      	strh	r2, [r3, #0]
 800bea0:	e030      	b.n	800bf04 <USB_EPStartXfer+0xcfa>
 800bea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	785b      	ldrb	r3, [r3, #1]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d128      	bne.n	800bf04 <USB_EPStartXfer+0xcfa>
 800beb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bec4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bece:	b29b      	uxth	r3, r3
 800bed0:	461a      	mov	r2, r3
 800bed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bed6:	4413      	add	r3, r2
 800bed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bedc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	00da      	lsls	r2, r3, #3
 800beea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800beee:	4413      	add	r3, r2
 800bef0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bef4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800befc:	b29a      	uxth	r2, r3
 800befe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bf02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bf04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	891b      	ldrh	r3, [r3, #8]
 800bf10:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6959      	ldr	r1, [r3, #20]
 800bf20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bf2a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bf2e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bf32:	6800      	ldr	r0, [r0, #0]
 800bf34:	f000 fe75 	bl	800cc22 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bf38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf5e:	817b      	strh	r3, [r7, #10]
 800bf60:	897b      	ldrh	r3, [r7, #10]
 800bf62:	f083 0310 	eor.w	r3, r3, #16
 800bf66:	817b      	strh	r3, [r7, #10]
 800bf68:	897b      	ldrh	r3, [r7, #10]
 800bf6a:	f083 0320 	eor.w	r3, r3, #32
 800bf6e:	817b      	strh	r3, [r7, #10]
 800bf70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	441a      	add	r2, r3
 800bf8a:	897b      	ldrh	r3, [r7, #10]
 800bf8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	8013      	strh	r3, [r2, #0]
 800bfa0:	f000 bcde 	b.w	800c960 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bfa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	7b1b      	ldrb	r3, [r3, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f040 80bb 	bne.w	800c12c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bfb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	699a      	ldr	r2, [r3, #24]
 800bfc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d917      	bls.n	800c002 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800bfd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800bfe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	699a      	ldr	r2, [r3, #24]
 800bfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff2:	1ad2      	subs	r2, r2, r3
 800bff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	619a      	str	r2, [r3, #24]
 800c000:	e00e      	b.n	800c020 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800c012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2200      	movs	r2, #0
 800c01e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c02e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	461a      	mov	r2, r3
 800c040:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c044:	4413      	add	r3, r2
 800c046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c04e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	00da      	lsls	r2, r3, #3
 800c058:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c05c:	4413      	add	r3, r2
 800c05e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c072:	b29a      	uxth	r2, r3
 800c074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c078:	801a      	strh	r2, [r3, #0]
 800c07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c07e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c080:	d924      	bls.n	800c0cc <USB_EPStartXfer+0xec2>
 800c082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c086:	095b      	lsrs	r3, r3, #5
 800c088:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c090:	f003 031f 	and.w	r3, r3, #31
 800c094:	2b00      	cmp	r3, #0
 800c096:	d104      	bne.n	800c0a2 <USB_EPStartXfer+0xe98>
 800c098:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c09c:	3b01      	subs	r3, #1
 800c09e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c0a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	029b      	lsls	r3, r3, #10
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0c6:	801a      	strh	r2, [r3, #0]
 800c0c8:	f000 bc10 	b.w	800c8ec <USB_EPStartXfer+0x16e2>
 800c0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10c      	bne.n	800c0ee <USB_EPStartXfer+0xee4>
 800c0d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0d8:	881b      	ldrh	r3, [r3, #0]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0ea:	801a      	strh	r2, [r3, #0]
 800c0ec:	e3fe      	b.n	800c8ec <USB_EPStartXfer+0x16e2>
 800c0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0f2:	085b      	lsrs	r3, r3, #1
 800c0f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0fc:	f003 0301 	and.w	r3, r3, #1
 800c100:	2b00      	cmp	r3, #0
 800c102:	d004      	beq.n	800c10e <USB_EPStartXfer+0xf04>
 800c104:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c108:	3301      	adds	r3, #1
 800c10a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c10e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c112:	881b      	ldrh	r3, [r3, #0]
 800c114:	b29a      	uxth	r2, r3
 800c116:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	029b      	lsls	r3, r3, #10
 800c11e:	b29b      	uxth	r3, r3
 800c120:	4313      	orrs	r3, r2
 800c122:	b29a      	uxth	r2, r3
 800c124:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c128:	801a      	strh	r2, [r3, #0]
 800c12a:	e3df      	b.n	800c8ec <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	78db      	ldrb	r3, [r3, #3]
 800c138:	2b02      	cmp	r3, #2
 800c13a:	f040 8218 	bne.w	800c56e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c13e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	785b      	ldrb	r3, [r3, #1]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f040 809d 	bne.w	800c28a <USB_EPStartXfer+0x1080>
 800c150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c154:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c15e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c162:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	461a      	mov	r2, r3
 800c170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c174:	4413      	add	r3, r2
 800c176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c17a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c17e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	00da      	lsls	r2, r3, #3
 800c188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c18c:	4413      	add	r3, r2
 800c18e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c192:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c1a8:	801a      	strh	r2, [r3, #0]
 800c1aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	691b      	ldr	r3, [r3, #16]
 800c1b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c1b8:	d92b      	bls.n	800c212 <USB_EPStartXfer+0x1008>
 800c1ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	095b      	lsrs	r3, r3, #5
 800c1c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c1cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	f003 031f 	and.w	r3, r3, #31
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d104      	bne.n	800c1ea <USB_EPStartXfer+0xfe0>
 800c1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c1ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	029b      	lsls	r3, r3, #10
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c208:	b29a      	uxth	r2, r3
 800c20a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c20e:	801a      	strh	r2, [r3, #0]
 800c210:	e070      	b.n	800c2f4 <USB_EPStartXfer+0x10ea>
 800c212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	691b      	ldr	r3, [r3, #16]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d10c      	bne.n	800c23c <USB_EPStartXfer+0x1032>
 800c222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	b29b      	uxth	r3, r3
 800c22a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c22e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c232:	b29a      	uxth	r2, r3
 800c234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c238:	801a      	strh	r2, [r3, #0]
 800c23a:	e05b      	b.n	800c2f4 <USB_EPStartXfer+0x10ea>
 800c23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	085b      	lsrs	r3, r3, #1
 800c24a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c24e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	f003 0301 	and.w	r3, r3, #1
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d004      	beq.n	800c26c <USB_EPStartXfer+0x1062>
 800c262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c266:	3301      	adds	r3, #1
 800c268:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c26c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	b29a      	uxth	r2, r3
 800c274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c278:	b29b      	uxth	r3, r3
 800c27a:	029b      	lsls	r3, r3, #10
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	4313      	orrs	r3, r2
 800c280:	b29a      	uxth	r2, r3
 800c282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c286:	801a      	strh	r2, [r3, #0]
 800c288:	e034      	b.n	800c2f4 <USB_EPStartXfer+0x10ea>
 800c28a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c28e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	785b      	ldrb	r3, [r3, #1]
 800c296:	2b01      	cmp	r3, #1
 800c298:	d12c      	bne.n	800c2f4 <USB_EPStartXfer+0x10ea>
 800c29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c29e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c2a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c2be:	4413      	add	r3, r2
 800c2c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	00da      	lsls	r2, r3, #3
 800c2d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c2dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c2f2:	801a      	strh	r2, [r3, #0]
 800c2f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	785b      	ldrb	r3, [r3, #1]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	f040 809d 	bne.w	800c44e <USB_EPStartXfer+0x1244>
 800c314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c330:	b29b      	uxth	r3, r3
 800c332:	461a      	mov	r2, r3
 800c334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c338:	4413      	add	r3, r2
 800c33a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c33e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	00da      	lsls	r2, r3, #3
 800c34c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c350:	4413      	add	r3, r2
 800c352:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c356:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c35a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	b29b      	uxth	r3, r3
 800c362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c366:	b29a      	uxth	r2, r3
 800c368:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c36c:	801a      	strh	r2, [r3, #0]
 800c36e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c37c:	d92b      	bls.n	800c3d6 <USB_EPStartXfer+0x11cc>
 800c37e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	095b      	lsrs	r3, r3, #5
 800c38c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	f003 031f 	and.w	r3, r3, #31
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d104      	bne.n	800c3ae <USB_EPStartXfer+0x11a4>
 800c3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c3ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	029b      	lsls	r3, r3, #10
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c3d2:	801a      	strh	r2, [r3, #0]
 800c3d4:	e069      	b.n	800c4aa <USB_EPStartXfer+0x12a0>
 800c3d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10c      	bne.n	800c400 <USB_EPStartXfer+0x11f6>
 800c3e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c3ea:	881b      	ldrh	r3, [r3, #0]
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c3fc:	801a      	strh	r2, [r3, #0]
 800c3fe:	e054      	b.n	800c4aa <USB_EPStartXfer+0x12a0>
 800c400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	085b      	lsrs	r3, r3, #1
 800c40e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	691b      	ldr	r3, [r3, #16]
 800c41e:	f003 0301 	and.w	r3, r3, #1
 800c422:	2b00      	cmp	r3, #0
 800c424:	d004      	beq.n	800c430 <USB_EPStartXfer+0x1226>
 800c426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c42a:	3301      	adds	r3, #1
 800c42c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c434:	881b      	ldrh	r3, [r3, #0]
 800c436:	b29a      	uxth	r2, r3
 800c438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	029b      	lsls	r3, r3, #10
 800c440:	b29b      	uxth	r3, r3
 800c442:	4313      	orrs	r3, r2
 800c444:	b29a      	uxth	r2, r3
 800c446:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c44a:	801a      	strh	r2, [r3, #0]
 800c44c:	e02d      	b.n	800c4aa <USB_EPStartXfer+0x12a0>
 800c44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	785b      	ldrb	r3, [r3, #1]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d125      	bne.n	800c4aa <USB_EPStartXfer+0x12a0>
 800c45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	461a      	mov	r2, r3
 800c470:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c474:	4413      	add	r3, r2
 800c476:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c47a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c47e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	00da      	lsls	r2, r3, #3
 800c488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c48c:	4413      	add	r3, r2
 800c48e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c49a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	691b      	ldr	r3, [r3, #16]
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c4a8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f000 8218 	beq.w	800c8ec <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c4bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c4dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c4e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d005      	beq.n	800c4f4 <USB_EPStartXfer+0x12ea>
 800c4e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c4ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10d      	bne.n	800c510 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c4f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c4f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f040 81f5 	bne.w	800c8ec <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c502:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f040 81ee 	bne.w	800c8ec <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c51e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c536:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c53a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c53e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	441a      	add	r2, r3
 800c554:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c55c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c564:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c568:	b29b      	uxth	r3, r3
 800c56a:	8013      	strh	r3, [r2, #0]
 800c56c:	e1be      	b.n	800c8ec <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	78db      	ldrb	r3, [r3, #3]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	f040 81b4 	bne.w	800c8e8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	699a      	ldr	r2, [r3, #24]
 800c58c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d917      	bls.n	800c5cc <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c59c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c5ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	699a      	ldr	r2, [r3, #24]
 800c5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5bc:	1ad2      	subs	r2, r2, r3
 800c5be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	619a      	str	r2, [r3, #24]
 800c5ca:	e00e      	b.n	800c5ea <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c5cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c5dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c5ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	785b      	ldrb	r3, [r3, #1]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f040 8085 	bne.w	800c706 <USB_EPStartXfer+0x14fc>
 800c5fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c60e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c618:	b29b      	uxth	r3, r3
 800c61a:	461a      	mov	r2, r3
 800c61c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c620:	4413      	add	r3, r2
 800c622:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c62a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	00da      	lsls	r2, r3, #3
 800c634:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c638:	4413      	add	r3, r2
 800c63a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c63e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c646:	881b      	ldrh	r3, [r3, #0]
 800c648:	b29b      	uxth	r3, r3
 800c64a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c64e:	b29a      	uxth	r2, r3
 800c650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c654:	801a      	strh	r2, [r3, #0]
 800c656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c65a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c65c:	d923      	bls.n	800c6a6 <USB_EPStartXfer+0x149c>
 800c65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c662:	095b      	lsrs	r3, r3, #5
 800c664:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c66c:	f003 031f 	and.w	r3, r3, #31
 800c670:	2b00      	cmp	r3, #0
 800c672:	d104      	bne.n	800c67e <USB_EPStartXfer+0x1474>
 800c674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c678:	3b01      	subs	r3, #1
 800c67a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c67e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c682:	881b      	ldrh	r3, [r3, #0]
 800c684:	b29a      	uxth	r2, r3
 800c686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	029b      	lsls	r3, r3, #10
 800c68e:	b29b      	uxth	r3, r3
 800c690:	4313      	orrs	r3, r2
 800c692:	b29b      	uxth	r3, r3
 800c694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c6a2:	801a      	strh	r2, [r3, #0]
 800c6a4:	e060      	b.n	800c768 <USB_EPStartXfer+0x155e>
 800c6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10c      	bne.n	800c6c8 <USB_EPStartXfer+0x14be>
 800c6ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c6c4:	801a      	strh	r2, [r3, #0]
 800c6c6:	e04f      	b.n	800c768 <USB_EPStartXfer+0x155e>
 800c6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6cc:	085b      	lsrs	r3, r3, #1
 800c6ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d6:	f003 0301 	and.w	r3, r3, #1
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d004      	beq.n	800c6e8 <USB_EPStartXfer+0x14de>
 800c6de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c6e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c6ec:	881b      	ldrh	r3, [r3, #0]
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	029b      	lsls	r3, r3, #10
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c702:	801a      	strh	r2, [r3, #0]
 800c704:	e030      	b.n	800c768 <USB_EPStartXfer+0x155e>
 800c706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c70a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	785b      	ldrb	r3, [r3, #1]
 800c712:	2b01      	cmp	r3, #1
 800c714:	d128      	bne.n	800c768 <USB_EPStartXfer+0x155e>
 800c716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c71a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c728:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c732:	b29b      	uxth	r3, r3
 800c734:	461a      	mov	r2, r3
 800c736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c73a:	4413      	add	r3, r2
 800c73c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	00da      	lsls	r2, r3, #3
 800c74e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c752:	4413      	add	r3, r2
 800c754:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c758:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c760:	b29a      	uxth	r2, r3
 800c762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c766:	801a      	strh	r2, [r3, #0]
 800c768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c76c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c77a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	785b      	ldrb	r3, [r3, #1]
 800c782:	2b00      	cmp	r3, #0
 800c784:	f040 8085 	bne.w	800c892 <USB_EPStartXfer+0x1688>
 800c788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c78c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c79a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c7ac:	4413      	add	r3, r2
 800c7ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c7b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	00da      	lsls	r2, r3, #3
 800c7c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c7c4:	4413      	add	r3, r2
 800c7c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c7ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c7ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7da:	b29a      	uxth	r2, r3
 800c7dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c7e0:	801a      	strh	r2, [r3, #0]
 800c7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7e8:	d923      	bls.n	800c832 <USB_EPStartXfer+0x1628>
 800c7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ee:	095b      	lsrs	r3, r3, #5
 800c7f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f8:	f003 031f 	and.w	r3, r3, #31
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d104      	bne.n	800c80a <USB_EPStartXfer+0x1600>
 800c800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c804:	3b01      	subs	r3, #1
 800c806:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c80a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	b29a      	uxth	r2, r3
 800c812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c816:	b29b      	uxth	r3, r3
 800c818:	029b      	lsls	r3, r3, #10
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	4313      	orrs	r3, r2
 800c81e:	b29b      	uxth	r3, r3
 800c820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c828:	b29a      	uxth	r2, r3
 800c82a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c82e:	801a      	strh	r2, [r3, #0]
 800c830:	e05c      	b.n	800c8ec <USB_EPStartXfer+0x16e2>
 800c832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10c      	bne.n	800c854 <USB_EPStartXfer+0x164a>
 800c83a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	b29b      	uxth	r3, r3
 800c842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c850:	801a      	strh	r2, [r3, #0]
 800c852:	e04b      	b.n	800c8ec <USB_EPStartXfer+0x16e2>
 800c854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c858:	085b      	lsrs	r3, r3, #1
 800c85a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	2b00      	cmp	r3, #0
 800c868:	d004      	beq.n	800c874 <USB_EPStartXfer+0x166a>
 800c86a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c86e:	3301      	adds	r3, #1
 800c870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c880:	b29b      	uxth	r3, r3
 800c882:	029b      	lsls	r3, r3, #10
 800c884:	b29b      	uxth	r3, r3
 800c886:	4313      	orrs	r3, r2
 800c888:	b29a      	uxth	r2, r3
 800c88a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c88e:	801a      	strh	r2, [r3, #0]
 800c890:	e02c      	b.n	800c8ec <USB_EPStartXfer+0x16e2>
 800c892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	785b      	ldrb	r3, [r3, #1]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d124      	bne.n	800c8ec <USB_EPStartXfer+0x16e2>
 800c8a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c8b8:	4413      	add	r3, r2
 800c8ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	00da      	lsls	r2, r3, #3
 800c8cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c8d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c8e4:	801a      	strh	r2, [r3, #0]
 800c8e6:	e001      	b.n	800c8ec <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e03a      	b.n	800c962 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c8ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	4413      	add	r3, r2
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	b29b      	uxth	r3, r3
 800c90a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c90e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c912:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c916:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c91a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c91e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c922:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c926:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c92a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c93c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	441a      	add	r2, r3
 800c948:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c94c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c960:	2300      	movs	r3, #0
}
 800c962:	4618      	mov	r0, r3
 800c964:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	785b      	ldrb	r3, [r3, #1]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d020      	beq.n	800c9c0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4413      	add	r3, r2
 800c988:	881b      	ldrh	r3, [r3, #0]
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c994:	81bb      	strh	r3, [r7, #12]
 800c996:	89bb      	ldrh	r3, [r7, #12]
 800c998:	f083 0310 	eor.w	r3, r3, #16
 800c99c:	81bb      	strh	r3, [r7, #12]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	441a      	add	r2, r3
 800c9a8:	89bb      	ldrh	r3, [r7, #12]
 800c9aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	8013      	strh	r3, [r2, #0]
 800c9be:	e01f      	b.n	800ca00 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	4413      	add	r3, r2
 800c9ca:	881b      	ldrh	r3, [r3, #0]
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9d6:	81fb      	strh	r3, [r7, #14]
 800c9d8:	89fb      	ldrh	r3, [r7, #14]
 800c9da:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c9de:	81fb      	strh	r3, [r7, #14]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	441a      	add	r2, r3
 800c9ea:	89fb      	ldrh	r3, [r7, #14]
 800c9ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3714      	adds	r7, #20
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b087      	sub	sp, #28
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	7b1b      	ldrb	r3, [r3, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f040 809d 	bne.w	800cb5c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	785b      	ldrb	r3, [r3, #1]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d04c      	beq.n	800cac4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	823b      	strh	r3, [r7, #16]
 800ca38:	8a3b      	ldrh	r3, [r7, #16]
 800ca3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d01b      	beq.n	800ca7a <USB_EPClearStall+0x6c>
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	881b      	ldrh	r3, [r3, #0]
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca58:	81fb      	strh	r3, [r7, #14]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	441a      	add	r2, r3
 800ca64:	89fb      	ldrh	r3, [r7, #14]
 800ca66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	78db      	ldrb	r3, [r3, #3]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d06c      	beq.n	800cb5c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca98:	81bb      	strh	r3, [r7, #12]
 800ca9a:	89bb      	ldrh	r3, [r7, #12]
 800ca9c:	f083 0320 	eor.w	r3, r3, #32
 800caa0:	81bb      	strh	r3, [r7, #12]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	441a      	add	r2, r3
 800caac:	89bb      	ldrh	r3, [r7, #12]
 800caae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800caba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	8013      	strh	r3, [r2, #0]
 800cac2:	e04b      	b.n	800cb5c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	82fb      	strh	r3, [r7, #22]
 800cad2:	8afb      	ldrh	r3, [r7, #22]
 800cad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d01b      	beq.n	800cb14 <USB_EPClearStall+0x106>
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4413      	add	r3, r2
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	b29b      	uxth	r3, r3
 800caea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800caee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caf2:	82bb      	strh	r3, [r7, #20]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	441a      	add	r2, r3
 800cafe:	8abb      	ldrh	r3, [r7, #20]
 800cb00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cb0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4413      	add	r3, r2
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb2a:	827b      	strh	r3, [r7, #18]
 800cb2c:	8a7b      	ldrh	r3, [r7, #18]
 800cb2e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cb32:	827b      	strh	r3, [r7, #18]
 800cb34:	8a7b      	ldrh	r3, [r7, #18]
 800cb36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cb3a:	827b      	strh	r3, [r7, #18]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	441a      	add	r2, r3
 800cb46:	8a7b      	ldrh	r3, [r7, #18]
 800cb48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	371c      	adds	r7, #28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cb6a:	b480      	push	{r7}
 800cb6c:	b083      	sub	sp, #12
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	460b      	mov	r3, r1
 800cb74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cb76:	78fb      	ldrb	r3, [r7, #3]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d103      	bne.n	800cb84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2280      	movs	r2, #128	@ 0x80
 800cb80:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	370c      	adds	r7, #12
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cb92:	b480      	push	{r7}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cbd4:	b29a      	uxth	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800cbea:	b480      	push	{r7}
 800cbec:	b085      	sub	sp, #20
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3714      	adds	r7, #20
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	370c      	adds	r7, #12
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cc22:	b480      	push	{r7}
 800cc24:	b08b      	sub	sp, #44	@ 0x2c
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	60f8      	str	r0, [r7, #12]
 800cc2a:	60b9      	str	r1, [r7, #8]
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	461a      	mov	r2, r3
 800cc30:	460b      	mov	r3, r1
 800cc32:	80fb      	strh	r3, [r7, #6]
 800cc34:	4613      	mov	r3, r2
 800cc36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cc38:	88bb      	ldrh	r3, [r7, #4]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	085b      	lsrs	r3, r3, #1
 800cc3e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cc48:	88fa      	ldrh	r2, [r7, #6]
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cc52:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc58:	e01b      	b.n	800cc92 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	3301      	adds	r3, #1
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	021b      	lsls	r3, r3, #8
 800cc68:	b21a      	sxth	r2, r3
 800cc6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	b21b      	sxth	r3, r3
 800cc72:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	8a7a      	ldrh	r2, [r7, #18]
 800cc78:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cc7a:	6a3b      	ldr	r3, [r7, #32]
 800cc7c:	3302      	adds	r3, #2
 800cc7e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	3301      	adds	r3, #1
 800cc84:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1e0      	bne.n	800cc5a <USB_WritePMA+0x38>
  }
}
 800cc98:	bf00      	nop
 800cc9a:	bf00      	nop
 800cc9c:	372c      	adds	r7, #44	@ 0x2c
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b08b      	sub	sp, #44	@ 0x2c
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	60f8      	str	r0, [r7, #12]
 800ccae:	60b9      	str	r1, [r7, #8]
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	80fb      	strh	r3, [r7, #6]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ccbc:	88bb      	ldrh	r3, [r7, #4]
 800ccbe:	085b      	lsrs	r3, r3, #1
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cccc:	88fa      	ldrh	r2, [r7, #6]
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ccd6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccdc:	e018      	b.n	800cd10 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	881b      	ldrh	r3, [r3, #0]
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	3302      	adds	r3, #2
 800ccea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	b2da      	uxtb	r2, r3
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	0a1b      	lsrs	r3, r3, #8
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	3301      	adds	r3, #1
 800cd08:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1e3      	bne.n	800ccde <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cd16:	88bb      	ldrh	r3, [r7, #4]
 800cd18:	f003 0301 	and.w	r3, r3, #1
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d007      	beq.n	800cd32 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cd22:	6a3b      	ldr	r3, [r7, #32]
 800cd24:	881b      	ldrh	r3, [r3, #0]
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	701a      	strb	r2, [r3, #0]
  }
}
 800cd32:	bf00      	nop
 800cd34:	372c      	adds	r7, #44	@ 0x2c
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
	...

0800cd40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cd4c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cd50:	f006 fa06 	bl	8013160 <USBD_static_malloc>
 800cd54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d109      	bne.n	800cd70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	32b0      	adds	r2, #176	@ 0xb0
 800cd66:	2100      	movs	r1, #0
 800cd68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	e0d4      	b.n	800cf1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cd70:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cd74:	2100      	movs	r1, #0
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f008 fca6 	bl	80156c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	32b0      	adds	r2, #176	@ 0xb0
 800cd86:	68f9      	ldr	r1, [r7, #12]
 800cd88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	32b0      	adds	r2, #176	@ 0xb0
 800cd96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	7c1b      	ldrb	r3, [r3, #16]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d138      	bne.n	800ce1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cda8:	4b5e      	ldr	r3, [pc, #376]	@ (800cf24 <USBD_CDC_Init+0x1e4>)
 800cdaa:	7819      	ldrb	r1, [r3, #0]
 800cdac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cdb0:	2202      	movs	r2, #2
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f005 ffd6 	bl	8012d64 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cdb8:	4b5a      	ldr	r3, [pc, #360]	@ (800cf24 <USBD_CDC_Init+0x1e4>)
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	f003 020f 	and.w	r2, r3, #15
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	4413      	add	r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	440b      	add	r3, r1
 800cdcc:	3324      	adds	r3, #36	@ 0x24
 800cdce:	2201      	movs	r2, #1
 800cdd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cdd2:	4b55      	ldr	r3, [pc, #340]	@ (800cf28 <USBD_CDC_Init+0x1e8>)
 800cdd4:	7819      	ldrb	r1, [r3, #0]
 800cdd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cdda:	2202      	movs	r2, #2
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f005 ffc1 	bl	8012d64 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cde2:	4b51      	ldr	r3, [pc, #324]	@ (800cf28 <USBD_CDC_Init+0x1e8>)
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	f003 020f 	and.w	r2, r3, #15
 800cdea:	6879      	ldr	r1, [r7, #4]
 800cdec:	4613      	mov	r3, r2
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	4413      	add	r3, r2
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	440b      	add	r3, r1
 800cdf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cdfe:	4b4b      	ldr	r3, [pc, #300]	@ (800cf2c <USBD_CDC_Init+0x1ec>)
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	f003 020f 	and.w	r2, r3, #15
 800ce06:	6879      	ldr	r1, [r7, #4]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4413      	add	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	440b      	add	r3, r1
 800ce12:	3326      	adds	r3, #38	@ 0x26
 800ce14:	2210      	movs	r2, #16
 800ce16:	801a      	strh	r2, [r3, #0]
 800ce18:	e035      	b.n	800ce86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce1a:	4b42      	ldr	r3, [pc, #264]	@ (800cf24 <USBD_CDC_Init+0x1e4>)
 800ce1c:	7819      	ldrb	r1, [r3, #0]
 800ce1e:	2340      	movs	r3, #64	@ 0x40
 800ce20:	2202      	movs	r2, #2
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f005 ff9e 	bl	8012d64 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce28:	4b3e      	ldr	r3, [pc, #248]	@ (800cf24 <USBD_CDC_Init+0x1e4>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	f003 020f 	and.w	r2, r3, #15
 800ce30:	6879      	ldr	r1, [r7, #4]
 800ce32:	4613      	mov	r3, r2
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	4413      	add	r3, r2
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	440b      	add	r3, r1
 800ce3c:	3324      	adds	r3, #36	@ 0x24
 800ce3e:	2201      	movs	r2, #1
 800ce40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ce42:	4b39      	ldr	r3, [pc, #228]	@ (800cf28 <USBD_CDC_Init+0x1e8>)
 800ce44:	7819      	ldrb	r1, [r3, #0]
 800ce46:	2340      	movs	r3, #64	@ 0x40
 800ce48:	2202      	movs	r2, #2
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f005 ff8a 	bl	8012d64 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce50:	4b35      	ldr	r3, [pc, #212]	@ (800cf28 <USBD_CDC_Init+0x1e8>)
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	f003 020f 	and.w	r2, r3, #15
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	440b      	add	r3, r1
 800ce64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ce68:	2201      	movs	r2, #1
 800ce6a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ce6c:	4b2f      	ldr	r3, [pc, #188]	@ (800cf2c <USBD_CDC_Init+0x1ec>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	f003 020f 	and.w	r2, r3, #15
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4613      	mov	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	440b      	add	r3, r1
 800ce80:	3326      	adds	r3, #38	@ 0x26
 800ce82:	2210      	movs	r2, #16
 800ce84:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce86:	4b29      	ldr	r3, [pc, #164]	@ (800cf2c <USBD_CDC_Init+0x1ec>)
 800ce88:	7819      	ldrb	r1, [r3, #0]
 800ce8a:	2308      	movs	r3, #8
 800ce8c:	2203      	movs	r2, #3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f005 ff68 	bl	8012d64 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ce94:	4b25      	ldr	r3, [pc, #148]	@ (800cf2c <USBD_CDC_Init+0x1ec>)
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	f003 020f 	and.w	r2, r3, #15
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	440b      	add	r3, r1
 800cea8:	3324      	adds	r3, #36	@ 0x24
 800ceaa:	2201      	movs	r2, #1
 800ceac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	33b0      	adds	r3, #176	@ 0xb0
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4413      	add	r3, r2
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d101      	bne.n	800cee8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cee4:	2302      	movs	r3, #2
 800cee6:	e018      	b.n	800cf1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	7c1b      	ldrb	r3, [r3, #16]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10a      	bne.n	800cf06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cef0:	4b0d      	ldr	r3, [pc, #52]	@ (800cf28 <USBD_CDC_Init+0x1e8>)
 800cef2:	7819      	ldrb	r1, [r3, #0]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cefa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f006 f8ac 	bl	801305c <USBD_LL_PrepareReceive>
 800cf04:	e008      	b.n	800cf18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf06:	4b08      	ldr	r3, [pc, #32]	@ (800cf28 <USBD_CDC_Init+0x1e8>)
 800cf08:	7819      	ldrb	r1, [r3, #0]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf10:	2340      	movs	r3, #64	@ 0x40
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f006 f8a2 	bl	801305c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	200000b7 	.word	0x200000b7
 800cf28:	200000b8 	.word	0x200000b8
 800cf2c:	200000b9 	.word	0x200000b9

0800cf30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cf3c:	4b3a      	ldr	r3, [pc, #232]	@ (800d028 <USBD_CDC_DeInit+0xf8>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	4619      	mov	r1, r3
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f005 ff4c 	bl	8012de0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cf48:	4b37      	ldr	r3, [pc, #220]	@ (800d028 <USBD_CDC_DeInit+0xf8>)
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	f003 020f 	and.w	r2, r3, #15
 800cf50:	6879      	ldr	r1, [r7, #4]
 800cf52:	4613      	mov	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	440b      	add	r3, r1
 800cf5c:	3324      	adds	r3, #36	@ 0x24
 800cf5e:	2200      	movs	r2, #0
 800cf60:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cf62:	4b32      	ldr	r3, [pc, #200]	@ (800d02c <USBD_CDC_DeInit+0xfc>)
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f005 ff39 	bl	8012de0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cf6e:	4b2f      	ldr	r3, [pc, #188]	@ (800d02c <USBD_CDC_DeInit+0xfc>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	f003 020f 	and.w	r2, r3, #15
 800cf76:	6879      	ldr	r1, [r7, #4]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4413      	add	r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	440b      	add	r3, r1
 800cf82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf86:	2200      	movs	r2, #0
 800cf88:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cf8a:	4b29      	ldr	r3, [pc, #164]	@ (800d030 <USBD_CDC_DeInit+0x100>)
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	4619      	mov	r1, r3
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f005 ff25 	bl	8012de0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cf96:	4b26      	ldr	r3, [pc, #152]	@ (800d030 <USBD_CDC_DeInit+0x100>)
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	f003 020f 	and.w	r2, r3, #15
 800cf9e:	6879      	ldr	r1, [r7, #4]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4413      	add	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	440b      	add	r3, r1
 800cfaa:	3324      	adds	r3, #36	@ 0x24
 800cfac:	2200      	movs	r2, #0
 800cfae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cfb0:	4b1f      	ldr	r3, [pc, #124]	@ (800d030 <USBD_CDC_DeInit+0x100>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	f003 020f 	and.w	r2, r3, #15
 800cfb8:	6879      	ldr	r1, [r7, #4]
 800cfba:	4613      	mov	r3, r2
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	4413      	add	r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	440b      	add	r3, r1
 800cfc4:	3326      	adds	r3, #38	@ 0x26
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	32b0      	adds	r2, #176	@ 0xb0
 800cfd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d01f      	beq.n	800d01c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	33b0      	adds	r3, #176	@ 0xb0
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	4413      	add	r3, r2
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	32b0      	adds	r2, #176	@ 0xb0
 800cffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffe:	4618      	mov	r0, r3
 800d000:	f006 f8bc 	bl	801317c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	32b0      	adds	r2, #176	@ 0xb0
 800d00e:	2100      	movs	r1, #0
 800d010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	200000b7 	.word	0x200000b7
 800d02c:	200000b8 	.word	0x200000b8
 800d030:	200000b9 	.word	0x200000b9

0800d034 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b086      	sub	sp, #24
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	32b0      	adds	r2, #176	@ 0xb0
 800d048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d04c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d04e:	2300      	movs	r3, #0
 800d050:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d052:	2300      	movs	r3, #0
 800d054:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d101      	bne.n	800d064 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d060:	2303      	movs	r3, #3
 800d062:	e0bf      	b.n	800d1e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d050      	beq.n	800d112 <USBD_CDC_Setup+0xde>
 800d070:	2b20      	cmp	r3, #32
 800d072:	f040 80af 	bne.w	800d1d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	88db      	ldrh	r3, [r3, #6]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d03a      	beq.n	800d0f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	b25b      	sxtb	r3, r3
 800d084:	2b00      	cmp	r3, #0
 800d086:	da1b      	bge.n	800d0c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	33b0      	adds	r3, #176	@ 0xb0
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	4413      	add	r3, r2
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d09e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	88d2      	ldrh	r2, [r2, #6]
 800d0a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	88db      	ldrh	r3, [r3, #6]
 800d0aa:	2b07      	cmp	r3, #7
 800d0ac:	bf28      	it	cs
 800d0ae:	2307      	movcs	r3, #7
 800d0b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	89fa      	ldrh	r2, [r7, #14]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f001 fd1f 	bl	800eafc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d0be:	e090      	b.n	800d1e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	785a      	ldrb	r2, [r3, #1]
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	88db      	ldrh	r3, [r3, #6]
 800d0ce:	2b3f      	cmp	r3, #63	@ 0x3f
 800d0d0:	d803      	bhi.n	800d0da <USBD_CDC_Setup+0xa6>
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	88db      	ldrh	r3, [r3, #6]
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	e000      	b.n	800d0dc <USBD_CDC_Setup+0xa8>
 800d0da:	2240      	movs	r2, #64	@ 0x40
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d0e2:	6939      	ldr	r1, [r7, #16]
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f001 fd31 	bl	800eb54 <USBD_CtlPrepareRx>
      break;
 800d0f2:	e076      	b.n	800d1e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	33b0      	adds	r3, #176	@ 0xb0
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4413      	add	r3, r2
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	7850      	ldrb	r0, [r2, #1]
 800d10a:	2200      	movs	r2, #0
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	4798      	blx	r3
      break;
 800d110:	e067      	b.n	800d1e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	785b      	ldrb	r3, [r3, #1]
 800d116:	2b0b      	cmp	r3, #11
 800d118:	d851      	bhi.n	800d1be <USBD_CDC_Setup+0x18a>
 800d11a:	a201      	add	r2, pc, #4	@ (adr r2, 800d120 <USBD_CDC_Setup+0xec>)
 800d11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d120:	0800d151 	.word	0x0800d151
 800d124:	0800d1cd 	.word	0x0800d1cd
 800d128:	0800d1bf 	.word	0x0800d1bf
 800d12c:	0800d1bf 	.word	0x0800d1bf
 800d130:	0800d1bf 	.word	0x0800d1bf
 800d134:	0800d1bf 	.word	0x0800d1bf
 800d138:	0800d1bf 	.word	0x0800d1bf
 800d13c:	0800d1bf 	.word	0x0800d1bf
 800d140:	0800d1bf 	.word	0x0800d1bf
 800d144:	0800d1bf 	.word	0x0800d1bf
 800d148:	0800d17b 	.word	0x0800d17b
 800d14c:	0800d1a5 	.word	0x0800d1a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d107      	bne.n	800d16c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d15c:	f107 030a 	add.w	r3, r7, #10
 800d160:	2202      	movs	r2, #2
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f001 fcc9 	bl	800eafc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d16a:	e032      	b.n	800d1d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d16c:	6839      	ldr	r1, [r7, #0]
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f001 fc53 	bl	800ea1a <USBD_CtlError>
            ret = USBD_FAIL;
 800d174:	2303      	movs	r3, #3
 800d176:	75fb      	strb	r3, [r7, #23]
          break;
 800d178:	e02b      	b.n	800d1d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b03      	cmp	r3, #3
 800d184:	d107      	bne.n	800d196 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d186:	f107 030d 	add.w	r3, r7, #13
 800d18a:	2201      	movs	r2, #1
 800d18c:	4619      	mov	r1, r3
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f001 fcb4 	bl	800eafc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d194:	e01d      	b.n	800d1d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d196:	6839      	ldr	r1, [r7, #0]
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f001 fc3e 	bl	800ea1a <USBD_CtlError>
            ret = USBD_FAIL;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d1a2:	e016      	b.n	800d1d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	2b03      	cmp	r3, #3
 800d1ae:	d00f      	beq.n	800d1d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 fc31 	bl	800ea1a <USBD_CtlError>
            ret = USBD_FAIL;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d1bc:	e008      	b.n	800d1d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f001 fc2a 	bl	800ea1a <USBD_CtlError>
          ret = USBD_FAIL;
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	75fb      	strb	r3, [r7, #23]
          break;
 800d1ca:	e002      	b.n	800d1d2 <USBD_CDC_Setup+0x19e>
          break;
 800d1cc:	bf00      	nop
 800d1ce:	e008      	b.n	800d1e2 <USBD_CDC_Setup+0x1ae>
          break;
 800d1d0:	bf00      	nop
      }
      break;
 800d1d2:	e006      	b.n	800d1e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f001 fc1f 	bl	800ea1a <USBD_CtlError>
      ret = USBD_FAIL;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	75fb      	strb	r3, [r7, #23]
      break;
 800d1e0:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3718      	adds	r7, #24
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	32b0      	adds	r2, #176	@ 0xb0
 800d20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d212:	2303      	movs	r3, #3
 800d214:	e065      	b.n	800d2e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	32b0      	adds	r2, #176	@ 0xb0
 800d220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d224:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d226:	78fb      	ldrb	r3, [r7, #3]
 800d228:	f003 020f 	and.w	r2, r3, #15
 800d22c:	6879      	ldr	r1, [r7, #4]
 800d22e:	4613      	mov	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4413      	add	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	440b      	add	r3, r1
 800d238:	3318      	adds	r3, #24
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d02f      	beq.n	800d2a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d240:	78fb      	ldrb	r3, [r7, #3]
 800d242:	f003 020f 	and.w	r2, r3, #15
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	4613      	mov	r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	4413      	add	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	440b      	add	r3, r1
 800d252:	3318      	adds	r3, #24
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	78fb      	ldrb	r3, [r7, #3]
 800d258:	f003 010f 	and.w	r1, r3, #15
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	460b      	mov	r3, r1
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	440b      	add	r3, r1
 800d264:	00db      	lsls	r3, r3, #3
 800d266:	4403      	add	r3, r0
 800d268:	3338      	adds	r3, #56	@ 0x38
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d270:	fb01 f303 	mul.w	r3, r1, r3
 800d274:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d276:	2b00      	cmp	r3, #0
 800d278:	d112      	bne.n	800d2a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d27a:	78fb      	ldrb	r3, [r7, #3]
 800d27c:	f003 020f 	and.w	r2, r3, #15
 800d280:	6879      	ldr	r1, [r7, #4]
 800d282:	4613      	mov	r3, r2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4413      	add	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	440b      	add	r3, r1
 800d28c:	3318      	adds	r3, #24
 800d28e:	2200      	movs	r2, #0
 800d290:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d292:	78f9      	ldrb	r1, [r7, #3]
 800d294:	2300      	movs	r3, #0
 800d296:	2200      	movs	r2, #0
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f005 fea7 	bl	8012fec <USBD_LL_Transmit>
 800d29e:	e01f      	b.n	800d2e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	33b0      	adds	r3, #176	@ 0xb0
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4413      	add	r3, r2
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d010      	beq.n	800d2e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	33b0      	adds	r3, #176	@ 0xb0
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4413      	add	r3, r2
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	691b      	ldr	r3, [r3, #16]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d2dc:	78fa      	ldrb	r2, [r7, #3]
 800d2de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b084      	sub	sp, #16
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	32b0      	adds	r2, #176	@ 0xb0
 800d300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d304:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	32b0      	adds	r2, #176	@ 0xb0
 800d310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d101      	bne.n	800d31c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d318:	2303      	movs	r3, #3
 800d31a:	e01a      	b.n	800d352 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d31c:	78fb      	ldrb	r3, [r7, #3]
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f005 fed3 	bl	80130cc <USBD_LL_GetRxDataSize>
 800d326:	4602      	mov	r2, r0
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	33b0      	adds	r3, #176	@ 0xb0
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d34c:	4611      	mov	r1, r2
 800d34e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b084      	sub	sp, #16
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	32b0      	adds	r2, #176	@ 0xb0
 800d36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d370:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d101      	bne.n	800d37c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d378:	2303      	movs	r3, #3
 800d37a:	e024      	b.n	800d3c6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	33b0      	adds	r3, #176	@ 0xb0
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d019      	beq.n	800d3c4 <USBD_CDC_EP0_RxReady+0x6a>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d396:	2bff      	cmp	r3, #255	@ 0xff
 800d398:	d014      	beq.n	800d3c4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	33b0      	adds	r3, #176	@ 0xb0
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4413      	add	r3, r2
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d3b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d3ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	22ff      	movs	r2, #255	@ 0xff
 800d3c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3d8:	2182      	movs	r1, #130	@ 0x82
 800d3da:	4818      	ldr	r0, [pc, #96]	@ (800d43c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3dc:	f000 fcbd 	bl	800dd5a <USBD_GetEpDesc>
 800d3e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3e2:	2101      	movs	r1, #1
 800d3e4:	4815      	ldr	r0, [pc, #84]	@ (800d43c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3e6:	f000 fcb8 	bl	800dd5a <USBD_GetEpDesc>
 800d3ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3ec:	2181      	movs	r1, #129	@ 0x81
 800d3ee:	4813      	ldr	r0, [pc, #76]	@ (800d43c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3f0:	f000 fcb3 	bl	800dd5a <USBD_GetEpDesc>
 800d3f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	2210      	movs	r2, #16
 800d400:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d006      	beq.n	800d416 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d410:	711a      	strb	r2, [r3, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d006      	beq.n	800d42a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2200      	movs	r2, #0
 800d420:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d424:	711a      	strb	r2, [r3, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2243      	movs	r2, #67	@ 0x43
 800d42e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d430:	4b02      	ldr	r3, [pc, #8]	@ (800d43c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d432:	4618      	mov	r0, r3
 800d434:	3718      	adds	r7, #24
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	20000074 	.word	0x20000074

0800d440 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d448:	2182      	movs	r1, #130	@ 0x82
 800d44a:	4818      	ldr	r0, [pc, #96]	@ (800d4ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d44c:	f000 fc85 	bl	800dd5a <USBD_GetEpDesc>
 800d450:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d452:	2101      	movs	r1, #1
 800d454:	4815      	ldr	r0, [pc, #84]	@ (800d4ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d456:	f000 fc80 	bl	800dd5a <USBD_GetEpDesc>
 800d45a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d45c:	2181      	movs	r1, #129	@ 0x81
 800d45e:	4813      	ldr	r0, [pc, #76]	@ (800d4ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d460:	f000 fc7b 	bl	800dd5a <USBD_GetEpDesc>
 800d464:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	2210      	movs	r2, #16
 800d470:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d006      	beq.n	800d486 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	2200      	movs	r2, #0
 800d47c:	711a      	strb	r2, [r3, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	f042 0202 	orr.w	r2, r2, #2
 800d484:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d006      	beq.n	800d49a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	711a      	strb	r2, [r3, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	f042 0202 	orr.w	r2, r2, #2
 800d498:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2243      	movs	r2, #67	@ 0x43
 800d49e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d4a0:	4b02      	ldr	r3, [pc, #8]	@ (800d4ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3718      	adds	r7, #24
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	20000074 	.word	0x20000074

0800d4b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4b8:	2182      	movs	r1, #130	@ 0x82
 800d4ba:	4818      	ldr	r0, [pc, #96]	@ (800d51c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4bc:	f000 fc4d 	bl	800dd5a <USBD_GetEpDesc>
 800d4c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4c2:	2101      	movs	r1, #1
 800d4c4:	4815      	ldr	r0, [pc, #84]	@ (800d51c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4c6:	f000 fc48 	bl	800dd5a <USBD_GetEpDesc>
 800d4ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4cc:	2181      	movs	r1, #129	@ 0x81
 800d4ce:	4813      	ldr	r0, [pc, #76]	@ (800d51c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4d0:	f000 fc43 	bl	800dd5a <USBD_GetEpDesc>
 800d4d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	2210      	movs	r2, #16
 800d4e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d006      	beq.n	800d4f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4f0:	711a      	strb	r2, [r3, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d006      	beq.n	800d50a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d504:	711a      	strb	r2, [r3, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2243      	movs	r2, #67	@ 0x43
 800d50e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d510:	4b02      	ldr	r3, [pc, #8]	@ (800d51c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d512:	4618      	mov	r0, r3
 800d514:	3718      	adds	r7, #24
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	20000074 	.word	0x20000074

0800d520 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	220a      	movs	r2, #10
 800d52c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d52e:	4b03      	ldr	r3, [pc, #12]	@ (800d53c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d530:	4618      	mov	r0, r3
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	20000030 	.word	0x20000030

0800d540 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d101      	bne.n	800d554 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d550:	2303      	movs	r3, #3
 800d552:	e009      	b.n	800d568 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	33b0      	adds	r3, #176	@ 0xb0
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	4413      	add	r3, r2
 800d562:	683a      	ldr	r2, [r7, #0]
 800d564:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d574:	b480      	push	{r7}
 800d576:	b087      	sub	sp, #28
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	32b0      	adds	r2, #176	@ 0xb0
 800d58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d101      	bne.n	800d59a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d596:	2303      	movs	r3, #3
 800d598:	e008      	b.n	800d5ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	371c      	adds	r7, #28
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	32b0      	adds	r2, #176	@ 0xb0
 800d5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d5d8:	2303      	movs	r3, #3
 800d5da:	e004      	b.n	800d5e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	683a      	ldr	r2, [r7, #0]
 800d5e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d5e4:	2300      	movs	r3, #0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
	...

0800d5f4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	32b0      	adds	r2, #176	@ 0xb0
 800d606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d60a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d60c:	2301      	movs	r3, #1
 800d60e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d616:	2303      	movs	r3, #3
 800d618:	e025      	b.n	800d666 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d620:	2b00      	cmp	r3, #0
 800d622:	d11f      	bne.n	800d664 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	2201      	movs	r2, #1
 800d628:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d62c:	4b10      	ldr	r3, [pc, #64]	@ (800d670 <USBD_CDC_TransmitPacket+0x7c>)
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	f003 020f 	and.w	r2, r3, #15
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	4613      	mov	r3, r2
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	4413      	add	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	4403      	add	r3, r0
 800d646:	3318      	adds	r3, #24
 800d648:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d64a:	4b09      	ldr	r3, [pc, #36]	@ (800d670 <USBD_CDC_TransmitPacket+0x7c>)
 800d64c:	7819      	ldrb	r1, [r3, #0]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f005 fcc6 	bl	8012fec <USBD_LL_Transmit>

    ret = USBD_OK;
 800d660:	2300      	movs	r3, #0
 800d662:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d664:	7bfb      	ldrb	r3, [r7, #15]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	200000b7 	.word	0x200000b7

0800d674 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	32b0      	adds	r2, #176	@ 0xb0
 800d686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d68a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	32b0      	adds	r2, #176	@ 0xb0
 800d696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d69e:	2303      	movs	r3, #3
 800d6a0:	e018      	b.n	800d6d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	7c1b      	ldrb	r3, [r3, #16]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d10a      	bne.n	800d6c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d6dc <USBD_CDC_ReceivePacket+0x68>)
 800d6ac:	7819      	ldrb	r1, [r3, #0]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d6b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f005 fccf 	bl	801305c <USBD_LL_PrepareReceive>
 800d6be:	e008      	b.n	800d6d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d6c0:	4b06      	ldr	r3, [pc, #24]	@ (800d6dc <USBD_CDC_ReceivePacket+0x68>)
 800d6c2:	7819      	ldrb	r1, [r3, #0]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d6ca:	2340      	movs	r3, #64	@ 0x40
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f005 fcc5 	bl	801305c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	200000b8 	.word	0x200000b8

0800d6e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d101      	bne.n	800d6f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	e01f      	b.n	800d738 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2200      	movs	r2, #0
 800d704:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d003      	beq.n	800d71e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2201      	movs	r2, #1
 800d722:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	79fa      	ldrb	r2, [r7, #7]
 800d72a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f005 fa85 	bl	8012c3c <USBD_LL_Init>
 800d732:	4603      	mov	r3, r0
 800d734:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d736:	7dfb      	ldrb	r3, [r7, #23]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3718      	adds	r7, #24
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d74a:	2300      	movs	r3, #0
 800d74c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d101      	bne.n	800d758 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d754:	2303      	movs	r3, #3
 800d756:	e025      	b.n	800d7a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	683a      	ldr	r2, [r7, #0]
 800d75c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	32ae      	adds	r2, #174	@ 0xae
 800d76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00f      	beq.n	800d794 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	32ae      	adds	r2, #174	@ 0xae
 800d77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d784:	f107 020e 	add.w	r2, r7, #14
 800d788:	4610      	mov	r0, r2
 800d78a:	4798      	blx	r3
 800d78c:	4602      	mov	r2, r0
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d79a:	1c5a      	adds	r2, r3, #1
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f005 faa3 	bl	8012d00 <USBD_LL_Start>
 800d7ba:	4603      	mov	r3, r0
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	370c      	adds	r7, #12
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d009      	beq.n	800d808 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	78fa      	ldrb	r2, [r7, #3]
 800d7fe:	4611      	mov	r1, r2
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	4798      	blx	r3
 800d804:	4603      	mov	r3, r0
 800d806:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d808:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b084      	sub	sp, #16
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
 800d81a:	460b      	mov	r3, r1
 800d81c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	78fa      	ldrb	r2, [r7, #3]
 800d82c:	4611      	mov	r1, r2
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	4798      	blx	r3
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d001      	beq.n	800d83c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d838:	2303      	movs	r3, #3
 800d83a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b084      	sub	sp, #16
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d856:	6839      	ldr	r1, [r7, #0]
 800d858:	4618      	mov	r0, r3
 800d85a:	f001 f8a4 	bl	800e9a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2201      	movs	r2, #1
 800d862:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d86c:	461a      	mov	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d87a:	f003 031f 	and.w	r3, r3, #31
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d01a      	beq.n	800d8b8 <USBD_LL_SetupStage+0x72>
 800d882:	2b02      	cmp	r3, #2
 800d884:	d822      	bhi.n	800d8cc <USBD_LL_SetupStage+0x86>
 800d886:	2b00      	cmp	r3, #0
 800d888:	d002      	beq.n	800d890 <USBD_LL_SetupStage+0x4a>
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d00a      	beq.n	800d8a4 <USBD_LL_SetupStage+0x5e>
 800d88e:	e01d      	b.n	800d8cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d896:	4619      	mov	r1, r3
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 fad1 	bl	800de40 <USBD_StdDevReq>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d8a2:	e020      	b.n	800d8e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 fb39 	bl	800df24 <USBD_StdItfReq>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	73fb      	strb	r3, [r7, #15]
      break;
 800d8b6:	e016      	b.n	800d8e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8be:	4619      	mov	r1, r3
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 fb9b 	bl	800dffc <USBD_StdEPReq>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	73fb      	strb	r3, [r7, #15]
      break;
 800d8ca:	e00c      	b.n	800d8e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d8d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	4619      	mov	r1, r3
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f005 fab6 	bl	8012e4c <USBD_LL_StallEP>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d8e4:	bf00      	nop
  }

  return ret;
 800d8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	607a      	str	r2, [r7, #4]
 800d8fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d8fe:	2300      	movs	r3, #0
 800d900:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d902:	7afb      	ldrb	r3, [r7, #11]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d16e      	bne.n	800d9e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d90e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d916:	2b03      	cmp	r3, #3
 800d918:	f040 8098 	bne.w	800da4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	689a      	ldr	r2, [r3, #8]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	429a      	cmp	r2, r3
 800d926:	d913      	bls.n	800d950 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	689a      	ldr	r2, [r3, #8]
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	1ad2      	subs	r2, r2, r3
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	68da      	ldr	r2, [r3, #12]
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	4293      	cmp	r3, r2
 800d940:	bf28      	it	cs
 800d942:	4613      	movcs	r3, r2
 800d944:	461a      	mov	r2, r3
 800d946:	6879      	ldr	r1, [r7, #4]
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f001 f920 	bl	800eb8e <USBD_CtlContinueRx>
 800d94e:	e07d      	b.n	800da4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d956:	f003 031f 	and.w	r3, r3, #31
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d014      	beq.n	800d988 <USBD_LL_DataOutStage+0x98>
 800d95e:	2b02      	cmp	r3, #2
 800d960:	d81d      	bhi.n	800d99e <USBD_LL_DataOutStage+0xae>
 800d962:	2b00      	cmp	r3, #0
 800d964:	d002      	beq.n	800d96c <USBD_LL_DataOutStage+0x7c>
 800d966:	2b01      	cmp	r3, #1
 800d968:	d003      	beq.n	800d972 <USBD_LL_DataOutStage+0x82>
 800d96a:	e018      	b.n	800d99e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d96c:	2300      	movs	r3, #0
 800d96e:	75bb      	strb	r3, [r7, #22]
            break;
 800d970:	e018      	b.n	800d9a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	4619      	mov	r1, r3
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f000 f9d2 	bl	800dd26 <USBD_CoreFindIF>
 800d982:	4603      	mov	r3, r0
 800d984:	75bb      	strb	r3, [r7, #22]
            break;
 800d986:	e00d      	b.n	800d9a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	4619      	mov	r1, r3
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f000 f9d4 	bl	800dd40 <USBD_CoreFindEP>
 800d998:	4603      	mov	r3, r0
 800d99a:	75bb      	strb	r3, [r7, #22]
            break;
 800d99c:	e002      	b.n	800d9a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	75bb      	strb	r3, [r7, #22]
            break;
 800d9a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d9a4:	7dbb      	ldrb	r3, [r7, #22]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d119      	bne.n	800d9de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	2b03      	cmp	r3, #3
 800d9b4:	d113      	bne.n	800d9de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d9b6:	7dba      	ldrb	r2, [r7, #22]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	32ae      	adds	r2, #174	@ 0xae
 800d9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00b      	beq.n	800d9de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d9c6:	7dba      	ldrb	r2, [r7, #22]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d9ce:	7dba      	ldrb	r2, [r7, #22]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	32ae      	adds	r2, #174	@ 0xae
 800d9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f001 f8e6 	bl	800ebb0 <USBD_CtlSendStatus>
 800d9e4:	e032      	b.n	800da4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d9e6:	7afb      	ldrb	r3, [r7, #11]
 800d9e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f000 f9a5 	bl	800dd40 <USBD_CoreFindEP>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9fa:	7dbb      	ldrb	r3, [r7, #22]
 800d9fc:	2bff      	cmp	r3, #255	@ 0xff
 800d9fe:	d025      	beq.n	800da4c <USBD_LL_DataOutStage+0x15c>
 800da00:	7dbb      	ldrb	r3, [r7, #22]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d122      	bne.n	800da4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	2b03      	cmp	r3, #3
 800da10:	d117      	bne.n	800da42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800da12:	7dba      	ldrb	r2, [r7, #22]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	32ae      	adds	r2, #174	@ 0xae
 800da18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1c:	699b      	ldr	r3, [r3, #24]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00f      	beq.n	800da42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800da22:	7dba      	ldrb	r2, [r7, #22]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800da2a:	7dba      	ldrb	r2, [r7, #22]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	32ae      	adds	r2, #174	@ 0xae
 800da30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da34:	699b      	ldr	r3, [r3, #24]
 800da36:	7afa      	ldrb	r2, [r7, #11]
 800da38:	4611      	mov	r1, r2
 800da3a:	68f8      	ldr	r0, [r7, #12]
 800da3c:	4798      	blx	r3
 800da3e:	4603      	mov	r3, r0
 800da40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800da42:	7dfb      	ldrb	r3, [r7, #23]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d001      	beq.n	800da4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800da48:	7dfb      	ldrb	r3, [r7, #23]
 800da4a:	e000      	b.n	800da4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3718      	adds	r7, #24
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b086      	sub	sp, #24
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	60f8      	str	r0, [r7, #12]
 800da5e:	460b      	mov	r3, r1
 800da60:	607a      	str	r2, [r7, #4]
 800da62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800da64:	7afb      	ldrb	r3, [r7, #11]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d16f      	bne.n	800db4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	3314      	adds	r3, #20
 800da6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800da76:	2b02      	cmp	r3, #2
 800da78:	d15a      	bne.n	800db30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	689a      	ldr	r2, [r3, #8]
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	429a      	cmp	r2, r3
 800da84:	d914      	bls.n	800dab0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	689a      	ldr	r2, [r3, #8]
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	1ad2      	subs	r2, r2, r3
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	461a      	mov	r2, r3
 800da9a:	6879      	ldr	r1, [r7, #4]
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f001 f848 	bl	800eb32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800daa2:	2300      	movs	r3, #0
 800daa4:	2200      	movs	r2, #0
 800daa6:	2100      	movs	r1, #0
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f005 fad7 	bl	801305c <USBD_LL_PrepareReceive>
 800daae:	e03f      	b.n	800db30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	68da      	ldr	r2, [r3, #12]
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d11c      	bne.n	800daf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	685a      	ldr	r2, [r3, #4]
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d316      	bcc.n	800daf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	685a      	ldr	r2, [r3, #4]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d20f      	bcs.n	800daf6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dad6:	2200      	movs	r2, #0
 800dad8:	2100      	movs	r1, #0
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f001 f829 	bl	800eb32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dae8:	2300      	movs	r3, #0
 800daea:	2200      	movs	r2, #0
 800daec:	2100      	movs	r1, #0
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f005 fab4 	bl	801305c <USBD_LL_PrepareReceive>
 800daf4:	e01c      	b.n	800db30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	2b03      	cmp	r3, #3
 800db00:	d10f      	bne.n	800db22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d009      	beq.n	800db22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800db22:	2180      	movs	r1, #128	@ 0x80
 800db24:	68f8      	ldr	r0, [r7, #12]
 800db26:	f005 f991 	bl	8012e4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800db2a:	68f8      	ldr	r0, [r7, #12]
 800db2c:	f001 f853 	bl	800ebd6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d03a      	beq.n	800dbb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f7ff fe42 	bl	800d7c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800db48:	e032      	b.n	800dbb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800db4a:	7afb      	ldrb	r3, [r7, #11]
 800db4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800db50:	b2db      	uxtb	r3, r3
 800db52:	4619      	mov	r1, r3
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f000 f8f3 	bl	800dd40 <USBD_CoreFindEP>
 800db5a:	4603      	mov	r3, r0
 800db5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
 800db60:	2bff      	cmp	r3, #255	@ 0xff
 800db62:	d025      	beq.n	800dbb0 <USBD_LL_DataInStage+0x15a>
 800db64:	7dfb      	ldrb	r3, [r7, #23]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d122      	bne.n	800dbb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db70:	b2db      	uxtb	r3, r3
 800db72:	2b03      	cmp	r3, #3
 800db74:	d11c      	bne.n	800dbb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800db76:	7dfa      	ldrb	r2, [r7, #23]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	32ae      	adds	r2, #174	@ 0xae
 800db7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db80:	695b      	ldr	r3, [r3, #20]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d014      	beq.n	800dbb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800db86:	7dfa      	ldrb	r2, [r7, #23]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800db8e:	7dfa      	ldrb	r2, [r7, #23]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	32ae      	adds	r2, #174	@ 0xae
 800db94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db98:	695b      	ldr	r3, [r3, #20]
 800db9a:	7afa      	ldrb	r2, [r7, #11]
 800db9c:	4611      	mov	r1, r2
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	4798      	blx	r3
 800dba2:	4603      	mov	r3, r0
 800dba4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dba6:	7dbb      	ldrb	r3, [r7, #22]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d001      	beq.n	800dbb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dbac:	7dbb      	ldrb	r3, [r7, #22]
 800dbae:	e000      	b.n	800dbb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3718      	adds	r7, #24
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b084      	sub	sp, #16
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d014      	beq.n	800dc20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00e      	beq.n	800dc20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	6852      	ldr	r2, [r2, #4]
 800dc0e:	b2d2      	uxtb	r2, r2
 800dc10:	4611      	mov	r1, r2
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	4798      	blx	r3
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d001      	beq.n	800dc20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dc1c:	2303      	movs	r3, #3
 800dc1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc20:	2340      	movs	r3, #64	@ 0x40
 800dc22:	2200      	movs	r2, #0
 800dc24:	2100      	movs	r1, #0
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f005 f89c 	bl	8012d64 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2240      	movs	r2, #64	@ 0x40
 800dc38:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc3c:	2340      	movs	r3, #64	@ 0x40
 800dc3e:	2200      	movs	r2, #0
 800dc40:	2180      	movs	r1, #128	@ 0x80
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f005 f88e 	bl	8012d64 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2240      	movs	r2, #64	@ 0x40
 800dc52:	621a      	str	r2, [r3, #32]

  return ret;
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc5e:	b480      	push	{r7}
 800dc60:	b083      	sub	sp, #12
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	460b      	mov	r3, r1
 800dc68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	78fa      	ldrb	r2, [r7, #3]
 800dc6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dc70:	2300      	movs	r3, #0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	370c      	adds	r7, #12
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr

0800dc7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b083      	sub	sp, #12
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	2b04      	cmp	r3, #4
 800dc90:	d006      	beq.n	800dca0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2204      	movs	r2, #4
 800dca4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b083      	sub	sp, #12
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b04      	cmp	r3, #4
 800dcc8:	d106      	bne.n	800dcd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	370c      	adds	r7, #12
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr

0800dce6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b082      	sub	sp, #8
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	2b03      	cmp	r3, #3
 800dcf8:	d110      	bne.n	800dd1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00b      	beq.n	800dd1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd0a:	69db      	ldr	r3, [r3, #28]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d005      	beq.n	800dd1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd16:	69db      	ldr	r3, [r3, #28]
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3708      	adds	r7, #8
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd26:	b480      	push	{r7}
 800dd28:	b083      	sub	sp, #12
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
 800dd2e:	460b      	mov	r3, r1
 800dd30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	370c      	adds	r7, #12
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr

0800dd5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b086      	sub	sp, #24
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	460b      	mov	r3, r1
 800dd64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	885b      	ldrh	r3, [r3, #2]
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	7812      	ldrb	r2, [r2, #0]
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d91f      	bls.n	800ddc0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dd86:	e013      	b.n	800ddb0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dd88:	f107 030a 	add.w	r3, r7, #10
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6978      	ldr	r0, [r7, #20]
 800dd90:	f000 f81b 	bl	800ddca <USBD_GetNextDesc>
 800dd94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	785b      	ldrb	r3, [r3, #1]
 800dd9a:	2b05      	cmp	r3, #5
 800dd9c:	d108      	bne.n	800ddb0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	789b      	ldrb	r3, [r3, #2]
 800dda6:	78fa      	ldrb	r2, [r7, #3]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d008      	beq.n	800ddbe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ddac:	2300      	movs	r3, #0
 800ddae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	885b      	ldrh	r3, [r3, #2]
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	897b      	ldrh	r3, [r7, #10]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d8e5      	bhi.n	800dd88 <USBD_GetEpDesc+0x2e>
 800ddbc:	e000      	b.n	800ddc0 <USBD_GetEpDesc+0x66>
          break;
 800ddbe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ddc0:	693b      	ldr	r3, [r7, #16]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3718      	adds	r7, #24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ddca:	b480      	push	{r7}
 800ddcc:	b085      	sub	sp, #20
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
 800ddd2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	881b      	ldrh	r3, [r3, #0]
 800dddc:	68fa      	ldr	r2, [r7, #12]
 800ddde:	7812      	ldrb	r2, [r2, #0]
 800dde0:	4413      	add	r3, r2
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	461a      	mov	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3714      	adds	r7, #20
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr

0800de02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800de02:	b480      	push	{r7}
 800de04:	b087      	sub	sp, #28
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	3301      	adds	r3, #1
 800de18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800de20:	8a3b      	ldrh	r3, [r7, #16]
 800de22:	021b      	lsls	r3, r3, #8
 800de24:	b21a      	sxth	r2, r3
 800de26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	b21b      	sxth	r3, r3
 800de2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800de30:	89fb      	ldrh	r3, [r7, #14]
}
 800de32:	4618      	mov	r0, r3
 800de34:	371c      	adds	r7, #28
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr
	...

0800de40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de4a:	2300      	movs	r3, #0
 800de4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800de56:	2b40      	cmp	r3, #64	@ 0x40
 800de58:	d005      	beq.n	800de66 <USBD_StdDevReq+0x26>
 800de5a:	2b40      	cmp	r3, #64	@ 0x40
 800de5c:	d857      	bhi.n	800df0e <USBD_StdDevReq+0xce>
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00f      	beq.n	800de82 <USBD_StdDevReq+0x42>
 800de62:	2b20      	cmp	r3, #32
 800de64:	d153      	bne.n	800df0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	32ae      	adds	r2, #174	@ 0xae
 800de70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	6839      	ldr	r1, [r7, #0]
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	4798      	blx	r3
 800de7c:	4603      	mov	r3, r0
 800de7e:	73fb      	strb	r3, [r7, #15]
      break;
 800de80:	e04a      	b.n	800df18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	785b      	ldrb	r3, [r3, #1]
 800de86:	2b09      	cmp	r3, #9
 800de88:	d83b      	bhi.n	800df02 <USBD_StdDevReq+0xc2>
 800de8a:	a201      	add	r2, pc, #4	@ (adr r2, 800de90 <USBD_StdDevReq+0x50>)
 800de8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de90:	0800dee5 	.word	0x0800dee5
 800de94:	0800def9 	.word	0x0800def9
 800de98:	0800df03 	.word	0x0800df03
 800de9c:	0800deef 	.word	0x0800deef
 800dea0:	0800df03 	.word	0x0800df03
 800dea4:	0800dec3 	.word	0x0800dec3
 800dea8:	0800deb9 	.word	0x0800deb9
 800deac:	0800df03 	.word	0x0800df03
 800deb0:	0800dedb 	.word	0x0800dedb
 800deb4:	0800decd 	.word	0x0800decd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800deb8:	6839      	ldr	r1, [r7, #0]
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 fa3c 	bl	800e338 <USBD_GetDescriptor>
          break;
 800dec0:	e024      	b.n	800df0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dec2:	6839      	ldr	r1, [r7, #0]
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f000 fbcb 	bl	800e660 <USBD_SetAddress>
          break;
 800deca:	e01f      	b.n	800df0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800decc:	6839      	ldr	r1, [r7, #0]
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fc0a 	bl	800e6e8 <USBD_SetConfig>
 800ded4:	4603      	mov	r3, r0
 800ded6:	73fb      	strb	r3, [r7, #15]
          break;
 800ded8:	e018      	b.n	800df0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800deda:	6839      	ldr	r1, [r7, #0]
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 fcad 	bl	800e83c <USBD_GetConfig>
          break;
 800dee2:	e013      	b.n	800df0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dee4:	6839      	ldr	r1, [r7, #0]
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f000 fcde 	bl	800e8a8 <USBD_GetStatus>
          break;
 800deec:	e00e      	b.n	800df0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800deee:	6839      	ldr	r1, [r7, #0]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 fd0d 	bl	800e910 <USBD_SetFeature>
          break;
 800def6:	e009      	b.n	800df0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800def8:	6839      	ldr	r1, [r7, #0]
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 fd31 	bl	800e962 <USBD_ClrFeature>
          break;
 800df00:	e004      	b.n	800df0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800df02:	6839      	ldr	r1, [r7, #0]
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 fd88 	bl	800ea1a <USBD_CtlError>
          break;
 800df0a:	bf00      	nop
      }
      break;
 800df0c:	e004      	b.n	800df18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800df0e:	6839      	ldr	r1, [r7, #0]
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fd82 	bl	800ea1a <USBD_CtlError>
      break;
 800df16:	bf00      	nop
  }

  return ret;
 800df18:	7bfb      	ldrb	r3, [r7, #15]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop

0800df24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df2e:	2300      	movs	r3, #0
 800df30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df3a:	2b40      	cmp	r3, #64	@ 0x40
 800df3c:	d005      	beq.n	800df4a <USBD_StdItfReq+0x26>
 800df3e:	2b40      	cmp	r3, #64	@ 0x40
 800df40:	d852      	bhi.n	800dfe8 <USBD_StdItfReq+0xc4>
 800df42:	2b00      	cmp	r3, #0
 800df44:	d001      	beq.n	800df4a <USBD_StdItfReq+0x26>
 800df46:	2b20      	cmp	r3, #32
 800df48:	d14e      	bne.n	800dfe8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df50:	b2db      	uxtb	r3, r3
 800df52:	3b01      	subs	r3, #1
 800df54:	2b02      	cmp	r3, #2
 800df56:	d840      	bhi.n	800dfda <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	889b      	ldrh	r3, [r3, #4]
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d836      	bhi.n	800dfd0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	889b      	ldrh	r3, [r3, #4]
 800df66:	b2db      	uxtb	r3, r3
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7ff fedb 	bl	800dd26 <USBD_CoreFindIF>
 800df70:	4603      	mov	r3, r0
 800df72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df74:	7bbb      	ldrb	r3, [r7, #14]
 800df76:	2bff      	cmp	r3, #255	@ 0xff
 800df78:	d01d      	beq.n	800dfb6 <USBD_StdItfReq+0x92>
 800df7a:	7bbb      	ldrb	r3, [r7, #14]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d11a      	bne.n	800dfb6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800df80:	7bba      	ldrb	r2, [r7, #14]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	32ae      	adds	r2, #174	@ 0xae
 800df86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00f      	beq.n	800dfb0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800df90:	7bba      	ldrb	r2, [r7, #14]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df98:	7bba      	ldrb	r2, [r7, #14]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	32ae      	adds	r2, #174	@ 0xae
 800df9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfa2:	689b      	ldr	r3, [r3, #8]
 800dfa4:	6839      	ldr	r1, [r7, #0]
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	4798      	blx	r3
 800dfaa:	4603      	mov	r3, r0
 800dfac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dfae:	e004      	b.n	800dfba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dfb4:	e001      	b.n	800dfba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dfb6:	2303      	movs	r3, #3
 800dfb8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	88db      	ldrh	r3, [r3, #6]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d110      	bne.n	800dfe4 <USBD_StdItfReq+0xc0>
 800dfc2:	7bfb      	ldrb	r3, [r7, #15]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d10d      	bne.n	800dfe4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 fdf1 	bl	800ebb0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dfce:	e009      	b.n	800dfe4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 fd21 	bl	800ea1a <USBD_CtlError>
          break;
 800dfd8:	e004      	b.n	800dfe4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dfda:	6839      	ldr	r1, [r7, #0]
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 fd1c 	bl	800ea1a <USBD_CtlError>
          break;
 800dfe2:	e000      	b.n	800dfe6 <USBD_StdItfReq+0xc2>
          break;
 800dfe4:	bf00      	nop
      }
      break;
 800dfe6:	e004      	b.n	800dff2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dfe8:	6839      	ldr	r1, [r7, #0]
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 fd15 	bl	800ea1a <USBD_CtlError>
      break;
 800dff0:	bf00      	nop
  }

  return ret;
 800dff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3710      	adds	r7, #16
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e006:	2300      	movs	r3, #0
 800e008:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	889b      	ldrh	r3, [r3, #4]
 800e00e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e018:	2b40      	cmp	r3, #64	@ 0x40
 800e01a:	d007      	beq.n	800e02c <USBD_StdEPReq+0x30>
 800e01c:	2b40      	cmp	r3, #64	@ 0x40
 800e01e:	f200 817f 	bhi.w	800e320 <USBD_StdEPReq+0x324>
 800e022:	2b00      	cmp	r3, #0
 800e024:	d02a      	beq.n	800e07c <USBD_StdEPReq+0x80>
 800e026:	2b20      	cmp	r3, #32
 800e028:	f040 817a 	bne.w	800e320 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e02c:	7bbb      	ldrb	r3, [r7, #14]
 800e02e:	4619      	mov	r1, r3
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff fe85 	bl	800dd40 <USBD_CoreFindEP>
 800e036:	4603      	mov	r3, r0
 800e038:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e03a:	7b7b      	ldrb	r3, [r7, #13]
 800e03c:	2bff      	cmp	r3, #255	@ 0xff
 800e03e:	f000 8174 	beq.w	800e32a <USBD_StdEPReq+0x32e>
 800e042:	7b7b      	ldrb	r3, [r7, #13]
 800e044:	2b00      	cmp	r3, #0
 800e046:	f040 8170 	bne.w	800e32a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e04a:	7b7a      	ldrb	r2, [r7, #13]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e052:	7b7a      	ldrb	r2, [r7, #13]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	32ae      	adds	r2, #174	@ 0xae
 800e058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	f000 8163 	beq.w	800e32a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e064:	7b7a      	ldrb	r2, [r7, #13]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	32ae      	adds	r2, #174	@ 0xae
 800e06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	6839      	ldr	r1, [r7, #0]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	4798      	blx	r3
 800e076:	4603      	mov	r3, r0
 800e078:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e07a:	e156      	b.n	800e32a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	785b      	ldrb	r3, [r3, #1]
 800e080:	2b03      	cmp	r3, #3
 800e082:	d008      	beq.n	800e096 <USBD_StdEPReq+0x9a>
 800e084:	2b03      	cmp	r3, #3
 800e086:	f300 8145 	bgt.w	800e314 <USBD_StdEPReq+0x318>
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f000 809b 	beq.w	800e1c6 <USBD_StdEPReq+0x1ca>
 800e090:	2b01      	cmp	r3, #1
 800e092:	d03c      	beq.n	800e10e <USBD_StdEPReq+0x112>
 800e094:	e13e      	b.n	800e314 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	2b02      	cmp	r3, #2
 800e0a0:	d002      	beq.n	800e0a8 <USBD_StdEPReq+0xac>
 800e0a2:	2b03      	cmp	r3, #3
 800e0a4:	d016      	beq.n	800e0d4 <USBD_StdEPReq+0xd8>
 800e0a6:	e02c      	b.n	800e102 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0a8:	7bbb      	ldrb	r3, [r7, #14]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00d      	beq.n	800e0ca <USBD_StdEPReq+0xce>
 800e0ae:	7bbb      	ldrb	r3, [r7, #14]
 800e0b0:	2b80      	cmp	r3, #128	@ 0x80
 800e0b2:	d00a      	beq.n	800e0ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0b4:	7bbb      	ldrb	r3, [r7, #14]
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f004 fec7 	bl	8012e4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0be:	2180      	movs	r1, #128	@ 0x80
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f004 fec3 	bl	8012e4c <USBD_LL_StallEP>
 800e0c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e0c8:	e020      	b.n	800e10c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e0ca:	6839      	ldr	r1, [r7, #0]
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 fca4 	bl	800ea1a <USBD_CtlError>
              break;
 800e0d2:	e01b      	b.n	800e10c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	885b      	ldrh	r3, [r3, #2]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d10e      	bne.n	800e0fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e0dc:	7bbb      	ldrb	r3, [r7, #14]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d00b      	beq.n	800e0fa <USBD_StdEPReq+0xfe>
 800e0e2:	7bbb      	ldrb	r3, [r7, #14]
 800e0e4:	2b80      	cmp	r3, #128	@ 0x80
 800e0e6:	d008      	beq.n	800e0fa <USBD_StdEPReq+0xfe>
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	88db      	ldrh	r3, [r3, #6]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d104      	bne.n	800e0fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0f0:	7bbb      	ldrb	r3, [r7, #14]
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f004 fea9 	bl	8012e4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 fd58 	bl	800ebb0 <USBD_CtlSendStatus>

              break;
 800e100:	e004      	b.n	800e10c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e102:	6839      	ldr	r1, [r7, #0]
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 fc88 	bl	800ea1a <USBD_CtlError>
              break;
 800e10a:	bf00      	nop
          }
          break;
 800e10c:	e107      	b.n	800e31e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b02      	cmp	r3, #2
 800e118:	d002      	beq.n	800e120 <USBD_StdEPReq+0x124>
 800e11a:	2b03      	cmp	r3, #3
 800e11c:	d016      	beq.n	800e14c <USBD_StdEPReq+0x150>
 800e11e:	e04b      	b.n	800e1b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e120:	7bbb      	ldrb	r3, [r7, #14]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00d      	beq.n	800e142 <USBD_StdEPReq+0x146>
 800e126:	7bbb      	ldrb	r3, [r7, #14]
 800e128:	2b80      	cmp	r3, #128	@ 0x80
 800e12a:	d00a      	beq.n	800e142 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e12c:	7bbb      	ldrb	r3, [r7, #14]
 800e12e:	4619      	mov	r1, r3
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f004 fe8b 	bl	8012e4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e136:	2180      	movs	r1, #128	@ 0x80
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f004 fe87 	bl	8012e4c <USBD_LL_StallEP>
 800e13e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e140:	e040      	b.n	800e1c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e142:	6839      	ldr	r1, [r7, #0]
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 fc68 	bl	800ea1a <USBD_CtlError>
              break;
 800e14a:	e03b      	b.n	800e1c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	885b      	ldrh	r3, [r3, #2]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d136      	bne.n	800e1c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e154:	7bbb      	ldrb	r3, [r7, #14]
 800e156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d004      	beq.n	800e168 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e15e:	7bbb      	ldrb	r3, [r7, #14]
 800e160:	4619      	mov	r1, r3
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f004 fea8 	bl	8012eb8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 fd21 	bl	800ebb0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e16e:	7bbb      	ldrb	r3, [r7, #14]
 800e170:	4619      	mov	r1, r3
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7ff fde4 	bl	800dd40 <USBD_CoreFindEP>
 800e178:	4603      	mov	r3, r0
 800e17a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e17c:	7b7b      	ldrb	r3, [r7, #13]
 800e17e:	2bff      	cmp	r3, #255	@ 0xff
 800e180:	d01f      	beq.n	800e1c2 <USBD_StdEPReq+0x1c6>
 800e182:	7b7b      	ldrb	r3, [r7, #13]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d11c      	bne.n	800e1c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e188:	7b7a      	ldrb	r2, [r7, #13]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e190:	7b7a      	ldrb	r2, [r7, #13]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	32ae      	adds	r2, #174	@ 0xae
 800e196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d010      	beq.n	800e1c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e1a0:	7b7a      	ldrb	r2, [r7, #13]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	32ae      	adds	r2, #174	@ 0xae
 800e1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	4798      	blx	r3
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e1b6:	e004      	b.n	800e1c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f000 fc2d 	bl	800ea1a <USBD_CtlError>
              break;
 800e1c0:	e000      	b.n	800e1c4 <USBD_StdEPReq+0x1c8>
              break;
 800e1c2:	bf00      	nop
          }
          break;
 800e1c4:	e0ab      	b.n	800e31e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	2b02      	cmp	r3, #2
 800e1d0:	d002      	beq.n	800e1d8 <USBD_StdEPReq+0x1dc>
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	d032      	beq.n	800e23c <USBD_StdEPReq+0x240>
 800e1d6:	e097      	b.n	800e308 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1d8:	7bbb      	ldrb	r3, [r7, #14]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d007      	beq.n	800e1ee <USBD_StdEPReq+0x1f2>
 800e1de:	7bbb      	ldrb	r3, [r7, #14]
 800e1e0:	2b80      	cmp	r3, #128	@ 0x80
 800e1e2:	d004      	beq.n	800e1ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e1e4:	6839      	ldr	r1, [r7, #0]
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 fc17 	bl	800ea1a <USBD_CtlError>
                break;
 800e1ec:	e091      	b.n	800e312 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	da0b      	bge.n	800e20e <USBD_StdEPReq+0x212>
 800e1f6:	7bbb      	ldrb	r3, [r7, #14]
 800e1f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	4413      	add	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	3310      	adds	r3, #16
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	4413      	add	r3, r2
 800e20a:	3304      	adds	r3, #4
 800e20c:	e00b      	b.n	800e226 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e20e:	7bbb      	ldrb	r3, [r7, #14]
 800e210:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e214:	4613      	mov	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	4413      	add	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	4413      	add	r3, r2
 800e224:	3304      	adds	r3, #4
 800e226:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	2202      	movs	r2, #2
 800e232:	4619      	mov	r1, r3
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 fc61 	bl	800eafc <USBD_CtlSendData>
              break;
 800e23a:	e06a      	b.n	800e312 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e23c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e240:	2b00      	cmp	r3, #0
 800e242:	da11      	bge.n	800e268 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e244:	7bbb      	ldrb	r3, [r7, #14]
 800e246:	f003 020f 	and.w	r2, r3, #15
 800e24a:	6879      	ldr	r1, [r7, #4]
 800e24c:	4613      	mov	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	440b      	add	r3, r1
 800e256:	3324      	adds	r3, #36	@ 0x24
 800e258:	881b      	ldrh	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d117      	bne.n	800e28e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e25e:	6839      	ldr	r1, [r7, #0]
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 fbda 	bl	800ea1a <USBD_CtlError>
                  break;
 800e266:	e054      	b.n	800e312 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e268:	7bbb      	ldrb	r3, [r7, #14]
 800e26a:	f003 020f 	and.w	r2, r3, #15
 800e26e:	6879      	ldr	r1, [r7, #4]
 800e270:	4613      	mov	r3, r2
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	4413      	add	r3, r2
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	440b      	add	r3, r1
 800e27a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d104      	bne.n	800e28e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e284:	6839      	ldr	r1, [r7, #0]
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 fbc7 	bl	800ea1a <USBD_CtlError>
                  break;
 800e28c:	e041      	b.n	800e312 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e28e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e292:	2b00      	cmp	r3, #0
 800e294:	da0b      	bge.n	800e2ae <USBD_StdEPReq+0x2b2>
 800e296:	7bbb      	ldrb	r3, [r7, #14]
 800e298:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e29c:	4613      	mov	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	3310      	adds	r3, #16
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	3304      	adds	r3, #4
 800e2ac:	e00b      	b.n	800e2c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e2ae:	7bbb      	ldrb	r3, [r7, #14]
 800e2b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	4413      	add	r3, r2
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	3304      	adds	r3, #4
 800e2c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e2c8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d002      	beq.n	800e2d4 <USBD_StdEPReq+0x2d8>
 800e2ce:	7bbb      	ldrb	r3, [r7, #14]
 800e2d0:	2b80      	cmp	r3, #128	@ 0x80
 800e2d2:	d103      	bne.n	800e2dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	601a      	str	r2, [r3, #0]
 800e2da:	e00e      	b.n	800e2fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e2dc:	7bbb      	ldrb	r3, [r7, #14]
 800e2de:	4619      	mov	r1, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f004 fe1f 	bl	8012f24 <USBD_LL_IsStallEP>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d003      	beq.n	800e2f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	601a      	str	r2, [r3, #0]
 800e2f2:	e002      	b.n	800e2fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	2202      	movs	r2, #2
 800e2fe:	4619      	mov	r1, r3
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 fbfb 	bl	800eafc <USBD_CtlSendData>
              break;
 800e306:	e004      	b.n	800e312 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fb85 	bl	800ea1a <USBD_CtlError>
              break;
 800e310:	bf00      	nop
          }
          break;
 800e312:	e004      	b.n	800e31e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e314:	6839      	ldr	r1, [r7, #0]
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 fb7f 	bl	800ea1a <USBD_CtlError>
          break;
 800e31c:	bf00      	nop
      }
      break;
 800e31e:	e005      	b.n	800e32c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e320:	6839      	ldr	r1, [r7, #0]
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 fb79 	bl	800ea1a <USBD_CtlError>
      break;
 800e328:	e000      	b.n	800e32c <USBD_StdEPReq+0x330>
      break;
 800e32a:	bf00      	nop
  }

  return ret;
 800e32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
	...

0800e338 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e342:	2300      	movs	r3, #0
 800e344:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e346:	2300      	movs	r3, #0
 800e348:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e34a:	2300      	movs	r3, #0
 800e34c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	885b      	ldrh	r3, [r3, #2]
 800e352:	0a1b      	lsrs	r3, r3, #8
 800e354:	b29b      	uxth	r3, r3
 800e356:	3b01      	subs	r3, #1
 800e358:	2b0e      	cmp	r3, #14
 800e35a:	f200 8152 	bhi.w	800e602 <USBD_GetDescriptor+0x2ca>
 800e35e:	a201      	add	r2, pc, #4	@ (adr r2, 800e364 <USBD_GetDescriptor+0x2c>)
 800e360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e364:	0800e3d5 	.word	0x0800e3d5
 800e368:	0800e3ed 	.word	0x0800e3ed
 800e36c:	0800e42d 	.word	0x0800e42d
 800e370:	0800e603 	.word	0x0800e603
 800e374:	0800e603 	.word	0x0800e603
 800e378:	0800e5a3 	.word	0x0800e5a3
 800e37c:	0800e5cf 	.word	0x0800e5cf
 800e380:	0800e603 	.word	0x0800e603
 800e384:	0800e603 	.word	0x0800e603
 800e388:	0800e603 	.word	0x0800e603
 800e38c:	0800e603 	.word	0x0800e603
 800e390:	0800e603 	.word	0x0800e603
 800e394:	0800e603 	.word	0x0800e603
 800e398:	0800e603 	.word	0x0800e603
 800e39c:	0800e3a1 	.word	0x0800e3a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3a6:	69db      	ldr	r3, [r3, #28]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00b      	beq.n	800e3c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3b2:	69db      	ldr	r3, [r3, #28]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	7c12      	ldrb	r2, [r2, #16]
 800e3b8:	f107 0108 	add.w	r1, r7, #8
 800e3bc:	4610      	mov	r0, r2
 800e3be:	4798      	blx	r3
 800e3c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3c2:	e126      	b.n	800e612 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3c4:	6839      	ldr	r1, [r7, #0]
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 fb27 	bl	800ea1a <USBD_CtlError>
        err++;
 800e3cc:	7afb      	ldrb	r3, [r7, #11]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	72fb      	strb	r3, [r7, #11]
      break;
 800e3d2:	e11e      	b.n	800e612 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	7c12      	ldrb	r2, [r2, #16]
 800e3e0:	f107 0108 	add.w	r1, r7, #8
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	4798      	blx	r3
 800e3e8:	60f8      	str	r0, [r7, #12]
      break;
 800e3ea:	e112      	b.n	800e612 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	7c1b      	ldrb	r3, [r3, #16]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d10d      	bne.n	800e410 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3fc:	f107 0208 	add.w	r2, r7, #8
 800e400:	4610      	mov	r0, r2
 800e402:	4798      	blx	r3
 800e404:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	3301      	adds	r3, #1
 800e40a:	2202      	movs	r2, #2
 800e40c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e40e:	e100      	b.n	800e612 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e418:	f107 0208 	add.w	r2, r7, #8
 800e41c:	4610      	mov	r0, r2
 800e41e:	4798      	blx	r3
 800e420:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	3301      	adds	r3, #1
 800e426:	2202      	movs	r2, #2
 800e428:	701a      	strb	r2, [r3, #0]
      break;
 800e42a:	e0f2      	b.n	800e612 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	885b      	ldrh	r3, [r3, #2]
 800e430:	b2db      	uxtb	r3, r3
 800e432:	2b05      	cmp	r3, #5
 800e434:	f200 80ac 	bhi.w	800e590 <USBD_GetDescriptor+0x258>
 800e438:	a201      	add	r2, pc, #4	@ (adr r2, 800e440 <USBD_GetDescriptor+0x108>)
 800e43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e43e:	bf00      	nop
 800e440:	0800e459 	.word	0x0800e459
 800e444:	0800e48d 	.word	0x0800e48d
 800e448:	0800e4c1 	.word	0x0800e4c1
 800e44c:	0800e4f5 	.word	0x0800e4f5
 800e450:	0800e529 	.word	0x0800e529
 800e454:	0800e55d 	.word	0x0800e55d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00b      	beq.n	800e47c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	687a      	ldr	r2, [r7, #4]
 800e46e:	7c12      	ldrb	r2, [r2, #16]
 800e470:	f107 0108 	add.w	r1, r7, #8
 800e474:	4610      	mov	r0, r2
 800e476:	4798      	blx	r3
 800e478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e47a:	e091      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 facb 	bl	800ea1a <USBD_CtlError>
            err++;
 800e484:	7afb      	ldrb	r3, [r7, #11]
 800e486:	3301      	adds	r3, #1
 800e488:	72fb      	strb	r3, [r7, #11]
          break;
 800e48a:	e089      	b.n	800e5a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e492:	689b      	ldr	r3, [r3, #8]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00b      	beq.n	800e4b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	7c12      	ldrb	r2, [r2, #16]
 800e4a4:	f107 0108 	add.w	r1, r7, #8
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	4798      	blx	r3
 800e4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4ae:	e077      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4b0:	6839      	ldr	r1, [r7, #0]
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 fab1 	bl	800ea1a <USBD_CtlError>
            err++;
 800e4b8:	7afb      	ldrb	r3, [r7, #11]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e4be:	e06f      	b.n	800e5a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00b      	beq.n	800e4e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	7c12      	ldrb	r2, [r2, #16]
 800e4d8:	f107 0108 	add.w	r1, r7, #8
 800e4dc:	4610      	mov	r0, r2
 800e4de:	4798      	blx	r3
 800e4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4e2:	e05d      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4e4:	6839      	ldr	r1, [r7, #0]
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 fa97 	bl	800ea1a <USBD_CtlError>
            err++;
 800e4ec:	7afb      	ldrb	r3, [r7, #11]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e4f2:	e055      	b.n	800e5a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00b      	beq.n	800e518 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	7c12      	ldrb	r2, [r2, #16]
 800e50c:	f107 0108 	add.w	r1, r7, #8
 800e510:	4610      	mov	r0, r2
 800e512:	4798      	blx	r3
 800e514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e516:	e043      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e518:	6839      	ldr	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fa7d 	bl	800ea1a <USBD_CtlError>
            err++;
 800e520:	7afb      	ldrb	r3, [r7, #11]
 800e522:	3301      	adds	r3, #1
 800e524:	72fb      	strb	r3, [r7, #11]
          break;
 800e526:	e03b      	b.n	800e5a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e52e:	695b      	ldr	r3, [r3, #20]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00b      	beq.n	800e54c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e53a:	695b      	ldr	r3, [r3, #20]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	7c12      	ldrb	r2, [r2, #16]
 800e540:	f107 0108 	add.w	r1, r7, #8
 800e544:	4610      	mov	r0, r2
 800e546:	4798      	blx	r3
 800e548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e54a:	e029      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 fa63 	bl	800ea1a <USBD_CtlError>
            err++;
 800e554:	7afb      	ldrb	r3, [r7, #11]
 800e556:	3301      	adds	r3, #1
 800e558:	72fb      	strb	r3, [r7, #11]
          break;
 800e55a:	e021      	b.n	800e5a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e562:	699b      	ldr	r3, [r3, #24]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d00b      	beq.n	800e580 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e56e:	699b      	ldr	r3, [r3, #24]
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	7c12      	ldrb	r2, [r2, #16]
 800e574:	f107 0108 	add.w	r1, r7, #8
 800e578:	4610      	mov	r0, r2
 800e57a:	4798      	blx	r3
 800e57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e57e:	e00f      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e580:	6839      	ldr	r1, [r7, #0]
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 fa49 	bl	800ea1a <USBD_CtlError>
            err++;
 800e588:	7afb      	ldrb	r3, [r7, #11]
 800e58a:	3301      	adds	r3, #1
 800e58c:	72fb      	strb	r3, [r7, #11]
          break;
 800e58e:	e007      	b.n	800e5a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e590:	6839      	ldr	r1, [r7, #0]
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 fa41 	bl	800ea1a <USBD_CtlError>
          err++;
 800e598:	7afb      	ldrb	r3, [r7, #11]
 800e59a:	3301      	adds	r3, #1
 800e59c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e59e:	bf00      	nop
      }
      break;
 800e5a0:	e037      	b.n	800e612 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	7c1b      	ldrb	r3, [r3, #16]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d109      	bne.n	800e5be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5b2:	f107 0208 	add.w	r2, r7, #8
 800e5b6:	4610      	mov	r0, r2
 800e5b8:	4798      	blx	r3
 800e5ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5bc:	e029      	b.n	800e612 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e5be:	6839      	ldr	r1, [r7, #0]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fa2a 	bl	800ea1a <USBD_CtlError>
        err++;
 800e5c6:	7afb      	ldrb	r3, [r7, #11]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e5cc:	e021      	b.n	800e612 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	7c1b      	ldrb	r3, [r3, #16]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d10d      	bne.n	800e5f2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5de:	f107 0208 	add.w	r2, r7, #8
 800e5e2:	4610      	mov	r0, r2
 800e5e4:	4798      	blx	r3
 800e5e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	2207      	movs	r2, #7
 800e5ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5f0:	e00f      	b.n	800e612 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fa10 	bl	800ea1a <USBD_CtlError>
        err++;
 800e5fa:	7afb      	ldrb	r3, [r7, #11]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	72fb      	strb	r3, [r7, #11]
      break;
 800e600:	e007      	b.n	800e612 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 fa08 	bl	800ea1a <USBD_CtlError>
      err++;
 800e60a:	7afb      	ldrb	r3, [r7, #11]
 800e60c:	3301      	adds	r3, #1
 800e60e:	72fb      	strb	r3, [r7, #11]
      break;
 800e610:	bf00      	nop
  }

  if (err != 0U)
 800e612:	7afb      	ldrb	r3, [r7, #11]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d11e      	bne.n	800e656 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	88db      	ldrh	r3, [r3, #6]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d016      	beq.n	800e64e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e620:	893b      	ldrh	r3, [r7, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00e      	beq.n	800e644 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	88da      	ldrh	r2, [r3, #6]
 800e62a:	893b      	ldrh	r3, [r7, #8]
 800e62c:	4293      	cmp	r3, r2
 800e62e:	bf28      	it	cs
 800e630:	4613      	movcs	r3, r2
 800e632:	b29b      	uxth	r3, r3
 800e634:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e636:	893b      	ldrh	r3, [r7, #8]
 800e638:	461a      	mov	r2, r3
 800e63a:	68f9      	ldr	r1, [r7, #12]
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 fa5d 	bl	800eafc <USBD_CtlSendData>
 800e642:	e009      	b.n	800e658 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f9e7 	bl	800ea1a <USBD_CtlError>
 800e64c:	e004      	b.n	800e658 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 faae 	bl	800ebb0 <USBD_CtlSendStatus>
 800e654:	e000      	b.n	800e658 <USBD_GetDescriptor+0x320>
    return;
 800e656:	bf00      	nop
  }
}
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop

0800e660 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	889b      	ldrh	r3, [r3, #4]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d131      	bne.n	800e6d6 <USBD_SetAddress+0x76>
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	88db      	ldrh	r3, [r3, #6]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d12d      	bne.n	800e6d6 <USBD_SetAddress+0x76>
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	885b      	ldrh	r3, [r3, #2]
 800e67e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e680:	d829      	bhi.n	800e6d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	885b      	ldrh	r3, [r3, #2]
 800e686:	b2db      	uxtb	r3, r3
 800e688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e68c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e694:	b2db      	uxtb	r3, r3
 800e696:	2b03      	cmp	r3, #3
 800e698:	d104      	bne.n	800e6a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e69a:	6839      	ldr	r1, [r7, #0]
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 f9bc 	bl	800ea1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6a2:	e01d      	b.n	800e6e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	7bfa      	ldrb	r2, [r7, #15]
 800e6a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f004 fc65 	bl	8012f80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 fa7a 	bl	800ebb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d004      	beq.n	800e6cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2202      	movs	r2, #2
 800e6c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6ca:	e009      	b.n	800e6e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6d4:	e004      	b.n	800e6e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e6d6:	6839      	ldr	r1, [r7, #0]
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f99e 	bl	800ea1a <USBD_CtlError>
  }
}
 800e6de:	bf00      	nop
 800e6e0:	bf00      	nop
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	885b      	ldrh	r3, [r3, #2]
 800e6fa:	b2da      	uxtb	r2, r3
 800e6fc:	4b4e      	ldr	r3, [pc, #312]	@ (800e838 <USBD_SetConfig+0x150>)
 800e6fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e700:	4b4d      	ldr	r3, [pc, #308]	@ (800e838 <USBD_SetConfig+0x150>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	2b01      	cmp	r3, #1
 800e706:	d905      	bls.n	800e714 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e708:	6839      	ldr	r1, [r7, #0]
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 f985 	bl	800ea1a <USBD_CtlError>
    return USBD_FAIL;
 800e710:	2303      	movs	r3, #3
 800e712:	e08c      	b.n	800e82e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d002      	beq.n	800e726 <USBD_SetConfig+0x3e>
 800e720:	2b03      	cmp	r3, #3
 800e722:	d029      	beq.n	800e778 <USBD_SetConfig+0x90>
 800e724:	e075      	b.n	800e812 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e726:	4b44      	ldr	r3, [pc, #272]	@ (800e838 <USBD_SetConfig+0x150>)
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d020      	beq.n	800e770 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e72e:	4b42      	ldr	r3, [pc, #264]	@ (800e838 <USBD_SetConfig+0x150>)
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	461a      	mov	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e738:	4b3f      	ldr	r3, [pc, #252]	@ (800e838 <USBD_SetConfig+0x150>)
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	4619      	mov	r1, r3
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7ff f84b 	bl	800d7da <USBD_SetClassConfig>
 800e744:	4603      	mov	r3, r0
 800e746:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e748:	7bfb      	ldrb	r3, [r7, #15]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d008      	beq.n	800e760 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e74e:	6839      	ldr	r1, [r7, #0]
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 f962 	bl	800ea1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2202      	movs	r2, #2
 800e75a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e75e:	e065      	b.n	800e82c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f000 fa25 	bl	800ebb0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2203      	movs	r2, #3
 800e76a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e76e:	e05d      	b.n	800e82c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 fa1d 	bl	800ebb0 <USBD_CtlSendStatus>
      break;
 800e776:	e059      	b.n	800e82c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e778:	4b2f      	ldr	r3, [pc, #188]	@ (800e838 <USBD_SetConfig+0x150>)
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d112      	bne.n	800e7a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2202      	movs	r2, #2
 800e784:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e788:	4b2b      	ldr	r3, [pc, #172]	@ (800e838 <USBD_SetConfig+0x150>)
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	461a      	mov	r2, r3
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e792:	4b29      	ldr	r3, [pc, #164]	@ (800e838 <USBD_SetConfig+0x150>)
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	4619      	mov	r1, r3
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7ff f83a 	bl	800d812 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 fa06 	bl	800ebb0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e7a4:	e042      	b.n	800e82c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e7a6:	4b24      	ldr	r3, [pc, #144]	@ (800e838 <USBD_SetConfig+0x150>)
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d02a      	beq.n	800e80a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7ff f828 	bl	800d812 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e7c2:	4b1d      	ldr	r3, [pc, #116]	@ (800e838 <USBD_SetConfig+0x150>)
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800e838 <USBD_SetConfig+0x150>)
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f7ff f801 	bl	800d7da <USBD_SetClassConfig>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e7dc:	7bfb      	ldrb	r3, [r7, #15]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00f      	beq.n	800e802 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e7e2:	6839      	ldr	r1, [r7, #0]
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 f918 	bl	800ea1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f7ff f80d 	bl	800d812 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2202      	movs	r2, #2
 800e7fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e800:	e014      	b.n	800e82c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 f9d4 	bl	800ebb0 <USBD_CtlSendStatus>
      break;
 800e808:	e010      	b.n	800e82c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 f9d0 	bl	800ebb0 <USBD_CtlSendStatus>
      break;
 800e810:	e00c      	b.n	800e82c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e812:	6839      	ldr	r1, [r7, #0]
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 f900 	bl	800ea1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e81a:	4b07      	ldr	r3, [pc, #28]	@ (800e838 <USBD_SetConfig+0x150>)
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	4619      	mov	r1, r3
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f7fe fff6 	bl	800d812 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e826:	2303      	movs	r3, #3
 800e828:	73fb      	strb	r3, [r7, #15]
      break;
 800e82a:	bf00      	nop
  }

  return ret;
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20018a9c 	.word	0x20018a9c

0800e83c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	88db      	ldrh	r3, [r3, #6]
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d004      	beq.n	800e858 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e84e:	6839      	ldr	r1, [r7, #0]
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 f8e2 	bl	800ea1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e856:	e023      	b.n	800e8a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	2b02      	cmp	r3, #2
 800e862:	dc02      	bgt.n	800e86a <USBD_GetConfig+0x2e>
 800e864:	2b00      	cmp	r3, #0
 800e866:	dc03      	bgt.n	800e870 <USBD_GetConfig+0x34>
 800e868:	e015      	b.n	800e896 <USBD_GetConfig+0x5a>
 800e86a:	2b03      	cmp	r3, #3
 800e86c:	d00b      	beq.n	800e886 <USBD_GetConfig+0x4a>
 800e86e:	e012      	b.n	800e896 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	3308      	adds	r3, #8
 800e87a:	2201      	movs	r2, #1
 800e87c:	4619      	mov	r1, r3
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f93c 	bl	800eafc <USBD_CtlSendData>
        break;
 800e884:	e00c      	b.n	800e8a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	3304      	adds	r3, #4
 800e88a:	2201      	movs	r2, #1
 800e88c:	4619      	mov	r1, r3
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 f934 	bl	800eafc <USBD_CtlSendData>
        break;
 800e894:	e004      	b.n	800e8a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e896:	6839      	ldr	r1, [r7, #0]
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 f8be 	bl	800ea1a <USBD_CtlError>
        break;
 800e89e:	bf00      	nop
}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	3b01      	subs	r3, #1
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d81e      	bhi.n	800e8fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	88db      	ldrh	r3, [r3, #6]
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d004      	beq.n	800e8d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e8c8:	6839      	ldr	r1, [r7, #0]
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 f8a5 	bl	800ea1a <USBD_CtlError>
        break;
 800e8d0:	e01a      	b.n	800e908 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d005      	beq.n	800e8ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	f043 0202 	orr.w	r2, r3, #2
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	330c      	adds	r3, #12
 800e8f2:	2202      	movs	r2, #2
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 f900 	bl	800eafc <USBD_CtlSendData>
      break;
 800e8fc:	e004      	b.n	800e908 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e8fe:	6839      	ldr	r1, [r7, #0]
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f000 f88a 	bl	800ea1a <USBD_CtlError>
      break;
 800e906:	bf00      	nop
  }
}
 800e908:	bf00      	nop
 800e90a:	3708      	adds	r7, #8
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	885b      	ldrh	r3, [r3, #2]
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d107      	bne.n	800e932 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2201      	movs	r2, #1
 800e926:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f940 	bl	800ebb0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e930:	e013      	b.n	800e95a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	885b      	ldrh	r3, [r3, #2]
 800e936:	2b02      	cmp	r3, #2
 800e938:	d10b      	bne.n	800e952 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	889b      	ldrh	r3, [r3, #4]
 800e93e:	0a1b      	lsrs	r3, r3, #8
 800e940:	b29b      	uxth	r3, r3
 800e942:	b2da      	uxtb	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 f930 	bl	800ebb0 <USBD_CtlSendStatus>
}
 800e950:	e003      	b.n	800e95a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e952:	6839      	ldr	r1, [r7, #0]
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f000 f860 	bl	800ea1a <USBD_CtlError>
}
 800e95a:	bf00      	nop
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b082      	sub	sp, #8
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
 800e96a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e972:	b2db      	uxtb	r3, r3
 800e974:	3b01      	subs	r3, #1
 800e976:	2b02      	cmp	r3, #2
 800e978:	d80b      	bhi.n	800e992 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	885b      	ldrh	r3, [r3, #2]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d10c      	bne.n	800e99c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2200      	movs	r2, #0
 800e986:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 f910 	bl	800ebb0 <USBD_CtlSendStatus>
      }
      break;
 800e990:	e004      	b.n	800e99c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e992:	6839      	ldr	r1, [r7, #0]
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 f840 	bl	800ea1a <USBD_CtlError>
      break;
 800e99a:	e000      	b.n	800e99e <USBD_ClrFeature+0x3c>
      break;
 800e99c:	bf00      	nop
  }
}
 800e99e:	bf00      	nop
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b084      	sub	sp, #16
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
 800e9ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	781a      	ldrb	r2, [r3, #0]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	781a      	ldrb	r2, [r3, #0]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f7ff fa16 	bl	800de02 <SWAPBYTE>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	461a      	mov	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f7ff fa09 	bl	800de02 <SWAPBYTE>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	3301      	adds	r3, #1
 800ea02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f7ff f9fc 	bl	800de02 <SWAPBYTE>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	80da      	strh	r2, [r3, #6]
}
 800ea12:	bf00      	nop
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b082      	sub	sp, #8
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
 800ea22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea24:	2180      	movs	r1, #128	@ 0x80
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f004 fa10 	bl	8012e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ea2c:	2100      	movs	r1, #0
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f004 fa0c 	bl	8012e4c <USBD_LL_StallEP>
}
 800ea34:	bf00      	nop
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b086      	sub	sp, #24
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d036      	beq.n	800eac0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ea56:	6938      	ldr	r0, [r7, #16]
 800ea58:	f000 f836 	bl	800eac8 <USBD_GetLen>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	3301      	adds	r3, #1
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ea6a:	7dfb      	ldrb	r3, [r7, #23]
 800ea6c:	68ba      	ldr	r2, [r7, #8]
 800ea6e:	4413      	add	r3, r2
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	7812      	ldrb	r2, [r2, #0]
 800ea74:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea76:	7dfb      	ldrb	r3, [r7, #23]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ea7c:	7dfb      	ldrb	r3, [r7, #23]
 800ea7e:	68ba      	ldr	r2, [r7, #8]
 800ea80:	4413      	add	r3, r2
 800ea82:	2203      	movs	r2, #3
 800ea84:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea86:	7dfb      	ldrb	r3, [r7, #23]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ea8c:	e013      	b.n	800eab6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ea8e:	7dfb      	ldrb	r3, [r7, #23]
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	4413      	add	r3, r2
 800ea94:	693a      	ldr	r2, [r7, #16]
 800ea96:	7812      	ldrb	r2, [r2, #0]
 800ea98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	613b      	str	r3, [r7, #16]
    idx++;
 800eaa0:	7dfb      	ldrb	r3, [r7, #23]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eaa6:	7dfb      	ldrb	r3, [r7, #23]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	4413      	add	r3, r2
 800eaac:	2200      	movs	r2, #0
 800eaae:	701a      	strb	r2, [r3, #0]
    idx++;
 800eab0:	7dfb      	ldrb	r3, [r7, #23]
 800eab2:	3301      	adds	r3, #1
 800eab4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d1e7      	bne.n	800ea8e <USBD_GetString+0x52>
 800eabe:	e000      	b.n	800eac2 <USBD_GetString+0x86>
    return;
 800eac0:	bf00      	nop
  }
}
 800eac2:	3718      	adds	r7, #24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ead0:	2300      	movs	r3, #0
 800ead2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ead8:	e005      	b.n	800eae6 <USBD_GetLen+0x1e>
  {
    len++;
 800eada:	7bfb      	ldrb	r3, [r7, #15]
 800eadc:	3301      	adds	r3, #1
 800eade:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	3301      	adds	r3, #1
 800eae4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1f5      	bne.n	800eada <USBD_GetLen+0x12>
  }

  return len;
 800eaee:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3714      	adds	r7, #20
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2202      	movs	r2, #2
 800eb0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	2100      	movs	r1, #0
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f004 fa62 	bl	8012fec <USBD_LL_Transmit>

  return USBD_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b084      	sub	sp, #16
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	60f8      	str	r0, [r7, #12]
 800eb3a:	60b9      	str	r1, [r7, #8]
 800eb3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	68ba      	ldr	r2, [r7, #8]
 800eb42:	2100      	movs	r1, #0
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f004 fa51 	bl	8012fec <USBD_LL_Transmit>

  return USBD_OK;
 800eb4a:	2300      	movs	r3, #0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2203      	movs	r2, #3
 800eb64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f004 fa6c 	bl	801305c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b084      	sub	sp, #16
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	60f8      	str	r0, [r7, #12]
 800eb96:	60b9      	str	r1, [r7, #8]
 800eb98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	68ba      	ldr	r2, [r7, #8]
 800eb9e:	2100      	movs	r1, #0
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f004 fa5b 	bl	801305c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3710      	adds	r7, #16
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2204      	movs	r2, #4
 800ebbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f004 fa10 	bl	8012fec <USBD_LL_Transmit>

  return USBD_OK;
 800ebcc:	2300      	movs	r3, #0
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3708      	adds	r7, #8
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b082      	sub	sp, #8
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2205      	movs	r2, #5
 800ebe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	2200      	movs	r2, #0
 800ebea:	2100      	movs	r1, #0
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f004 fa35 	bl	801305c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebf2:	2300      	movs	r3, #0
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <__NVIC_SetPriority>:
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	4603      	mov	r3, r0
 800ec04:	6039      	str	r1, [r7, #0]
 800ec06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ec08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	db0a      	blt.n	800ec26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	b2da      	uxtb	r2, r3
 800ec14:	490c      	ldr	r1, [pc, #48]	@ (800ec48 <__NVIC_SetPriority+0x4c>)
 800ec16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec1a:	0112      	lsls	r2, r2, #4
 800ec1c:	b2d2      	uxtb	r2, r2
 800ec1e:	440b      	add	r3, r1
 800ec20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ec24:	e00a      	b.n	800ec3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	b2da      	uxtb	r2, r3
 800ec2a:	4908      	ldr	r1, [pc, #32]	@ (800ec4c <__NVIC_SetPriority+0x50>)
 800ec2c:	79fb      	ldrb	r3, [r7, #7]
 800ec2e:	f003 030f 	and.w	r3, r3, #15
 800ec32:	3b04      	subs	r3, #4
 800ec34:	0112      	lsls	r2, r2, #4
 800ec36:	b2d2      	uxtb	r2, r2
 800ec38:	440b      	add	r3, r1
 800ec3a:	761a      	strb	r2, [r3, #24]
}
 800ec3c:	bf00      	nop
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	e000e100 	.word	0xe000e100
 800ec4c:	e000ed00 	.word	0xe000ed00

0800ec50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ec50:	b580      	push	{r7, lr}
 800ec52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ec54:	2100      	movs	r1, #0
 800ec56:	f06f 0004 	mvn.w	r0, #4
 800ec5a:	f7ff ffcf 	bl	800ebfc <__NVIC_SetPriority>
#endif
}
 800ec5e:	bf00      	nop
 800ec60:	bd80      	pop	{r7, pc}
	...

0800ec64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec6a:	f3ef 8305 	mrs	r3, IPSR
 800ec6e:	603b      	str	r3, [r7, #0]
  return(result);
 800ec70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d003      	beq.n	800ec7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ec76:	f06f 0305 	mvn.w	r3, #5
 800ec7a:	607b      	str	r3, [r7, #4]
 800ec7c:	e00c      	b.n	800ec98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ec7e:	4b0a      	ldr	r3, [pc, #40]	@ (800eca8 <osKernelInitialize+0x44>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d105      	bne.n	800ec92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ec86:	4b08      	ldr	r3, [pc, #32]	@ (800eca8 <osKernelInitialize+0x44>)
 800ec88:	2201      	movs	r2, #1
 800ec8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	607b      	str	r3, [r7, #4]
 800ec90:	e002      	b.n	800ec98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ec92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ec96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ec98:	687b      	ldr	r3, [r7, #4]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	370c      	adds	r7, #12
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	20018aa0 	.word	0x20018aa0

0800ecac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecb2:	f3ef 8305 	mrs	r3, IPSR
 800ecb6:	603b      	str	r3, [r7, #0]
  return(result);
 800ecb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d003      	beq.n	800ecc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ecbe:	f06f 0305 	mvn.w	r3, #5
 800ecc2:	607b      	str	r3, [r7, #4]
 800ecc4:	e010      	b.n	800ece8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ecc6:	4b0b      	ldr	r3, [pc, #44]	@ (800ecf4 <osKernelStart+0x48>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d109      	bne.n	800ece2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ecce:	f7ff ffbf 	bl	800ec50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ecd2:	4b08      	ldr	r3, [pc, #32]	@ (800ecf4 <osKernelStart+0x48>)
 800ecd4:	2202      	movs	r2, #2
 800ecd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ecd8:	f001 fe0e 	bl	80108f8 <vTaskStartScheduler>
      stat = osOK;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	607b      	str	r3, [r7, #4]
 800ece0:	e002      	b.n	800ece8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ece2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ece6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ece8:	687b      	ldr	r3, [r7, #4]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3708      	adds	r7, #8
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	20018aa0 	.word	0x20018aa0

0800ecf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b08e      	sub	sp, #56	@ 0x38
 800ecfc:	af04      	add	r7, sp, #16
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ed04:	2300      	movs	r3, #0
 800ed06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed08:	f3ef 8305 	mrs	r3, IPSR
 800ed0c:	617b      	str	r3, [r7, #20]
  return(result);
 800ed0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d17e      	bne.n	800ee12 <osThreadNew+0x11a>
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d07b      	beq.n	800ee12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ed1a:	2380      	movs	r3, #128	@ 0x80
 800ed1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ed1e:	2318      	movs	r3, #24
 800ed20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ed22:	2300      	movs	r3, #0
 800ed24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ed26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ed2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d045      	beq.n	800edbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d002      	beq.n	800ed40 <osThreadNew+0x48>
        name = attr->name;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	699b      	ldr	r3, [r3, #24]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d002      	beq.n	800ed4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	699b      	ldr	r3, [r3, #24]
 800ed4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d008      	beq.n	800ed66 <osThreadNew+0x6e>
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	2b38      	cmp	r3, #56	@ 0x38
 800ed58:	d805      	bhi.n	800ed66 <osThreadNew+0x6e>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	f003 0301 	and.w	r3, r3, #1
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <osThreadNew+0x72>
        return (NULL);
 800ed66:	2300      	movs	r3, #0
 800ed68:	e054      	b.n	800ee14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	695b      	ldr	r3, [r3, #20]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d003      	beq.n	800ed7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	695b      	ldr	r3, [r3, #20]
 800ed76:	089b      	lsrs	r3, r3, #2
 800ed78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d00e      	beq.n	800eda0 <osThreadNew+0xa8>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	2ba7      	cmp	r3, #167	@ 0xa7
 800ed88:	d90a      	bls.n	800eda0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d006      	beq.n	800eda0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	695b      	ldr	r3, [r3, #20]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d002      	beq.n	800eda0 <osThreadNew+0xa8>
        mem = 1;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	61bb      	str	r3, [r7, #24]
 800ed9e:	e010      	b.n	800edc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	689b      	ldr	r3, [r3, #8]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d10c      	bne.n	800edc2 <osThreadNew+0xca>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d108      	bne.n	800edc2 <osThreadNew+0xca>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	691b      	ldr	r3, [r3, #16]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d104      	bne.n	800edc2 <osThreadNew+0xca>
          mem = 0;
 800edb8:	2300      	movs	r3, #0
 800edba:	61bb      	str	r3, [r7, #24]
 800edbc:	e001      	b.n	800edc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d110      	bne.n	800edea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800edd0:	9202      	str	r2, [sp, #8]
 800edd2:	9301      	str	r3, [sp, #4]
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	6a3a      	ldr	r2, [r7, #32]
 800eddc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f001 fb96 	bl	8010510 <xTaskCreateStatic>
 800ede4:	4603      	mov	r3, r0
 800ede6:	613b      	str	r3, [r7, #16]
 800ede8:	e013      	b.n	800ee12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800edea:	69bb      	ldr	r3, [r7, #24]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d110      	bne.n	800ee12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800edf0:	6a3b      	ldr	r3, [r7, #32]
 800edf2:	b29a      	uxth	r2, r3
 800edf4:	f107 0310 	add.w	r3, r7, #16
 800edf8:	9301      	str	r3, [sp, #4]
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ee02:	68f8      	ldr	r0, [r7, #12]
 800ee04:	f001 fbe4 	bl	80105d0 <xTaskCreate>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d001      	beq.n	800ee12 <osThreadNew+0x11a>
            hTask = NULL;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ee12:	693b      	ldr	r3, [r7, #16]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3728      	adds	r7, #40	@ 0x28
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b088      	sub	sp, #32
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ee24:	2300      	movs	r3, #0
 800ee26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee28:	f3ef 8305 	mrs	r3, IPSR
 800ee2c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ee2e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d174      	bne.n	800ef1e <osMutexNew+0x102>
    if (attr != NULL) {
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d003      	beq.n	800ee42 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	61bb      	str	r3, [r7, #24]
 800ee40:	e001      	b.n	800ee46 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ee42:	2300      	movs	r3, #0
 800ee44:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	f003 0301 	and.w	r3, r3, #1
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d002      	beq.n	800ee56 <osMutexNew+0x3a>
      rmtx = 1U;
 800ee50:	2301      	movs	r3, #1
 800ee52:	617b      	str	r3, [r7, #20]
 800ee54:	e001      	b.n	800ee5a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ee56:	2300      	movs	r3, #0
 800ee58:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	f003 0308 	and.w	r3, r3, #8
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d15c      	bne.n	800ef1e <osMutexNew+0x102>
      mem = -1;
 800ee64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee68:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d015      	beq.n	800ee9c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d006      	beq.n	800ee86 <osMutexNew+0x6a>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	2b4f      	cmp	r3, #79	@ 0x4f
 800ee7e:	d902      	bls.n	800ee86 <osMutexNew+0x6a>
          mem = 1;
 800ee80:	2301      	movs	r3, #1
 800ee82:	613b      	str	r3, [r7, #16]
 800ee84:	e00c      	b.n	800eea0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d108      	bne.n	800eea0 <osMutexNew+0x84>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d104      	bne.n	800eea0 <osMutexNew+0x84>
            mem = 0;
 800ee96:	2300      	movs	r3, #0
 800ee98:	613b      	str	r3, [r7, #16]
 800ee9a:	e001      	b.n	800eea0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d112      	bne.n	800eecc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d007      	beq.n	800eebc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	2004      	movs	r0, #4
 800eeb4:	f000 fc2b 	bl	800f70e <xQueueCreateMutexStatic>
 800eeb8:	61f8      	str	r0, [r7, #28]
 800eeba:	e016      	b.n	800eeea <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	4619      	mov	r1, r3
 800eec2:	2001      	movs	r0, #1
 800eec4:	f000 fc23 	bl	800f70e <xQueueCreateMutexStatic>
 800eec8:	61f8      	str	r0, [r7, #28]
 800eeca:	e00e      	b.n	800eeea <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d10b      	bne.n	800eeea <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d004      	beq.n	800eee2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800eed8:	2004      	movs	r0, #4
 800eeda:	f000 fc00 	bl	800f6de <xQueueCreateMutex>
 800eede:	61f8      	str	r0, [r7, #28]
 800eee0:	e003      	b.n	800eeea <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800eee2:	2001      	movs	r0, #1
 800eee4:	f000 fbfb 	bl	800f6de <xQueueCreateMutex>
 800eee8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d00c      	beq.n	800ef0a <osMutexNew+0xee>
        if (attr != NULL) {
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d003      	beq.n	800eefe <osMutexNew+0xe2>
          name = attr->name;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	60fb      	str	r3, [r7, #12]
 800eefc:	e001      	b.n	800ef02 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800eefe:	2300      	movs	r3, #0
 800ef00:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ef02:	68f9      	ldr	r1, [r7, #12]
 800ef04:	69f8      	ldr	r0, [r7, #28]
 800ef06:	f001 fa7b 	bl	8010400 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ef0a:	69fb      	ldr	r3, [r7, #28]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d006      	beq.n	800ef1e <osMutexNew+0x102>
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d003      	beq.n	800ef1e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	f043 0301 	orr.w	r3, r3, #1
 800ef1c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ef1e:	69fb      	ldr	r3, [r7, #28]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3720      	adds	r7, #32
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b08a      	sub	sp, #40	@ 0x28
 800ef2c:	af02      	add	r7, sp, #8
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ef34:	2300      	movs	r3, #0
 800ef36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef38:	f3ef 8305 	mrs	r3, IPSR
 800ef3c:	613b      	str	r3, [r7, #16]
  return(result);
 800ef3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d175      	bne.n	800f030 <osSemaphoreNew+0x108>
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d072      	beq.n	800f030 <osSemaphoreNew+0x108>
 800ef4a:	68ba      	ldr	r2, [r7, #8]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d86e      	bhi.n	800f030 <osSemaphoreNew+0x108>
    mem = -1;
 800ef52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ef56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d015      	beq.n	800ef8a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d006      	beq.n	800ef74 <osSemaphoreNew+0x4c>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	2b4f      	cmp	r3, #79	@ 0x4f
 800ef6c:	d902      	bls.n	800ef74 <osSemaphoreNew+0x4c>
        mem = 1;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	61bb      	str	r3, [r7, #24]
 800ef72:	e00c      	b.n	800ef8e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d108      	bne.n	800ef8e <osSemaphoreNew+0x66>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d104      	bne.n	800ef8e <osSemaphoreNew+0x66>
          mem = 0;
 800ef84:	2300      	movs	r3, #0
 800ef86:	61bb      	str	r3, [r7, #24]
 800ef88:	e001      	b.n	800ef8e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef94:	d04c      	beq.n	800f030 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d128      	bne.n	800efee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d10a      	bne.n	800efb8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	2203      	movs	r2, #3
 800efa8:	9200      	str	r2, [sp, #0]
 800efaa:	2200      	movs	r2, #0
 800efac:	2100      	movs	r1, #0
 800efae:	2001      	movs	r0, #1
 800efb0:	f000 faa0 	bl	800f4f4 <xQueueGenericCreateStatic>
 800efb4:	61f8      	str	r0, [r7, #28]
 800efb6:	e005      	b.n	800efc4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800efb8:	2203      	movs	r2, #3
 800efba:	2100      	movs	r1, #0
 800efbc:	2001      	movs	r0, #1
 800efbe:	f000 fb16 	bl	800f5ee <xQueueGenericCreate>
 800efc2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d022      	beq.n	800f010 <osSemaphoreNew+0xe8>
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d01f      	beq.n	800f010 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800efd0:	2300      	movs	r3, #0
 800efd2:	2200      	movs	r2, #0
 800efd4:	2100      	movs	r1, #0
 800efd6:	69f8      	ldr	r0, [r7, #28]
 800efd8:	f000 fc22 	bl	800f820 <xQueueGenericSend>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d016      	beq.n	800f010 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800efe2:	69f8      	ldr	r0, [r7, #28]
 800efe4:	f001 f8c0 	bl	8010168 <vQueueDelete>
            hSemaphore = NULL;
 800efe8:	2300      	movs	r3, #0
 800efea:	61fb      	str	r3, [r7, #28]
 800efec:	e010      	b.n	800f010 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d108      	bne.n	800f006 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	689b      	ldr	r3, [r3, #8]
 800eff8:	461a      	mov	r2, r3
 800effa:	68b9      	ldr	r1, [r7, #8]
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f000 fba1 	bl	800f744 <xQueueCreateCountingSemaphoreStatic>
 800f002:	61f8      	str	r0, [r7, #28]
 800f004:	e004      	b.n	800f010 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f006:	68b9      	ldr	r1, [r7, #8]
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f000 fbd4 	bl	800f7b6 <xQueueCreateCountingSemaphore>
 800f00e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00c      	beq.n	800f030 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d003      	beq.n	800f024 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	617b      	str	r3, [r7, #20]
 800f022:	e001      	b.n	800f028 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f024:	2300      	movs	r3, #0
 800f026:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f028:	6979      	ldr	r1, [r7, #20]
 800f02a:	69f8      	ldr	r0, [r7, #28]
 800f02c:	f001 f9e8 	bl	8010400 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f030:	69fb      	ldr	r3, [r7, #28]
}
 800f032:	4618      	mov	r0, r3
 800f034:	3720      	adds	r7, #32
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
	...

0800f03c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b086      	sub	sp, #24
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f04a:	2300      	movs	r3, #0
 800f04c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d103      	bne.n	800f05c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f054:	f06f 0303 	mvn.w	r3, #3
 800f058:	617b      	str	r3, [r7, #20]
 800f05a:	e039      	b.n	800f0d0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f05c:	f3ef 8305 	mrs	r3, IPSR
 800f060:	60fb      	str	r3, [r7, #12]
  return(result);
 800f062:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f064:	2b00      	cmp	r3, #0
 800f066:	d022      	beq.n	800f0ae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d003      	beq.n	800f076 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f06e:	f06f 0303 	mvn.w	r3, #3
 800f072:	617b      	str	r3, [r7, #20]
 800f074:	e02c      	b.n	800f0d0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f076:	2300      	movs	r3, #0
 800f078:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f07a:	f107 0308 	add.w	r3, r7, #8
 800f07e:	461a      	mov	r2, r3
 800f080:	2100      	movs	r1, #0
 800f082:	6938      	ldr	r0, [r7, #16]
 800f084:	f000 ffee 	bl	8010064 <xQueueReceiveFromISR>
 800f088:	4603      	mov	r3, r0
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d003      	beq.n	800f096 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f08e:	f06f 0302 	mvn.w	r3, #2
 800f092:	617b      	str	r3, [r7, #20]
 800f094:	e01c      	b.n	800f0d0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d019      	beq.n	800f0d0 <osSemaphoreAcquire+0x94>
 800f09c:	4b0f      	ldr	r3, [pc, #60]	@ (800f0dc <osSemaphoreAcquire+0xa0>)
 800f09e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0a2:	601a      	str	r2, [r3, #0]
 800f0a4:	f3bf 8f4f 	dsb	sy
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	e010      	b.n	800f0d0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	6938      	ldr	r0, [r7, #16]
 800f0b2:	f000 fec7 	bl	800fe44 <xQueueSemaphoreTake>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d009      	beq.n	800f0d0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d003      	beq.n	800f0ca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f0c2:	f06f 0301 	mvn.w	r3, #1
 800f0c6:	617b      	str	r3, [r7, #20]
 800f0c8:	e002      	b.n	800f0d0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f0ca:	f06f 0302 	mvn.w	r3, #2
 800f0ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f0d0:	697b      	ldr	r3, [r7, #20]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3718      	adds	r7, #24
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	e000ed04 	.word	0xe000ed04

0800f0e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b086      	sub	sp, #24
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d103      	bne.n	800f0fe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f0f6:	f06f 0303 	mvn.w	r3, #3
 800f0fa:	617b      	str	r3, [r7, #20]
 800f0fc:	e02c      	b.n	800f158 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0fe:	f3ef 8305 	mrs	r3, IPSR
 800f102:	60fb      	str	r3, [r7, #12]
  return(result);
 800f104:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f106:	2b00      	cmp	r3, #0
 800f108:	d01a      	beq.n	800f140 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f10a:	2300      	movs	r3, #0
 800f10c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f10e:	f107 0308 	add.w	r3, r7, #8
 800f112:	4619      	mov	r1, r3
 800f114:	6938      	ldr	r0, [r7, #16]
 800f116:	f000 fd23 	bl	800fb60 <xQueueGiveFromISR>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d003      	beq.n	800f128 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f120:	f06f 0302 	mvn.w	r3, #2
 800f124:	617b      	str	r3, [r7, #20]
 800f126:	e017      	b.n	800f158 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d014      	beq.n	800f158 <osSemaphoreRelease+0x78>
 800f12e:	4b0d      	ldr	r3, [pc, #52]	@ (800f164 <osSemaphoreRelease+0x84>)
 800f130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f134:	601a      	str	r2, [r3, #0]
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	f3bf 8f6f 	isb	sy
 800f13e:	e00b      	b.n	800f158 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f140:	2300      	movs	r3, #0
 800f142:	2200      	movs	r2, #0
 800f144:	2100      	movs	r1, #0
 800f146:	6938      	ldr	r0, [r7, #16]
 800f148:	f000 fb6a 	bl	800f820 <xQueueGenericSend>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d002      	beq.n	800f158 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f152:	f06f 0302 	mvn.w	r3, #2
 800f156:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f158:	697b      	ldr	r3, [r7, #20]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3718      	adds	r7, #24
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	e000ed04 	.word	0xe000ed04

0800f168 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f168:	b580      	push	{r7, lr}
 800f16a:	b08a      	sub	sp, #40	@ 0x28
 800f16c:	af02      	add	r7, sp, #8
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f174:	2300      	movs	r3, #0
 800f176:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f178:	f3ef 8305 	mrs	r3, IPSR
 800f17c:	613b      	str	r3, [r7, #16]
  return(result);
 800f17e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f180:	2b00      	cmp	r3, #0
 800f182:	d15f      	bne.n	800f244 <osMessageQueueNew+0xdc>
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d05c      	beq.n	800f244 <osMessageQueueNew+0xdc>
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d059      	beq.n	800f244 <osMessageQueueNew+0xdc>
    mem = -1;
 800f190:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f194:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d029      	beq.n	800f1f0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d012      	beq.n	800f1ca <osMessageQueueNew+0x62>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	2b4f      	cmp	r3, #79	@ 0x4f
 800f1aa:	d90e      	bls.n	800f1ca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d00a      	beq.n	800f1ca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	695a      	ldr	r2, [r3, #20]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	68b9      	ldr	r1, [r7, #8]
 800f1bc:	fb01 f303 	mul.w	r3, r1, r3
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d302      	bcc.n	800f1ca <osMessageQueueNew+0x62>
        mem = 1;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	61bb      	str	r3, [r7, #24]
 800f1c8:	e014      	b.n	800f1f4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	689b      	ldr	r3, [r3, #8]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d110      	bne.n	800f1f4 <osMessageQueueNew+0x8c>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10c      	bne.n	800f1f4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d108      	bne.n	800f1f4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	695b      	ldr	r3, [r3, #20]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d104      	bne.n	800f1f4 <osMessageQueueNew+0x8c>
          mem = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	61bb      	str	r3, [r7, #24]
 800f1ee:	e001      	b.n	800f1f4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d10b      	bne.n	800f212 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	691a      	ldr	r2, [r3, #16]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	2100      	movs	r1, #0
 800f204:	9100      	str	r1, [sp, #0]
 800f206:	68b9      	ldr	r1, [r7, #8]
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f000 f973 	bl	800f4f4 <xQueueGenericCreateStatic>
 800f20e:	61f8      	str	r0, [r7, #28]
 800f210:	e008      	b.n	800f224 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d105      	bne.n	800f224 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f218:	2200      	movs	r2, #0
 800f21a:	68b9      	ldr	r1, [r7, #8]
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 f9e6 	bl	800f5ee <xQueueGenericCreate>
 800f222:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d00c      	beq.n	800f244 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d003      	beq.n	800f238 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	617b      	str	r3, [r7, #20]
 800f236:	e001      	b.n	800f23c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f238:	2300      	movs	r3, #0
 800f23a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f23c:	6979      	ldr	r1, [r7, #20]
 800f23e:	69f8      	ldr	r0, [r7, #28]
 800f240:	f001 f8de 	bl	8010400 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f244:	69fb      	ldr	r3, [r7, #28]
}
 800f246:	4618      	mov	r0, r3
 800f248:	3720      	adds	r7, #32
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
	...

0800f250 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f250:	b480      	push	{r7}
 800f252:	b085      	sub	sp, #20
 800f254:	af00      	add	r7, sp, #0
 800f256:	60f8      	str	r0, [r7, #12]
 800f258:	60b9      	str	r1, [r7, #8]
 800f25a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	4a07      	ldr	r2, [pc, #28]	@ (800f27c <vApplicationGetIdleTaskMemory+0x2c>)
 800f260:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	4a06      	ldr	r2, [pc, #24]	@ (800f280 <vApplicationGetIdleTaskMemory+0x30>)
 800f266:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2280      	movs	r2, #128	@ 0x80
 800f26c:	601a      	str	r2, [r3, #0]
}
 800f26e:	bf00      	nop
 800f270:	3714      	adds	r7, #20
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	20018aa4 	.word	0x20018aa4
 800f280:	20018b4c 	.word	0x20018b4c

0800f284 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f284:	b480      	push	{r7}
 800f286:	b085      	sub	sp, #20
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	4a07      	ldr	r2, [pc, #28]	@ (800f2b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800f294:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	4a06      	ldr	r2, [pc, #24]	@ (800f2b4 <vApplicationGetTimerTaskMemory+0x30>)
 800f29a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f2a2:	601a      	str	r2, [r3, #0]
}
 800f2a4:	bf00      	nop
 800f2a6:	3714      	adds	r7, #20
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr
 800f2b0:	20018d4c 	.word	0x20018d4c
 800f2b4:	20018df4 	.word	0x20018df4

0800f2b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f103 0208 	add.w	r2, r3, #8
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f2d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f103 0208 	add.w	r2, r3, #8
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f103 0208 	add.w	r2, r3, #8
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f2ec:	bf00      	nop
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f306:	bf00      	nop
 800f308:	370c      	adds	r7, #12
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr

0800f312 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f312:	b480      	push	{r7}
 800f314:	b085      	sub	sp, #20
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
 800f31a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	689a      	ldr	r2, [r3, #8]
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	683a      	ldr	r2, [r7, #0]
 800f336:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	683a      	ldr	r2, [r7, #0]
 800f33c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	601a      	str	r2, [r3, #0]
}
 800f34e:	bf00      	nop
 800f350:	3714      	adds	r7, #20
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr

0800f35a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f35a:	b480      	push	{r7}
 800f35c:	b085      	sub	sp, #20
 800f35e:	af00      	add	r7, sp, #0
 800f360:	6078      	str	r0, [r7, #4]
 800f362:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f370:	d103      	bne.n	800f37a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	691b      	ldr	r3, [r3, #16]
 800f376:	60fb      	str	r3, [r7, #12]
 800f378:	e00c      	b.n	800f394 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	3308      	adds	r3, #8
 800f37e:	60fb      	str	r3, [r7, #12]
 800f380:	e002      	b.n	800f388 <vListInsert+0x2e>
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	60fb      	str	r3, [r7, #12]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	429a      	cmp	r2, r3
 800f392:	d2f6      	bcs.n	800f382 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	685a      	ldr	r2, [r3, #4]
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	1c5a      	adds	r2, r3, #1
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	601a      	str	r2, [r3, #0]
}
 800f3c0:	bf00      	nop
 800f3c2:	3714      	adds	r7, #20
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	6892      	ldr	r2, [r2, #8]
 800f3e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	6852      	ldr	r2, [r2, #4]
 800f3ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d103      	bne.n	800f400 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	689a      	ldr	r2, [r3, #8]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2200      	movs	r2, #0
 800f404:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	1e5a      	subs	r2, r3, #1
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
}
 800f414:	4618      	mov	r0, r3
 800f416:	3714      	adds	r7, #20
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d10b      	bne.n	800f44c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f438:	f383 8811 	msr	BASEPRI, r3
 800f43c:	f3bf 8f6f 	isb	sy
 800f440:	f3bf 8f4f 	dsb	sy
 800f444:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f446:	bf00      	nop
 800f448:	bf00      	nop
 800f44a:	e7fd      	b.n	800f448 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f44c:	f002 fd84 	bl	8011f58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f458:	68f9      	ldr	r1, [r7, #12]
 800f45a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f45c:	fb01 f303 	mul.w	r3, r1, r3
 800f460:	441a      	add	r2, r3
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f47c:	3b01      	subs	r3, #1
 800f47e:	68f9      	ldr	r1, [r7, #12]
 800f480:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f482:	fb01 f303 	mul.w	r3, r1, r3
 800f486:	441a      	add	r2, r3
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	22ff      	movs	r2, #255	@ 0xff
 800f490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	22ff      	movs	r2, #255	@ 0xff
 800f498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d114      	bne.n	800f4cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	691b      	ldr	r3, [r3, #16]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d01a      	beq.n	800f4e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	3310      	adds	r3, #16
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f001 fcf8 	bl	8010ea4 <xTaskRemoveFromEventList>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d012      	beq.n	800f4e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f4f0 <xQueueGenericReset+0xd0>)
 800f4bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4c0:	601a      	str	r2, [r3, #0]
 800f4c2:	f3bf 8f4f 	dsb	sy
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	e009      	b.n	800f4e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	3310      	adds	r3, #16
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7ff fef1 	bl	800f2b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	3324      	adds	r3, #36	@ 0x24
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7ff feec 	bl	800f2b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f4e0:	f002 fd6c 	bl	8011fbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f4e4:	2301      	movs	r3, #1
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	e000ed04 	.word	0xe000ed04

0800f4f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b08e      	sub	sp, #56	@ 0x38
 800f4f8:	af02      	add	r7, sp, #8
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	607a      	str	r2, [r7, #4]
 800f500:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10b      	bne.n	800f520 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f50c:	f383 8811 	msr	BASEPRI, r3
 800f510:	f3bf 8f6f 	isb	sy
 800f514:	f3bf 8f4f 	dsb	sy
 800f518:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f51a:	bf00      	nop
 800f51c:	bf00      	nop
 800f51e:	e7fd      	b.n	800f51c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d10b      	bne.n	800f53e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f52a:	f383 8811 	msr	BASEPRI, r3
 800f52e:	f3bf 8f6f 	isb	sy
 800f532:	f3bf 8f4f 	dsb	sy
 800f536:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f538:	bf00      	nop
 800f53a:	bf00      	nop
 800f53c:	e7fd      	b.n	800f53a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d002      	beq.n	800f54a <xQueueGenericCreateStatic+0x56>
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d001      	beq.n	800f54e <xQueueGenericCreateStatic+0x5a>
 800f54a:	2301      	movs	r3, #1
 800f54c:	e000      	b.n	800f550 <xQueueGenericCreateStatic+0x5c>
 800f54e:	2300      	movs	r3, #0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d10b      	bne.n	800f56c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f558:	f383 8811 	msr	BASEPRI, r3
 800f55c:	f3bf 8f6f 	isb	sy
 800f560:	f3bf 8f4f 	dsb	sy
 800f564:	623b      	str	r3, [r7, #32]
}
 800f566:	bf00      	nop
 800f568:	bf00      	nop
 800f56a:	e7fd      	b.n	800f568 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d102      	bne.n	800f578 <xQueueGenericCreateStatic+0x84>
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d101      	bne.n	800f57c <xQueueGenericCreateStatic+0x88>
 800f578:	2301      	movs	r3, #1
 800f57a:	e000      	b.n	800f57e <xQueueGenericCreateStatic+0x8a>
 800f57c:	2300      	movs	r3, #0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d10b      	bne.n	800f59a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f586:	f383 8811 	msr	BASEPRI, r3
 800f58a:	f3bf 8f6f 	isb	sy
 800f58e:	f3bf 8f4f 	dsb	sy
 800f592:	61fb      	str	r3, [r7, #28]
}
 800f594:	bf00      	nop
 800f596:	bf00      	nop
 800f598:	e7fd      	b.n	800f596 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f59a:	2350      	movs	r3, #80	@ 0x50
 800f59c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	2b50      	cmp	r3, #80	@ 0x50
 800f5a2:	d00b      	beq.n	800f5bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a8:	f383 8811 	msr	BASEPRI, r3
 800f5ac:	f3bf 8f6f 	isb	sy
 800f5b0:	f3bf 8f4f 	dsb	sy
 800f5b4:	61bb      	str	r3, [r7, #24]
}
 800f5b6:	bf00      	nop
 800f5b8:	bf00      	nop
 800f5ba:	e7fd      	b.n	800f5b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f5bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00d      	beq.n	800f5e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f5d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	68b9      	ldr	r1, [r7, #8]
 800f5de:	68f8      	ldr	r0, [r7, #12]
 800f5e0:	f000 f840 	bl	800f664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3730      	adds	r7, #48	@ 0x30
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b08a      	sub	sp, #40	@ 0x28
 800f5f2:	af02      	add	r7, sp, #8
 800f5f4:	60f8      	str	r0, [r7, #12]
 800f5f6:	60b9      	str	r1, [r7, #8]
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d10b      	bne.n	800f61a <xQueueGenericCreate+0x2c>
	__asm volatile
 800f602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f606:	f383 8811 	msr	BASEPRI, r3
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	613b      	str	r3, [r7, #16]
}
 800f614:	bf00      	nop
 800f616:	bf00      	nop
 800f618:	e7fd      	b.n	800f616 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	68ba      	ldr	r2, [r7, #8]
 800f61e:	fb02 f303 	mul.w	r3, r2, r3
 800f622:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	3350      	adds	r3, #80	@ 0x50
 800f628:	4618      	mov	r0, r3
 800f62a:	f002 fdb7 	bl	801219c <pvPortMalloc>
 800f62e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f630:	69bb      	ldr	r3, [r7, #24]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d011      	beq.n	800f65a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f636:	69bb      	ldr	r3, [r7, #24]
 800f638:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	3350      	adds	r3, #80	@ 0x50
 800f63e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	2200      	movs	r2, #0
 800f644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f648:	79fa      	ldrb	r2, [r7, #7]
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	9300      	str	r3, [sp, #0]
 800f64e:	4613      	mov	r3, r2
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	68b9      	ldr	r1, [r7, #8]
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f000 f805 	bl	800f664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f65a:	69bb      	ldr	r3, [r7, #24]
	}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3720      	adds	r7, #32
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
 800f670:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d103      	bne.n	800f680 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f678:	69bb      	ldr	r3, [r7, #24]
 800f67a:	69ba      	ldr	r2, [r7, #24]
 800f67c:	601a      	str	r2, [r3, #0]
 800f67e:	e002      	b.n	800f686 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	68fa      	ldr	r2, [r7, #12]
 800f68a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	68ba      	ldr	r2, [r7, #8]
 800f690:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f692:	2101      	movs	r1, #1
 800f694:	69b8      	ldr	r0, [r7, #24]
 800f696:	f7ff fec3 	bl	800f420 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	78fa      	ldrb	r2, [r7, #3]
 800f69e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f6a2:	bf00      	nop
 800f6a4:	3710      	adds	r7, #16
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b082      	sub	sp, #8
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00e      	beq.n	800f6d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	2100      	movs	r1, #0
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f000 f8a5 	bl	800f820 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f6d6:	bf00      	nop
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b086      	sub	sp, #24
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	617b      	str	r3, [r7, #20]
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f6f0:	79fb      	ldrb	r3, [r7, #7]
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	6939      	ldr	r1, [r7, #16]
 800f6f6:	6978      	ldr	r0, [r7, #20]
 800f6f8:	f7ff ff79 	bl	800f5ee <xQueueGenericCreate>
 800f6fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f7ff ffd3 	bl	800f6aa <prvInitialiseMutex>

		return xNewQueue;
 800f704:	68fb      	ldr	r3, [r7, #12]
	}
 800f706:	4618      	mov	r0, r3
 800f708:	3718      	adds	r7, #24
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b088      	sub	sp, #32
 800f712:	af02      	add	r7, sp, #8
 800f714:	4603      	mov	r3, r0
 800f716:	6039      	str	r1, [r7, #0]
 800f718:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f71a:	2301      	movs	r3, #1
 800f71c:	617b      	str	r3, [r7, #20]
 800f71e:	2300      	movs	r3, #0
 800f720:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f722:	79fb      	ldrb	r3, [r7, #7]
 800f724:	9300      	str	r3, [sp, #0]
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	2200      	movs	r2, #0
 800f72a:	6939      	ldr	r1, [r7, #16]
 800f72c:	6978      	ldr	r0, [r7, #20]
 800f72e:	f7ff fee1 	bl	800f4f4 <xQueueGenericCreateStatic>
 800f732:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f734:	68f8      	ldr	r0, [r7, #12]
 800f736:	f7ff ffb8 	bl	800f6aa <prvInitialiseMutex>

		return xNewQueue;
 800f73a:	68fb      	ldr	r3, [r7, #12]
	}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3718      	adds	r7, #24
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f744:	b580      	push	{r7, lr}
 800f746:	b08a      	sub	sp, #40	@ 0x28
 800f748:	af02      	add	r7, sp, #8
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d10b      	bne.n	800f76e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800f756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75a:	f383 8811 	msr	BASEPRI, r3
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f3bf 8f4f 	dsb	sy
 800f766:	61bb      	str	r3, [r7, #24]
}
 800f768:	bf00      	nop
 800f76a:	bf00      	nop
 800f76c:	e7fd      	b.n	800f76a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	429a      	cmp	r2, r3
 800f774:	d90b      	bls.n	800f78e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800f776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f77a:	f383 8811 	msr	BASEPRI, r3
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	617b      	str	r3, [r7, #20]
}
 800f788:	bf00      	nop
 800f78a:	bf00      	nop
 800f78c:	e7fd      	b.n	800f78a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f78e:	2302      	movs	r3, #2
 800f790:	9300      	str	r3, [sp, #0]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	2100      	movs	r1, #0
 800f798:	68f8      	ldr	r0, [r7, #12]
 800f79a:	f7ff feab 	bl	800f4f4 <xQueueGenericCreateStatic>
 800f79e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d002      	beq.n	800f7ac <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	68ba      	ldr	r2, [r7, #8]
 800f7aa:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f7ac:	69fb      	ldr	r3, [r7, #28]
	}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3720      	adds	r7, #32
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b086      	sub	sp, #24
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
 800f7be:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10b      	bne.n	800f7de <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800f7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ca:	f383 8811 	msr	BASEPRI, r3
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	613b      	str	r3, [r7, #16]
}
 800f7d8:	bf00      	nop
 800f7da:	bf00      	nop
 800f7dc:	e7fd      	b.n	800f7da <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f7de:	683a      	ldr	r2, [r7, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d90b      	bls.n	800f7fe <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800f7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ea:	f383 8811 	msr	BASEPRI, r3
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f3bf 8f4f 	dsb	sy
 800f7f6:	60fb      	str	r3, [r7, #12]
}
 800f7f8:	bf00      	nop
 800f7fa:	bf00      	nop
 800f7fc:	e7fd      	b.n	800f7fa <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f7fe:	2202      	movs	r2, #2
 800f800:	2100      	movs	r1, #0
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7ff fef3 	bl	800f5ee <xQueueGenericCreate>
 800f808:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d002      	beq.n	800f816 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	683a      	ldr	r2, [r7, #0]
 800f814:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f816:	697b      	ldr	r3, [r7, #20]
	}
 800f818:	4618      	mov	r0, r3
 800f81a:	3718      	adds	r7, #24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b08e      	sub	sp, #56	@ 0x38
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	607a      	str	r2, [r7, #4]
 800f82c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f82e:	2300      	movs	r3, #0
 800f830:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d10b      	bne.n	800f854 <xQueueGenericSend+0x34>
	__asm volatile
 800f83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f840:	f383 8811 	msr	BASEPRI, r3
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	f3bf 8f4f 	dsb	sy
 800f84c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f84e:	bf00      	nop
 800f850:	bf00      	nop
 800f852:	e7fd      	b.n	800f850 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d103      	bne.n	800f862 <xQueueGenericSend+0x42>
 800f85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d101      	bne.n	800f866 <xQueueGenericSend+0x46>
 800f862:	2301      	movs	r3, #1
 800f864:	e000      	b.n	800f868 <xQueueGenericSend+0x48>
 800f866:	2300      	movs	r3, #0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d10b      	bne.n	800f884 <xQueueGenericSend+0x64>
	__asm volatile
 800f86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f870:	f383 8811 	msr	BASEPRI, r3
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	f3bf 8f4f 	dsb	sy
 800f87c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f87e:	bf00      	nop
 800f880:	bf00      	nop
 800f882:	e7fd      	b.n	800f880 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	2b02      	cmp	r3, #2
 800f888:	d103      	bne.n	800f892 <xQueueGenericSend+0x72>
 800f88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f88c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d101      	bne.n	800f896 <xQueueGenericSend+0x76>
 800f892:	2301      	movs	r3, #1
 800f894:	e000      	b.n	800f898 <xQueueGenericSend+0x78>
 800f896:	2300      	movs	r3, #0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d10b      	bne.n	800f8b4 <xQueueGenericSend+0x94>
	__asm volatile
 800f89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a0:	f383 8811 	msr	BASEPRI, r3
 800f8a4:	f3bf 8f6f 	isb	sy
 800f8a8:	f3bf 8f4f 	dsb	sy
 800f8ac:	623b      	str	r3, [r7, #32]
}
 800f8ae:	bf00      	nop
 800f8b0:	bf00      	nop
 800f8b2:	e7fd      	b.n	800f8b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8b4:	f001 fce6 	bl	8011284 <xTaskGetSchedulerState>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d102      	bne.n	800f8c4 <xQueueGenericSend+0xa4>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d101      	bne.n	800f8c8 <xQueueGenericSend+0xa8>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e000      	b.n	800f8ca <xQueueGenericSend+0xaa>
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10b      	bne.n	800f8e6 <xQueueGenericSend+0xc6>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	61fb      	str	r3, [r7, #28]
}
 800f8e0:	bf00      	nop
 800f8e2:	bf00      	nop
 800f8e4:	e7fd      	b.n	800f8e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8e6:	f002 fb37 	bl	8011f58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d302      	bcc.n	800f8fc <xQueueGenericSend+0xdc>
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	2b02      	cmp	r3, #2
 800f8fa:	d129      	bne.n	800f950 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8fc:	683a      	ldr	r2, [r7, #0]
 800f8fe:	68b9      	ldr	r1, [r7, #8]
 800f900:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f902:	f000 fc6d 	bl	80101e0 <prvCopyDataToQueue>
 800f906:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d010      	beq.n	800f932 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f912:	3324      	adds	r3, #36	@ 0x24
 800f914:	4618      	mov	r0, r3
 800f916:	f001 fac5 	bl	8010ea4 <xTaskRemoveFromEventList>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d013      	beq.n	800f948 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f920:	4b3f      	ldr	r3, [pc, #252]	@ (800fa20 <xQueueGenericSend+0x200>)
 800f922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f926:	601a      	str	r2, [r3, #0]
 800f928:	f3bf 8f4f 	dsb	sy
 800f92c:	f3bf 8f6f 	isb	sy
 800f930:	e00a      	b.n	800f948 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f934:	2b00      	cmp	r3, #0
 800f936:	d007      	beq.n	800f948 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f938:	4b39      	ldr	r3, [pc, #228]	@ (800fa20 <xQueueGenericSend+0x200>)
 800f93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f93e:	601a      	str	r2, [r3, #0]
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f948:	f002 fb38 	bl	8011fbc <vPortExitCritical>
				return pdPASS;
 800f94c:	2301      	movs	r3, #1
 800f94e:	e063      	b.n	800fa18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d103      	bne.n	800f95e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f956:	f002 fb31 	bl	8011fbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	e05c      	b.n	800fa18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f960:	2b00      	cmp	r3, #0
 800f962:	d106      	bne.n	800f972 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f964:	f107 0314 	add.w	r3, r7, #20
 800f968:	4618      	mov	r0, r3
 800f96a:	f001 fb01 	bl	8010f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f96e:	2301      	movs	r3, #1
 800f970:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f972:	f002 fb23 	bl	8011fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f976:	f001 f82f 	bl	80109d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f97a:	f002 faed 	bl	8011f58 <vPortEnterCritical>
 800f97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f984:	b25b      	sxtb	r3, r3
 800f986:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f98a:	d103      	bne.n	800f994 <xQueueGenericSend+0x174>
 800f98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f98e:	2200      	movs	r2, #0
 800f990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f99a:	b25b      	sxtb	r3, r3
 800f99c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9a0:	d103      	bne.n	800f9aa <xQueueGenericSend+0x18a>
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f9aa:	f002 fb07 	bl	8011fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9ae:	1d3a      	adds	r2, r7, #4
 800f9b0:	f107 0314 	add.w	r3, r7, #20
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f001 faf0 	bl	8010f9c <xTaskCheckForTimeOut>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d124      	bne.n	800fa0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f9c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9c4:	f000 fd04 	bl	80103d0 <prvIsQueueFull>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d018      	beq.n	800fa00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d0:	3310      	adds	r3, #16
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	4611      	mov	r1, r2
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f001 fa12 	bl	8010e00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f9dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9de:	f000 fc8f 	bl	8010300 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f9e2:	f001 f83f 	bl	8010a64 <xTaskResumeAll>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f47f af7c 	bne.w	800f8e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800fa20 <xQueueGenericSend+0x200>)
 800f9f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9f4:	601a      	str	r2, [r3, #0]
 800f9f6:	f3bf 8f4f 	dsb	sy
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	e772      	b.n	800f8e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fa00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa02:	f000 fc7d 	bl	8010300 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa06:	f001 f82d 	bl	8010a64 <xTaskResumeAll>
 800fa0a:	e76c      	b.n	800f8e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fa0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa0e:	f000 fc77 	bl	8010300 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa12:	f001 f827 	bl	8010a64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fa16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3738      	adds	r7, #56	@ 0x38
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	e000ed04 	.word	0xe000ed04

0800fa24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b090      	sub	sp, #64	@ 0x40
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800fa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d10b      	bne.n	800fa54 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800fa3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa40:	f383 8811 	msr	BASEPRI, r3
 800fa44:	f3bf 8f6f 	isb	sy
 800fa48:	f3bf 8f4f 	dsb	sy
 800fa4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fa4e:	bf00      	nop
 800fa50:	bf00      	nop
 800fa52:	e7fd      	b.n	800fa50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d103      	bne.n	800fa62 <xQueueGenericSendFromISR+0x3e>
 800fa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d101      	bne.n	800fa66 <xQueueGenericSendFromISR+0x42>
 800fa62:	2301      	movs	r3, #1
 800fa64:	e000      	b.n	800fa68 <xQueueGenericSendFromISR+0x44>
 800fa66:	2300      	movs	r3, #0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10b      	bne.n	800fa84 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800fa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa70:	f383 8811 	msr	BASEPRI, r3
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fa7e:	bf00      	nop
 800fa80:	bf00      	nop
 800fa82:	e7fd      	b.n	800fa80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	d103      	bne.n	800fa92 <xQueueGenericSendFromISR+0x6e>
 800fa8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d101      	bne.n	800fa96 <xQueueGenericSendFromISR+0x72>
 800fa92:	2301      	movs	r3, #1
 800fa94:	e000      	b.n	800fa98 <xQueueGenericSendFromISR+0x74>
 800fa96:	2300      	movs	r3, #0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10b      	bne.n	800fab4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800fa9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa0:	f383 8811 	msr	BASEPRI, r3
 800faa4:	f3bf 8f6f 	isb	sy
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	623b      	str	r3, [r7, #32]
}
 800faae:	bf00      	nop
 800fab0:	bf00      	nop
 800fab2:	e7fd      	b.n	800fab0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fab4:	f002 fb30 	bl	8012118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fab8:	f3ef 8211 	mrs	r2, BASEPRI
 800fabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	61fa      	str	r2, [r7, #28]
 800face:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fad0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fad2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fadc:	429a      	cmp	r2, r3
 800fade:	d302      	bcc.n	800fae6 <xQueueGenericSendFromISR+0xc2>
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	2b02      	cmp	r3, #2
 800fae4:	d12f      	bne.n	800fb46 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800faec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800faf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800faf6:	683a      	ldr	r2, [r7, #0]
 800faf8:	68b9      	ldr	r1, [r7, #8]
 800fafa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fafc:	f000 fb70 	bl	80101e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fb00:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800fb04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb08:	d112      	bne.n	800fb30 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d016      	beq.n	800fb40 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb14:	3324      	adds	r3, #36	@ 0x24
 800fb16:	4618      	mov	r0, r3
 800fb18:	f001 f9c4 	bl	8010ea4 <xTaskRemoveFromEventList>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d00e      	beq.n	800fb40 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00b      	beq.n	800fb40 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	601a      	str	r2, [r3, #0]
 800fb2e:	e007      	b.n	800fb40 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fb30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fb34:	3301      	adds	r3, #1
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	b25a      	sxtb	r2, r3
 800fb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fb40:	2301      	movs	r3, #1
 800fb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800fb44:	e001      	b.n	800fb4a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fb46:	2300      	movs	r3, #0
 800fb48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb4c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fb54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3740      	adds	r7, #64	@ 0x40
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b08e      	sub	sp, #56	@ 0x38
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d10b      	bne.n	800fb8c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800fb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb78:	f383 8811 	msr	BASEPRI, r3
 800fb7c:	f3bf 8f6f 	isb	sy
 800fb80:	f3bf 8f4f 	dsb	sy
 800fb84:	623b      	str	r3, [r7, #32]
}
 800fb86:	bf00      	nop
 800fb88:	bf00      	nop
 800fb8a:	e7fd      	b.n	800fb88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00b      	beq.n	800fbac <xQueueGiveFromISR+0x4c>
	__asm volatile
 800fb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb98:	f383 8811 	msr	BASEPRI, r3
 800fb9c:	f3bf 8f6f 	isb	sy
 800fba0:	f3bf 8f4f 	dsb	sy
 800fba4:	61fb      	str	r3, [r7, #28]
}
 800fba6:	bf00      	nop
 800fba8:	bf00      	nop
 800fbaa:	e7fd      	b.n	800fba8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d103      	bne.n	800fbbc <xQueueGiveFromISR+0x5c>
 800fbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d101      	bne.n	800fbc0 <xQueueGiveFromISR+0x60>
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	e000      	b.n	800fbc2 <xQueueGiveFromISR+0x62>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d10b      	bne.n	800fbde <xQueueGiveFromISR+0x7e>
	__asm volatile
 800fbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbca:	f383 8811 	msr	BASEPRI, r3
 800fbce:	f3bf 8f6f 	isb	sy
 800fbd2:	f3bf 8f4f 	dsb	sy
 800fbd6:	61bb      	str	r3, [r7, #24]
}
 800fbd8:	bf00      	nop
 800fbda:	bf00      	nop
 800fbdc:	e7fd      	b.n	800fbda <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fbde:	f002 fa9b 	bl	8012118 <vPortValidateInterruptPriority>
	__asm volatile
 800fbe2:	f3ef 8211 	mrs	r2, BASEPRI
 800fbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbea:	f383 8811 	msr	BASEPRI, r3
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	f3bf 8f4f 	dsb	sy
 800fbf6:	617a      	str	r2, [r7, #20]
 800fbf8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fbfa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fbfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc02:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d22b      	bcs.n	800fc66 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc1a:	1c5a      	adds	r2, r3, #1
 800fc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fc20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fc24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc28:	d112      	bne.n	800fc50 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d016      	beq.n	800fc60 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc34:	3324      	adds	r3, #36	@ 0x24
 800fc36:	4618      	mov	r0, r3
 800fc38:	f001 f934 	bl	8010ea4 <xTaskRemoveFromEventList>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d00e      	beq.n	800fc60 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d00b      	beq.n	800fc60 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	601a      	str	r2, [r3, #0]
 800fc4e:	e007      	b.n	800fc60 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc54:	3301      	adds	r3, #1
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	b25a      	sxtb	r2, r3
 800fc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fc60:	2301      	movs	r3, #1
 800fc62:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc64:	e001      	b.n	800fc6a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc66:	2300      	movs	r3, #0
 800fc68:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f383 8811 	msr	BASEPRI, r3
}
 800fc74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3738      	adds	r7, #56	@ 0x38
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b08c      	sub	sp, #48	@ 0x30
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d10b      	bne.n	800fcb2 <xQueueReceive+0x32>
	__asm volatile
 800fc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc9e:	f383 8811 	msr	BASEPRI, r3
 800fca2:	f3bf 8f6f 	isb	sy
 800fca6:	f3bf 8f4f 	dsb	sy
 800fcaa:	623b      	str	r3, [r7, #32]
}
 800fcac:	bf00      	nop
 800fcae:	bf00      	nop
 800fcb0:	e7fd      	b.n	800fcae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d103      	bne.n	800fcc0 <xQueueReceive+0x40>
 800fcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d101      	bne.n	800fcc4 <xQueueReceive+0x44>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e000      	b.n	800fcc6 <xQueueReceive+0x46>
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d10b      	bne.n	800fce2 <xQueueReceive+0x62>
	__asm volatile
 800fcca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcce:	f383 8811 	msr	BASEPRI, r3
 800fcd2:	f3bf 8f6f 	isb	sy
 800fcd6:	f3bf 8f4f 	dsb	sy
 800fcda:	61fb      	str	r3, [r7, #28]
}
 800fcdc:	bf00      	nop
 800fcde:	bf00      	nop
 800fce0:	e7fd      	b.n	800fcde <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fce2:	f001 facf 	bl	8011284 <xTaskGetSchedulerState>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d102      	bne.n	800fcf2 <xQueueReceive+0x72>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d101      	bne.n	800fcf6 <xQueueReceive+0x76>
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	e000      	b.n	800fcf8 <xQueueReceive+0x78>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d10b      	bne.n	800fd14 <xQueueReceive+0x94>
	__asm volatile
 800fcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd00:	f383 8811 	msr	BASEPRI, r3
 800fd04:	f3bf 8f6f 	isb	sy
 800fd08:	f3bf 8f4f 	dsb	sy
 800fd0c:	61bb      	str	r3, [r7, #24]
}
 800fd0e:	bf00      	nop
 800fd10:	bf00      	nop
 800fd12:	e7fd      	b.n	800fd10 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd14:	f002 f920 	bl	8011f58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d01f      	beq.n	800fd64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd24:	68b9      	ldr	r1, [r7, #8]
 800fd26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd28:	f000 fac4 	bl	80102b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd2e:	1e5a      	subs	r2, r3, #1
 800fd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00f      	beq.n	800fd5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd3e:	3310      	adds	r3, #16
 800fd40:	4618      	mov	r0, r3
 800fd42:	f001 f8af 	bl	8010ea4 <xTaskRemoveFromEventList>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d007      	beq.n	800fd5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fd4c:	4b3c      	ldr	r3, [pc, #240]	@ (800fe40 <xQueueReceive+0x1c0>)
 800fd4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	f3bf 8f4f 	dsb	sy
 800fd58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fd5c:	f002 f92e 	bl	8011fbc <vPortExitCritical>
				return pdPASS;
 800fd60:	2301      	movs	r3, #1
 800fd62:	e069      	b.n	800fe38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d103      	bne.n	800fd72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd6a:	f002 f927 	bl	8011fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	e062      	b.n	800fe38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d106      	bne.n	800fd86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd78:	f107 0310 	add.w	r3, r7, #16
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f001 f8f7 	bl	8010f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd82:	2301      	movs	r3, #1
 800fd84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd86:	f002 f919 	bl	8011fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd8a:	f000 fe25 	bl	80109d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd8e:	f002 f8e3 	bl	8011f58 <vPortEnterCritical>
 800fd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd98:	b25b      	sxtb	r3, r3
 800fd9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd9e:	d103      	bne.n	800fda8 <xQueueReceive+0x128>
 800fda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda2:	2200      	movs	r2, #0
 800fda4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fdae:	b25b      	sxtb	r3, r3
 800fdb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fdb4:	d103      	bne.n	800fdbe <xQueueReceive+0x13e>
 800fdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fdbe:	f002 f8fd 	bl	8011fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fdc2:	1d3a      	adds	r2, r7, #4
 800fdc4:	f107 0310 	add.w	r3, r7, #16
 800fdc8:	4611      	mov	r1, r2
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f001 f8e6 	bl	8010f9c <xTaskCheckForTimeOut>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d123      	bne.n	800fe1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdd8:	f000 fae4 	bl	80103a4 <prvIsQueueEmpty>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d017      	beq.n	800fe12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde4:	3324      	adds	r3, #36	@ 0x24
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	4611      	mov	r1, r2
 800fdea:	4618      	mov	r0, r3
 800fdec:	f001 f808 	bl	8010e00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fdf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdf2:	f000 fa85 	bl	8010300 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fdf6:	f000 fe35 	bl	8010a64 <xTaskResumeAll>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d189      	bne.n	800fd14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800fe00:	4b0f      	ldr	r3, [pc, #60]	@ (800fe40 <xQueueReceive+0x1c0>)
 800fe02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe06:	601a      	str	r2, [r3, #0]
 800fe08:	f3bf 8f4f 	dsb	sy
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	e780      	b.n	800fd14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fe12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe14:	f000 fa74 	bl	8010300 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe18:	f000 fe24 	bl	8010a64 <xTaskResumeAll>
 800fe1c:	e77a      	b.n	800fd14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fe1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe20:	f000 fa6e 	bl	8010300 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe24:	f000 fe1e 	bl	8010a64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe2a:	f000 fabb 	bl	80103a4 <prvIsQueueEmpty>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	f43f af6f 	beq.w	800fd14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3730      	adds	r7, #48	@ 0x30
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	e000ed04 	.word	0xe000ed04

0800fe44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b08e      	sub	sp, #56	@ 0x38
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fe56:	2300      	movs	r3, #0
 800fe58:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fe5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10b      	bne.n	800fe78 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fe60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe64:	f383 8811 	msr	BASEPRI, r3
 800fe68:	f3bf 8f6f 	isb	sy
 800fe6c:	f3bf 8f4f 	dsb	sy
 800fe70:	623b      	str	r3, [r7, #32]
}
 800fe72:	bf00      	nop
 800fe74:	bf00      	nop
 800fe76:	e7fd      	b.n	800fe74 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00b      	beq.n	800fe98 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fe80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	61fb      	str	r3, [r7, #28]
}
 800fe92:	bf00      	nop
 800fe94:	bf00      	nop
 800fe96:	e7fd      	b.n	800fe94 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe98:	f001 f9f4 	bl	8011284 <xTaskGetSchedulerState>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d102      	bne.n	800fea8 <xQueueSemaphoreTake+0x64>
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <xQueueSemaphoreTake+0x68>
 800fea8:	2301      	movs	r3, #1
 800feaa:	e000      	b.n	800feae <xQueueSemaphoreTake+0x6a>
 800feac:	2300      	movs	r3, #0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d10b      	bne.n	800feca <xQueueSemaphoreTake+0x86>
	__asm volatile
 800feb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb6:	f383 8811 	msr	BASEPRI, r3
 800feba:	f3bf 8f6f 	isb	sy
 800febe:	f3bf 8f4f 	dsb	sy
 800fec2:	61bb      	str	r3, [r7, #24]
}
 800fec4:	bf00      	nop
 800fec6:	bf00      	nop
 800fec8:	e7fd      	b.n	800fec6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800feca:	f002 f845 	bl	8011f58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fed2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d024      	beq.n	800ff24 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800feda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fedc:	1e5a      	subs	r2, r3, #1
 800fede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d104      	bne.n	800fef4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800feea:	f001 fb45 	bl	8011578 <pvTaskIncrementMutexHeldCount>
 800feee:	4602      	mov	r2, r0
 800fef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef6:	691b      	ldr	r3, [r3, #16]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d00f      	beq.n	800ff1c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fefe:	3310      	adds	r3, #16
 800ff00:	4618      	mov	r0, r3
 800ff02:	f000 ffcf 	bl	8010ea4 <xTaskRemoveFromEventList>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d007      	beq.n	800ff1c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff0c:	4b54      	ldr	r3, [pc, #336]	@ (8010060 <xQueueSemaphoreTake+0x21c>)
 800ff0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff12:	601a      	str	r2, [r3, #0]
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff1c:	f002 f84e 	bl	8011fbc <vPortExitCritical>
				return pdPASS;
 800ff20:	2301      	movs	r3, #1
 800ff22:	e098      	b.n	8010056 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d112      	bne.n	800ff50 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00b      	beq.n	800ff48 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ff30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff34:	f383 8811 	msr	BASEPRI, r3
 800ff38:	f3bf 8f6f 	isb	sy
 800ff3c:	f3bf 8f4f 	dsb	sy
 800ff40:	617b      	str	r3, [r7, #20]
}
 800ff42:	bf00      	nop
 800ff44:	bf00      	nop
 800ff46:	e7fd      	b.n	800ff44 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ff48:	f002 f838 	bl	8011fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	e082      	b.n	8010056 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d106      	bne.n	800ff64 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff56:	f107 030c 	add.w	r3, r7, #12
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f001 f808 	bl	8010f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff60:	2301      	movs	r3, #1
 800ff62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff64:	f002 f82a 	bl	8011fbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff68:	f000 fd36 	bl	80109d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff6c:	f001 fff4 	bl	8011f58 <vPortEnterCritical>
 800ff70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff76:	b25b      	sxtb	r3, r3
 800ff78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff7c:	d103      	bne.n	800ff86 <xQueueSemaphoreTake+0x142>
 800ff7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff80:	2200      	movs	r2, #0
 800ff82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ff86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff8c:	b25b      	sxtb	r3, r3
 800ff8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff92:	d103      	bne.n	800ff9c <xQueueSemaphoreTake+0x158>
 800ff94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff96:	2200      	movs	r2, #0
 800ff98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ff9c:	f002 f80e 	bl	8011fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffa0:	463a      	mov	r2, r7
 800ffa2:	f107 030c 	add.w	r3, r7, #12
 800ffa6:	4611      	mov	r1, r2
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f000 fff7 	bl	8010f9c <xTaskCheckForTimeOut>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d132      	bne.n	801001a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffb6:	f000 f9f5 	bl	80103a4 <prvIsQueueEmpty>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d026      	beq.n	801000e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d109      	bne.n	800ffdc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ffc8:	f001 ffc6 	bl	8011f58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ffcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffce:	689b      	ldr	r3, [r3, #8]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f001 f975 	bl	80112c0 <xTaskPriorityInherit>
 800ffd6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ffd8:	f001 fff0 	bl	8011fbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ffdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffde:	3324      	adds	r3, #36	@ 0x24
 800ffe0:	683a      	ldr	r2, [r7, #0]
 800ffe2:	4611      	mov	r1, r2
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f000 ff0b 	bl	8010e00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ffea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffec:	f000 f988 	bl	8010300 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fff0:	f000 fd38 	bl	8010a64 <xTaskResumeAll>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	f47f af67 	bne.w	800feca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fffc:	4b18      	ldr	r3, [pc, #96]	@ (8010060 <xQueueSemaphoreTake+0x21c>)
 800fffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010002:	601a      	str	r2, [r3, #0]
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	e75d      	b.n	800feca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801000e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010010:	f000 f976 	bl	8010300 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010014:	f000 fd26 	bl	8010a64 <xTaskResumeAll>
 8010018:	e757      	b.n	800feca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801001a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801001c:	f000 f970 	bl	8010300 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010020:	f000 fd20 	bl	8010a64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010024:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010026:	f000 f9bd 	bl	80103a4 <prvIsQueueEmpty>
 801002a:	4603      	mov	r3, r0
 801002c:	2b00      	cmp	r3, #0
 801002e:	f43f af4c 	beq.w	800feca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010034:	2b00      	cmp	r3, #0
 8010036:	d00d      	beq.n	8010054 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010038:	f001 ff8e 	bl	8011f58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801003c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801003e:	f000 f8b7 	bl	80101b0 <prvGetDisinheritPriorityAfterTimeout>
 8010042:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801004a:	4618      	mov	r0, r3
 801004c:	f001 fa10 	bl	8011470 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010050:	f001 ffb4 	bl	8011fbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010054:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010056:	4618      	mov	r0, r3
 8010058:	3738      	adds	r7, #56	@ 0x38
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	e000ed04 	.word	0xe000ed04

08010064 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b08e      	sub	sp, #56	@ 0x38
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010076:	2b00      	cmp	r3, #0
 8010078:	d10b      	bne.n	8010092 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801007a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801007e:	f383 8811 	msr	BASEPRI, r3
 8010082:	f3bf 8f6f 	isb	sy
 8010086:	f3bf 8f4f 	dsb	sy
 801008a:	623b      	str	r3, [r7, #32]
}
 801008c:	bf00      	nop
 801008e:	bf00      	nop
 8010090:	e7fd      	b.n	801008e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d103      	bne.n	80100a0 <xQueueReceiveFromISR+0x3c>
 8010098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801009a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801009c:	2b00      	cmp	r3, #0
 801009e:	d101      	bne.n	80100a4 <xQueueReceiveFromISR+0x40>
 80100a0:	2301      	movs	r3, #1
 80100a2:	e000      	b.n	80100a6 <xQueueReceiveFromISR+0x42>
 80100a4:	2300      	movs	r3, #0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d10b      	bne.n	80100c2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80100aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ae:	f383 8811 	msr	BASEPRI, r3
 80100b2:	f3bf 8f6f 	isb	sy
 80100b6:	f3bf 8f4f 	dsb	sy
 80100ba:	61fb      	str	r3, [r7, #28]
}
 80100bc:	bf00      	nop
 80100be:	bf00      	nop
 80100c0:	e7fd      	b.n	80100be <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80100c2:	f002 f829 	bl	8012118 <vPortValidateInterruptPriority>
	__asm volatile
 80100c6:	f3ef 8211 	mrs	r2, BASEPRI
 80100ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ce:	f383 8811 	msr	BASEPRI, r3
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	f3bf 8f4f 	dsb	sy
 80100da:	61ba      	str	r2, [r7, #24]
 80100dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80100de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80100e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d02f      	beq.n	801014e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80100ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80100f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80100f8:	68b9      	ldr	r1, [r7, #8]
 80100fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100fc:	f000 f8da 	bl	80102b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010102:	1e5a      	subs	r2, r3, #1
 8010104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010106:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010108:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801010c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010110:	d112      	bne.n	8010138 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010114:	691b      	ldr	r3, [r3, #16]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d016      	beq.n	8010148 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801011a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801011c:	3310      	adds	r3, #16
 801011e:	4618      	mov	r0, r3
 8010120:	f000 fec0 	bl	8010ea4 <xTaskRemoveFromEventList>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00e      	beq.n	8010148 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00b      	beq.n	8010148 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2201      	movs	r2, #1
 8010134:	601a      	str	r2, [r3, #0]
 8010136:	e007      	b.n	8010148 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801013c:	3301      	adds	r3, #1
 801013e:	b2db      	uxtb	r3, r3
 8010140:	b25a      	sxtb	r2, r3
 8010142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010148:	2301      	movs	r3, #1
 801014a:	637b      	str	r3, [r7, #52]	@ 0x34
 801014c:	e001      	b.n	8010152 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801014e:	2300      	movs	r3, #0
 8010150:	637b      	str	r3, [r7, #52]	@ 0x34
 8010152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010154:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	f383 8811 	msr	BASEPRI, r3
}
 801015c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801015e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010160:	4618      	mov	r0, r3
 8010162:	3738      	adds	r7, #56	@ 0x38
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d10b      	bne.n	8010192 <vQueueDelete+0x2a>
	__asm volatile
 801017a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801017e:	f383 8811 	msr	BASEPRI, r3
 8010182:	f3bf 8f6f 	isb	sy
 8010186:	f3bf 8f4f 	dsb	sy
 801018a:	60bb      	str	r3, [r7, #8]
}
 801018c:	bf00      	nop
 801018e:	bf00      	nop
 8010190:	e7fd      	b.n	801018e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f000 f95e 	bl	8010454 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d102      	bne.n	80101a8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80101a2:	68f8      	ldr	r0, [r7, #12]
 80101a4:	f002 f8c8 	bl	8012338 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80101a8:	bf00      	nop
 80101aa:	3710      	adds	r7, #16
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80101b0:	b480      	push	{r7}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d006      	beq.n	80101ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80101ca:	60fb      	str	r3, [r7, #12]
 80101cc:	e001      	b.n	80101d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80101ce:	2300      	movs	r3, #0
 80101d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80101d2:	68fb      	ldr	r3, [r7, #12]
	}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3714      	adds	r7, #20
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b086      	sub	sp, #24
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80101ec:	2300      	movs	r3, #0
 80101ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d10d      	bne.n	801021a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d14d      	bne.n	80102a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	689b      	ldr	r3, [r3, #8]
 801020a:	4618      	mov	r0, r3
 801020c:	f001 f8c0 	bl	8011390 <xTaskPriorityDisinherit>
 8010210:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2200      	movs	r2, #0
 8010216:	609a      	str	r2, [r3, #8]
 8010218:	e043      	b.n	80102a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d119      	bne.n	8010254 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6858      	ldr	r0, [r3, #4]
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010228:	461a      	mov	r2, r3
 801022a:	68b9      	ldr	r1, [r7, #8]
 801022c:	f005 fb21 	bl	8015872 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	685a      	ldr	r2, [r3, #4]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010238:	441a      	add	r2, r3
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	685a      	ldr	r2, [r3, #4]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	429a      	cmp	r2, r3
 8010248:	d32b      	bcc.n	80102a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	605a      	str	r2, [r3, #4]
 8010252:	e026      	b.n	80102a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	68d8      	ldr	r0, [r3, #12]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801025c:	461a      	mov	r2, r3
 801025e:	68b9      	ldr	r1, [r7, #8]
 8010260:	f005 fb07 	bl	8015872 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	68da      	ldr	r2, [r3, #12]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801026c:	425b      	negs	r3, r3
 801026e:	441a      	add	r2, r3
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	68da      	ldr	r2, [r3, #12]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	429a      	cmp	r2, r3
 801027e:	d207      	bcs.n	8010290 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	689a      	ldr	r2, [r3, #8]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010288:	425b      	negs	r3, r3
 801028a:	441a      	add	r2, r3
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2b02      	cmp	r3, #2
 8010294:	d105      	bne.n	80102a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d002      	beq.n	80102a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	3b01      	subs	r3, #1
 80102a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	1c5a      	adds	r2, r3, #1
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80102aa:	697b      	ldr	r3, [r7, #20]
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3718      	adds	r7, #24
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d018      	beq.n	80102f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	68da      	ldr	r2, [r3, #12]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102ce:	441a      	add	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	68da      	ldr	r2, [r3, #12]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d303      	bcc.n	80102e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	68d9      	ldr	r1, [r3, #12]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102f0:	461a      	mov	r2, r3
 80102f2:	6838      	ldr	r0, [r7, #0]
 80102f4:	f005 fabd 	bl	8015872 <memcpy>
	}
}
 80102f8:	bf00      	nop
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010308:	f001 fe26 	bl	8011f58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010312:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010314:	e011      	b.n	801033a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801031a:	2b00      	cmp	r3, #0
 801031c:	d012      	beq.n	8010344 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	3324      	adds	r3, #36	@ 0x24
 8010322:	4618      	mov	r0, r3
 8010324:	f000 fdbe 	bl	8010ea4 <xTaskRemoveFromEventList>
 8010328:	4603      	mov	r3, r0
 801032a:	2b00      	cmp	r3, #0
 801032c:	d001      	beq.n	8010332 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801032e:	f000 fe99 	bl	8011064 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010332:	7bfb      	ldrb	r3, [r7, #15]
 8010334:	3b01      	subs	r3, #1
 8010336:	b2db      	uxtb	r3, r3
 8010338:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801033a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801033e:	2b00      	cmp	r3, #0
 8010340:	dce9      	bgt.n	8010316 <prvUnlockQueue+0x16>
 8010342:	e000      	b.n	8010346 <prvUnlockQueue+0x46>
					break;
 8010344:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	22ff      	movs	r2, #255	@ 0xff
 801034a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801034e:	f001 fe35 	bl	8011fbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010352:	f001 fe01 	bl	8011f58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801035c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801035e:	e011      	b.n	8010384 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d012      	beq.n	801038e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	3310      	adds	r3, #16
 801036c:	4618      	mov	r0, r3
 801036e:	f000 fd99 	bl	8010ea4 <xTaskRemoveFromEventList>
 8010372:	4603      	mov	r3, r0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010378:	f000 fe74 	bl	8011064 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801037c:	7bbb      	ldrb	r3, [r7, #14]
 801037e:	3b01      	subs	r3, #1
 8010380:	b2db      	uxtb	r3, r3
 8010382:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010388:	2b00      	cmp	r3, #0
 801038a:	dce9      	bgt.n	8010360 <prvUnlockQueue+0x60>
 801038c:	e000      	b.n	8010390 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801038e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	22ff      	movs	r2, #255	@ 0xff
 8010394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010398:	f001 fe10 	bl	8011fbc <vPortExitCritical>
}
 801039c:	bf00      	nop
 801039e:	3710      	adds	r7, #16
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b084      	sub	sp, #16
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80103ac:	f001 fdd4 	bl	8011f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d102      	bne.n	80103be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80103b8:	2301      	movs	r3, #1
 80103ba:	60fb      	str	r3, [r7, #12]
 80103bc:	e001      	b.n	80103c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80103be:	2300      	movs	r3, #0
 80103c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80103c2:	f001 fdfb 	bl	8011fbc <vPortExitCritical>

	return xReturn;
 80103c6:	68fb      	ldr	r3, [r7, #12]
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3710      	adds	r7, #16
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80103d8:	f001 fdbe 	bl	8011f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d102      	bne.n	80103ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80103e8:	2301      	movs	r3, #1
 80103ea:	60fb      	str	r3, [r7, #12]
 80103ec:	e001      	b.n	80103f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80103ee:	2300      	movs	r3, #0
 80103f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80103f2:	f001 fde3 	bl	8011fbc <vPortExitCritical>

	return xReturn;
 80103f6:	68fb      	ldr	r3, [r7, #12]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010400:	b480      	push	{r7}
 8010402:	b085      	sub	sp, #20
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801040a:	2300      	movs	r3, #0
 801040c:	60fb      	str	r3, [r7, #12]
 801040e:	e014      	b.n	801043a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010410:	4a0f      	ldr	r2, [pc, #60]	@ (8010450 <vQueueAddToRegistry+0x50>)
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d10b      	bne.n	8010434 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801041c:	490c      	ldr	r1, [pc, #48]	@ (8010450 <vQueueAddToRegistry+0x50>)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	683a      	ldr	r2, [r7, #0]
 8010422:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010426:	4a0a      	ldr	r2, [pc, #40]	@ (8010450 <vQueueAddToRegistry+0x50>)
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	00db      	lsls	r3, r3, #3
 801042c:	4413      	add	r3, r2
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010432:	e006      	b.n	8010442 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	3301      	adds	r3, #1
 8010438:	60fb      	str	r3, [r7, #12]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2b07      	cmp	r3, #7
 801043e:	d9e7      	bls.n	8010410 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010440:	bf00      	nop
 8010442:	bf00      	nop
 8010444:	3714      	adds	r7, #20
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop
 8010450:	200191f4 	.word	0x200191f4

08010454 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801045c:	2300      	movs	r3, #0
 801045e:	60fb      	str	r3, [r7, #12]
 8010460:	e016      	b.n	8010490 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010462:	4a10      	ldr	r2, [pc, #64]	@ (80104a4 <vQueueUnregisterQueue+0x50>)
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	4413      	add	r3, r2
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	429a      	cmp	r2, r3
 8010470:	d10b      	bne.n	801048a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010472:	4a0c      	ldr	r2, [pc, #48]	@ (80104a4 <vQueueUnregisterQueue+0x50>)
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2100      	movs	r1, #0
 8010478:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801047c:	4a09      	ldr	r2, [pc, #36]	@ (80104a4 <vQueueUnregisterQueue+0x50>)
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	00db      	lsls	r3, r3, #3
 8010482:	4413      	add	r3, r2
 8010484:	2200      	movs	r2, #0
 8010486:	605a      	str	r2, [r3, #4]
				break;
 8010488:	e006      	b.n	8010498 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	3301      	adds	r3, #1
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2b07      	cmp	r3, #7
 8010494:	d9e5      	bls.n	8010462 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010496:	bf00      	nop
 8010498:	bf00      	nop
 801049a:	3714      	adds	r7, #20
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr
 80104a4:	200191f4 	.word	0x200191f4

080104a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80104b8:	f001 fd4e 	bl	8011f58 <vPortEnterCritical>
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80104c2:	b25b      	sxtb	r3, r3
 80104c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80104c8:	d103      	bne.n	80104d2 <vQueueWaitForMessageRestricted+0x2a>
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	2200      	movs	r2, #0
 80104ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80104d8:	b25b      	sxtb	r3, r3
 80104da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80104de:	d103      	bne.n	80104e8 <vQueueWaitForMessageRestricted+0x40>
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	2200      	movs	r2, #0
 80104e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80104e8:	f001 fd68 	bl	8011fbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d106      	bne.n	8010502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	3324      	adds	r3, #36	@ 0x24
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	68b9      	ldr	r1, [r7, #8]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f000 fca5 	bl	8010e4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010502:	6978      	ldr	r0, [r7, #20]
 8010504:	f7ff fefc 	bl	8010300 <prvUnlockQueue>
	}
 8010508:	bf00      	nop
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010510:	b580      	push	{r7, lr}
 8010512:	b08e      	sub	sp, #56	@ 0x38
 8010514:	af04      	add	r7, sp, #16
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
 801051c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801051e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10b      	bne.n	801053c <xTaskCreateStatic+0x2c>
	__asm volatile
 8010524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010528:	f383 8811 	msr	BASEPRI, r3
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	623b      	str	r3, [r7, #32]
}
 8010536:	bf00      	nop
 8010538:	bf00      	nop
 801053a:	e7fd      	b.n	8010538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801053c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801053e:	2b00      	cmp	r3, #0
 8010540:	d10b      	bne.n	801055a <xTaskCreateStatic+0x4a>
	__asm volatile
 8010542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010546:	f383 8811 	msr	BASEPRI, r3
 801054a:	f3bf 8f6f 	isb	sy
 801054e:	f3bf 8f4f 	dsb	sy
 8010552:	61fb      	str	r3, [r7, #28]
}
 8010554:	bf00      	nop
 8010556:	bf00      	nop
 8010558:	e7fd      	b.n	8010556 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801055a:	23a8      	movs	r3, #168	@ 0xa8
 801055c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	2ba8      	cmp	r3, #168	@ 0xa8
 8010562:	d00b      	beq.n	801057c <xTaskCreateStatic+0x6c>
	__asm volatile
 8010564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010568:	f383 8811 	msr	BASEPRI, r3
 801056c:	f3bf 8f6f 	isb	sy
 8010570:	f3bf 8f4f 	dsb	sy
 8010574:	61bb      	str	r3, [r7, #24]
}
 8010576:	bf00      	nop
 8010578:	bf00      	nop
 801057a:	e7fd      	b.n	8010578 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801057c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801057e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010580:	2b00      	cmp	r3, #0
 8010582:	d01e      	beq.n	80105c2 <xTaskCreateStatic+0xb2>
 8010584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010586:	2b00      	cmp	r3, #0
 8010588:	d01b      	beq.n	80105c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801058a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801058c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801058e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010590:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010592:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010596:	2202      	movs	r2, #2
 8010598:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801059c:	2300      	movs	r3, #0
 801059e:	9303      	str	r3, [sp, #12]
 80105a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a2:	9302      	str	r3, [sp, #8]
 80105a4:	f107 0314 	add.w	r3, r7, #20
 80105a8:	9301      	str	r3, [sp, #4]
 80105aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ac:	9300      	str	r3, [sp, #0]
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	687a      	ldr	r2, [r7, #4]
 80105b2:	68b9      	ldr	r1, [r7, #8]
 80105b4:	68f8      	ldr	r0, [r7, #12]
 80105b6:	f000 f851 	bl	801065c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80105ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80105bc:	f000 f8f6 	bl	80107ac <prvAddNewTaskToReadyList>
 80105c0:	e001      	b.n	80105c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80105c2:	2300      	movs	r3, #0
 80105c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80105c6:	697b      	ldr	r3, [r7, #20]
	}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3728      	adds	r7, #40	@ 0x28
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b08c      	sub	sp, #48	@ 0x30
 80105d4:	af04      	add	r7, sp, #16
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	603b      	str	r3, [r7, #0]
 80105dc:	4613      	mov	r3, r2
 80105de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80105e0:	88fb      	ldrh	r3, [r7, #6]
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	4618      	mov	r0, r3
 80105e6:	f001 fdd9 	bl	801219c <pvPortMalloc>
 80105ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00e      	beq.n	8010610 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80105f2:	20a8      	movs	r0, #168	@ 0xa8
 80105f4:	f001 fdd2 	bl	801219c <pvPortMalloc>
 80105f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d003      	beq.n	8010608 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	697a      	ldr	r2, [r7, #20]
 8010604:	631a      	str	r2, [r3, #48]	@ 0x30
 8010606:	e005      	b.n	8010614 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010608:	6978      	ldr	r0, [r7, #20]
 801060a:	f001 fe95 	bl	8012338 <vPortFree>
 801060e:	e001      	b.n	8010614 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010610:	2300      	movs	r3, #0
 8010612:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d017      	beq.n	801064a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	2200      	movs	r2, #0
 801061e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010622:	88fa      	ldrh	r2, [r7, #6]
 8010624:	2300      	movs	r3, #0
 8010626:	9303      	str	r3, [sp, #12]
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	9302      	str	r3, [sp, #8]
 801062c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801062e:	9301      	str	r3, [sp, #4]
 8010630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010632:	9300      	str	r3, [sp, #0]
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	68b9      	ldr	r1, [r7, #8]
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f000 f80f 	bl	801065c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801063e:	69f8      	ldr	r0, [r7, #28]
 8010640:	f000 f8b4 	bl	80107ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010644:	2301      	movs	r3, #1
 8010646:	61bb      	str	r3, [r7, #24]
 8010648:	e002      	b.n	8010650 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801064a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801064e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010650:	69bb      	ldr	r3, [r7, #24]
	}
 8010652:	4618      	mov	r0, r3
 8010654:	3720      	adds	r7, #32
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
	...

0801065c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b088      	sub	sp, #32
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	607a      	str	r2, [r7, #4]
 8010668:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801066a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801066c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	009b      	lsls	r3, r3, #2
 8010672:	461a      	mov	r2, r3
 8010674:	21a5      	movs	r1, #165	@ 0xa5
 8010676:	f005 f827 	bl	80156c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801067a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801067c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010684:	3b01      	subs	r3, #1
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	4413      	add	r3, r2
 801068a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	f023 0307 	bic.w	r3, r3, #7
 8010692:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	f003 0307 	and.w	r3, r3, #7
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00b      	beq.n	80106b6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a2:	f383 8811 	msr	BASEPRI, r3
 80106a6:	f3bf 8f6f 	isb	sy
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	617b      	str	r3, [r7, #20]
}
 80106b0:	bf00      	nop
 80106b2:	bf00      	nop
 80106b4:	e7fd      	b.n	80106b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d01f      	beq.n	80106fc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80106bc:	2300      	movs	r3, #0
 80106be:	61fb      	str	r3, [r7, #28]
 80106c0:	e012      	b.n	80106e8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80106c2:	68ba      	ldr	r2, [r7, #8]
 80106c4:	69fb      	ldr	r3, [r7, #28]
 80106c6:	4413      	add	r3, r2
 80106c8:	7819      	ldrb	r1, [r3, #0]
 80106ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	4413      	add	r3, r2
 80106d0:	3334      	adds	r3, #52	@ 0x34
 80106d2:	460a      	mov	r2, r1
 80106d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80106d6:	68ba      	ldr	r2, [r7, #8]
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	4413      	add	r3, r2
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d006      	beq.n	80106f0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	3301      	adds	r3, #1
 80106e6:	61fb      	str	r3, [r7, #28]
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	2b0f      	cmp	r3, #15
 80106ec:	d9e9      	bls.n	80106c2 <prvInitialiseNewTask+0x66>
 80106ee:	e000      	b.n	80106f2 <prvInitialiseNewTask+0x96>
			{
				break;
 80106f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80106f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f4:	2200      	movs	r2, #0
 80106f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80106fa:	e003      	b.n	8010704 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80106fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106fe:	2200      	movs	r2, #0
 8010700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010706:	2b37      	cmp	r3, #55	@ 0x37
 8010708:	d901      	bls.n	801070e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801070a:	2337      	movs	r3, #55	@ 0x37
 801070c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801070e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010712:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010718:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801071a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801071c:	2200      	movs	r2, #0
 801071e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010722:	3304      	adds	r3, #4
 8010724:	4618      	mov	r0, r3
 8010726:	f7fe fde7 	bl	800f2f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801072a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801072c:	3318      	adds	r3, #24
 801072e:	4618      	mov	r0, r3
 8010730:	f7fe fde2 	bl	800f2f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010738:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801073a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801073c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010742:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010748:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801074a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801074c:	2200      	movs	r2, #0
 801074e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010754:	2200      	movs	r2, #0
 8010756:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801075a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801075c:	3354      	adds	r3, #84	@ 0x54
 801075e:	224c      	movs	r2, #76	@ 0x4c
 8010760:	2100      	movs	r1, #0
 8010762:	4618      	mov	r0, r3
 8010764:	f004 ffb0 	bl	80156c8 <memset>
 8010768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801076a:	4a0d      	ldr	r2, [pc, #52]	@ (80107a0 <prvInitialiseNewTask+0x144>)
 801076c:	659a      	str	r2, [r3, #88]	@ 0x58
 801076e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010770:	4a0c      	ldr	r2, [pc, #48]	@ (80107a4 <prvInitialiseNewTask+0x148>)
 8010772:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010776:	4a0c      	ldr	r2, [pc, #48]	@ (80107a8 <prvInitialiseNewTask+0x14c>)
 8010778:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801077a:	683a      	ldr	r2, [r7, #0]
 801077c:	68f9      	ldr	r1, [r7, #12]
 801077e:	69b8      	ldr	r0, [r7, #24]
 8010780:	f001 fabc 	bl	8011cfc <pxPortInitialiseStack>
 8010784:	4602      	mov	r2, r0
 8010786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010788:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801078a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801078c:	2b00      	cmp	r3, #0
 801078e:	d002      	beq.n	8010796 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010796:	bf00      	nop
 8010798:	3720      	adds	r7, #32
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	2002327c 	.word	0x2002327c
 80107a4:	200232e4 	.word	0x200232e4
 80107a8:	2002334c 	.word	0x2002334c

080107ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80107b4:	f001 fbd0 	bl	8011f58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80107b8:	4b2d      	ldr	r3, [pc, #180]	@ (8010870 <prvAddNewTaskToReadyList+0xc4>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	3301      	adds	r3, #1
 80107be:	4a2c      	ldr	r2, [pc, #176]	@ (8010870 <prvAddNewTaskToReadyList+0xc4>)
 80107c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80107c2:	4b2c      	ldr	r3, [pc, #176]	@ (8010874 <prvAddNewTaskToReadyList+0xc8>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d109      	bne.n	80107de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80107ca:	4a2a      	ldr	r2, [pc, #168]	@ (8010874 <prvAddNewTaskToReadyList+0xc8>)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80107d0:	4b27      	ldr	r3, [pc, #156]	@ (8010870 <prvAddNewTaskToReadyList+0xc4>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d110      	bne.n	80107fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80107d8:	f000 fc90 	bl	80110fc <prvInitialiseTaskLists>
 80107dc:	e00d      	b.n	80107fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80107de:	4b26      	ldr	r3, [pc, #152]	@ (8010878 <prvAddNewTaskToReadyList+0xcc>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d109      	bne.n	80107fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80107e6:	4b23      	ldr	r3, [pc, #140]	@ (8010874 <prvAddNewTaskToReadyList+0xc8>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d802      	bhi.n	80107fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80107f4:	4a1f      	ldr	r2, [pc, #124]	@ (8010874 <prvAddNewTaskToReadyList+0xc8>)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80107fa:	4b20      	ldr	r3, [pc, #128]	@ (801087c <prvAddNewTaskToReadyList+0xd0>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	3301      	adds	r3, #1
 8010800:	4a1e      	ldr	r2, [pc, #120]	@ (801087c <prvAddNewTaskToReadyList+0xd0>)
 8010802:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010804:	4b1d      	ldr	r3, [pc, #116]	@ (801087c <prvAddNewTaskToReadyList+0xd0>)
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010810:	4b1b      	ldr	r3, [pc, #108]	@ (8010880 <prvAddNewTaskToReadyList+0xd4>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	429a      	cmp	r2, r3
 8010816:	d903      	bls.n	8010820 <prvAddNewTaskToReadyList+0x74>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801081c:	4a18      	ldr	r2, [pc, #96]	@ (8010880 <prvAddNewTaskToReadyList+0xd4>)
 801081e:	6013      	str	r3, [r2, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010824:	4613      	mov	r3, r2
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	4413      	add	r3, r2
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	4a15      	ldr	r2, [pc, #84]	@ (8010884 <prvAddNewTaskToReadyList+0xd8>)
 801082e:	441a      	add	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	3304      	adds	r3, #4
 8010834:	4619      	mov	r1, r3
 8010836:	4610      	mov	r0, r2
 8010838:	f7fe fd6b 	bl	800f312 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801083c:	f001 fbbe 	bl	8011fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010840:	4b0d      	ldr	r3, [pc, #52]	@ (8010878 <prvAddNewTaskToReadyList+0xcc>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00e      	beq.n	8010866 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010848:	4b0a      	ldr	r3, [pc, #40]	@ (8010874 <prvAddNewTaskToReadyList+0xc8>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010852:	429a      	cmp	r2, r3
 8010854:	d207      	bcs.n	8010866 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010856:	4b0c      	ldr	r3, [pc, #48]	@ (8010888 <prvAddNewTaskToReadyList+0xdc>)
 8010858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801085c:	601a      	str	r2, [r3, #0]
 801085e:	f3bf 8f4f 	dsb	sy
 8010862:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010866:	bf00      	nop
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	20019708 	.word	0x20019708
 8010874:	20019234 	.word	0x20019234
 8010878:	20019714 	.word	0x20019714
 801087c:	20019724 	.word	0x20019724
 8010880:	20019710 	.word	0x20019710
 8010884:	20019238 	.word	0x20019238
 8010888:	e000ed04 	.word	0xe000ed04

0801088c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010894:	2300      	movs	r3, #0
 8010896:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d018      	beq.n	80108d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801089e:	4b14      	ldr	r3, [pc, #80]	@ (80108f0 <vTaskDelay+0x64>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d00b      	beq.n	80108be <vTaskDelay+0x32>
	__asm volatile
 80108a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108aa:	f383 8811 	msr	BASEPRI, r3
 80108ae:	f3bf 8f6f 	isb	sy
 80108b2:	f3bf 8f4f 	dsb	sy
 80108b6:	60bb      	str	r3, [r7, #8]
}
 80108b8:	bf00      	nop
 80108ba:	bf00      	nop
 80108bc:	e7fd      	b.n	80108ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80108be:	f000 f88b 	bl	80109d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80108c2:	2100      	movs	r1, #0
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f000 fe6b 	bl	80115a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80108ca:	f000 f8cb 	bl	8010a64 <xTaskResumeAll>
 80108ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d107      	bne.n	80108e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80108d6:	4b07      	ldr	r3, [pc, #28]	@ (80108f4 <vTaskDelay+0x68>)
 80108d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108dc:	601a      	str	r2, [r3, #0]
 80108de:	f3bf 8f4f 	dsb	sy
 80108e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80108e6:	bf00      	nop
 80108e8:	3710      	adds	r7, #16
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	20019730 	.word	0x20019730
 80108f4:	e000ed04 	.word	0xe000ed04

080108f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b08a      	sub	sp, #40	@ 0x28
 80108fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80108fe:	2300      	movs	r3, #0
 8010900:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010902:	2300      	movs	r3, #0
 8010904:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010906:	463a      	mov	r2, r7
 8010908:	1d39      	adds	r1, r7, #4
 801090a:	f107 0308 	add.w	r3, r7, #8
 801090e:	4618      	mov	r0, r3
 8010910:	f7fe fc9e 	bl	800f250 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010914:	6839      	ldr	r1, [r7, #0]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	68ba      	ldr	r2, [r7, #8]
 801091a:	9202      	str	r2, [sp, #8]
 801091c:	9301      	str	r3, [sp, #4]
 801091e:	2300      	movs	r3, #0
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	2300      	movs	r3, #0
 8010924:	460a      	mov	r2, r1
 8010926:	4924      	ldr	r1, [pc, #144]	@ (80109b8 <vTaskStartScheduler+0xc0>)
 8010928:	4824      	ldr	r0, [pc, #144]	@ (80109bc <vTaskStartScheduler+0xc4>)
 801092a:	f7ff fdf1 	bl	8010510 <xTaskCreateStatic>
 801092e:	4603      	mov	r3, r0
 8010930:	4a23      	ldr	r2, [pc, #140]	@ (80109c0 <vTaskStartScheduler+0xc8>)
 8010932:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010934:	4b22      	ldr	r3, [pc, #136]	@ (80109c0 <vTaskStartScheduler+0xc8>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d002      	beq.n	8010942 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801093c:	2301      	movs	r3, #1
 801093e:	617b      	str	r3, [r7, #20]
 8010940:	e001      	b.n	8010946 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010942:	2300      	movs	r3, #0
 8010944:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d102      	bne.n	8010952 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801094c:	f000 fe7c 	bl	8011648 <xTimerCreateTimerTask>
 8010950:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	2b01      	cmp	r3, #1
 8010956:	d11b      	bne.n	8010990 <vTaskStartScheduler+0x98>
	__asm volatile
 8010958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801095c:	f383 8811 	msr	BASEPRI, r3
 8010960:	f3bf 8f6f 	isb	sy
 8010964:	f3bf 8f4f 	dsb	sy
 8010968:	613b      	str	r3, [r7, #16]
}
 801096a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801096c:	4b15      	ldr	r3, [pc, #84]	@ (80109c4 <vTaskStartScheduler+0xcc>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	3354      	adds	r3, #84	@ 0x54
 8010972:	4a15      	ldr	r2, [pc, #84]	@ (80109c8 <vTaskStartScheduler+0xd0>)
 8010974:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010976:	4b15      	ldr	r3, [pc, #84]	@ (80109cc <vTaskStartScheduler+0xd4>)
 8010978:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801097c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801097e:	4b14      	ldr	r3, [pc, #80]	@ (80109d0 <vTaskStartScheduler+0xd8>)
 8010980:	2201      	movs	r2, #1
 8010982:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010984:	4b13      	ldr	r3, [pc, #76]	@ (80109d4 <vTaskStartScheduler+0xdc>)
 8010986:	2200      	movs	r2, #0
 8010988:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801098a:	f001 fa41 	bl	8011e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801098e:	e00f      	b.n	80109b0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010996:	d10b      	bne.n	80109b0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8010998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801099c:	f383 8811 	msr	BASEPRI, r3
 80109a0:	f3bf 8f6f 	isb	sy
 80109a4:	f3bf 8f4f 	dsb	sy
 80109a8:	60fb      	str	r3, [r7, #12]
}
 80109aa:	bf00      	nop
 80109ac:	bf00      	nop
 80109ae:	e7fd      	b.n	80109ac <vTaskStartScheduler+0xb4>
}
 80109b0:	bf00      	nop
 80109b2:	3718      	adds	r7, #24
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	0801b454 	.word	0x0801b454
 80109bc:	0801107d 	.word	0x0801107d
 80109c0:	2001972c 	.word	0x2001972c
 80109c4:	20019234 	.word	0x20019234
 80109c8:	20000140 	.word	0x20000140
 80109cc:	20019728 	.word	0x20019728
 80109d0:	20019714 	.word	0x20019714
 80109d4:	2001970c 	.word	0x2001970c

080109d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80109d8:	b480      	push	{r7}
 80109da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80109dc:	4b04      	ldr	r3, [pc, #16]	@ (80109f0 <vTaskSuspendAll+0x18>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	3301      	adds	r3, #1
 80109e2:	4a03      	ldr	r2, [pc, #12]	@ (80109f0 <vTaskSuspendAll+0x18>)
 80109e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80109e6:	bf00      	nop
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr
 80109f0:	20019730 	.word	0x20019730

080109f4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80109f4:	b480      	push	{r7}
 80109f6:	b083      	sub	sp, #12
 80109f8:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80109fa:	2300      	movs	r3, #0
 80109fc:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80109fe:	4b14      	ldr	r3, [pc, #80]	@ (8010a50 <prvGetExpectedIdleTime+0x5c>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d001      	beq.n	8010a0a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8010a06:	2301      	movs	r3, #1
 8010a08:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8010a0a:	4b12      	ldr	r3, [pc, #72]	@ (8010a54 <prvGetExpectedIdleTime+0x60>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d002      	beq.n	8010a1a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8010a14:	2300      	movs	r3, #0
 8010a16:	607b      	str	r3, [r7, #4]
 8010a18:	e012      	b.n	8010a40 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8010a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8010a58 <prvGetExpectedIdleTime+0x64>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d902      	bls.n	8010a28 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8010a22:	2300      	movs	r3, #0
 8010a24:	607b      	str	r3, [r7, #4]
 8010a26:	e00b      	b.n	8010a40 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d002      	beq.n	8010a34 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	607b      	str	r3, [r7, #4]
 8010a32:	e005      	b.n	8010a40 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8010a34:	4b09      	ldr	r3, [pc, #36]	@ (8010a5c <prvGetExpectedIdleTime+0x68>)
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	4b09      	ldr	r3, [pc, #36]	@ (8010a60 <prvGetExpectedIdleTime+0x6c>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	1ad3      	subs	r3, r2, r3
 8010a3e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8010a40:	687b      	ldr	r3, [r7, #4]
	}
 8010a42:	4618      	mov	r0, r3
 8010a44:	370c      	adds	r7, #12
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr
 8010a4e:	bf00      	nop
 8010a50:	20019710 	.word	0x20019710
 8010a54:	20019234 	.word	0x20019234
 8010a58:	20019238 	.word	0x20019238
 8010a5c:	20019728 	.word	0x20019728
 8010a60:	2001970c 	.word	0x2001970c

08010a64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a72:	4b42      	ldr	r3, [pc, #264]	@ (8010b7c <xTaskResumeAll+0x118>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d10b      	bne.n	8010a92 <xTaskResumeAll+0x2e>
	__asm volatile
 8010a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a7e:	f383 8811 	msr	BASEPRI, r3
 8010a82:	f3bf 8f6f 	isb	sy
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	603b      	str	r3, [r7, #0]
}
 8010a8c:	bf00      	nop
 8010a8e:	bf00      	nop
 8010a90:	e7fd      	b.n	8010a8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010a92:	f001 fa61 	bl	8011f58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010a96:	4b39      	ldr	r3, [pc, #228]	@ (8010b7c <xTaskResumeAll+0x118>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	4a37      	ldr	r2, [pc, #220]	@ (8010b7c <xTaskResumeAll+0x118>)
 8010a9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010aa0:	4b36      	ldr	r3, [pc, #216]	@ (8010b7c <xTaskResumeAll+0x118>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d162      	bne.n	8010b6e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010aa8:	4b35      	ldr	r3, [pc, #212]	@ (8010b80 <xTaskResumeAll+0x11c>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d05e      	beq.n	8010b6e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010ab0:	e02f      	b.n	8010b12 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ab2:	4b34      	ldr	r3, [pc, #208]	@ (8010b84 <xTaskResumeAll+0x120>)
 8010ab4:	68db      	ldr	r3, [r3, #12]
 8010ab6:	68db      	ldr	r3, [r3, #12]
 8010ab8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	3318      	adds	r3, #24
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fe fc84 	bl	800f3cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	3304      	adds	r3, #4
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7fe fc7f 	bl	800f3cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8010b88 <xTaskResumeAll+0x124>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d903      	bls.n	8010ae2 <xTaskResumeAll+0x7e>
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ade:	4a2a      	ldr	r2, [pc, #168]	@ (8010b88 <xTaskResumeAll+0x124>)
 8010ae0:	6013      	str	r3, [r2, #0]
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	4413      	add	r3, r2
 8010aec:	009b      	lsls	r3, r3, #2
 8010aee:	4a27      	ldr	r2, [pc, #156]	@ (8010b8c <xTaskResumeAll+0x128>)
 8010af0:	441a      	add	r2, r3
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	3304      	adds	r3, #4
 8010af6:	4619      	mov	r1, r3
 8010af8:	4610      	mov	r0, r2
 8010afa:	f7fe fc0a 	bl	800f312 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b02:	4b23      	ldr	r3, [pc, #140]	@ (8010b90 <xTaskResumeAll+0x12c>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d302      	bcc.n	8010b12 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010b0c:	4b21      	ldr	r3, [pc, #132]	@ (8010b94 <xTaskResumeAll+0x130>)
 8010b0e:	2201      	movs	r2, #1
 8010b10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010b12:	4b1c      	ldr	r3, [pc, #112]	@ (8010b84 <xTaskResumeAll+0x120>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d1cb      	bne.n	8010ab2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d001      	beq.n	8010b24 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010b20:	f000 fb90 	bl	8011244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010b24:	4b1c      	ldr	r3, [pc, #112]	@ (8010b98 <xTaskResumeAll+0x134>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d010      	beq.n	8010b52 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010b30:	f000 f846 	bl	8010bc0 <xTaskIncrementTick>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d002      	beq.n	8010b40 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010b3a:	4b16      	ldr	r3, [pc, #88]	@ (8010b94 <xTaskResumeAll+0x130>)
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	3b01      	subs	r3, #1
 8010b44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1f1      	bne.n	8010b30 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8010b4c:	4b12      	ldr	r3, [pc, #72]	@ (8010b98 <xTaskResumeAll+0x134>)
 8010b4e:	2200      	movs	r2, #0
 8010b50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010b52:	4b10      	ldr	r3, [pc, #64]	@ (8010b94 <xTaskResumeAll+0x130>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d009      	beq.n	8010b6e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8010b9c <xTaskResumeAll+0x138>)
 8010b60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b64:	601a      	str	r2, [r3, #0]
 8010b66:	f3bf 8f4f 	dsb	sy
 8010b6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b6e:	f001 fa25 	bl	8011fbc <vPortExitCritical>

	return xAlreadyYielded;
 8010b72:	68bb      	ldr	r3, [r7, #8]
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3710      	adds	r7, #16
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	20019730 	.word	0x20019730
 8010b80:	20019708 	.word	0x20019708
 8010b84:	200196c8 	.word	0x200196c8
 8010b88:	20019710 	.word	0x20019710
 8010b8c:	20019238 	.word	0x20019238
 8010b90:	20019234 	.word	0x20019234
 8010b94:	2001971c 	.word	0x2001971c
 8010b98:	20019718 	.word	0x20019718
 8010b9c:	e000ed04 	.word	0xe000ed04

08010ba0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b083      	sub	sp, #12
 8010ba4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010ba6:	4b05      	ldr	r3, [pc, #20]	@ (8010bbc <xTaskGetTickCount+0x1c>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010bac:	687b      	ldr	r3, [r7, #4]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	370c      	adds	r7, #12
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop
 8010bbc:	2001970c 	.word	0x2001970c

08010bc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b086      	sub	sp, #24
 8010bc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bca:	4b4f      	ldr	r3, [pc, #316]	@ (8010d08 <xTaskIncrementTick+0x148>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	f040 8090 	bne.w	8010cf4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8010d0c <xTaskIncrementTick+0x14c>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	3301      	adds	r3, #1
 8010bda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010bdc:	4a4b      	ldr	r2, [pc, #300]	@ (8010d0c <xTaskIncrementTick+0x14c>)
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d121      	bne.n	8010c2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010be8:	4b49      	ldr	r3, [pc, #292]	@ (8010d10 <xTaskIncrementTick+0x150>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d00b      	beq.n	8010c0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8010bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bf6:	f383 8811 	msr	BASEPRI, r3
 8010bfa:	f3bf 8f6f 	isb	sy
 8010bfe:	f3bf 8f4f 	dsb	sy
 8010c02:	603b      	str	r3, [r7, #0]
}
 8010c04:	bf00      	nop
 8010c06:	bf00      	nop
 8010c08:	e7fd      	b.n	8010c06 <xTaskIncrementTick+0x46>
 8010c0a:	4b41      	ldr	r3, [pc, #260]	@ (8010d10 <xTaskIncrementTick+0x150>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	60fb      	str	r3, [r7, #12]
 8010c10:	4b40      	ldr	r3, [pc, #256]	@ (8010d14 <xTaskIncrementTick+0x154>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4a3e      	ldr	r2, [pc, #248]	@ (8010d10 <xTaskIncrementTick+0x150>)
 8010c16:	6013      	str	r3, [r2, #0]
 8010c18:	4a3e      	ldr	r2, [pc, #248]	@ (8010d14 <xTaskIncrementTick+0x154>)
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	6013      	str	r3, [r2, #0]
 8010c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8010d18 <xTaskIncrementTick+0x158>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	3301      	adds	r3, #1
 8010c24:	4a3c      	ldr	r2, [pc, #240]	@ (8010d18 <xTaskIncrementTick+0x158>)
 8010c26:	6013      	str	r3, [r2, #0]
 8010c28:	f000 fb0c 	bl	8011244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8010d1c <xTaskIncrementTick+0x15c>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	693a      	ldr	r2, [r7, #16]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d349      	bcc.n	8010cca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c36:	4b36      	ldr	r3, [pc, #216]	@ (8010d10 <xTaskIncrementTick+0x150>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d104      	bne.n	8010c4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c40:	4b36      	ldr	r3, [pc, #216]	@ (8010d1c <xTaskIncrementTick+0x15c>)
 8010c42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010c46:	601a      	str	r2, [r3, #0]
					break;
 8010c48:	e03f      	b.n	8010cca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c4a:	4b31      	ldr	r3, [pc, #196]	@ (8010d10 <xTaskIncrementTick+0x150>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	68db      	ldr	r3, [r3, #12]
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010c5a:	693a      	ldr	r2, [r7, #16]
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d203      	bcs.n	8010c6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010c62:	4a2e      	ldr	r2, [pc, #184]	@ (8010d1c <xTaskIncrementTick+0x15c>)
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010c68:	e02f      	b.n	8010cca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	3304      	adds	r3, #4
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7fe fbac 	bl	800f3cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d004      	beq.n	8010c86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	3318      	adds	r3, #24
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7fe fba3 	bl	800f3cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c8a:	4b25      	ldr	r3, [pc, #148]	@ (8010d20 <xTaskIncrementTick+0x160>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d903      	bls.n	8010c9a <xTaskIncrementTick+0xda>
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c96:	4a22      	ldr	r2, [pc, #136]	@ (8010d20 <xTaskIncrementTick+0x160>)
 8010c98:	6013      	str	r3, [r2, #0]
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	009b      	lsls	r3, r3, #2
 8010ca2:	4413      	add	r3, r2
 8010ca4:	009b      	lsls	r3, r3, #2
 8010ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8010d24 <xTaskIncrementTick+0x164>)
 8010ca8:	441a      	add	r2, r3
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	3304      	adds	r3, #4
 8010cae:	4619      	mov	r1, r3
 8010cb0:	4610      	mov	r0, r2
 8010cb2:	f7fe fb2e 	bl	800f312 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cba:	4b1b      	ldr	r3, [pc, #108]	@ (8010d28 <xTaskIncrementTick+0x168>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d3b8      	bcc.n	8010c36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010cc8:	e7b5      	b.n	8010c36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010cca:	4b17      	ldr	r3, [pc, #92]	@ (8010d28 <xTaskIncrementTick+0x168>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cd0:	4914      	ldr	r1, [pc, #80]	@ (8010d24 <xTaskIncrementTick+0x164>)
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	4413      	add	r3, r2
 8010cd8:	009b      	lsls	r3, r3, #2
 8010cda:	440b      	add	r3, r1
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2b01      	cmp	r3, #1
 8010ce0:	d901      	bls.n	8010ce6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010ce6:	4b11      	ldr	r3, [pc, #68]	@ (8010d2c <xTaskIncrementTick+0x16c>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d007      	beq.n	8010cfe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010cee:	2301      	movs	r3, #1
 8010cf0:	617b      	str	r3, [r7, #20]
 8010cf2:	e004      	b.n	8010cfe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8010d30 <xTaskIncrementTick+0x170>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8010d30 <xTaskIncrementTick+0x170>)
 8010cfc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010cfe:	697b      	ldr	r3, [r7, #20]
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3718      	adds	r7, #24
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	20019730 	.word	0x20019730
 8010d0c:	2001970c 	.word	0x2001970c
 8010d10:	200196c0 	.word	0x200196c0
 8010d14:	200196c4 	.word	0x200196c4
 8010d18:	20019720 	.word	0x20019720
 8010d1c:	20019728 	.word	0x20019728
 8010d20:	20019710 	.word	0x20019710
 8010d24:	20019238 	.word	0x20019238
 8010d28:	20019234 	.word	0x20019234
 8010d2c:	2001971c 	.word	0x2001971c
 8010d30:	20019718 	.word	0x20019718

08010d34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010d34:	b480      	push	{r7}
 8010d36:	b085      	sub	sp, #20
 8010d38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8010de8 <vTaskSwitchContext+0xb4>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d003      	beq.n	8010d4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010d42:	4b2a      	ldr	r3, [pc, #168]	@ (8010dec <vTaskSwitchContext+0xb8>)
 8010d44:	2201      	movs	r2, #1
 8010d46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010d48:	e047      	b.n	8010dda <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8010d4a:	4b28      	ldr	r3, [pc, #160]	@ (8010dec <vTaskSwitchContext+0xb8>)
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d50:	4b27      	ldr	r3, [pc, #156]	@ (8010df0 <vTaskSwitchContext+0xbc>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	60fb      	str	r3, [r7, #12]
 8010d56:	e011      	b.n	8010d7c <vTaskSwitchContext+0x48>
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d10b      	bne.n	8010d76 <vTaskSwitchContext+0x42>
	__asm volatile
 8010d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d62:	f383 8811 	msr	BASEPRI, r3
 8010d66:	f3bf 8f6f 	isb	sy
 8010d6a:	f3bf 8f4f 	dsb	sy
 8010d6e:	607b      	str	r3, [r7, #4]
}
 8010d70:	bf00      	nop
 8010d72:	bf00      	nop
 8010d74:	e7fd      	b.n	8010d72 <vTaskSwitchContext+0x3e>
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	60fb      	str	r3, [r7, #12]
 8010d7c:	491d      	ldr	r1, [pc, #116]	@ (8010df4 <vTaskSwitchContext+0xc0>)
 8010d7e:	68fa      	ldr	r2, [r7, #12]
 8010d80:	4613      	mov	r3, r2
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	4413      	add	r3, r2
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	440b      	add	r3, r1
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d0e3      	beq.n	8010d58 <vTaskSwitchContext+0x24>
 8010d90:	68fa      	ldr	r2, [r7, #12]
 8010d92:	4613      	mov	r3, r2
 8010d94:	009b      	lsls	r3, r3, #2
 8010d96:	4413      	add	r3, r2
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	4a16      	ldr	r2, [pc, #88]	@ (8010df4 <vTaskSwitchContext+0xc0>)
 8010d9c:	4413      	add	r3, r2
 8010d9e:	60bb      	str	r3, [r7, #8]
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	685a      	ldr	r2, [r3, #4]
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	605a      	str	r2, [r3, #4]
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	685a      	ldr	r2, [r3, #4]
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	3308      	adds	r3, #8
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d104      	bne.n	8010dc0 <vTaskSwitchContext+0x8c>
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	685a      	ldr	r2, [r3, #4]
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	605a      	str	r2, [r3, #4]
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8010df8 <vTaskSwitchContext+0xc4>)
 8010dc8:	6013      	str	r3, [r2, #0]
 8010dca:	4a09      	ldr	r2, [pc, #36]	@ (8010df0 <vTaskSwitchContext+0xbc>)
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010dd0:	4b09      	ldr	r3, [pc, #36]	@ (8010df8 <vTaskSwitchContext+0xc4>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	3354      	adds	r3, #84	@ 0x54
 8010dd6:	4a09      	ldr	r2, [pc, #36]	@ (8010dfc <vTaskSwitchContext+0xc8>)
 8010dd8:	6013      	str	r3, [r2, #0]
}
 8010dda:	bf00      	nop
 8010ddc:	3714      	adds	r7, #20
 8010dde:	46bd      	mov	sp, r7
 8010de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de4:	4770      	bx	lr
 8010de6:	bf00      	nop
 8010de8:	20019730 	.word	0x20019730
 8010dec:	2001971c 	.word	0x2001971c
 8010df0:	20019710 	.word	0x20019710
 8010df4:	20019238 	.word	0x20019238
 8010df8:	20019234 	.word	0x20019234
 8010dfc:	20000140 	.word	0x20000140

08010e00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b084      	sub	sp, #16
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d10b      	bne.n	8010e28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e14:	f383 8811 	msr	BASEPRI, r3
 8010e18:	f3bf 8f6f 	isb	sy
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	60fb      	str	r3, [r7, #12]
}
 8010e22:	bf00      	nop
 8010e24:	bf00      	nop
 8010e26:	e7fd      	b.n	8010e24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e28:	4b07      	ldr	r3, [pc, #28]	@ (8010e48 <vTaskPlaceOnEventList+0x48>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	3318      	adds	r3, #24
 8010e2e:	4619      	mov	r1, r3
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7fe fa92 	bl	800f35a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010e36:	2101      	movs	r1, #1
 8010e38:	6838      	ldr	r0, [r7, #0]
 8010e3a:	f000 fbb1 	bl	80115a0 <prvAddCurrentTaskToDelayedList>
}
 8010e3e:	bf00      	nop
 8010e40:	3710      	adds	r7, #16
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	20019234 	.word	0x20019234

08010e4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b086      	sub	sp, #24
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d10b      	bne.n	8010e76 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	617b      	str	r3, [r7, #20]
}
 8010e70:	bf00      	nop
 8010e72:	bf00      	nop
 8010e74:	e7fd      	b.n	8010e72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e76:	4b0a      	ldr	r3, [pc, #40]	@ (8010ea0 <vTaskPlaceOnEventListRestricted+0x54>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	3318      	adds	r3, #24
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f7fe fa47 	bl	800f312 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d002      	beq.n	8010e90 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010e8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010e8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010e90:	6879      	ldr	r1, [r7, #4]
 8010e92:	68b8      	ldr	r0, [r7, #8]
 8010e94:	f000 fb84 	bl	80115a0 <prvAddCurrentTaskToDelayedList>
	}
 8010e98:	bf00      	nop
 8010e9a:	3718      	adds	r7, #24
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	20019234 	.word	0x20019234

08010ea4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b086      	sub	sp, #24
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d10b      	bne.n	8010ed2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ebe:	f383 8811 	msr	BASEPRI, r3
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	f3bf 8f4f 	dsb	sy
 8010eca:	60fb      	str	r3, [r7, #12]
}
 8010ecc:	bf00      	nop
 8010ece:	bf00      	nop
 8010ed0:	e7fd      	b.n	8010ece <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	3318      	adds	r3, #24
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fe fa78 	bl	800f3cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010edc:	4b1e      	ldr	r3, [pc, #120]	@ (8010f58 <xTaskRemoveFromEventList+0xb4>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d11f      	bne.n	8010f24 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	3304      	adds	r3, #4
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7fe fa6f 	bl	800f3cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8010f5c <xTaskRemoveFromEventList+0xb8>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d903      	bls.n	8010f02 <xTaskRemoveFromEventList+0x5e>
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010efe:	4a17      	ldr	r2, [pc, #92]	@ (8010f5c <xTaskRemoveFromEventList+0xb8>)
 8010f00:	6013      	str	r3, [r2, #0]
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f06:	4613      	mov	r3, r2
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	4413      	add	r3, r2
 8010f0c:	009b      	lsls	r3, r3, #2
 8010f0e:	4a14      	ldr	r2, [pc, #80]	@ (8010f60 <xTaskRemoveFromEventList+0xbc>)
 8010f10:	441a      	add	r2, r3
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	3304      	adds	r3, #4
 8010f16:	4619      	mov	r1, r3
 8010f18:	4610      	mov	r0, r2
 8010f1a:	f7fe f9fa 	bl	800f312 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8010f1e:	f000 f991 	bl	8011244 <prvResetNextTaskUnblockTime>
 8010f22:	e005      	b.n	8010f30 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	3318      	adds	r3, #24
 8010f28:	4619      	mov	r1, r3
 8010f2a:	480e      	ldr	r0, [pc, #56]	@ (8010f64 <xTaskRemoveFromEventList+0xc0>)
 8010f2c:	f7fe f9f1 	bl	800f312 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f34:	4b0c      	ldr	r3, [pc, #48]	@ (8010f68 <xTaskRemoveFromEventList+0xc4>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d905      	bls.n	8010f4a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010f3e:	2301      	movs	r3, #1
 8010f40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010f42:	4b0a      	ldr	r3, [pc, #40]	@ (8010f6c <xTaskRemoveFromEventList+0xc8>)
 8010f44:	2201      	movs	r2, #1
 8010f46:	601a      	str	r2, [r3, #0]
 8010f48:	e001      	b.n	8010f4e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010f4e:	697b      	ldr	r3, [r7, #20]
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3718      	adds	r7, #24
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	20019730 	.word	0x20019730
 8010f5c:	20019710 	.word	0x20019710
 8010f60:	20019238 	.word	0x20019238
 8010f64:	200196c8 	.word	0x200196c8
 8010f68:	20019234 	.word	0x20019234
 8010f6c:	2001971c 	.word	0x2001971c

08010f70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010f70:	b480      	push	{r7}
 8010f72:	b083      	sub	sp, #12
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010f78:	4b06      	ldr	r3, [pc, #24]	@ (8010f94 <vTaskInternalSetTimeOutState+0x24>)
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010f80:	4b05      	ldr	r3, [pc, #20]	@ (8010f98 <vTaskInternalSetTimeOutState+0x28>)
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	605a      	str	r2, [r3, #4]
}
 8010f88:	bf00      	nop
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr
 8010f94:	20019720 	.word	0x20019720
 8010f98:	2001970c 	.word	0x2001970c

08010f9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b088      	sub	sp, #32
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d10b      	bne.n	8010fc4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fb0:	f383 8811 	msr	BASEPRI, r3
 8010fb4:	f3bf 8f6f 	isb	sy
 8010fb8:	f3bf 8f4f 	dsb	sy
 8010fbc:	613b      	str	r3, [r7, #16]
}
 8010fbe:	bf00      	nop
 8010fc0:	bf00      	nop
 8010fc2:	e7fd      	b.n	8010fc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d10b      	bne.n	8010fe2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fce:	f383 8811 	msr	BASEPRI, r3
 8010fd2:	f3bf 8f6f 	isb	sy
 8010fd6:	f3bf 8f4f 	dsb	sy
 8010fda:	60fb      	str	r3, [r7, #12]
}
 8010fdc:	bf00      	nop
 8010fde:	bf00      	nop
 8010fe0:	e7fd      	b.n	8010fde <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010fe2:	f000 ffb9 	bl	8011f58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010fe6:	4b1d      	ldr	r3, [pc, #116]	@ (801105c <xTaskCheckForTimeOut+0xc0>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	69ba      	ldr	r2, [r7, #24]
 8010ff2:	1ad3      	subs	r3, r2, r3
 8010ff4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010ffe:	d102      	bne.n	8011006 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011000:	2300      	movs	r3, #0
 8011002:	61fb      	str	r3, [r7, #28]
 8011004:	e023      	b.n	801104e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	4b15      	ldr	r3, [pc, #84]	@ (8011060 <xTaskCheckForTimeOut+0xc4>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	429a      	cmp	r2, r3
 8011010:	d007      	beq.n	8011022 <xTaskCheckForTimeOut+0x86>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	69ba      	ldr	r2, [r7, #24]
 8011018:	429a      	cmp	r2, r3
 801101a:	d302      	bcc.n	8011022 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801101c:	2301      	movs	r3, #1
 801101e:	61fb      	str	r3, [r7, #28]
 8011020:	e015      	b.n	801104e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	697a      	ldr	r2, [r7, #20]
 8011028:	429a      	cmp	r2, r3
 801102a:	d20b      	bcs.n	8011044 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	1ad2      	subs	r2, r2, r3
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f7ff ff99 	bl	8010f70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801103e:	2300      	movs	r3, #0
 8011040:	61fb      	str	r3, [r7, #28]
 8011042:	e004      	b.n	801104e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	2200      	movs	r2, #0
 8011048:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801104a:	2301      	movs	r3, #1
 801104c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801104e:	f000 ffb5 	bl	8011fbc <vPortExitCritical>

	return xReturn;
 8011052:	69fb      	ldr	r3, [r7, #28]
}
 8011054:	4618      	mov	r0, r3
 8011056:	3720      	adds	r7, #32
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	2001970c 	.word	0x2001970c
 8011060:	20019720 	.word	0x20019720

08011064 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011064:	b480      	push	{r7}
 8011066:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011068:	4b03      	ldr	r3, [pc, #12]	@ (8011078 <vTaskMissedYield+0x14>)
 801106a:	2201      	movs	r2, #1
 801106c:	601a      	str	r2, [r3, #0]
}
 801106e:	bf00      	nop
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr
 8011078:	2001971c 	.word	0x2001971c

0801107c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011084:	f000 f87a 	bl	801117c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011088:	4b18      	ldr	r3, [pc, #96]	@ (80110ec <prvIdleTask+0x70>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2b01      	cmp	r3, #1
 801108e:	d907      	bls.n	80110a0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011090:	4b17      	ldr	r3, [pc, #92]	@ (80110f0 <prvIdleTask+0x74>)
 8011092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011096:	601a      	str	r2, [r3, #0]
 8011098:	f3bf 8f4f 	dsb	sy
 801109c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80110a0:	f7ff fca8 	bl	80109f4 <prvGetExpectedIdleTime>
 80110a4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2b01      	cmp	r3, #1
 80110aa:	d9eb      	bls.n	8011084 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80110ac:	f7ff fc94 	bl	80109d8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80110b0:	4b10      	ldr	r3, [pc, #64]	@ (80110f4 <prvIdleTask+0x78>)
 80110b2:	681a      	ldr	r2, [r3, #0]
 80110b4:	4b10      	ldr	r3, [pc, #64]	@ (80110f8 <prvIdleTask+0x7c>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d20b      	bcs.n	80110d4 <prvIdleTask+0x58>
	__asm volatile
 80110bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110c0:	f383 8811 	msr	BASEPRI, r3
 80110c4:	f3bf 8f6f 	isb	sy
 80110c8:	f3bf 8f4f 	dsb	sy
 80110cc:	60bb      	str	r3, [r7, #8]
}
 80110ce:	bf00      	nop
 80110d0:	bf00      	nop
 80110d2:	e7fd      	b.n	80110d0 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80110d4:	f7ff fc8e 	bl	80109f4 <prvGetExpectedIdleTime>
 80110d8:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d902      	bls.n	80110e6 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f7f0 f81f 	bl	8001124 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80110e6:	f7ff fcbd 	bl	8010a64 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80110ea:	e7cb      	b.n	8011084 <prvIdleTask+0x8>
 80110ec:	20019238 	.word	0x20019238
 80110f0:	e000ed04 	.word	0xe000ed04
 80110f4:	20019728 	.word	0x20019728
 80110f8:	2001970c 	.word	0x2001970c

080110fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011102:	2300      	movs	r3, #0
 8011104:	607b      	str	r3, [r7, #4]
 8011106:	e00c      	b.n	8011122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011108:	687a      	ldr	r2, [r7, #4]
 801110a:	4613      	mov	r3, r2
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	4413      	add	r3, r2
 8011110:	009b      	lsls	r3, r3, #2
 8011112:	4a12      	ldr	r2, [pc, #72]	@ (801115c <prvInitialiseTaskLists+0x60>)
 8011114:	4413      	add	r3, r2
 8011116:	4618      	mov	r0, r3
 8011118:	f7fe f8ce 	bl	800f2b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	3301      	adds	r3, #1
 8011120:	607b      	str	r3, [r7, #4]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2b37      	cmp	r3, #55	@ 0x37
 8011126:	d9ef      	bls.n	8011108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011128:	480d      	ldr	r0, [pc, #52]	@ (8011160 <prvInitialiseTaskLists+0x64>)
 801112a:	f7fe f8c5 	bl	800f2b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801112e:	480d      	ldr	r0, [pc, #52]	@ (8011164 <prvInitialiseTaskLists+0x68>)
 8011130:	f7fe f8c2 	bl	800f2b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011134:	480c      	ldr	r0, [pc, #48]	@ (8011168 <prvInitialiseTaskLists+0x6c>)
 8011136:	f7fe f8bf 	bl	800f2b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801113a:	480c      	ldr	r0, [pc, #48]	@ (801116c <prvInitialiseTaskLists+0x70>)
 801113c:	f7fe f8bc 	bl	800f2b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011140:	480b      	ldr	r0, [pc, #44]	@ (8011170 <prvInitialiseTaskLists+0x74>)
 8011142:	f7fe f8b9 	bl	800f2b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011146:	4b0b      	ldr	r3, [pc, #44]	@ (8011174 <prvInitialiseTaskLists+0x78>)
 8011148:	4a05      	ldr	r2, [pc, #20]	@ (8011160 <prvInitialiseTaskLists+0x64>)
 801114a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801114c:	4b0a      	ldr	r3, [pc, #40]	@ (8011178 <prvInitialiseTaskLists+0x7c>)
 801114e:	4a05      	ldr	r2, [pc, #20]	@ (8011164 <prvInitialiseTaskLists+0x68>)
 8011150:	601a      	str	r2, [r3, #0]
}
 8011152:	bf00      	nop
 8011154:	3708      	adds	r7, #8
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	20019238 	.word	0x20019238
 8011160:	20019698 	.word	0x20019698
 8011164:	200196ac 	.word	0x200196ac
 8011168:	200196c8 	.word	0x200196c8
 801116c:	200196dc 	.word	0x200196dc
 8011170:	200196f4 	.word	0x200196f4
 8011174:	200196c0 	.word	0x200196c0
 8011178:	200196c4 	.word	0x200196c4

0801117c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011182:	e019      	b.n	80111b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011184:	f000 fee8 	bl	8011f58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011188:	4b10      	ldr	r3, [pc, #64]	@ (80111cc <prvCheckTasksWaitingTermination+0x50>)
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	3304      	adds	r3, #4
 8011194:	4618      	mov	r0, r3
 8011196:	f7fe f919 	bl	800f3cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801119a:	4b0d      	ldr	r3, [pc, #52]	@ (80111d0 <prvCheckTasksWaitingTermination+0x54>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	3b01      	subs	r3, #1
 80111a0:	4a0b      	ldr	r2, [pc, #44]	@ (80111d0 <prvCheckTasksWaitingTermination+0x54>)
 80111a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80111a4:	4b0b      	ldr	r3, [pc, #44]	@ (80111d4 <prvCheckTasksWaitingTermination+0x58>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	3b01      	subs	r3, #1
 80111aa:	4a0a      	ldr	r2, [pc, #40]	@ (80111d4 <prvCheckTasksWaitingTermination+0x58>)
 80111ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80111ae:	f000 ff05 	bl	8011fbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f000 f810 	bl	80111d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111b8:	4b06      	ldr	r3, [pc, #24]	@ (80111d4 <prvCheckTasksWaitingTermination+0x58>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d1e1      	bne.n	8011184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80111c0:	bf00      	nop
 80111c2:	bf00      	nop
 80111c4:	3708      	adds	r7, #8
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	200196dc 	.word	0x200196dc
 80111d0:	20019708 	.word	0x20019708
 80111d4:	200196f0 	.word	0x200196f0

080111d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	3354      	adds	r3, #84	@ 0x54
 80111e4:	4618      	mov	r0, r3
 80111e6:	f004 fa8b 	bl	8015700 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d108      	bne.n	8011206 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111f8:	4618      	mov	r0, r3
 80111fa:	f001 f89d 	bl	8012338 <vPortFree>
				vPortFree( pxTCB );
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f001 f89a 	bl	8012338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011204:	e019      	b.n	801123a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801120c:	2b01      	cmp	r3, #1
 801120e:	d103      	bne.n	8011218 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f001 f891 	bl	8012338 <vPortFree>
	}
 8011216:	e010      	b.n	801123a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801121e:	2b02      	cmp	r3, #2
 8011220:	d00b      	beq.n	801123a <prvDeleteTCB+0x62>
	__asm volatile
 8011222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011226:	f383 8811 	msr	BASEPRI, r3
 801122a:	f3bf 8f6f 	isb	sy
 801122e:	f3bf 8f4f 	dsb	sy
 8011232:	60fb      	str	r3, [r7, #12]
}
 8011234:	bf00      	nop
 8011236:	bf00      	nop
 8011238:	e7fd      	b.n	8011236 <prvDeleteTCB+0x5e>
	}
 801123a:	bf00      	nop
 801123c:	3710      	adds	r7, #16
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
	...

08011244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801124a:	4b0c      	ldr	r3, [pc, #48]	@ (801127c <prvResetNextTaskUnblockTime+0x38>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d104      	bne.n	801125e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011254:	4b0a      	ldr	r3, [pc, #40]	@ (8011280 <prvResetNextTaskUnblockTime+0x3c>)
 8011256:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801125a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801125c:	e008      	b.n	8011270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801125e:	4b07      	ldr	r3, [pc, #28]	@ (801127c <prvResetNextTaskUnblockTime+0x38>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	4a04      	ldr	r2, [pc, #16]	@ (8011280 <prvResetNextTaskUnblockTime+0x3c>)
 801126e:	6013      	str	r3, [r2, #0]
}
 8011270:	bf00      	nop
 8011272:	370c      	adds	r7, #12
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr
 801127c:	200196c0 	.word	0x200196c0
 8011280:	20019728 	.word	0x20019728

08011284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011284:	b480      	push	{r7}
 8011286:	b083      	sub	sp, #12
 8011288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801128a:	4b0b      	ldr	r3, [pc, #44]	@ (80112b8 <xTaskGetSchedulerState+0x34>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d102      	bne.n	8011298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011292:	2301      	movs	r3, #1
 8011294:	607b      	str	r3, [r7, #4]
 8011296:	e008      	b.n	80112aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011298:	4b08      	ldr	r3, [pc, #32]	@ (80112bc <xTaskGetSchedulerState+0x38>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d102      	bne.n	80112a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80112a0:	2302      	movs	r3, #2
 80112a2:	607b      	str	r3, [r7, #4]
 80112a4:	e001      	b.n	80112aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80112a6:	2300      	movs	r3, #0
 80112a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80112aa:	687b      	ldr	r3, [r7, #4]
	}
 80112ac:	4618      	mov	r0, r3
 80112ae:	370c      	adds	r7, #12
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	20019714 	.word	0x20019714
 80112bc:	20019730 	.word	0x20019730

080112c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b084      	sub	sp, #16
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80112cc:	2300      	movs	r3, #0
 80112ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d051      	beq.n	801137a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112da:	4b2a      	ldr	r3, [pc, #168]	@ (8011384 <xTaskPriorityInherit+0xc4>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d241      	bcs.n	8011368 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	699b      	ldr	r3, [r3, #24]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	db06      	blt.n	80112fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112ec:	4b25      	ldr	r3, [pc, #148]	@ (8011384 <xTaskPriorityInherit+0xc4>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	6959      	ldr	r1, [r3, #20]
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011302:	4613      	mov	r3, r2
 8011304:	009b      	lsls	r3, r3, #2
 8011306:	4413      	add	r3, r2
 8011308:	009b      	lsls	r3, r3, #2
 801130a:	4a1f      	ldr	r2, [pc, #124]	@ (8011388 <xTaskPriorityInherit+0xc8>)
 801130c:	4413      	add	r3, r2
 801130e:	4299      	cmp	r1, r3
 8011310:	d122      	bne.n	8011358 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	3304      	adds	r3, #4
 8011316:	4618      	mov	r0, r3
 8011318:	f7fe f858 	bl	800f3cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801131c:	4b19      	ldr	r3, [pc, #100]	@ (8011384 <xTaskPriorityInherit+0xc4>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801132a:	4b18      	ldr	r3, [pc, #96]	@ (801138c <xTaskPriorityInherit+0xcc>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	429a      	cmp	r2, r3
 8011330:	d903      	bls.n	801133a <xTaskPriorityInherit+0x7a>
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011336:	4a15      	ldr	r2, [pc, #84]	@ (801138c <xTaskPriorityInherit+0xcc>)
 8011338:	6013      	str	r3, [r2, #0]
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801133e:	4613      	mov	r3, r2
 8011340:	009b      	lsls	r3, r3, #2
 8011342:	4413      	add	r3, r2
 8011344:	009b      	lsls	r3, r3, #2
 8011346:	4a10      	ldr	r2, [pc, #64]	@ (8011388 <xTaskPriorityInherit+0xc8>)
 8011348:	441a      	add	r2, r3
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	3304      	adds	r3, #4
 801134e:	4619      	mov	r1, r3
 8011350:	4610      	mov	r0, r2
 8011352:	f7fd ffde 	bl	800f312 <vListInsertEnd>
 8011356:	e004      	b.n	8011362 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011358:	4b0a      	ldr	r3, [pc, #40]	@ (8011384 <xTaskPriorityInherit+0xc4>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011362:	2301      	movs	r3, #1
 8011364:	60fb      	str	r3, [r7, #12]
 8011366:	e008      	b.n	801137a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801136c:	4b05      	ldr	r3, [pc, #20]	@ (8011384 <xTaskPriorityInherit+0xc4>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011372:	429a      	cmp	r2, r3
 8011374:	d201      	bcs.n	801137a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011376:	2301      	movs	r3, #1
 8011378:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801137a:	68fb      	ldr	r3, [r7, #12]
	}
 801137c:	4618      	mov	r0, r3
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	20019234 	.word	0x20019234
 8011388:	20019238 	.word	0x20019238
 801138c:	20019710 	.word	0x20019710

08011390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011390:	b580      	push	{r7, lr}
 8011392:	b086      	sub	sp, #24
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801139c:	2300      	movs	r3, #0
 801139e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d058      	beq.n	8011458 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80113a6:	4b2f      	ldr	r3, [pc, #188]	@ (8011464 <xTaskPriorityDisinherit+0xd4>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	693a      	ldr	r2, [r7, #16]
 80113ac:	429a      	cmp	r2, r3
 80113ae:	d00b      	beq.n	80113c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80113b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113b4:	f383 8811 	msr	BASEPRI, r3
 80113b8:	f3bf 8f6f 	isb	sy
 80113bc:	f3bf 8f4f 	dsb	sy
 80113c0:	60fb      	str	r3, [r7, #12]
}
 80113c2:	bf00      	nop
 80113c4:	bf00      	nop
 80113c6:	e7fd      	b.n	80113c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d10b      	bne.n	80113e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80113d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113d4:	f383 8811 	msr	BASEPRI, r3
 80113d8:	f3bf 8f6f 	isb	sy
 80113dc:	f3bf 8f4f 	dsb	sy
 80113e0:	60bb      	str	r3, [r7, #8]
}
 80113e2:	bf00      	nop
 80113e4:	bf00      	nop
 80113e6:	e7fd      	b.n	80113e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113ec:	1e5a      	subs	r2, r3, #1
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d02c      	beq.n	8011458 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011402:	2b00      	cmp	r3, #0
 8011404:	d128      	bne.n	8011458 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	3304      	adds	r3, #4
 801140a:	4618      	mov	r0, r3
 801140c:	f7fd ffde 	bl	800f3cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801141c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011428:	4b0f      	ldr	r3, [pc, #60]	@ (8011468 <xTaskPriorityDisinherit+0xd8>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	429a      	cmp	r2, r3
 801142e:	d903      	bls.n	8011438 <xTaskPriorityDisinherit+0xa8>
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011434:	4a0c      	ldr	r2, [pc, #48]	@ (8011468 <xTaskPriorityDisinherit+0xd8>)
 8011436:	6013      	str	r3, [r2, #0]
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801143c:	4613      	mov	r3, r2
 801143e:	009b      	lsls	r3, r3, #2
 8011440:	4413      	add	r3, r2
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	4a09      	ldr	r2, [pc, #36]	@ (801146c <xTaskPriorityDisinherit+0xdc>)
 8011446:	441a      	add	r2, r3
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	3304      	adds	r3, #4
 801144c:	4619      	mov	r1, r3
 801144e:	4610      	mov	r0, r2
 8011450:	f7fd ff5f 	bl	800f312 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011454:	2301      	movs	r3, #1
 8011456:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011458:	697b      	ldr	r3, [r7, #20]
	}
 801145a:	4618      	mov	r0, r3
 801145c:	3718      	adds	r7, #24
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	20019234 	.word	0x20019234
 8011468:	20019710 	.word	0x20019710
 801146c:	20019238 	.word	0x20019238

08011470 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011470:	b580      	push	{r7, lr}
 8011472:	b088      	sub	sp, #32
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801147e:	2301      	movs	r3, #1
 8011480:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d06c      	beq.n	8011562 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011488:	69bb      	ldr	r3, [r7, #24]
 801148a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801148c:	2b00      	cmp	r3, #0
 801148e:	d10b      	bne.n	80114a8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011494:	f383 8811 	msr	BASEPRI, r3
 8011498:	f3bf 8f6f 	isb	sy
 801149c:	f3bf 8f4f 	dsb	sy
 80114a0:	60fb      	str	r3, [r7, #12]
}
 80114a2:	bf00      	nop
 80114a4:	bf00      	nop
 80114a6:	e7fd      	b.n	80114a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80114a8:	69bb      	ldr	r3, [r7, #24]
 80114aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114ac:	683a      	ldr	r2, [r7, #0]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d902      	bls.n	80114b8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	61fb      	str	r3, [r7, #28]
 80114b6:	e002      	b.n	80114be <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80114b8:	69bb      	ldr	r3, [r7, #24]
 80114ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114c2:	69fa      	ldr	r2, [r7, #28]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d04c      	beq.n	8011562 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80114c8:	69bb      	ldr	r3, [r7, #24]
 80114ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114cc:	697a      	ldr	r2, [r7, #20]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d147      	bne.n	8011562 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80114d2:	4b26      	ldr	r3, [pc, #152]	@ (801156c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	69ba      	ldr	r2, [r7, #24]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d10b      	bne.n	80114f4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80114dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114e0:	f383 8811 	msr	BASEPRI, r3
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	60bb      	str	r3, [r7, #8]
}
 80114ee:	bf00      	nop
 80114f0:	bf00      	nop
 80114f2:	e7fd      	b.n	80114f0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	69fa      	ldr	r2, [r7, #28]
 80114fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011500:	69bb      	ldr	r3, [r7, #24]
 8011502:	699b      	ldr	r3, [r3, #24]
 8011504:	2b00      	cmp	r3, #0
 8011506:	db04      	blt.n	8011512 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	6959      	ldr	r1, [r3, #20]
 8011516:	693a      	ldr	r2, [r7, #16]
 8011518:	4613      	mov	r3, r2
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	4413      	add	r3, r2
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	4a13      	ldr	r2, [pc, #76]	@ (8011570 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011522:	4413      	add	r3, r2
 8011524:	4299      	cmp	r1, r3
 8011526:	d11c      	bne.n	8011562 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011528:	69bb      	ldr	r3, [r7, #24]
 801152a:	3304      	adds	r3, #4
 801152c:	4618      	mov	r0, r3
 801152e:	f7fd ff4d 	bl	800f3cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011532:	69bb      	ldr	r3, [r7, #24]
 8011534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011536:	4b0f      	ldr	r3, [pc, #60]	@ (8011574 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	429a      	cmp	r2, r3
 801153c:	d903      	bls.n	8011546 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011542:	4a0c      	ldr	r2, [pc, #48]	@ (8011574 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011544:	6013      	str	r3, [r2, #0]
 8011546:	69bb      	ldr	r3, [r7, #24]
 8011548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801154a:	4613      	mov	r3, r2
 801154c:	009b      	lsls	r3, r3, #2
 801154e:	4413      	add	r3, r2
 8011550:	009b      	lsls	r3, r3, #2
 8011552:	4a07      	ldr	r2, [pc, #28]	@ (8011570 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011554:	441a      	add	r2, r3
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	3304      	adds	r3, #4
 801155a:	4619      	mov	r1, r3
 801155c:	4610      	mov	r0, r2
 801155e:	f7fd fed8 	bl	800f312 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011562:	bf00      	nop
 8011564:	3720      	adds	r7, #32
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	20019234 	.word	0x20019234
 8011570:	20019238 	.word	0x20019238
 8011574:	20019710 	.word	0x20019710

08011578 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011578:	b480      	push	{r7}
 801157a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801157c:	4b07      	ldr	r3, [pc, #28]	@ (801159c <pvTaskIncrementMutexHeldCount+0x24>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d004      	beq.n	801158e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011584:	4b05      	ldr	r3, [pc, #20]	@ (801159c <pvTaskIncrementMutexHeldCount+0x24>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801158a:	3201      	adds	r2, #1
 801158c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801158e:	4b03      	ldr	r3, [pc, #12]	@ (801159c <pvTaskIncrementMutexHeldCount+0x24>)
 8011590:	681b      	ldr	r3, [r3, #0]
	}
 8011592:	4618      	mov	r0, r3
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr
 801159c:	20019234 	.word	0x20019234

080115a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b084      	sub	sp, #16
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80115aa:	4b21      	ldr	r3, [pc, #132]	@ (8011630 <prvAddCurrentTaskToDelayedList+0x90>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115b0:	4b20      	ldr	r3, [pc, #128]	@ (8011634 <prvAddCurrentTaskToDelayedList+0x94>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	3304      	adds	r3, #4
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fd ff08 	bl	800f3cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80115c2:	d10a      	bne.n	80115da <prvAddCurrentTaskToDelayedList+0x3a>
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d007      	beq.n	80115da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115ca:	4b1a      	ldr	r3, [pc, #104]	@ (8011634 <prvAddCurrentTaskToDelayedList+0x94>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	3304      	adds	r3, #4
 80115d0:	4619      	mov	r1, r3
 80115d2:	4819      	ldr	r0, [pc, #100]	@ (8011638 <prvAddCurrentTaskToDelayedList+0x98>)
 80115d4:	f7fd fe9d 	bl	800f312 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80115d8:	e026      	b.n	8011628 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80115da:	68fa      	ldr	r2, [r7, #12]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	4413      	add	r3, r2
 80115e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80115e2:	4b14      	ldr	r3, [pc, #80]	@ (8011634 <prvAddCurrentTaskToDelayedList+0x94>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	68ba      	ldr	r2, [r7, #8]
 80115e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80115ea:	68ba      	ldr	r2, [r7, #8]
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d209      	bcs.n	8011606 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115f2:	4b12      	ldr	r3, [pc, #72]	@ (801163c <prvAddCurrentTaskToDelayedList+0x9c>)
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	4b0f      	ldr	r3, [pc, #60]	@ (8011634 <prvAddCurrentTaskToDelayedList+0x94>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	3304      	adds	r3, #4
 80115fc:	4619      	mov	r1, r3
 80115fe:	4610      	mov	r0, r2
 8011600:	f7fd feab 	bl	800f35a <vListInsert>
}
 8011604:	e010      	b.n	8011628 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011606:	4b0e      	ldr	r3, [pc, #56]	@ (8011640 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	4b0a      	ldr	r3, [pc, #40]	@ (8011634 <prvAddCurrentTaskToDelayedList+0x94>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	3304      	adds	r3, #4
 8011610:	4619      	mov	r1, r3
 8011612:	4610      	mov	r0, r2
 8011614:	f7fd fea1 	bl	800f35a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011618:	4b0a      	ldr	r3, [pc, #40]	@ (8011644 <prvAddCurrentTaskToDelayedList+0xa4>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	68ba      	ldr	r2, [r7, #8]
 801161e:	429a      	cmp	r2, r3
 8011620:	d202      	bcs.n	8011628 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011622:	4a08      	ldr	r2, [pc, #32]	@ (8011644 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	6013      	str	r3, [r2, #0]
}
 8011628:	bf00      	nop
 801162a:	3710      	adds	r7, #16
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	2001970c 	.word	0x2001970c
 8011634:	20019234 	.word	0x20019234
 8011638:	200196f4 	.word	0x200196f4
 801163c:	200196c4 	.word	0x200196c4
 8011640:	200196c0 	.word	0x200196c0
 8011644:	20019728 	.word	0x20019728

08011648 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b08a      	sub	sp, #40	@ 0x28
 801164c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801164e:	2300      	movs	r3, #0
 8011650:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011652:	f000 fb13 	bl	8011c7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011656:	4b1d      	ldr	r3, [pc, #116]	@ (80116cc <xTimerCreateTimerTask+0x84>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d021      	beq.n	80116a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801165e:	2300      	movs	r3, #0
 8011660:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011662:	2300      	movs	r3, #0
 8011664:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011666:	1d3a      	adds	r2, r7, #4
 8011668:	f107 0108 	add.w	r1, r7, #8
 801166c:	f107 030c 	add.w	r3, r7, #12
 8011670:	4618      	mov	r0, r3
 8011672:	f7fd fe07 	bl	800f284 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011676:	6879      	ldr	r1, [r7, #4]
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	68fa      	ldr	r2, [r7, #12]
 801167c:	9202      	str	r2, [sp, #8]
 801167e:	9301      	str	r3, [sp, #4]
 8011680:	2302      	movs	r3, #2
 8011682:	9300      	str	r3, [sp, #0]
 8011684:	2300      	movs	r3, #0
 8011686:	460a      	mov	r2, r1
 8011688:	4911      	ldr	r1, [pc, #68]	@ (80116d0 <xTimerCreateTimerTask+0x88>)
 801168a:	4812      	ldr	r0, [pc, #72]	@ (80116d4 <xTimerCreateTimerTask+0x8c>)
 801168c:	f7fe ff40 	bl	8010510 <xTaskCreateStatic>
 8011690:	4603      	mov	r3, r0
 8011692:	4a11      	ldr	r2, [pc, #68]	@ (80116d8 <xTimerCreateTimerTask+0x90>)
 8011694:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011696:	4b10      	ldr	r3, [pc, #64]	@ (80116d8 <xTimerCreateTimerTask+0x90>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d001      	beq.n	80116a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801169e:	2301      	movs	r3, #1
 80116a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d10b      	bne.n	80116c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80116a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ac:	f383 8811 	msr	BASEPRI, r3
 80116b0:	f3bf 8f6f 	isb	sy
 80116b4:	f3bf 8f4f 	dsb	sy
 80116b8:	613b      	str	r3, [r7, #16]
}
 80116ba:	bf00      	nop
 80116bc:	bf00      	nop
 80116be:	e7fd      	b.n	80116bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80116c0:	697b      	ldr	r3, [r7, #20]
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3718      	adds	r7, #24
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	20019764 	.word	0x20019764
 80116d0:	0801b45c 	.word	0x0801b45c
 80116d4:	08011815 	.word	0x08011815
 80116d8:	20019768 	.word	0x20019768

080116dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b08a      	sub	sp, #40	@ 0x28
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	60b9      	str	r1, [r7, #8]
 80116e6:	607a      	str	r2, [r7, #4]
 80116e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80116ea:	2300      	movs	r3, #0
 80116ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d10b      	bne.n	801170c <xTimerGenericCommand+0x30>
	__asm volatile
 80116f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116f8:	f383 8811 	msr	BASEPRI, r3
 80116fc:	f3bf 8f6f 	isb	sy
 8011700:	f3bf 8f4f 	dsb	sy
 8011704:	623b      	str	r3, [r7, #32]
}
 8011706:	bf00      	nop
 8011708:	bf00      	nop
 801170a:	e7fd      	b.n	8011708 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801170c:	4b19      	ldr	r3, [pc, #100]	@ (8011774 <xTimerGenericCommand+0x98>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d02a      	beq.n	801176a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	2b05      	cmp	r3, #5
 8011724:	dc18      	bgt.n	8011758 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011726:	f7ff fdad 	bl	8011284 <xTaskGetSchedulerState>
 801172a:	4603      	mov	r3, r0
 801172c:	2b02      	cmp	r3, #2
 801172e:	d109      	bne.n	8011744 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011730:	4b10      	ldr	r3, [pc, #64]	@ (8011774 <xTimerGenericCommand+0x98>)
 8011732:	6818      	ldr	r0, [r3, #0]
 8011734:	f107 0110 	add.w	r1, r7, #16
 8011738:	2300      	movs	r3, #0
 801173a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801173c:	f7fe f870 	bl	800f820 <xQueueGenericSend>
 8011740:	6278      	str	r0, [r7, #36]	@ 0x24
 8011742:	e012      	b.n	801176a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011744:	4b0b      	ldr	r3, [pc, #44]	@ (8011774 <xTimerGenericCommand+0x98>)
 8011746:	6818      	ldr	r0, [r3, #0]
 8011748:	f107 0110 	add.w	r1, r7, #16
 801174c:	2300      	movs	r3, #0
 801174e:	2200      	movs	r2, #0
 8011750:	f7fe f866 	bl	800f820 <xQueueGenericSend>
 8011754:	6278      	str	r0, [r7, #36]	@ 0x24
 8011756:	e008      	b.n	801176a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011758:	4b06      	ldr	r3, [pc, #24]	@ (8011774 <xTimerGenericCommand+0x98>)
 801175a:	6818      	ldr	r0, [r3, #0]
 801175c:	f107 0110 	add.w	r1, r7, #16
 8011760:	2300      	movs	r3, #0
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	f7fe f95e 	bl	800fa24 <xQueueGenericSendFromISR>
 8011768:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801176c:	4618      	mov	r0, r3
 801176e:	3728      	adds	r7, #40	@ 0x28
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}
 8011774:	20019764 	.word	0x20019764

08011778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b088      	sub	sp, #32
 801177c:	af02      	add	r7, sp, #8
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011782:	4b23      	ldr	r3, [pc, #140]	@ (8011810 <prvProcessExpiredTimer+0x98>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	3304      	adds	r3, #4
 8011790:	4618      	mov	r0, r3
 8011792:	f7fd fe1b 	bl	800f3cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801179c:	f003 0304 	and.w	r3, r3, #4
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d023      	beq.n	80117ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	699a      	ldr	r2, [r3, #24]
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	18d1      	adds	r1, r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	683a      	ldr	r2, [r7, #0]
 80117b0:	6978      	ldr	r0, [r7, #20]
 80117b2:	f000 f8d5 	bl	8011960 <prvInsertTimerInActiveList>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d020      	beq.n	80117fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80117bc:	2300      	movs	r3, #0
 80117be:	9300      	str	r3, [sp, #0]
 80117c0:	2300      	movs	r3, #0
 80117c2:	687a      	ldr	r2, [r7, #4]
 80117c4:	2100      	movs	r1, #0
 80117c6:	6978      	ldr	r0, [r7, #20]
 80117c8:	f7ff ff88 	bl	80116dc <xTimerGenericCommand>
 80117cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d114      	bne.n	80117fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 80117d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117d8:	f383 8811 	msr	BASEPRI, r3
 80117dc:	f3bf 8f6f 	isb	sy
 80117e0:	f3bf 8f4f 	dsb	sy
 80117e4:	60fb      	str	r3, [r7, #12]
}
 80117e6:	bf00      	nop
 80117e8:	bf00      	nop
 80117ea:	e7fd      	b.n	80117e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80117f2:	f023 0301 	bic.w	r3, r3, #1
 80117f6:	b2da      	uxtb	r2, r3
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	6a1b      	ldr	r3, [r3, #32]
 8011802:	6978      	ldr	r0, [r7, #20]
 8011804:	4798      	blx	r3
}
 8011806:	bf00      	nop
 8011808:	3718      	adds	r7, #24
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	2001975c 	.word	0x2001975c

08011814 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801181c:	f107 0308 	add.w	r3, r7, #8
 8011820:	4618      	mov	r0, r3
 8011822:	f000 f859 	bl	80118d8 <prvGetNextExpireTime>
 8011826:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	4619      	mov	r1, r3
 801182c:	68f8      	ldr	r0, [r7, #12]
 801182e:	f000 f805 	bl	801183c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011832:	f000 f8d7 	bl	80119e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011836:	bf00      	nop
 8011838:	e7f0      	b.n	801181c <prvTimerTask+0x8>
	...

0801183c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b084      	sub	sp, #16
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011846:	f7ff f8c7 	bl	80109d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801184a:	f107 0308 	add.w	r3, r7, #8
 801184e:	4618      	mov	r0, r3
 8011850:	f000 f866 	bl	8011920 <prvSampleTimeNow>
 8011854:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d130      	bne.n	80118be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d10a      	bne.n	8011878 <prvProcessTimerOrBlockTask+0x3c>
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	429a      	cmp	r2, r3
 8011868:	d806      	bhi.n	8011878 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801186a:	f7ff f8fb 	bl	8010a64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801186e:	68f9      	ldr	r1, [r7, #12]
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7ff ff81 	bl	8011778 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011876:	e024      	b.n	80118c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d008      	beq.n	8011890 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801187e:	4b13      	ldr	r3, [pc, #76]	@ (80118cc <prvProcessTimerOrBlockTask+0x90>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d101      	bne.n	801188c <prvProcessTimerOrBlockTask+0x50>
 8011888:	2301      	movs	r3, #1
 801188a:	e000      	b.n	801188e <prvProcessTimerOrBlockTask+0x52>
 801188c:	2300      	movs	r3, #0
 801188e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011890:	4b0f      	ldr	r3, [pc, #60]	@ (80118d0 <prvProcessTimerOrBlockTask+0x94>)
 8011892:	6818      	ldr	r0, [r3, #0]
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	1ad3      	subs	r3, r2, r3
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	4619      	mov	r1, r3
 801189e:	f7fe fe03 	bl	80104a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80118a2:	f7ff f8df 	bl	8010a64 <xTaskResumeAll>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d10a      	bne.n	80118c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80118ac:	4b09      	ldr	r3, [pc, #36]	@ (80118d4 <prvProcessTimerOrBlockTask+0x98>)
 80118ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118b2:	601a      	str	r2, [r3, #0]
 80118b4:	f3bf 8f4f 	dsb	sy
 80118b8:	f3bf 8f6f 	isb	sy
}
 80118bc:	e001      	b.n	80118c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80118be:	f7ff f8d1 	bl	8010a64 <xTaskResumeAll>
}
 80118c2:	bf00      	nop
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	20019760 	.word	0x20019760
 80118d0:	20019764 	.word	0x20019764
 80118d4:	e000ed04 	.word	0xe000ed04

080118d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80118d8:	b480      	push	{r7}
 80118da:	b085      	sub	sp, #20
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80118e0:	4b0e      	ldr	r3, [pc, #56]	@ (801191c <prvGetNextExpireTime+0x44>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d101      	bne.n	80118ee <prvGetNextExpireTime+0x16>
 80118ea:	2201      	movs	r2, #1
 80118ec:	e000      	b.n	80118f0 <prvGetNextExpireTime+0x18>
 80118ee:	2200      	movs	r2, #0
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d105      	bne.n	8011908 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80118fc:	4b07      	ldr	r3, [pc, #28]	@ (801191c <prvGetNextExpireTime+0x44>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	68db      	ldr	r3, [r3, #12]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	60fb      	str	r3, [r7, #12]
 8011906:	e001      	b.n	801190c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011908:	2300      	movs	r3, #0
 801190a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801190c:	68fb      	ldr	r3, [r7, #12]
}
 801190e:	4618      	mov	r0, r3
 8011910:	3714      	adds	r7, #20
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop
 801191c:	2001975c 	.word	0x2001975c

08011920 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b084      	sub	sp, #16
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011928:	f7ff f93a 	bl	8010ba0 <xTaskGetTickCount>
 801192c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801192e:	4b0b      	ldr	r3, [pc, #44]	@ (801195c <prvSampleTimeNow+0x3c>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	68fa      	ldr	r2, [r7, #12]
 8011934:	429a      	cmp	r2, r3
 8011936:	d205      	bcs.n	8011944 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011938:	f000 f93a 	bl	8011bb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2201      	movs	r2, #1
 8011940:	601a      	str	r2, [r3, #0]
 8011942:	e002      	b.n	801194a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2200      	movs	r2, #0
 8011948:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801194a:	4a04      	ldr	r2, [pc, #16]	@ (801195c <prvSampleTimeNow+0x3c>)
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011950:	68fb      	ldr	r3, [r7, #12]
}
 8011952:	4618      	mov	r0, r3
 8011954:	3710      	adds	r7, #16
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	2001976c 	.word	0x2001976c

08011960 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b086      	sub	sp, #24
 8011964:	af00      	add	r7, sp, #0
 8011966:	60f8      	str	r0, [r7, #12]
 8011968:	60b9      	str	r1, [r7, #8]
 801196a:	607a      	str	r2, [r7, #4]
 801196c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801196e:	2300      	movs	r3, #0
 8011970:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	68ba      	ldr	r2, [r7, #8]
 8011976:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	68fa      	ldr	r2, [r7, #12]
 801197c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801197e:	68ba      	ldr	r2, [r7, #8]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	429a      	cmp	r2, r3
 8011984:	d812      	bhi.n	80119ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011986:	687a      	ldr	r2, [r7, #4]
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	1ad2      	subs	r2, r2, r3
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	699b      	ldr	r3, [r3, #24]
 8011990:	429a      	cmp	r2, r3
 8011992:	d302      	bcc.n	801199a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011994:	2301      	movs	r3, #1
 8011996:	617b      	str	r3, [r7, #20]
 8011998:	e01b      	b.n	80119d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801199a:	4b10      	ldr	r3, [pc, #64]	@ (80119dc <prvInsertTimerInActiveList+0x7c>)
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	3304      	adds	r3, #4
 80119a2:	4619      	mov	r1, r3
 80119a4:	4610      	mov	r0, r2
 80119a6:	f7fd fcd8 	bl	800f35a <vListInsert>
 80119aa:	e012      	b.n	80119d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80119ac:	687a      	ldr	r2, [r7, #4]
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d206      	bcs.n	80119c2 <prvInsertTimerInActiveList+0x62>
 80119b4:	68ba      	ldr	r2, [r7, #8]
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d302      	bcc.n	80119c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80119bc:	2301      	movs	r3, #1
 80119be:	617b      	str	r3, [r7, #20]
 80119c0:	e007      	b.n	80119d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80119c2:	4b07      	ldr	r3, [pc, #28]	@ (80119e0 <prvInsertTimerInActiveList+0x80>)
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	3304      	adds	r3, #4
 80119ca:	4619      	mov	r1, r3
 80119cc:	4610      	mov	r0, r2
 80119ce:	f7fd fcc4 	bl	800f35a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80119d2:	697b      	ldr	r3, [r7, #20]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3718      	adds	r7, #24
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	20019760 	.word	0x20019760
 80119e0:	2001975c 	.word	0x2001975c

080119e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b08e      	sub	sp, #56	@ 0x38
 80119e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80119ea:	e0ce      	b.n	8011b8a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	da19      	bge.n	8011a26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80119f2:	1d3b      	adds	r3, r7, #4
 80119f4:	3304      	adds	r3, #4
 80119f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80119f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d10b      	bne.n	8011a16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80119fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a02:	f383 8811 	msr	BASEPRI, r3
 8011a06:	f3bf 8f6f 	isb	sy
 8011a0a:	f3bf 8f4f 	dsb	sy
 8011a0e:	61fb      	str	r3, [r7, #28]
}
 8011a10:	bf00      	nop
 8011a12:	bf00      	nop
 8011a14:	e7fd      	b.n	8011a12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a1c:	6850      	ldr	r0, [r2, #4]
 8011a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a20:	6892      	ldr	r2, [r2, #8]
 8011a22:	4611      	mov	r1, r2
 8011a24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	f2c0 80ae 	blt.w	8011b8a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a34:	695b      	ldr	r3, [r3, #20]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d004      	beq.n	8011a44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7fd fcc4 	bl	800f3cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011a44:	463b      	mov	r3, r7
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7ff ff6a 	bl	8011920 <prvSampleTimeNow>
 8011a4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2b09      	cmp	r3, #9
 8011a52:	f200 8097 	bhi.w	8011b84 <prvProcessReceivedCommands+0x1a0>
 8011a56:	a201      	add	r2, pc, #4	@ (adr r2, 8011a5c <prvProcessReceivedCommands+0x78>)
 8011a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a5c:	08011a85 	.word	0x08011a85
 8011a60:	08011a85 	.word	0x08011a85
 8011a64:	08011a85 	.word	0x08011a85
 8011a68:	08011afb 	.word	0x08011afb
 8011a6c:	08011b0f 	.word	0x08011b0f
 8011a70:	08011b5b 	.word	0x08011b5b
 8011a74:	08011a85 	.word	0x08011a85
 8011a78:	08011a85 	.word	0x08011a85
 8011a7c:	08011afb 	.word	0x08011afb
 8011a80:	08011b0f 	.word	0x08011b0f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a8a:	f043 0301 	orr.w	r3, r3, #1
 8011a8e:	b2da      	uxtb	r2, r3
 8011a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011a96:	68ba      	ldr	r2, [r7, #8]
 8011a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a9a:	699b      	ldr	r3, [r3, #24]
 8011a9c:	18d1      	adds	r1, r2, r3
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011aa4:	f7ff ff5c 	bl	8011960 <prvInsertTimerInActiveList>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d06c      	beq.n	8011b88 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab0:	6a1b      	ldr	r3, [r3, #32]
 8011ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ab4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011abc:	f003 0304 	and.w	r3, r3, #4
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d061      	beq.n	8011b88 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011ac4:	68ba      	ldr	r2, [r7, #8]
 8011ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac8:	699b      	ldr	r3, [r3, #24]
 8011aca:	441a      	add	r2, r3
 8011acc:	2300      	movs	r3, #0
 8011ace:	9300      	str	r3, [sp, #0]
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ad6:	f7ff fe01 	bl	80116dc <xTimerGenericCommand>
 8011ada:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011adc:	6a3b      	ldr	r3, [r7, #32]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d152      	bne.n	8011b88 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ae6:	f383 8811 	msr	BASEPRI, r3
 8011aea:	f3bf 8f6f 	isb	sy
 8011aee:	f3bf 8f4f 	dsb	sy
 8011af2:	61bb      	str	r3, [r7, #24]
}
 8011af4:	bf00      	nop
 8011af6:	bf00      	nop
 8011af8:	e7fd      	b.n	8011af6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b00:	f023 0301 	bic.w	r3, r3, #1
 8011b04:	b2da      	uxtb	r2, r3
 8011b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011b0c:	e03d      	b.n	8011b8a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b14:	f043 0301 	orr.w	r3, r3, #1
 8011b18:	b2da      	uxtb	r2, r3
 8011b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011b20:	68ba      	ldr	r2, [r7, #8]
 8011b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b28:	699b      	ldr	r3, [r3, #24]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d10b      	bne.n	8011b46 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b32:	f383 8811 	msr	BASEPRI, r3
 8011b36:	f3bf 8f6f 	isb	sy
 8011b3a:	f3bf 8f4f 	dsb	sy
 8011b3e:	617b      	str	r3, [r7, #20]
}
 8011b40:	bf00      	nop
 8011b42:	bf00      	nop
 8011b44:	e7fd      	b.n	8011b42 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b48:	699a      	ldr	r2, [r3, #24]
 8011b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b4c:	18d1      	adds	r1, r2, r3
 8011b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b54:	f7ff ff04 	bl	8011960 <prvInsertTimerInActiveList>
					break;
 8011b58:	e017      	b.n	8011b8a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b60:	f003 0302 	and.w	r3, r3, #2
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d103      	bne.n	8011b70 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b6a:	f000 fbe5 	bl	8012338 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011b6e:	e00c      	b.n	8011b8a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b76:	f023 0301 	bic.w	r3, r3, #1
 8011b7a:	b2da      	uxtb	r2, r3
 8011b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011b82:	e002      	b.n	8011b8a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011b84:	bf00      	nop
 8011b86:	e000      	b.n	8011b8a <prvProcessReceivedCommands+0x1a6>
					break;
 8011b88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011b8a:	4b08      	ldr	r3, [pc, #32]	@ (8011bac <prvProcessReceivedCommands+0x1c8>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	1d39      	adds	r1, r7, #4
 8011b90:	2200      	movs	r2, #0
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7fe f874 	bl	800fc80 <xQueueReceive>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	f47f af26 	bne.w	80119ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011ba0:	bf00      	nop
 8011ba2:	bf00      	nop
 8011ba4:	3730      	adds	r7, #48	@ 0x30
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
 8011baa:	bf00      	nop
 8011bac:	20019764 	.word	0x20019764

08011bb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b088      	sub	sp, #32
 8011bb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011bb6:	e049      	b.n	8011c4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8011c74 <prvSwitchTimerLists+0xc4>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	68db      	ldr	r3, [r3, #12]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8011c74 <prvSwitchTimerLists+0xc4>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	68db      	ldr	r3, [r3, #12]
 8011bca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	3304      	adds	r3, #4
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7fd fbfb 	bl	800f3cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6a1b      	ldr	r3, [r3, #32]
 8011bda:	68f8      	ldr	r0, [r7, #12]
 8011bdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011be4:	f003 0304 	and.w	r3, r3, #4
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d02f      	beq.n	8011c4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	699b      	ldr	r3, [r3, #24]
 8011bf0:	693a      	ldr	r2, [r7, #16]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011bf6:	68ba      	ldr	r2, [r7, #8]
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d90e      	bls.n	8011c1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	68ba      	ldr	r2, [r7, #8]
 8011c02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	68fa      	ldr	r2, [r7, #12]
 8011c08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8011c74 <prvSwitchTimerLists+0xc4>)
 8011c0c:	681a      	ldr	r2, [r3, #0]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	3304      	adds	r3, #4
 8011c12:	4619      	mov	r1, r3
 8011c14:	4610      	mov	r0, r2
 8011c16:	f7fd fba0 	bl	800f35a <vListInsert>
 8011c1a:	e017      	b.n	8011c4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	2300      	movs	r3, #0
 8011c22:	693a      	ldr	r2, [r7, #16]
 8011c24:	2100      	movs	r1, #0
 8011c26:	68f8      	ldr	r0, [r7, #12]
 8011c28:	f7ff fd58 	bl	80116dc <xTimerGenericCommand>
 8011c2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d10b      	bne.n	8011c4c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c38:	f383 8811 	msr	BASEPRI, r3
 8011c3c:	f3bf 8f6f 	isb	sy
 8011c40:	f3bf 8f4f 	dsb	sy
 8011c44:	603b      	str	r3, [r7, #0]
}
 8011c46:	bf00      	nop
 8011c48:	bf00      	nop
 8011c4a:	e7fd      	b.n	8011c48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011c4c:	4b09      	ldr	r3, [pc, #36]	@ (8011c74 <prvSwitchTimerLists+0xc4>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d1b0      	bne.n	8011bb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011c56:	4b07      	ldr	r3, [pc, #28]	@ (8011c74 <prvSwitchTimerLists+0xc4>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011c5c:	4b06      	ldr	r3, [pc, #24]	@ (8011c78 <prvSwitchTimerLists+0xc8>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4a04      	ldr	r2, [pc, #16]	@ (8011c74 <prvSwitchTimerLists+0xc4>)
 8011c62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011c64:	4a04      	ldr	r2, [pc, #16]	@ (8011c78 <prvSwitchTimerLists+0xc8>)
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	6013      	str	r3, [r2, #0]
}
 8011c6a:	bf00      	nop
 8011c6c:	3718      	adds	r7, #24
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	2001975c 	.word	0x2001975c
 8011c78:	20019760 	.word	0x20019760

08011c7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011c82:	f000 f969 	bl	8011f58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011c86:	4b15      	ldr	r3, [pc, #84]	@ (8011cdc <prvCheckForValidListAndQueue+0x60>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d120      	bne.n	8011cd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011c8e:	4814      	ldr	r0, [pc, #80]	@ (8011ce0 <prvCheckForValidListAndQueue+0x64>)
 8011c90:	f7fd fb12 	bl	800f2b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011c94:	4813      	ldr	r0, [pc, #76]	@ (8011ce4 <prvCheckForValidListAndQueue+0x68>)
 8011c96:	f7fd fb0f 	bl	800f2b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011c9a:	4b13      	ldr	r3, [pc, #76]	@ (8011ce8 <prvCheckForValidListAndQueue+0x6c>)
 8011c9c:	4a10      	ldr	r2, [pc, #64]	@ (8011ce0 <prvCheckForValidListAndQueue+0x64>)
 8011c9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011ca0:	4b12      	ldr	r3, [pc, #72]	@ (8011cec <prvCheckForValidListAndQueue+0x70>)
 8011ca2:	4a10      	ldr	r2, [pc, #64]	@ (8011ce4 <prvCheckForValidListAndQueue+0x68>)
 8011ca4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	9300      	str	r3, [sp, #0]
 8011caa:	4b11      	ldr	r3, [pc, #68]	@ (8011cf0 <prvCheckForValidListAndQueue+0x74>)
 8011cac:	4a11      	ldr	r2, [pc, #68]	@ (8011cf4 <prvCheckForValidListAndQueue+0x78>)
 8011cae:	2110      	movs	r1, #16
 8011cb0:	200a      	movs	r0, #10
 8011cb2:	f7fd fc1f 	bl	800f4f4 <xQueueGenericCreateStatic>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	4a08      	ldr	r2, [pc, #32]	@ (8011cdc <prvCheckForValidListAndQueue+0x60>)
 8011cba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011cbc:	4b07      	ldr	r3, [pc, #28]	@ (8011cdc <prvCheckForValidListAndQueue+0x60>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d005      	beq.n	8011cd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011cc4:	4b05      	ldr	r3, [pc, #20]	@ (8011cdc <prvCheckForValidListAndQueue+0x60>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	490b      	ldr	r1, [pc, #44]	@ (8011cf8 <prvCheckForValidListAndQueue+0x7c>)
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7fe fb98 	bl	8010400 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011cd0:	f000 f974 	bl	8011fbc <vPortExitCritical>
}
 8011cd4:	bf00      	nop
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	20019764 	.word	0x20019764
 8011ce0:	20019734 	.word	0x20019734
 8011ce4:	20019748 	.word	0x20019748
 8011ce8:	2001975c 	.word	0x2001975c
 8011cec:	20019760 	.word	0x20019760
 8011cf0:	20019810 	.word	0x20019810
 8011cf4:	20019770 	.word	0x20019770
 8011cf8:	0801b464 	.word	0x0801b464

08011cfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b085      	sub	sp, #20
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	60f8      	str	r0, [r7, #12]
 8011d04:	60b9      	str	r1, [r7, #8]
 8011d06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	3b04      	subs	r3, #4
 8011d0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	3b04      	subs	r3, #4
 8011d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	f023 0201 	bic.w	r2, r3, #1
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	3b04      	subs	r3, #4
 8011d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8011d60 <pxPortInitialiseStack+0x64>)
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	3b14      	subs	r3, #20
 8011d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	3b04      	subs	r3, #4
 8011d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f06f 0202 	mvn.w	r2, #2
 8011d4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	3b20      	subs	r3, #32
 8011d50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011d52:	68fb      	ldr	r3, [r7, #12]
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3714      	adds	r7, #20
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr
 8011d60:	08011d65 	.word	0x08011d65

08011d64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011d64:	b480      	push	{r7}
 8011d66:	b085      	sub	sp, #20
 8011d68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011d6e:	4b13      	ldr	r3, [pc, #76]	@ (8011dbc <prvTaskExitError+0x58>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d76:	d00b      	beq.n	8011d90 <prvTaskExitError+0x2c>
	__asm volatile
 8011d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d7c:	f383 8811 	msr	BASEPRI, r3
 8011d80:	f3bf 8f6f 	isb	sy
 8011d84:	f3bf 8f4f 	dsb	sy
 8011d88:	60fb      	str	r3, [r7, #12]
}
 8011d8a:	bf00      	nop
 8011d8c:	bf00      	nop
 8011d8e:	e7fd      	b.n	8011d8c <prvTaskExitError+0x28>
	__asm volatile
 8011d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d94:	f383 8811 	msr	BASEPRI, r3
 8011d98:	f3bf 8f6f 	isb	sy
 8011d9c:	f3bf 8f4f 	dsb	sy
 8011da0:	60bb      	str	r3, [r7, #8]
}
 8011da2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011da4:	bf00      	nop
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d0fc      	beq.n	8011da6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011dac:	bf00      	nop
 8011dae:	bf00      	nop
 8011db0:	3714      	adds	r7, #20
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr
 8011dba:	bf00      	nop
 8011dbc:	200000bc 	.word	0x200000bc

08011dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011dc0:	4b07      	ldr	r3, [pc, #28]	@ (8011de0 <pxCurrentTCBConst2>)
 8011dc2:	6819      	ldr	r1, [r3, #0]
 8011dc4:	6808      	ldr	r0, [r1, #0]
 8011dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dca:	f380 8809 	msr	PSP, r0
 8011dce:	f3bf 8f6f 	isb	sy
 8011dd2:	f04f 0000 	mov.w	r0, #0
 8011dd6:	f380 8811 	msr	BASEPRI, r0
 8011dda:	4770      	bx	lr
 8011ddc:	f3af 8000 	nop.w

08011de0 <pxCurrentTCBConst2>:
 8011de0:	20019234 	.word	0x20019234
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011de4:	bf00      	nop
 8011de6:	bf00      	nop

08011de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011de8:	4808      	ldr	r0, [pc, #32]	@ (8011e0c <prvPortStartFirstTask+0x24>)
 8011dea:	6800      	ldr	r0, [r0, #0]
 8011dec:	6800      	ldr	r0, [r0, #0]
 8011dee:	f380 8808 	msr	MSP, r0
 8011df2:	f04f 0000 	mov.w	r0, #0
 8011df6:	f380 8814 	msr	CONTROL, r0
 8011dfa:	b662      	cpsie	i
 8011dfc:	b661      	cpsie	f
 8011dfe:	f3bf 8f4f 	dsb	sy
 8011e02:	f3bf 8f6f 	isb	sy
 8011e06:	df00      	svc	0
 8011e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011e0a:	bf00      	nop
 8011e0c:	e000ed08 	.word	0xe000ed08

08011e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b086      	sub	sp, #24
 8011e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011e16:	4b47      	ldr	r3, [pc, #284]	@ (8011f34 <xPortStartScheduler+0x124>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4a47      	ldr	r2, [pc, #284]	@ (8011f38 <xPortStartScheduler+0x128>)
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d10b      	bne.n	8011e38 <xPortStartScheduler+0x28>
	__asm volatile
 8011e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e24:	f383 8811 	msr	BASEPRI, r3
 8011e28:	f3bf 8f6f 	isb	sy
 8011e2c:	f3bf 8f4f 	dsb	sy
 8011e30:	613b      	str	r3, [r7, #16]
}
 8011e32:	bf00      	nop
 8011e34:	bf00      	nop
 8011e36:	e7fd      	b.n	8011e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011e38:	4b3e      	ldr	r3, [pc, #248]	@ (8011f34 <xPortStartScheduler+0x124>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	4a3f      	ldr	r2, [pc, #252]	@ (8011f3c <xPortStartScheduler+0x12c>)
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d10b      	bne.n	8011e5a <xPortStartScheduler+0x4a>
	__asm volatile
 8011e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e46:	f383 8811 	msr	BASEPRI, r3
 8011e4a:	f3bf 8f6f 	isb	sy
 8011e4e:	f3bf 8f4f 	dsb	sy
 8011e52:	60fb      	str	r3, [r7, #12]
}
 8011e54:	bf00      	nop
 8011e56:	bf00      	nop
 8011e58:	e7fd      	b.n	8011e56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011e5a:	4b39      	ldr	r3, [pc, #228]	@ (8011f40 <xPortStartScheduler+0x130>)
 8011e5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	22ff      	movs	r2, #255	@ 0xff
 8011e6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e74:	78fb      	ldrb	r3, [r7, #3]
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011e7c:	b2da      	uxtb	r2, r3
 8011e7e:	4b31      	ldr	r3, [pc, #196]	@ (8011f44 <xPortStartScheduler+0x134>)
 8011e80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011e82:	4b31      	ldr	r3, [pc, #196]	@ (8011f48 <xPortStartScheduler+0x138>)
 8011e84:	2207      	movs	r2, #7
 8011e86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e88:	e009      	b.n	8011e9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8011e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8011f48 <xPortStartScheduler+0x138>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	3b01      	subs	r3, #1
 8011e90:	4a2d      	ldr	r2, [pc, #180]	@ (8011f48 <xPortStartScheduler+0x138>)
 8011e92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011e94:	78fb      	ldrb	r3, [r7, #3]
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	005b      	lsls	r3, r3, #1
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e9e:	78fb      	ldrb	r3, [r7, #3]
 8011ea0:	b2db      	uxtb	r3, r3
 8011ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011ea6:	2b80      	cmp	r3, #128	@ 0x80
 8011ea8:	d0ef      	beq.n	8011e8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011eaa:	4b27      	ldr	r3, [pc, #156]	@ (8011f48 <xPortStartScheduler+0x138>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f1c3 0307 	rsb	r3, r3, #7
 8011eb2:	2b04      	cmp	r3, #4
 8011eb4:	d00b      	beq.n	8011ece <xPortStartScheduler+0xbe>
	__asm volatile
 8011eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eba:	f383 8811 	msr	BASEPRI, r3
 8011ebe:	f3bf 8f6f 	isb	sy
 8011ec2:	f3bf 8f4f 	dsb	sy
 8011ec6:	60bb      	str	r3, [r7, #8]
}
 8011ec8:	bf00      	nop
 8011eca:	bf00      	nop
 8011ecc:	e7fd      	b.n	8011eca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011ece:	4b1e      	ldr	r3, [pc, #120]	@ (8011f48 <xPortStartScheduler+0x138>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	021b      	lsls	r3, r3, #8
 8011ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8011f48 <xPortStartScheduler+0x138>)
 8011ed6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8011f48 <xPortStartScheduler+0x138>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011ee0:	4a19      	ldr	r2, [pc, #100]	@ (8011f48 <xPortStartScheduler+0x138>)
 8011ee2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	b2da      	uxtb	r2, r3
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011eec:	4b17      	ldr	r3, [pc, #92]	@ (8011f4c <xPortStartScheduler+0x13c>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	4a16      	ldr	r2, [pc, #88]	@ (8011f4c <xPortStartScheduler+0x13c>)
 8011ef2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011ef6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ef8:	4b14      	ldr	r3, [pc, #80]	@ (8011f4c <xPortStartScheduler+0x13c>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	4a13      	ldr	r2, [pc, #76]	@ (8011f4c <xPortStartScheduler+0x13c>)
 8011efe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011f02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011f04:	f000 f8da 	bl	80120bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011f08:	4b11      	ldr	r3, [pc, #68]	@ (8011f50 <xPortStartScheduler+0x140>)
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011f0e:	f000 f8f9 	bl	8012104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011f12:	4b10      	ldr	r3, [pc, #64]	@ (8011f54 <xPortStartScheduler+0x144>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	4a0f      	ldr	r2, [pc, #60]	@ (8011f54 <xPortStartScheduler+0x144>)
 8011f18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011f1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011f1e:	f7ff ff63 	bl	8011de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011f22:	f7fe ff07 	bl	8010d34 <vTaskSwitchContext>
	prvTaskExitError();
 8011f26:	f7ff ff1d 	bl	8011d64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011f2a:	2300      	movs	r3, #0
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3718      	adds	r7, #24
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	e000ed00 	.word	0xe000ed00
 8011f38:	410fc271 	.word	0x410fc271
 8011f3c:	410fc270 	.word	0x410fc270
 8011f40:	e000e400 	.word	0xe000e400
 8011f44:	20019860 	.word	0x20019860
 8011f48:	20019864 	.word	0x20019864
 8011f4c:	e000ed20 	.word	0xe000ed20
 8011f50:	200000bc 	.word	0x200000bc
 8011f54:	e000ef34 	.word	0xe000ef34

08011f58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b083      	sub	sp, #12
 8011f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8011f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f62:	f383 8811 	msr	BASEPRI, r3
 8011f66:	f3bf 8f6f 	isb	sy
 8011f6a:	f3bf 8f4f 	dsb	sy
 8011f6e:	607b      	str	r3, [r7, #4]
}
 8011f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011f72:	4b10      	ldr	r3, [pc, #64]	@ (8011fb4 <vPortEnterCritical+0x5c>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	3301      	adds	r3, #1
 8011f78:	4a0e      	ldr	r2, [pc, #56]	@ (8011fb4 <vPortEnterCritical+0x5c>)
 8011f7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8011fb4 <vPortEnterCritical+0x5c>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	2b01      	cmp	r3, #1
 8011f82:	d110      	bne.n	8011fa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011f84:	4b0c      	ldr	r3, [pc, #48]	@ (8011fb8 <vPortEnterCritical+0x60>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	b2db      	uxtb	r3, r3
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d00b      	beq.n	8011fa6 <vPortEnterCritical+0x4e>
	__asm volatile
 8011f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f92:	f383 8811 	msr	BASEPRI, r3
 8011f96:	f3bf 8f6f 	isb	sy
 8011f9a:	f3bf 8f4f 	dsb	sy
 8011f9e:	603b      	str	r3, [r7, #0]
}
 8011fa0:	bf00      	nop
 8011fa2:	bf00      	nop
 8011fa4:	e7fd      	b.n	8011fa2 <vPortEnterCritical+0x4a>
	}
}
 8011fa6:	bf00      	nop
 8011fa8:	370c      	adds	r7, #12
 8011faa:	46bd      	mov	sp, r7
 8011fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb0:	4770      	bx	lr
 8011fb2:	bf00      	nop
 8011fb4:	200000bc 	.word	0x200000bc
 8011fb8:	e000ed04 	.word	0xe000ed04

08011fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011fc2:	4b12      	ldr	r3, [pc, #72]	@ (801200c <vPortExitCritical+0x50>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d10b      	bne.n	8011fe2 <vPortExitCritical+0x26>
	__asm volatile
 8011fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fce:	f383 8811 	msr	BASEPRI, r3
 8011fd2:	f3bf 8f6f 	isb	sy
 8011fd6:	f3bf 8f4f 	dsb	sy
 8011fda:	607b      	str	r3, [r7, #4]
}
 8011fdc:	bf00      	nop
 8011fde:	bf00      	nop
 8011fe0:	e7fd      	b.n	8011fde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011fe2:	4b0a      	ldr	r3, [pc, #40]	@ (801200c <vPortExitCritical+0x50>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	3b01      	subs	r3, #1
 8011fe8:	4a08      	ldr	r2, [pc, #32]	@ (801200c <vPortExitCritical+0x50>)
 8011fea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011fec:	4b07      	ldr	r3, [pc, #28]	@ (801200c <vPortExitCritical+0x50>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d105      	bne.n	8012000 <vPortExitCritical+0x44>
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	f383 8811 	msr	BASEPRI, r3
}
 8011ffe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012000:	bf00      	nop
 8012002:	370c      	adds	r7, #12
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr
 801200c:	200000bc 	.word	0x200000bc

08012010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012010:	f3ef 8009 	mrs	r0, PSP
 8012014:	f3bf 8f6f 	isb	sy
 8012018:	4b15      	ldr	r3, [pc, #84]	@ (8012070 <pxCurrentTCBConst>)
 801201a:	681a      	ldr	r2, [r3, #0]
 801201c:	f01e 0f10 	tst.w	lr, #16
 8012020:	bf08      	it	eq
 8012022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801202a:	6010      	str	r0, [r2, #0]
 801202c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012030:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012034:	f380 8811 	msr	BASEPRI, r0
 8012038:	f3bf 8f4f 	dsb	sy
 801203c:	f3bf 8f6f 	isb	sy
 8012040:	f7fe fe78 	bl	8010d34 <vTaskSwitchContext>
 8012044:	f04f 0000 	mov.w	r0, #0
 8012048:	f380 8811 	msr	BASEPRI, r0
 801204c:	bc09      	pop	{r0, r3}
 801204e:	6819      	ldr	r1, [r3, #0]
 8012050:	6808      	ldr	r0, [r1, #0]
 8012052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012056:	f01e 0f10 	tst.w	lr, #16
 801205a:	bf08      	it	eq
 801205c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012060:	f380 8809 	msr	PSP, r0
 8012064:	f3bf 8f6f 	isb	sy
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	f3af 8000 	nop.w

08012070 <pxCurrentTCBConst>:
 8012070:	20019234 	.word	0x20019234
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012074:	bf00      	nop
 8012076:	bf00      	nop

08012078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
	__asm volatile
 801207e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012082:	f383 8811 	msr	BASEPRI, r3
 8012086:	f3bf 8f6f 	isb	sy
 801208a:	f3bf 8f4f 	dsb	sy
 801208e:	607b      	str	r3, [r7, #4]
}
 8012090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012092:	f7fe fd95 	bl	8010bc0 <xTaskIncrementTick>
 8012096:	4603      	mov	r3, r0
 8012098:	2b00      	cmp	r3, #0
 801209a:	d003      	beq.n	80120a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801209c:	4b06      	ldr	r3, [pc, #24]	@ (80120b8 <xPortSysTickHandler+0x40>)
 801209e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80120a2:	601a      	str	r2, [r3, #0]
 80120a4:	2300      	movs	r3, #0
 80120a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	f383 8811 	msr	BASEPRI, r3
}
 80120ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80120b0:	bf00      	nop
 80120b2:	3708      	adds	r7, #8
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	e000ed04 	.word	0xe000ed04

080120bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80120bc:	b480      	push	{r7}
 80120be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80120c0:	4b0b      	ldr	r3, [pc, #44]	@ (80120f0 <vPortSetupTimerInterrupt+0x34>)
 80120c2:	2200      	movs	r2, #0
 80120c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80120c6:	4b0b      	ldr	r3, [pc, #44]	@ (80120f4 <vPortSetupTimerInterrupt+0x38>)
 80120c8:	2200      	movs	r2, #0
 80120ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80120cc:	4b0a      	ldr	r3, [pc, #40]	@ (80120f8 <vPortSetupTimerInterrupt+0x3c>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4a0a      	ldr	r2, [pc, #40]	@ (80120fc <vPortSetupTimerInterrupt+0x40>)
 80120d2:	fba2 2303 	umull	r2, r3, r2, r3
 80120d6:	099b      	lsrs	r3, r3, #6
 80120d8:	4a09      	ldr	r2, [pc, #36]	@ (8012100 <vPortSetupTimerInterrupt+0x44>)
 80120da:	3b01      	subs	r3, #1
 80120dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80120de:	4b04      	ldr	r3, [pc, #16]	@ (80120f0 <vPortSetupTimerInterrupt+0x34>)
 80120e0:	2207      	movs	r2, #7
 80120e2:	601a      	str	r2, [r3, #0]
}
 80120e4:	bf00      	nop
 80120e6:	46bd      	mov	sp, r7
 80120e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ec:	4770      	bx	lr
 80120ee:	bf00      	nop
 80120f0:	e000e010 	.word	0xe000e010
 80120f4:	e000e018 	.word	0xe000e018
 80120f8:	20000004 	.word	0x20000004
 80120fc:	10624dd3 	.word	0x10624dd3
 8012100:	e000e014 	.word	0xe000e014

08012104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012104:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012114 <vPortEnableVFP+0x10>
 8012108:	6801      	ldr	r1, [r0, #0]
 801210a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801210e:	6001      	str	r1, [r0, #0]
 8012110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012112:	bf00      	nop
 8012114:	e000ed88 	.word	0xe000ed88

08012118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012118:	b480      	push	{r7}
 801211a:	b085      	sub	sp, #20
 801211c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801211e:	f3ef 8305 	mrs	r3, IPSR
 8012122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2b0f      	cmp	r3, #15
 8012128:	d915      	bls.n	8012156 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801212a:	4a18      	ldr	r2, [pc, #96]	@ (801218c <vPortValidateInterruptPriority+0x74>)
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	4413      	add	r3, r2
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012134:	4b16      	ldr	r3, [pc, #88]	@ (8012190 <vPortValidateInterruptPriority+0x78>)
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	7afa      	ldrb	r2, [r7, #11]
 801213a:	429a      	cmp	r2, r3
 801213c:	d20b      	bcs.n	8012156 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	607b      	str	r3, [r7, #4]
}
 8012150:	bf00      	nop
 8012152:	bf00      	nop
 8012154:	e7fd      	b.n	8012152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012156:	4b0f      	ldr	r3, [pc, #60]	@ (8012194 <vPortValidateInterruptPriority+0x7c>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801215e:	4b0e      	ldr	r3, [pc, #56]	@ (8012198 <vPortValidateInterruptPriority+0x80>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	429a      	cmp	r2, r3
 8012164:	d90b      	bls.n	801217e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801216a:	f383 8811 	msr	BASEPRI, r3
 801216e:	f3bf 8f6f 	isb	sy
 8012172:	f3bf 8f4f 	dsb	sy
 8012176:	603b      	str	r3, [r7, #0]
}
 8012178:	bf00      	nop
 801217a:	bf00      	nop
 801217c:	e7fd      	b.n	801217a <vPortValidateInterruptPriority+0x62>
	}
 801217e:	bf00      	nop
 8012180:	3714      	adds	r7, #20
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr
 801218a:	bf00      	nop
 801218c:	e000e3f0 	.word	0xe000e3f0
 8012190:	20019860 	.word	0x20019860
 8012194:	e000ed0c 	.word	0xe000ed0c
 8012198:	20019864 	.word	0x20019864

0801219c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b08a      	sub	sp, #40	@ 0x28
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80121a4:	2300      	movs	r3, #0
 80121a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80121a8:	f7fe fc16 	bl	80109d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80121ac:	4b5c      	ldr	r3, [pc, #368]	@ (8012320 <pvPortMalloc+0x184>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d101      	bne.n	80121b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80121b4:	f000 f924 	bl	8012400 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80121b8:	4b5a      	ldr	r3, [pc, #360]	@ (8012324 <pvPortMalloc+0x188>)
 80121ba:	681a      	ldr	r2, [r3, #0]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	4013      	ands	r3, r2
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	f040 8095 	bne.w	80122f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d01e      	beq.n	801220a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80121cc:	2208      	movs	r2, #8
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	4413      	add	r3, r2
 80121d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f003 0307 	and.w	r3, r3, #7
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d015      	beq.n	801220a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f023 0307 	bic.w	r3, r3, #7
 80121e4:	3308      	adds	r3, #8
 80121e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f003 0307 	and.w	r3, r3, #7
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d00b      	beq.n	801220a <pvPortMalloc+0x6e>
	__asm volatile
 80121f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121f6:	f383 8811 	msr	BASEPRI, r3
 80121fa:	f3bf 8f6f 	isb	sy
 80121fe:	f3bf 8f4f 	dsb	sy
 8012202:	617b      	str	r3, [r7, #20]
}
 8012204:	bf00      	nop
 8012206:	bf00      	nop
 8012208:	e7fd      	b.n	8012206 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d06f      	beq.n	80122f0 <pvPortMalloc+0x154>
 8012210:	4b45      	ldr	r3, [pc, #276]	@ (8012328 <pvPortMalloc+0x18c>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	429a      	cmp	r2, r3
 8012218:	d86a      	bhi.n	80122f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801221a:	4b44      	ldr	r3, [pc, #272]	@ (801232c <pvPortMalloc+0x190>)
 801221c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801221e:	4b43      	ldr	r3, [pc, #268]	@ (801232c <pvPortMalloc+0x190>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012224:	e004      	b.n	8012230 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	429a      	cmp	r2, r3
 8012238:	d903      	bls.n	8012242 <pvPortMalloc+0xa6>
 801223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d1f1      	bne.n	8012226 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012242:	4b37      	ldr	r3, [pc, #220]	@ (8012320 <pvPortMalloc+0x184>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012248:	429a      	cmp	r2, r3
 801224a:	d051      	beq.n	80122f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801224c:	6a3b      	ldr	r3, [r7, #32]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	2208      	movs	r2, #8
 8012252:	4413      	add	r3, r2
 8012254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012258:	681a      	ldr	r2, [r3, #0]
 801225a:	6a3b      	ldr	r3, [r7, #32]
 801225c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012260:	685a      	ldr	r2, [r3, #4]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	1ad2      	subs	r2, r2, r3
 8012266:	2308      	movs	r3, #8
 8012268:	005b      	lsls	r3, r3, #1
 801226a:	429a      	cmp	r2, r3
 801226c:	d920      	bls.n	80122b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801226e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	4413      	add	r3, r2
 8012274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	f003 0307 	and.w	r3, r3, #7
 801227c:	2b00      	cmp	r3, #0
 801227e:	d00b      	beq.n	8012298 <pvPortMalloc+0xfc>
	__asm volatile
 8012280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012284:	f383 8811 	msr	BASEPRI, r3
 8012288:	f3bf 8f6f 	isb	sy
 801228c:	f3bf 8f4f 	dsb	sy
 8012290:	613b      	str	r3, [r7, #16]
}
 8012292:	bf00      	nop
 8012294:	bf00      	nop
 8012296:	e7fd      	b.n	8012294 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801229a:	685a      	ldr	r2, [r3, #4]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	1ad2      	subs	r2, r2, r3
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80122a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80122aa:	69b8      	ldr	r0, [r7, #24]
 80122ac:	f000 f90a 	bl	80124c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80122b0:	4b1d      	ldr	r3, [pc, #116]	@ (8012328 <pvPortMalloc+0x18c>)
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	1ad3      	subs	r3, r2, r3
 80122ba:	4a1b      	ldr	r2, [pc, #108]	@ (8012328 <pvPortMalloc+0x18c>)
 80122bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80122be:	4b1a      	ldr	r3, [pc, #104]	@ (8012328 <pvPortMalloc+0x18c>)
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	4b1b      	ldr	r3, [pc, #108]	@ (8012330 <pvPortMalloc+0x194>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d203      	bcs.n	80122d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80122ca:	4b17      	ldr	r3, [pc, #92]	@ (8012328 <pvPortMalloc+0x18c>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	4a18      	ldr	r2, [pc, #96]	@ (8012330 <pvPortMalloc+0x194>)
 80122d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80122d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d4:	685a      	ldr	r2, [r3, #4]
 80122d6:	4b13      	ldr	r3, [pc, #76]	@ (8012324 <pvPortMalloc+0x188>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	431a      	orrs	r2, r3
 80122dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80122e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e2:	2200      	movs	r2, #0
 80122e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80122e6:	4b13      	ldr	r3, [pc, #76]	@ (8012334 <pvPortMalloc+0x198>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	3301      	adds	r3, #1
 80122ec:	4a11      	ldr	r2, [pc, #68]	@ (8012334 <pvPortMalloc+0x198>)
 80122ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80122f0:	f7fe fbb8 	bl	8010a64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	f003 0307 	and.w	r3, r3, #7
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d00b      	beq.n	8012316 <pvPortMalloc+0x17a>
	__asm volatile
 80122fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012302:	f383 8811 	msr	BASEPRI, r3
 8012306:	f3bf 8f6f 	isb	sy
 801230a:	f3bf 8f4f 	dsb	sy
 801230e:	60fb      	str	r3, [r7, #12]
}
 8012310:	bf00      	nop
 8012312:	bf00      	nop
 8012314:	e7fd      	b.n	8012312 <pvPortMalloc+0x176>
	return pvReturn;
 8012316:	69fb      	ldr	r3, [r7, #28]
}
 8012318:	4618      	mov	r0, r3
 801231a:	3728      	adds	r7, #40	@ 0x28
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}
 8012320:	20021870 	.word	0x20021870
 8012324:	20021884 	.word	0x20021884
 8012328:	20021874 	.word	0x20021874
 801232c:	20021868 	.word	0x20021868
 8012330:	20021878 	.word	0x20021878
 8012334:	2002187c 	.word	0x2002187c

08012338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b086      	sub	sp, #24
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d04f      	beq.n	80123ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801234a:	2308      	movs	r3, #8
 801234c:	425b      	negs	r3, r3
 801234e:	697a      	ldr	r2, [r7, #20]
 8012350:	4413      	add	r3, r2
 8012352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	685a      	ldr	r2, [r3, #4]
 801235c:	4b25      	ldr	r3, [pc, #148]	@ (80123f4 <vPortFree+0xbc>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	4013      	ands	r3, r2
 8012362:	2b00      	cmp	r3, #0
 8012364:	d10b      	bne.n	801237e <vPortFree+0x46>
	__asm volatile
 8012366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801236a:	f383 8811 	msr	BASEPRI, r3
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	f3bf 8f4f 	dsb	sy
 8012376:	60fb      	str	r3, [r7, #12]
}
 8012378:	bf00      	nop
 801237a:	bf00      	nop
 801237c:	e7fd      	b.n	801237a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d00b      	beq.n	801239e <vPortFree+0x66>
	__asm volatile
 8012386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801238a:	f383 8811 	msr	BASEPRI, r3
 801238e:	f3bf 8f6f 	isb	sy
 8012392:	f3bf 8f4f 	dsb	sy
 8012396:	60bb      	str	r3, [r7, #8]
}
 8012398:	bf00      	nop
 801239a:	bf00      	nop
 801239c:	e7fd      	b.n	801239a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	685a      	ldr	r2, [r3, #4]
 80123a2:	4b14      	ldr	r3, [pc, #80]	@ (80123f4 <vPortFree+0xbc>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	4013      	ands	r3, r2
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d01e      	beq.n	80123ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d11a      	bne.n	80123ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	685a      	ldr	r2, [r3, #4]
 80123b8:	4b0e      	ldr	r3, [pc, #56]	@ (80123f4 <vPortFree+0xbc>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	43db      	mvns	r3, r3
 80123be:	401a      	ands	r2, r3
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80123c4:	f7fe fb08 	bl	80109d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80123c8:	693b      	ldr	r3, [r7, #16]
 80123ca:	685a      	ldr	r2, [r3, #4]
 80123cc:	4b0a      	ldr	r3, [pc, #40]	@ (80123f8 <vPortFree+0xc0>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4413      	add	r3, r2
 80123d2:	4a09      	ldr	r2, [pc, #36]	@ (80123f8 <vPortFree+0xc0>)
 80123d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80123d6:	6938      	ldr	r0, [r7, #16]
 80123d8:	f000 f874 	bl	80124c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80123dc:	4b07      	ldr	r3, [pc, #28]	@ (80123fc <vPortFree+0xc4>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	3301      	adds	r3, #1
 80123e2:	4a06      	ldr	r2, [pc, #24]	@ (80123fc <vPortFree+0xc4>)
 80123e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80123e6:	f7fe fb3d 	bl	8010a64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80123ea:	bf00      	nop
 80123ec:	3718      	adds	r7, #24
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
 80123f2:	bf00      	nop
 80123f4:	20021884 	.word	0x20021884
 80123f8:	20021874 	.word	0x20021874
 80123fc:	20021880 	.word	0x20021880

08012400 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012400:	b480      	push	{r7}
 8012402:	b085      	sub	sp, #20
 8012404:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801240a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801240c:	4b27      	ldr	r3, [pc, #156]	@ (80124ac <prvHeapInit+0xac>)
 801240e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f003 0307 	and.w	r3, r3, #7
 8012416:	2b00      	cmp	r3, #0
 8012418:	d00c      	beq.n	8012434 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	3307      	adds	r3, #7
 801241e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	f023 0307 	bic.w	r3, r3, #7
 8012426:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012428:	68ba      	ldr	r2, [r7, #8]
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	1ad3      	subs	r3, r2, r3
 801242e:	4a1f      	ldr	r2, [pc, #124]	@ (80124ac <prvHeapInit+0xac>)
 8012430:	4413      	add	r3, r2
 8012432:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012438:	4a1d      	ldr	r2, [pc, #116]	@ (80124b0 <prvHeapInit+0xb0>)
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801243e:	4b1c      	ldr	r3, [pc, #112]	@ (80124b0 <prvHeapInit+0xb0>)
 8012440:	2200      	movs	r2, #0
 8012442:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	68ba      	ldr	r2, [r7, #8]
 8012448:	4413      	add	r3, r2
 801244a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801244c:	2208      	movs	r2, #8
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	1a9b      	subs	r3, r3, r2
 8012452:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f023 0307 	bic.w	r3, r3, #7
 801245a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	4a15      	ldr	r2, [pc, #84]	@ (80124b4 <prvHeapInit+0xb4>)
 8012460:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012462:	4b14      	ldr	r3, [pc, #80]	@ (80124b4 <prvHeapInit+0xb4>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2200      	movs	r2, #0
 8012468:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801246a:	4b12      	ldr	r3, [pc, #72]	@ (80124b4 <prvHeapInit+0xb4>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2200      	movs	r2, #0
 8012470:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	68fa      	ldr	r2, [r7, #12]
 801247a:	1ad2      	subs	r2, r2, r3
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012480:	4b0c      	ldr	r3, [pc, #48]	@ (80124b4 <prvHeapInit+0xb4>)
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	4a0a      	ldr	r2, [pc, #40]	@ (80124b8 <prvHeapInit+0xb8>)
 801248e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	4a09      	ldr	r2, [pc, #36]	@ (80124bc <prvHeapInit+0xbc>)
 8012496:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012498:	4b09      	ldr	r3, [pc, #36]	@ (80124c0 <prvHeapInit+0xc0>)
 801249a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801249e:	601a      	str	r2, [r3, #0]
}
 80124a0:	bf00      	nop
 80124a2:	3714      	adds	r7, #20
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr
 80124ac:	20019868 	.word	0x20019868
 80124b0:	20021868 	.word	0x20021868
 80124b4:	20021870 	.word	0x20021870
 80124b8:	20021878 	.word	0x20021878
 80124bc:	20021874 	.word	0x20021874
 80124c0:	20021884 	.word	0x20021884

080124c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80124c4:	b480      	push	{r7}
 80124c6:	b085      	sub	sp, #20
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80124cc:	4b28      	ldr	r3, [pc, #160]	@ (8012570 <prvInsertBlockIntoFreeList+0xac>)
 80124ce:	60fb      	str	r3, [r7, #12]
 80124d0:	e002      	b.n	80124d8 <prvInsertBlockIntoFreeList+0x14>
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	60fb      	str	r3, [r7, #12]
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d8f7      	bhi.n	80124d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	68ba      	ldr	r2, [r7, #8]
 80124ec:	4413      	add	r3, r2
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d108      	bne.n	8012506 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	685a      	ldr	r2, [r3, #4]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	685b      	ldr	r3, [r3, #4]
 80124fc:	441a      	add	r2, r3
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	68ba      	ldr	r2, [r7, #8]
 8012510:	441a      	add	r2, r3
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	429a      	cmp	r2, r3
 8012518:	d118      	bne.n	801254c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681a      	ldr	r2, [r3, #0]
 801251e:	4b15      	ldr	r3, [pc, #84]	@ (8012574 <prvInsertBlockIntoFreeList+0xb0>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	429a      	cmp	r2, r3
 8012524:	d00d      	beq.n	8012542 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	685a      	ldr	r2, [r3, #4]
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	441a      	add	r2, r3
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	601a      	str	r2, [r3, #0]
 8012540:	e008      	b.n	8012554 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012542:	4b0c      	ldr	r3, [pc, #48]	@ (8012574 <prvInsertBlockIntoFreeList+0xb0>)
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	601a      	str	r2, [r3, #0]
 801254a:	e003      	b.n	8012554 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681a      	ldr	r2, [r3, #0]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012554:	68fa      	ldr	r2, [r7, #12]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	429a      	cmp	r2, r3
 801255a:	d002      	beq.n	8012562 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	687a      	ldr	r2, [r7, #4]
 8012560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012562:	bf00      	nop
 8012564:	3714      	adds	r7, #20
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr
 801256e:	bf00      	nop
 8012570:	20021868 	.word	0x20021868
 8012574:	20021870 	.word	0x20021870

08012578 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	SET_BIT(PWR->CR2, PWR_PVM_1);
 801257c:	4b20      	ldr	r3, [pc, #128]	@ (8012600 <MX_USB_DEVICE_Init+0x88>)
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	4a1f      	ldr	r2, [pc, #124]	@ (8012600 <MX_USB_DEVICE_Init+0x88>)
 8012582:	f043 0310 	orr.w	r3, r3, #16
 8012586:	6053      	str	r3, [r2, #4]
	vTaskDelay(100);
 8012588:	2064      	movs	r0, #100	@ 0x64
 801258a:	f7fe f97f 	bl	801088c <vTaskDelay>

	if (!HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_PVMO1)) //Detect USBVDD
 801258e:	4b1c      	ldr	r3, [pc, #112]	@ (8012600 <MX_USB_DEVICE_Init+0x88>)
 8012590:	695b      	ldr	r3, [r3, #20]
 8012592:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801259a:	d024      	beq.n	80125e6 <MX_USB_DEVICE_Init+0x6e>
	{
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801259c:	2200      	movs	r2, #0
 801259e:	4919      	ldr	r1, [pc, #100]	@ (8012604 <MX_USB_DEVICE_Init+0x8c>)
 80125a0:	4819      	ldr	r0, [pc, #100]	@ (8012608 <MX_USB_DEVICE_Init+0x90>)
 80125a2:	f7fb f89d 	bl	800d6e0 <USBD_Init>
 80125a6:	4603      	mov	r3, r0
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d001      	beq.n	80125b0 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
 80125ac:	f7f0 fafc 	bl	8002ba8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80125b0:	4916      	ldr	r1, [pc, #88]	@ (801260c <MX_USB_DEVICE_Init+0x94>)
 80125b2:	4815      	ldr	r0, [pc, #84]	@ (8012608 <MX_USB_DEVICE_Init+0x90>)
 80125b4:	f7fb f8c4 	bl	800d740 <USBD_RegisterClass>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d001      	beq.n	80125c2 <MX_USB_DEVICE_Init+0x4a>
  {
    Error_Handler();
 80125be:	f7f0 faf3 	bl	8002ba8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80125c2:	4913      	ldr	r1, [pc, #76]	@ (8012610 <MX_USB_DEVICE_Init+0x98>)
 80125c4:	4810      	ldr	r0, [pc, #64]	@ (8012608 <MX_USB_DEVICE_Init+0x90>)
 80125c6:	f7fa ffbb 	bl	800d540 <USBD_CDC_RegisterInterface>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d001      	beq.n	80125d4 <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
 80125d0:	f7f0 faea 	bl	8002ba8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80125d4:	480c      	ldr	r0, [pc, #48]	@ (8012608 <MX_USB_DEVICE_Init+0x90>)
 80125d6:	f7fb f8e9 	bl	800d7ac <USBD_Start>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d008      	beq.n	80125f2 <MX_USB_DEVICE_Init+0x7a>
  {
    Error_Handler();
 80125e0:	f7f0 fae2 	bl	8002ba8 <Error_Handler>
 80125e4:	e005      	b.n	80125f2 <MX_USB_DEVICE_Init+0x7a>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	} else
		CLEAR_BIT(PWR->CR2, PWR_PVM_1);
 80125e6:	4b06      	ldr	r3, [pc, #24]	@ (8012600 <MX_USB_DEVICE_Init+0x88>)
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	4a05      	ldr	r2, [pc, #20]	@ (8012600 <MX_USB_DEVICE_Init+0x88>)
 80125ec:	f023 0310 	bic.w	r3, r3, #16
 80125f0:	6053      	str	r3, [r2, #4]
	vTaskDelay(300);
 80125f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80125f6:	f7fe f949 	bl	801088c <vTaskDelay>
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80125fa:	bf00      	nop
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	40007000 	.word	0x40007000
 8012604:	200000d4 	.word	0x200000d4
 8012608:	20021888 	.word	0x20021888
 801260c:	2000003c 	.word	0x2000003c
 8012610:	200000c0 	.word	0x200000c0

08012614 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012618:	2200      	movs	r2, #0
 801261a:	4905      	ldr	r1, [pc, #20]	@ (8012630 <CDC_Init_FS+0x1c>)
 801261c:	4805      	ldr	r0, [pc, #20]	@ (8012634 <CDC_Init_FS+0x20>)
 801261e:	f7fa ffa9 	bl	800d574 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012622:	4905      	ldr	r1, [pc, #20]	@ (8012638 <CDC_Init_FS+0x24>)
 8012624:	4803      	ldr	r0, [pc, #12]	@ (8012634 <CDC_Init_FS+0x20>)
 8012626:	f7fa ffc7 	bl	800d5b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801262a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801262c:	4618      	mov	r0, r3
 801262e:	bd80      	pop	{r7, pc}
 8012630:	20022364 	.word	0x20022364
 8012634:	20021888 	.word	0x20021888
 8012638:	20021b64 	.word	0x20021b64

0801263c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801263c:	b480      	push	{r7}
 801263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012640:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012642:	4618      	mov	r0, r3
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr

0801264c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801264c:	b480      	push	{r7}
 801264e:	b083      	sub	sp, #12
 8012650:	af00      	add	r7, sp, #0
 8012652:	4603      	mov	r3, r0
 8012654:	6039      	str	r1, [r7, #0]
 8012656:	71fb      	strb	r3, [r7, #7]
 8012658:	4613      	mov	r3, r2
 801265a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801265c:	79fb      	ldrb	r3, [r7, #7]
 801265e:	2b23      	cmp	r3, #35	@ 0x23
 8012660:	d84a      	bhi.n	80126f8 <CDC_Control_FS+0xac>
 8012662:	a201      	add	r2, pc, #4	@ (adr r2, 8012668 <CDC_Control_FS+0x1c>)
 8012664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012668:	080126f9 	.word	0x080126f9
 801266c:	080126f9 	.word	0x080126f9
 8012670:	080126f9 	.word	0x080126f9
 8012674:	080126f9 	.word	0x080126f9
 8012678:	080126f9 	.word	0x080126f9
 801267c:	080126f9 	.word	0x080126f9
 8012680:	080126f9 	.word	0x080126f9
 8012684:	080126f9 	.word	0x080126f9
 8012688:	080126f9 	.word	0x080126f9
 801268c:	080126f9 	.word	0x080126f9
 8012690:	080126f9 	.word	0x080126f9
 8012694:	080126f9 	.word	0x080126f9
 8012698:	080126f9 	.word	0x080126f9
 801269c:	080126f9 	.word	0x080126f9
 80126a0:	080126f9 	.word	0x080126f9
 80126a4:	080126f9 	.word	0x080126f9
 80126a8:	080126f9 	.word	0x080126f9
 80126ac:	080126f9 	.word	0x080126f9
 80126b0:	080126f9 	.word	0x080126f9
 80126b4:	080126f9 	.word	0x080126f9
 80126b8:	080126f9 	.word	0x080126f9
 80126bc:	080126f9 	.word	0x080126f9
 80126c0:	080126f9 	.word	0x080126f9
 80126c4:	080126f9 	.word	0x080126f9
 80126c8:	080126f9 	.word	0x080126f9
 80126cc:	080126f9 	.word	0x080126f9
 80126d0:	080126f9 	.word	0x080126f9
 80126d4:	080126f9 	.word	0x080126f9
 80126d8:	080126f9 	.word	0x080126f9
 80126dc:	080126f9 	.word	0x080126f9
 80126e0:	080126f9 	.word	0x080126f9
 80126e4:	080126f9 	.word	0x080126f9
 80126e8:	080126f9 	.word	0x080126f9
 80126ec:	080126f9 	.word	0x080126f9
 80126f0:	080126f9 	.word	0x080126f9
 80126f4:	080126f9 	.word	0x080126f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80126f8:	bf00      	nop
  }

  return (USBD_OK);
 80126fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	370c      	adds	r7, #12
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr

08012708 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b084      	sub	sp, #16
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	osStatus_t res1 = osOK, res2 = osOK;
 8012712:	2300      	movs	r3, #0
 8012714:	60fb      	str	r3, [r7, #12]
 8012716:	2300      	movs	r3, #0
 8012718:	60bb      	str	r3, [r7, #8]
		for(int ii =0;ii<(*Len);ii++)
			kappa("%02x", Buf[ii]);
		kappa("]\r\n");
	#endif

	res1 = Queue_put(&USB_msgs, Buf, (*Len));
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	b2db      	uxtb	r3, r3
 8012720:	461a      	mov	r2, r3
 8012722:	6879      	ldr	r1, [r7, #4]
 8012724:	480d      	ldr	r0, [pc, #52]	@ (801275c <CDC_Receive_FS+0x54>)
 8012726:	f7ef f995 	bl	8001a54 <Queue_put>
 801272a:	60f8      	str	r0, [r7, #12]
	res2 = osSemaphoreRelease(sem_usbHandle);
 801272c:	4b0c      	ldr	r3, [pc, #48]	@ (8012760 <CDC_Receive_FS+0x58>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4618      	mov	r0, r3
 8012732:	f7fc fcd5 	bl	800f0e0 <osSemaphoreRelease>
 8012736:	60b8      	str	r0, [r7, #8]
		res = osSemaphoreRelease(sem_usbHandle);
		if(res!=osOK)
			return (USBD_FAIL);
	}*/

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8012738:	6879      	ldr	r1, [r7, #4]
 801273a:	480a      	ldr	r0, [pc, #40]	@ (8012764 <CDC_Receive_FS+0x5c>)
 801273c:	f7fa ff3c 	bl	800d5b8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012740:	4808      	ldr	r0, [pc, #32]	@ (8012764 <CDC_Receive_FS+0x5c>)
 8012742:	f7fa ff97 	bl	800d674 <USBD_CDC_ReceivePacket>
	return (USBD_OK | res1 | res2);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	b25a      	sxtb	r2, r3
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	b25b      	sxtb	r3, r3
 801274e:	4313      	orrs	r3, r2
 8012750:	b25b      	sxtb	r3, r3
  /* USER CODE END 6 */
}
 8012752:	4618      	mov	r0, r3
 8012754:	3710      	adds	r7, #16
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	20000b90 	.word	0x20000b90
 8012760:	20000ad0 	.word	0x20000ad0
 8012764:	20021888 	.word	0x20021888

08012768 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	460b      	mov	r3, r1
 8012772:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012774:	2300      	movs	r3, #0
 8012776:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012778:	4b0d      	ldr	r3, [pc, #52]	@ (80127b0 <CDC_Transmit_FS+0x48>)
 801277a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801277e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012786:	2b00      	cmp	r3, #0
 8012788:	d001      	beq.n	801278e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801278a:	2301      	movs	r3, #1
 801278c:	e00b      	b.n	80127a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801278e:	887b      	ldrh	r3, [r7, #2]
 8012790:	461a      	mov	r2, r3
 8012792:	6879      	ldr	r1, [r7, #4]
 8012794:	4806      	ldr	r0, [pc, #24]	@ (80127b0 <CDC_Transmit_FS+0x48>)
 8012796:	f7fa feed 	bl	800d574 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801279a:	4805      	ldr	r0, [pc, #20]	@ (80127b0 <CDC_Transmit_FS+0x48>)
 801279c:	f7fa ff2a 	bl	800d5f4 <USBD_CDC_TransmitPacket>
 80127a0:	4603      	mov	r3, r0
 80127a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80127a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3710      	adds	r7, #16
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	20021888 	.word	0x20021888

080127b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80127b4:	b480      	push	{r7}
 80127b6:	b087      	sub	sp, #28
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	60f8      	str	r0, [r7, #12]
 80127bc:	60b9      	str	r1, [r7, #8]
 80127be:	4613      	mov	r3, r2
 80127c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80127c2:	2300      	movs	r3, #0
 80127c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80127c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	371c      	adds	r7, #28
 80127ce:	46bd      	mov	sp, r7
 80127d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d4:	4770      	bx	lr
	...

080127d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80127d8:	b480      	push	{r7}
 80127da:	b083      	sub	sp, #12
 80127dc:	af00      	add	r7, sp, #0
 80127de:	4603      	mov	r3, r0
 80127e0:	6039      	str	r1, [r7, #0]
 80127e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	2212      	movs	r2, #18
 80127e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80127ea:	4b03      	ldr	r3, [pc, #12]	@ (80127f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	370c      	adds	r7, #12
 80127f0:	46bd      	mov	sp, r7
 80127f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f6:	4770      	bx	lr
 80127f8:	200000f4 	.word	0x200000f4

080127fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80127fc:	b480      	push	{r7}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
 8012802:	4603      	mov	r3, r0
 8012804:	6039      	str	r1, [r7, #0]
 8012806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	2204      	movs	r2, #4
 801280c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801280e:	4b03      	ldr	r3, [pc, #12]	@ (801281c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012810:	4618      	mov	r0, r3
 8012812:	370c      	adds	r7, #12
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr
 801281c:	20000114 	.word	0x20000114

08012820 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
 8012826:	4603      	mov	r3, r0
 8012828:	6039      	str	r1, [r7, #0]
 801282a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801282c:	79fb      	ldrb	r3, [r7, #7]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d105      	bne.n	801283e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012832:	683a      	ldr	r2, [r7, #0]
 8012834:	4907      	ldr	r1, [pc, #28]	@ (8012854 <USBD_FS_ProductStrDescriptor+0x34>)
 8012836:	4808      	ldr	r0, [pc, #32]	@ (8012858 <USBD_FS_ProductStrDescriptor+0x38>)
 8012838:	f7fc f900 	bl	800ea3c <USBD_GetString>
 801283c:	e004      	b.n	8012848 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801283e:	683a      	ldr	r2, [r7, #0]
 8012840:	4904      	ldr	r1, [pc, #16]	@ (8012854 <USBD_FS_ProductStrDescriptor+0x34>)
 8012842:	4805      	ldr	r0, [pc, #20]	@ (8012858 <USBD_FS_ProductStrDescriptor+0x38>)
 8012844:	f7fc f8fa 	bl	800ea3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012848:	4b02      	ldr	r3, [pc, #8]	@ (8012854 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801284a:	4618      	mov	r0, r3
 801284c:	3708      	adds	r7, #8
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
 8012852:	bf00      	nop
 8012854:	20022b64 	.word	0x20022b64
 8012858:	0801b46c 	.word	0x0801b46c

0801285c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	4603      	mov	r3, r0
 8012864:	6039      	str	r1, [r7, #0]
 8012866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012868:	683a      	ldr	r2, [r7, #0]
 801286a:	4904      	ldr	r1, [pc, #16]	@ (801287c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801286c:	4804      	ldr	r0, [pc, #16]	@ (8012880 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801286e:	f7fc f8e5 	bl	800ea3c <USBD_GetString>
  return USBD_StrDesc;
 8012872:	4b02      	ldr	r3, [pc, #8]	@ (801287c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012874:	4618      	mov	r0, r3
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}
 801287c:	20022b64 	.word	0x20022b64
 8012880:	0801b484 	.word	0x0801b484

08012884 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
 801288a:	4603      	mov	r3, r0
 801288c:	6039      	str	r1, [r7, #0]
 801288e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	221a      	movs	r2, #26
 8012894:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012896:	f000 f855 	bl	8012944 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801289a:	4b02      	ldr	r3, [pc, #8]	@ (80128a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801289c:	4618      	mov	r0, r3
 801289e:	3708      	adds	r7, #8
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	20000118 	.word	0x20000118

080128a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	4603      	mov	r3, r0
 80128b0:	6039      	str	r1, [r7, #0]
 80128b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80128b4:	79fb      	ldrb	r3, [r7, #7]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d105      	bne.n	80128c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80128ba:	683a      	ldr	r2, [r7, #0]
 80128bc:	4907      	ldr	r1, [pc, #28]	@ (80128dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80128be:	4808      	ldr	r0, [pc, #32]	@ (80128e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80128c0:	f7fc f8bc 	bl	800ea3c <USBD_GetString>
 80128c4:	e004      	b.n	80128d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80128c6:	683a      	ldr	r2, [r7, #0]
 80128c8:	4904      	ldr	r1, [pc, #16]	@ (80128dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80128ca:	4805      	ldr	r0, [pc, #20]	@ (80128e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80128cc:	f7fc f8b6 	bl	800ea3c <USBD_GetString>
  }
  return USBD_StrDesc;
 80128d0:	4b02      	ldr	r3, [pc, #8]	@ (80128dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3708      	adds	r7, #8
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	20022b64 	.word	0x20022b64
 80128e0:	0801b498 	.word	0x0801b498

080128e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	4603      	mov	r3, r0
 80128ec:	6039      	str	r1, [r7, #0]
 80128ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80128f0:	79fb      	ldrb	r3, [r7, #7]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d105      	bne.n	8012902 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80128f6:	683a      	ldr	r2, [r7, #0]
 80128f8:	4907      	ldr	r1, [pc, #28]	@ (8012918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80128fa:	4808      	ldr	r0, [pc, #32]	@ (801291c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80128fc:	f7fc f89e 	bl	800ea3c <USBD_GetString>
 8012900:	e004      	b.n	801290c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012902:	683a      	ldr	r2, [r7, #0]
 8012904:	4904      	ldr	r1, [pc, #16]	@ (8012918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012906:	4805      	ldr	r0, [pc, #20]	@ (801291c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012908:	f7fc f898 	bl	800ea3c <USBD_GetString>
  }
  return USBD_StrDesc;
 801290c:	4b02      	ldr	r3, [pc, #8]	@ (8012918 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801290e:	4618      	mov	r0, r3
 8012910:	3708      	adds	r7, #8
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	20022b64 	.word	0x20022b64
 801291c:	0801b4a4 	.word	0x0801b4a4

08012920 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012920:	b480      	push	{r7}
 8012922:	b083      	sub	sp, #12
 8012924:	af00      	add	r7, sp, #0
 8012926:	4603      	mov	r3, r0
 8012928:	6039      	str	r1, [r7, #0]
 801292a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	220c      	movs	r2, #12
 8012930:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012932:	4b03      	ldr	r3, [pc, #12]	@ (8012940 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012934:	4618      	mov	r0, r3
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr
 8012940:	20000108 	.word	0x20000108

08012944 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b084      	sub	sp, #16
 8012948:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801294a:	4b0f      	ldr	r3, [pc, #60]	@ (8012988 <Get_SerialNum+0x44>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012950:	4b0e      	ldr	r3, [pc, #56]	@ (801298c <Get_SerialNum+0x48>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012956:	4b0e      	ldr	r3, [pc, #56]	@ (8012990 <Get_SerialNum+0x4c>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801295c:	68fa      	ldr	r2, [r7, #12]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4413      	add	r3, r2
 8012962:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d009      	beq.n	801297e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801296a:	2208      	movs	r2, #8
 801296c:	4909      	ldr	r1, [pc, #36]	@ (8012994 <Get_SerialNum+0x50>)
 801296e:	68f8      	ldr	r0, [r7, #12]
 8012970:	f000 f814 	bl	801299c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012974:	2204      	movs	r2, #4
 8012976:	4908      	ldr	r1, [pc, #32]	@ (8012998 <Get_SerialNum+0x54>)
 8012978:	68b8      	ldr	r0, [r7, #8]
 801297a:	f000 f80f 	bl	801299c <IntToUnicode>
  }
}
 801297e:	bf00      	nop
 8012980:	3710      	adds	r7, #16
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
 8012986:	bf00      	nop
 8012988:	1fff7590 	.word	0x1fff7590
 801298c:	1fff7594 	.word	0x1fff7594
 8012990:	1fff7598 	.word	0x1fff7598
 8012994:	2000011a 	.word	0x2000011a
 8012998:	2000012a 	.word	0x2000012a

0801299c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801299c:	b480      	push	{r7}
 801299e:	b087      	sub	sp, #28
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	60f8      	str	r0, [r7, #12]
 80129a4:	60b9      	str	r1, [r7, #8]
 80129a6:	4613      	mov	r3, r2
 80129a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80129aa:	2300      	movs	r3, #0
 80129ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80129ae:	2300      	movs	r3, #0
 80129b0:	75fb      	strb	r3, [r7, #23]
 80129b2:	e027      	b.n	8012a04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	0f1b      	lsrs	r3, r3, #28
 80129b8:	2b09      	cmp	r3, #9
 80129ba:	d80b      	bhi.n	80129d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	0f1b      	lsrs	r3, r3, #28
 80129c0:	b2da      	uxtb	r2, r3
 80129c2:	7dfb      	ldrb	r3, [r7, #23]
 80129c4:	005b      	lsls	r3, r3, #1
 80129c6:	4619      	mov	r1, r3
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	440b      	add	r3, r1
 80129cc:	3230      	adds	r2, #48	@ 0x30
 80129ce:	b2d2      	uxtb	r2, r2
 80129d0:	701a      	strb	r2, [r3, #0]
 80129d2:	e00a      	b.n	80129ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	0f1b      	lsrs	r3, r3, #28
 80129d8:	b2da      	uxtb	r2, r3
 80129da:	7dfb      	ldrb	r3, [r7, #23]
 80129dc:	005b      	lsls	r3, r3, #1
 80129de:	4619      	mov	r1, r3
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	440b      	add	r3, r1
 80129e4:	3237      	adds	r2, #55	@ 0x37
 80129e6:	b2d2      	uxtb	r2, r2
 80129e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	011b      	lsls	r3, r3, #4
 80129ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80129f0:	7dfb      	ldrb	r3, [r7, #23]
 80129f2:	005b      	lsls	r3, r3, #1
 80129f4:	3301      	adds	r3, #1
 80129f6:	68ba      	ldr	r2, [r7, #8]
 80129f8:	4413      	add	r3, r2
 80129fa:	2200      	movs	r2, #0
 80129fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80129fe:	7dfb      	ldrb	r3, [r7, #23]
 8012a00:	3301      	adds	r3, #1
 8012a02:	75fb      	strb	r3, [r7, #23]
 8012a04:	7dfa      	ldrb	r2, [r7, #23]
 8012a06:	79fb      	ldrb	r3, [r7, #7]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	d3d3      	bcc.n	80129b4 <IntToUnicode+0x18>
  }
}
 8012a0c:	bf00      	nop
 8012a0e:	bf00      	nop
 8012a10:	371c      	adds	r7, #28
 8012a12:	46bd      	mov	sp, r7
 8012a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a18:	4770      	bx	lr
	...

08012a1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b0a4      	sub	sp, #144	@ 0x90
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a24:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8012a28:	2200      	movs	r2, #0
 8012a2a:	601a      	str	r2, [r3, #0]
 8012a2c:	605a      	str	r2, [r3, #4]
 8012a2e:	609a      	str	r2, [r3, #8]
 8012a30:	60da      	str	r2, [r3, #12]
 8012a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012a34:	f107 0314 	add.w	r3, r7, #20
 8012a38:	2268      	movs	r2, #104	@ 0x68
 8012a3a:	2100      	movs	r1, #0
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f002 fe43 	bl	80156c8 <memset>
  if(pcdHandle->Instance==USB)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	4a26      	ldr	r2, [pc, #152]	@ (8012ae0 <HAL_PCD_MspInit+0xc4>)
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d144      	bne.n	8012ad6 <HAL_PCD_MspInit+0xba>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012a50:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012a52:	2300      	movs	r3, #0
 8012a54:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012a56:	f107 0314 	add.w	r3, r7, #20
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f7f4 f9dc 	bl	8006e18 <HAL_RCCEx_PeriphCLKConfig>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d001      	beq.n	8012a6a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8012a66:	f7f0 f89f 	bl	8002ba8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8012ae4 <HAL_PCD_MspInit+0xc8>)
 8012a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8012ae4 <HAL_PCD_MspInit+0xc8>)
 8012a70:	f043 0301 	orr.w	r3, r3, #1
 8012a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012a76:	4b1b      	ldr	r3, [pc, #108]	@ (8012ae4 <HAL_PCD_MspInit+0xc8>)
 8012a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a7a:	f003 0301 	and.w	r3, r3, #1
 8012a7e:	613b      	str	r3, [r7, #16]
 8012a80:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012a82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a88:	2302      	movs	r3, #2
 8012a8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a94:	2303      	movs	r3, #3
 8012a96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8012a9a:	230a      	movs	r3, #10
 8012a9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012aa0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8012aaa:	f7f1 fb0b 	bl	80040c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012aae:	4b0d      	ldr	r3, [pc, #52]	@ (8012ae4 <HAL_PCD_MspInit+0xc8>)
 8012ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8012ae4 <HAL_PCD_MspInit+0xc8>)
 8012ab4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8012aba:	4b0a      	ldr	r3, [pc, #40]	@ (8012ae4 <HAL_PCD_MspInit+0xc8>)
 8012abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012abe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012ac2:	60fb      	str	r3, [r7, #12]
 8012ac4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 6, 0);
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	2106      	movs	r1, #6
 8012aca:	2043      	movs	r0, #67	@ 0x43
 8012acc:	f7f0 fe07 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8012ad0:	2043      	movs	r0, #67	@ 0x43
 8012ad2:	f7f0 fe20 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012ad6:	bf00      	nop
 8012ad8:	3790      	adds	r7, #144	@ 0x90
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	40006800 	.word	0x40006800
 8012ae4:	40021000 	.word	0x40021000

08012ae8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f8d3 22f4 	ldr.w	r2, [r3, #756]	@ 0x2f4
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8012afc:	4619      	mov	r1, r3
 8012afe:	4610      	mov	r0, r2
 8012b00:	f7fa fea1 	bl	800d846 <USBD_LL_SetupStage>
}
 8012b04:	bf00      	nop
 8012b06:	3708      	adds	r7, #8
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	460b      	mov	r3, r1
 8012b16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f8d3 02f4 	ldr.w	r0, [r3, #756]	@ 0x2f4
 8012b1e:	78fa      	ldrb	r2, [r7, #3]
 8012b20:	6879      	ldr	r1, [r7, #4]
 8012b22:	4613      	mov	r3, r2
 8012b24:	009b      	lsls	r3, r3, #2
 8012b26:	4413      	add	r3, r2
 8012b28:	00db      	lsls	r3, r3, #3
 8012b2a:	440b      	add	r3, r1
 8012b2c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	78fb      	ldrb	r3, [r7, #3]
 8012b34:	4619      	mov	r1, r3
 8012b36:	f7fa fedb 	bl	800d8f0 <USBD_LL_DataOutStage>
}
 8012b3a:	bf00      	nop
 8012b3c:	3708      	adds	r7, #8
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}

08012b42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b42:	b580      	push	{r7, lr}
 8012b44:	b082      	sub	sp, #8
 8012b46:	af00      	add	r7, sp, #0
 8012b48:	6078      	str	r0, [r7, #4]
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8d3 02f4 	ldr.w	r0, [r3, #756]	@ 0x2f4
 8012b54:	78fa      	ldrb	r2, [r7, #3]
 8012b56:	6879      	ldr	r1, [r7, #4]
 8012b58:	4613      	mov	r3, r2
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	4413      	add	r3, r2
 8012b5e:	00db      	lsls	r3, r3, #3
 8012b60:	440b      	add	r3, r1
 8012b62:	333c      	adds	r3, #60	@ 0x3c
 8012b64:	681a      	ldr	r2, [r3, #0]
 8012b66:	78fb      	ldrb	r3, [r7, #3]
 8012b68:	4619      	mov	r1, r3
 8012b6a:	f7fa ff74 	bl	800da56 <USBD_LL_DataInStage>
}
 8012b6e:	bf00      	nop
 8012b70:	3708      	adds	r7, #8
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}

08012b76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b082      	sub	sp, #8
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7fb f8ae 	bl	800dce6 <USBD_LL_SOF>
}
 8012b8a:	bf00      	nop
 8012b8c:	3708      	adds	r7, #8
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}

08012b92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b92:	b580      	push	{r7, lr}
 8012b94:	b084      	sub	sp, #16
 8012b96:	af00      	add	r7, sp, #0
 8012b98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	689b      	ldr	r3, [r3, #8]
 8012ba2:	2b02      	cmp	r3, #2
 8012ba4:	d001      	beq.n	8012baa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012ba6:	f7ef ffff 	bl	8002ba8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8012bb0:	7bfa      	ldrb	r2, [r7, #15]
 8012bb2:	4611      	mov	r1, r2
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7fb f852 	bl	800dc5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7fa fffa 	bl	800dbba <USBD_LL_Reset>
}
 8012bc6:	bf00      	nop
 8012bc8:	3710      	adds	r7, #16
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
	...

08012bd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7fb f84d 	bl	800dc7e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	699b      	ldr	r3, [r3, #24]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d005      	beq.n	8012bf8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012bec:	4b04      	ldr	r3, [pc, #16]	@ (8012c00 <HAL_PCD_SuspendCallback+0x30>)
 8012bee:	691b      	ldr	r3, [r3, #16]
 8012bf0:	4a03      	ldr	r2, [pc, #12]	@ (8012c00 <HAL_PCD_SuspendCallback+0x30>)
 8012bf2:	f043 0306 	orr.w	r3, r3, #6
 8012bf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012bf8:	bf00      	nop
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	e000ed00 	.word	0xe000ed00

08012c04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	699b      	ldr	r3, [r3, #24]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d007      	beq.n	8012c24 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012c14:	4b08      	ldr	r3, [pc, #32]	@ (8012c38 <HAL_PCD_ResumeCallback+0x34>)
 8012c16:	691b      	ldr	r3, [r3, #16]
 8012c18:	4a07      	ldr	r2, [pc, #28]	@ (8012c38 <HAL_PCD_ResumeCallback+0x34>)
 8012c1a:	f023 0306 	bic.w	r3, r3, #6
 8012c1e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012c20:	f000 fab6 	bl	8013190 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fb f843 	bl	800dcb6 <USBD_LL_Resume>
}
 8012c30:	bf00      	nop
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	e000ed00 	.word	0xe000ed00

08012c3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8012c44:	f7f3 fa28 	bl	8006098 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012c48:	4a2b      	ldr	r2, [pc, #172]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8c2 32f4 	str.w	r3, [r2, #756]	@ 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	4a29      	ldr	r2, [pc, #164]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c54:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_FS.Instance = USB;
 8012c58:	4b27      	ldr	r3, [pc, #156]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c5a:	4a28      	ldr	r2, [pc, #160]	@ (8012cfc <USBD_LL_Init+0xc0>)
 8012c5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012c5e:	4b26      	ldr	r3, [pc, #152]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c60:	2208      	movs	r2, #8
 8012c62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012c64:	4b24      	ldr	r3, [pc, #144]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c66:	2202      	movs	r2, #2
 8012c68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012c6a:	4b23      	ldr	r3, [pc, #140]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c6c:	2202      	movs	r2, #2
 8012c6e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012c70:	4b21      	ldr	r3, [pc, #132]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c72:	2200      	movs	r2, #0
 8012c74:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012c76:	4b20      	ldr	r3, [pc, #128]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c78:	2200      	movs	r2, #0
 8012c7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c7e:	2200      	movs	r2, #0
 8012c80:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012c82:	4b1d      	ldr	r3, [pc, #116]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c84:	2200      	movs	r2, #0
 8012c86:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012c88:	481b      	ldr	r0, [pc, #108]	@ (8012cf8 <USBD_LL_Init+0xbc>)
 8012c8a:	f7f1 fbdf 	bl	800444c <HAL_PCD_Init>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d001      	beq.n	8012c98 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012c94:	f7ef ff88 	bl	8002ba8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012c9e:	2318      	movs	r3, #24
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	2100      	movs	r1, #0
 8012ca4:	f7f3 f8e2 	bl	8005e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012cae:	2358      	movs	r3, #88	@ 0x58
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	2180      	movs	r1, #128	@ 0x80
 8012cb4:	f7f3 f8da 	bl	8005e6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012cbe:	23c0      	movs	r3, #192	@ 0xc0
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	2181      	movs	r1, #129	@ 0x81
 8012cc4:	f7f3 f8d2 	bl	8005e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012cce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	2101      	movs	r1, #1
 8012cd6:	f7f3 f8c9 	bl	8005e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	2182      	movs	r1, #130	@ 0x82
 8012ce8:	f7f3 f8c0 	bl	8005e6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3708      	adds	r7, #8
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	20022d64 	.word	0x20022d64
 8012cfc:	40006800 	.word	0x40006800

08012d00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b084      	sub	sp, #16
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7f1 fc9e 	bl	8004658 <HAL_PCD_Start>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012d20:	7bbb      	ldrb	r3, [r7, #14]
 8012d22:	2b03      	cmp	r3, #3
 8012d24:	d816      	bhi.n	8012d54 <USBD_LL_Start+0x54>
 8012d26:	a201      	add	r2, pc, #4	@ (adr r2, 8012d2c <USBD_LL_Start+0x2c>)
 8012d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d2c:	08012d3d 	.word	0x08012d3d
 8012d30:	08012d43 	.word	0x08012d43
 8012d34:	08012d49 	.word	0x08012d49
 8012d38:	08012d4f 	.word	0x08012d4f
    case HAL_OK :
      usb_status = USBD_OK;
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8012d40:	e00b      	b.n	8012d5a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012d42:	2303      	movs	r3, #3
 8012d44:	73fb      	strb	r3, [r7, #15]
    break;
 8012d46:	e008      	b.n	8012d5a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8012d4c:	e005      	b.n	8012d5a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012d4e:	2303      	movs	r3, #3
 8012d50:	73fb      	strb	r3, [r7, #15]
    break;
 8012d52:	e002      	b.n	8012d5a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8012d54:	2303      	movs	r3, #3
 8012d56:	73fb      	strb	r3, [r7, #15]
    break;
 8012d58:	bf00      	nop
  }
  return usb_status;
 8012d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3710      	adds	r7, #16
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	4608      	mov	r0, r1
 8012d6e:	4611      	mov	r1, r2
 8012d70:	461a      	mov	r2, r3
 8012d72:	4603      	mov	r3, r0
 8012d74:	70fb      	strb	r3, [r7, #3]
 8012d76:	460b      	mov	r3, r1
 8012d78:	70bb      	strb	r3, [r7, #2]
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d82:	2300      	movs	r3, #0
 8012d84:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012d8c:	78bb      	ldrb	r3, [r7, #2]
 8012d8e:	883a      	ldrh	r2, [r7, #0]
 8012d90:	78f9      	ldrb	r1, [r7, #3]
 8012d92:	f7f1 fdcf 	bl	8004934 <HAL_PCD_EP_Open>
 8012d96:	4603      	mov	r3, r0
 8012d98:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012d9a:	7bbb      	ldrb	r3, [r7, #14]
 8012d9c:	2b03      	cmp	r3, #3
 8012d9e:	d817      	bhi.n	8012dd0 <USBD_LL_OpenEP+0x6c>
 8012da0:	a201      	add	r2, pc, #4	@ (adr r2, 8012da8 <USBD_LL_OpenEP+0x44>)
 8012da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012da6:	bf00      	nop
 8012da8:	08012db9 	.word	0x08012db9
 8012dac:	08012dbf 	.word	0x08012dbf
 8012db0:	08012dc5 	.word	0x08012dc5
 8012db4:	08012dcb 	.word	0x08012dcb
    case HAL_OK :
      usb_status = USBD_OK;
 8012db8:	2300      	movs	r3, #0
 8012dba:	73fb      	strb	r3, [r7, #15]
    break;
 8012dbc:	e00b      	b.n	8012dd6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012dbe:	2303      	movs	r3, #3
 8012dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8012dc2:	e008      	b.n	8012dd6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8012dc8:	e005      	b.n	8012dd6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012dca:	2303      	movs	r3, #3
 8012dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8012dce:	e002      	b.n	8012dd6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8012dd0:	2303      	movs	r3, #3
 8012dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8012dd4:	bf00      	nop
  }
  return usb_status;
 8012dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3710      	adds	r7, #16
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	460b      	mov	r3, r1
 8012dea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012dec:	2300      	movs	r3, #0
 8012dee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012df0:	2300      	movs	r3, #0
 8012df2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012dfa:	78fa      	ldrb	r2, [r7, #3]
 8012dfc:	4611      	mov	r1, r2
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7f1 fdf5 	bl	80049ee <HAL_PCD_EP_Close>
 8012e04:	4603      	mov	r3, r0
 8012e06:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012e08:	7bbb      	ldrb	r3, [r7, #14]
 8012e0a:	2b03      	cmp	r3, #3
 8012e0c:	d816      	bhi.n	8012e3c <USBD_LL_CloseEP+0x5c>
 8012e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8012e14 <USBD_LL_CloseEP+0x34>)
 8012e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e14:	08012e25 	.word	0x08012e25
 8012e18:	08012e2b 	.word	0x08012e2b
 8012e1c:	08012e31 	.word	0x08012e31
 8012e20:	08012e37 	.word	0x08012e37
    case HAL_OK :
      usb_status = USBD_OK;
 8012e24:	2300      	movs	r3, #0
 8012e26:	73fb      	strb	r3, [r7, #15]
    break;
 8012e28:	e00b      	b.n	8012e42 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012e2a:	2303      	movs	r3, #3
 8012e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8012e2e:	e008      	b.n	8012e42 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012e30:	2301      	movs	r3, #1
 8012e32:	73fb      	strb	r3, [r7, #15]
    break;
 8012e34:	e005      	b.n	8012e42 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012e36:	2303      	movs	r3, #3
 8012e38:	73fb      	strb	r3, [r7, #15]
    break;
 8012e3a:	e002      	b.n	8012e42 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012e3c:	2303      	movs	r3, #3
 8012e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8012e40:	bf00      	nop
  }
  return usb_status;
 8012e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3710      	adds	r7, #16
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b084      	sub	sp, #16
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	460b      	mov	r3, r1
 8012e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012e66:	78fa      	ldrb	r2, [r7, #3]
 8012e68:	4611      	mov	r1, r2
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7f1 fe87 	bl	8004b7e <HAL_PCD_EP_SetStall>
 8012e70:	4603      	mov	r3, r0
 8012e72:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012e74:	7bbb      	ldrb	r3, [r7, #14]
 8012e76:	2b03      	cmp	r3, #3
 8012e78:	d816      	bhi.n	8012ea8 <USBD_LL_StallEP+0x5c>
 8012e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8012e80 <USBD_LL_StallEP+0x34>)
 8012e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e80:	08012e91 	.word	0x08012e91
 8012e84:	08012e97 	.word	0x08012e97
 8012e88:	08012e9d 	.word	0x08012e9d
 8012e8c:	08012ea3 	.word	0x08012ea3
    case HAL_OK :
      usb_status = USBD_OK;
 8012e90:	2300      	movs	r3, #0
 8012e92:	73fb      	strb	r3, [r7, #15]
    break;
 8012e94:	e00b      	b.n	8012eae <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012e96:	2303      	movs	r3, #3
 8012e98:	73fb      	strb	r3, [r7, #15]
    break;
 8012e9a:	e008      	b.n	8012eae <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012e9c:	2301      	movs	r3, #1
 8012e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8012ea0:	e005      	b.n	8012eae <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012ea2:	2303      	movs	r3, #3
 8012ea4:	73fb      	strb	r3, [r7, #15]
    break;
 8012ea6:	e002      	b.n	8012eae <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012ea8:	2303      	movs	r3, #3
 8012eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8012eac:	bf00      	nop
  }
  return usb_status;
 8012eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3710      	adds	r7, #16
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012ed2:	78fa      	ldrb	r2, [r7, #3]
 8012ed4:	4611      	mov	r1, r2
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7f1 feb1 	bl	8004c3e <HAL_PCD_EP_ClrStall>
 8012edc:	4603      	mov	r3, r0
 8012ede:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012ee0:	7bbb      	ldrb	r3, [r7, #14]
 8012ee2:	2b03      	cmp	r3, #3
 8012ee4:	d816      	bhi.n	8012f14 <USBD_LL_ClearStallEP+0x5c>
 8012ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8012eec <USBD_LL_ClearStallEP+0x34>)
 8012ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eec:	08012efd 	.word	0x08012efd
 8012ef0:	08012f03 	.word	0x08012f03
 8012ef4:	08012f09 	.word	0x08012f09
 8012ef8:	08012f0f 	.word	0x08012f0f
    case HAL_OK :
      usb_status = USBD_OK;
 8012efc:	2300      	movs	r3, #0
 8012efe:	73fb      	strb	r3, [r7, #15]
    break;
 8012f00:	e00b      	b.n	8012f1a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012f02:	2303      	movs	r3, #3
 8012f04:	73fb      	strb	r3, [r7, #15]
    break;
 8012f06:	e008      	b.n	8012f1a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012f08:	2301      	movs	r3, #1
 8012f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8012f0c:	e005      	b.n	8012f1a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012f0e:	2303      	movs	r3, #3
 8012f10:	73fb      	strb	r3, [r7, #15]
    break;
 8012f12:	e002      	b.n	8012f1a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012f14:	2303      	movs	r3, #3
 8012f16:	73fb      	strb	r3, [r7, #15]
    break;
 8012f18:	bf00      	nop
  }
  return usb_status;
 8012f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3710      	adds	r7, #16
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}

08012f24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012f24:	b480      	push	{r7}
 8012f26:	b085      	sub	sp, #20
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	460b      	mov	r3, r1
 8012f2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012f36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	da0c      	bge.n	8012f5a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012f40:	78fb      	ldrb	r3, [r7, #3]
 8012f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012f46:	68f9      	ldr	r1, [r7, #12]
 8012f48:	1c5a      	adds	r2, r3, #1
 8012f4a:	4613      	mov	r3, r2
 8012f4c:	009b      	lsls	r3, r3, #2
 8012f4e:	4413      	add	r3, r2
 8012f50:	00db      	lsls	r3, r3, #3
 8012f52:	440b      	add	r3, r1
 8012f54:	3302      	adds	r3, #2
 8012f56:	781b      	ldrb	r3, [r3, #0]
 8012f58:	e00b      	b.n	8012f72 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012f5a:	78fb      	ldrb	r3, [r7, #3]
 8012f5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012f60:	68f9      	ldr	r1, [r7, #12]
 8012f62:	4613      	mov	r3, r2
 8012f64:	009b      	lsls	r3, r3, #2
 8012f66:	4413      	add	r3, r2
 8012f68:	00db      	lsls	r3, r3, #3
 8012f6a:	440b      	add	r3, r1
 8012f6c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8012f70:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3714      	adds	r7, #20
 8012f76:	46bd      	mov	sp, r7
 8012f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7c:	4770      	bx	lr
	...

08012f80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b084      	sub	sp, #16
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
 8012f88:	460b      	mov	r3, r1
 8012f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f90:	2300      	movs	r3, #0
 8012f92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012f9a:	78fa      	ldrb	r2, [r7, #3]
 8012f9c:	4611      	mov	r1, r2
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7f1 fca3 	bl	80048ea <HAL_PCD_SetAddress>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012fa8:	7bbb      	ldrb	r3, [r7, #14]
 8012faa:	2b03      	cmp	r3, #3
 8012fac:	d816      	bhi.n	8012fdc <USBD_LL_SetUSBAddress+0x5c>
 8012fae:	a201      	add	r2, pc, #4	@ (adr r2, 8012fb4 <USBD_LL_SetUSBAddress+0x34>)
 8012fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fb4:	08012fc5 	.word	0x08012fc5
 8012fb8:	08012fcb 	.word	0x08012fcb
 8012fbc:	08012fd1 	.word	0x08012fd1
 8012fc0:	08012fd7 	.word	0x08012fd7
    case HAL_OK :
      usb_status = USBD_OK;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8012fc8:	e00b      	b.n	8012fe2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012fca:	2303      	movs	r3, #3
 8012fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8012fce:	e008      	b.n	8012fe2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8012fd4:	e005      	b.n	8012fe2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012fd6:	2303      	movs	r3, #3
 8012fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8012fda:	e002      	b.n	8012fe2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8012fdc:	2303      	movs	r3, #3
 8012fde:	73fb      	strb	r3, [r7, #15]
    break;
 8012fe0:	bf00      	nop
  }
  return usb_status;
 8012fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b086      	sub	sp, #24
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	60f8      	str	r0, [r7, #12]
 8012ff4:	607a      	str	r2, [r7, #4]
 8012ff6:	603b      	str	r3, [r7, #0]
 8012ff8:	460b      	mov	r3, r1
 8012ffa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013000:	2300      	movs	r3, #0
 8013002:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801300a:	7af9      	ldrb	r1, [r7, #11]
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	f7f1 fd7e 	bl	8004b10 <HAL_PCD_EP_Transmit>
 8013014:	4603      	mov	r3, r0
 8013016:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013018:	7dbb      	ldrb	r3, [r7, #22]
 801301a:	2b03      	cmp	r3, #3
 801301c:	d816      	bhi.n	801304c <USBD_LL_Transmit+0x60>
 801301e:	a201      	add	r2, pc, #4	@ (adr r2, 8013024 <USBD_LL_Transmit+0x38>)
 8013020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013024:	08013035 	.word	0x08013035
 8013028:	0801303b 	.word	0x0801303b
 801302c:	08013041 	.word	0x08013041
 8013030:	08013047 	.word	0x08013047
    case HAL_OK :
      usb_status = USBD_OK;
 8013034:	2300      	movs	r3, #0
 8013036:	75fb      	strb	r3, [r7, #23]
    break;
 8013038:	e00b      	b.n	8013052 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801303a:	2303      	movs	r3, #3
 801303c:	75fb      	strb	r3, [r7, #23]
    break;
 801303e:	e008      	b.n	8013052 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013040:	2301      	movs	r3, #1
 8013042:	75fb      	strb	r3, [r7, #23]
    break;
 8013044:	e005      	b.n	8013052 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013046:	2303      	movs	r3, #3
 8013048:	75fb      	strb	r3, [r7, #23]
    break;
 801304a:	e002      	b.n	8013052 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801304c:	2303      	movs	r3, #3
 801304e:	75fb      	strb	r3, [r7, #23]
    break;
 8013050:	bf00      	nop
  }
  return usb_status;
 8013052:	7dfb      	ldrb	r3, [r7, #23]
}
 8013054:	4618      	mov	r0, r3
 8013056:	3718      	adds	r7, #24
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b086      	sub	sp, #24
 8013060:	af00      	add	r7, sp, #0
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	607a      	str	r2, [r7, #4]
 8013066:	603b      	str	r3, [r7, #0]
 8013068:	460b      	mov	r3, r1
 801306a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801306c:	2300      	movs	r3, #0
 801306e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013070:	2300      	movs	r3, #0
 8013072:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801307a:	7af9      	ldrb	r1, [r7, #11]
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	687a      	ldr	r2, [r7, #4]
 8013080:	f7f1 fcfd 	bl	8004a7e <HAL_PCD_EP_Receive>
 8013084:	4603      	mov	r3, r0
 8013086:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013088:	7dbb      	ldrb	r3, [r7, #22]
 801308a:	2b03      	cmp	r3, #3
 801308c:	d816      	bhi.n	80130bc <USBD_LL_PrepareReceive+0x60>
 801308e:	a201      	add	r2, pc, #4	@ (adr r2, 8013094 <USBD_LL_PrepareReceive+0x38>)
 8013090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013094:	080130a5 	.word	0x080130a5
 8013098:	080130ab 	.word	0x080130ab
 801309c:	080130b1 	.word	0x080130b1
 80130a0:	080130b7 	.word	0x080130b7
    case HAL_OK :
      usb_status = USBD_OK;
 80130a4:	2300      	movs	r3, #0
 80130a6:	75fb      	strb	r3, [r7, #23]
    break;
 80130a8:	e00b      	b.n	80130c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80130aa:	2303      	movs	r3, #3
 80130ac:	75fb      	strb	r3, [r7, #23]
    break;
 80130ae:	e008      	b.n	80130c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80130b0:	2301      	movs	r3, #1
 80130b2:	75fb      	strb	r3, [r7, #23]
    break;
 80130b4:	e005      	b.n	80130c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80130b6:	2303      	movs	r3, #3
 80130b8:	75fb      	strb	r3, [r7, #23]
    break;
 80130ba:	e002      	b.n	80130c2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80130bc:	2303      	movs	r3, #3
 80130be:	75fb      	strb	r3, [r7, #23]
    break;
 80130c0:	bf00      	nop
  }
  return usb_status;
 80130c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3718      	adds	r7, #24
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	460b      	mov	r3, r1
 80130d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80130de:	78fa      	ldrb	r2, [r7, #3]
 80130e0:	4611      	mov	r1, r2
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7f1 fcfc 	bl	8004ae0 <HAL_PCD_EP_GetRxCount>
 80130e8:	4603      	mov	r3, r0
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3708      	adds	r7, #8
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
	...

080130f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b082      	sub	sp, #8
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	460b      	mov	r3, r1
 80130fe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013100:	78fb      	ldrb	r3, [r7, #3]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d002      	beq.n	801310c <HAL_PCDEx_LPM_Callback+0x18>
 8013106:	2b01      	cmp	r3, #1
 8013108:	d013      	beq.n	8013132 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801310a:	e023      	b.n	8013154 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	699b      	ldr	r3, [r3, #24]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d007      	beq.n	8013124 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013114:	f000 f83c 	bl	8013190 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013118:	4b10      	ldr	r3, [pc, #64]	@ (801315c <HAL_PCDEx_LPM_Callback+0x68>)
 801311a:	691b      	ldr	r3, [r3, #16]
 801311c:	4a0f      	ldr	r2, [pc, #60]	@ (801315c <HAL_PCDEx_LPM_Callback+0x68>)
 801311e:	f023 0306 	bic.w	r3, r3, #6
 8013122:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 801312a:	4618      	mov	r0, r3
 801312c:	f7fa fdc3 	bl	800dcb6 <USBD_LL_Resume>
    break;
 8013130:	e010      	b.n	8013154 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8013138:	4618      	mov	r0, r3
 801313a:	f7fa fda0 	bl	800dc7e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	699b      	ldr	r3, [r3, #24]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d005      	beq.n	8013152 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013146:	4b05      	ldr	r3, [pc, #20]	@ (801315c <HAL_PCDEx_LPM_Callback+0x68>)
 8013148:	691b      	ldr	r3, [r3, #16]
 801314a:	4a04      	ldr	r2, [pc, #16]	@ (801315c <HAL_PCDEx_LPM_Callback+0x68>)
 801314c:	f043 0306 	orr.w	r3, r3, #6
 8013150:	6113      	str	r3, [r2, #16]
    break;
 8013152:	bf00      	nop
}
 8013154:	bf00      	nop
 8013156:	3708      	adds	r7, #8
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}
 801315c:	e000ed00 	.word	0xe000ed00

08013160 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013160:	b480      	push	{r7}
 8013162:	b083      	sub	sp, #12
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013168:	4b03      	ldr	r3, [pc, #12]	@ (8013178 <USBD_static_malloc+0x18>)
}
 801316a:	4618      	mov	r0, r3
 801316c:	370c      	adds	r7, #12
 801316e:	46bd      	mov	sp, r7
 8013170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013174:	4770      	bx	lr
 8013176:	bf00      	nop
 8013178:	2002305c 	.word	0x2002305c

0801317c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801317c:	b480      	push	{r7}
 801317e:	b083      	sub	sp, #12
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]

}
 8013184:	bf00      	nop
 8013186:	370c      	adds	r7, #12
 8013188:	46bd      	mov	sp, r7
 801318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318e:	4770      	bx	lr

08013190 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013194:	f7ee f9f0 	bl	8001578 <SystemClock_Config>
}
 8013198:	bf00      	nop
 801319a:	bd80      	pop	{r7, pc}

0801319c <arm_max_f32>:
 801319c:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 80131a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131a2:	4607      	mov	r7, r0
 80131a4:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80131a8:	ecf7 7a01 	vldmia	r7!, {s15}
 80131ac:	d060      	beq.n	8013270 <arm_max_f32+0xd4>
 80131ae:	2400      	movs	r4, #0
 80131b0:	3014      	adds	r0, #20
 80131b2:	4625      	mov	r5, r4
 80131b4:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80131b8:	ed10 7a04 	vldr	s14, [r0, #-16]
 80131bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c4:	bf48      	it	mi
 80131c6:	eef0 7a47 	vmovmi.f32	s15, s14
 80131ca:	ed10 7a03 	vldr	s14, [r0, #-12]
 80131ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131d2:	bf48      	it	mi
 80131d4:	1c65      	addmi	r5, r4, #1
 80131d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131da:	bf48      	it	mi
 80131dc:	eef0 7a47 	vmovmi.f32	s15, s14
 80131e0:	ed10 7a02 	vldr	s14, [r0, #-8]
 80131e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131e8:	bf48      	it	mi
 80131ea:	1ca5      	addmi	r5, r4, #2
 80131ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f0:	bf48      	it	mi
 80131f2:	eef0 7a47 	vmovmi.f32	s15, s14
 80131f6:	ed10 7a01 	vldr	s14, [r0, #-4]
 80131fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131fe:	bf48      	it	mi
 8013200:	1ce5      	addmi	r5, r4, #3
 8013202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013206:	f104 0404 	add.w	r4, r4, #4
 801320a:	bf44      	itt	mi
 801320c:	eef0 7a47 	vmovmi.f32	s15, s14
 8013210:	4625      	movmi	r5, r4
 8013212:	42a6      	cmp	r6, r4
 8013214:	f100 0010 	add.w	r0, r0, #16
 8013218:	d1ce      	bne.n	80131b8 <arm_max_f32+0x1c>
 801321a:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 801321e:	f01c 0003 	ands.w	r0, ip, #3
 8013222:	d021      	beq.n	8013268 <arm_max_f32+0xcc>
 8013224:	ed97 7a00 	vldr	s14, [r7]
 8013228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013230:	bfc4      	itt	gt
 8013232:	eef0 7a47 	vmovgt.f32	s15, s14
 8013236:	1a0d      	subgt	r5, r1, r0
 8013238:	3801      	subs	r0, #1
 801323a:	d015      	beq.n	8013268 <arm_max_f32+0xcc>
 801323c:	ed97 7a01 	vldr	s14, [r7, #4]
 8013240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013248:	bf44      	itt	mi
 801324a:	eef0 7a47 	vmovmi.f32	s15, s14
 801324e:	1a0d      	submi	r5, r1, r0
 8013250:	2801      	cmp	r0, #1
 8013252:	d009      	beq.n	8013268 <arm_max_f32+0xcc>
 8013254:	ed97 7a02 	vldr	s14, [r7, #8]
 8013258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013260:	bfc4      	itt	gt
 8013262:	eef0 7a47 	vmovgt.f32	s15, s14
 8013266:	4665      	movgt	r5, ip
 8013268:	edc2 7a00 	vstr	s15, [r2]
 801326c:	601d      	str	r5, [r3, #0]
 801326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013270:	4675      	mov	r5, lr
 8013272:	e7d4      	b.n	801321e <arm_max_f32+0x82>

08013274 <arm_rfft_32_fast_init_f32>:
 8013274:	b178      	cbz	r0, 8013296 <arm_rfft_32_fast_init_f32+0x22>
 8013276:	b430      	push	{r4, r5}
 8013278:	4908      	ldr	r1, [pc, #32]	@ (801329c <arm_rfft_32_fast_init_f32+0x28>)
 801327a:	4a09      	ldr	r2, [pc, #36]	@ (80132a0 <arm_rfft_32_fast_init_f32+0x2c>)
 801327c:	2310      	movs	r3, #16
 801327e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8013282:	8003      	strh	r3, [r0, #0]
 8013284:	2520      	movs	r5, #32
 8013286:	2414      	movs	r4, #20
 8013288:	4b06      	ldr	r3, [pc, #24]	@ (80132a4 <arm_rfft_32_fast_init_f32+0x30>)
 801328a:	8205      	strh	r5, [r0, #16]
 801328c:	8184      	strh	r4, [r0, #12]
 801328e:	6143      	str	r3, [r0, #20]
 8013290:	bc30      	pop	{r4, r5}
 8013292:	2000      	movs	r0, #0
 8013294:	4770      	bx	lr
 8013296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801329a:	4770      	bx	lr
 801329c:	0801c668 	.word	0x0801c668
 80132a0:	08020fa0 	.word	0x08020fa0
 80132a4:	08029d20 	.word	0x08029d20

080132a8 <arm_rfft_64_fast_init_f32>:
 80132a8:	b178      	cbz	r0, 80132ca <arm_rfft_64_fast_init_f32+0x22>
 80132aa:	b430      	push	{r4, r5}
 80132ac:	4908      	ldr	r1, [pc, #32]	@ (80132d0 <arm_rfft_64_fast_init_f32+0x28>)
 80132ae:	4a09      	ldr	r2, [pc, #36]	@ (80132d4 <arm_rfft_64_fast_init_f32+0x2c>)
 80132b0:	2320      	movs	r3, #32
 80132b2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80132b6:	8003      	strh	r3, [r0, #0]
 80132b8:	2540      	movs	r5, #64	@ 0x40
 80132ba:	2430      	movs	r4, #48	@ 0x30
 80132bc:	4b06      	ldr	r3, [pc, #24]	@ (80132d8 <arm_rfft_64_fast_init_f32+0x30>)
 80132be:	8205      	strh	r5, [r0, #16]
 80132c0:	8184      	strh	r4, [r0, #12]
 80132c2:	6143      	str	r3, [r0, #20]
 80132c4:	bc30      	pop	{r4, r5}
 80132c6:	2000      	movs	r0, #0
 80132c8:	4770      	bx	lr
 80132ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132ce:	4770      	bx	lr
 80132d0:	0801e7c0 	.word	0x0801e7c0
 80132d4:	08025820 	.word	0x08025820
 80132d8:	0802e5a0 	.word	0x0802e5a0

080132dc <arm_rfft_256_fast_init_f32>:
 80132dc:	b180      	cbz	r0, 8013300 <arm_rfft_256_fast_init_f32+0x24>
 80132de:	b430      	push	{r4, r5}
 80132e0:	4909      	ldr	r1, [pc, #36]	@ (8013308 <arm_rfft_256_fast_init_f32+0x2c>)
 80132e2:	4a0a      	ldr	r2, [pc, #40]	@ (801330c <arm_rfft_256_fast_init_f32+0x30>)
 80132e4:	2380      	movs	r3, #128	@ 0x80
 80132e6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80132ea:	8003      	strh	r3, [r0, #0]
 80132ec:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80132f0:	24d0      	movs	r4, #208	@ 0xd0
 80132f2:	4b07      	ldr	r3, [pc, #28]	@ (8013310 <arm_rfft_256_fast_init_f32+0x34>)
 80132f4:	8205      	strh	r5, [r0, #16]
 80132f6:	8184      	strh	r4, [r0, #12]
 80132f8:	6143      	str	r3, [r0, #20]
 80132fa:	bc30      	pop	{r4, r5}
 80132fc:	2000      	movs	r0, #0
 80132fe:	4770      	bx	lr
 8013300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013304:	4770      	bx	lr
 8013306:	bf00      	nop
 8013308:	0801c4c8 	.word	0x0801c4c8
 801330c:	08020ba0 	.word	0x08020ba0
 8013310:	08029920 	.word	0x08029920

08013314 <arm_rfft_512_fast_init_f32>:
 8013314:	b190      	cbz	r0, 801333c <arm_rfft_512_fast_init_f32+0x28>
 8013316:	b430      	push	{r4, r5}
 8013318:	490a      	ldr	r1, [pc, #40]	@ (8013344 <arm_rfft_512_fast_init_f32+0x30>)
 801331a:	4a0b      	ldr	r2, [pc, #44]	@ (8013348 <arm_rfft_512_fast_init_f32+0x34>)
 801331c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013320:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8013324:	8003      	strh	r3, [r0, #0]
 8013326:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801332a:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 801332e:	4b07      	ldr	r3, [pc, #28]	@ (801334c <arm_rfft_512_fast_init_f32+0x38>)
 8013330:	8205      	strh	r5, [r0, #16]
 8013332:	8184      	strh	r4, [r0, #12]
 8013334:	6143      	str	r3, [r0, #20]
 8013336:	bc30      	pop	{r4, r5}
 8013338:	2000      	movs	r0, #0
 801333a:	4770      	bx	lr
 801333c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013340:	4770      	bx	lr
 8013342:	bf00      	nop
 8013344:	0801e450 	.word	0x0801e450
 8013348:	08025020 	.word	0x08025020
 801334c:	0802dda0 	.word	0x0802dda0

08013350 <arm_rfft_1024_fast_init_f32>:
 8013350:	b190      	cbz	r0, 8013378 <arm_rfft_1024_fast_init_f32+0x28>
 8013352:	b430      	push	{r4, r5}
 8013354:	490a      	ldr	r1, [pc, #40]	@ (8013380 <arm_rfft_1024_fast_init_f32+0x30>)
 8013356:	4a0b      	ldr	r2, [pc, #44]	@ (8013384 <arm_rfft_1024_fast_init_f32+0x34>)
 8013358:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801335c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8013360:	8003      	strh	r3, [r0, #0]
 8013362:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8013366:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 801336a:	4b07      	ldr	r3, [pc, #28]	@ (8013388 <arm_rfft_1024_fast_init_f32+0x38>)
 801336c:	8205      	strh	r5, [r0, #16]
 801336e:	8184      	strh	r4, [r0, #12]
 8013370:	6143      	str	r3, [r0, #20]
 8013372:	bc30      	pop	{r4, r5}
 8013374:	2000      	movs	r0, #0
 8013376:	4770      	bx	lr
 8013378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801337c:	4770      	bx	lr
 801337e:	bf00      	nop
 8013380:	0801e820 	.word	0x0801e820
 8013384:	08025920 	.word	0x08025920
 8013388:	08026920 	.word	0x08026920

0801338c <arm_rfft_2048_fast_init_f32>:
 801338c:	b190      	cbz	r0, 80133b4 <arm_rfft_2048_fast_init_f32+0x28>
 801338e:	b430      	push	{r4, r5}
 8013390:	490a      	ldr	r1, [pc, #40]	@ (80133bc <arm_rfft_2048_fast_init_f32+0x30>)
 8013392:	4a0b      	ldr	r2, [pc, #44]	@ (80133c0 <arm_rfft_2048_fast_init_f32+0x34>)
 8013394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013398:	e9c0 2101 	strd	r2, r1, [r0, #4]
 801339c:	8003      	strh	r3, [r0, #0]
 801339e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80133a2:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80133a6:	4b07      	ldr	r3, [pc, #28]	@ (80133c4 <arm_rfft_2048_fast_init_f32+0x38>)
 80133a8:	8205      	strh	r5, [r0, #16]
 80133aa:	8184      	strh	r4, [r0, #12]
 80133ac:	6143      	str	r3, [r0, #20]
 80133ae:	bc30      	pop	{r4, r5}
 80133b0:	2000      	movs	r0, #0
 80133b2:	4770      	bx	lr
 80133b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80133b8:	4770      	bx	lr
 80133ba:	bf00      	nop
 80133bc:	0801b6b8 	.word	0x0801b6b8
 80133c0:	0801eba0 	.word	0x0801eba0
 80133c4:	08027920 	.word	0x08027920

080133c8 <arm_rfft_4096_fast_init_f32>:
 80133c8:	b190      	cbz	r0, 80133f0 <arm_rfft_4096_fast_init_f32+0x28>
 80133ca:	b430      	push	{r4, r5}
 80133cc:	490a      	ldr	r1, [pc, #40]	@ (80133f8 <arm_rfft_4096_fast_init_f32+0x30>)
 80133ce:	4a0b      	ldr	r2, [pc, #44]	@ (80133fc <arm_rfft_4096_fast_init_f32+0x34>)
 80133d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80133d4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80133d8:	8003      	strh	r3, [r0, #0]
 80133da:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80133de:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80133e2:	4b07      	ldr	r3, [pc, #28]	@ (8013400 <arm_rfft_4096_fast_init_f32+0x38>)
 80133e4:	8205      	strh	r5, [r0, #16]
 80133e6:	8184      	strh	r4, [r0, #12]
 80133e8:	6143      	str	r3, [r0, #20]
 80133ea:	bc30      	pop	{r4, r5}
 80133ec:	2000      	movs	r0, #0
 80133ee:	4770      	bx	lr
 80133f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80133f4:	4770      	bx	lr
 80133f6:	bf00      	nop
 80133f8:	0801c690 	.word	0x0801c690
 80133fc:	08021020 	.word	0x08021020
 8013400:	08029da0 	.word	0x08029da0

08013404 <arm_rfft_fast_init_f32>:
 8013404:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8013408:	d01f      	beq.n	801344a <arm_rfft_fast_init_f32+0x46>
 801340a:	d90b      	bls.n	8013424 <arm_rfft_fast_init_f32+0x20>
 801340c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8013410:	d019      	beq.n	8013446 <arm_rfft_fast_init_f32+0x42>
 8013412:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8013416:	d012      	beq.n	801343e <arm_rfft_fast_init_f32+0x3a>
 8013418:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801341c:	d00d      	beq.n	801343a <arm_rfft_fast_init_f32+0x36>
 801341e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013422:	4770      	bx	lr
 8013424:	2940      	cmp	r1, #64	@ 0x40
 8013426:	d00c      	beq.n	8013442 <arm_rfft_fast_init_f32+0x3e>
 8013428:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 801342c:	d003      	beq.n	8013436 <arm_rfft_fast_init_f32+0x32>
 801342e:	2920      	cmp	r1, #32
 8013430:	d1f5      	bne.n	801341e <arm_rfft_fast_init_f32+0x1a>
 8013432:	4b07      	ldr	r3, [pc, #28]	@ (8013450 <arm_rfft_fast_init_f32+0x4c>)
 8013434:	4718      	bx	r3
 8013436:	4b07      	ldr	r3, [pc, #28]	@ (8013454 <arm_rfft_fast_init_f32+0x50>)
 8013438:	4718      	bx	r3
 801343a:	4b07      	ldr	r3, [pc, #28]	@ (8013458 <arm_rfft_fast_init_f32+0x54>)
 801343c:	4718      	bx	r3
 801343e:	4b07      	ldr	r3, [pc, #28]	@ (801345c <arm_rfft_fast_init_f32+0x58>)
 8013440:	4718      	bx	r3
 8013442:	4b07      	ldr	r3, [pc, #28]	@ (8013460 <arm_rfft_fast_init_f32+0x5c>)
 8013444:	e7f6      	b.n	8013434 <arm_rfft_fast_init_f32+0x30>
 8013446:	4b07      	ldr	r3, [pc, #28]	@ (8013464 <arm_rfft_fast_init_f32+0x60>)
 8013448:	e7f4      	b.n	8013434 <arm_rfft_fast_init_f32+0x30>
 801344a:	4b07      	ldr	r3, [pc, #28]	@ (8013468 <arm_rfft_fast_init_f32+0x64>)
 801344c:	e7f2      	b.n	8013434 <arm_rfft_fast_init_f32+0x30>
 801344e:	bf00      	nop
 8013450:	08013275 	.word	0x08013275
 8013454:	080132dd 	.word	0x080132dd
 8013458:	08013351 	.word	0x08013351
 801345c:	080133c9 	.word	0x080133c9
 8013460:	080132a9 	.word	0x080132a9
 8013464:	0801338d 	.word	0x0801338d
 8013468:	08013315 	.word	0x08013315

0801346c <stage_rfft_f32>:
 801346c:	b410      	push	{r4}
 801346e:	edd1 7a00 	vldr	s15, [r1]
 8013472:	ed91 7a01 	vldr	s14, [r1, #4]
 8013476:	8804      	ldrh	r4, [r0, #0]
 8013478:	6940      	ldr	r0, [r0, #20]
 801347a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801347e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013482:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8013486:	ee77 6a87 	vadd.f32	s13, s15, s14
 801348a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801348e:	3c01      	subs	r4, #1
 8013490:	ee26 7a84 	vmul.f32	s14, s13, s8
 8013494:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013498:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 801349c:	ed82 7a00 	vstr	s14, [r2]
 80134a0:	edc2 7a01 	vstr	s15, [r2, #4]
 80134a4:	3010      	adds	r0, #16
 80134a6:	3210      	adds	r2, #16
 80134a8:	3b08      	subs	r3, #8
 80134aa:	3110      	adds	r1, #16
 80134ac:	ed11 5a02 	vldr	s10, [r1, #-8]
 80134b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80134b4:	ed50 6a02 	vldr	s13, [r0, #-8]
 80134b8:	edd3 4a03 	vldr	s9, [r3, #12]
 80134bc:	ed51 7a01 	vldr	s15, [r1, #-4]
 80134c0:	ed10 6a01 	vldr	s12, [r0, #-4]
 80134c4:	ee77 5a45 	vsub.f32	s11, s14, s10
 80134c8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80134cc:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80134d0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80134d4:	ee66 5a25 	vmul.f32	s11, s12, s11
 80134d8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80134dc:	ee37 7a23 	vadd.f32	s14, s14, s7
 80134e0:	ee66 6a85 	vmul.f32	s13, s13, s10
 80134e4:	ee26 6a05 	vmul.f32	s12, s12, s10
 80134e8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80134ec:	ee37 7a06 	vadd.f32	s14, s14, s12
 80134f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80134f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80134f8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80134fc:	3c01      	subs	r4, #1
 80134fe:	ed02 7a02 	vstr	s14, [r2, #-8]
 8013502:	ed42 7a01 	vstr	s15, [r2, #-4]
 8013506:	f1a3 0308 	sub.w	r3, r3, #8
 801350a:	f101 0108 	add.w	r1, r1, #8
 801350e:	f100 0008 	add.w	r0, r0, #8
 8013512:	f102 0208 	add.w	r2, r2, #8
 8013516:	d1c9      	bne.n	80134ac <stage_rfft_f32+0x40>
 8013518:	f85d 4b04 	ldr.w	r4, [sp], #4
 801351c:	4770      	bx	lr
 801351e:	bf00      	nop

08013520 <merge_rfft_f32>:
 8013520:	b410      	push	{r4}
 8013522:	edd1 7a00 	vldr	s15, [r1]
 8013526:	edd1 6a01 	vldr	s13, [r1, #4]
 801352a:	8804      	ldrh	r4, [r0, #0]
 801352c:	6940      	ldr	r0, [r0, #20]
 801352e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013532:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013536:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801353a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801353e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013542:	3c01      	subs	r4, #1
 8013544:	ed82 7a00 	vstr	s14, [r2]
 8013548:	edc2 7a01 	vstr	s15, [r2, #4]
 801354c:	b3dc      	cbz	r4, 80135c6 <merge_rfft_f32+0xa6>
 801354e:	00e3      	lsls	r3, r4, #3
 8013550:	3b08      	subs	r3, #8
 8013552:	440b      	add	r3, r1
 8013554:	3010      	adds	r0, #16
 8013556:	3210      	adds	r2, #16
 8013558:	3110      	adds	r1, #16
 801355a:	ed11 5a02 	vldr	s10, [r1, #-8]
 801355e:	ed93 7a02 	vldr	s14, [r3, #8]
 8013562:	ed50 6a02 	vldr	s13, [r0, #-8]
 8013566:	edd3 4a03 	vldr	s9, [r3, #12]
 801356a:	ed51 7a01 	vldr	s15, [r1, #-4]
 801356e:	ed10 6a01 	vldr	s12, [r0, #-4]
 8013572:	ee75 5a47 	vsub.f32	s11, s10, s14
 8013576:	ee37 7a05 	vadd.f32	s14, s14, s10
 801357a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 801357e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8013582:	ee66 5a25 	vmul.f32	s11, s12, s11
 8013586:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801358a:	ee37 7a63 	vsub.f32	s14, s14, s7
 801358e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8013592:	ee26 6a05 	vmul.f32	s12, s12, s10
 8013596:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801359a:	ee37 7a46 	vsub.f32	s14, s14, s12
 801359e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80135a2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80135a6:	ee67 7a84 	vmul.f32	s15, s15, s8
 80135aa:	3c01      	subs	r4, #1
 80135ac:	ed02 7a02 	vstr	s14, [r2, #-8]
 80135b0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80135b4:	f1a3 0308 	sub.w	r3, r3, #8
 80135b8:	f101 0108 	add.w	r1, r1, #8
 80135bc:	f100 0008 	add.w	r0, r0, #8
 80135c0:	f102 0208 	add.w	r2, r2, #8
 80135c4:	d1c9      	bne.n	801355a <merge_rfft_f32+0x3a>
 80135c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135ca:	4770      	bx	lr

080135cc <arm_rfft_fast_f32>:
 80135cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135d0:	8a05      	ldrh	r5, [r0, #16]
 80135d2:	086d      	lsrs	r5, r5, #1
 80135d4:	8005      	strh	r5, [r0, #0]
 80135d6:	4604      	mov	r4, r0
 80135d8:	4616      	mov	r6, r2
 80135da:	461d      	mov	r5, r3
 80135dc:	b14b      	cbz	r3, 80135f2 <arm_rfft_fast_f32+0x26>
 80135de:	f7ff ff9f 	bl	8013520 <merge_rfft_f32>
 80135e2:	462a      	mov	r2, r5
 80135e4:	4631      	mov	r1, r6
 80135e6:	4620      	mov	r0, r4
 80135e8:	2301      	movs	r3, #1
 80135ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135ee:	f000 bb33 	b.w	8013c58 <arm_cfft_f32>
 80135f2:	460f      	mov	r7, r1
 80135f4:	461a      	mov	r2, r3
 80135f6:	2301      	movs	r3, #1
 80135f8:	f000 fb2e 	bl	8013c58 <arm_cfft_f32>
 80135fc:	4632      	mov	r2, r6
 80135fe:	4639      	mov	r1, r7
 8013600:	4620      	mov	r0, r4
 8013602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013606:	f7ff bf31 	b.w	801346c <stage_rfft_f32>
 801360a:	bf00      	nop

0801360c <arm_cfft_radix8by2_f32>:
 801360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013610:	ed2d 8b08 	vpush	{d8-d11}
 8013614:	4607      	mov	r7, r0
 8013616:	4608      	mov	r0, r1
 8013618:	f8b7 c000 	ldrh.w	ip, [r7]
 801361c:	687a      	ldr	r2, [r7, #4]
 801361e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8013622:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8013626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801362a:	f000 80b0 	beq.w	801378e <arm_cfft_radix8by2_f32+0x182>
 801362e:	008c      	lsls	r4, r1, #2
 8013630:	3410      	adds	r4, #16
 8013632:	f100 0310 	add.w	r3, r0, #16
 8013636:	1906      	adds	r6, r0, r4
 8013638:	3210      	adds	r2, #16
 801363a:	4444      	add	r4, r8
 801363c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8013640:	f108 0510 	add.w	r5, r8, #16
 8013644:	ed15 2a04 	vldr	s4, [r5, #-16]
 8013648:	ed55 2a03 	vldr	s5, [r5, #-12]
 801364c:	ed54 4a04 	vldr	s9, [r4, #-16]
 8013650:	ed14 4a03 	vldr	s8, [r4, #-12]
 8013654:	ed14 6a02 	vldr	s12, [r4, #-8]
 8013658:	ed54 5a01 	vldr	s11, [r4, #-4]
 801365c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8013660:	ed15 0a02 	vldr	s0, [r5, #-8]
 8013664:	ed55 0a01 	vldr	s1, [r5, #-4]
 8013668:	ed56 6a04 	vldr	s13, [r6, #-16]
 801366c:	ed16 3a03 	vldr	s6, [r6, #-12]
 8013670:	ed13 7a03 	vldr	s14, [r3, #-12]
 8013674:	ed13 5a02 	vldr	s10, [r3, #-8]
 8013678:	ed53 7a01 	vldr	s15, [r3, #-4]
 801367c:	ed16 1a02 	vldr	s2, [r6, #-8]
 8013680:	ed56 1a01 	vldr	s3, [r6, #-4]
 8013684:	ee73 ba82 	vadd.f32	s23, s7, s4
 8013688:	ee37 ba22 	vadd.f32	s22, s14, s5
 801368c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8013690:	ee33 9a04 	vadd.f32	s18, s6, s8
 8013694:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8013698:	ee75 aa00 	vadd.f32	s21, s10, s0
 801369c:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80136a0:	ee71 8a06 	vadd.f32	s17, s2, s12
 80136a4:	ed43 ba04 	vstr	s23, [r3, #-16]
 80136a8:	ed03 ba03 	vstr	s22, [r3, #-12]
 80136ac:	ed43 aa02 	vstr	s21, [r3, #-8]
 80136b0:	ed03 aa01 	vstr	s20, [r3, #-4]
 80136b4:	ed06 8a01 	vstr	s16, [r6, #-4]
 80136b8:	ed46 9a04 	vstr	s19, [r6, #-16]
 80136bc:	ed06 9a03 	vstr	s18, [r6, #-12]
 80136c0:	ed46 8a02 	vstr	s17, [r6, #-8]
 80136c4:	ee37 7a62 	vsub.f32	s14, s14, s5
 80136c8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80136cc:	ee34 4a43 	vsub.f32	s8, s8, s6
 80136d0:	ed52 6a03 	vldr	s13, [r2, #-12]
 80136d4:	ed12 3a04 	vldr	s6, [r2, #-16]
 80136d8:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80136dc:	ee27 8a26 	vmul.f32	s16, s14, s13
 80136e0:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80136e4:	ee23 2a83 	vmul.f32	s4, s7, s6
 80136e8:	ee64 4a83 	vmul.f32	s9, s9, s6
 80136ec:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80136f0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80136f4:	ee64 6a26 	vmul.f32	s13, s8, s13
 80136f8:	ee24 4a03 	vmul.f32	s8, s8, s6
 80136fc:	ee37 7a63 	vsub.f32	s14, s14, s7
 8013700:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013704:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8013708:	ee32 3a08 	vadd.f32	s6, s4, s16
 801370c:	ed05 7a03 	vstr	s14, [r5, #-12]
 8013710:	ed05 3a04 	vstr	s6, [r5, #-16]
 8013714:	ed04 4a04 	vstr	s8, [r4, #-16]
 8013718:	ed44 6a03 	vstr	s13, [r4, #-12]
 801371c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8013720:	ee76 6a41 	vsub.f32	s13, s12, s2
 8013724:	ee35 5a40 	vsub.f32	s10, s10, s0
 8013728:	ee35 6ae1 	vsub.f32	s12, s11, s3
 801372c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013730:	ed52 5a02 	vldr	s11, [r2, #-8]
 8013734:	ee67 3a87 	vmul.f32	s7, s15, s14
 8013738:	ee66 4a87 	vmul.f32	s9, s13, s14
 801373c:	ee25 4a25 	vmul.f32	s8, s10, s11
 8013740:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013744:	ee25 5a07 	vmul.f32	s10, s10, s14
 8013748:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801374c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8013750:	ee26 6a25 	vmul.f32	s12, s12, s11
 8013754:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013758:	ee74 5a23 	vadd.f32	s11, s8, s7
 801375c:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8013760:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013764:	3310      	adds	r3, #16
 8013766:	4563      	cmp	r3, ip
 8013768:	ed45 5a02 	vstr	s11, [r5, #-8]
 801376c:	f106 0610 	add.w	r6, r6, #16
 8013770:	ed45 7a01 	vstr	s15, [r5, #-4]
 8013774:	f102 0210 	add.w	r2, r2, #16
 8013778:	ed04 6a02 	vstr	s12, [r4, #-8]
 801377c:	ed04 7a01 	vstr	s14, [r4, #-4]
 8013780:	f105 0510 	add.w	r5, r5, #16
 8013784:	f104 0410 	add.w	r4, r4, #16
 8013788:	f47f af5c 	bne.w	8013644 <arm_cfft_radix8by2_f32+0x38>
 801378c:	687a      	ldr	r2, [r7, #4]
 801378e:	b28c      	uxth	r4, r1
 8013790:	4621      	mov	r1, r4
 8013792:	2302      	movs	r3, #2
 8013794:	f000 fc1c 	bl	8013fd0 <arm_radix8_butterfly_f32>
 8013798:	ecbd 8b08 	vpop	{d8-d11}
 801379c:	4621      	mov	r1, r4
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	4640      	mov	r0, r8
 80137a2:	2302      	movs	r3, #2
 80137a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137a8:	f000 bc12 	b.w	8013fd0 <arm_radix8_butterfly_f32>

080137ac <arm_cfft_radix8by4_f32>:
 80137ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b0:	ed2d 8b0a 	vpush	{d8-d12}
 80137b4:	b08d      	sub	sp, #52	@ 0x34
 80137b6:	460d      	mov	r5, r1
 80137b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80137ba:	8801      	ldrh	r1, [r0, #0]
 80137bc:	6842      	ldr	r2, [r0, #4]
 80137be:	900a      	str	r0, [sp, #40]	@ 0x28
 80137c0:	0849      	lsrs	r1, r1, #1
 80137c2:	008b      	lsls	r3, r1, #2
 80137c4:	18ee      	adds	r6, r5, r3
 80137c6:	18f0      	adds	r0, r6, r3
 80137c8:	edd0 5a00 	vldr	s11, [r0]
 80137cc:	edd5 7a00 	vldr	s15, [r5]
 80137d0:	ed96 7a00 	vldr	s14, [r6]
 80137d4:	edd0 3a01 	vldr	s7, [r0, #4]
 80137d8:	ed96 4a01 	vldr	s8, [r6, #4]
 80137dc:	ed95 5a01 	vldr	s10, [r5, #4]
 80137e0:	9008      	str	r0, [sp, #32]
 80137e2:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80137e6:	18c7      	adds	r7, r0, r3
 80137e8:	edd7 4a00 	vldr	s9, [r7]
 80137ec:	ed97 3a01 	vldr	s6, [r7, #4]
 80137f0:	9701      	str	r7, [sp, #4]
 80137f2:	ee77 6a06 	vadd.f32	s13, s14, s12
 80137f6:	462c      	mov	r4, r5
 80137f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80137fc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013800:	ee16 ca90 	vmov	ip, s13
 8013804:	f844 cb08 	str.w	ip, [r4], #8
 8013808:	ee75 6a23 	vadd.f32	s13, s10, s7
 801380c:	edd6 5a01 	vldr	s11, [r6, #4]
 8013810:	edd7 2a01 	vldr	s5, [r7, #4]
 8013814:	9404      	str	r4, [sp, #16]
 8013816:	ee35 5a63 	vsub.f32	s10, s10, s7
 801381a:	ee74 3a27 	vadd.f32	s7, s8, s15
 801381e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013822:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8013826:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801382a:	0849      	lsrs	r1, r1, #1
 801382c:	f102 0e08 	add.w	lr, r2, #8
 8013830:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8013834:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8013838:	9109      	str	r1, [sp, #36]	@ 0x24
 801383a:	ee35 4a47 	vsub.f32	s8, s10, s14
 801383e:	f1a1 0902 	sub.w	r9, r1, #2
 8013842:	f8cd e00c 	str.w	lr, [sp, #12]
 8013846:	4631      	mov	r1, r6
 8013848:	ee13 ea90 	vmov	lr, s7
 801384c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8013850:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8013854:	4604      	mov	r4, r0
 8013856:	edc5 5a01 	vstr	s11, [r5, #4]
 801385a:	ee37 7a05 	vadd.f32	s14, s14, s10
 801385e:	f841 eb08 	str.w	lr, [r1], #8
 8013862:	ee34 5a24 	vadd.f32	s10, s8, s9
 8013866:	ee16 ea10 	vmov	lr, s12
 801386a:	ed86 5a01 	vstr	s10, [r6, #4]
 801386e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8013872:	f844 eb08 	str.w	lr, [r4], #8
 8013876:	ee77 7a83 	vadd.f32	s15, s15, s6
 801387a:	edc0 6a01 	vstr	s13, [r0, #4]
 801387e:	9405      	str	r4, [sp, #20]
 8013880:	4604      	mov	r4, r0
 8013882:	ee17 0a90 	vmov	r0, s15
 8013886:	9106      	str	r1, [sp, #24]
 8013888:	ee37 7a64 	vsub.f32	s14, s14, s9
 801388c:	f102 0110 	add.w	r1, r2, #16
 8013890:	46bc      	mov	ip, r7
 8013892:	9100      	str	r1, [sp, #0]
 8013894:	f847 0b08 	str.w	r0, [r7], #8
 8013898:	f102 0118 	add.w	r1, r2, #24
 801389c:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80138a0:	9102      	str	r1, [sp, #8]
 80138a2:	ed8c 7a01 	vstr	s14, [ip, #4]
 80138a6:	9007      	str	r0, [sp, #28]
 80138a8:	f000 8134 	beq.w	8013b14 <arm_cfft_radix8by4_f32+0x368>
 80138ac:	f102 0920 	add.w	r9, r2, #32
 80138b0:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 80138b4:	9a01      	ldr	r2, [sp, #4]
 80138b6:	f8dd a000 	ldr.w	sl, [sp]
 80138ba:	3b0c      	subs	r3, #12
 80138bc:	4683      	mov	fp, r0
 80138be:	4463      	add	r3, ip
 80138c0:	f105 0e10 	add.w	lr, r5, #16
 80138c4:	f1a4 010c 	sub.w	r1, r4, #12
 80138c8:	f104 0510 	add.w	r5, r4, #16
 80138cc:	f1a6 0c0c 	sub.w	ip, r6, #12
 80138d0:	f1a2 040c 	sub.w	r4, r2, #12
 80138d4:	f106 0010 	add.w	r0, r6, #16
 80138d8:	3210      	adds	r2, #16
 80138da:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80138de:	ed55 5a02 	vldr	s11, [r5, #-8]
 80138e2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80138e6:	ed52 1a02 	vldr	s3, [r2, #-8]
 80138ea:	ed55 6a01 	vldr	s13, [r5, #-4]
 80138ee:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80138f2:	ed12 1a01 	vldr	s2, [r2, #-4]
 80138f6:	ed10 8a01 	vldr	s16, [r0, #-4]
 80138fa:	ee35 4a25 	vadd.f32	s8, s10, s11
 80138fe:	ee30 6a26 	vadd.f32	s12, s0, s13
 8013902:	ee37 7a84 	vadd.f32	s14, s15, s8
 8013906:	ee30 0a66 	vsub.f32	s0, s0, s13
 801390a:	ee37 7a21 	vadd.f32	s14, s14, s3
 801390e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8013912:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8013916:	ed10 7a01 	vldr	s14, [r0, #-4]
 801391a:	ed52 6a01 	vldr	s13, [r2, #-4]
 801391e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8013922:	ee78 aa25 	vadd.f32	s21, s16, s11
 8013926:	ee37 7a26 	vadd.f32	s14, s14, s13
 801392a:	ee70 3a67 	vsub.f32	s7, s0, s15
 801392e:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8013932:	ed94 7a02 	vldr	s14, [r4, #8]
 8013936:	ed9c 2a02 	vldr	s4, [ip, #8]
 801393a:	ed91 ba02 	vldr	s22, [r1, #8]
 801393e:	edd3 9a02 	vldr	s19, [r3, #8]
 8013942:	edd4 2a01 	vldr	s5, [r4, #4]
 8013946:	ed9c 9a01 	vldr	s18, [ip, #4]
 801394a:	ed93 5a01 	vldr	s10, [r3, #4]
 801394e:	edd1 0a01 	vldr	s1, [r1, #4]
 8013952:	ee72 6a07 	vadd.f32	s13, s4, s14
 8013956:	ee32 2a47 	vsub.f32	s4, s4, s14
 801395a:	ee7b 8a26 	vadd.f32	s17, s22, s13
 801395e:	ee79 4a22 	vadd.f32	s9, s18, s5
 8013962:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8013966:	ee79 2a62 	vsub.f32	s5, s18, s5
 801396a:	ed8c 7a02 	vstr	s14, [ip, #8]
 801396e:	ed91 7a01 	vldr	s14, [r1, #4]
 8013972:	edd3 8a01 	vldr	s17, [r3, #4]
 8013976:	ee34 7a87 	vadd.f32	s14, s9, s14
 801397a:	ee3b 3a69 	vsub.f32	s6, s22, s19
 801397e:	ee37 7a28 	vadd.f32	s14, s14, s17
 8013982:	ee32 9a60 	vsub.f32	s18, s4, s1
 8013986:	ed8c 7a01 	vstr	s14, [ip, #4]
 801398a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 801398e:	ed1a aa02 	vldr	s20, [sl, #-8]
 8013992:	ee73 8a22 	vadd.f32	s17, s6, s5
 8013996:	ee39 9a05 	vadd.f32	s18, s18, s10
 801399a:	ee7a aac1 	vsub.f32	s21, s21, s2
 801399e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80139a2:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80139a6:	ee69 ba07 	vmul.f32	s23, s18, s14
 80139aa:	ee6a aa87 	vmul.f32	s21, s21, s14
 80139ae:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80139b2:	ee63 ca87 	vmul.f32	s25, s7, s14
 80139b6:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80139ba:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80139be:	ee68 8a87 	vmul.f32	s17, s17, s14
 80139c2:	ee73 3aea 	vsub.f32	s7, s7, s21
 80139c6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80139ca:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80139ce:	ee3b aaca 	vsub.f32	s20, s23, s20
 80139d2:	ee34 4a67 	vsub.f32	s8, s8, s15
 80139d6:	ee76 6acb 	vsub.f32	s13, s13, s22
 80139da:	ee36 6a48 	vsub.f32	s12, s12, s16
 80139de:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80139e2:	ed00 7a02 	vstr	s14, [r0, #-8]
 80139e6:	ed40 3a01 	vstr	s7, [r0, #-4]
 80139ea:	edc1 8a01 	vstr	s17, [r1, #4]
 80139ee:	ed81 aa02 	vstr	s20, [r1, #8]
 80139f2:	ed59 3a04 	vldr	s7, [r9, #-16]
 80139f6:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80139fa:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80139fe:	ed59 6a03 	vldr	s13, [r9, #-12]
 8013a02:	ee34 4a61 	vsub.f32	s8, s8, s3
 8013a06:	ee36 6a41 	vsub.f32	s12, s12, s2
 8013a0a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8013a0e:	ee66 9a26 	vmul.f32	s19, s12, s13
 8013a12:	ee24 9a23 	vmul.f32	s18, s8, s7
 8013a16:	ee26 6a23 	vmul.f32	s12, s12, s7
 8013a1a:	ee24 4a26 	vmul.f32	s8, s8, s13
 8013a1e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013a22:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8013a26:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8013a2a:	ee36 6a44 	vsub.f32	s12, s12, s8
 8013a2e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8013a32:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8013a36:	ee79 3a29 	vadd.f32	s7, s18, s19
 8013a3a:	ee75 6a60 	vsub.f32	s13, s10, s1
 8013a3e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8013a42:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013a46:	ed45 3a02 	vstr	s7, [r5, #-8]
 8013a4a:	ed05 6a01 	vstr	s12, [r5, #-4]
 8013a4e:	ed84 7a01 	vstr	s14, [r4, #4]
 8013a52:	ed84 4a02 	vstr	s8, [r4, #8]
 8013a56:	ee35 6a81 	vadd.f32	s12, s11, s2
 8013a5a:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8013a5e:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 8013a62:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8013a66:	ee33 3a62 	vsub.f32	s6, s6, s5
 8013a6a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8013a6e:	ee67 2a26 	vmul.f32	s5, s14, s13
 8013a72:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8013a76:	ee26 5a25 	vmul.f32	s10, s12, s11
 8013a7a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013a7e:	ee26 6a26 	vmul.f32	s12, s12, s13
 8013a82:	ee27 7a25 	vmul.f32	s14, s14, s11
 8013a86:	ee63 6a26 	vmul.f32	s13, s6, s13
 8013a8a:	ee23 3a25 	vmul.f32	s6, s6, s11
 8013a8e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013a92:	ee75 5a24 	vadd.f32	s11, s10, s9
 8013a96:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8013a9a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013a9e:	f1bb 0b01 	subs.w	fp, fp, #1
 8013aa2:	ed42 5a02 	vstr	s11, [r2, #-8]
 8013aa6:	ed42 7a01 	vstr	s15, [r2, #-4]
 8013aaa:	f10e 0e08 	add.w	lr, lr, #8
 8013aae:	ed83 3a02 	vstr	s6, [r3, #8]
 8013ab2:	ed83 7a01 	vstr	s14, [r3, #4]
 8013ab6:	f1ac 0c08 	sub.w	ip, ip, #8
 8013aba:	f10a 0a08 	add.w	sl, sl, #8
 8013abe:	f100 0008 	add.w	r0, r0, #8
 8013ac2:	f1a1 0108 	sub.w	r1, r1, #8
 8013ac6:	f109 0910 	add.w	r9, r9, #16
 8013aca:	f105 0508 	add.w	r5, r5, #8
 8013ace:	f1a4 0408 	sub.w	r4, r4, #8
 8013ad2:	f108 0818 	add.w	r8, r8, #24
 8013ad6:	f102 0208 	add.w	r2, r2, #8
 8013ada:	f1a3 0308 	sub.w	r3, r3, #8
 8013ade:	f47f aefc 	bne.w	80138da <arm_cfft_radix8by4_f32+0x12e>
 8013ae2:	9907      	ldr	r1, [sp, #28]
 8013ae4:	9800      	ldr	r0, [sp, #0]
 8013ae6:	00cb      	lsls	r3, r1, #3
 8013ae8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8013aec:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8013af0:	9100      	str	r1, [sp, #0]
 8013af2:	9904      	ldr	r1, [sp, #16]
 8013af4:	4419      	add	r1, r3
 8013af6:	9104      	str	r1, [sp, #16]
 8013af8:	9903      	ldr	r1, [sp, #12]
 8013afa:	4419      	add	r1, r3
 8013afc:	9103      	str	r1, [sp, #12]
 8013afe:	9906      	ldr	r1, [sp, #24]
 8013b00:	4419      	add	r1, r3
 8013b02:	9106      	str	r1, [sp, #24]
 8013b04:	9905      	ldr	r1, [sp, #20]
 8013b06:	441f      	add	r7, r3
 8013b08:	4419      	add	r1, r3
 8013b0a:	9b02      	ldr	r3, [sp, #8]
 8013b0c:	9105      	str	r1, [sp, #20]
 8013b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b12:	9302      	str	r3, [sp, #8]
 8013b14:	9904      	ldr	r1, [sp, #16]
 8013b16:	9805      	ldr	r0, [sp, #20]
 8013b18:	ed91 4a00 	vldr	s8, [r1]
 8013b1c:	edd0 6a00 	vldr	s13, [r0]
 8013b20:	9b06      	ldr	r3, [sp, #24]
 8013b22:	ed97 3a00 	vldr	s6, [r7]
 8013b26:	edd3 7a00 	vldr	s15, [r3]
 8013b2a:	edd0 4a01 	vldr	s9, [r0, #4]
 8013b2e:	edd1 3a01 	vldr	s7, [r1, #4]
 8013b32:	ed97 2a01 	vldr	s4, [r7, #4]
 8013b36:	ed93 7a01 	vldr	s14, [r3, #4]
 8013b3a:	9a03      	ldr	r2, [sp, #12]
 8013b3c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8013b40:	ee34 6a26 	vadd.f32	s12, s8, s13
 8013b44:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8013b48:	ee37 5a86 	vadd.f32	s10, s15, s12
 8013b4c:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8013b50:	ee35 5a03 	vadd.f32	s10, s10, s6
 8013b54:	ee74 6a66 	vsub.f32	s13, s8, s13
 8013b58:	ed81 5a00 	vstr	s10, [r1]
 8013b5c:	ed93 5a01 	vldr	s10, [r3, #4]
 8013b60:	edd7 4a01 	vldr	s9, [r7, #4]
 8013b64:	ee35 5a85 	vadd.f32	s10, s11, s10
 8013b68:	ee37 4a26 	vadd.f32	s8, s14, s13
 8013b6c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8013b70:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8013b74:	ed81 5a01 	vstr	s10, [r1, #4]
 8013b78:	edd2 1a00 	vldr	s3, [r2]
 8013b7c:	edd2 2a01 	vldr	s5, [r2, #4]
 8013b80:	ee34 5a83 	vadd.f32	s10, s9, s6
 8013b84:	ee34 4a42 	vsub.f32	s8, s8, s4
 8013b88:	ee36 6a67 	vsub.f32	s12, s12, s15
 8013b8c:	ee64 4a21 	vmul.f32	s9, s8, s3
 8013b90:	ee24 4a22 	vmul.f32	s8, s8, s5
 8013b94:	ee65 2a22 	vmul.f32	s5, s10, s5
 8013b98:	ee25 5a21 	vmul.f32	s10, s10, s3
 8013b9c:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8013ba0:	ee35 5a44 	vsub.f32	s10, s10, s8
 8013ba4:	edc3 2a00 	vstr	s5, [r3]
 8013ba8:	ed83 5a01 	vstr	s10, [r3, #4]
 8013bac:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8013bb0:	9b00      	ldr	r3, [sp, #0]
 8013bb2:	ee36 6a43 	vsub.f32	s12, s12, s6
 8013bb6:	ed93 4a01 	vldr	s8, [r3, #4]
 8013bba:	ed93 5a00 	vldr	s10, [r3]
 8013bbe:	9b02      	ldr	r3, [sp, #8]
 8013bc0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8013bc4:	ee66 4a05 	vmul.f32	s9, s12, s10
 8013bc8:	ee25 5a85 	vmul.f32	s10, s11, s10
 8013bcc:	ee26 6a04 	vmul.f32	s12, s12, s8
 8013bd0:	ee65 5a84 	vmul.f32	s11, s11, s8
 8013bd4:	ee35 6a46 	vsub.f32	s12, s10, s12
 8013bd8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8013bdc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8013be0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013be4:	ed80 6a01 	vstr	s12, [r0, #4]
 8013be8:	edc0 5a00 	vstr	s11, [r0]
 8013bec:	edd3 5a01 	vldr	s11, [r3, #4]
 8013bf0:	edd3 6a00 	vldr	s13, [r3]
 8013bf4:	ee37 7a02 	vadd.f32	s14, s14, s4
 8013bf8:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8013bfc:	ee27 6a26 	vmul.f32	s12, s14, s13
 8013c00:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013c04:	ee27 7a25 	vmul.f32	s14, s14, s11
 8013c08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013c0c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013c10:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013c14:	ed87 7a01 	vstr	s14, [r7, #4]
 8013c18:	edc7 7a00 	vstr	s15, [r7]
 8013c1c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8013c20:	4621      	mov	r1, r4
 8013c22:	686a      	ldr	r2, [r5, #4]
 8013c24:	2304      	movs	r3, #4
 8013c26:	f000 f9d3 	bl	8013fd0 <arm_radix8_butterfly_f32>
 8013c2a:	4630      	mov	r0, r6
 8013c2c:	4621      	mov	r1, r4
 8013c2e:	686a      	ldr	r2, [r5, #4]
 8013c30:	2304      	movs	r3, #4
 8013c32:	f000 f9cd 	bl	8013fd0 <arm_radix8_butterfly_f32>
 8013c36:	9808      	ldr	r0, [sp, #32]
 8013c38:	686a      	ldr	r2, [r5, #4]
 8013c3a:	4621      	mov	r1, r4
 8013c3c:	2304      	movs	r3, #4
 8013c3e:	f000 f9c7 	bl	8013fd0 <arm_radix8_butterfly_f32>
 8013c42:	686a      	ldr	r2, [r5, #4]
 8013c44:	9801      	ldr	r0, [sp, #4]
 8013c46:	4621      	mov	r1, r4
 8013c48:	2304      	movs	r3, #4
 8013c4a:	b00d      	add	sp, #52	@ 0x34
 8013c4c:	ecbd 8b0a 	vpop	{d8-d12}
 8013c50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c54:	f000 b9bc 	b.w	8013fd0 <arm_radix8_butterfly_f32>

08013c58 <arm_cfft_f32>:
 8013c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c5c:	2a01      	cmp	r2, #1
 8013c5e:	4606      	mov	r6, r0
 8013c60:	4617      	mov	r7, r2
 8013c62:	460c      	mov	r4, r1
 8013c64:	4698      	mov	r8, r3
 8013c66:	8805      	ldrh	r5, [r0, #0]
 8013c68:	d056      	beq.n	8013d18 <arm_cfft_f32+0xc0>
 8013c6a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8013c6e:	d063      	beq.n	8013d38 <arm_cfft_f32+0xe0>
 8013c70:	d916      	bls.n	8013ca0 <arm_cfft_f32+0x48>
 8013c72:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8013c76:	d01a      	beq.n	8013cae <arm_cfft_f32+0x56>
 8013c78:	d947      	bls.n	8013d0a <arm_cfft_f32+0xb2>
 8013c7a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8013c7e:	d05b      	beq.n	8013d38 <arm_cfft_f32+0xe0>
 8013c80:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8013c84:	d105      	bne.n	8013c92 <arm_cfft_f32+0x3a>
 8013c86:	2301      	movs	r3, #1
 8013c88:	6872      	ldr	r2, [r6, #4]
 8013c8a:	4629      	mov	r1, r5
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	f000 f99f 	bl	8013fd0 <arm_radix8_butterfly_f32>
 8013c92:	f1b8 0f00 	cmp.w	r8, #0
 8013c96:	d111      	bne.n	8013cbc <arm_cfft_f32+0x64>
 8013c98:	2f01      	cmp	r7, #1
 8013c9a:	d016      	beq.n	8013cca <arm_cfft_f32+0x72>
 8013c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ca0:	2d20      	cmp	r5, #32
 8013ca2:	d049      	beq.n	8013d38 <arm_cfft_f32+0xe0>
 8013ca4:	d935      	bls.n	8013d12 <arm_cfft_f32+0xba>
 8013ca6:	2d40      	cmp	r5, #64	@ 0x40
 8013ca8:	d0ed      	beq.n	8013c86 <arm_cfft_f32+0x2e>
 8013caa:	2d80      	cmp	r5, #128	@ 0x80
 8013cac:	d1f1      	bne.n	8013c92 <arm_cfft_f32+0x3a>
 8013cae:	4621      	mov	r1, r4
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	f7ff fcab 	bl	801360c <arm_cfft_radix8by2_f32>
 8013cb6:	f1b8 0f00 	cmp.w	r8, #0
 8013cba:	d0ed      	beq.n	8013c98 <arm_cfft_f32+0x40>
 8013cbc:	68b2      	ldr	r2, [r6, #8]
 8013cbe:	89b1      	ldrh	r1, [r6, #12]
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	f000 f841 	bl	8013d48 <arm_bitreversal_32>
 8013cc6:	2f01      	cmp	r7, #1
 8013cc8:	d1e8      	bne.n	8013c9c <arm_cfft_f32+0x44>
 8013cca:	ee07 5a90 	vmov	s15, r5
 8013cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013cd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013cda:	2d00      	cmp	r5, #0
 8013cdc:	d0de      	beq.n	8013c9c <arm_cfft_f32+0x44>
 8013cde:	f104 0108 	add.w	r1, r4, #8
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	3301      	adds	r3, #1
 8013ce6:	429d      	cmp	r5, r3
 8013ce8:	f101 0108 	add.w	r1, r1, #8
 8013cec:	ed11 7a04 	vldr	s14, [r1, #-16]
 8013cf0:	ed51 7a03 	vldr	s15, [r1, #-12]
 8013cf4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013cf8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013cfc:	ed01 7a04 	vstr	s14, [r1, #-16]
 8013d00:	ed41 7a03 	vstr	s15, [r1, #-12]
 8013d04:	d1ee      	bne.n	8013ce4 <arm_cfft_f32+0x8c>
 8013d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d0a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8013d0e:	d0ba      	beq.n	8013c86 <arm_cfft_f32+0x2e>
 8013d10:	e7bf      	b.n	8013c92 <arm_cfft_f32+0x3a>
 8013d12:	2d10      	cmp	r5, #16
 8013d14:	d0cb      	beq.n	8013cae <arm_cfft_f32+0x56>
 8013d16:	e7bc      	b.n	8013c92 <arm_cfft_f32+0x3a>
 8013d18:	b19d      	cbz	r5, 8013d42 <arm_cfft_f32+0xea>
 8013d1a:	f101 030c 	add.w	r3, r1, #12
 8013d1e:	2200      	movs	r2, #0
 8013d20:	ed53 7a02 	vldr	s15, [r3, #-8]
 8013d24:	3201      	adds	r2, #1
 8013d26:	eef1 7a67 	vneg.f32	s15, s15
 8013d2a:	4295      	cmp	r5, r2
 8013d2c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8013d30:	f103 0308 	add.w	r3, r3, #8
 8013d34:	d1f4      	bne.n	8013d20 <arm_cfft_f32+0xc8>
 8013d36:	e798      	b.n	8013c6a <arm_cfft_f32+0x12>
 8013d38:	4621      	mov	r1, r4
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	f7ff fd36 	bl	80137ac <arm_cfft_radix8by4_f32>
 8013d40:	e7a7      	b.n	8013c92 <arm_cfft_f32+0x3a>
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d0aa      	beq.n	8013c9c <arm_cfft_f32+0x44>
 8013d46:	e7b9      	b.n	8013cbc <arm_cfft_f32+0x64>

08013d48 <arm_bitreversal_32>:
 8013d48:	b1e9      	cbz	r1, 8013d86 <arm_bitreversal_32+0x3e>
 8013d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d4c:	2500      	movs	r5, #0
 8013d4e:	f102 0e02 	add.w	lr, r2, #2
 8013d52:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8013d56:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8013d5a:	08a4      	lsrs	r4, r4, #2
 8013d5c:	089b      	lsrs	r3, r3, #2
 8013d5e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8013d62:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8013d66:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8013d6a:	00a6      	lsls	r6, r4, #2
 8013d6c:	009b      	lsls	r3, r3, #2
 8013d6e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8013d72:	3304      	adds	r3, #4
 8013d74:	1d34      	adds	r4, r6, #4
 8013d76:	3502      	adds	r5, #2
 8013d78:	58c6      	ldr	r6, [r0, r3]
 8013d7a:	5907      	ldr	r7, [r0, r4]
 8013d7c:	50c7      	str	r7, [r0, r3]
 8013d7e:	428d      	cmp	r5, r1
 8013d80:	5106      	str	r6, [r0, r4]
 8013d82:	d3e6      	bcc.n	8013d52 <arm_bitreversal_32+0xa>
 8013d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d86:	4770      	bx	lr

08013d88 <arm_cmplx_mag_f32>:
 8013d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d8c:	ed2d 8b02 	vpush	{d8}
 8013d90:	0897      	lsrs	r7, r2, #2
 8013d92:	b084      	sub	sp, #16
 8013d94:	d077      	beq.n	8013e86 <arm_cmplx_mag_f32+0xfe>
 8013d96:	f04f 0800 	mov.w	r8, #0
 8013d9a:	f100 0420 	add.w	r4, r0, #32
 8013d9e:	f101 0510 	add.w	r5, r1, #16
 8013da2:	463e      	mov	r6, r7
 8013da4:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8013da8:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8013dac:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013db0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013db4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013db8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc0:	f2c0 80c5 	blt.w	8013f4e <arm_cmplx_mag_f32+0x1c6>
 8013dc4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dcc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8013dd0:	f100 80cb 	bmi.w	8013f6a <arm_cmplx_mag_f32+0x1e2>
 8013dd4:	ed05 8a04 	vstr	s16, [r5, #-16]
 8013dd8:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8013ddc:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8013de0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013de4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013de8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013dec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df4:	f2c0 80a8 	blt.w	8013f48 <arm_cmplx_mag_f32+0x1c0>
 8013df8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e00:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8013e04:	f100 80a8 	bmi.w	8013f58 <arm_cmplx_mag_f32+0x1d0>
 8013e08:	ed05 8a03 	vstr	s16, [r5, #-12]
 8013e0c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8013e10:	ed54 7a03 	vldr	s15, [r4, #-12]
 8013e14:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013e18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013e1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013e20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e28:	f2c0 808b 	blt.w	8013f42 <arm_cmplx_mag_f32+0x1ba>
 8013e2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e34:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8013e38:	f100 80a9 	bmi.w	8013f8e <arm_cmplx_mag_f32+0x206>
 8013e3c:	ed05 8a02 	vstr	s16, [r5, #-8]
 8013e40:	ed14 0a02 	vldr	s0, [r4, #-8]
 8013e44:	ed54 7a01 	vldr	s15, [r4, #-4]
 8013e48:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013e4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013e50:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013e54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e5c:	db6e      	blt.n	8013f3c <arm_cmplx_mag_f32+0x1b4>
 8013e5e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e66:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8013e6a:	f100 8087 	bmi.w	8013f7c <arm_cmplx_mag_f32+0x1f4>
 8013e6e:	ed05 8a01 	vstr	s16, [r5, #-4]
 8013e72:	3e01      	subs	r6, #1
 8013e74:	f104 0420 	add.w	r4, r4, #32
 8013e78:	f105 0510 	add.w	r5, r5, #16
 8013e7c:	d192      	bne.n	8013da4 <arm_cmplx_mag_f32+0x1c>
 8013e7e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8013e82:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8013e86:	f012 0203 	ands.w	r2, r2, #3
 8013e8a:	d052      	beq.n	8013f32 <arm_cmplx_mag_f32+0x1aa>
 8013e8c:	ed90 0a00 	vldr	s0, [r0]
 8013e90:	edd0 7a01 	vldr	s15, [r0, #4]
 8013e94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013e98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013ea2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eaa:	bfb8      	it	lt
 8013eac:	600b      	strlt	r3, [r1, #0]
 8013eae:	db08      	blt.n	8013ec2 <arm_cmplx_mag_f32+0x13a>
 8013eb0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8013ebc:	d479      	bmi.n	8013fb2 <arm_cmplx_mag_f32+0x22a>
 8013ebe:	ed81 8a00 	vstr	s16, [r1]
 8013ec2:	3a01      	subs	r2, #1
 8013ec4:	d035      	beq.n	8013f32 <arm_cmplx_mag_f32+0x1aa>
 8013ec6:	ed90 0a02 	vldr	s0, [r0, #8]
 8013eca:	edd0 7a03 	vldr	s15, [r0, #12]
 8013ece:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013ed2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013edc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee4:	bfb8      	it	lt
 8013ee6:	604b      	strlt	r3, [r1, #4]
 8013ee8:	db08      	blt.n	8013efc <arm_cmplx_mag_f32+0x174>
 8013eea:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8013ef6:	d453      	bmi.n	8013fa0 <arm_cmplx_mag_f32+0x218>
 8013ef8:	ed81 8a01 	vstr	s16, [r1, #4]
 8013efc:	2a01      	cmp	r2, #1
 8013efe:	d018      	beq.n	8013f32 <arm_cmplx_mag_f32+0x1aa>
 8013f00:	ed90 0a04 	vldr	s0, [r0, #16]
 8013f04:	edd0 7a05 	vldr	s15, [r0, #20]
 8013f08:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013f0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013f10:	2300      	movs	r3, #0
 8013f12:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f1e:	db19      	blt.n	8013f54 <arm_cmplx_mag_f32+0x1cc>
 8013f20:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f28:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8013f2c:	d44a      	bmi.n	8013fc4 <arm_cmplx_mag_f32+0x23c>
 8013f2e:	ed81 8a02 	vstr	s16, [r1, #8]
 8013f32:	b004      	add	sp, #16
 8013f34:	ecbd 8b02 	vpop	{d8}
 8013f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f3c:	f845 8c04 	str.w	r8, [r5, #-4]
 8013f40:	e797      	b.n	8013e72 <arm_cmplx_mag_f32+0xea>
 8013f42:	f845 8c08 	str.w	r8, [r5, #-8]
 8013f46:	e77b      	b.n	8013e40 <arm_cmplx_mag_f32+0xb8>
 8013f48:	f845 8c0c 	str.w	r8, [r5, #-12]
 8013f4c:	e75e      	b.n	8013e0c <arm_cmplx_mag_f32+0x84>
 8013f4e:	f845 8c10 	str.w	r8, [r5, #-16]
 8013f52:	e741      	b.n	8013dd8 <arm_cmplx_mag_f32+0x50>
 8013f54:	608b      	str	r3, [r1, #8]
 8013f56:	e7ec      	b.n	8013f32 <arm_cmplx_mag_f32+0x1aa>
 8013f58:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013f5c:	9001      	str	r0, [sp, #4]
 8013f5e:	f005 fa33 	bl	80193c8 <sqrtf>
 8013f62:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013f66:	9801      	ldr	r0, [sp, #4]
 8013f68:	e74e      	b.n	8013e08 <arm_cmplx_mag_f32+0x80>
 8013f6a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013f6e:	9001      	str	r0, [sp, #4]
 8013f70:	f005 fa2a 	bl	80193c8 <sqrtf>
 8013f74:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013f78:	9801      	ldr	r0, [sp, #4]
 8013f7a:	e72b      	b.n	8013dd4 <arm_cmplx_mag_f32+0x4c>
 8013f7c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013f80:	9001      	str	r0, [sp, #4]
 8013f82:	f005 fa21 	bl	80193c8 <sqrtf>
 8013f86:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013f8a:	9801      	ldr	r0, [sp, #4]
 8013f8c:	e76f      	b.n	8013e6e <arm_cmplx_mag_f32+0xe6>
 8013f8e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013f92:	9001      	str	r0, [sp, #4]
 8013f94:	f005 fa18 	bl	80193c8 <sqrtf>
 8013f98:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013f9c:	9801      	ldr	r0, [sp, #4]
 8013f9e:	e74d      	b.n	8013e3c <arm_cmplx_mag_f32+0xb4>
 8013fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fa4:	9201      	str	r2, [sp, #4]
 8013fa6:	f005 fa0f 	bl	80193c8 <sqrtf>
 8013faa:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8013fae:	9903      	ldr	r1, [sp, #12]
 8013fb0:	e7a2      	b.n	8013ef8 <arm_cmplx_mag_f32+0x170>
 8013fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fb6:	9201      	str	r2, [sp, #4]
 8013fb8:	f005 fa06 	bl	80193c8 <sqrtf>
 8013fbc:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8013fc0:	9903      	ldr	r1, [sp, #12]
 8013fc2:	e77c      	b.n	8013ebe <arm_cmplx_mag_f32+0x136>
 8013fc4:	9101      	str	r1, [sp, #4]
 8013fc6:	f005 f9ff 	bl	80193c8 <sqrtf>
 8013fca:	9901      	ldr	r1, [sp, #4]
 8013fcc:	e7af      	b.n	8013f2e <arm_cmplx_mag_f32+0x1a6>
 8013fce:	bf00      	nop

08013fd0 <arm_radix8_butterfly_f32>:
 8013fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd4:	ed2d 8b10 	vpush	{d8-d15}
 8013fd8:	b095      	sub	sp, #84	@ 0x54
 8013fda:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8013fde:	4603      	mov	r3, r0
 8013fe0:	3304      	adds	r3, #4
 8013fe2:	ed9f bab9 	vldr	s22, [pc, #740]	@ 80142c8 <arm_radix8_butterfly_f32+0x2f8>
 8013fe6:	9012      	str	r0, [sp, #72]	@ 0x48
 8013fe8:	468b      	mov	fp, r1
 8013fea:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013fec:	4689      	mov	r9, r1
 8013fee:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8013ff2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013ff4:	960f      	str	r6, [sp, #60]	@ 0x3c
 8013ff6:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8013ffa:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8013ffe:	eb03 0508 	add.w	r5, r3, r8
 8014002:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8014006:	eb05 040e 	add.w	r4, r5, lr
 801400a:	0137      	lsls	r7, r6, #4
 801400c:	eba6 030a 	sub.w	r3, r6, sl
 8014010:	eb04 000e 	add.w	r0, r4, lr
 8014014:	44b2      	add	sl, r6
 8014016:	1d3a      	adds	r2, r7, #4
 8014018:	9702      	str	r7, [sp, #8]
 801401a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801401e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8014022:	ebae 0c06 	sub.w	ip, lr, r6
 8014026:	9703      	str	r7, [sp, #12]
 8014028:	eb03 0708 	add.w	r7, r3, r8
 801402c:	9701      	str	r7, [sp, #4]
 801402e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8014032:	9706      	str	r7, [sp, #24]
 8014034:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8014036:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801403a:	f10e 0104 	add.w	r1, lr, #4
 801403e:	4439      	add	r1, r7
 8014040:	443a      	add	r2, r7
 8014042:	0137      	lsls	r7, r6, #4
 8014044:	00f6      	lsls	r6, r6, #3
 8014046:	9704      	str	r7, [sp, #16]
 8014048:	9605      	str	r6, [sp, #20]
 801404a:	9f01      	ldr	r7, [sp, #4]
 801404c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801404e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8014052:	f04f 0c00 	mov.w	ip, #0
 8014056:	edd4 6a00 	vldr	s13, [r4]
 801405a:	edd7 1a00 	vldr	s3, [r7]
 801405e:	ed16 aa01 	vldr	s20, [r6, #-4]
 8014062:	edd5 5a00 	vldr	s11, [r5]
 8014066:	ed52 9a01 	vldr	s19, [r2, #-4]
 801406a:	ed90 6a00 	vldr	s12, [r0]
 801406e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8014072:	ed93 3a00 	vldr	s6, [r3]
 8014076:	ee39 0a86 	vadd.f32	s0, s19, s12
 801407a:	ee33 2a21 	vadd.f32	s4, s6, s3
 801407e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8014082:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8014086:	ee35 7a02 	vadd.f32	s14, s10, s4
 801408a:	ee34 4a80 	vadd.f32	s8, s9, s0
 801408e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014092:	ee74 6a07 	vadd.f32	s13, s8, s14
 8014096:	ee34 4a47 	vsub.f32	s8, s8, s14
 801409a:	ed46 6a01 	vstr	s13, [r6, #-4]
 801409e:	ed85 4a00 	vstr	s8, [r5]
 80140a2:	edd1 6a00 	vldr	s13, [r1]
 80140a6:	ed94 9a01 	vldr	s18, [r4, #4]
 80140aa:	edd3 2a01 	vldr	s5, [r3, #4]
 80140ae:	edd7 8a01 	vldr	s17, [r7, #4]
 80140b2:	edd6 0a00 	vldr	s1, [r6]
 80140b6:	edd5 3a01 	vldr	s7, [r5, #4]
 80140ba:	ed90 8a01 	vldr	s16, [r0, #4]
 80140be:	ed92 7a00 	vldr	s14, [r2]
 80140c2:	ee33 3a61 	vsub.f32	s6, s6, s3
 80140c6:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80140ca:	ee72 aae8 	vsub.f32	s21, s5, s17
 80140ce:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80140d2:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80140d6:	ee77 7a83 	vadd.f32	s15, s15, s6
 80140da:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80140de:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80140e2:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80140e6:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80140ea:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80140ee:	ee77 0a08 	vadd.f32	s1, s14, s16
 80140f2:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80140f6:	ee37 7a48 	vsub.f32	s14, s14, s16
 80140fa:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80140fe:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8014102:	ee76 6a89 	vadd.f32	s13, s13, s18
 8014106:	ee24 4a0b 	vmul.f32	s8, s8, s22
 801410a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 801410e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8014112:	ee35 5a42 	vsub.f32	s10, s10, s4
 8014116:	ee36 0aa2 	vadd.f32	s0, s13, s5
 801411a:	ee33 2a20 	vadd.f32	s4, s6, s1
 801411e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8014122:	ee33 3a60 	vsub.f32	s6, s6, s1
 8014126:	ee75 2aa1 	vadd.f32	s5, s11, s3
 801412a:	ee77 0a01 	vadd.f32	s1, s14, s2
 801412e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8014132:	ee37 7a41 	vsub.f32	s14, s14, s2
 8014136:	ee73 1a84 	vadd.f32	s3, s7, s8
 801413a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 801413e:	ee76 3a27 	vadd.f32	s7, s12, s15
 8014142:	ee76 7a67 	vsub.f32	s15, s12, s15
 8014146:	ee32 8a00 	vadd.f32	s16, s4, s0
 801414a:	ee33 1a45 	vsub.f32	s2, s6, s10
 801414e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8014152:	ee35 5a03 	vadd.f32	s10, s10, s6
 8014156:	ee34 0aa6 	vadd.f32	s0, s9, s13
 801415a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 801415e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8014162:	ee34 6a67 	vsub.f32	s12, s8, s15
 8014166:	ee75 4a87 	vadd.f32	s9, s11, s14
 801416a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 801416e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8014172:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014176:	ee71 5ae3 	vsub.f32	s11, s3, s7
 801417a:	44dc      	add	ip, fp
 801417c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8014180:	45e1      	cmp	r9, ip
 8014182:	ed86 8a00 	vstr	s16, [r6]
 8014186:	ed85 2a01 	vstr	s4, [r5, #4]
 801418a:	4456      	add	r6, sl
 801418c:	ed02 0a01 	vstr	s0, [r2, #-4]
 8014190:	4455      	add	r5, sl
 8014192:	edc0 6a00 	vstr	s13, [r0]
 8014196:	ed82 1a00 	vstr	s2, [r2]
 801419a:	ed80 5a01 	vstr	s10, [r0, #4]
 801419e:	4452      	add	r2, sl
 80141a0:	ed01 3a01 	vstr	s6, [r1, #-4]
 80141a4:	4450      	add	r0, sl
 80141a6:	edc7 2a00 	vstr	s5, [r7]
 80141aa:	edc4 4a00 	vstr	s9, [r4]
 80141ae:	ed83 7a00 	vstr	s14, [r3]
 80141b2:	edc1 5a00 	vstr	s11, [r1]
 80141b6:	edc7 3a01 	vstr	s7, [r7, #4]
 80141ba:	4451      	add	r1, sl
 80141bc:	ed84 6a01 	vstr	s12, [r4, #4]
 80141c0:	4457      	add	r7, sl
 80141c2:	edc3 7a01 	vstr	s15, [r3, #4]
 80141c6:	4454      	add	r4, sl
 80141c8:	4453      	add	r3, sl
 80141ca:	f63f af44 	bhi.w	8014056 <arm_radix8_butterfly_f32+0x86>
 80141ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141d0:	2b07      	cmp	r3, #7
 80141d2:	f240 81b7 	bls.w	8014544 <arm_radix8_butterfly_f32+0x574>
 80141d6:	9b06      	ldr	r3, [sp, #24]
 80141d8:	9903      	ldr	r1, [sp, #12]
 80141da:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80141dc:	9e05      	ldr	r6, [sp, #20]
 80141de:	9a04      	ldr	r2, [sp, #16]
 80141e0:	f103 0c08 	add.w	ip, r3, #8
 80141e4:	9b02      	ldr	r3, [sp, #8]
 80141e6:	3108      	adds	r1, #8
 80141e8:	f108 0808 	add.w	r8, r8, #8
 80141ec:	1841      	adds	r1, r0, r1
 80141ee:	3608      	adds	r6, #8
 80141f0:	330c      	adds	r3, #12
 80141f2:	4604      	mov	r4, r0
 80141f4:	4444      	add	r4, r8
 80141f6:	18c3      	adds	r3, r0, r3
 80141f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80141fa:	1981      	adds	r1, r0, r6
 80141fc:	f10e 0e08 	add.w	lr, lr, #8
 8014200:	3208      	adds	r2, #8
 8014202:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014204:	9107      	str	r1, [sp, #28]
 8014206:	4604      	mov	r4, r0
 8014208:	4601      	mov	r1, r0
 801420a:	9304      	str	r3, [sp, #16]
 801420c:	f100 030c 	add.w	r3, r0, #12
 8014210:	4474      	add	r4, lr
 8014212:	f04f 0801 	mov.w	r8, #1
 8014216:	1882      	adds	r2, r0, r2
 8014218:	4461      	add	r1, ip
 801421a:	9305      	str	r3, [sp, #20]
 801421c:	464b      	mov	r3, r9
 801421e:	940a      	str	r4, [sp, #40]	@ 0x28
 8014220:	46c1      	mov	r9, r8
 8014222:	9208      	str	r2, [sp, #32]
 8014224:	46d8      	mov	r8, fp
 8014226:	9106      	str	r1, [sp, #24]
 8014228:	f04f 0e00 	mov.w	lr, #0
 801422c:	469b      	mov	fp, r3
 801422e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014230:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014232:	449e      	add	lr, r3
 8014234:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8014238:	441a      	add	r2, r3
 801423a:	920e      	str	r2, [sp, #56]	@ 0x38
 801423c:	441a      	add	r2, r3
 801423e:	18d4      	adds	r4, r2, r3
 8014240:	18e5      	adds	r5, r4, r3
 8014242:	18ee      	adds	r6, r5, r3
 8014244:	18f7      	adds	r7, r6, r3
 8014246:	eb07 0c03 	add.w	ip, r7, r3
 801424a:	920d      	str	r2, [sp, #52]	@ 0x34
 801424c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8014250:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8014254:	910c      	str	r1, [sp, #48]	@ 0x30
 8014256:	4419      	add	r1, r3
 8014258:	9103      	str	r1, [sp, #12]
 801425a:	4419      	add	r1, r3
 801425c:	18ca      	adds	r2, r1, r3
 801425e:	9202      	str	r2, [sp, #8]
 8014260:	441a      	add	r2, r3
 8014262:	18d0      	adds	r0, r2, r3
 8014264:	ed92 ea01 	vldr	s28, [r2, #4]
 8014268:	9a02      	ldr	r2, [sp, #8]
 801426a:	edd4 7a00 	vldr	s15, [r4]
 801426e:	edd2 da01 	vldr	s27, [r2, #4]
 8014272:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014274:	ed91 da01 	vldr	s26, [r1, #4]
 8014278:	ed92 ca01 	vldr	s24, [r2, #4]
 801427c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801427e:	9903      	ldr	r1, [sp, #12]
 8014280:	edcd 7a03 	vstr	s15, [sp, #12]
 8014284:	edd2 7a00 	vldr	s15, [r2]
 8014288:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801428a:	edcd 7a02 	vstr	s15, [sp, #8]
 801428e:	edd2 7a00 	vldr	s15, [r2]
 8014292:	edd0 ea01 	vldr	s29, [r0, #4]
 8014296:	edd1 ca01 	vldr	s25, [r1, #4]
 801429a:	eddc ba00 	vldr	s23, [ip]
 801429e:	edd7 aa00 	vldr	s21, [r7]
 80142a2:	ed96 aa00 	vldr	s20, [r6]
 80142a6:	edd5 9a00 	vldr	s19, [r5]
 80142aa:	edcd 7a01 	vstr	s15, [sp, #4]
 80142ae:	4403      	add	r3, r0
 80142b0:	ed93 fa01 	vldr	s30, [r3, #4]
 80142b4:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80142b8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80142bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80142c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80142c4:	46cc      	mov	ip, r9
 80142c6:	e001      	b.n	80142cc <arm_radix8_butterfly_f32+0x2fc>
 80142c8:	3f3504f3 	.word	0x3f3504f3
 80142cc:	ed91 6a00 	vldr	s12, [r1]
 80142d0:	ed93 5a00 	vldr	s10, [r3]
 80142d4:	edd0 fa00 	vldr	s31, [r0]
 80142d8:	edd4 7a00 	vldr	s15, [r4]
 80142dc:	ed95 7a00 	vldr	s14, [r5]
 80142e0:	ed56 3a01 	vldr	s7, [r6, #-4]
 80142e4:	ed17 3a01 	vldr	s6, [r7, #-4]
 80142e8:	ed92 2a00 	vldr	s4, [r2]
 80142ec:	ed96 0a00 	vldr	s0, [r6]
 80142f0:	ee33 8a85 	vadd.f32	s16, s7, s10
 80142f4:	ee32 1a06 	vadd.f32	s2, s4, s12
 80142f8:	ee33 4a2f 	vadd.f32	s8, s6, s31
 80142fc:	ee77 4a87 	vadd.f32	s9, s15, s14
 8014300:	ee78 1a04 	vadd.f32	s3, s16, s8
 8014304:	ee71 6a24 	vadd.f32	s13, s2, s9
 8014308:	ee32 2a46 	vsub.f32	s4, s4, s12
 801430c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8014310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014314:	ed06 6a01 	vstr	s12, [r6, #-4]
 8014318:	edd4 8a01 	vldr	s17, [r4, #4]
 801431c:	ed92 9a01 	vldr	s18, [r2, #4]
 8014320:	edd7 0a00 	vldr	s1, [r7]
 8014324:	edd1 2a01 	vldr	s5, [r1, #4]
 8014328:	ed95 7a01 	vldr	s14, [r5, #4]
 801432c:	ed93 6a01 	vldr	s12, [r3, #4]
 8014330:	edd0 5a01 	vldr	s11, [r0, #4]
 8014334:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8014338:	ee33 3a6f 	vsub.f32	s6, s6, s31
 801433c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8014340:	ee78 fac7 	vsub.f32	s31, s17, s14
 8014344:	ee38 4a44 	vsub.f32	s8, s16, s8
 8014348:	ee38 7a87 	vadd.f32	s14, s17, s14
 801434c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8014350:	ee79 2a22 	vadd.f32	s5, s18, s5
 8014354:	ee32 9a27 	vadd.f32	s18, s4, s15
 8014358:	ee72 7a67 	vsub.f32	s15, s4, s15
 801435c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8014360:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8014364:	ee71 4a64 	vsub.f32	s9, s2, s9
 8014368:	ee35 5a2f 	vadd.f32	s10, s10, s31
 801436c:	ee32 1a08 	vadd.f32	s2, s4, s16
 8014370:	ee72 fa87 	vadd.f32	s31, s5, s14
 8014374:	ee32 2a48 	vsub.f32	s4, s4, s16
 8014378:	ee68 8a8b 	vmul.f32	s17, s17, s22
 801437c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8014380:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8014384:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8014388:	ee71 6ae6 	vsub.f32	s13, s3, s13
 801438c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8014390:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8014394:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8014398:	ee30 6a46 	vsub.f32	s12, s0, s12
 801439c:	ee74 0a22 	vadd.f32	s1, s8, s5
 80143a0:	ee36 0a28 	vadd.f32	s0, s12, s17
 80143a4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80143a8:	ee36 6a68 	vsub.f32	s12, s12, s17
 80143ac:	ee32 4a64 	vsub.f32	s8, s4, s9
 80143b0:	ee73 8a09 	vadd.f32	s17, s6, s18
 80143b4:	ee74 4a82 	vadd.f32	s9, s9, s4
 80143b8:	ee33 9a49 	vsub.f32	s18, s6, s18
 80143bc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80143c0:	ee35 3a85 	vadd.f32	s6, s11, s10
 80143c4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80143c8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80143cc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80143d0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80143d4:	ee30 7a68 	vsub.f32	s14, s0, s17
 80143d8:	ee35 8a03 	vadd.f32	s16, s10, s6
 80143dc:	ee38 0a80 	vadd.f32	s0, s17, s0
 80143e0:	ee73 3a82 	vadd.f32	s7, s7, s4
 80143e4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80143e8:	ed9d 2a01 	vldr	s4, [sp, #4]
 80143ec:	eddd 1a02 	vldr	s3, [sp, #8]
 80143f0:	ee35 5a43 	vsub.f32	s10, s10, s6
 80143f4:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80143f8:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80143fc:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8014400:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014404:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8014408:	ee76 5a49 	vsub.f32	s11, s12, s18
 801440c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8014410:	ee39 6a06 	vadd.f32	s12, s18, s12
 8014414:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8014418:	ee21 4a84 	vmul.f32	s8, s3, s8
 801441c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8014420:	ee22 7a07 	vmul.f32	s14, s4, s14
 8014424:	ee22 2a08 	vmul.f32	s4, s4, s16
 8014428:	ee2c 8a08 	vmul.f32	s16, s24, s16
 801442c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8014430:	ee31 1a09 	vadd.f32	s2, s2, s18
 8014434:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8014438:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 801443c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8014440:	ee37 7a48 	vsub.f32	s14, s14, s16
 8014444:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8014448:	ee2b 8a85 	vmul.f32	s16, s23, s10
 801444c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8014450:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8014454:	ee38 2a89 	vadd.f32	s4, s17, s18
 8014458:	ee2f 5a05 	vmul.f32	s10, s30, s10
 801445c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8014460:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8014464:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8014468:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 801446c:	eddd 5a03 	vldr	s11, [sp, #12]
 8014470:	edc6 fa00 	vstr	s31, [r6]
 8014474:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8014478:	ee74 2ae2 	vsub.f32	s5, s9, s5
 801447c:	ee30 0a45 	vsub.f32	s0, s0, s10
 8014480:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8014484:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8014488:	ee2d 5a06 	vmul.f32	s10, s26, s12
 801448c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8014490:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8014494:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014498:	ee74 4a89 	vadd.f32	s9, s9, s18
 801449c:	ee34 3a43 	vsub.f32	s6, s8, s6
 80144a0:	ee78 8a85 	vadd.f32	s17, s17, s10
 80144a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80144a8:	44c4      	add	ip, r8
 80144aa:	45e3      	cmp	fp, ip
 80144ac:	edc3 3a00 	vstr	s7, [r3]
 80144b0:	edc3 6a01 	vstr	s13, [r3, #4]
 80144b4:	4456      	add	r6, sl
 80144b6:	ed07 1a01 	vstr	s2, [r7, #-4]
 80144ba:	edc7 0a00 	vstr	s1, [r7]
 80144be:	4453      	add	r3, sl
 80144c0:	ed80 2a00 	vstr	s4, [r0]
 80144c4:	edc0 2a01 	vstr	s5, [r0, #4]
 80144c8:	4457      	add	r7, sl
 80144ca:	edc2 1a00 	vstr	s3, [r2]
 80144ce:	ed82 7a01 	vstr	s14, [r2, #4]
 80144d2:	4450      	add	r0, sl
 80144d4:	ed85 8a00 	vstr	s16, [r5]
 80144d8:	ed85 0a01 	vstr	s0, [r5, #4]
 80144dc:	4452      	add	r2, sl
 80144de:	edc1 4a00 	vstr	s9, [r1]
 80144e2:	4455      	add	r5, sl
 80144e4:	ed81 3a01 	vstr	s6, [r1, #4]
 80144e8:	edc4 8a00 	vstr	s17, [r4]
 80144ec:	ed84 6a01 	vstr	s12, [r4, #4]
 80144f0:	4451      	add	r1, sl
 80144f2:	4454      	add	r4, sl
 80144f4:	f63f aeea 	bhi.w	80142cc <arm_radix8_butterfly_f32+0x2fc>
 80144f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80144fa:	3308      	adds	r3, #8
 80144fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80144fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014500:	3308      	adds	r3, #8
 8014502:	930a      	str	r3, [sp, #40]	@ 0x28
 8014504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014506:	3308      	adds	r3, #8
 8014508:	9309      	str	r3, [sp, #36]	@ 0x24
 801450a:	9b08      	ldr	r3, [sp, #32]
 801450c:	3308      	adds	r3, #8
 801450e:	9308      	str	r3, [sp, #32]
 8014510:	9b07      	ldr	r3, [sp, #28]
 8014512:	3308      	adds	r3, #8
 8014514:	9307      	str	r3, [sp, #28]
 8014516:	9b06      	ldr	r3, [sp, #24]
 8014518:	3308      	adds	r3, #8
 801451a:	9306      	str	r3, [sp, #24]
 801451c:	9b05      	ldr	r3, [sp, #20]
 801451e:	3308      	adds	r3, #8
 8014520:	9305      	str	r3, [sp, #20]
 8014522:	9b04      	ldr	r3, [sp, #16]
 8014524:	3308      	adds	r3, #8
 8014526:	9304      	str	r3, [sp, #16]
 8014528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801452a:	f109 0901 	add.w	r9, r9, #1
 801452e:	454b      	cmp	r3, r9
 8014530:	f47f ae7d 	bne.w	801422e <arm_radix8_butterfly_f32+0x25e>
 8014534:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014536:	00db      	lsls	r3, r3, #3
 8014538:	b29b      	uxth	r3, r3
 801453a:	46d9      	mov	r9, fp
 801453c:	9310      	str	r3, [sp, #64]	@ 0x40
 801453e:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8014542:	e554      	b.n	8013fee <arm_radix8_butterfly_f32+0x1e>
 8014544:	b015      	add	sp, #84	@ 0x54
 8014546:	ecbd 8b10 	vpop	{d8-d15}
 801454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801454e:	bf00      	nop

08014550 <__cvt>:
 8014550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014554:	ec57 6b10 	vmov	r6, r7, d0
 8014558:	2f00      	cmp	r7, #0
 801455a:	460c      	mov	r4, r1
 801455c:	4619      	mov	r1, r3
 801455e:	463b      	mov	r3, r7
 8014560:	bfbb      	ittet	lt
 8014562:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8014566:	461f      	movlt	r7, r3
 8014568:	2300      	movge	r3, #0
 801456a:	232d      	movlt	r3, #45	@ 0x2d
 801456c:	700b      	strb	r3, [r1, #0]
 801456e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014570:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8014574:	4691      	mov	r9, r2
 8014576:	f023 0820 	bic.w	r8, r3, #32
 801457a:	bfbc      	itt	lt
 801457c:	4632      	movlt	r2, r6
 801457e:	4616      	movlt	r6, r2
 8014580:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014584:	d005      	beq.n	8014592 <__cvt+0x42>
 8014586:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801458a:	d100      	bne.n	801458e <__cvt+0x3e>
 801458c:	3401      	adds	r4, #1
 801458e:	2102      	movs	r1, #2
 8014590:	e000      	b.n	8014594 <__cvt+0x44>
 8014592:	2103      	movs	r1, #3
 8014594:	ab03      	add	r3, sp, #12
 8014596:	9301      	str	r3, [sp, #4]
 8014598:	ab02      	add	r3, sp, #8
 801459a:	9300      	str	r3, [sp, #0]
 801459c:	ec47 6b10 	vmov	d0, r6, r7
 80145a0:	4653      	mov	r3, sl
 80145a2:	4622      	mov	r2, r4
 80145a4:	f001 fa04 	bl	80159b0 <_dtoa_r>
 80145a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80145ac:	4605      	mov	r5, r0
 80145ae:	d119      	bne.n	80145e4 <__cvt+0x94>
 80145b0:	f019 0f01 	tst.w	r9, #1
 80145b4:	d00e      	beq.n	80145d4 <__cvt+0x84>
 80145b6:	eb00 0904 	add.w	r9, r0, r4
 80145ba:	2200      	movs	r2, #0
 80145bc:	2300      	movs	r3, #0
 80145be:	4630      	mov	r0, r6
 80145c0:	4639      	mov	r1, r7
 80145c2:	f7ec fa89 	bl	8000ad8 <__aeabi_dcmpeq>
 80145c6:	b108      	cbz	r0, 80145cc <__cvt+0x7c>
 80145c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80145cc:	2230      	movs	r2, #48	@ 0x30
 80145ce:	9b03      	ldr	r3, [sp, #12]
 80145d0:	454b      	cmp	r3, r9
 80145d2:	d31e      	bcc.n	8014612 <__cvt+0xc2>
 80145d4:	9b03      	ldr	r3, [sp, #12]
 80145d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80145d8:	1b5b      	subs	r3, r3, r5
 80145da:	4628      	mov	r0, r5
 80145dc:	6013      	str	r3, [r2, #0]
 80145de:	b004      	add	sp, #16
 80145e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80145e8:	eb00 0904 	add.w	r9, r0, r4
 80145ec:	d1e5      	bne.n	80145ba <__cvt+0x6a>
 80145ee:	7803      	ldrb	r3, [r0, #0]
 80145f0:	2b30      	cmp	r3, #48	@ 0x30
 80145f2:	d10a      	bne.n	801460a <__cvt+0xba>
 80145f4:	2200      	movs	r2, #0
 80145f6:	2300      	movs	r3, #0
 80145f8:	4630      	mov	r0, r6
 80145fa:	4639      	mov	r1, r7
 80145fc:	f7ec fa6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8014600:	b918      	cbnz	r0, 801460a <__cvt+0xba>
 8014602:	f1c4 0401 	rsb	r4, r4, #1
 8014606:	f8ca 4000 	str.w	r4, [sl]
 801460a:	f8da 3000 	ldr.w	r3, [sl]
 801460e:	4499      	add	r9, r3
 8014610:	e7d3      	b.n	80145ba <__cvt+0x6a>
 8014612:	1c59      	adds	r1, r3, #1
 8014614:	9103      	str	r1, [sp, #12]
 8014616:	701a      	strb	r2, [r3, #0]
 8014618:	e7d9      	b.n	80145ce <__cvt+0x7e>

0801461a <__exponent>:
 801461a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801461c:	2900      	cmp	r1, #0
 801461e:	bfba      	itte	lt
 8014620:	4249      	neglt	r1, r1
 8014622:	232d      	movlt	r3, #45	@ 0x2d
 8014624:	232b      	movge	r3, #43	@ 0x2b
 8014626:	2909      	cmp	r1, #9
 8014628:	7002      	strb	r2, [r0, #0]
 801462a:	7043      	strb	r3, [r0, #1]
 801462c:	dd29      	ble.n	8014682 <__exponent+0x68>
 801462e:	f10d 0307 	add.w	r3, sp, #7
 8014632:	461d      	mov	r5, r3
 8014634:	270a      	movs	r7, #10
 8014636:	461a      	mov	r2, r3
 8014638:	fbb1 f6f7 	udiv	r6, r1, r7
 801463c:	fb07 1416 	mls	r4, r7, r6, r1
 8014640:	3430      	adds	r4, #48	@ 0x30
 8014642:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014646:	460c      	mov	r4, r1
 8014648:	2c63      	cmp	r4, #99	@ 0x63
 801464a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801464e:	4631      	mov	r1, r6
 8014650:	dcf1      	bgt.n	8014636 <__exponent+0x1c>
 8014652:	3130      	adds	r1, #48	@ 0x30
 8014654:	1e94      	subs	r4, r2, #2
 8014656:	f803 1c01 	strb.w	r1, [r3, #-1]
 801465a:	1c41      	adds	r1, r0, #1
 801465c:	4623      	mov	r3, r4
 801465e:	42ab      	cmp	r3, r5
 8014660:	d30a      	bcc.n	8014678 <__exponent+0x5e>
 8014662:	f10d 0309 	add.w	r3, sp, #9
 8014666:	1a9b      	subs	r3, r3, r2
 8014668:	42ac      	cmp	r4, r5
 801466a:	bf88      	it	hi
 801466c:	2300      	movhi	r3, #0
 801466e:	3302      	adds	r3, #2
 8014670:	4403      	add	r3, r0
 8014672:	1a18      	subs	r0, r3, r0
 8014674:	b003      	add	sp, #12
 8014676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014678:	f813 6b01 	ldrb.w	r6, [r3], #1
 801467c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014680:	e7ed      	b.n	801465e <__exponent+0x44>
 8014682:	2330      	movs	r3, #48	@ 0x30
 8014684:	3130      	adds	r1, #48	@ 0x30
 8014686:	7083      	strb	r3, [r0, #2]
 8014688:	70c1      	strb	r1, [r0, #3]
 801468a:	1d03      	adds	r3, r0, #4
 801468c:	e7f1      	b.n	8014672 <__exponent+0x58>
	...

08014690 <_printf_float>:
 8014690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014694:	b08d      	sub	sp, #52	@ 0x34
 8014696:	460c      	mov	r4, r1
 8014698:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801469c:	4616      	mov	r6, r2
 801469e:	461f      	mov	r7, r3
 80146a0:	4605      	mov	r5, r0
 80146a2:	f001 f819 	bl	80156d8 <_localeconv_r>
 80146a6:	6803      	ldr	r3, [r0, #0]
 80146a8:	9304      	str	r3, [sp, #16]
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7eb fde8 	bl	8000280 <strlen>
 80146b0:	2300      	movs	r3, #0
 80146b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80146b4:	f8d8 3000 	ldr.w	r3, [r8]
 80146b8:	9005      	str	r0, [sp, #20]
 80146ba:	3307      	adds	r3, #7
 80146bc:	f023 0307 	bic.w	r3, r3, #7
 80146c0:	f103 0208 	add.w	r2, r3, #8
 80146c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80146c8:	f8d4 b000 	ldr.w	fp, [r4]
 80146cc:	f8c8 2000 	str.w	r2, [r8]
 80146d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80146d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80146d8:	9307      	str	r3, [sp, #28]
 80146da:	f8cd 8018 	str.w	r8, [sp, #24]
 80146de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80146e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80146e6:	4b9c      	ldr	r3, [pc, #624]	@ (8014958 <_printf_float+0x2c8>)
 80146e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146ec:	f7ec fa26 	bl	8000b3c <__aeabi_dcmpun>
 80146f0:	bb70      	cbnz	r0, 8014750 <_printf_float+0xc0>
 80146f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80146f6:	4b98      	ldr	r3, [pc, #608]	@ (8014958 <_printf_float+0x2c8>)
 80146f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146fc:	f7ec fa00 	bl	8000b00 <__aeabi_dcmple>
 8014700:	bb30      	cbnz	r0, 8014750 <_printf_float+0xc0>
 8014702:	2200      	movs	r2, #0
 8014704:	2300      	movs	r3, #0
 8014706:	4640      	mov	r0, r8
 8014708:	4649      	mov	r1, r9
 801470a:	f7ec f9ef 	bl	8000aec <__aeabi_dcmplt>
 801470e:	b110      	cbz	r0, 8014716 <_printf_float+0x86>
 8014710:	232d      	movs	r3, #45	@ 0x2d
 8014712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014716:	4a91      	ldr	r2, [pc, #580]	@ (801495c <_printf_float+0x2cc>)
 8014718:	4b91      	ldr	r3, [pc, #580]	@ (8014960 <_printf_float+0x2d0>)
 801471a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801471e:	bf94      	ite	ls
 8014720:	4690      	movls	r8, r2
 8014722:	4698      	movhi	r8, r3
 8014724:	2303      	movs	r3, #3
 8014726:	6123      	str	r3, [r4, #16]
 8014728:	f02b 0304 	bic.w	r3, fp, #4
 801472c:	6023      	str	r3, [r4, #0]
 801472e:	f04f 0900 	mov.w	r9, #0
 8014732:	9700      	str	r7, [sp, #0]
 8014734:	4633      	mov	r3, r6
 8014736:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014738:	4621      	mov	r1, r4
 801473a:	4628      	mov	r0, r5
 801473c:	f000 f9d2 	bl	8014ae4 <_printf_common>
 8014740:	3001      	adds	r0, #1
 8014742:	f040 808d 	bne.w	8014860 <_printf_float+0x1d0>
 8014746:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801474a:	b00d      	add	sp, #52	@ 0x34
 801474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014750:	4642      	mov	r2, r8
 8014752:	464b      	mov	r3, r9
 8014754:	4640      	mov	r0, r8
 8014756:	4649      	mov	r1, r9
 8014758:	f7ec f9f0 	bl	8000b3c <__aeabi_dcmpun>
 801475c:	b140      	cbz	r0, 8014770 <_printf_float+0xe0>
 801475e:	464b      	mov	r3, r9
 8014760:	2b00      	cmp	r3, #0
 8014762:	bfbc      	itt	lt
 8014764:	232d      	movlt	r3, #45	@ 0x2d
 8014766:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801476a:	4a7e      	ldr	r2, [pc, #504]	@ (8014964 <_printf_float+0x2d4>)
 801476c:	4b7e      	ldr	r3, [pc, #504]	@ (8014968 <_printf_float+0x2d8>)
 801476e:	e7d4      	b.n	801471a <_printf_float+0x8a>
 8014770:	6863      	ldr	r3, [r4, #4]
 8014772:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014776:	9206      	str	r2, [sp, #24]
 8014778:	1c5a      	adds	r2, r3, #1
 801477a:	d13b      	bne.n	80147f4 <_printf_float+0x164>
 801477c:	2306      	movs	r3, #6
 801477e:	6063      	str	r3, [r4, #4]
 8014780:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014784:	2300      	movs	r3, #0
 8014786:	6022      	str	r2, [r4, #0]
 8014788:	9303      	str	r3, [sp, #12]
 801478a:	ab0a      	add	r3, sp, #40	@ 0x28
 801478c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014790:	ab09      	add	r3, sp, #36	@ 0x24
 8014792:	9300      	str	r3, [sp, #0]
 8014794:	6861      	ldr	r1, [r4, #4]
 8014796:	ec49 8b10 	vmov	d0, r8, r9
 801479a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801479e:	4628      	mov	r0, r5
 80147a0:	f7ff fed6 	bl	8014550 <__cvt>
 80147a4:	9b06      	ldr	r3, [sp, #24]
 80147a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80147a8:	2b47      	cmp	r3, #71	@ 0x47
 80147aa:	4680      	mov	r8, r0
 80147ac:	d129      	bne.n	8014802 <_printf_float+0x172>
 80147ae:	1cc8      	adds	r0, r1, #3
 80147b0:	db02      	blt.n	80147b8 <_printf_float+0x128>
 80147b2:	6863      	ldr	r3, [r4, #4]
 80147b4:	4299      	cmp	r1, r3
 80147b6:	dd41      	ble.n	801483c <_printf_float+0x1ac>
 80147b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80147bc:	fa5f fa8a 	uxtb.w	sl, sl
 80147c0:	3901      	subs	r1, #1
 80147c2:	4652      	mov	r2, sl
 80147c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80147c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80147ca:	f7ff ff26 	bl	801461a <__exponent>
 80147ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80147d0:	1813      	adds	r3, r2, r0
 80147d2:	2a01      	cmp	r2, #1
 80147d4:	4681      	mov	r9, r0
 80147d6:	6123      	str	r3, [r4, #16]
 80147d8:	dc02      	bgt.n	80147e0 <_printf_float+0x150>
 80147da:	6822      	ldr	r2, [r4, #0]
 80147dc:	07d2      	lsls	r2, r2, #31
 80147de:	d501      	bpl.n	80147e4 <_printf_float+0x154>
 80147e0:	3301      	adds	r3, #1
 80147e2:	6123      	str	r3, [r4, #16]
 80147e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d0a2      	beq.n	8014732 <_printf_float+0xa2>
 80147ec:	232d      	movs	r3, #45	@ 0x2d
 80147ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80147f2:	e79e      	b.n	8014732 <_printf_float+0xa2>
 80147f4:	9a06      	ldr	r2, [sp, #24]
 80147f6:	2a47      	cmp	r2, #71	@ 0x47
 80147f8:	d1c2      	bne.n	8014780 <_printf_float+0xf0>
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d1c0      	bne.n	8014780 <_printf_float+0xf0>
 80147fe:	2301      	movs	r3, #1
 8014800:	e7bd      	b.n	801477e <_printf_float+0xee>
 8014802:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014806:	d9db      	bls.n	80147c0 <_printf_float+0x130>
 8014808:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801480c:	d118      	bne.n	8014840 <_printf_float+0x1b0>
 801480e:	2900      	cmp	r1, #0
 8014810:	6863      	ldr	r3, [r4, #4]
 8014812:	dd0b      	ble.n	801482c <_printf_float+0x19c>
 8014814:	6121      	str	r1, [r4, #16]
 8014816:	b913      	cbnz	r3, 801481e <_printf_float+0x18e>
 8014818:	6822      	ldr	r2, [r4, #0]
 801481a:	07d0      	lsls	r0, r2, #31
 801481c:	d502      	bpl.n	8014824 <_printf_float+0x194>
 801481e:	3301      	adds	r3, #1
 8014820:	440b      	add	r3, r1
 8014822:	6123      	str	r3, [r4, #16]
 8014824:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014826:	f04f 0900 	mov.w	r9, #0
 801482a:	e7db      	b.n	80147e4 <_printf_float+0x154>
 801482c:	b913      	cbnz	r3, 8014834 <_printf_float+0x1a4>
 801482e:	6822      	ldr	r2, [r4, #0]
 8014830:	07d2      	lsls	r2, r2, #31
 8014832:	d501      	bpl.n	8014838 <_printf_float+0x1a8>
 8014834:	3302      	adds	r3, #2
 8014836:	e7f4      	b.n	8014822 <_printf_float+0x192>
 8014838:	2301      	movs	r3, #1
 801483a:	e7f2      	b.n	8014822 <_printf_float+0x192>
 801483c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014842:	4299      	cmp	r1, r3
 8014844:	db05      	blt.n	8014852 <_printf_float+0x1c2>
 8014846:	6823      	ldr	r3, [r4, #0]
 8014848:	6121      	str	r1, [r4, #16]
 801484a:	07d8      	lsls	r0, r3, #31
 801484c:	d5ea      	bpl.n	8014824 <_printf_float+0x194>
 801484e:	1c4b      	adds	r3, r1, #1
 8014850:	e7e7      	b.n	8014822 <_printf_float+0x192>
 8014852:	2900      	cmp	r1, #0
 8014854:	bfd4      	ite	le
 8014856:	f1c1 0202 	rsble	r2, r1, #2
 801485a:	2201      	movgt	r2, #1
 801485c:	4413      	add	r3, r2
 801485e:	e7e0      	b.n	8014822 <_printf_float+0x192>
 8014860:	6823      	ldr	r3, [r4, #0]
 8014862:	055a      	lsls	r2, r3, #21
 8014864:	d407      	bmi.n	8014876 <_printf_float+0x1e6>
 8014866:	6923      	ldr	r3, [r4, #16]
 8014868:	4642      	mov	r2, r8
 801486a:	4631      	mov	r1, r6
 801486c:	4628      	mov	r0, r5
 801486e:	47b8      	blx	r7
 8014870:	3001      	adds	r0, #1
 8014872:	d12b      	bne.n	80148cc <_printf_float+0x23c>
 8014874:	e767      	b.n	8014746 <_printf_float+0xb6>
 8014876:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801487a:	f240 80dd 	bls.w	8014a38 <_printf_float+0x3a8>
 801487e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014882:	2200      	movs	r2, #0
 8014884:	2300      	movs	r3, #0
 8014886:	f7ec f927 	bl	8000ad8 <__aeabi_dcmpeq>
 801488a:	2800      	cmp	r0, #0
 801488c:	d033      	beq.n	80148f6 <_printf_float+0x266>
 801488e:	4a37      	ldr	r2, [pc, #220]	@ (801496c <_printf_float+0x2dc>)
 8014890:	2301      	movs	r3, #1
 8014892:	4631      	mov	r1, r6
 8014894:	4628      	mov	r0, r5
 8014896:	47b8      	blx	r7
 8014898:	3001      	adds	r0, #1
 801489a:	f43f af54 	beq.w	8014746 <_printf_float+0xb6>
 801489e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80148a2:	4543      	cmp	r3, r8
 80148a4:	db02      	blt.n	80148ac <_printf_float+0x21c>
 80148a6:	6823      	ldr	r3, [r4, #0]
 80148a8:	07d8      	lsls	r0, r3, #31
 80148aa:	d50f      	bpl.n	80148cc <_printf_float+0x23c>
 80148ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80148b0:	4631      	mov	r1, r6
 80148b2:	4628      	mov	r0, r5
 80148b4:	47b8      	blx	r7
 80148b6:	3001      	adds	r0, #1
 80148b8:	f43f af45 	beq.w	8014746 <_printf_float+0xb6>
 80148bc:	f04f 0900 	mov.w	r9, #0
 80148c0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80148c4:	f104 0a1a 	add.w	sl, r4, #26
 80148c8:	45c8      	cmp	r8, r9
 80148ca:	dc09      	bgt.n	80148e0 <_printf_float+0x250>
 80148cc:	6823      	ldr	r3, [r4, #0]
 80148ce:	079b      	lsls	r3, r3, #30
 80148d0:	f100 8103 	bmi.w	8014ada <_printf_float+0x44a>
 80148d4:	68e0      	ldr	r0, [r4, #12]
 80148d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80148d8:	4298      	cmp	r0, r3
 80148da:	bfb8      	it	lt
 80148dc:	4618      	movlt	r0, r3
 80148de:	e734      	b.n	801474a <_printf_float+0xba>
 80148e0:	2301      	movs	r3, #1
 80148e2:	4652      	mov	r2, sl
 80148e4:	4631      	mov	r1, r6
 80148e6:	4628      	mov	r0, r5
 80148e8:	47b8      	blx	r7
 80148ea:	3001      	adds	r0, #1
 80148ec:	f43f af2b 	beq.w	8014746 <_printf_float+0xb6>
 80148f0:	f109 0901 	add.w	r9, r9, #1
 80148f4:	e7e8      	b.n	80148c8 <_printf_float+0x238>
 80148f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	dc39      	bgt.n	8014970 <_printf_float+0x2e0>
 80148fc:	4a1b      	ldr	r2, [pc, #108]	@ (801496c <_printf_float+0x2dc>)
 80148fe:	2301      	movs	r3, #1
 8014900:	4631      	mov	r1, r6
 8014902:	4628      	mov	r0, r5
 8014904:	47b8      	blx	r7
 8014906:	3001      	adds	r0, #1
 8014908:	f43f af1d 	beq.w	8014746 <_printf_float+0xb6>
 801490c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014910:	ea59 0303 	orrs.w	r3, r9, r3
 8014914:	d102      	bne.n	801491c <_printf_float+0x28c>
 8014916:	6823      	ldr	r3, [r4, #0]
 8014918:	07d9      	lsls	r1, r3, #31
 801491a:	d5d7      	bpl.n	80148cc <_printf_float+0x23c>
 801491c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014920:	4631      	mov	r1, r6
 8014922:	4628      	mov	r0, r5
 8014924:	47b8      	blx	r7
 8014926:	3001      	adds	r0, #1
 8014928:	f43f af0d 	beq.w	8014746 <_printf_float+0xb6>
 801492c:	f04f 0a00 	mov.w	sl, #0
 8014930:	f104 0b1a 	add.w	fp, r4, #26
 8014934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014936:	425b      	negs	r3, r3
 8014938:	4553      	cmp	r3, sl
 801493a:	dc01      	bgt.n	8014940 <_printf_float+0x2b0>
 801493c:	464b      	mov	r3, r9
 801493e:	e793      	b.n	8014868 <_printf_float+0x1d8>
 8014940:	2301      	movs	r3, #1
 8014942:	465a      	mov	r2, fp
 8014944:	4631      	mov	r1, r6
 8014946:	4628      	mov	r0, r5
 8014948:	47b8      	blx	r7
 801494a:	3001      	adds	r0, #1
 801494c:	f43f aefb 	beq.w	8014746 <_printf_float+0xb6>
 8014950:	f10a 0a01 	add.w	sl, sl, #1
 8014954:	e7ee      	b.n	8014934 <_printf_float+0x2a4>
 8014956:	bf00      	nop
 8014958:	7fefffff 	.word	0x7fefffff
 801495c:	0802e6a0 	.word	0x0802e6a0
 8014960:	0802e6a4 	.word	0x0802e6a4
 8014964:	0802e6a8 	.word	0x0802e6a8
 8014968:	0802e6ac 	.word	0x0802e6ac
 801496c:	0802e6b0 	.word	0x0802e6b0
 8014970:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014972:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014976:	4553      	cmp	r3, sl
 8014978:	bfa8      	it	ge
 801497a:	4653      	movge	r3, sl
 801497c:	2b00      	cmp	r3, #0
 801497e:	4699      	mov	r9, r3
 8014980:	dc36      	bgt.n	80149f0 <_printf_float+0x360>
 8014982:	f04f 0b00 	mov.w	fp, #0
 8014986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801498a:	f104 021a 	add.w	r2, r4, #26
 801498e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014990:	9306      	str	r3, [sp, #24]
 8014992:	eba3 0309 	sub.w	r3, r3, r9
 8014996:	455b      	cmp	r3, fp
 8014998:	dc31      	bgt.n	80149fe <_printf_float+0x36e>
 801499a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801499c:	459a      	cmp	sl, r3
 801499e:	dc3a      	bgt.n	8014a16 <_printf_float+0x386>
 80149a0:	6823      	ldr	r3, [r4, #0]
 80149a2:	07da      	lsls	r2, r3, #31
 80149a4:	d437      	bmi.n	8014a16 <_printf_float+0x386>
 80149a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149a8:	ebaa 0903 	sub.w	r9, sl, r3
 80149ac:	9b06      	ldr	r3, [sp, #24]
 80149ae:	ebaa 0303 	sub.w	r3, sl, r3
 80149b2:	4599      	cmp	r9, r3
 80149b4:	bfa8      	it	ge
 80149b6:	4699      	movge	r9, r3
 80149b8:	f1b9 0f00 	cmp.w	r9, #0
 80149bc:	dc33      	bgt.n	8014a26 <_printf_float+0x396>
 80149be:	f04f 0800 	mov.w	r8, #0
 80149c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80149c6:	f104 0b1a 	add.w	fp, r4, #26
 80149ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149cc:	ebaa 0303 	sub.w	r3, sl, r3
 80149d0:	eba3 0309 	sub.w	r3, r3, r9
 80149d4:	4543      	cmp	r3, r8
 80149d6:	f77f af79 	ble.w	80148cc <_printf_float+0x23c>
 80149da:	2301      	movs	r3, #1
 80149dc:	465a      	mov	r2, fp
 80149de:	4631      	mov	r1, r6
 80149e0:	4628      	mov	r0, r5
 80149e2:	47b8      	blx	r7
 80149e4:	3001      	adds	r0, #1
 80149e6:	f43f aeae 	beq.w	8014746 <_printf_float+0xb6>
 80149ea:	f108 0801 	add.w	r8, r8, #1
 80149ee:	e7ec      	b.n	80149ca <_printf_float+0x33a>
 80149f0:	4642      	mov	r2, r8
 80149f2:	4631      	mov	r1, r6
 80149f4:	4628      	mov	r0, r5
 80149f6:	47b8      	blx	r7
 80149f8:	3001      	adds	r0, #1
 80149fa:	d1c2      	bne.n	8014982 <_printf_float+0x2f2>
 80149fc:	e6a3      	b.n	8014746 <_printf_float+0xb6>
 80149fe:	2301      	movs	r3, #1
 8014a00:	4631      	mov	r1, r6
 8014a02:	4628      	mov	r0, r5
 8014a04:	9206      	str	r2, [sp, #24]
 8014a06:	47b8      	blx	r7
 8014a08:	3001      	adds	r0, #1
 8014a0a:	f43f ae9c 	beq.w	8014746 <_printf_float+0xb6>
 8014a0e:	9a06      	ldr	r2, [sp, #24]
 8014a10:	f10b 0b01 	add.w	fp, fp, #1
 8014a14:	e7bb      	b.n	801498e <_printf_float+0x2fe>
 8014a16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a1a:	4631      	mov	r1, r6
 8014a1c:	4628      	mov	r0, r5
 8014a1e:	47b8      	blx	r7
 8014a20:	3001      	adds	r0, #1
 8014a22:	d1c0      	bne.n	80149a6 <_printf_float+0x316>
 8014a24:	e68f      	b.n	8014746 <_printf_float+0xb6>
 8014a26:	9a06      	ldr	r2, [sp, #24]
 8014a28:	464b      	mov	r3, r9
 8014a2a:	4442      	add	r2, r8
 8014a2c:	4631      	mov	r1, r6
 8014a2e:	4628      	mov	r0, r5
 8014a30:	47b8      	blx	r7
 8014a32:	3001      	adds	r0, #1
 8014a34:	d1c3      	bne.n	80149be <_printf_float+0x32e>
 8014a36:	e686      	b.n	8014746 <_printf_float+0xb6>
 8014a38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014a3c:	f1ba 0f01 	cmp.w	sl, #1
 8014a40:	dc01      	bgt.n	8014a46 <_printf_float+0x3b6>
 8014a42:	07db      	lsls	r3, r3, #31
 8014a44:	d536      	bpl.n	8014ab4 <_printf_float+0x424>
 8014a46:	2301      	movs	r3, #1
 8014a48:	4642      	mov	r2, r8
 8014a4a:	4631      	mov	r1, r6
 8014a4c:	4628      	mov	r0, r5
 8014a4e:	47b8      	blx	r7
 8014a50:	3001      	adds	r0, #1
 8014a52:	f43f ae78 	beq.w	8014746 <_printf_float+0xb6>
 8014a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a5a:	4631      	mov	r1, r6
 8014a5c:	4628      	mov	r0, r5
 8014a5e:	47b8      	blx	r7
 8014a60:	3001      	adds	r0, #1
 8014a62:	f43f ae70 	beq.w	8014746 <_printf_float+0xb6>
 8014a66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8014a72:	f7ec f831 	bl	8000ad8 <__aeabi_dcmpeq>
 8014a76:	b9c0      	cbnz	r0, 8014aaa <_printf_float+0x41a>
 8014a78:	4653      	mov	r3, sl
 8014a7a:	f108 0201 	add.w	r2, r8, #1
 8014a7e:	4631      	mov	r1, r6
 8014a80:	4628      	mov	r0, r5
 8014a82:	47b8      	blx	r7
 8014a84:	3001      	adds	r0, #1
 8014a86:	d10c      	bne.n	8014aa2 <_printf_float+0x412>
 8014a88:	e65d      	b.n	8014746 <_printf_float+0xb6>
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	465a      	mov	r2, fp
 8014a8e:	4631      	mov	r1, r6
 8014a90:	4628      	mov	r0, r5
 8014a92:	47b8      	blx	r7
 8014a94:	3001      	adds	r0, #1
 8014a96:	f43f ae56 	beq.w	8014746 <_printf_float+0xb6>
 8014a9a:	f108 0801 	add.w	r8, r8, #1
 8014a9e:	45d0      	cmp	r8, sl
 8014aa0:	dbf3      	blt.n	8014a8a <_printf_float+0x3fa>
 8014aa2:	464b      	mov	r3, r9
 8014aa4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014aa8:	e6df      	b.n	801486a <_printf_float+0x1da>
 8014aaa:	f04f 0800 	mov.w	r8, #0
 8014aae:	f104 0b1a 	add.w	fp, r4, #26
 8014ab2:	e7f4      	b.n	8014a9e <_printf_float+0x40e>
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	4642      	mov	r2, r8
 8014ab8:	e7e1      	b.n	8014a7e <_printf_float+0x3ee>
 8014aba:	2301      	movs	r3, #1
 8014abc:	464a      	mov	r2, r9
 8014abe:	4631      	mov	r1, r6
 8014ac0:	4628      	mov	r0, r5
 8014ac2:	47b8      	blx	r7
 8014ac4:	3001      	adds	r0, #1
 8014ac6:	f43f ae3e 	beq.w	8014746 <_printf_float+0xb6>
 8014aca:	f108 0801 	add.w	r8, r8, #1
 8014ace:	68e3      	ldr	r3, [r4, #12]
 8014ad0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014ad2:	1a5b      	subs	r3, r3, r1
 8014ad4:	4543      	cmp	r3, r8
 8014ad6:	dcf0      	bgt.n	8014aba <_printf_float+0x42a>
 8014ad8:	e6fc      	b.n	80148d4 <_printf_float+0x244>
 8014ada:	f04f 0800 	mov.w	r8, #0
 8014ade:	f104 0919 	add.w	r9, r4, #25
 8014ae2:	e7f4      	b.n	8014ace <_printf_float+0x43e>

08014ae4 <_printf_common>:
 8014ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ae8:	4616      	mov	r6, r2
 8014aea:	4698      	mov	r8, r3
 8014aec:	688a      	ldr	r2, [r1, #8]
 8014aee:	690b      	ldr	r3, [r1, #16]
 8014af0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014af4:	4293      	cmp	r3, r2
 8014af6:	bfb8      	it	lt
 8014af8:	4613      	movlt	r3, r2
 8014afa:	6033      	str	r3, [r6, #0]
 8014afc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014b00:	4607      	mov	r7, r0
 8014b02:	460c      	mov	r4, r1
 8014b04:	b10a      	cbz	r2, 8014b0a <_printf_common+0x26>
 8014b06:	3301      	adds	r3, #1
 8014b08:	6033      	str	r3, [r6, #0]
 8014b0a:	6823      	ldr	r3, [r4, #0]
 8014b0c:	0699      	lsls	r1, r3, #26
 8014b0e:	bf42      	ittt	mi
 8014b10:	6833      	ldrmi	r3, [r6, #0]
 8014b12:	3302      	addmi	r3, #2
 8014b14:	6033      	strmi	r3, [r6, #0]
 8014b16:	6825      	ldr	r5, [r4, #0]
 8014b18:	f015 0506 	ands.w	r5, r5, #6
 8014b1c:	d106      	bne.n	8014b2c <_printf_common+0x48>
 8014b1e:	f104 0a19 	add.w	sl, r4, #25
 8014b22:	68e3      	ldr	r3, [r4, #12]
 8014b24:	6832      	ldr	r2, [r6, #0]
 8014b26:	1a9b      	subs	r3, r3, r2
 8014b28:	42ab      	cmp	r3, r5
 8014b2a:	dc26      	bgt.n	8014b7a <_printf_common+0x96>
 8014b2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014b30:	6822      	ldr	r2, [r4, #0]
 8014b32:	3b00      	subs	r3, #0
 8014b34:	bf18      	it	ne
 8014b36:	2301      	movne	r3, #1
 8014b38:	0692      	lsls	r2, r2, #26
 8014b3a:	d42b      	bmi.n	8014b94 <_printf_common+0xb0>
 8014b3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014b40:	4641      	mov	r1, r8
 8014b42:	4638      	mov	r0, r7
 8014b44:	47c8      	blx	r9
 8014b46:	3001      	adds	r0, #1
 8014b48:	d01e      	beq.n	8014b88 <_printf_common+0xa4>
 8014b4a:	6823      	ldr	r3, [r4, #0]
 8014b4c:	6922      	ldr	r2, [r4, #16]
 8014b4e:	f003 0306 	and.w	r3, r3, #6
 8014b52:	2b04      	cmp	r3, #4
 8014b54:	bf02      	ittt	eq
 8014b56:	68e5      	ldreq	r5, [r4, #12]
 8014b58:	6833      	ldreq	r3, [r6, #0]
 8014b5a:	1aed      	subeq	r5, r5, r3
 8014b5c:	68a3      	ldr	r3, [r4, #8]
 8014b5e:	bf0c      	ite	eq
 8014b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b64:	2500      	movne	r5, #0
 8014b66:	4293      	cmp	r3, r2
 8014b68:	bfc4      	itt	gt
 8014b6a:	1a9b      	subgt	r3, r3, r2
 8014b6c:	18ed      	addgt	r5, r5, r3
 8014b6e:	2600      	movs	r6, #0
 8014b70:	341a      	adds	r4, #26
 8014b72:	42b5      	cmp	r5, r6
 8014b74:	d11a      	bne.n	8014bac <_printf_common+0xc8>
 8014b76:	2000      	movs	r0, #0
 8014b78:	e008      	b.n	8014b8c <_printf_common+0xa8>
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	4652      	mov	r2, sl
 8014b7e:	4641      	mov	r1, r8
 8014b80:	4638      	mov	r0, r7
 8014b82:	47c8      	blx	r9
 8014b84:	3001      	adds	r0, #1
 8014b86:	d103      	bne.n	8014b90 <_printf_common+0xac>
 8014b88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b90:	3501      	adds	r5, #1
 8014b92:	e7c6      	b.n	8014b22 <_printf_common+0x3e>
 8014b94:	18e1      	adds	r1, r4, r3
 8014b96:	1c5a      	adds	r2, r3, #1
 8014b98:	2030      	movs	r0, #48	@ 0x30
 8014b9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014b9e:	4422      	add	r2, r4
 8014ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014ba4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014ba8:	3302      	adds	r3, #2
 8014baa:	e7c7      	b.n	8014b3c <_printf_common+0x58>
 8014bac:	2301      	movs	r3, #1
 8014bae:	4622      	mov	r2, r4
 8014bb0:	4641      	mov	r1, r8
 8014bb2:	4638      	mov	r0, r7
 8014bb4:	47c8      	blx	r9
 8014bb6:	3001      	adds	r0, #1
 8014bb8:	d0e6      	beq.n	8014b88 <_printf_common+0xa4>
 8014bba:	3601      	adds	r6, #1
 8014bbc:	e7d9      	b.n	8014b72 <_printf_common+0x8e>
	...

08014bc0 <_printf_i>:
 8014bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014bc4:	7e0f      	ldrb	r7, [r1, #24]
 8014bc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014bc8:	2f78      	cmp	r7, #120	@ 0x78
 8014bca:	4691      	mov	r9, r2
 8014bcc:	4680      	mov	r8, r0
 8014bce:	460c      	mov	r4, r1
 8014bd0:	469a      	mov	sl, r3
 8014bd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014bd6:	d807      	bhi.n	8014be8 <_printf_i+0x28>
 8014bd8:	2f62      	cmp	r7, #98	@ 0x62
 8014bda:	d80a      	bhi.n	8014bf2 <_printf_i+0x32>
 8014bdc:	2f00      	cmp	r7, #0
 8014bde:	f000 80d2 	beq.w	8014d86 <_printf_i+0x1c6>
 8014be2:	2f58      	cmp	r7, #88	@ 0x58
 8014be4:	f000 80b9 	beq.w	8014d5a <_printf_i+0x19a>
 8014be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014bec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014bf0:	e03a      	b.n	8014c68 <_printf_i+0xa8>
 8014bf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014bf6:	2b15      	cmp	r3, #21
 8014bf8:	d8f6      	bhi.n	8014be8 <_printf_i+0x28>
 8014bfa:	a101      	add	r1, pc, #4	@ (adr r1, 8014c00 <_printf_i+0x40>)
 8014bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014c00:	08014c59 	.word	0x08014c59
 8014c04:	08014c6d 	.word	0x08014c6d
 8014c08:	08014be9 	.word	0x08014be9
 8014c0c:	08014be9 	.word	0x08014be9
 8014c10:	08014be9 	.word	0x08014be9
 8014c14:	08014be9 	.word	0x08014be9
 8014c18:	08014c6d 	.word	0x08014c6d
 8014c1c:	08014be9 	.word	0x08014be9
 8014c20:	08014be9 	.word	0x08014be9
 8014c24:	08014be9 	.word	0x08014be9
 8014c28:	08014be9 	.word	0x08014be9
 8014c2c:	08014d6d 	.word	0x08014d6d
 8014c30:	08014c97 	.word	0x08014c97
 8014c34:	08014d27 	.word	0x08014d27
 8014c38:	08014be9 	.word	0x08014be9
 8014c3c:	08014be9 	.word	0x08014be9
 8014c40:	08014d8f 	.word	0x08014d8f
 8014c44:	08014be9 	.word	0x08014be9
 8014c48:	08014c97 	.word	0x08014c97
 8014c4c:	08014be9 	.word	0x08014be9
 8014c50:	08014be9 	.word	0x08014be9
 8014c54:	08014d2f 	.word	0x08014d2f
 8014c58:	6833      	ldr	r3, [r6, #0]
 8014c5a:	1d1a      	adds	r2, r3, #4
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	6032      	str	r2, [r6, #0]
 8014c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014c68:	2301      	movs	r3, #1
 8014c6a:	e09d      	b.n	8014da8 <_printf_i+0x1e8>
 8014c6c:	6833      	ldr	r3, [r6, #0]
 8014c6e:	6820      	ldr	r0, [r4, #0]
 8014c70:	1d19      	adds	r1, r3, #4
 8014c72:	6031      	str	r1, [r6, #0]
 8014c74:	0606      	lsls	r6, r0, #24
 8014c76:	d501      	bpl.n	8014c7c <_printf_i+0xbc>
 8014c78:	681d      	ldr	r5, [r3, #0]
 8014c7a:	e003      	b.n	8014c84 <_printf_i+0xc4>
 8014c7c:	0645      	lsls	r5, r0, #25
 8014c7e:	d5fb      	bpl.n	8014c78 <_printf_i+0xb8>
 8014c80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014c84:	2d00      	cmp	r5, #0
 8014c86:	da03      	bge.n	8014c90 <_printf_i+0xd0>
 8014c88:	232d      	movs	r3, #45	@ 0x2d
 8014c8a:	426d      	negs	r5, r5
 8014c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014c90:	4859      	ldr	r0, [pc, #356]	@ (8014df8 <_printf_i+0x238>)
 8014c92:	230a      	movs	r3, #10
 8014c94:	e011      	b.n	8014cba <_printf_i+0xfa>
 8014c96:	6821      	ldr	r1, [r4, #0]
 8014c98:	6833      	ldr	r3, [r6, #0]
 8014c9a:	0608      	lsls	r0, r1, #24
 8014c9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014ca0:	d402      	bmi.n	8014ca8 <_printf_i+0xe8>
 8014ca2:	0649      	lsls	r1, r1, #25
 8014ca4:	bf48      	it	mi
 8014ca6:	b2ad      	uxthmi	r5, r5
 8014ca8:	2f6f      	cmp	r7, #111	@ 0x6f
 8014caa:	4853      	ldr	r0, [pc, #332]	@ (8014df8 <_printf_i+0x238>)
 8014cac:	6033      	str	r3, [r6, #0]
 8014cae:	bf14      	ite	ne
 8014cb0:	230a      	movne	r3, #10
 8014cb2:	2308      	moveq	r3, #8
 8014cb4:	2100      	movs	r1, #0
 8014cb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014cba:	6866      	ldr	r6, [r4, #4]
 8014cbc:	60a6      	str	r6, [r4, #8]
 8014cbe:	2e00      	cmp	r6, #0
 8014cc0:	bfa2      	ittt	ge
 8014cc2:	6821      	ldrge	r1, [r4, #0]
 8014cc4:	f021 0104 	bicge.w	r1, r1, #4
 8014cc8:	6021      	strge	r1, [r4, #0]
 8014cca:	b90d      	cbnz	r5, 8014cd0 <_printf_i+0x110>
 8014ccc:	2e00      	cmp	r6, #0
 8014cce:	d04b      	beq.n	8014d68 <_printf_i+0x1a8>
 8014cd0:	4616      	mov	r6, r2
 8014cd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8014cd6:	fb03 5711 	mls	r7, r3, r1, r5
 8014cda:	5dc7      	ldrb	r7, [r0, r7]
 8014cdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014ce0:	462f      	mov	r7, r5
 8014ce2:	42bb      	cmp	r3, r7
 8014ce4:	460d      	mov	r5, r1
 8014ce6:	d9f4      	bls.n	8014cd2 <_printf_i+0x112>
 8014ce8:	2b08      	cmp	r3, #8
 8014cea:	d10b      	bne.n	8014d04 <_printf_i+0x144>
 8014cec:	6823      	ldr	r3, [r4, #0]
 8014cee:	07df      	lsls	r7, r3, #31
 8014cf0:	d508      	bpl.n	8014d04 <_printf_i+0x144>
 8014cf2:	6923      	ldr	r3, [r4, #16]
 8014cf4:	6861      	ldr	r1, [r4, #4]
 8014cf6:	4299      	cmp	r1, r3
 8014cf8:	bfde      	ittt	le
 8014cfa:	2330      	movle	r3, #48	@ 0x30
 8014cfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014d00:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8014d04:	1b92      	subs	r2, r2, r6
 8014d06:	6122      	str	r2, [r4, #16]
 8014d08:	f8cd a000 	str.w	sl, [sp]
 8014d0c:	464b      	mov	r3, r9
 8014d0e:	aa03      	add	r2, sp, #12
 8014d10:	4621      	mov	r1, r4
 8014d12:	4640      	mov	r0, r8
 8014d14:	f7ff fee6 	bl	8014ae4 <_printf_common>
 8014d18:	3001      	adds	r0, #1
 8014d1a:	d14a      	bne.n	8014db2 <_printf_i+0x1f2>
 8014d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d20:	b004      	add	sp, #16
 8014d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d26:	6823      	ldr	r3, [r4, #0]
 8014d28:	f043 0320 	orr.w	r3, r3, #32
 8014d2c:	6023      	str	r3, [r4, #0]
 8014d2e:	4833      	ldr	r0, [pc, #204]	@ (8014dfc <_printf_i+0x23c>)
 8014d30:	2778      	movs	r7, #120	@ 0x78
 8014d32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014d36:	6823      	ldr	r3, [r4, #0]
 8014d38:	6831      	ldr	r1, [r6, #0]
 8014d3a:	061f      	lsls	r7, r3, #24
 8014d3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8014d40:	d402      	bmi.n	8014d48 <_printf_i+0x188>
 8014d42:	065f      	lsls	r7, r3, #25
 8014d44:	bf48      	it	mi
 8014d46:	b2ad      	uxthmi	r5, r5
 8014d48:	6031      	str	r1, [r6, #0]
 8014d4a:	07d9      	lsls	r1, r3, #31
 8014d4c:	bf44      	itt	mi
 8014d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8014d52:	6023      	strmi	r3, [r4, #0]
 8014d54:	b11d      	cbz	r5, 8014d5e <_printf_i+0x19e>
 8014d56:	2310      	movs	r3, #16
 8014d58:	e7ac      	b.n	8014cb4 <_printf_i+0xf4>
 8014d5a:	4827      	ldr	r0, [pc, #156]	@ (8014df8 <_printf_i+0x238>)
 8014d5c:	e7e9      	b.n	8014d32 <_printf_i+0x172>
 8014d5e:	6823      	ldr	r3, [r4, #0]
 8014d60:	f023 0320 	bic.w	r3, r3, #32
 8014d64:	6023      	str	r3, [r4, #0]
 8014d66:	e7f6      	b.n	8014d56 <_printf_i+0x196>
 8014d68:	4616      	mov	r6, r2
 8014d6a:	e7bd      	b.n	8014ce8 <_printf_i+0x128>
 8014d6c:	6833      	ldr	r3, [r6, #0]
 8014d6e:	6825      	ldr	r5, [r4, #0]
 8014d70:	6961      	ldr	r1, [r4, #20]
 8014d72:	1d18      	adds	r0, r3, #4
 8014d74:	6030      	str	r0, [r6, #0]
 8014d76:	062e      	lsls	r6, r5, #24
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	d501      	bpl.n	8014d80 <_printf_i+0x1c0>
 8014d7c:	6019      	str	r1, [r3, #0]
 8014d7e:	e002      	b.n	8014d86 <_printf_i+0x1c6>
 8014d80:	0668      	lsls	r0, r5, #25
 8014d82:	d5fb      	bpl.n	8014d7c <_printf_i+0x1bc>
 8014d84:	8019      	strh	r1, [r3, #0]
 8014d86:	2300      	movs	r3, #0
 8014d88:	6123      	str	r3, [r4, #16]
 8014d8a:	4616      	mov	r6, r2
 8014d8c:	e7bc      	b.n	8014d08 <_printf_i+0x148>
 8014d8e:	6833      	ldr	r3, [r6, #0]
 8014d90:	1d1a      	adds	r2, r3, #4
 8014d92:	6032      	str	r2, [r6, #0]
 8014d94:	681e      	ldr	r6, [r3, #0]
 8014d96:	6862      	ldr	r2, [r4, #4]
 8014d98:	2100      	movs	r1, #0
 8014d9a:	4630      	mov	r0, r6
 8014d9c:	f7eb fa20 	bl	80001e0 <memchr>
 8014da0:	b108      	cbz	r0, 8014da6 <_printf_i+0x1e6>
 8014da2:	1b80      	subs	r0, r0, r6
 8014da4:	6060      	str	r0, [r4, #4]
 8014da6:	6863      	ldr	r3, [r4, #4]
 8014da8:	6123      	str	r3, [r4, #16]
 8014daa:	2300      	movs	r3, #0
 8014dac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014db0:	e7aa      	b.n	8014d08 <_printf_i+0x148>
 8014db2:	6923      	ldr	r3, [r4, #16]
 8014db4:	4632      	mov	r2, r6
 8014db6:	4649      	mov	r1, r9
 8014db8:	4640      	mov	r0, r8
 8014dba:	47d0      	blx	sl
 8014dbc:	3001      	adds	r0, #1
 8014dbe:	d0ad      	beq.n	8014d1c <_printf_i+0x15c>
 8014dc0:	6823      	ldr	r3, [r4, #0]
 8014dc2:	079b      	lsls	r3, r3, #30
 8014dc4:	d413      	bmi.n	8014dee <_printf_i+0x22e>
 8014dc6:	68e0      	ldr	r0, [r4, #12]
 8014dc8:	9b03      	ldr	r3, [sp, #12]
 8014dca:	4298      	cmp	r0, r3
 8014dcc:	bfb8      	it	lt
 8014dce:	4618      	movlt	r0, r3
 8014dd0:	e7a6      	b.n	8014d20 <_printf_i+0x160>
 8014dd2:	2301      	movs	r3, #1
 8014dd4:	4632      	mov	r2, r6
 8014dd6:	4649      	mov	r1, r9
 8014dd8:	4640      	mov	r0, r8
 8014dda:	47d0      	blx	sl
 8014ddc:	3001      	adds	r0, #1
 8014dde:	d09d      	beq.n	8014d1c <_printf_i+0x15c>
 8014de0:	3501      	adds	r5, #1
 8014de2:	68e3      	ldr	r3, [r4, #12]
 8014de4:	9903      	ldr	r1, [sp, #12]
 8014de6:	1a5b      	subs	r3, r3, r1
 8014de8:	42ab      	cmp	r3, r5
 8014dea:	dcf2      	bgt.n	8014dd2 <_printf_i+0x212>
 8014dec:	e7eb      	b.n	8014dc6 <_printf_i+0x206>
 8014dee:	2500      	movs	r5, #0
 8014df0:	f104 0619 	add.w	r6, r4, #25
 8014df4:	e7f5      	b.n	8014de2 <_printf_i+0x222>
 8014df6:	bf00      	nop
 8014df8:	0802e6b2 	.word	0x0802e6b2
 8014dfc:	0802e6c3 	.word	0x0802e6c3

08014e00 <_scanf_float>:
 8014e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e04:	b087      	sub	sp, #28
 8014e06:	4617      	mov	r7, r2
 8014e08:	9303      	str	r3, [sp, #12]
 8014e0a:	688b      	ldr	r3, [r1, #8]
 8014e0c:	1e5a      	subs	r2, r3, #1
 8014e0e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014e12:	bf81      	itttt	hi
 8014e14:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014e18:	eb03 0b05 	addhi.w	fp, r3, r5
 8014e1c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014e20:	608b      	strhi	r3, [r1, #8]
 8014e22:	680b      	ldr	r3, [r1, #0]
 8014e24:	460a      	mov	r2, r1
 8014e26:	f04f 0500 	mov.w	r5, #0
 8014e2a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014e2e:	f842 3b1c 	str.w	r3, [r2], #28
 8014e32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014e36:	4680      	mov	r8, r0
 8014e38:	460c      	mov	r4, r1
 8014e3a:	bf98      	it	ls
 8014e3c:	f04f 0b00 	movls.w	fp, #0
 8014e40:	9201      	str	r2, [sp, #4]
 8014e42:	4616      	mov	r6, r2
 8014e44:	46aa      	mov	sl, r5
 8014e46:	46a9      	mov	r9, r5
 8014e48:	9502      	str	r5, [sp, #8]
 8014e4a:	68a2      	ldr	r2, [r4, #8]
 8014e4c:	b152      	cbz	r2, 8014e64 <_scanf_float+0x64>
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	2b4e      	cmp	r3, #78	@ 0x4e
 8014e54:	d864      	bhi.n	8014f20 <_scanf_float+0x120>
 8014e56:	2b40      	cmp	r3, #64	@ 0x40
 8014e58:	d83c      	bhi.n	8014ed4 <_scanf_float+0xd4>
 8014e5a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014e5e:	b2c8      	uxtb	r0, r1
 8014e60:	280e      	cmp	r0, #14
 8014e62:	d93a      	bls.n	8014eda <_scanf_float+0xda>
 8014e64:	f1b9 0f00 	cmp.w	r9, #0
 8014e68:	d003      	beq.n	8014e72 <_scanf_float+0x72>
 8014e6a:	6823      	ldr	r3, [r4, #0]
 8014e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014e70:	6023      	str	r3, [r4, #0]
 8014e72:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8014e76:	f1ba 0f01 	cmp.w	sl, #1
 8014e7a:	f200 8117 	bhi.w	80150ac <_scanf_float+0x2ac>
 8014e7e:	9b01      	ldr	r3, [sp, #4]
 8014e80:	429e      	cmp	r6, r3
 8014e82:	f200 8108 	bhi.w	8015096 <_scanf_float+0x296>
 8014e86:	2001      	movs	r0, #1
 8014e88:	b007      	add	sp, #28
 8014e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e8e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014e92:	2a0d      	cmp	r2, #13
 8014e94:	d8e6      	bhi.n	8014e64 <_scanf_float+0x64>
 8014e96:	a101      	add	r1, pc, #4	@ (adr r1, 8014e9c <_scanf_float+0x9c>)
 8014e98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014e9c:	08014fe3 	.word	0x08014fe3
 8014ea0:	08014e65 	.word	0x08014e65
 8014ea4:	08014e65 	.word	0x08014e65
 8014ea8:	08014e65 	.word	0x08014e65
 8014eac:	08015043 	.word	0x08015043
 8014eb0:	0801501b 	.word	0x0801501b
 8014eb4:	08014e65 	.word	0x08014e65
 8014eb8:	08014e65 	.word	0x08014e65
 8014ebc:	08014ff1 	.word	0x08014ff1
 8014ec0:	08014e65 	.word	0x08014e65
 8014ec4:	08014e65 	.word	0x08014e65
 8014ec8:	08014e65 	.word	0x08014e65
 8014ecc:	08014e65 	.word	0x08014e65
 8014ed0:	08014fa9 	.word	0x08014fa9
 8014ed4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014ed8:	e7db      	b.n	8014e92 <_scanf_float+0x92>
 8014eda:	290e      	cmp	r1, #14
 8014edc:	d8c2      	bhi.n	8014e64 <_scanf_float+0x64>
 8014ede:	a001      	add	r0, pc, #4	@ (adr r0, 8014ee4 <_scanf_float+0xe4>)
 8014ee0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014ee4:	08014f99 	.word	0x08014f99
 8014ee8:	08014e65 	.word	0x08014e65
 8014eec:	08014f99 	.word	0x08014f99
 8014ef0:	0801502f 	.word	0x0801502f
 8014ef4:	08014e65 	.word	0x08014e65
 8014ef8:	08014f41 	.word	0x08014f41
 8014efc:	08014f7f 	.word	0x08014f7f
 8014f00:	08014f7f 	.word	0x08014f7f
 8014f04:	08014f7f 	.word	0x08014f7f
 8014f08:	08014f7f 	.word	0x08014f7f
 8014f0c:	08014f7f 	.word	0x08014f7f
 8014f10:	08014f7f 	.word	0x08014f7f
 8014f14:	08014f7f 	.word	0x08014f7f
 8014f18:	08014f7f 	.word	0x08014f7f
 8014f1c:	08014f7f 	.word	0x08014f7f
 8014f20:	2b6e      	cmp	r3, #110	@ 0x6e
 8014f22:	d809      	bhi.n	8014f38 <_scanf_float+0x138>
 8014f24:	2b60      	cmp	r3, #96	@ 0x60
 8014f26:	d8b2      	bhi.n	8014e8e <_scanf_float+0x8e>
 8014f28:	2b54      	cmp	r3, #84	@ 0x54
 8014f2a:	d07b      	beq.n	8015024 <_scanf_float+0x224>
 8014f2c:	2b59      	cmp	r3, #89	@ 0x59
 8014f2e:	d199      	bne.n	8014e64 <_scanf_float+0x64>
 8014f30:	2d07      	cmp	r5, #7
 8014f32:	d197      	bne.n	8014e64 <_scanf_float+0x64>
 8014f34:	2508      	movs	r5, #8
 8014f36:	e02c      	b.n	8014f92 <_scanf_float+0x192>
 8014f38:	2b74      	cmp	r3, #116	@ 0x74
 8014f3a:	d073      	beq.n	8015024 <_scanf_float+0x224>
 8014f3c:	2b79      	cmp	r3, #121	@ 0x79
 8014f3e:	e7f6      	b.n	8014f2e <_scanf_float+0x12e>
 8014f40:	6821      	ldr	r1, [r4, #0]
 8014f42:	05c8      	lsls	r0, r1, #23
 8014f44:	d51b      	bpl.n	8014f7e <_scanf_float+0x17e>
 8014f46:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014f4a:	6021      	str	r1, [r4, #0]
 8014f4c:	f109 0901 	add.w	r9, r9, #1
 8014f50:	f1bb 0f00 	cmp.w	fp, #0
 8014f54:	d003      	beq.n	8014f5e <_scanf_float+0x15e>
 8014f56:	3201      	adds	r2, #1
 8014f58:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8014f5c:	60a2      	str	r2, [r4, #8]
 8014f5e:	68a3      	ldr	r3, [r4, #8]
 8014f60:	3b01      	subs	r3, #1
 8014f62:	60a3      	str	r3, [r4, #8]
 8014f64:	6923      	ldr	r3, [r4, #16]
 8014f66:	3301      	adds	r3, #1
 8014f68:	6123      	str	r3, [r4, #16]
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	3b01      	subs	r3, #1
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	607b      	str	r3, [r7, #4]
 8014f72:	f340 8087 	ble.w	8015084 <_scanf_float+0x284>
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	3301      	adds	r3, #1
 8014f7a:	603b      	str	r3, [r7, #0]
 8014f7c:	e765      	b.n	8014e4a <_scanf_float+0x4a>
 8014f7e:	eb1a 0105 	adds.w	r1, sl, r5
 8014f82:	f47f af6f 	bne.w	8014e64 <_scanf_float+0x64>
 8014f86:	6822      	ldr	r2, [r4, #0]
 8014f88:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014f8c:	6022      	str	r2, [r4, #0]
 8014f8e:	460d      	mov	r5, r1
 8014f90:	468a      	mov	sl, r1
 8014f92:	f806 3b01 	strb.w	r3, [r6], #1
 8014f96:	e7e2      	b.n	8014f5e <_scanf_float+0x15e>
 8014f98:	6822      	ldr	r2, [r4, #0]
 8014f9a:	0610      	lsls	r0, r2, #24
 8014f9c:	f57f af62 	bpl.w	8014e64 <_scanf_float+0x64>
 8014fa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014fa4:	6022      	str	r2, [r4, #0]
 8014fa6:	e7f4      	b.n	8014f92 <_scanf_float+0x192>
 8014fa8:	f1ba 0f00 	cmp.w	sl, #0
 8014fac:	d10e      	bne.n	8014fcc <_scanf_float+0x1cc>
 8014fae:	f1b9 0f00 	cmp.w	r9, #0
 8014fb2:	d10e      	bne.n	8014fd2 <_scanf_float+0x1d2>
 8014fb4:	6822      	ldr	r2, [r4, #0]
 8014fb6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014fba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014fbe:	d108      	bne.n	8014fd2 <_scanf_float+0x1d2>
 8014fc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014fc4:	6022      	str	r2, [r4, #0]
 8014fc6:	f04f 0a01 	mov.w	sl, #1
 8014fca:	e7e2      	b.n	8014f92 <_scanf_float+0x192>
 8014fcc:	f1ba 0f02 	cmp.w	sl, #2
 8014fd0:	d055      	beq.n	801507e <_scanf_float+0x27e>
 8014fd2:	2d01      	cmp	r5, #1
 8014fd4:	d002      	beq.n	8014fdc <_scanf_float+0x1dc>
 8014fd6:	2d04      	cmp	r5, #4
 8014fd8:	f47f af44 	bne.w	8014e64 <_scanf_float+0x64>
 8014fdc:	3501      	adds	r5, #1
 8014fde:	b2ed      	uxtb	r5, r5
 8014fe0:	e7d7      	b.n	8014f92 <_scanf_float+0x192>
 8014fe2:	f1ba 0f01 	cmp.w	sl, #1
 8014fe6:	f47f af3d 	bne.w	8014e64 <_scanf_float+0x64>
 8014fea:	f04f 0a02 	mov.w	sl, #2
 8014fee:	e7d0      	b.n	8014f92 <_scanf_float+0x192>
 8014ff0:	b97d      	cbnz	r5, 8015012 <_scanf_float+0x212>
 8014ff2:	f1b9 0f00 	cmp.w	r9, #0
 8014ff6:	f47f af38 	bne.w	8014e6a <_scanf_float+0x6a>
 8014ffa:	6822      	ldr	r2, [r4, #0]
 8014ffc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8015000:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8015004:	f040 8108 	bne.w	8015218 <_scanf_float+0x418>
 8015008:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801500c:	6022      	str	r2, [r4, #0]
 801500e:	2501      	movs	r5, #1
 8015010:	e7bf      	b.n	8014f92 <_scanf_float+0x192>
 8015012:	2d03      	cmp	r5, #3
 8015014:	d0e2      	beq.n	8014fdc <_scanf_float+0x1dc>
 8015016:	2d05      	cmp	r5, #5
 8015018:	e7de      	b.n	8014fd8 <_scanf_float+0x1d8>
 801501a:	2d02      	cmp	r5, #2
 801501c:	f47f af22 	bne.w	8014e64 <_scanf_float+0x64>
 8015020:	2503      	movs	r5, #3
 8015022:	e7b6      	b.n	8014f92 <_scanf_float+0x192>
 8015024:	2d06      	cmp	r5, #6
 8015026:	f47f af1d 	bne.w	8014e64 <_scanf_float+0x64>
 801502a:	2507      	movs	r5, #7
 801502c:	e7b1      	b.n	8014f92 <_scanf_float+0x192>
 801502e:	6822      	ldr	r2, [r4, #0]
 8015030:	0591      	lsls	r1, r2, #22
 8015032:	f57f af17 	bpl.w	8014e64 <_scanf_float+0x64>
 8015036:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801503a:	6022      	str	r2, [r4, #0]
 801503c:	f8cd 9008 	str.w	r9, [sp, #8]
 8015040:	e7a7      	b.n	8014f92 <_scanf_float+0x192>
 8015042:	6822      	ldr	r2, [r4, #0]
 8015044:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8015048:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801504c:	d006      	beq.n	801505c <_scanf_float+0x25c>
 801504e:	0550      	lsls	r0, r2, #21
 8015050:	f57f af08 	bpl.w	8014e64 <_scanf_float+0x64>
 8015054:	f1b9 0f00 	cmp.w	r9, #0
 8015058:	f000 80de 	beq.w	8015218 <_scanf_float+0x418>
 801505c:	0591      	lsls	r1, r2, #22
 801505e:	bf58      	it	pl
 8015060:	9902      	ldrpl	r1, [sp, #8]
 8015062:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015066:	bf58      	it	pl
 8015068:	eba9 0101 	subpl.w	r1, r9, r1
 801506c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8015070:	bf58      	it	pl
 8015072:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015076:	6022      	str	r2, [r4, #0]
 8015078:	f04f 0900 	mov.w	r9, #0
 801507c:	e789      	b.n	8014f92 <_scanf_float+0x192>
 801507e:	f04f 0a03 	mov.w	sl, #3
 8015082:	e786      	b.n	8014f92 <_scanf_float+0x192>
 8015084:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015088:	4639      	mov	r1, r7
 801508a:	4640      	mov	r0, r8
 801508c:	4798      	blx	r3
 801508e:	2800      	cmp	r0, #0
 8015090:	f43f aedb 	beq.w	8014e4a <_scanf_float+0x4a>
 8015094:	e6e6      	b.n	8014e64 <_scanf_float+0x64>
 8015096:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801509a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801509e:	463a      	mov	r2, r7
 80150a0:	4640      	mov	r0, r8
 80150a2:	4798      	blx	r3
 80150a4:	6923      	ldr	r3, [r4, #16]
 80150a6:	3b01      	subs	r3, #1
 80150a8:	6123      	str	r3, [r4, #16]
 80150aa:	e6e8      	b.n	8014e7e <_scanf_float+0x7e>
 80150ac:	1e6b      	subs	r3, r5, #1
 80150ae:	2b06      	cmp	r3, #6
 80150b0:	d824      	bhi.n	80150fc <_scanf_float+0x2fc>
 80150b2:	2d02      	cmp	r5, #2
 80150b4:	d836      	bhi.n	8015124 <_scanf_float+0x324>
 80150b6:	9b01      	ldr	r3, [sp, #4]
 80150b8:	429e      	cmp	r6, r3
 80150ba:	f67f aee4 	bls.w	8014e86 <_scanf_float+0x86>
 80150be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80150c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80150c6:	463a      	mov	r2, r7
 80150c8:	4640      	mov	r0, r8
 80150ca:	4798      	blx	r3
 80150cc:	6923      	ldr	r3, [r4, #16]
 80150ce:	3b01      	subs	r3, #1
 80150d0:	6123      	str	r3, [r4, #16]
 80150d2:	e7f0      	b.n	80150b6 <_scanf_float+0x2b6>
 80150d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80150d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80150dc:	463a      	mov	r2, r7
 80150de:	4640      	mov	r0, r8
 80150e0:	4798      	blx	r3
 80150e2:	6923      	ldr	r3, [r4, #16]
 80150e4:	3b01      	subs	r3, #1
 80150e6:	6123      	str	r3, [r4, #16]
 80150e8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80150ec:	fa5f fa8a 	uxtb.w	sl, sl
 80150f0:	f1ba 0f02 	cmp.w	sl, #2
 80150f4:	d1ee      	bne.n	80150d4 <_scanf_float+0x2d4>
 80150f6:	3d03      	subs	r5, #3
 80150f8:	b2ed      	uxtb	r5, r5
 80150fa:	1b76      	subs	r6, r6, r5
 80150fc:	6823      	ldr	r3, [r4, #0]
 80150fe:	05da      	lsls	r2, r3, #23
 8015100:	d530      	bpl.n	8015164 <_scanf_float+0x364>
 8015102:	055b      	lsls	r3, r3, #21
 8015104:	d511      	bpl.n	801512a <_scanf_float+0x32a>
 8015106:	9b01      	ldr	r3, [sp, #4]
 8015108:	429e      	cmp	r6, r3
 801510a:	f67f aebc 	bls.w	8014e86 <_scanf_float+0x86>
 801510e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015112:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015116:	463a      	mov	r2, r7
 8015118:	4640      	mov	r0, r8
 801511a:	4798      	blx	r3
 801511c:	6923      	ldr	r3, [r4, #16]
 801511e:	3b01      	subs	r3, #1
 8015120:	6123      	str	r3, [r4, #16]
 8015122:	e7f0      	b.n	8015106 <_scanf_float+0x306>
 8015124:	46aa      	mov	sl, r5
 8015126:	46b3      	mov	fp, r6
 8015128:	e7de      	b.n	80150e8 <_scanf_float+0x2e8>
 801512a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801512e:	6923      	ldr	r3, [r4, #16]
 8015130:	2965      	cmp	r1, #101	@ 0x65
 8015132:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8015136:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801513a:	6123      	str	r3, [r4, #16]
 801513c:	d00c      	beq.n	8015158 <_scanf_float+0x358>
 801513e:	2945      	cmp	r1, #69	@ 0x45
 8015140:	d00a      	beq.n	8015158 <_scanf_float+0x358>
 8015142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015146:	463a      	mov	r2, r7
 8015148:	4640      	mov	r0, r8
 801514a:	4798      	blx	r3
 801514c:	6923      	ldr	r3, [r4, #16]
 801514e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015152:	3b01      	subs	r3, #1
 8015154:	1eb5      	subs	r5, r6, #2
 8015156:	6123      	str	r3, [r4, #16]
 8015158:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801515c:	463a      	mov	r2, r7
 801515e:	4640      	mov	r0, r8
 8015160:	4798      	blx	r3
 8015162:	462e      	mov	r6, r5
 8015164:	6822      	ldr	r2, [r4, #0]
 8015166:	f012 0210 	ands.w	r2, r2, #16
 801516a:	d001      	beq.n	8015170 <_scanf_float+0x370>
 801516c:	2000      	movs	r0, #0
 801516e:	e68b      	b.n	8014e88 <_scanf_float+0x88>
 8015170:	7032      	strb	r2, [r6, #0]
 8015172:	6823      	ldr	r3, [r4, #0]
 8015174:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8015178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801517c:	d11c      	bne.n	80151b8 <_scanf_float+0x3b8>
 801517e:	9b02      	ldr	r3, [sp, #8]
 8015180:	454b      	cmp	r3, r9
 8015182:	eba3 0209 	sub.w	r2, r3, r9
 8015186:	d123      	bne.n	80151d0 <_scanf_float+0x3d0>
 8015188:	9901      	ldr	r1, [sp, #4]
 801518a:	2200      	movs	r2, #0
 801518c:	4640      	mov	r0, r8
 801518e:	f002 fd87 	bl	8017ca0 <_strtod_r>
 8015192:	9b03      	ldr	r3, [sp, #12]
 8015194:	6821      	ldr	r1, [r4, #0]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	f011 0f02 	tst.w	r1, #2
 801519c:	ec57 6b10 	vmov	r6, r7, d0
 80151a0:	f103 0204 	add.w	r2, r3, #4
 80151a4:	d01f      	beq.n	80151e6 <_scanf_float+0x3e6>
 80151a6:	9903      	ldr	r1, [sp, #12]
 80151a8:	600a      	str	r2, [r1, #0]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	e9c3 6700 	strd	r6, r7, [r3]
 80151b0:	68e3      	ldr	r3, [r4, #12]
 80151b2:	3301      	adds	r3, #1
 80151b4:	60e3      	str	r3, [r4, #12]
 80151b6:	e7d9      	b.n	801516c <_scanf_float+0x36c>
 80151b8:	9b04      	ldr	r3, [sp, #16]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d0e4      	beq.n	8015188 <_scanf_float+0x388>
 80151be:	9905      	ldr	r1, [sp, #20]
 80151c0:	230a      	movs	r3, #10
 80151c2:	3101      	adds	r1, #1
 80151c4:	4640      	mov	r0, r8
 80151c6:	f002 fdeb 	bl	8017da0 <_strtol_r>
 80151ca:	9b04      	ldr	r3, [sp, #16]
 80151cc:	9e05      	ldr	r6, [sp, #20]
 80151ce:	1ac2      	subs	r2, r0, r3
 80151d0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80151d4:	429e      	cmp	r6, r3
 80151d6:	bf28      	it	cs
 80151d8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80151dc:	4910      	ldr	r1, [pc, #64]	@ (8015220 <_scanf_float+0x420>)
 80151de:	4630      	mov	r0, r6
 80151e0:	f000 f942 	bl	8015468 <siprintf>
 80151e4:	e7d0      	b.n	8015188 <_scanf_float+0x388>
 80151e6:	f011 0f04 	tst.w	r1, #4
 80151ea:	9903      	ldr	r1, [sp, #12]
 80151ec:	600a      	str	r2, [r1, #0]
 80151ee:	d1dc      	bne.n	80151aa <_scanf_float+0x3aa>
 80151f0:	681d      	ldr	r5, [r3, #0]
 80151f2:	4632      	mov	r2, r6
 80151f4:	463b      	mov	r3, r7
 80151f6:	4630      	mov	r0, r6
 80151f8:	4639      	mov	r1, r7
 80151fa:	f7eb fc9f 	bl	8000b3c <__aeabi_dcmpun>
 80151fe:	b128      	cbz	r0, 801520c <_scanf_float+0x40c>
 8015200:	4808      	ldr	r0, [pc, #32]	@ (8015224 <_scanf_float+0x424>)
 8015202:	f000 fb45 	bl	8015890 <nanf>
 8015206:	ed85 0a00 	vstr	s0, [r5]
 801520a:	e7d1      	b.n	80151b0 <_scanf_float+0x3b0>
 801520c:	4630      	mov	r0, r6
 801520e:	4639      	mov	r1, r7
 8015210:	f7eb fcf2 	bl	8000bf8 <__aeabi_d2f>
 8015214:	6028      	str	r0, [r5, #0]
 8015216:	e7cb      	b.n	80151b0 <_scanf_float+0x3b0>
 8015218:	f04f 0900 	mov.w	r9, #0
 801521c:	e629      	b.n	8014e72 <_scanf_float+0x72>
 801521e:	bf00      	nop
 8015220:	0802e6d4 	.word	0x0802e6d4
 8015224:	0802ea6d 	.word	0x0802ea6d

08015228 <std>:
 8015228:	2300      	movs	r3, #0
 801522a:	b510      	push	{r4, lr}
 801522c:	4604      	mov	r4, r0
 801522e:	e9c0 3300 	strd	r3, r3, [r0]
 8015232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015236:	6083      	str	r3, [r0, #8]
 8015238:	8181      	strh	r1, [r0, #12]
 801523a:	6643      	str	r3, [r0, #100]	@ 0x64
 801523c:	81c2      	strh	r2, [r0, #14]
 801523e:	6183      	str	r3, [r0, #24]
 8015240:	4619      	mov	r1, r3
 8015242:	2208      	movs	r2, #8
 8015244:	305c      	adds	r0, #92	@ 0x5c
 8015246:	f000 fa3f 	bl	80156c8 <memset>
 801524a:	4b0d      	ldr	r3, [pc, #52]	@ (8015280 <std+0x58>)
 801524c:	6263      	str	r3, [r4, #36]	@ 0x24
 801524e:	4b0d      	ldr	r3, [pc, #52]	@ (8015284 <std+0x5c>)
 8015250:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015252:	4b0d      	ldr	r3, [pc, #52]	@ (8015288 <std+0x60>)
 8015254:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015256:	4b0d      	ldr	r3, [pc, #52]	@ (801528c <std+0x64>)
 8015258:	6323      	str	r3, [r4, #48]	@ 0x30
 801525a:	4b0d      	ldr	r3, [pc, #52]	@ (8015290 <std+0x68>)
 801525c:	6224      	str	r4, [r4, #32]
 801525e:	429c      	cmp	r4, r3
 8015260:	d006      	beq.n	8015270 <std+0x48>
 8015262:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015266:	4294      	cmp	r4, r2
 8015268:	d002      	beq.n	8015270 <std+0x48>
 801526a:	33d0      	adds	r3, #208	@ 0xd0
 801526c:	429c      	cmp	r4, r3
 801526e:	d105      	bne.n	801527c <std+0x54>
 8015270:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015278:	f000 baf8 	b.w	801586c <__retarget_lock_init_recursive>
 801527c:	bd10      	pop	{r4, pc}
 801527e:	bf00      	nop
 8015280:	080154a9 	.word	0x080154a9
 8015284:	080154cb 	.word	0x080154cb
 8015288:	08015503 	.word	0x08015503
 801528c:	08015527 	.word	0x08015527
 8015290:	2002327c 	.word	0x2002327c

08015294 <stdio_exit_handler>:
 8015294:	4a02      	ldr	r2, [pc, #8]	@ (80152a0 <stdio_exit_handler+0xc>)
 8015296:	4903      	ldr	r1, [pc, #12]	@ (80152a4 <stdio_exit_handler+0x10>)
 8015298:	4803      	ldr	r0, [pc, #12]	@ (80152a8 <stdio_exit_handler+0x14>)
 801529a:	f000 b869 	b.w	8015370 <_fwalk_sglue>
 801529e:	bf00      	nop
 80152a0:	20000134 	.word	0x20000134
 80152a4:	0801815d 	.word	0x0801815d
 80152a8:	20000144 	.word	0x20000144

080152ac <cleanup_stdio>:
 80152ac:	6841      	ldr	r1, [r0, #4]
 80152ae:	4b0c      	ldr	r3, [pc, #48]	@ (80152e0 <cleanup_stdio+0x34>)
 80152b0:	4299      	cmp	r1, r3
 80152b2:	b510      	push	{r4, lr}
 80152b4:	4604      	mov	r4, r0
 80152b6:	d001      	beq.n	80152bc <cleanup_stdio+0x10>
 80152b8:	f002 ff50 	bl	801815c <_fflush_r>
 80152bc:	68a1      	ldr	r1, [r4, #8]
 80152be:	4b09      	ldr	r3, [pc, #36]	@ (80152e4 <cleanup_stdio+0x38>)
 80152c0:	4299      	cmp	r1, r3
 80152c2:	d002      	beq.n	80152ca <cleanup_stdio+0x1e>
 80152c4:	4620      	mov	r0, r4
 80152c6:	f002 ff49 	bl	801815c <_fflush_r>
 80152ca:	68e1      	ldr	r1, [r4, #12]
 80152cc:	4b06      	ldr	r3, [pc, #24]	@ (80152e8 <cleanup_stdio+0x3c>)
 80152ce:	4299      	cmp	r1, r3
 80152d0:	d004      	beq.n	80152dc <cleanup_stdio+0x30>
 80152d2:	4620      	mov	r0, r4
 80152d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152d8:	f002 bf40 	b.w	801815c <_fflush_r>
 80152dc:	bd10      	pop	{r4, pc}
 80152de:	bf00      	nop
 80152e0:	2002327c 	.word	0x2002327c
 80152e4:	200232e4 	.word	0x200232e4
 80152e8:	2002334c 	.word	0x2002334c

080152ec <global_stdio_init.part.0>:
 80152ec:	b510      	push	{r4, lr}
 80152ee:	4b0b      	ldr	r3, [pc, #44]	@ (801531c <global_stdio_init.part.0+0x30>)
 80152f0:	4c0b      	ldr	r4, [pc, #44]	@ (8015320 <global_stdio_init.part.0+0x34>)
 80152f2:	4a0c      	ldr	r2, [pc, #48]	@ (8015324 <global_stdio_init.part.0+0x38>)
 80152f4:	601a      	str	r2, [r3, #0]
 80152f6:	4620      	mov	r0, r4
 80152f8:	2200      	movs	r2, #0
 80152fa:	2104      	movs	r1, #4
 80152fc:	f7ff ff94 	bl	8015228 <std>
 8015300:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015304:	2201      	movs	r2, #1
 8015306:	2109      	movs	r1, #9
 8015308:	f7ff ff8e 	bl	8015228 <std>
 801530c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015310:	2202      	movs	r2, #2
 8015312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015316:	2112      	movs	r1, #18
 8015318:	f7ff bf86 	b.w	8015228 <std>
 801531c:	200233b4 	.word	0x200233b4
 8015320:	2002327c 	.word	0x2002327c
 8015324:	08015295 	.word	0x08015295

08015328 <__sfp_lock_acquire>:
 8015328:	4801      	ldr	r0, [pc, #4]	@ (8015330 <__sfp_lock_acquire+0x8>)
 801532a:	f000 baa0 	b.w	801586e <__retarget_lock_acquire_recursive>
 801532e:	bf00      	nop
 8015330:	200233bd 	.word	0x200233bd

08015334 <__sfp_lock_release>:
 8015334:	4801      	ldr	r0, [pc, #4]	@ (801533c <__sfp_lock_release+0x8>)
 8015336:	f000 ba9b 	b.w	8015870 <__retarget_lock_release_recursive>
 801533a:	bf00      	nop
 801533c:	200233bd 	.word	0x200233bd

08015340 <__sinit>:
 8015340:	b510      	push	{r4, lr}
 8015342:	4604      	mov	r4, r0
 8015344:	f7ff fff0 	bl	8015328 <__sfp_lock_acquire>
 8015348:	6a23      	ldr	r3, [r4, #32]
 801534a:	b11b      	cbz	r3, 8015354 <__sinit+0x14>
 801534c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015350:	f7ff bff0 	b.w	8015334 <__sfp_lock_release>
 8015354:	4b04      	ldr	r3, [pc, #16]	@ (8015368 <__sinit+0x28>)
 8015356:	6223      	str	r3, [r4, #32]
 8015358:	4b04      	ldr	r3, [pc, #16]	@ (801536c <__sinit+0x2c>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d1f5      	bne.n	801534c <__sinit+0xc>
 8015360:	f7ff ffc4 	bl	80152ec <global_stdio_init.part.0>
 8015364:	e7f2      	b.n	801534c <__sinit+0xc>
 8015366:	bf00      	nop
 8015368:	080152ad 	.word	0x080152ad
 801536c:	200233b4 	.word	0x200233b4

08015370 <_fwalk_sglue>:
 8015370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015374:	4607      	mov	r7, r0
 8015376:	4688      	mov	r8, r1
 8015378:	4614      	mov	r4, r2
 801537a:	2600      	movs	r6, #0
 801537c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015380:	f1b9 0901 	subs.w	r9, r9, #1
 8015384:	d505      	bpl.n	8015392 <_fwalk_sglue+0x22>
 8015386:	6824      	ldr	r4, [r4, #0]
 8015388:	2c00      	cmp	r4, #0
 801538a:	d1f7      	bne.n	801537c <_fwalk_sglue+0xc>
 801538c:	4630      	mov	r0, r6
 801538e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015392:	89ab      	ldrh	r3, [r5, #12]
 8015394:	2b01      	cmp	r3, #1
 8015396:	d907      	bls.n	80153a8 <_fwalk_sglue+0x38>
 8015398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801539c:	3301      	adds	r3, #1
 801539e:	d003      	beq.n	80153a8 <_fwalk_sglue+0x38>
 80153a0:	4629      	mov	r1, r5
 80153a2:	4638      	mov	r0, r7
 80153a4:	47c0      	blx	r8
 80153a6:	4306      	orrs	r6, r0
 80153a8:	3568      	adds	r5, #104	@ 0x68
 80153aa:	e7e9      	b.n	8015380 <_fwalk_sglue+0x10>

080153ac <_puts_r>:
 80153ac:	6a03      	ldr	r3, [r0, #32]
 80153ae:	b570      	push	{r4, r5, r6, lr}
 80153b0:	6884      	ldr	r4, [r0, #8]
 80153b2:	4605      	mov	r5, r0
 80153b4:	460e      	mov	r6, r1
 80153b6:	b90b      	cbnz	r3, 80153bc <_puts_r+0x10>
 80153b8:	f7ff ffc2 	bl	8015340 <__sinit>
 80153bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80153be:	07db      	lsls	r3, r3, #31
 80153c0:	d405      	bmi.n	80153ce <_puts_r+0x22>
 80153c2:	89a3      	ldrh	r3, [r4, #12]
 80153c4:	0598      	lsls	r0, r3, #22
 80153c6:	d402      	bmi.n	80153ce <_puts_r+0x22>
 80153c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80153ca:	f000 fa50 	bl	801586e <__retarget_lock_acquire_recursive>
 80153ce:	89a3      	ldrh	r3, [r4, #12]
 80153d0:	0719      	lsls	r1, r3, #28
 80153d2:	d502      	bpl.n	80153da <_puts_r+0x2e>
 80153d4:	6923      	ldr	r3, [r4, #16]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d135      	bne.n	8015446 <_puts_r+0x9a>
 80153da:	4621      	mov	r1, r4
 80153dc:	4628      	mov	r0, r5
 80153de:	f000 f91d 	bl	801561c <__swsetup_r>
 80153e2:	b380      	cbz	r0, 8015446 <_puts_r+0x9a>
 80153e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80153e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80153ea:	07da      	lsls	r2, r3, #31
 80153ec:	d405      	bmi.n	80153fa <_puts_r+0x4e>
 80153ee:	89a3      	ldrh	r3, [r4, #12]
 80153f0:	059b      	lsls	r3, r3, #22
 80153f2:	d402      	bmi.n	80153fa <_puts_r+0x4e>
 80153f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80153f6:	f000 fa3b 	bl	8015870 <__retarget_lock_release_recursive>
 80153fa:	4628      	mov	r0, r5
 80153fc:	bd70      	pop	{r4, r5, r6, pc}
 80153fe:	2b00      	cmp	r3, #0
 8015400:	da04      	bge.n	801540c <_puts_r+0x60>
 8015402:	69a2      	ldr	r2, [r4, #24]
 8015404:	429a      	cmp	r2, r3
 8015406:	dc17      	bgt.n	8015438 <_puts_r+0x8c>
 8015408:	290a      	cmp	r1, #10
 801540a:	d015      	beq.n	8015438 <_puts_r+0x8c>
 801540c:	6823      	ldr	r3, [r4, #0]
 801540e:	1c5a      	adds	r2, r3, #1
 8015410:	6022      	str	r2, [r4, #0]
 8015412:	7019      	strb	r1, [r3, #0]
 8015414:	68a3      	ldr	r3, [r4, #8]
 8015416:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801541a:	3b01      	subs	r3, #1
 801541c:	60a3      	str	r3, [r4, #8]
 801541e:	2900      	cmp	r1, #0
 8015420:	d1ed      	bne.n	80153fe <_puts_r+0x52>
 8015422:	2b00      	cmp	r3, #0
 8015424:	da11      	bge.n	801544a <_puts_r+0x9e>
 8015426:	4622      	mov	r2, r4
 8015428:	210a      	movs	r1, #10
 801542a:	4628      	mov	r0, r5
 801542c:	f000 f8b8 	bl	80155a0 <__swbuf_r>
 8015430:	3001      	adds	r0, #1
 8015432:	d0d7      	beq.n	80153e4 <_puts_r+0x38>
 8015434:	250a      	movs	r5, #10
 8015436:	e7d7      	b.n	80153e8 <_puts_r+0x3c>
 8015438:	4622      	mov	r2, r4
 801543a:	4628      	mov	r0, r5
 801543c:	f000 f8b0 	bl	80155a0 <__swbuf_r>
 8015440:	3001      	adds	r0, #1
 8015442:	d1e7      	bne.n	8015414 <_puts_r+0x68>
 8015444:	e7ce      	b.n	80153e4 <_puts_r+0x38>
 8015446:	3e01      	subs	r6, #1
 8015448:	e7e4      	b.n	8015414 <_puts_r+0x68>
 801544a:	6823      	ldr	r3, [r4, #0]
 801544c:	1c5a      	adds	r2, r3, #1
 801544e:	6022      	str	r2, [r4, #0]
 8015450:	220a      	movs	r2, #10
 8015452:	701a      	strb	r2, [r3, #0]
 8015454:	e7ee      	b.n	8015434 <_puts_r+0x88>
	...

08015458 <puts>:
 8015458:	4b02      	ldr	r3, [pc, #8]	@ (8015464 <puts+0xc>)
 801545a:	4601      	mov	r1, r0
 801545c:	6818      	ldr	r0, [r3, #0]
 801545e:	f7ff bfa5 	b.w	80153ac <_puts_r>
 8015462:	bf00      	nop
 8015464:	20000140 	.word	0x20000140

08015468 <siprintf>:
 8015468:	b40e      	push	{r1, r2, r3}
 801546a:	b500      	push	{lr}
 801546c:	b09c      	sub	sp, #112	@ 0x70
 801546e:	ab1d      	add	r3, sp, #116	@ 0x74
 8015470:	9002      	str	r0, [sp, #8]
 8015472:	9006      	str	r0, [sp, #24]
 8015474:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015478:	4809      	ldr	r0, [pc, #36]	@ (80154a0 <siprintf+0x38>)
 801547a:	9107      	str	r1, [sp, #28]
 801547c:	9104      	str	r1, [sp, #16]
 801547e:	4909      	ldr	r1, [pc, #36]	@ (80154a4 <siprintf+0x3c>)
 8015480:	f853 2b04 	ldr.w	r2, [r3], #4
 8015484:	9105      	str	r1, [sp, #20]
 8015486:	6800      	ldr	r0, [r0, #0]
 8015488:	9301      	str	r3, [sp, #4]
 801548a:	a902      	add	r1, sp, #8
 801548c:	f002 fce6 	bl	8017e5c <_svfiprintf_r>
 8015490:	9b02      	ldr	r3, [sp, #8]
 8015492:	2200      	movs	r2, #0
 8015494:	701a      	strb	r2, [r3, #0]
 8015496:	b01c      	add	sp, #112	@ 0x70
 8015498:	f85d eb04 	ldr.w	lr, [sp], #4
 801549c:	b003      	add	sp, #12
 801549e:	4770      	bx	lr
 80154a0:	20000140 	.word	0x20000140
 80154a4:	ffff0208 	.word	0xffff0208

080154a8 <__sread>:
 80154a8:	b510      	push	{r4, lr}
 80154aa:	460c      	mov	r4, r1
 80154ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154b0:	f000 f98e 	bl	80157d0 <_read_r>
 80154b4:	2800      	cmp	r0, #0
 80154b6:	bfab      	itete	ge
 80154b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80154ba:	89a3      	ldrhlt	r3, [r4, #12]
 80154bc:	181b      	addge	r3, r3, r0
 80154be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80154c2:	bfac      	ite	ge
 80154c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80154c6:	81a3      	strhlt	r3, [r4, #12]
 80154c8:	bd10      	pop	{r4, pc}

080154ca <__swrite>:
 80154ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154ce:	461f      	mov	r7, r3
 80154d0:	898b      	ldrh	r3, [r1, #12]
 80154d2:	05db      	lsls	r3, r3, #23
 80154d4:	4605      	mov	r5, r0
 80154d6:	460c      	mov	r4, r1
 80154d8:	4616      	mov	r6, r2
 80154da:	d505      	bpl.n	80154e8 <__swrite+0x1e>
 80154dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154e0:	2302      	movs	r3, #2
 80154e2:	2200      	movs	r2, #0
 80154e4:	f000 f962 	bl	80157ac <_lseek_r>
 80154e8:	89a3      	ldrh	r3, [r4, #12]
 80154ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80154f2:	81a3      	strh	r3, [r4, #12]
 80154f4:	4632      	mov	r2, r6
 80154f6:	463b      	mov	r3, r7
 80154f8:	4628      	mov	r0, r5
 80154fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154fe:	f000 b979 	b.w	80157f4 <_write_r>

08015502 <__sseek>:
 8015502:	b510      	push	{r4, lr}
 8015504:	460c      	mov	r4, r1
 8015506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801550a:	f000 f94f 	bl	80157ac <_lseek_r>
 801550e:	1c43      	adds	r3, r0, #1
 8015510:	89a3      	ldrh	r3, [r4, #12]
 8015512:	bf15      	itete	ne
 8015514:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015516:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801551a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801551e:	81a3      	strheq	r3, [r4, #12]
 8015520:	bf18      	it	ne
 8015522:	81a3      	strhne	r3, [r4, #12]
 8015524:	bd10      	pop	{r4, pc}

08015526 <__sclose>:
 8015526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801552a:	f000 b8d9 	b.w	80156e0 <_close_r>

0801552e <_vsniprintf_r>:
 801552e:	b530      	push	{r4, r5, lr}
 8015530:	4614      	mov	r4, r2
 8015532:	2c00      	cmp	r4, #0
 8015534:	b09b      	sub	sp, #108	@ 0x6c
 8015536:	4605      	mov	r5, r0
 8015538:	461a      	mov	r2, r3
 801553a:	da05      	bge.n	8015548 <_vsniprintf_r+0x1a>
 801553c:	238b      	movs	r3, #139	@ 0x8b
 801553e:	6003      	str	r3, [r0, #0]
 8015540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015544:	b01b      	add	sp, #108	@ 0x6c
 8015546:	bd30      	pop	{r4, r5, pc}
 8015548:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801554c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015550:	bf14      	ite	ne
 8015552:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8015556:	4623      	moveq	r3, r4
 8015558:	9302      	str	r3, [sp, #8]
 801555a:	9305      	str	r3, [sp, #20]
 801555c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015560:	9100      	str	r1, [sp, #0]
 8015562:	9104      	str	r1, [sp, #16]
 8015564:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015568:	4669      	mov	r1, sp
 801556a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801556c:	f002 fc76 	bl	8017e5c <_svfiprintf_r>
 8015570:	1c43      	adds	r3, r0, #1
 8015572:	bfbc      	itt	lt
 8015574:	238b      	movlt	r3, #139	@ 0x8b
 8015576:	602b      	strlt	r3, [r5, #0]
 8015578:	2c00      	cmp	r4, #0
 801557a:	d0e3      	beq.n	8015544 <_vsniprintf_r+0x16>
 801557c:	9b00      	ldr	r3, [sp, #0]
 801557e:	2200      	movs	r2, #0
 8015580:	701a      	strb	r2, [r3, #0]
 8015582:	e7df      	b.n	8015544 <_vsniprintf_r+0x16>

08015584 <vsniprintf>:
 8015584:	b507      	push	{r0, r1, r2, lr}
 8015586:	9300      	str	r3, [sp, #0]
 8015588:	4613      	mov	r3, r2
 801558a:	460a      	mov	r2, r1
 801558c:	4601      	mov	r1, r0
 801558e:	4803      	ldr	r0, [pc, #12]	@ (801559c <vsniprintf+0x18>)
 8015590:	6800      	ldr	r0, [r0, #0]
 8015592:	f7ff ffcc 	bl	801552e <_vsniprintf_r>
 8015596:	b003      	add	sp, #12
 8015598:	f85d fb04 	ldr.w	pc, [sp], #4
 801559c:	20000140 	.word	0x20000140

080155a0 <__swbuf_r>:
 80155a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155a2:	460e      	mov	r6, r1
 80155a4:	4614      	mov	r4, r2
 80155a6:	4605      	mov	r5, r0
 80155a8:	b118      	cbz	r0, 80155b2 <__swbuf_r+0x12>
 80155aa:	6a03      	ldr	r3, [r0, #32]
 80155ac:	b90b      	cbnz	r3, 80155b2 <__swbuf_r+0x12>
 80155ae:	f7ff fec7 	bl	8015340 <__sinit>
 80155b2:	69a3      	ldr	r3, [r4, #24]
 80155b4:	60a3      	str	r3, [r4, #8]
 80155b6:	89a3      	ldrh	r3, [r4, #12]
 80155b8:	071a      	lsls	r2, r3, #28
 80155ba:	d501      	bpl.n	80155c0 <__swbuf_r+0x20>
 80155bc:	6923      	ldr	r3, [r4, #16]
 80155be:	b943      	cbnz	r3, 80155d2 <__swbuf_r+0x32>
 80155c0:	4621      	mov	r1, r4
 80155c2:	4628      	mov	r0, r5
 80155c4:	f000 f82a 	bl	801561c <__swsetup_r>
 80155c8:	b118      	cbz	r0, 80155d2 <__swbuf_r+0x32>
 80155ca:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80155ce:	4638      	mov	r0, r7
 80155d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155d2:	6823      	ldr	r3, [r4, #0]
 80155d4:	6922      	ldr	r2, [r4, #16]
 80155d6:	1a98      	subs	r0, r3, r2
 80155d8:	6963      	ldr	r3, [r4, #20]
 80155da:	b2f6      	uxtb	r6, r6
 80155dc:	4283      	cmp	r3, r0
 80155de:	4637      	mov	r7, r6
 80155e0:	dc05      	bgt.n	80155ee <__swbuf_r+0x4e>
 80155e2:	4621      	mov	r1, r4
 80155e4:	4628      	mov	r0, r5
 80155e6:	f002 fdb9 	bl	801815c <_fflush_r>
 80155ea:	2800      	cmp	r0, #0
 80155ec:	d1ed      	bne.n	80155ca <__swbuf_r+0x2a>
 80155ee:	68a3      	ldr	r3, [r4, #8]
 80155f0:	3b01      	subs	r3, #1
 80155f2:	60a3      	str	r3, [r4, #8]
 80155f4:	6823      	ldr	r3, [r4, #0]
 80155f6:	1c5a      	adds	r2, r3, #1
 80155f8:	6022      	str	r2, [r4, #0]
 80155fa:	701e      	strb	r6, [r3, #0]
 80155fc:	6962      	ldr	r2, [r4, #20]
 80155fe:	1c43      	adds	r3, r0, #1
 8015600:	429a      	cmp	r2, r3
 8015602:	d004      	beq.n	801560e <__swbuf_r+0x6e>
 8015604:	89a3      	ldrh	r3, [r4, #12]
 8015606:	07db      	lsls	r3, r3, #31
 8015608:	d5e1      	bpl.n	80155ce <__swbuf_r+0x2e>
 801560a:	2e0a      	cmp	r6, #10
 801560c:	d1df      	bne.n	80155ce <__swbuf_r+0x2e>
 801560e:	4621      	mov	r1, r4
 8015610:	4628      	mov	r0, r5
 8015612:	f002 fda3 	bl	801815c <_fflush_r>
 8015616:	2800      	cmp	r0, #0
 8015618:	d0d9      	beq.n	80155ce <__swbuf_r+0x2e>
 801561a:	e7d6      	b.n	80155ca <__swbuf_r+0x2a>

0801561c <__swsetup_r>:
 801561c:	b538      	push	{r3, r4, r5, lr}
 801561e:	4b29      	ldr	r3, [pc, #164]	@ (80156c4 <__swsetup_r+0xa8>)
 8015620:	4605      	mov	r5, r0
 8015622:	6818      	ldr	r0, [r3, #0]
 8015624:	460c      	mov	r4, r1
 8015626:	b118      	cbz	r0, 8015630 <__swsetup_r+0x14>
 8015628:	6a03      	ldr	r3, [r0, #32]
 801562a:	b90b      	cbnz	r3, 8015630 <__swsetup_r+0x14>
 801562c:	f7ff fe88 	bl	8015340 <__sinit>
 8015630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015634:	0719      	lsls	r1, r3, #28
 8015636:	d422      	bmi.n	801567e <__swsetup_r+0x62>
 8015638:	06da      	lsls	r2, r3, #27
 801563a:	d407      	bmi.n	801564c <__swsetup_r+0x30>
 801563c:	2209      	movs	r2, #9
 801563e:	602a      	str	r2, [r5, #0]
 8015640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015644:	81a3      	strh	r3, [r4, #12]
 8015646:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801564a:	e033      	b.n	80156b4 <__swsetup_r+0x98>
 801564c:	0758      	lsls	r0, r3, #29
 801564e:	d512      	bpl.n	8015676 <__swsetup_r+0x5a>
 8015650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015652:	b141      	cbz	r1, 8015666 <__swsetup_r+0x4a>
 8015654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015658:	4299      	cmp	r1, r3
 801565a:	d002      	beq.n	8015662 <__swsetup_r+0x46>
 801565c:	4628      	mov	r0, r5
 801565e:	f000 ff6b 	bl	8016538 <_free_r>
 8015662:	2300      	movs	r3, #0
 8015664:	6363      	str	r3, [r4, #52]	@ 0x34
 8015666:	89a3      	ldrh	r3, [r4, #12]
 8015668:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801566c:	81a3      	strh	r3, [r4, #12]
 801566e:	2300      	movs	r3, #0
 8015670:	6063      	str	r3, [r4, #4]
 8015672:	6923      	ldr	r3, [r4, #16]
 8015674:	6023      	str	r3, [r4, #0]
 8015676:	89a3      	ldrh	r3, [r4, #12]
 8015678:	f043 0308 	orr.w	r3, r3, #8
 801567c:	81a3      	strh	r3, [r4, #12]
 801567e:	6923      	ldr	r3, [r4, #16]
 8015680:	b94b      	cbnz	r3, 8015696 <__swsetup_r+0x7a>
 8015682:	89a3      	ldrh	r3, [r4, #12]
 8015684:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801568c:	d003      	beq.n	8015696 <__swsetup_r+0x7a>
 801568e:	4621      	mov	r1, r4
 8015690:	4628      	mov	r0, r5
 8015692:	f002 fdb1 	bl	80181f8 <__smakebuf_r>
 8015696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801569a:	f013 0201 	ands.w	r2, r3, #1
 801569e:	d00a      	beq.n	80156b6 <__swsetup_r+0x9a>
 80156a0:	2200      	movs	r2, #0
 80156a2:	60a2      	str	r2, [r4, #8]
 80156a4:	6962      	ldr	r2, [r4, #20]
 80156a6:	4252      	negs	r2, r2
 80156a8:	61a2      	str	r2, [r4, #24]
 80156aa:	6922      	ldr	r2, [r4, #16]
 80156ac:	b942      	cbnz	r2, 80156c0 <__swsetup_r+0xa4>
 80156ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80156b2:	d1c5      	bne.n	8015640 <__swsetup_r+0x24>
 80156b4:	bd38      	pop	{r3, r4, r5, pc}
 80156b6:	0799      	lsls	r1, r3, #30
 80156b8:	bf58      	it	pl
 80156ba:	6962      	ldrpl	r2, [r4, #20]
 80156bc:	60a2      	str	r2, [r4, #8]
 80156be:	e7f4      	b.n	80156aa <__swsetup_r+0x8e>
 80156c0:	2000      	movs	r0, #0
 80156c2:	e7f7      	b.n	80156b4 <__swsetup_r+0x98>
 80156c4:	20000140 	.word	0x20000140

080156c8 <memset>:
 80156c8:	4402      	add	r2, r0
 80156ca:	4603      	mov	r3, r0
 80156cc:	4293      	cmp	r3, r2
 80156ce:	d100      	bne.n	80156d2 <memset+0xa>
 80156d0:	4770      	bx	lr
 80156d2:	f803 1b01 	strb.w	r1, [r3], #1
 80156d6:	e7f9      	b.n	80156cc <memset+0x4>

080156d8 <_localeconv_r>:
 80156d8:	4800      	ldr	r0, [pc, #0]	@ (80156dc <_localeconv_r+0x4>)
 80156da:	4770      	bx	lr
 80156dc:	20000280 	.word	0x20000280

080156e0 <_close_r>:
 80156e0:	b538      	push	{r3, r4, r5, lr}
 80156e2:	4d06      	ldr	r5, [pc, #24]	@ (80156fc <_close_r+0x1c>)
 80156e4:	2300      	movs	r3, #0
 80156e6:	4604      	mov	r4, r0
 80156e8:	4608      	mov	r0, r1
 80156ea:	602b      	str	r3, [r5, #0]
 80156ec:	f7ed fdaa 	bl	8003244 <_close>
 80156f0:	1c43      	adds	r3, r0, #1
 80156f2:	d102      	bne.n	80156fa <_close_r+0x1a>
 80156f4:	682b      	ldr	r3, [r5, #0]
 80156f6:	b103      	cbz	r3, 80156fa <_close_r+0x1a>
 80156f8:	6023      	str	r3, [r4, #0]
 80156fa:	bd38      	pop	{r3, r4, r5, pc}
 80156fc:	200233b8 	.word	0x200233b8

08015700 <_reclaim_reent>:
 8015700:	4b29      	ldr	r3, [pc, #164]	@ (80157a8 <_reclaim_reent+0xa8>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	4283      	cmp	r3, r0
 8015706:	b570      	push	{r4, r5, r6, lr}
 8015708:	4604      	mov	r4, r0
 801570a:	d04b      	beq.n	80157a4 <_reclaim_reent+0xa4>
 801570c:	69c3      	ldr	r3, [r0, #28]
 801570e:	b1ab      	cbz	r3, 801573c <_reclaim_reent+0x3c>
 8015710:	68db      	ldr	r3, [r3, #12]
 8015712:	b16b      	cbz	r3, 8015730 <_reclaim_reent+0x30>
 8015714:	2500      	movs	r5, #0
 8015716:	69e3      	ldr	r3, [r4, #28]
 8015718:	68db      	ldr	r3, [r3, #12]
 801571a:	5959      	ldr	r1, [r3, r5]
 801571c:	2900      	cmp	r1, #0
 801571e:	d13b      	bne.n	8015798 <_reclaim_reent+0x98>
 8015720:	3504      	adds	r5, #4
 8015722:	2d80      	cmp	r5, #128	@ 0x80
 8015724:	d1f7      	bne.n	8015716 <_reclaim_reent+0x16>
 8015726:	69e3      	ldr	r3, [r4, #28]
 8015728:	4620      	mov	r0, r4
 801572a:	68d9      	ldr	r1, [r3, #12]
 801572c:	f000 ff04 	bl	8016538 <_free_r>
 8015730:	69e3      	ldr	r3, [r4, #28]
 8015732:	6819      	ldr	r1, [r3, #0]
 8015734:	b111      	cbz	r1, 801573c <_reclaim_reent+0x3c>
 8015736:	4620      	mov	r0, r4
 8015738:	f000 fefe 	bl	8016538 <_free_r>
 801573c:	6961      	ldr	r1, [r4, #20]
 801573e:	b111      	cbz	r1, 8015746 <_reclaim_reent+0x46>
 8015740:	4620      	mov	r0, r4
 8015742:	f000 fef9 	bl	8016538 <_free_r>
 8015746:	69e1      	ldr	r1, [r4, #28]
 8015748:	b111      	cbz	r1, 8015750 <_reclaim_reent+0x50>
 801574a:	4620      	mov	r0, r4
 801574c:	f000 fef4 	bl	8016538 <_free_r>
 8015750:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015752:	b111      	cbz	r1, 801575a <_reclaim_reent+0x5a>
 8015754:	4620      	mov	r0, r4
 8015756:	f000 feef 	bl	8016538 <_free_r>
 801575a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801575c:	b111      	cbz	r1, 8015764 <_reclaim_reent+0x64>
 801575e:	4620      	mov	r0, r4
 8015760:	f000 feea 	bl	8016538 <_free_r>
 8015764:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015766:	b111      	cbz	r1, 801576e <_reclaim_reent+0x6e>
 8015768:	4620      	mov	r0, r4
 801576a:	f000 fee5 	bl	8016538 <_free_r>
 801576e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8015770:	b111      	cbz	r1, 8015778 <_reclaim_reent+0x78>
 8015772:	4620      	mov	r0, r4
 8015774:	f000 fee0 	bl	8016538 <_free_r>
 8015778:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801577a:	b111      	cbz	r1, 8015782 <_reclaim_reent+0x82>
 801577c:	4620      	mov	r0, r4
 801577e:	f000 fedb 	bl	8016538 <_free_r>
 8015782:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015784:	b111      	cbz	r1, 801578c <_reclaim_reent+0x8c>
 8015786:	4620      	mov	r0, r4
 8015788:	f000 fed6 	bl	8016538 <_free_r>
 801578c:	6a23      	ldr	r3, [r4, #32]
 801578e:	b14b      	cbz	r3, 80157a4 <_reclaim_reent+0xa4>
 8015790:	4620      	mov	r0, r4
 8015792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015796:	4718      	bx	r3
 8015798:	680e      	ldr	r6, [r1, #0]
 801579a:	4620      	mov	r0, r4
 801579c:	f000 fecc 	bl	8016538 <_free_r>
 80157a0:	4631      	mov	r1, r6
 80157a2:	e7bb      	b.n	801571c <_reclaim_reent+0x1c>
 80157a4:	bd70      	pop	{r4, r5, r6, pc}
 80157a6:	bf00      	nop
 80157a8:	20000140 	.word	0x20000140

080157ac <_lseek_r>:
 80157ac:	b538      	push	{r3, r4, r5, lr}
 80157ae:	4d07      	ldr	r5, [pc, #28]	@ (80157cc <_lseek_r+0x20>)
 80157b0:	4604      	mov	r4, r0
 80157b2:	4608      	mov	r0, r1
 80157b4:	4611      	mov	r1, r2
 80157b6:	2200      	movs	r2, #0
 80157b8:	602a      	str	r2, [r5, #0]
 80157ba:	461a      	mov	r2, r3
 80157bc:	f7ed fd69 	bl	8003292 <_lseek>
 80157c0:	1c43      	adds	r3, r0, #1
 80157c2:	d102      	bne.n	80157ca <_lseek_r+0x1e>
 80157c4:	682b      	ldr	r3, [r5, #0]
 80157c6:	b103      	cbz	r3, 80157ca <_lseek_r+0x1e>
 80157c8:	6023      	str	r3, [r4, #0]
 80157ca:	bd38      	pop	{r3, r4, r5, pc}
 80157cc:	200233b8 	.word	0x200233b8

080157d0 <_read_r>:
 80157d0:	b538      	push	{r3, r4, r5, lr}
 80157d2:	4d07      	ldr	r5, [pc, #28]	@ (80157f0 <_read_r+0x20>)
 80157d4:	4604      	mov	r4, r0
 80157d6:	4608      	mov	r0, r1
 80157d8:	4611      	mov	r1, r2
 80157da:	2200      	movs	r2, #0
 80157dc:	602a      	str	r2, [r5, #0]
 80157de:	461a      	mov	r2, r3
 80157e0:	f7ed fcf7 	bl	80031d2 <_read>
 80157e4:	1c43      	adds	r3, r0, #1
 80157e6:	d102      	bne.n	80157ee <_read_r+0x1e>
 80157e8:	682b      	ldr	r3, [r5, #0]
 80157ea:	b103      	cbz	r3, 80157ee <_read_r+0x1e>
 80157ec:	6023      	str	r3, [r4, #0]
 80157ee:	bd38      	pop	{r3, r4, r5, pc}
 80157f0:	200233b8 	.word	0x200233b8

080157f4 <_write_r>:
 80157f4:	b538      	push	{r3, r4, r5, lr}
 80157f6:	4d07      	ldr	r5, [pc, #28]	@ (8015814 <_write_r+0x20>)
 80157f8:	4604      	mov	r4, r0
 80157fa:	4608      	mov	r0, r1
 80157fc:	4611      	mov	r1, r2
 80157fe:	2200      	movs	r2, #0
 8015800:	602a      	str	r2, [r5, #0]
 8015802:	461a      	mov	r2, r3
 8015804:	f7ed fd02 	bl	800320c <_write>
 8015808:	1c43      	adds	r3, r0, #1
 801580a:	d102      	bne.n	8015812 <_write_r+0x1e>
 801580c:	682b      	ldr	r3, [r5, #0]
 801580e:	b103      	cbz	r3, 8015812 <_write_r+0x1e>
 8015810:	6023      	str	r3, [r4, #0]
 8015812:	bd38      	pop	{r3, r4, r5, pc}
 8015814:	200233b8 	.word	0x200233b8

08015818 <__errno>:
 8015818:	4b01      	ldr	r3, [pc, #4]	@ (8015820 <__errno+0x8>)
 801581a:	6818      	ldr	r0, [r3, #0]
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop
 8015820:	20000140 	.word	0x20000140

08015824 <__libc_init_array>:
 8015824:	b570      	push	{r4, r5, r6, lr}
 8015826:	4d0d      	ldr	r5, [pc, #52]	@ (801585c <__libc_init_array+0x38>)
 8015828:	4c0d      	ldr	r4, [pc, #52]	@ (8015860 <__libc_init_array+0x3c>)
 801582a:	1b64      	subs	r4, r4, r5
 801582c:	10a4      	asrs	r4, r4, #2
 801582e:	2600      	movs	r6, #0
 8015830:	42a6      	cmp	r6, r4
 8015832:	d109      	bne.n	8015848 <__libc_init_array+0x24>
 8015834:	4d0b      	ldr	r5, [pc, #44]	@ (8015864 <__libc_init_array+0x40>)
 8015836:	4c0c      	ldr	r4, [pc, #48]	@ (8015868 <__libc_init_array+0x44>)
 8015838:	f005 fc22 	bl	801b080 <_init>
 801583c:	1b64      	subs	r4, r4, r5
 801583e:	10a4      	asrs	r4, r4, #2
 8015840:	2600      	movs	r6, #0
 8015842:	42a6      	cmp	r6, r4
 8015844:	d105      	bne.n	8015852 <__libc_init_array+0x2e>
 8015846:	bd70      	pop	{r4, r5, r6, pc}
 8015848:	f855 3b04 	ldr.w	r3, [r5], #4
 801584c:	4798      	blx	r3
 801584e:	3601      	adds	r6, #1
 8015850:	e7ee      	b.n	8015830 <__libc_init_array+0xc>
 8015852:	f855 3b04 	ldr.w	r3, [r5], #4
 8015856:	4798      	blx	r3
 8015858:	3601      	adds	r6, #1
 801585a:	e7f2      	b.n	8015842 <__libc_init_array+0x1e>
 801585c:	0802ed20 	.word	0x0802ed20
 8015860:	0802ed20 	.word	0x0802ed20
 8015864:	0802ed20 	.word	0x0802ed20
 8015868:	0802ed24 	.word	0x0802ed24

0801586c <__retarget_lock_init_recursive>:
 801586c:	4770      	bx	lr

0801586e <__retarget_lock_acquire_recursive>:
 801586e:	4770      	bx	lr

08015870 <__retarget_lock_release_recursive>:
 8015870:	4770      	bx	lr

08015872 <memcpy>:
 8015872:	440a      	add	r2, r1
 8015874:	4291      	cmp	r1, r2
 8015876:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801587a:	d100      	bne.n	801587e <memcpy+0xc>
 801587c:	4770      	bx	lr
 801587e:	b510      	push	{r4, lr}
 8015880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015888:	4291      	cmp	r1, r2
 801588a:	d1f9      	bne.n	8015880 <memcpy+0xe>
 801588c:	bd10      	pop	{r4, pc}
	...

08015890 <nanf>:
 8015890:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015898 <nanf+0x8>
 8015894:	4770      	bx	lr
 8015896:	bf00      	nop
 8015898:	7fc00000 	.word	0x7fc00000

0801589c <quorem>:
 801589c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158a0:	6903      	ldr	r3, [r0, #16]
 80158a2:	690c      	ldr	r4, [r1, #16]
 80158a4:	42a3      	cmp	r3, r4
 80158a6:	4607      	mov	r7, r0
 80158a8:	db7e      	blt.n	80159a8 <quorem+0x10c>
 80158aa:	3c01      	subs	r4, #1
 80158ac:	f101 0814 	add.w	r8, r1, #20
 80158b0:	00a3      	lsls	r3, r4, #2
 80158b2:	f100 0514 	add.w	r5, r0, #20
 80158b6:	9300      	str	r3, [sp, #0]
 80158b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80158bc:	9301      	str	r3, [sp, #4]
 80158be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80158c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80158c6:	3301      	adds	r3, #1
 80158c8:	429a      	cmp	r2, r3
 80158ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80158ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80158d2:	d32e      	bcc.n	8015932 <quorem+0x96>
 80158d4:	f04f 0a00 	mov.w	sl, #0
 80158d8:	46c4      	mov	ip, r8
 80158da:	46ae      	mov	lr, r5
 80158dc:	46d3      	mov	fp, sl
 80158de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80158e2:	b298      	uxth	r0, r3
 80158e4:	fb06 a000 	mla	r0, r6, r0, sl
 80158e8:	0c02      	lsrs	r2, r0, #16
 80158ea:	0c1b      	lsrs	r3, r3, #16
 80158ec:	fb06 2303 	mla	r3, r6, r3, r2
 80158f0:	f8de 2000 	ldr.w	r2, [lr]
 80158f4:	b280      	uxth	r0, r0
 80158f6:	b292      	uxth	r2, r2
 80158f8:	1a12      	subs	r2, r2, r0
 80158fa:	445a      	add	r2, fp
 80158fc:	f8de 0000 	ldr.w	r0, [lr]
 8015900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015904:	b29b      	uxth	r3, r3
 8015906:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801590a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801590e:	b292      	uxth	r2, r2
 8015910:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015914:	45e1      	cmp	r9, ip
 8015916:	f84e 2b04 	str.w	r2, [lr], #4
 801591a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801591e:	d2de      	bcs.n	80158de <quorem+0x42>
 8015920:	9b00      	ldr	r3, [sp, #0]
 8015922:	58eb      	ldr	r3, [r5, r3]
 8015924:	b92b      	cbnz	r3, 8015932 <quorem+0x96>
 8015926:	9b01      	ldr	r3, [sp, #4]
 8015928:	3b04      	subs	r3, #4
 801592a:	429d      	cmp	r5, r3
 801592c:	461a      	mov	r2, r3
 801592e:	d32f      	bcc.n	8015990 <quorem+0xf4>
 8015930:	613c      	str	r4, [r7, #16]
 8015932:	4638      	mov	r0, r7
 8015934:	f001 f9c4 	bl	8016cc0 <__mcmp>
 8015938:	2800      	cmp	r0, #0
 801593a:	db25      	blt.n	8015988 <quorem+0xec>
 801593c:	4629      	mov	r1, r5
 801593e:	2000      	movs	r0, #0
 8015940:	f858 2b04 	ldr.w	r2, [r8], #4
 8015944:	f8d1 c000 	ldr.w	ip, [r1]
 8015948:	fa1f fe82 	uxth.w	lr, r2
 801594c:	fa1f f38c 	uxth.w	r3, ip
 8015950:	eba3 030e 	sub.w	r3, r3, lr
 8015954:	4403      	add	r3, r0
 8015956:	0c12      	lsrs	r2, r2, #16
 8015958:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801595c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015960:	b29b      	uxth	r3, r3
 8015962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015966:	45c1      	cmp	r9, r8
 8015968:	f841 3b04 	str.w	r3, [r1], #4
 801596c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015970:	d2e6      	bcs.n	8015940 <quorem+0xa4>
 8015972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801597a:	b922      	cbnz	r2, 8015986 <quorem+0xea>
 801597c:	3b04      	subs	r3, #4
 801597e:	429d      	cmp	r5, r3
 8015980:	461a      	mov	r2, r3
 8015982:	d30b      	bcc.n	801599c <quorem+0x100>
 8015984:	613c      	str	r4, [r7, #16]
 8015986:	3601      	adds	r6, #1
 8015988:	4630      	mov	r0, r6
 801598a:	b003      	add	sp, #12
 801598c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015990:	6812      	ldr	r2, [r2, #0]
 8015992:	3b04      	subs	r3, #4
 8015994:	2a00      	cmp	r2, #0
 8015996:	d1cb      	bne.n	8015930 <quorem+0x94>
 8015998:	3c01      	subs	r4, #1
 801599a:	e7c6      	b.n	801592a <quorem+0x8e>
 801599c:	6812      	ldr	r2, [r2, #0]
 801599e:	3b04      	subs	r3, #4
 80159a0:	2a00      	cmp	r2, #0
 80159a2:	d1ef      	bne.n	8015984 <quorem+0xe8>
 80159a4:	3c01      	subs	r4, #1
 80159a6:	e7ea      	b.n	801597e <quorem+0xe2>
 80159a8:	2000      	movs	r0, #0
 80159aa:	e7ee      	b.n	801598a <quorem+0xee>
 80159ac:	0000      	movs	r0, r0
	...

080159b0 <_dtoa_r>:
 80159b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159b4:	69c7      	ldr	r7, [r0, #28]
 80159b6:	b099      	sub	sp, #100	@ 0x64
 80159b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80159bc:	ec55 4b10 	vmov	r4, r5, d0
 80159c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80159c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80159c4:	4683      	mov	fp, r0
 80159c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80159c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80159ca:	b97f      	cbnz	r7, 80159ec <_dtoa_r+0x3c>
 80159cc:	2010      	movs	r0, #16
 80159ce:	f000 fdfd 	bl	80165cc <malloc>
 80159d2:	4602      	mov	r2, r0
 80159d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80159d8:	b920      	cbnz	r0, 80159e4 <_dtoa_r+0x34>
 80159da:	4ba7      	ldr	r3, [pc, #668]	@ (8015c78 <_dtoa_r+0x2c8>)
 80159dc:	21ef      	movs	r1, #239	@ 0xef
 80159de:	48a7      	ldr	r0, [pc, #668]	@ (8015c7c <_dtoa_r+0x2cc>)
 80159e0:	f002 fcae 	bl	8018340 <__assert_func>
 80159e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80159e8:	6007      	str	r7, [r0, #0]
 80159ea:	60c7      	str	r7, [r0, #12]
 80159ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80159f0:	6819      	ldr	r1, [r3, #0]
 80159f2:	b159      	cbz	r1, 8015a0c <_dtoa_r+0x5c>
 80159f4:	685a      	ldr	r2, [r3, #4]
 80159f6:	604a      	str	r2, [r1, #4]
 80159f8:	2301      	movs	r3, #1
 80159fa:	4093      	lsls	r3, r2
 80159fc:	608b      	str	r3, [r1, #8]
 80159fe:	4658      	mov	r0, fp
 8015a00:	f000 feda 	bl	80167b8 <_Bfree>
 8015a04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	601a      	str	r2, [r3, #0]
 8015a0c:	1e2b      	subs	r3, r5, #0
 8015a0e:	bfb9      	ittee	lt
 8015a10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015a14:	9303      	strlt	r3, [sp, #12]
 8015a16:	2300      	movge	r3, #0
 8015a18:	6033      	strge	r3, [r6, #0]
 8015a1a:	9f03      	ldr	r7, [sp, #12]
 8015a1c:	4b98      	ldr	r3, [pc, #608]	@ (8015c80 <_dtoa_r+0x2d0>)
 8015a1e:	bfbc      	itt	lt
 8015a20:	2201      	movlt	r2, #1
 8015a22:	6032      	strlt	r2, [r6, #0]
 8015a24:	43bb      	bics	r3, r7
 8015a26:	d112      	bne.n	8015a4e <_dtoa_r+0x9e>
 8015a28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015a2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015a2e:	6013      	str	r3, [r2, #0]
 8015a30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015a34:	4323      	orrs	r3, r4
 8015a36:	f000 854d 	beq.w	80164d4 <_dtoa_r+0xb24>
 8015a3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015a3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8015c94 <_dtoa_r+0x2e4>
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	f000 854f 	beq.w	80164e4 <_dtoa_r+0xb34>
 8015a46:	f10a 0303 	add.w	r3, sl, #3
 8015a4a:	f000 bd49 	b.w	80164e0 <_dtoa_r+0xb30>
 8015a4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015a52:	2200      	movs	r2, #0
 8015a54:	ec51 0b17 	vmov	r0, r1, d7
 8015a58:	2300      	movs	r3, #0
 8015a5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8015a5e:	f7eb f83b 	bl	8000ad8 <__aeabi_dcmpeq>
 8015a62:	4680      	mov	r8, r0
 8015a64:	b158      	cbz	r0, 8015a7e <_dtoa_r+0xce>
 8015a66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015a68:	2301      	movs	r3, #1
 8015a6a:	6013      	str	r3, [r2, #0]
 8015a6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015a6e:	b113      	cbz	r3, 8015a76 <_dtoa_r+0xc6>
 8015a70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015a72:	4b84      	ldr	r3, [pc, #528]	@ (8015c84 <_dtoa_r+0x2d4>)
 8015a74:	6013      	str	r3, [r2, #0]
 8015a76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015c98 <_dtoa_r+0x2e8>
 8015a7a:	f000 bd33 	b.w	80164e4 <_dtoa_r+0xb34>
 8015a7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015a82:	aa16      	add	r2, sp, #88	@ 0x58
 8015a84:	a917      	add	r1, sp, #92	@ 0x5c
 8015a86:	4658      	mov	r0, fp
 8015a88:	f001 fa3a 	bl	8016f00 <__d2b>
 8015a8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015a90:	4681      	mov	r9, r0
 8015a92:	2e00      	cmp	r6, #0
 8015a94:	d077      	beq.n	8015b86 <_dtoa_r+0x1d6>
 8015a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8015a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015aa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015aa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015aac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015ab0:	4619      	mov	r1, r3
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	4b74      	ldr	r3, [pc, #464]	@ (8015c88 <_dtoa_r+0x2d8>)
 8015ab6:	f7ea fbef 	bl	8000298 <__aeabi_dsub>
 8015aba:	a369      	add	r3, pc, #420	@ (adr r3, 8015c60 <_dtoa_r+0x2b0>)
 8015abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac0:	f7ea fda2 	bl	8000608 <__aeabi_dmul>
 8015ac4:	a368      	add	r3, pc, #416	@ (adr r3, 8015c68 <_dtoa_r+0x2b8>)
 8015ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aca:	f7ea fbe7 	bl	800029c <__adddf3>
 8015ace:	4604      	mov	r4, r0
 8015ad0:	4630      	mov	r0, r6
 8015ad2:	460d      	mov	r5, r1
 8015ad4:	f7ea fd2e 	bl	8000534 <__aeabi_i2d>
 8015ad8:	a365      	add	r3, pc, #404	@ (adr r3, 8015c70 <_dtoa_r+0x2c0>)
 8015ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ade:	f7ea fd93 	bl	8000608 <__aeabi_dmul>
 8015ae2:	4602      	mov	r2, r0
 8015ae4:	460b      	mov	r3, r1
 8015ae6:	4620      	mov	r0, r4
 8015ae8:	4629      	mov	r1, r5
 8015aea:	f7ea fbd7 	bl	800029c <__adddf3>
 8015aee:	4604      	mov	r4, r0
 8015af0:	460d      	mov	r5, r1
 8015af2:	f7eb f839 	bl	8000b68 <__aeabi_d2iz>
 8015af6:	2200      	movs	r2, #0
 8015af8:	4607      	mov	r7, r0
 8015afa:	2300      	movs	r3, #0
 8015afc:	4620      	mov	r0, r4
 8015afe:	4629      	mov	r1, r5
 8015b00:	f7ea fff4 	bl	8000aec <__aeabi_dcmplt>
 8015b04:	b140      	cbz	r0, 8015b18 <_dtoa_r+0x168>
 8015b06:	4638      	mov	r0, r7
 8015b08:	f7ea fd14 	bl	8000534 <__aeabi_i2d>
 8015b0c:	4622      	mov	r2, r4
 8015b0e:	462b      	mov	r3, r5
 8015b10:	f7ea ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8015b14:	b900      	cbnz	r0, 8015b18 <_dtoa_r+0x168>
 8015b16:	3f01      	subs	r7, #1
 8015b18:	2f16      	cmp	r7, #22
 8015b1a:	d851      	bhi.n	8015bc0 <_dtoa_r+0x210>
 8015b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8015c8c <_dtoa_r+0x2dc>)
 8015b1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015b2a:	f7ea ffdf 	bl	8000aec <__aeabi_dcmplt>
 8015b2e:	2800      	cmp	r0, #0
 8015b30:	d048      	beq.n	8015bc4 <_dtoa_r+0x214>
 8015b32:	3f01      	subs	r7, #1
 8015b34:	2300      	movs	r3, #0
 8015b36:	9312      	str	r3, [sp, #72]	@ 0x48
 8015b38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015b3a:	1b9b      	subs	r3, r3, r6
 8015b3c:	1e5a      	subs	r2, r3, #1
 8015b3e:	bf44      	itt	mi
 8015b40:	f1c3 0801 	rsbmi	r8, r3, #1
 8015b44:	2300      	movmi	r3, #0
 8015b46:	9208      	str	r2, [sp, #32]
 8015b48:	bf54      	ite	pl
 8015b4a:	f04f 0800 	movpl.w	r8, #0
 8015b4e:	9308      	strmi	r3, [sp, #32]
 8015b50:	2f00      	cmp	r7, #0
 8015b52:	db39      	blt.n	8015bc8 <_dtoa_r+0x218>
 8015b54:	9b08      	ldr	r3, [sp, #32]
 8015b56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8015b58:	443b      	add	r3, r7
 8015b5a:	9308      	str	r3, [sp, #32]
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b62:	2b09      	cmp	r3, #9
 8015b64:	d864      	bhi.n	8015c30 <_dtoa_r+0x280>
 8015b66:	2b05      	cmp	r3, #5
 8015b68:	bfc4      	itt	gt
 8015b6a:	3b04      	subgt	r3, #4
 8015b6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8015b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b70:	f1a3 0302 	sub.w	r3, r3, #2
 8015b74:	bfcc      	ite	gt
 8015b76:	2400      	movgt	r4, #0
 8015b78:	2401      	movle	r4, #1
 8015b7a:	2b03      	cmp	r3, #3
 8015b7c:	d863      	bhi.n	8015c46 <_dtoa_r+0x296>
 8015b7e:	e8df f003 	tbb	[pc, r3]
 8015b82:	372a      	.short	0x372a
 8015b84:	5535      	.short	0x5535
 8015b86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8015b8a:	441e      	add	r6, r3
 8015b8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015b90:	2b20      	cmp	r3, #32
 8015b92:	bfc1      	itttt	gt
 8015b94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015b98:	409f      	lslgt	r7, r3
 8015b9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015b9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015ba2:	bfd6      	itet	le
 8015ba4:	f1c3 0320 	rsble	r3, r3, #32
 8015ba8:	ea47 0003 	orrgt.w	r0, r7, r3
 8015bac:	fa04 f003 	lslle.w	r0, r4, r3
 8015bb0:	f7ea fcb0 	bl	8000514 <__aeabi_ui2d>
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015bba:	3e01      	subs	r6, #1
 8015bbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8015bbe:	e777      	b.n	8015ab0 <_dtoa_r+0x100>
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	e7b8      	b.n	8015b36 <_dtoa_r+0x186>
 8015bc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8015bc6:	e7b7      	b.n	8015b38 <_dtoa_r+0x188>
 8015bc8:	427b      	negs	r3, r7
 8015bca:	930a      	str	r3, [sp, #40]	@ 0x28
 8015bcc:	2300      	movs	r3, #0
 8015bce:	eba8 0807 	sub.w	r8, r8, r7
 8015bd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015bd4:	e7c4      	b.n	8015b60 <_dtoa_r+0x1b0>
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015bda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	dc35      	bgt.n	8015c4c <_dtoa_r+0x29c>
 8015be0:	2301      	movs	r3, #1
 8015be2:	9300      	str	r3, [sp, #0]
 8015be4:	9307      	str	r3, [sp, #28]
 8015be6:	461a      	mov	r2, r3
 8015be8:	920e      	str	r2, [sp, #56]	@ 0x38
 8015bea:	e00b      	b.n	8015c04 <_dtoa_r+0x254>
 8015bec:	2301      	movs	r3, #1
 8015bee:	e7f3      	b.n	8015bd8 <_dtoa_r+0x228>
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015bf6:	18fb      	adds	r3, r7, r3
 8015bf8:	9300      	str	r3, [sp, #0]
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	2b01      	cmp	r3, #1
 8015bfe:	9307      	str	r3, [sp, #28]
 8015c00:	bfb8      	it	lt
 8015c02:	2301      	movlt	r3, #1
 8015c04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015c08:	2100      	movs	r1, #0
 8015c0a:	2204      	movs	r2, #4
 8015c0c:	f102 0514 	add.w	r5, r2, #20
 8015c10:	429d      	cmp	r5, r3
 8015c12:	d91f      	bls.n	8015c54 <_dtoa_r+0x2a4>
 8015c14:	6041      	str	r1, [r0, #4]
 8015c16:	4658      	mov	r0, fp
 8015c18:	f000 fd8e 	bl	8016738 <_Balloc>
 8015c1c:	4682      	mov	sl, r0
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	d13c      	bne.n	8015c9c <_dtoa_r+0x2ec>
 8015c22:	4b1b      	ldr	r3, [pc, #108]	@ (8015c90 <_dtoa_r+0x2e0>)
 8015c24:	4602      	mov	r2, r0
 8015c26:	f240 11af 	movw	r1, #431	@ 0x1af
 8015c2a:	e6d8      	b.n	80159de <_dtoa_r+0x2e>
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	e7e0      	b.n	8015bf2 <_dtoa_r+0x242>
 8015c30:	2401      	movs	r4, #1
 8015c32:	2300      	movs	r3, #0
 8015c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015c38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015c3c:	9300      	str	r3, [sp, #0]
 8015c3e:	9307      	str	r3, [sp, #28]
 8015c40:	2200      	movs	r2, #0
 8015c42:	2312      	movs	r3, #18
 8015c44:	e7d0      	b.n	8015be8 <_dtoa_r+0x238>
 8015c46:	2301      	movs	r3, #1
 8015c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015c4a:	e7f5      	b.n	8015c38 <_dtoa_r+0x288>
 8015c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c4e:	9300      	str	r3, [sp, #0]
 8015c50:	9307      	str	r3, [sp, #28]
 8015c52:	e7d7      	b.n	8015c04 <_dtoa_r+0x254>
 8015c54:	3101      	adds	r1, #1
 8015c56:	0052      	lsls	r2, r2, #1
 8015c58:	e7d8      	b.n	8015c0c <_dtoa_r+0x25c>
 8015c5a:	bf00      	nop
 8015c5c:	f3af 8000 	nop.w
 8015c60:	636f4361 	.word	0x636f4361
 8015c64:	3fd287a7 	.word	0x3fd287a7
 8015c68:	8b60c8b3 	.word	0x8b60c8b3
 8015c6c:	3fc68a28 	.word	0x3fc68a28
 8015c70:	509f79fb 	.word	0x509f79fb
 8015c74:	3fd34413 	.word	0x3fd34413
 8015c78:	0802e6e6 	.word	0x0802e6e6
 8015c7c:	0802e6fd 	.word	0x0802e6fd
 8015c80:	7ff00000 	.word	0x7ff00000
 8015c84:	0802e6b1 	.word	0x0802e6b1
 8015c88:	3ff80000 	.word	0x3ff80000
 8015c8c:	0802e7f8 	.word	0x0802e7f8
 8015c90:	0802e755 	.word	0x0802e755
 8015c94:	0802e6e2 	.word	0x0802e6e2
 8015c98:	0802e6b0 	.word	0x0802e6b0
 8015c9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015ca0:	6018      	str	r0, [r3, #0]
 8015ca2:	9b07      	ldr	r3, [sp, #28]
 8015ca4:	2b0e      	cmp	r3, #14
 8015ca6:	f200 80a4 	bhi.w	8015df2 <_dtoa_r+0x442>
 8015caa:	2c00      	cmp	r4, #0
 8015cac:	f000 80a1 	beq.w	8015df2 <_dtoa_r+0x442>
 8015cb0:	2f00      	cmp	r7, #0
 8015cb2:	dd33      	ble.n	8015d1c <_dtoa_r+0x36c>
 8015cb4:	4bad      	ldr	r3, [pc, #692]	@ (8015f6c <_dtoa_r+0x5bc>)
 8015cb6:	f007 020f 	and.w	r2, r7, #15
 8015cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015cbe:	ed93 7b00 	vldr	d7, [r3]
 8015cc2:	05f8      	lsls	r0, r7, #23
 8015cc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015cc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015ccc:	d516      	bpl.n	8015cfc <_dtoa_r+0x34c>
 8015cce:	4ba8      	ldr	r3, [pc, #672]	@ (8015f70 <_dtoa_r+0x5c0>)
 8015cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015cd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015cd8:	f7ea fdc0 	bl	800085c <__aeabi_ddiv>
 8015cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ce0:	f004 040f 	and.w	r4, r4, #15
 8015ce4:	2603      	movs	r6, #3
 8015ce6:	4da2      	ldr	r5, [pc, #648]	@ (8015f70 <_dtoa_r+0x5c0>)
 8015ce8:	b954      	cbnz	r4, 8015d00 <_dtoa_r+0x350>
 8015cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015cf2:	f7ea fdb3 	bl	800085c <__aeabi_ddiv>
 8015cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015cfa:	e028      	b.n	8015d4e <_dtoa_r+0x39e>
 8015cfc:	2602      	movs	r6, #2
 8015cfe:	e7f2      	b.n	8015ce6 <_dtoa_r+0x336>
 8015d00:	07e1      	lsls	r1, r4, #31
 8015d02:	d508      	bpl.n	8015d16 <_dtoa_r+0x366>
 8015d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015d08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015d0c:	f7ea fc7c 	bl	8000608 <__aeabi_dmul>
 8015d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d14:	3601      	adds	r6, #1
 8015d16:	1064      	asrs	r4, r4, #1
 8015d18:	3508      	adds	r5, #8
 8015d1a:	e7e5      	b.n	8015ce8 <_dtoa_r+0x338>
 8015d1c:	f000 80d2 	beq.w	8015ec4 <_dtoa_r+0x514>
 8015d20:	427c      	negs	r4, r7
 8015d22:	4b92      	ldr	r3, [pc, #584]	@ (8015f6c <_dtoa_r+0x5bc>)
 8015d24:	4d92      	ldr	r5, [pc, #584]	@ (8015f70 <_dtoa_r+0x5c0>)
 8015d26:	f004 020f 	and.w	r2, r4, #15
 8015d2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015d36:	f7ea fc67 	bl	8000608 <__aeabi_dmul>
 8015d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d3e:	1124      	asrs	r4, r4, #4
 8015d40:	2300      	movs	r3, #0
 8015d42:	2602      	movs	r6, #2
 8015d44:	2c00      	cmp	r4, #0
 8015d46:	f040 80b2 	bne.w	8015eae <_dtoa_r+0x4fe>
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d1d3      	bne.n	8015cf6 <_dtoa_r+0x346>
 8015d4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015d50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	f000 80b7 	beq.w	8015ec8 <_dtoa_r+0x518>
 8015d5a:	4b86      	ldr	r3, [pc, #536]	@ (8015f74 <_dtoa_r+0x5c4>)
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	4620      	mov	r0, r4
 8015d60:	4629      	mov	r1, r5
 8015d62:	f7ea fec3 	bl	8000aec <__aeabi_dcmplt>
 8015d66:	2800      	cmp	r0, #0
 8015d68:	f000 80ae 	beq.w	8015ec8 <_dtoa_r+0x518>
 8015d6c:	9b07      	ldr	r3, [sp, #28]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	f000 80aa 	beq.w	8015ec8 <_dtoa_r+0x518>
 8015d74:	9b00      	ldr	r3, [sp, #0]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	dd37      	ble.n	8015dea <_dtoa_r+0x43a>
 8015d7a:	1e7b      	subs	r3, r7, #1
 8015d7c:	9304      	str	r3, [sp, #16]
 8015d7e:	4620      	mov	r0, r4
 8015d80:	4b7d      	ldr	r3, [pc, #500]	@ (8015f78 <_dtoa_r+0x5c8>)
 8015d82:	2200      	movs	r2, #0
 8015d84:	4629      	mov	r1, r5
 8015d86:	f7ea fc3f 	bl	8000608 <__aeabi_dmul>
 8015d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d8e:	9c00      	ldr	r4, [sp, #0]
 8015d90:	3601      	adds	r6, #1
 8015d92:	4630      	mov	r0, r6
 8015d94:	f7ea fbce 	bl	8000534 <__aeabi_i2d>
 8015d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d9c:	f7ea fc34 	bl	8000608 <__aeabi_dmul>
 8015da0:	4b76      	ldr	r3, [pc, #472]	@ (8015f7c <_dtoa_r+0x5cc>)
 8015da2:	2200      	movs	r2, #0
 8015da4:	f7ea fa7a 	bl	800029c <__adddf3>
 8015da8:	4605      	mov	r5, r0
 8015daa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015dae:	2c00      	cmp	r4, #0
 8015db0:	f040 808d 	bne.w	8015ece <_dtoa_r+0x51e>
 8015db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015db8:	4b71      	ldr	r3, [pc, #452]	@ (8015f80 <_dtoa_r+0x5d0>)
 8015dba:	2200      	movs	r2, #0
 8015dbc:	f7ea fa6c 	bl	8000298 <__aeabi_dsub>
 8015dc0:	4602      	mov	r2, r0
 8015dc2:	460b      	mov	r3, r1
 8015dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015dc8:	462a      	mov	r2, r5
 8015dca:	4633      	mov	r3, r6
 8015dcc:	f7ea feac 	bl	8000b28 <__aeabi_dcmpgt>
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	f040 828b 	bne.w	80162ec <_dtoa_r+0x93c>
 8015dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015dda:	462a      	mov	r2, r5
 8015ddc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015de0:	f7ea fe84 	bl	8000aec <__aeabi_dcmplt>
 8015de4:	2800      	cmp	r0, #0
 8015de6:	f040 8128 	bne.w	801603a <_dtoa_r+0x68a>
 8015dea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8015dee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015df2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	f2c0 815a 	blt.w	80160ae <_dtoa_r+0x6fe>
 8015dfa:	2f0e      	cmp	r7, #14
 8015dfc:	f300 8157 	bgt.w	80160ae <_dtoa_r+0x6fe>
 8015e00:	4b5a      	ldr	r3, [pc, #360]	@ (8015f6c <_dtoa_r+0x5bc>)
 8015e02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015e06:	ed93 7b00 	vldr	d7, [r3]
 8015e0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	ed8d 7b00 	vstr	d7, [sp]
 8015e12:	da03      	bge.n	8015e1c <_dtoa_r+0x46c>
 8015e14:	9b07      	ldr	r3, [sp, #28]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	f340 8101 	ble.w	801601e <_dtoa_r+0x66e>
 8015e1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015e20:	4656      	mov	r6, sl
 8015e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e26:	4620      	mov	r0, r4
 8015e28:	4629      	mov	r1, r5
 8015e2a:	f7ea fd17 	bl	800085c <__aeabi_ddiv>
 8015e2e:	f7ea fe9b 	bl	8000b68 <__aeabi_d2iz>
 8015e32:	4680      	mov	r8, r0
 8015e34:	f7ea fb7e 	bl	8000534 <__aeabi_i2d>
 8015e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e3c:	f7ea fbe4 	bl	8000608 <__aeabi_dmul>
 8015e40:	4602      	mov	r2, r0
 8015e42:	460b      	mov	r3, r1
 8015e44:	4620      	mov	r0, r4
 8015e46:	4629      	mov	r1, r5
 8015e48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015e4c:	f7ea fa24 	bl	8000298 <__aeabi_dsub>
 8015e50:	f806 4b01 	strb.w	r4, [r6], #1
 8015e54:	9d07      	ldr	r5, [sp, #28]
 8015e56:	eba6 040a 	sub.w	r4, r6, sl
 8015e5a:	42a5      	cmp	r5, r4
 8015e5c:	4602      	mov	r2, r0
 8015e5e:	460b      	mov	r3, r1
 8015e60:	f040 8117 	bne.w	8016092 <_dtoa_r+0x6e2>
 8015e64:	f7ea fa1a 	bl	800029c <__adddf3>
 8015e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	460d      	mov	r5, r1
 8015e70:	f7ea fe5a 	bl	8000b28 <__aeabi_dcmpgt>
 8015e74:	2800      	cmp	r0, #0
 8015e76:	f040 80f9 	bne.w	801606c <_dtoa_r+0x6bc>
 8015e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e7e:	4620      	mov	r0, r4
 8015e80:	4629      	mov	r1, r5
 8015e82:	f7ea fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 8015e86:	b118      	cbz	r0, 8015e90 <_dtoa_r+0x4e0>
 8015e88:	f018 0f01 	tst.w	r8, #1
 8015e8c:	f040 80ee 	bne.w	801606c <_dtoa_r+0x6bc>
 8015e90:	4649      	mov	r1, r9
 8015e92:	4658      	mov	r0, fp
 8015e94:	f000 fc90 	bl	80167b8 <_Bfree>
 8015e98:	2300      	movs	r3, #0
 8015e9a:	7033      	strb	r3, [r6, #0]
 8015e9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015e9e:	3701      	adds	r7, #1
 8015ea0:	601f      	str	r7, [r3, #0]
 8015ea2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	f000 831d 	beq.w	80164e4 <_dtoa_r+0xb34>
 8015eaa:	601e      	str	r6, [r3, #0]
 8015eac:	e31a      	b.n	80164e4 <_dtoa_r+0xb34>
 8015eae:	07e2      	lsls	r2, r4, #31
 8015eb0:	d505      	bpl.n	8015ebe <_dtoa_r+0x50e>
 8015eb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015eb6:	f7ea fba7 	bl	8000608 <__aeabi_dmul>
 8015eba:	3601      	adds	r6, #1
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	1064      	asrs	r4, r4, #1
 8015ec0:	3508      	adds	r5, #8
 8015ec2:	e73f      	b.n	8015d44 <_dtoa_r+0x394>
 8015ec4:	2602      	movs	r6, #2
 8015ec6:	e742      	b.n	8015d4e <_dtoa_r+0x39e>
 8015ec8:	9c07      	ldr	r4, [sp, #28]
 8015eca:	9704      	str	r7, [sp, #16]
 8015ecc:	e761      	b.n	8015d92 <_dtoa_r+0x3e2>
 8015ece:	4b27      	ldr	r3, [pc, #156]	@ (8015f6c <_dtoa_r+0x5bc>)
 8015ed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015ed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015ed6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015eda:	4454      	add	r4, sl
 8015edc:	2900      	cmp	r1, #0
 8015ede:	d053      	beq.n	8015f88 <_dtoa_r+0x5d8>
 8015ee0:	4928      	ldr	r1, [pc, #160]	@ (8015f84 <_dtoa_r+0x5d4>)
 8015ee2:	2000      	movs	r0, #0
 8015ee4:	f7ea fcba 	bl	800085c <__aeabi_ddiv>
 8015ee8:	4633      	mov	r3, r6
 8015eea:	462a      	mov	r2, r5
 8015eec:	f7ea f9d4 	bl	8000298 <__aeabi_dsub>
 8015ef0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015ef4:	4656      	mov	r6, sl
 8015ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015efa:	f7ea fe35 	bl	8000b68 <__aeabi_d2iz>
 8015efe:	4605      	mov	r5, r0
 8015f00:	f7ea fb18 	bl	8000534 <__aeabi_i2d>
 8015f04:	4602      	mov	r2, r0
 8015f06:	460b      	mov	r3, r1
 8015f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015f0c:	f7ea f9c4 	bl	8000298 <__aeabi_dsub>
 8015f10:	3530      	adds	r5, #48	@ 0x30
 8015f12:	4602      	mov	r2, r0
 8015f14:	460b      	mov	r3, r1
 8015f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015f1a:	f806 5b01 	strb.w	r5, [r6], #1
 8015f1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015f22:	f7ea fde3 	bl	8000aec <__aeabi_dcmplt>
 8015f26:	2800      	cmp	r0, #0
 8015f28:	d171      	bne.n	801600e <_dtoa_r+0x65e>
 8015f2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015f2e:	4911      	ldr	r1, [pc, #68]	@ (8015f74 <_dtoa_r+0x5c4>)
 8015f30:	2000      	movs	r0, #0
 8015f32:	f7ea f9b1 	bl	8000298 <__aeabi_dsub>
 8015f36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015f3a:	f7ea fdd7 	bl	8000aec <__aeabi_dcmplt>
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	f040 8095 	bne.w	801606e <_dtoa_r+0x6be>
 8015f44:	42a6      	cmp	r6, r4
 8015f46:	f43f af50 	beq.w	8015dea <_dtoa_r+0x43a>
 8015f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8015f78 <_dtoa_r+0x5c8>)
 8015f50:	2200      	movs	r2, #0
 8015f52:	f7ea fb59 	bl	8000608 <__aeabi_dmul>
 8015f56:	4b08      	ldr	r3, [pc, #32]	@ (8015f78 <_dtoa_r+0x5c8>)
 8015f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015f62:	f7ea fb51 	bl	8000608 <__aeabi_dmul>
 8015f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f6a:	e7c4      	b.n	8015ef6 <_dtoa_r+0x546>
 8015f6c:	0802e7f8 	.word	0x0802e7f8
 8015f70:	0802e7d0 	.word	0x0802e7d0
 8015f74:	3ff00000 	.word	0x3ff00000
 8015f78:	40240000 	.word	0x40240000
 8015f7c:	401c0000 	.word	0x401c0000
 8015f80:	40140000 	.word	0x40140000
 8015f84:	3fe00000 	.word	0x3fe00000
 8015f88:	4631      	mov	r1, r6
 8015f8a:	4628      	mov	r0, r5
 8015f8c:	f7ea fb3c 	bl	8000608 <__aeabi_dmul>
 8015f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015f94:	9415      	str	r4, [sp, #84]	@ 0x54
 8015f96:	4656      	mov	r6, sl
 8015f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015f9c:	f7ea fde4 	bl	8000b68 <__aeabi_d2iz>
 8015fa0:	4605      	mov	r5, r0
 8015fa2:	f7ea fac7 	bl	8000534 <__aeabi_i2d>
 8015fa6:	4602      	mov	r2, r0
 8015fa8:	460b      	mov	r3, r1
 8015faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015fae:	f7ea f973 	bl	8000298 <__aeabi_dsub>
 8015fb2:	3530      	adds	r5, #48	@ 0x30
 8015fb4:	f806 5b01 	strb.w	r5, [r6], #1
 8015fb8:	4602      	mov	r2, r0
 8015fba:	460b      	mov	r3, r1
 8015fbc:	42a6      	cmp	r6, r4
 8015fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015fc2:	f04f 0200 	mov.w	r2, #0
 8015fc6:	d124      	bne.n	8016012 <_dtoa_r+0x662>
 8015fc8:	4bac      	ldr	r3, [pc, #688]	@ (801627c <_dtoa_r+0x8cc>)
 8015fca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015fce:	f7ea f965 	bl	800029c <__adddf3>
 8015fd2:	4602      	mov	r2, r0
 8015fd4:	460b      	mov	r3, r1
 8015fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015fda:	f7ea fda5 	bl	8000b28 <__aeabi_dcmpgt>
 8015fde:	2800      	cmp	r0, #0
 8015fe0:	d145      	bne.n	801606e <_dtoa_r+0x6be>
 8015fe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015fe6:	49a5      	ldr	r1, [pc, #660]	@ (801627c <_dtoa_r+0x8cc>)
 8015fe8:	2000      	movs	r0, #0
 8015fea:	f7ea f955 	bl	8000298 <__aeabi_dsub>
 8015fee:	4602      	mov	r2, r0
 8015ff0:	460b      	mov	r3, r1
 8015ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ff6:	f7ea fd79 	bl	8000aec <__aeabi_dcmplt>
 8015ffa:	2800      	cmp	r0, #0
 8015ffc:	f43f aef5 	beq.w	8015dea <_dtoa_r+0x43a>
 8016000:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8016002:	1e73      	subs	r3, r6, #1
 8016004:	9315      	str	r3, [sp, #84]	@ 0x54
 8016006:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801600a:	2b30      	cmp	r3, #48	@ 0x30
 801600c:	d0f8      	beq.n	8016000 <_dtoa_r+0x650>
 801600e:	9f04      	ldr	r7, [sp, #16]
 8016010:	e73e      	b.n	8015e90 <_dtoa_r+0x4e0>
 8016012:	4b9b      	ldr	r3, [pc, #620]	@ (8016280 <_dtoa_r+0x8d0>)
 8016014:	f7ea faf8 	bl	8000608 <__aeabi_dmul>
 8016018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801601c:	e7bc      	b.n	8015f98 <_dtoa_r+0x5e8>
 801601e:	d10c      	bne.n	801603a <_dtoa_r+0x68a>
 8016020:	4b98      	ldr	r3, [pc, #608]	@ (8016284 <_dtoa_r+0x8d4>)
 8016022:	2200      	movs	r2, #0
 8016024:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016028:	f7ea faee 	bl	8000608 <__aeabi_dmul>
 801602c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016030:	f7ea fd70 	bl	8000b14 <__aeabi_dcmpge>
 8016034:	2800      	cmp	r0, #0
 8016036:	f000 8157 	beq.w	80162e8 <_dtoa_r+0x938>
 801603a:	2400      	movs	r4, #0
 801603c:	4625      	mov	r5, r4
 801603e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016040:	43db      	mvns	r3, r3
 8016042:	9304      	str	r3, [sp, #16]
 8016044:	4656      	mov	r6, sl
 8016046:	2700      	movs	r7, #0
 8016048:	4621      	mov	r1, r4
 801604a:	4658      	mov	r0, fp
 801604c:	f000 fbb4 	bl	80167b8 <_Bfree>
 8016050:	2d00      	cmp	r5, #0
 8016052:	d0dc      	beq.n	801600e <_dtoa_r+0x65e>
 8016054:	b12f      	cbz	r7, 8016062 <_dtoa_r+0x6b2>
 8016056:	42af      	cmp	r7, r5
 8016058:	d003      	beq.n	8016062 <_dtoa_r+0x6b2>
 801605a:	4639      	mov	r1, r7
 801605c:	4658      	mov	r0, fp
 801605e:	f000 fbab 	bl	80167b8 <_Bfree>
 8016062:	4629      	mov	r1, r5
 8016064:	4658      	mov	r0, fp
 8016066:	f000 fba7 	bl	80167b8 <_Bfree>
 801606a:	e7d0      	b.n	801600e <_dtoa_r+0x65e>
 801606c:	9704      	str	r7, [sp, #16]
 801606e:	4633      	mov	r3, r6
 8016070:	461e      	mov	r6, r3
 8016072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016076:	2a39      	cmp	r2, #57	@ 0x39
 8016078:	d107      	bne.n	801608a <_dtoa_r+0x6da>
 801607a:	459a      	cmp	sl, r3
 801607c:	d1f8      	bne.n	8016070 <_dtoa_r+0x6c0>
 801607e:	9a04      	ldr	r2, [sp, #16]
 8016080:	3201      	adds	r2, #1
 8016082:	9204      	str	r2, [sp, #16]
 8016084:	2230      	movs	r2, #48	@ 0x30
 8016086:	f88a 2000 	strb.w	r2, [sl]
 801608a:	781a      	ldrb	r2, [r3, #0]
 801608c:	3201      	adds	r2, #1
 801608e:	701a      	strb	r2, [r3, #0]
 8016090:	e7bd      	b.n	801600e <_dtoa_r+0x65e>
 8016092:	4b7b      	ldr	r3, [pc, #492]	@ (8016280 <_dtoa_r+0x8d0>)
 8016094:	2200      	movs	r2, #0
 8016096:	f7ea fab7 	bl	8000608 <__aeabi_dmul>
 801609a:	2200      	movs	r2, #0
 801609c:	2300      	movs	r3, #0
 801609e:	4604      	mov	r4, r0
 80160a0:	460d      	mov	r5, r1
 80160a2:	f7ea fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 80160a6:	2800      	cmp	r0, #0
 80160a8:	f43f aebb 	beq.w	8015e22 <_dtoa_r+0x472>
 80160ac:	e6f0      	b.n	8015e90 <_dtoa_r+0x4e0>
 80160ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80160b0:	2a00      	cmp	r2, #0
 80160b2:	f000 80db 	beq.w	801626c <_dtoa_r+0x8bc>
 80160b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80160b8:	2a01      	cmp	r2, #1
 80160ba:	f300 80bf 	bgt.w	801623c <_dtoa_r+0x88c>
 80160be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80160c0:	2a00      	cmp	r2, #0
 80160c2:	f000 80b7 	beq.w	8016234 <_dtoa_r+0x884>
 80160c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80160ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80160cc:	4646      	mov	r6, r8
 80160ce:	9a08      	ldr	r2, [sp, #32]
 80160d0:	2101      	movs	r1, #1
 80160d2:	441a      	add	r2, r3
 80160d4:	4658      	mov	r0, fp
 80160d6:	4498      	add	r8, r3
 80160d8:	9208      	str	r2, [sp, #32]
 80160da:	f000 fc6b 	bl	80169b4 <__i2b>
 80160de:	4605      	mov	r5, r0
 80160e0:	b15e      	cbz	r6, 80160fa <_dtoa_r+0x74a>
 80160e2:	9b08      	ldr	r3, [sp, #32]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	dd08      	ble.n	80160fa <_dtoa_r+0x74a>
 80160e8:	42b3      	cmp	r3, r6
 80160ea:	9a08      	ldr	r2, [sp, #32]
 80160ec:	bfa8      	it	ge
 80160ee:	4633      	movge	r3, r6
 80160f0:	eba8 0803 	sub.w	r8, r8, r3
 80160f4:	1af6      	subs	r6, r6, r3
 80160f6:	1ad3      	subs	r3, r2, r3
 80160f8:	9308      	str	r3, [sp, #32]
 80160fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80160fc:	b1f3      	cbz	r3, 801613c <_dtoa_r+0x78c>
 80160fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016100:	2b00      	cmp	r3, #0
 8016102:	f000 80b7 	beq.w	8016274 <_dtoa_r+0x8c4>
 8016106:	b18c      	cbz	r4, 801612c <_dtoa_r+0x77c>
 8016108:	4629      	mov	r1, r5
 801610a:	4622      	mov	r2, r4
 801610c:	4658      	mov	r0, fp
 801610e:	f000 fd11 	bl	8016b34 <__pow5mult>
 8016112:	464a      	mov	r2, r9
 8016114:	4601      	mov	r1, r0
 8016116:	4605      	mov	r5, r0
 8016118:	4658      	mov	r0, fp
 801611a:	f000 fc61 	bl	80169e0 <__multiply>
 801611e:	4649      	mov	r1, r9
 8016120:	9004      	str	r0, [sp, #16]
 8016122:	4658      	mov	r0, fp
 8016124:	f000 fb48 	bl	80167b8 <_Bfree>
 8016128:	9b04      	ldr	r3, [sp, #16]
 801612a:	4699      	mov	r9, r3
 801612c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801612e:	1b1a      	subs	r2, r3, r4
 8016130:	d004      	beq.n	801613c <_dtoa_r+0x78c>
 8016132:	4649      	mov	r1, r9
 8016134:	4658      	mov	r0, fp
 8016136:	f000 fcfd 	bl	8016b34 <__pow5mult>
 801613a:	4681      	mov	r9, r0
 801613c:	2101      	movs	r1, #1
 801613e:	4658      	mov	r0, fp
 8016140:	f000 fc38 	bl	80169b4 <__i2b>
 8016144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016146:	4604      	mov	r4, r0
 8016148:	2b00      	cmp	r3, #0
 801614a:	f000 81cf 	beq.w	80164ec <_dtoa_r+0xb3c>
 801614e:	461a      	mov	r2, r3
 8016150:	4601      	mov	r1, r0
 8016152:	4658      	mov	r0, fp
 8016154:	f000 fcee 	bl	8016b34 <__pow5mult>
 8016158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801615a:	2b01      	cmp	r3, #1
 801615c:	4604      	mov	r4, r0
 801615e:	f300 8095 	bgt.w	801628c <_dtoa_r+0x8dc>
 8016162:	9b02      	ldr	r3, [sp, #8]
 8016164:	2b00      	cmp	r3, #0
 8016166:	f040 8087 	bne.w	8016278 <_dtoa_r+0x8c8>
 801616a:	9b03      	ldr	r3, [sp, #12]
 801616c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016170:	2b00      	cmp	r3, #0
 8016172:	f040 8089 	bne.w	8016288 <_dtoa_r+0x8d8>
 8016176:	9b03      	ldr	r3, [sp, #12]
 8016178:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801617c:	0d1b      	lsrs	r3, r3, #20
 801617e:	051b      	lsls	r3, r3, #20
 8016180:	b12b      	cbz	r3, 801618e <_dtoa_r+0x7de>
 8016182:	9b08      	ldr	r3, [sp, #32]
 8016184:	3301      	adds	r3, #1
 8016186:	9308      	str	r3, [sp, #32]
 8016188:	f108 0801 	add.w	r8, r8, #1
 801618c:	2301      	movs	r3, #1
 801618e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016192:	2b00      	cmp	r3, #0
 8016194:	f000 81b0 	beq.w	80164f8 <_dtoa_r+0xb48>
 8016198:	6923      	ldr	r3, [r4, #16]
 801619a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801619e:	6918      	ldr	r0, [r3, #16]
 80161a0:	f000 fbbc 	bl	801691c <__hi0bits>
 80161a4:	f1c0 0020 	rsb	r0, r0, #32
 80161a8:	9b08      	ldr	r3, [sp, #32]
 80161aa:	4418      	add	r0, r3
 80161ac:	f010 001f 	ands.w	r0, r0, #31
 80161b0:	d077      	beq.n	80162a2 <_dtoa_r+0x8f2>
 80161b2:	f1c0 0320 	rsb	r3, r0, #32
 80161b6:	2b04      	cmp	r3, #4
 80161b8:	dd6b      	ble.n	8016292 <_dtoa_r+0x8e2>
 80161ba:	9b08      	ldr	r3, [sp, #32]
 80161bc:	f1c0 001c 	rsb	r0, r0, #28
 80161c0:	4403      	add	r3, r0
 80161c2:	4480      	add	r8, r0
 80161c4:	4406      	add	r6, r0
 80161c6:	9308      	str	r3, [sp, #32]
 80161c8:	f1b8 0f00 	cmp.w	r8, #0
 80161cc:	dd05      	ble.n	80161da <_dtoa_r+0x82a>
 80161ce:	4649      	mov	r1, r9
 80161d0:	4642      	mov	r2, r8
 80161d2:	4658      	mov	r0, fp
 80161d4:	f000 fd08 	bl	8016be8 <__lshift>
 80161d8:	4681      	mov	r9, r0
 80161da:	9b08      	ldr	r3, [sp, #32]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	dd05      	ble.n	80161ec <_dtoa_r+0x83c>
 80161e0:	4621      	mov	r1, r4
 80161e2:	461a      	mov	r2, r3
 80161e4:	4658      	mov	r0, fp
 80161e6:	f000 fcff 	bl	8016be8 <__lshift>
 80161ea:	4604      	mov	r4, r0
 80161ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d059      	beq.n	80162a6 <_dtoa_r+0x8f6>
 80161f2:	4621      	mov	r1, r4
 80161f4:	4648      	mov	r0, r9
 80161f6:	f000 fd63 	bl	8016cc0 <__mcmp>
 80161fa:	2800      	cmp	r0, #0
 80161fc:	da53      	bge.n	80162a6 <_dtoa_r+0x8f6>
 80161fe:	1e7b      	subs	r3, r7, #1
 8016200:	9304      	str	r3, [sp, #16]
 8016202:	4649      	mov	r1, r9
 8016204:	2300      	movs	r3, #0
 8016206:	220a      	movs	r2, #10
 8016208:	4658      	mov	r0, fp
 801620a:	f000 faf7 	bl	80167fc <__multadd>
 801620e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016210:	4681      	mov	r9, r0
 8016212:	2b00      	cmp	r3, #0
 8016214:	f000 8172 	beq.w	80164fc <_dtoa_r+0xb4c>
 8016218:	2300      	movs	r3, #0
 801621a:	4629      	mov	r1, r5
 801621c:	220a      	movs	r2, #10
 801621e:	4658      	mov	r0, fp
 8016220:	f000 faec 	bl	80167fc <__multadd>
 8016224:	9b00      	ldr	r3, [sp, #0]
 8016226:	2b00      	cmp	r3, #0
 8016228:	4605      	mov	r5, r0
 801622a:	dc67      	bgt.n	80162fc <_dtoa_r+0x94c>
 801622c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801622e:	2b02      	cmp	r3, #2
 8016230:	dc41      	bgt.n	80162b6 <_dtoa_r+0x906>
 8016232:	e063      	b.n	80162fc <_dtoa_r+0x94c>
 8016234:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016236:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801623a:	e746      	b.n	80160ca <_dtoa_r+0x71a>
 801623c:	9b07      	ldr	r3, [sp, #28]
 801623e:	1e5c      	subs	r4, r3, #1
 8016240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016242:	42a3      	cmp	r3, r4
 8016244:	bfbf      	itttt	lt
 8016246:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016248:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801624a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801624c:	1ae3      	sublt	r3, r4, r3
 801624e:	bfb4      	ite	lt
 8016250:	18d2      	addlt	r2, r2, r3
 8016252:	1b1c      	subge	r4, r3, r4
 8016254:	9b07      	ldr	r3, [sp, #28]
 8016256:	bfbc      	itt	lt
 8016258:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801625a:	2400      	movlt	r4, #0
 801625c:	2b00      	cmp	r3, #0
 801625e:	bfb5      	itete	lt
 8016260:	eba8 0603 	sublt.w	r6, r8, r3
 8016264:	9b07      	ldrge	r3, [sp, #28]
 8016266:	2300      	movlt	r3, #0
 8016268:	4646      	movge	r6, r8
 801626a:	e730      	b.n	80160ce <_dtoa_r+0x71e>
 801626c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801626e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8016270:	4646      	mov	r6, r8
 8016272:	e735      	b.n	80160e0 <_dtoa_r+0x730>
 8016274:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016276:	e75c      	b.n	8016132 <_dtoa_r+0x782>
 8016278:	2300      	movs	r3, #0
 801627a:	e788      	b.n	801618e <_dtoa_r+0x7de>
 801627c:	3fe00000 	.word	0x3fe00000
 8016280:	40240000 	.word	0x40240000
 8016284:	40140000 	.word	0x40140000
 8016288:	9b02      	ldr	r3, [sp, #8]
 801628a:	e780      	b.n	801618e <_dtoa_r+0x7de>
 801628c:	2300      	movs	r3, #0
 801628e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016290:	e782      	b.n	8016198 <_dtoa_r+0x7e8>
 8016292:	d099      	beq.n	80161c8 <_dtoa_r+0x818>
 8016294:	9a08      	ldr	r2, [sp, #32]
 8016296:	331c      	adds	r3, #28
 8016298:	441a      	add	r2, r3
 801629a:	4498      	add	r8, r3
 801629c:	441e      	add	r6, r3
 801629e:	9208      	str	r2, [sp, #32]
 80162a0:	e792      	b.n	80161c8 <_dtoa_r+0x818>
 80162a2:	4603      	mov	r3, r0
 80162a4:	e7f6      	b.n	8016294 <_dtoa_r+0x8e4>
 80162a6:	9b07      	ldr	r3, [sp, #28]
 80162a8:	9704      	str	r7, [sp, #16]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	dc20      	bgt.n	80162f0 <_dtoa_r+0x940>
 80162ae:	9300      	str	r3, [sp, #0]
 80162b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162b2:	2b02      	cmp	r3, #2
 80162b4:	dd1e      	ble.n	80162f4 <_dtoa_r+0x944>
 80162b6:	9b00      	ldr	r3, [sp, #0]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	f47f aec0 	bne.w	801603e <_dtoa_r+0x68e>
 80162be:	4621      	mov	r1, r4
 80162c0:	2205      	movs	r2, #5
 80162c2:	4658      	mov	r0, fp
 80162c4:	f000 fa9a 	bl	80167fc <__multadd>
 80162c8:	4601      	mov	r1, r0
 80162ca:	4604      	mov	r4, r0
 80162cc:	4648      	mov	r0, r9
 80162ce:	f000 fcf7 	bl	8016cc0 <__mcmp>
 80162d2:	2800      	cmp	r0, #0
 80162d4:	f77f aeb3 	ble.w	801603e <_dtoa_r+0x68e>
 80162d8:	4656      	mov	r6, sl
 80162da:	2331      	movs	r3, #49	@ 0x31
 80162dc:	f806 3b01 	strb.w	r3, [r6], #1
 80162e0:	9b04      	ldr	r3, [sp, #16]
 80162e2:	3301      	adds	r3, #1
 80162e4:	9304      	str	r3, [sp, #16]
 80162e6:	e6ae      	b.n	8016046 <_dtoa_r+0x696>
 80162e8:	9c07      	ldr	r4, [sp, #28]
 80162ea:	9704      	str	r7, [sp, #16]
 80162ec:	4625      	mov	r5, r4
 80162ee:	e7f3      	b.n	80162d8 <_dtoa_r+0x928>
 80162f0:	9b07      	ldr	r3, [sp, #28]
 80162f2:	9300      	str	r3, [sp, #0]
 80162f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	f000 8104 	beq.w	8016504 <_dtoa_r+0xb54>
 80162fc:	2e00      	cmp	r6, #0
 80162fe:	dd05      	ble.n	801630c <_dtoa_r+0x95c>
 8016300:	4629      	mov	r1, r5
 8016302:	4632      	mov	r2, r6
 8016304:	4658      	mov	r0, fp
 8016306:	f000 fc6f 	bl	8016be8 <__lshift>
 801630a:	4605      	mov	r5, r0
 801630c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801630e:	2b00      	cmp	r3, #0
 8016310:	d05a      	beq.n	80163c8 <_dtoa_r+0xa18>
 8016312:	6869      	ldr	r1, [r5, #4]
 8016314:	4658      	mov	r0, fp
 8016316:	f000 fa0f 	bl	8016738 <_Balloc>
 801631a:	4606      	mov	r6, r0
 801631c:	b928      	cbnz	r0, 801632a <_dtoa_r+0x97a>
 801631e:	4b84      	ldr	r3, [pc, #528]	@ (8016530 <_dtoa_r+0xb80>)
 8016320:	4602      	mov	r2, r0
 8016322:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016326:	f7ff bb5a 	b.w	80159de <_dtoa_r+0x2e>
 801632a:	692a      	ldr	r2, [r5, #16]
 801632c:	3202      	adds	r2, #2
 801632e:	0092      	lsls	r2, r2, #2
 8016330:	f105 010c 	add.w	r1, r5, #12
 8016334:	300c      	adds	r0, #12
 8016336:	f7ff fa9c 	bl	8015872 <memcpy>
 801633a:	2201      	movs	r2, #1
 801633c:	4631      	mov	r1, r6
 801633e:	4658      	mov	r0, fp
 8016340:	f000 fc52 	bl	8016be8 <__lshift>
 8016344:	f10a 0301 	add.w	r3, sl, #1
 8016348:	9307      	str	r3, [sp, #28]
 801634a:	9b00      	ldr	r3, [sp, #0]
 801634c:	4453      	add	r3, sl
 801634e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016350:	9b02      	ldr	r3, [sp, #8]
 8016352:	f003 0301 	and.w	r3, r3, #1
 8016356:	462f      	mov	r7, r5
 8016358:	930a      	str	r3, [sp, #40]	@ 0x28
 801635a:	4605      	mov	r5, r0
 801635c:	9b07      	ldr	r3, [sp, #28]
 801635e:	4621      	mov	r1, r4
 8016360:	3b01      	subs	r3, #1
 8016362:	4648      	mov	r0, r9
 8016364:	9300      	str	r3, [sp, #0]
 8016366:	f7ff fa99 	bl	801589c <quorem>
 801636a:	4639      	mov	r1, r7
 801636c:	9002      	str	r0, [sp, #8]
 801636e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016372:	4648      	mov	r0, r9
 8016374:	f000 fca4 	bl	8016cc0 <__mcmp>
 8016378:	462a      	mov	r2, r5
 801637a:	9008      	str	r0, [sp, #32]
 801637c:	4621      	mov	r1, r4
 801637e:	4658      	mov	r0, fp
 8016380:	f000 fcba 	bl	8016cf8 <__mdiff>
 8016384:	68c2      	ldr	r2, [r0, #12]
 8016386:	4606      	mov	r6, r0
 8016388:	bb02      	cbnz	r2, 80163cc <_dtoa_r+0xa1c>
 801638a:	4601      	mov	r1, r0
 801638c:	4648      	mov	r0, r9
 801638e:	f000 fc97 	bl	8016cc0 <__mcmp>
 8016392:	4602      	mov	r2, r0
 8016394:	4631      	mov	r1, r6
 8016396:	4658      	mov	r0, fp
 8016398:	920e      	str	r2, [sp, #56]	@ 0x38
 801639a:	f000 fa0d 	bl	80167b8 <_Bfree>
 801639e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80163a2:	9e07      	ldr	r6, [sp, #28]
 80163a4:	ea43 0102 	orr.w	r1, r3, r2
 80163a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80163aa:	4319      	orrs	r1, r3
 80163ac:	d110      	bne.n	80163d0 <_dtoa_r+0xa20>
 80163ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80163b2:	d029      	beq.n	8016408 <_dtoa_r+0xa58>
 80163b4:	9b08      	ldr	r3, [sp, #32]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	dd02      	ble.n	80163c0 <_dtoa_r+0xa10>
 80163ba:	9b02      	ldr	r3, [sp, #8]
 80163bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80163c0:	9b00      	ldr	r3, [sp, #0]
 80163c2:	f883 8000 	strb.w	r8, [r3]
 80163c6:	e63f      	b.n	8016048 <_dtoa_r+0x698>
 80163c8:	4628      	mov	r0, r5
 80163ca:	e7bb      	b.n	8016344 <_dtoa_r+0x994>
 80163cc:	2201      	movs	r2, #1
 80163ce:	e7e1      	b.n	8016394 <_dtoa_r+0x9e4>
 80163d0:	9b08      	ldr	r3, [sp, #32]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	db04      	blt.n	80163e0 <_dtoa_r+0xa30>
 80163d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80163d8:	430b      	orrs	r3, r1
 80163da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163dc:	430b      	orrs	r3, r1
 80163de:	d120      	bne.n	8016422 <_dtoa_r+0xa72>
 80163e0:	2a00      	cmp	r2, #0
 80163e2:	dded      	ble.n	80163c0 <_dtoa_r+0xa10>
 80163e4:	4649      	mov	r1, r9
 80163e6:	2201      	movs	r2, #1
 80163e8:	4658      	mov	r0, fp
 80163ea:	f000 fbfd 	bl	8016be8 <__lshift>
 80163ee:	4621      	mov	r1, r4
 80163f0:	4681      	mov	r9, r0
 80163f2:	f000 fc65 	bl	8016cc0 <__mcmp>
 80163f6:	2800      	cmp	r0, #0
 80163f8:	dc03      	bgt.n	8016402 <_dtoa_r+0xa52>
 80163fa:	d1e1      	bne.n	80163c0 <_dtoa_r+0xa10>
 80163fc:	f018 0f01 	tst.w	r8, #1
 8016400:	d0de      	beq.n	80163c0 <_dtoa_r+0xa10>
 8016402:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016406:	d1d8      	bne.n	80163ba <_dtoa_r+0xa0a>
 8016408:	9a00      	ldr	r2, [sp, #0]
 801640a:	2339      	movs	r3, #57	@ 0x39
 801640c:	7013      	strb	r3, [r2, #0]
 801640e:	4633      	mov	r3, r6
 8016410:	461e      	mov	r6, r3
 8016412:	3b01      	subs	r3, #1
 8016414:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016418:	2a39      	cmp	r2, #57	@ 0x39
 801641a:	d052      	beq.n	80164c2 <_dtoa_r+0xb12>
 801641c:	3201      	adds	r2, #1
 801641e:	701a      	strb	r2, [r3, #0]
 8016420:	e612      	b.n	8016048 <_dtoa_r+0x698>
 8016422:	2a00      	cmp	r2, #0
 8016424:	dd07      	ble.n	8016436 <_dtoa_r+0xa86>
 8016426:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801642a:	d0ed      	beq.n	8016408 <_dtoa_r+0xa58>
 801642c:	9a00      	ldr	r2, [sp, #0]
 801642e:	f108 0301 	add.w	r3, r8, #1
 8016432:	7013      	strb	r3, [r2, #0]
 8016434:	e608      	b.n	8016048 <_dtoa_r+0x698>
 8016436:	9b07      	ldr	r3, [sp, #28]
 8016438:	9a07      	ldr	r2, [sp, #28]
 801643a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801643e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016440:	4293      	cmp	r3, r2
 8016442:	d028      	beq.n	8016496 <_dtoa_r+0xae6>
 8016444:	4649      	mov	r1, r9
 8016446:	2300      	movs	r3, #0
 8016448:	220a      	movs	r2, #10
 801644a:	4658      	mov	r0, fp
 801644c:	f000 f9d6 	bl	80167fc <__multadd>
 8016450:	42af      	cmp	r7, r5
 8016452:	4681      	mov	r9, r0
 8016454:	f04f 0300 	mov.w	r3, #0
 8016458:	f04f 020a 	mov.w	r2, #10
 801645c:	4639      	mov	r1, r7
 801645e:	4658      	mov	r0, fp
 8016460:	d107      	bne.n	8016472 <_dtoa_r+0xac2>
 8016462:	f000 f9cb 	bl	80167fc <__multadd>
 8016466:	4607      	mov	r7, r0
 8016468:	4605      	mov	r5, r0
 801646a:	9b07      	ldr	r3, [sp, #28]
 801646c:	3301      	adds	r3, #1
 801646e:	9307      	str	r3, [sp, #28]
 8016470:	e774      	b.n	801635c <_dtoa_r+0x9ac>
 8016472:	f000 f9c3 	bl	80167fc <__multadd>
 8016476:	4629      	mov	r1, r5
 8016478:	4607      	mov	r7, r0
 801647a:	2300      	movs	r3, #0
 801647c:	220a      	movs	r2, #10
 801647e:	4658      	mov	r0, fp
 8016480:	f000 f9bc 	bl	80167fc <__multadd>
 8016484:	4605      	mov	r5, r0
 8016486:	e7f0      	b.n	801646a <_dtoa_r+0xaba>
 8016488:	9b00      	ldr	r3, [sp, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	bfcc      	ite	gt
 801648e:	461e      	movgt	r6, r3
 8016490:	2601      	movle	r6, #1
 8016492:	4456      	add	r6, sl
 8016494:	2700      	movs	r7, #0
 8016496:	4649      	mov	r1, r9
 8016498:	2201      	movs	r2, #1
 801649a:	4658      	mov	r0, fp
 801649c:	f000 fba4 	bl	8016be8 <__lshift>
 80164a0:	4621      	mov	r1, r4
 80164a2:	4681      	mov	r9, r0
 80164a4:	f000 fc0c 	bl	8016cc0 <__mcmp>
 80164a8:	2800      	cmp	r0, #0
 80164aa:	dcb0      	bgt.n	801640e <_dtoa_r+0xa5e>
 80164ac:	d102      	bne.n	80164b4 <_dtoa_r+0xb04>
 80164ae:	f018 0f01 	tst.w	r8, #1
 80164b2:	d1ac      	bne.n	801640e <_dtoa_r+0xa5e>
 80164b4:	4633      	mov	r3, r6
 80164b6:	461e      	mov	r6, r3
 80164b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80164bc:	2a30      	cmp	r2, #48	@ 0x30
 80164be:	d0fa      	beq.n	80164b6 <_dtoa_r+0xb06>
 80164c0:	e5c2      	b.n	8016048 <_dtoa_r+0x698>
 80164c2:	459a      	cmp	sl, r3
 80164c4:	d1a4      	bne.n	8016410 <_dtoa_r+0xa60>
 80164c6:	9b04      	ldr	r3, [sp, #16]
 80164c8:	3301      	adds	r3, #1
 80164ca:	9304      	str	r3, [sp, #16]
 80164cc:	2331      	movs	r3, #49	@ 0x31
 80164ce:	f88a 3000 	strb.w	r3, [sl]
 80164d2:	e5b9      	b.n	8016048 <_dtoa_r+0x698>
 80164d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80164d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8016534 <_dtoa_r+0xb84>
 80164da:	b11b      	cbz	r3, 80164e4 <_dtoa_r+0xb34>
 80164dc:	f10a 0308 	add.w	r3, sl, #8
 80164e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80164e2:	6013      	str	r3, [r2, #0]
 80164e4:	4650      	mov	r0, sl
 80164e6:	b019      	add	sp, #100	@ 0x64
 80164e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164ee:	2b01      	cmp	r3, #1
 80164f0:	f77f ae37 	ble.w	8016162 <_dtoa_r+0x7b2>
 80164f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80164f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80164f8:	2001      	movs	r0, #1
 80164fa:	e655      	b.n	80161a8 <_dtoa_r+0x7f8>
 80164fc:	9b00      	ldr	r3, [sp, #0]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	f77f aed6 	ble.w	80162b0 <_dtoa_r+0x900>
 8016504:	4656      	mov	r6, sl
 8016506:	4621      	mov	r1, r4
 8016508:	4648      	mov	r0, r9
 801650a:	f7ff f9c7 	bl	801589c <quorem>
 801650e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016512:	f806 8b01 	strb.w	r8, [r6], #1
 8016516:	9b00      	ldr	r3, [sp, #0]
 8016518:	eba6 020a 	sub.w	r2, r6, sl
 801651c:	4293      	cmp	r3, r2
 801651e:	ddb3      	ble.n	8016488 <_dtoa_r+0xad8>
 8016520:	4649      	mov	r1, r9
 8016522:	2300      	movs	r3, #0
 8016524:	220a      	movs	r2, #10
 8016526:	4658      	mov	r0, fp
 8016528:	f000 f968 	bl	80167fc <__multadd>
 801652c:	4681      	mov	r9, r0
 801652e:	e7ea      	b.n	8016506 <_dtoa_r+0xb56>
 8016530:	0802e755 	.word	0x0802e755
 8016534:	0802e6d9 	.word	0x0802e6d9

08016538 <_free_r>:
 8016538:	b538      	push	{r3, r4, r5, lr}
 801653a:	4605      	mov	r5, r0
 801653c:	2900      	cmp	r1, #0
 801653e:	d041      	beq.n	80165c4 <_free_r+0x8c>
 8016540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016544:	1f0c      	subs	r4, r1, #4
 8016546:	2b00      	cmp	r3, #0
 8016548:	bfb8      	it	lt
 801654a:	18e4      	addlt	r4, r4, r3
 801654c:	f000 f8e8 	bl	8016720 <__malloc_lock>
 8016550:	4a1d      	ldr	r2, [pc, #116]	@ (80165c8 <_free_r+0x90>)
 8016552:	6813      	ldr	r3, [r2, #0]
 8016554:	b933      	cbnz	r3, 8016564 <_free_r+0x2c>
 8016556:	6063      	str	r3, [r4, #4]
 8016558:	6014      	str	r4, [r2, #0]
 801655a:	4628      	mov	r0, r5
 801655c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016560:	f000 b8e4 	b.w	801672c <__malloc_unlock>
 8016564:	42a3      	cmp	r3, r4
 8016566:	d908      	bls.n	801657a <_free_r+0x42>
 8016568:	6820      	ldr	r0, [r4, #0]
 801656a:	1821      	adds	r1, r4, r0
 801656c:	428b      	cmp	r3, r1
 801656e:	bf01      	itttt	eq
 8016570:	6819      	ldreq	r1, [r3, #0]
 8016572:	685b      	ldreq	r3, [r3, #4]
 8016574:	1809      	addeq	r1, r1, r0
 8016576:	6021      	streq	r1, [r4, #0]
 8016578:	e7ed      	b.n	8016556 <_free_r+0x1e>
 801657a:	461a      	mov	r2, r3
 801657c:	685b      	ldr	r3, [r3, #4]
 801657e:	b10b      	cbz	r3, 8016584 <_free_r+0x4c>
 8016580:	42a3      	cmp	r3, r4
 8016582:	d9fa      	bls.n	801657a <_free_r+0x42>
 8016584:	6811      	ldr	r1, [r2, #0]
 8016586:	1850      	adds	r0, r2, r1
 8016588:	42a0      	cmp	r0, r4
 801658a:	d10b      	bne.n	80165a4 <_free_r+0x6c>
 801658c:	6820      	ldr	r0, [r4, #0]
 801658e:	4401      	add	r1, r0
 8016590:	1850      	adds	r0, r2, r1
 8016592:	4283      	cmp	r3, r0
 8016594:	6011      	str	r1, [r2, #0]
 8016596:	d1e0      	bne.n	801655a <_free_r+0x22>
 8016598:	6818      	ldr	r0, [r3, #0]
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	6053      	str	r3, [r2, #4]
 801659e:	4408      	add	r0, r1
 80165a0:	6010      	str	r0, [r2, #0]
 80165a2:	e7da      	b.n	801655a <_free_r+0x22>
 80165a4:	d902      	bls.n	80165ac <_free_r+0x74>
 80165a6:	230c      	movs	r3, #12
 80165a8:	602b      	str	r3, [r5, #0]
 80165aa:	e7d6      	b.n	801655a <_free_r+0x22>
 80165ac:	6820      	ldr	r0, [r4, #0]
 80165ae:	1821      	adds	r1, r4, r0
 80165b0:	428b      	cmp	r3, r1
 80165b2:	bf04      	itt	eq
 80165b4:	6819      	ldreq	r1, [r3, #0]
 80165b6:	685b      	ldreq	r3, [r3, #4]
 80165b8:	6063      	str	r3, [r4, #4]
 80165ba:	bf04      	itt	eq
 80165bc:	1809      	addeq	r1, r1, r0
 80165be:	6021      	streq	r1, [r4, #0]
 80165c0:	6054      	str	r4, [r2, #4]
 80165c2:	e7ca      	b.n	801655a <_free_r+0x22>
 80165c4:	bd38      	pop	{r3, r4, r5, pc}
 80165c6:	bf00      	nop
 80165c8:	200233c4 	.word	0x200233c4

080165cc <malloc>:
 80165cc:	4b02      	ldr	r3, [pc, #8]	@ (80165d8 <malloc+0xc>)
 80165ce:	4601      	mov	r1, r0
 80165d0:	6818      	ldr	r0, [r3, #0]
 80165d2:	f000 b825 	b.w	8016620 <_malloc_r>
 80165d6:	bf00      	nop
 80165d8:	20000140 	.word	0x20000140

080165dc <sbrk_aligned>:
 80165dc:	b570      	push	{r4, r5, r6, lr}
 80165de:	4e0f      	ldr	r6, [pc, #60]	@ (801661c <sbrk_aligned+0x40>)
 80165e0:	460c      	mov	r4, r1
 80165e2:	6831      	ldr	r1, [r6, #0]
 80165e4:	4605      	mov	r5, r0
 80165e6:	b911      	cbnz	r1, 80165ee <sbrk_aligned+0x12>
 80165e8:	f001 fe90 	bl	801830c <_sbrk_r>
 80165ec:	6030      	str	r0, [r6, #0]
 80165ee:	4621      	mov	r1, r4
 80165f0:	4628      	mov	r0, r5
 80165f2:	f001 fe8b 	bl	801830c <_sbrk_r>
 80165f6:	1c43      	adds	r3, r0, #1
 80165f8:	d103      	bne.n	8016602 <sbrk_aligned+0x26>
 80165fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80165fe:	4620      	mov	r0, r4
 8016600:	bd70      	pop	{r4, r5, r6, pc}
 8016602:	1cc4      	adds	r4, r0, #3
 8016604:	f024 0403 	bic.w	r4, r4, #3
 8016608:	42a0      	cmp	r0, r4
 801660a:	d0f8      	beq.n	80165fe <sbrk_aligned+0x22>
 801660c:	1a21      	subs	r1, r4, r0
 801660e:	4628      	mov	r0, r5
 8016610:	f001 fe7c 	bl	801830c <_sbrk_r>
 8016614:	3001      	adds	r0, #1
 8016616:	d1f2      	bne.n	80165fe <sbrk_aligned+0x22>
 8016618:	e7ef      	b.n	80165fa <sbrk_aligned+0x1e>
 801661a:	bf00      	nop
 801661c:	200233c0 	.word	0x200233c0

08016620 <_malloc_r>:
 8016620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016624:	1ccd      	adds	r5, r1, #3
 8016626:	f025 0503 	bic.w	r5, r5, #3
 801662a:	3508      	adds	r5, #8
 801662c:	2d0c      	cmp	r5, #12
 801662e:	bf38      	it	cc
 8016630:	250c      	movcc	r5, #12
 8016632:	2d00      	cmp	r5, #0
 8016634:	4606      	mov	r6, r0
 8016636:	db01      	blt.n	801663c <_malloc_r+0x1c>
 8016638:	42a9      	cmp	r1, r5
 801663a:	d904      	bls.n	8016646 <_malloc_r+0x26>
 801663c:	230c      	movs	r3, #12
 801663e:	6033      	str	r3, [r6, #0]
 8016640:	2000      	movs	r0, #0
 8016642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801671c <_malloc_r+0xfc>
 801664a:	f000 f869 	bl	8016720 <__malloc_lock>
 801664e:	f8d8 3000 	ldr.w	r3, [r8]
 8016652:	461c      	mov	r4, r3
 8016654:	bb44      	cbnz	r4, 80166a8 <_malloc_r+0x88>
 8016656:	4629      	mov	r1, r5
 8016658:	4630      	mov	r0, r6
 801665a:	f7ff ffbf 	bl	80165dc <sbrk_aligned>
 801665e:	1c43      	adds	r3, r0, #1
 8016660:	4604      	mov	r4, r0
 8016662:	d158      	bne.n	8016716 <_malloc_r+0xf6>
 8016664:	f8d8 4000 	ldr.w	r4, [r8]
 8016668:	4627      	mov	r7, r4
 801666a:	2f00      	cmp	r7, #0
 801666c:	d143      	bne.n	80166f6 <_malloc_r+0xd6>
 801666e:	2c00      	cmp	r4, #0
 8016670:	d04b      	beq.n	801670a <_malloc_r+0xea>
 8016672:	6823      	ldr	r3, [r4, #0]
 8016674:	4639      	mov	r1, r7
 8016676:	4630      	mov	r0, r6
 8016678:	eb04 0903 	add.w	r9, r4, r3
 801667c:	f001 fe46 	bl	801830c <_sbrk_r>
 8016680:	4581      	cmp	r9, r0
 8016682:	d142      	bne.n	801670a <_malloc_r+0xea>
 8016684:	6821      	ldr	r1, [r4, #0]
 8016686:	1a6d      	subs	r5, r5, r1
 8016688:	4629      	mov	r1, r5
 801668a:	4630      	mov	r0, r6
 801668c:	f7ff ffa6 	bl	80165dc <sbrk_aligned>
 8016690:	3001      	adds	r0, #1
 8016692:	d03a      	beq.n	801670a <_malloc_r+0xea>
 8016694:	6823      	ldr	r3, [r4, #0]
 8016696:	442b      	add	r3, r5
 8016698:	6023      	str	r3, [r4, #0]
 801669a:	f8d8 3000 	ldr.w	r3, [r8]
 801669e:	685a      	ldr	r2, [r3, #4]
 80166a0:	bb62      	cbnz	r2, 80166fc <_malloc_r+0xdc>
 80166a2:	f8c8 7000 	str.w	r7, [r8]
 80166a6:	e00f      	b.n	80166c8 <_malloc_r+0xa8>
 80166a8:	6822      	ldr	r2, [r4, #0]
 80166aa:	1b52      	subs	r2, r2, r5
 80166ac:	d420      	bmi.n	80166f0 <_malloc_r+0xd0>
 80166ae:	2a0b      	cmp	r2, #11
 80166b0:	d917      	bls.n	80166e2 <_malloc_r+0xc2>
 80166b2:	1961      	adds	r1, r4, r5
 80166b4:	42a3      	cmp	r3, r4
 80166b6:	6025      	str	r5, [r4, #0]
 80166b8:	bf18      	it	ne
 80166ba:	6059      	strne	r1, [r3, #4]
 80166bc:	6863      	ldr	r3, [r4, #4]
 80166be:	bf08      	it	eq
 80166c0:	f8c8 1000 	streq.w	r1, [r8]
 80166c4:	5162      	str	r2, [r4, r5]
 80166c6:	604b      	str	r3, [r1, #4]
 80166c8:	4630      	mov	r0, r6
 80166ca:	f000 f82f 	bl	801672c <__malloc_unlock>
 80166ce:	f104 000b 	add.w	r0, r4, #11
 80166d2:	1d23      	adds	r3, r4, #4
 80166d4:	f020 0007 	bic.w	r0, r0, #7
 80166d8:	1ac2      	subs	r2, r0, r3
 80166da:	bf1c      	itt	ne
 80166dc:	1a1b      	subne	r3, r3, r0
 80166de:	50a3      	strne	r3, [r4, r2]
 80166e0:	e7af      	b.n	8016642 <_malloc_r+0x22>
 80166e2:	6862      	ldr	r2, [r4, #4]
 80166e4:	42a3      	cmp	r3, r4
 80166e6:	bf0c      	ite	eq
 80166e8:	f8c8 2000 	streq.w	r2, [r8]
 80166ec:	605a      	strne	r2, [r3, #4]
 80166ee:	e7eb      	b.n	80166c8 <_malloc_r+0xa8>
 80166f0:	4623      	mov	r3, r4
 80166f2:	6864      	ldr	r4, [r4, #4]
 80166f4:	e7ae      	b.n	8016654 <_malloc_r+0x34>
 80166f6:	463c      	mov	r4, r7
 80166f8:	687f      	ldr	r7, [r7, #4]
 80166fa:	e7b6      	b.n	801666a <_malloc_r+0x4a>
 80166fc:	461a      	mov	r2, r3
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	42a3      	cmp	r3, r4
 8016702:	d1fb      	bne.n	80166fc <_malloc_r+0xdc>
 8016704:	2300      	movs	r3, #0
 8016706:	6053      	str	r3, [r2, #4]
 8016708:	e7de      	b.n	80166c8 <_malloc_r+0xa8>
 801670a:	230c      	movs	r3, #12
 801670c:	6033      	str	r3, [r6, #0]
 801670e:	4630      	mov	r0, r6
 8016710:	f000 f80c 	bl	801672c <__malloc_unlock>
 8016714:	e794      	b.n	8016640 <_malloc_r+0x20>
 8016716:	6005      	str	r5, [r0, #0]
 8016718:	e7d6      	b.n	80166c8 <_malloc_r+0xa8>
 801671a:	bf00      	nop
 801671c:	200233c4 	.word	0x200233c4

08016720 <__malloc_lock>:
 8016720:	4801      	ldr	r0, [pc, #4]	@ (8016728 <__malloc_lock+0x8>)
 8016722:	f7ff b8a4 	b.w	801586e <__retarget_lock_acquire_recursive>
 8016726:	bf00      	nop
 8016728:	200233bc 	.word	0x200233bc

0801672c <__malloc_unlock>:
 801672c:	4801      	ldr	r0, [pc, #4]	@ (8016734 <__malloc_unlock+0x8>)
 801672e:	f7ff b89f 	b.w	8015870 <__retarget_lock_release_recursive>
 8016732:	bf00      	nop
 8016734:	200233bc 	.word	0x200233bc

08016738 <_Balloc>:
 8016738:	b570      	push	{r4, r5, r6, lr}
 801673a:	69c6      	ldr	r6, [r0, #28]
 801673c:	4604      	mov	r4, r0
 801673e:	460d      	mov	r5, r1
 8016740:	b976      	cbnz	r6, 8016760 <_Balloc+0x28>
 8016742:	2010      	movs	r0, #16
 8016744:	f7ff ff42 	bl	80165cc <malloc>
 8016748:	4602      	mov	r2, r0
 801674a:	61e0      	str	r0, [r4, #28]
 801674c:	b920      	cbnz	r0, 8016758 <_Balloc+0x20>
 801674e:	4b18      	ldr	r3, [pc, #96]	@ (80167b0 <_Balloc+0x78>)
 8016750:	4818      	ldr	r0, [pc, #96]	@ (80167b4 <_Balloc+0x7c>)
 8016752:	216b      	movs	r1, #107	@ 0x6b
 8016754:	f001 fdf4 	bl	8018340 <__assert_func>
 8016758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801675c:	6006      	str	r6, [r0, #0]
 801675e:	60c6      	str	r6, [r0, #12]
 8016760:	69e6      	ldr	r6, [r4, #28]
 8016762:	68f3      	ldr	r3, [r6, #12]
 8016764:	b183      	cbz	r3, 8016788 <_Balloc+0x50>
 8016766:	69e3      	ldr	r3, [r4, #28]
 8016768:	68db      	ldr	r3, [r3, #12]
 801676a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801676e:	b9b8      	cbnz	r0, 80167a0 <_Balloc+0x68>
 8016770:	2101      	movs	r1, #1
 8016772:	fa01 f605 	lsl.w	r6, r1, r5
 8016776:	1d72      	adds	r2, r6, #5
 8016778:	0092      	lsls	r2, r2, #2
 801677a:	4620      	mov	r0, r4
 801677c:	f001 fdfe 	bl	801837c <_calloc_r>
 8016780:	b160      	cbz	r0, 801679c <_Balloc+0x64>
 8016782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016786:	e00e      	b.n	80167a6 <_Balloc+0x6e>
 8016788:	2221      	movs	r2, #33	@ 0x21
 801678a:	2104      	movs	r1, #4
 801678c:	4620      	mov	r0, r4
 801678e:	f001 fdf5 	bl	801837c <_calloc_r>
 8016792:	69e3      	ldr	r3, [r4, #28]
 8016794:	60f0      	str	r0, [r6, #12]
 8016796:	68db      	ldr	r3, [r3, #12]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d1e4      	bne.n	8016766 <_Balloc+0x2e>
 801679c:	2000      	movs	r0, #0
 801679e:	bd70      	pop	{r4, r5, r6, pc}
 80167a0:	6802      	ldr	r2, [r0, #0]
 80167a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80167a6:	2300      	movs	r3, #0
 80167a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80167ac:	e7f7      	b.n	801679e <_Balloc+0x66>
 80167ae:	bf00      	nop
 80167b0:	0802e6e6 	.word	0x0802e6e6
 80167b4:	0802e766 	.word	0x0802e766

080167b8 <_Bfree>:
 80167b8:	b570      	push	{r4, r5, r6, lr}
 80167ba:	69c6      	ldr	r6, [r0, #28]
 80167bc:	4605      	mov	r5, r0
 80167be:	460c      	mov	r4, r1
 80167c0:	b976      	cbnz	r6, 80167e0 <_Bfree+0x28>
 80167c2:	2010      	movs	r0, #16
 80167c4:	f7ff ff02 	bl	80165cc <malloc>
 80167c8:	4602      	mov	r2, r0
 80167ca:	61e8      	str	r0, [r5, #28]
 80167cc:	b920      	cbnz	r0, 80167d8 <_Bfree+0x20>
 80167ce:	4b09      	ldr	r3, [pc, #36]	@ (80167f4 <_Bfree+0x3c>)
 80167d0:	4809      	ldr	r0, [pc, #36]	@ (80167f8 <_Bfree+0x40>)
 80167d2:	218f      	movs	r1, #143	@ 0x8f
 80167d4:	f001 fdb4 	bl	8018340 <__assert_func>
 80167d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80167dc:	6006      	str	r6, [r0, #0]
 80167de:	60c6      	str	r6, [r0, #12]
 80167e0:	b13c      	cbz	r4, 80167f2 <_Bfree+0x3a>
 80167e2:	69eb      	ldr	r3, [r5, #28]
 80167e4:	6862      	ldr	r2, [r4, #4]
 80167e6:	68db      	ldr	r3, [r3, #12]
 80167e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80167ec:	6021      	str	r1, [r4, #0]
 80167ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80167f2:	bd70      	pop	{r4, r5, r6, pc}
 80167f4:	0802e6e6 	.word	0x0802e6e6
 80167f8:	0802e766 	.word	0x0802e766

080167fc <__multadd>:
 80167fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016800:	690d      	ldr	r5, [r1, #16]
 8016802:	4607      	mov	r7, r0
 8016804:	460c      	mov	r4, r1
 8016806:	461e      	mov	r6, r3
 8016808:	f101 0c14 	add.w	ip, r1, #20
 801680c:	2000      	movs	r0, #0
 801680e:	f8dc 3000 	ldr.w	r3, [ip]
 8016812:	b299      	uxth	r1, r3
 8016814:	fb02 6101 	mla	r1, r2, r1, r6
 8016818:	0c1e      	lsrs	r6, r3, #16
 801681a:	0c0b      	lsrs	r3, r1, #16
 801681c:	fb02 3306 	mla	r3, r2, r6, r3
 8016820:	b289      	uxth	r1, r1
 8016822:	3001      	adds	r0, #1
 8016824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016828:	4285      	cmp	r5, r0
 801682a:	f84c 1b04 	str.w	r1, [ip], #4
 801682e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016832:	dcec      	bgt.n	801680e <__multadd+0x12>
 8016834:	b30e      	cbz	r6, 801687a <__multadd+0x7e>
 8016836:	68a3      	ldr	r3, [r4, #8]
 8016838:	42ab      	cmp	r3, r5
 801683a:	dc19      	bgt.n	8016870 <__multadd+0x74>
 801683c:	6861      	ldr	r1, [r4, #4]
 801683e:	4638      	mov	r0, r7
 8016840:	3101      	adds	r1, #1
 8016842:	f7ff ff79 	bl	8016738 <_Balloc>
 8016846:	4680      	mov	r8, r0
 8016848:	b928      	cbnz	r0, 8016856 <__multadd+0x5a>
 801684a:	4602      	mov	r2, r0
 801684c:	4b0c      	ldr	r3, [pc, #48]	@ (8016880 <__multadd+0x84>)
 801684e:	480d      	ldr	r0, [pc, #52]	@ (8016884 <__multadd+0x88>)
 8016850:	21ba      	movs	r1, #186	@ 0xba
 8016852:	f001 fd75 	bl	8018340 <__assert_func>
 8016856:	6922      	ldr	r2, [r4, #16]
 8016858:	3202      	adds	r2, #2
 801685a:	f104 010c 	add.w	r1, r4, #12
 801685e:	0092      	lsls	r2, r2, #2
 8016860:	300c      	adds	r0, #12
 8016862:	f7ff f806 	bl	8015872 <memcpy>
 8016866:	4621      	mov	r1, r4
 8016868:	4638      	mov	r0, r7
 801686a:	f7ff ffa5 	bl	80167b8 <_Bfree>
 801686e:	4644      	mov	r4, r8
 8016870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016874:	3501      	adds	r5, #1
 8016876:	615e      	str	r6, [r3, #20]
 8016878:	6125      	str	r5, [r4, #16]
 801687a:	4620      	mov	r0, r4
 801687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016880:	0802e755 	.word	0x0802e755
 8016884:	0802e766 	.word	0x0802e766

08016888 <__s2b>:
 8016888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801688c:	460c      	mov	r4, r1
 801688e:	4615      	mov	r5, r2
 8016890:	461f      	mov	r7, r3
 8016892:	2209      	movs	r2, #9
 8016894:	3308      	adds	r3, #8
 8016896:	4606      	mov	r6, r0
 8016898:	fb93 f3f2 	sdiv	r3, r3, r2
 801689c:	2100      	movs	r1, #0
 801689e:	2201      	movs	r2, #1
 80168a0:	429a      	cmp	r2, r3
 80168a2:	db09      	blt.n	80168b8 <__s2b+0x30>
 80168a4:	4630      	mov	r0, r6
 80168a6:	f7ff ff47 	bl	8016738 <_Balloc>
 80168aa:	b940      	cbnz	r0, 80168be <__s2b+0x36>
 80168ac:	4602      	mov	r2, r0
 80168ae:	4b19      	ldr	r3, [pc, #100]	@ (8016914 <__s2b+0x8c>)
 80168b0:	4819      	ldr	r0, [pc, #100]	@ (8016918 <__s2b+0x90>)
 80168b2:	21d3      	movs	r1, #211	@ 0xd3
 80168b4:	f001 fd44 	bl	8018340 <__assert_func>
 80168b8:	0052      	lsls	r2, r2, #1
 80168ba:	3101      	adds	r1, #1
 80168bc:	e7f0      	b.n	80168a0 <__s2b+0x18>
 80168be:	9b08      	ldr	r3, [sp, #32]
 80168c0:	6143      	str	r3, [r0, #20]
 80168c2:	2d09      	cmp	r5, #9
 80168c4:	f04f 0301 	mov.w	r3, #1
 80168c8:	6103      	str	r3, [r0, #16]
 80168ca:	dd16      	ble.n	80168fa <__s2b+0x72>
 80168cc:	f104 0909 	add.w	r9, r4, #9
 80168d0:	46c8      	mov	r8, r9
 80168d2:	442c      	add	r4, r5
 80168d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80168d8:	4601      	mov	r1, r0
 80168da:	3b30      	subs	r3, #48	@ 0x30
 80168dc:	220a      	movs	r2, #10
 80168de:	4630      	mov	r0, r6
 80168e0:	f7ff ff8c 	bl	80167fc <__multadd>
 80168e4:	45a0      	cmp	r8, r4
 80168e6:	d1f5      	bne.n	80168d4 <__s2b+0x4c>
 80168e8:	f1a5 0408 	sub.w	r4, r5, #8
 80168ec:	444c      	add	r4, r9
 80168ee:	1b2d      	subs	r5, r5, r4
 80168f0:	1963      	adds	r3, r4, r5
 80168f2:	42bb      	cmp	r3, r7
 80168f4:	db04      	blt.n	8016900 <__s2b+0x78>
 80168f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168fa:	340a      	adds	r4, #10
 80168fc:	2509      	movs	r5, #9
 80168fe:	e7f6      	b.n	80168ee <__s2b+0x66>
 8016900:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016904:	4601      	mov	r1, r0
 8016906:	3b30      	subs	r3, #48	@ 0x30
 8016908:	220a      	movs	r2, #10
 801690a:	4630      	mov	r0, r6
 801690c:	f7ff ff76 	bl	80167fc <__multadd>
 8016910:	e7ee      	b.n	80168f0 <__s2b+0x68>
 8016912:	bf00      	nop
 8016914:	0802e755 	.word	0x0802e755
 8016918:	0802e766 	.word	0x0802e766

0801691c <__hi0bits>:
 801691c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016920:	4603      	mov	r3, r0
 8016922:	bf36      	itet	cc
 8016924:	0403      	lslcc	r3, r0, #16
 8016926:	2000      	movcs	r0, #0
 8016928:	2010      	movcc	r0, #16
 801692a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801692e:	bf3c      	itt	cc
 8016930:	021b      	lslcc	r3, r3, #8
 8016932:	3008      	addcc	r0, #8
 8016934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016938:	bf3c      	itt	cc
 801693a:	011b      	lslcc	r3, r3, #4
 801693c:	3004      	addcc	r0, #4
 801693e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016942:	bf3c      	itt	cc
 8016944:	009b      	lslcc	r3, r3, #2
 8016946:	3002      	addcc	r0, #2
 8016948:	2b00      	cmp	r3, #0
 801694a:	db05      	blt.n	8016958 <__hi0bits+0x3c>
 801694c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016950:	f100 0001 	add.w	r0, r0, #1
 8016954:	bf08      	it	eq
 8016956:	2020      	moveq	r0, #32
 8016958:	4770      	bx	lr

0801695a <__lo0bits>:
 801695a:	6803      	ldr	r3, [r0, #0]
 801695c:	4602      	mov	r2, r0
 801695e:	f013 0007 	ands.w	r0, r3, #7
 8016962:	d00b      	beq.n	801697c <__lo0bits+0x22>
 8016964:	07d9      	lsls	r1, r3, #31
 8016966:	d421      	bmi.n	80169ac <__lo0bits+0x52>
 8016968:	0798      	lsls	r0, r3, #30
 801696a:	bf49      	itett	mi
 801696c:	085b      	lsrmi	r3, r3, #1
 801696e:	089b      	lsrpl	r3, r3, #2
 8016970:	2001      	movmi	r0, #1
 8016972:	6013      	strmi	r3, [r2, #0]
 8016974:	bf5c      	itt	pl
 8016976:	6013      	strpl	r3, [r2, #0]
 8016978:	2002      	movpl	r0, #2
 801697a:	4770      	bx	lr
 801697c:	b299      	uxth	r1, r3
 801697e:	b909      	cbnz	r1, 8016984 <__lo0bits+0x2a>
 8016980:	0c1b      	lsrs	r3, r3, #16
 8016982:	2010      	movs	r0, #16
 8016984:	b2d9      	uxtb	r1, r3
 8016986:	b909      	cbnz	r1, 801698c <__lo0bits+0x32>
 8016988:	3008      	adds	r0, #8
 801698a:	0a1b      	lsrs	r3, r3, #8
 801698c:	0719      	lsls	r1, r3, #28
 801698e:	bf04      	itt	eq
 8016990:	091b      	lsreq	r3, r3, #4
 8016992:	3004      	addeq	r0, #4
 8016994:	0799      	lsls	r1, r3, #30
 8016996:	bf04      	itt	eq
 8016998:	089b      	lsreq	r3, r3, #2
 801699a:	3002      	addeq	r0, #2
 801699c:	07d9      	lsls	r1, r3, #31
 801699e:	d403      	bmi.n	80169a8 <__lo0bits+0x4e>
 80169a0:	085b      	lsrs	r3, r3, #1
 80169a2:	f100 0001 	add.w	r0, r0, #1
 80169a6:	d003      	beq.n	80169b0 <__lo0bits+0x56>
 80169a8:	6013      	str	r3, [r2, #0]
 80169aa:	4770      	bx	lr
 80169ac:	2000      	movs	r0, #0
 80169ae:	4770      	bx	lr
 80169b0:	2020      	movs	r0, #32
 80169b2:	4770      	bx	lr

080169b4 <__i2b>:
 80169b4:	b510      	push	{r4, lr}
 80169b6:	460c      	mov	r4, r1
 80169b8:	2101      	movs	r1, #1
 80169ba:	f7ff febd 	bl	8016738 <_Balloc>
 80169be:	4602      	mov	r2, r0
 80169c0:	b928      	cbnz	r0, 80169ce <__i2b+0x1a>
 80169c2:	4b05      	ldr	r3, [pc, #20]	@ (80169d8 <__i2b+0x24>)
 80169c4:	4805      	ldr	r0, [pc, #20]	@ (80169dc <__i2b+0x28>)
 80169c6:	f240 1145 	movw	r1, #325	@ 0x145
 80169ca:	f001 fcb9 	bl	8018340 <__assert_func>
 80169ce:	2301      	movs	r3, #1
 80169d0:	6144      	str	r4, [r0, #20]
 80169d2:	6103      	str	r3, [r0, #16]
 80169d4:	bd10      	pop	{r4, pc}
 80169d6:	bf00      	nop
 80169d8:	0802e755 	.word	0x0802e755
 80169dc:	0802e766 	.word	0x0802e766

080169e0 <__multiply>:
 80169e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169e4:	4614      	mov	r4, r2
 80169e6:	690a      	ldr	r2, [r1, #16]
 80169e8:	6923      	ldr	r3, [r4, #16]
 80169ea:	429a      	cmp	r2, r3
 80169ec:	bfa8      	it	ge
 80169ee:	4623      	movge	r3, r4
 80169f0:	460f      	mov	r7, r1
 80169f2:	bfa4      	itt	ge
 80169f4:	460c      	movge	r4, r1
 80169f6:	461f      	movge	r7, r3
 80169f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80169fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016a00:	68a3      	ldr	r3, [r4, #8]
 8016a02:	6861      	ldr	r1, [r4, #4]
 8016a04:	eb0a 0609 	add.w	r6, sl, r9
 8016a08:	42b3      	cmp	r3, r6
 8016a0a:	b085      	sub	sp, #20
 8016a0c:	bfb8      	it	lt
 8016a0e:	3101      	addlt	r1, #1
 8016a10:	f7ff fe92 	bl	8016738 <_Balloc>
 8016a14:	b930      	cbnz	r0, 8016a24 <__multiply+0x44>
 8016a16:	4602      	mov	r2, r0
 8016a18:	4b44      	ldr	r3, [pc, #272]	@ (8016b2c <__multiply+0x14c>)
 8016a1a:	4845      	ldr	r0, [pc, #276]	@ (8016b30 <__multiply+0x150>)
 8016a1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016a20:	f001 fc8e 	bl	8018340 <__assert_func>
 8016a24:	f100 0514 	add.w	r5, r0, #20
 8016a28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016a2c:	462b      	mov	r3, r5
 8016a2e:	2200      	movs	r2, #0
 8016a30:	4543      	cmp	r3, r8
 8016a32:	d321      	bcc.n	8016a78 <__multiply+0x98>
 8016a34:	f107 0114 	add.w	r1, r7, #20
 8016a38:	f104 0214 	add.w	r2, r4, #20
 8016a3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016a40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8016a44:	9302      	str	r3, [sp, #8]
 8016a46:	1b13      	subs	r3, r2, r4
 8016a48:	3b15      	subs	r3, #21
 8016a4a:	f023 0303 	bic.w	r3, r3, #3
 8016a4e:	3304      	adds	r3, #4
 8016a50:	f104 0715 	add.w	r7, r4, #21
 8016a54:	42ba      	cmp	r2, r7
 8016a56:	bf38      	it	cc
 8016a58:	2304      	movcc	r3, #4
 8016a5a:	9301      	str	r3, [sp, #4]
 8016a5c:	9b02      	ldr	r3, [sp, #8]
 8016a5e:	9103      	str	r1, [sp, #12]
 8016a60:	428b      	cmp	r3, r1
 8016a62:	d80c      	bhi.n	8016a7e <__multiply+0x9e>
 8016a64:	2e00      	cmp	r6, #0
 8016a66:	dd03      	ble.n	8016a70 <__multiply+0x90>
 8016a68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d05b      	beq.n	8016b28 <__multiply+0x148>
 8016a70:	6106      	str	r6, [r0, #16]
 8016a72:	b005      	add	sp, #20
 8016a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a78:	f843 2b04 	str.w	r2, [r3], #4
 8016a7c:	e7d8      	b.n	8016a30 <__multiply+0x50>
 8016a7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016a82:	f1ba 0f00 	cmp.w	sl, #0
 8016a86:	d024      	beq.n	8016ad2 <__multiply+0xf2>
 8016a88:	f104 0e14 	add.w	lr, r4, #20
 8016a8c:	46a9      	mov	r9, r5
 8016a8e:	f04f 0c00 	mov.w	ip, #0
 8016a92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016a96:	f8d9 3000 	ldr.w	r3, [r9]
 8016a9a:	fa1f fb87 	uxth.w	fp, r7
 8016a9e:	b29b      	uxth	r3, r3
 8016aa0:	fb0a 330b 	mla	r3, sl, fp, r3
 8016aa4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016aa8:	f8d9 7000 	ldr.w	r7, [r9]
 8016aac:	4463      	add	r3, ip
 8016aae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016ab2:	fb0a c70b 	mla	r7, sl, fp, ip
 8016ab6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016aba:	b29b      	uxth	r3, r3
 8016abc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016ac0:	4572      	cmp	r2, lr
 8016ac2:	f849 3b04 	str.w	r3, [r9], #4
 8016ac6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016aca:	d8e2      	bhi.n	8016a92 <__multiply+0xb2>
 8016acc:	9b01      	ldr	r3, [sp, #4]
 8016ace:	f845 c003 	str.w	ip, [r5, r3]
 8016ad2:	9b03      	ldr	r3, [sp, #12]
 8016ad4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016ad8:	3104      	adds	r1, #4
 8016ada:	f1b9 0f00 	cmp.w	r9, #0
 8016ade:	d021      	beq.n	8016b24 <__multiply+0x144>
 8016ae0:	682b      	ldr	r3, [r5, #0]
 8016ae2:	f104 0c14 	add.w	ip, r4, #20
 8016ae6:	46ae      	mov	lr, r5
 8016ae8:	f04f 0a00 	mov.w	sl, #0
 8016aec:	f8bc b000 	ldrh.w	fp, [ip]
 8016af0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016af4:	fb09 770b 	mla	r7, r9, fp, r7
 8016af8:	4457      	add	r7, sl
 8016afa:	b29b      	uxth	r3, r3
 8016afc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016b00:	f84e 3b04 	str.w	r3, [lr], #4
 8016b04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016b08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016b0c:	f8be 3000 	ldrh.w	r3, [lr]
 8016b10:	fb09 330a 	mla	r3, r9, sl, r3
 8016b14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8016b18:	4562      	cmp	r2, ip
 8016b1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016b1e:	d8e5      	bhi.n	8016aec <__multiply+0x10c>
 8016b20:	9f01      	ldr	r7, [sp, #4]
 8016b22:	51eb      	str	r3, [r5, r7]
 8016b24:	3504      	adds	r5, #4
 8016b26:	e799      	b.n	8016a5c <__multiply+0x7c>
 8016b28:	3e01      	subs	r6, #1
 8016b2a:	e79b      	b.n	8016a64 <__multiply+0x84>
 8016b2c:	0802e755 	.word	0x0802e755
 8016b30:	0802e766 	.word	0x0802e766

08016b34 <__pow5mult>:
 8016b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b38:	4615      	mov	r5, r2
 8016b3a:	f012 0203 	ands.w	r2, r2, #3
 8016b3e:	4607      	mov	r7, r0
 8016b40:	460e      	mov	r6, r1
 8016b42:	d007      	beq.n	8016b54 <__pow5mult+0x20>
 8016b44:	4c25      	ldr	r4, [pc, #148]	@ (8016bdc <__pow5mult+0xa8>)
 8016b46:	3a01      	subs	r2, #1
 8016b48:	2300      	movs	r3, #0
 8016b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016b4e:	f7ff fe55 	bl	80167fc <__multadd>
 8016b52:	4606      	mov	r6, r0
 8016b54:	10ad      	asrs	r5, r5, #2
 8016b56:	d03d      	beq.n	8016bd4 <__pow5mult+0xa0>
 8016b58:	69fc      	ldr	r4, [r7, #28]
 8016b5a:	b97c      	cbnz	r4, 8016b7c <__pow5mult+0x48>
 8016b5c:	2010      	movs	r0, #16
 8016b5e:	f7ff fd35 	bl	80165cc <malloc>
 8016b62:	4602      	mov	r2, r0
 8016b64:	61f8      	str	r0, [r7, #28]
 8016b66:	b928      	cbnz	r0, 8016b74 <__pow5mult+0x40>
 8016b68:	4b1d      	ldr	r3, [pc, #116]	@ (8016be0 <__pow5mult+0xac>)
 8016b6a:	481e      	ldr	r0, [pc, #120]	@ (8016be4 <__pow5mult+0xb0>)
 8016b6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016b70:	f001 fbe6 	bl	8018340 <__assert_func>
 8016b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016b78:	6004      	str	r4, [r0, #0]
 8016b7a:	60c4      	str	r4, [r0, #12]
 8016b7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016b84:	b94c      	cbnz	r4, 8016b9a <__pow5mult+0x66>
 8016b86:	f240 2171 	movw	r1, #625	@ 0x271
 8016b8a:	4638      	mov	r0, r7
 8016b8c:	f7ff ff12 	bl	80169b4 <__i2b>
 8016b90:	2300      	movs	r3, #0
 8016b92:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b96:	4604      	mov	r4, r0
 8016b98:	6003      	str	r3, [r0, #0]
 8016b9a:	f04f 0900 	mov.w	r9, #0
 8016b9e:	07eb      	lsls	r3, r5, #31
 8016ba0:	d50a      	bpl.n	8016bb8 <__pow5mult+0x84>
 8016ba2:	4631      	mov	r1, r6
 8016ba4:	4622      	mov	r2, r4
 8016ba6:	4638      	mov	r0, r7
 8016ba8:	f7ff ff1a 	bl	80169e0 <__multiply>
 8016bac:	4631      	mov	r1, r6
 8016bae:	4680      	mov	r8, r0
 8016bb0:	4638      	mov	r0, r7
 8016bb2:	f7ff fe01 	bl	80167b8 <_Bfree>
 8016bb6:	4646      	mov	r6, r8
 8016bb8:	106d      	asrs	r5, r5, #1
 8016bba:	d00b      	beq.n	8016bd4 <__pow5mult+0xa0>
 8016bbc:	6820      	ldr	r0, [r4, #0]
 8016bbe:	b938      	cbnz	r0, 8016bd0 <__pow5mult+0x9c>
 8016bc0:	4622      	mov	r2, r4
 8016bc2:	4621      	mov	r1, r4
 8016bc4:	4638      	mov	r0, r7
 8016bc6:	f7ff ff0b 	bl	80169e0 <__multiply>
 8016bca:	6020      	str	r0, [r4, #0]
 8016bcc:	f8c0 9000 	str.w	r9, [r0]
 8016bd0:	4604      	mov	r4, r0
 8016bd2:	e7e4      	b.n	8016b9e <__pow5mult+0x6a>
 8016bd4:	4630      	mov	r0, r6
 8016bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bda:	bf00      	nop
 8016bdc:	0802e7c0 	.word	0x0802e7c0
 8016be0:	0802e6e6 	.word	0x0802e6e6
 8016be4:	0802e766 	.word	0x0802e766

08016be8 <__lshift>:
 8016be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bec:	460c      	mov	r4, r1
 8016bee:	6849      	ldr	r1, [r1, #4]
 8016bf0:	6923      	ldr	r3, [r4, #16]
 8016bf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016bf6:	68a3      	ldr	r3, [r4, #8]
 8016bf8:	4607      	mov	r7, r0
 8016bfa:	4691      	mov	r9, r2
 8016bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016c00:	f108 0601 	add.w	r6, r8, #1
 8016c04:	42b3      	cmp	r3, r6
 8016c06:	db0b      	blt.n	8016c20 <__lshift+0x38>
 8016c08:	4638      	mov	r0, r7
 8016c0a:	f7ff fd95 	bl	8016738 <_Balloc>
 8016c0e:	4605      	mov	r5, r0
 8016c10:	b948      	cbnz	r0, 8016c26 <__lshift+0x3e>
 8016c12:	4602      	mov	r2, r0
 8016c14:	4b28      	ldr	r3, [pc, #160]	@ (8016cb8 <__lshift+0xd0>)
 8016c16:	4829      	ldr	r0, [pc, #164]	@ (8016cbc <__lshift+0xd4>)
 8016c18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016c1c:	f001 fb90 	bl	8018340 <__assert_func>
 8016c20:	3101      	adds	r1, #1
 8016c22:	005b      	lsls	r3, r3, #1
 8016c24:	e7ee      	b.n	8016c04 <__lshift+0x1c>
 8016c26:	2300      	movs	r3, #0
 8016c28:	f100 0114 	add.w	r1, r0, #20
 8016c2c:	f100 0210 	add.w	r2, r0, #16
 8016c30:	4618      	mov	r0, r3
 8016c32:	4553      	cmp	r3, sl
 8016c34:	db33      	blt.n	8016c9e <__lshift+0xb6>
 8016c36:	6920      	ldr	r0, [r4, #16]
 8016c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016c3c:	f104 0314 	add.w	r3, r4, #20
 8016c40:	f019 091f 	ands.w	r9, r9, #31
 8016c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016c48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016c4c:	d02b      	beq.n	8016ca6 <__lshift+0xbe>
 8016c4e:	f1c9 0e20 	rsb	lr, r9, #32
 8016c52:	468a      	mov	sl, r1
 8016c54:	2200      	movs	r2, #0
 8016c56:	6818      	ldr	r0, [r3, #0]
 8016c58:	fa00 f009 	lsl.w	r0, r0, r9
 8016c5c:	4310      	orrs	r0, r2
 8016c5e:	f84a 0b04 	str.w	r0, [sl], #4
 8016c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c66:	459c      	cmp	ip, r3
 8016c68:	fa22 f20e 	lsr.w	r2, r2, lr
 8016c6c:	d8f3      	bhi.n	8016c56 <__lshift+0x6e>
 8016c6e:	ebac 0304 	sub.w	r3, ip, r4
 8016c72:	3b15      	subs	r3, #21
 8016c74:	f023 0303 	bic.w	r3, r3, #3
 8016c78:	3304      	adds	r3, #4
 8016c7a:	f104 0015 	add.w	r0, r4, #21
 8016c7e:	4584      	cmp	ip, r0
 8016c80:	bf38      	it	cc
 8016c82:	2304      	movcc	r3, #4
 8016c84:	50ca      	str	r2, [r1, r3]
 8016c86:	b10a      	cbz	r2, 8016c8c <__lshift+0xa4>
 8016c88:	f108 0602 	add.w	r6, r8, #2
 8016c8c:	3e01      	subs	r6, #1
 8016c8e:	4638      	mov	r0, r7
 8016c90:	612e      	str	r6, [r5, #16]
 8016c92:	4621      	mov	r1, r4
 8016c94:	f7ff fd90 	bl	80167b8 <_Bfree>
 8016c98:	4628      	mov	r0, r5
 8016c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016ca2:	3301      	adds	r3, #1
 8016ca4:	e7c5      	b.n	8016c32 <__lshift+0x4a>
 8016ca6:	3904      	subs	r1, #4
 8016ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cac:	f841 2f04 	str.w	r2, [r1, #4]!
 8016cb0:	459c      	cmp	ip, r3
 8016cb2:	d8f9      	bhi.n	8016ca8 <__lshift+0xc0>
 8016cb4:	e7ea      	b.n	8016c8c <__lshift+0xa4>
 8016cb6:	bf00      	nop
 8016cb8:	0802e755 	.word	0x0802e755
 8016cbc:	0802e766 	.word	0x0802e766

08016cc0 <__mcmp>:
 8016cc0:	690a      	ldr	r2, [r1, #16]
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	6900      	ldr	r0, [r0, #16]
 8016cc6:	1a80      	subs	r0, r0, r2
 8016cc8:	b530      	push	{r4, r5, lr}
 8016cca:	d10e      	bne.n	8016cea <__mcmp+0x2a>
 8016ccc:	3314      	adds	r3, #20
 8016cce:	3114      	adds	r1, #20
 8016cd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016cd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016cd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016cdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016ce0:	4295      	cmp	r5, r2
 8016ce2:	d003      	beq.n	8016cec <__mcmp+0x2c>
 8016ce4:	d205      	bcs.n	8016cf2 <__mcmp+0x32>
 8016ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016cea:	bd30      	pop	{r4, r5, pc}
 8016cec:	42a3      	cmp	r3, r4
 8016cee:	d3f3      	bcc.n	8016cd8 <__mcmp+0x18>
 8016cf0:	e7fb      	b.n	8016cea <__mcmp+0x2a>
 8016cf2:	2001      	movs	r0, #1
 8016cf4:	e7f9      	b.n	8016cea <__mcmp+0x2a>
	...

08016cf8 <__mdiff>:
 8016cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cfc:	4689      	mov	r9, r1
 8016cfe:	4606      	mov	r6, r0
 8016d00:	4611      	mov	r1, r2
 8016d02:	4648      	mov	r0, r9
 8016d04:	4614      	mov	r4, r2
 8016d06:	f7ff ffdb 	bl	8016cc0 <__mcmp>
 8016d0a:	1e05      	subs	r5, r0, #0
 8016d0c:	d112      	bne.n	8016d34 <__mdiff+0x3c>
 8016d0e:	4629      	mov	r1, r5
 8016d10:	4630      	mov	r0, r6
 8016d12:	f7ff fd11 	bl	8016738 <_Balloc>
 8016d16:	4602      	mov	r2, r0
 8016d18:	b928      	cbnz	r0, 8016d26 <__mdiff+0x2e>
 8016d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8016e18 <__mdiff+0x120>)
 8016d1c:	f240 2137 	movw	r1, #567	@ 0x237
 8016d20:	483e      	ldr	r0, [pc, #248]	@ (8016e1c <__mdiff+0x124>)
 8016d22:	f001 fb0d 	bl	8018340 <__assert_func>
 8016d26:	2301      	movs	r3, #1
 8016d28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016d2c:	4610      	mov	r0, r2
 8016d2e:	b003      	add	sp, #12
 8016d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d34:	bfbc      	itt	lt
 8016d36:	464b      	movlt	r3, r9
 8016d38:	46a1      	movlt	r9, r4
 8016d3a:	4630      	mov	r0, r6
 8016d3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016d40:	bfba      	itte	lt
 8016d42:	461c      	movlt	r4, r3
 8016d44:	2501      	movlt	r5, #1
 8016d46:	2500      	movge	r5, #0
 8016d48:	f7ff fcf6 	bl	8016738 <_Balloc>
 8016d4c:	4602      	mov	r2, r0
 8016d4e:	b918      	cbnz	r0, 8016d58 <__mdiff+0x60>
 8016d50:	4b31      	ldr	r3, [pc, #196]	@ (8016e18 <__mdiff+0x120>)
 8016d52:	f240 2145 	movw	r1, #581	@ 0x245
 8016d56:	e7e3      	b.n	8016d20 <__mdiff+0x28>
 8016d58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016d5c:	6926      	ldr	r6, [r4, #16]
 8016d5e:	60c5      	str	r5, [r0, #12]
 8016d60:	f109 0310 	add.w	r3, r9, #16
 8016d64:	f109 0514 	add.w	r5, r9, #20
 8016d68:	f104 0e14 	add.w	lr, r4, #20
 8016d6c:	f100 0b14 	add.w	fp, r0, #20
 8016d70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016d74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016d78:	9301      	str	r3, [sp, #4]
 8016d7a:	46d9      	mov	r9, fp
 8016d7c:	f04f 0c00 	mov.w	ip, #0
 8016d80:	9b01      	ldr	r3, [sp, #4]
 8016d82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016d86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016d8a:	9301      	str	r3, [sp, #4]
 8016d8c:	fa1f f38a 	uxth.w	r3, sl
 8016d90:	4619      	mov	r1, r3
 8016d92:	b283      	uxth	r3, r0
 8016d94:	1acb      	subs	r3, r1, r3
 8016d96:	0c00      	lsrs	r0, r0, #16
 8016d98:	4463      	add	r3, ip
 8016d9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016d9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016da2:	b29b      	uxth	r3, r3
 8016da4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016da8:	4576      	cmp	r6, lr
 8016daa:	f849 3b04 	str.w	r3, [r9], #4
 8016dae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016db2:	d8e5      	bhi.n	8016d80 <__mdiff+0x88>
 8016db4:	1b33      	subs	r3, r6, r4
 8016db6:	3b15      	subs	r3, #21
 8016db8:	f023 0303 	bic.w	r3, r3, #3
 8016dbc:	3415      	adds	r4, #21
 8016dbe:	3304      	adds	r3, #4
 8016dc0:	42a6      	cmp	r6, r4
 8016dc2:	bf38      	it	cc
 8016dc4:	2304      	movcc	r3, #4
 8016dc6:	441d      	add	r5, r3
 8016dc8:	445b      	add	r3, fp
 8016dca:	461e      	mov	r6, r3
 8016dcc:	462c      	mov	r4, r5
 8016dce:	4544      	cmp	r4, r8
 8016dd0:	d30e      	bcc.n	8016df0 <__mdiff+0xf8>
 8016dd2:	f108 0103 	add.w	r1, r8, #3
 8016dd6:	1b49      	subs	r1, r1, r5
 8016dd8:	f021 0103 	bic.w	r1, r1, #3
 8016ddc:	3d03      	subs	r5, #3
 8016dde:	45a8      	cmp	r8, r5
 8016de0:	bf38      	it	cc
 8016de2:	2100      	movcc	r1, #0
 8016de4:	440b      	add	r3, r1
 8016de6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016dea:	b191      	cbz	r1, 8016e12 <__mdiff+0x11a>
 8016dec:	6117      	str	r7, [r2, #16]
 8016dee:	e79d      	b.n	8016d2c <__mdiff+0x34>
 8016df0:	f854 1b04 	ldr.w	r1, [r4], #4
 8016df4:	46e6      	mov	lr, ip
 8016df6:	0c08      	lsrs	r0, r1, #16
 8016df8:	fa1c fc81 	uxtah	ip, ip, r1
 8016dfc:	4471      	add	r1, lr
 8016dfe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016e02:	b289      	uxth	r1, r1
 8016e04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016e08:	f846 1b04 	str.w	r1, [r6], #4
 8016e0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016e10:	e7dd      	b.n	8016dce <__mdiff+0xd6>
 8016e12:	3f01      	subs	r7, #1
 8016e14:	e7e7      	b.n	8016de6 <__mdiff+0xee>
 8016e16:	bf00      	nop
 8016e18:	0802e755 	.word	0x0802e755
 8016e1c:	0802e766 	.word	0x0802e766

08016e20 <__ulp>:
 8016e20:	b082      	sub	sp, #8
 8016e22:	ed8d 0b00 	vstr	d0, [sp]
 8016e26:	9a01      	ldr	r2, [sp, #4]
 8016e28:	4b0f      	ldr	r3, [pc, #60]	@ (8016e68 <__ulp+0x48>)
 8016e2a:	4013      	ands	r3, r2
 8016e2c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	dc08      	bgt.n	8016e46 <__ulp+0x26>
 8016e34:	425b      	negs	r3, r3
 8016e36:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016e3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016e3e:	da04      	bge.n	8016e4a <__ulp+0x2a>
 8016e40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016e44:	4113      	asrs	r3, r2
 8016e46:	2200      	movs	r2, #0
 8016e48:	e008      	b.n	8016e5c <__ulp+0x3c>
 8016e4a:	f1a2 0314 	sub.w	r3, r2, #20
 8016e4e:	2b1e      	cmp	r3, #30
 8016e50:	bfda      	itte	le
 8016e52:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016e56:	40da      	lsrle	r2, r3
 8016e58:	2201      	movgt	r2, #1
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	4610      	mov	r0, r2
 8016e60:	ec41 0b10 	vmov	d0, r0, r1
 8016e64:	b002      	add	sp, #8
 8016e66:	4770      	bx	lr
 8016e68:	7ff00000 	.word	0x7ff00000

08016e6c <__b2d>:
 8016e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e70:	6906      	ldr	r6, [r0, #16]
 8016e72:	f100 0814 	add.w	r8, r0, #20
 8016e76:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016e7a:	1f37      	subs	r7, r6, #4
 8016e7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016e80:	4610      	mov	r0, r2
 8016e82:	f7ff fd4b 	bl	801691c <__hi0bits>
 8016e86:	f1c0 0320 	rsb	r3, r0, #32
 8016e8a:	280a      	cmp	r0, #10
 8016e8c:	600b      	str	r3, [r1, #0]
 8016e8e:	491b      	ldr	r1, [pc, #108]	@ (8016efc <__b2d+0x90>)
 8016e90:	dc15      	bgt.n	8016ebe <__b2d+0x52>
 8016e92:	f1c0 0c0b 	rsb	ip, r0, #11
 8016e96:	fa22 f30c 	lsr.w	r3, r2, ip
 8016e9a:	45b8      	cmp	r8, r7
 8016e9c:	ea43 0501 	orr.w	r5, r3, r1
 8016ea0:	bf34      	ite	cc
 8016ea2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016ea6:	2300      	movcs	r3, #0
 8016ea8:	3015      	adds	r0, #21
 8016eaa:	fa02 f000 	lsl.w	r0, r2, r0
 8016eae:	fa23 f30c 	lsr.w	r3, r3, ip
 8016eb2:	4303      	orrs	r3, r0
 8016eb4:	461c      	mov	r4, r3
 8016eb6:	ec45 4b10 	vmov	d0, r4, r5
 8016eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ebe:	45b8      	cmp	r8, r7
 8016ec0:	bf3a      	itte	cc
 8016ec2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016ec6:	f1a6 0708 	subcc.w	r7, r6, #8
 8016eca:	2300      	movcs	r3, #0
 8016ecc:	380b      	subs	r0, #11
 8016ece:	d012      	beq.n	8016ef6 <__b2d+0x8a>
 8016ed0:	f1c0 0120 	rsb	r1, r0, #32
 8016ed4:	fa23 f401 	lsr.w	r4, r3, r1
 8016ed8:	4082      	lsls	r2, r0
 8016eda:	4322      	orrs	r2, r4
 8016edc:	4547      	cmp	r7, r8
 8016ede:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016ee2:	bf8c      	ite	hi
 8016ee4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016ee8:	2200      	movls	r2, #0
 8016eea:	4083      	lsls	r3, r0
 8016eec:	40ca      	lsrs	r2, r1
 8016eee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016ef2:	4313      	orrs	r3, r2
 8016ef4:	e7de      	b.n	8016eb4 <__b2d+0x48>
 8016ef6:	ea42 0501 	orr.w	r5, r2, r1
 8016efa:	e7db      	b.n	8016eb4 <__b2d+0x48>
 8016efc:	3ff00000 	.word	0x3ff00000

08016f00 <__d2b>:
 8016f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016f04:	460f      	mov	r7, r1
 8016f06:	2101      	movs	r1, #1
 8016f08:	ec59 8b10 	vmov	r8, r9, d0
 8016f0c:	4616      	mov	r6, r2
 8016f0e:	f7ff fc13 	bl	8016738 <_Balloc>
 8016f12:	4604      	mov	r4, r0
 8016f14:	b930      	cbnz	r0, 8016f24 <__d2b+0x24>
 8016f16:	4602      	mov	r2, r0
 8016f18:	4b23      	ldr	r3, [pc, #140]	@ (8016fa8 <__d2b+0xa8>)
 8016f1a:	4824      	ldr	r0, [pc, #144]	@ (8016fac <__d2b+0xac>)
 8016f1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8016f20:	f001 fa0e 	bl	8018340 <__assert_func>
 8016f24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016f28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f2c:	b10d      	cbz	r5, 8016f32 <__d2b+0x32>
 8016f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016f32:	9301      	str	r3, [sp, #4]
 8016f34:	f1b8 0300 	subs.w	r3, r8, #0
 8016f38:	d023      	beq.n	8016f82 <__d2b+0x82>
 8016f3a:	4668      	mov	r0, sp
 8016f3c:	9300      	str	r3, [sp, #0]
 8016f3e:	f7ff fd0c 	bl	801695a <__lo0bits>
 8016f42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016f46:	b1d0      	cbz	r0, 8016f7e <__d2b+0x7e>
 8016f48:	f1c0 0320 	rsb	r3, r0, #32
 8016f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8016f50:	430b      	orrs	r3, r1
 8016f52:	40c2      	lsrs	r2, r0
 8016f54:	6163      	str	r3, [r4, #20]
 8016f56:	9201      	str	r2, [sp, #4]
 8016f58:	9b01      	ldr	r3, [sp, #4]
 8016f5a:	61a3      	str	r3, [r4, #24]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	bf0c      	ite	eq
 8016f60:	2201      	moveq	r2, #1
 8016f62:	2202      	movne	r2, #2
 8016f64:	6122      	str	r2, [r4, #16]
 8016f66:	b1a5      	cbz	r5, 8016f92 <__d2b+0x92>
 8016f68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016f6c:	4405      	add	r5, r0
 8016f6e:	603d      	str	r5, [r7, #0]
 8016f70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016f74:	6030      	str	r0, [r6, #0]
 8016f76:	4620      	mov	r0, r4
 8016f78:	b003      	add	sp, #12
 8016f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f7e:	6161      	str	r1, [r4, #20]
 8016f80:	e7ea      	b.n	8016f58 <__d2b+0x58>
 8016f82:	a801      	add	r0, sp, #4
 8016f84:	f7ff fce9 	bl	801695a <__lo0bits>
 8016f88:	9b01      	ldr	r3, [sp, #4]
 8016f8a:	6163      	str	r3, [r4, #20]
 8016f8c:	3020      	adds	r0, #32
 8016f8e:	2201      	movs	r2, #1
 8016f90:	e7e8      	b.n	8016f64 <__d2b+0x64>
 8016f92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016f96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016f9a:	6038      	str	r0, [r7, #0]
 8016f9c:	6918      	ldr	r0, [r3, #16]
 8016f9e:	f7ff fcbd 	bl	801691c <__hi0bits>
 8016fa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016fa6:	e7e5      	b.n	8016f74 <__d2b+0x74>
 8016fa8:	0802e755 	.word	0x0802e755
 8016fac:	0802e766 	.word	0x0802e766

08016fb0 <__ratio>:
 8016fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fb4:	b085      	sub	sp, #20
 8016fb6:	e9cd 1000 	strd	r1, r0, [sp]
 8016fba:	a902      	add	r1, sp, #8
 8016fbc:	f7ff ff56 	bl	8016e6c <__b2d>
 8016fc0:	9800      	ldr	r0, [sp, #0]
 8016fc2:	a903      	add	r1, sp, #12
 8016fc4:	ec55 4b10 	vmov	r4, r5, d0
 8016fc8:	f7ff ff50 	bl	8016e6c <__b2d>
 8016fcc:	9b01      	ldr	r3, [sp, #4]
 8016fce:	6919      	ldr	r1, [r3, #16]
 8016fd0:	9b00      	ldr	r3, [sp, #0]
 8016fd2:	691b      	ldr	r3, [r3, #16]
 8016fd4:	1ac9      	subs	r1, r1, r3
 8016fd6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016fda:	1a9b      	subs	r3, r3, r2
 8016fdc:	ec5b ab10 	vmov	sl, fp, d0
 8016fe0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	bfce      	itee	gt
 8016fe8:	462a      	movgt	r2, r5
 8016fea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016fee:	465a      	movle	r2, fp
 8016ff0:	462f      	mov	r7, r5
 8016ff2:	46d9      	mov	r9, fp
 8016ff4:	bfcc      	ite	gt
 8016ff6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016ffa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016ffe:	464b      	mov	r3, r9
 8017000:	4652      	mov	r2, sl
 8017002:	4620      	mov	r0, r4
 8017004:	4639      	mov	r1, r7
 8017006:	f7e9 fc29 	bl	800085c <__aeabi_ddiv>
 801700a:	ec41 0b10 	vmov	d0, r0, r1
 801700e:	b005      	add	sp, #20
 8017010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017014 <__copybits>:
 8017014:	3901      	subs	r1, #1
 8017016:	b570      	push	{r4, r5, r6, lr}
 8017018:	1149      	asrs	r1, r1, #5
 801701a:	6914      	ldr	r4, [r2, #16]
 801701c:	3101      	adds	r1, #1
 801701e:	f102 0314 	add.w	r3, r2, #20
 8017022:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017026:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801702a:	1f05      	subs	r5, r0, #4
 801702c:	42a3      	cmp	r3, r4
 801702e:	d30c      	bcc.n	801704a <__copybits+0x36>
 8017030:	1aa3      	subs	r3, r4, r2
 8017032:	3b11      	subs	r3, #17
 8017034:	f023 0303 	bic.w	r3, r3, #3
 8017038:	3211      	adds	r2, #17
 801703a:	42a2      	cmp	r2, r4
 801703c:	bf88      	it	hi
 801703e:	2300      	movhi	r3, #0
 8017040:	4418      	add	r0, r3
 8017042:	2300      	movs	r3, #0
 8017044:	4288      	cmp	r0, r1
 8017046:	d305      	bcc.n	8017054 <__copybits+0x40>
 8017048:	bd70      	pop	{r4, r5, r6, pc}
 801704a:	f853 6b04 	ldr.w	r6, [r3], #4
 801704e:	f845 6f04 	str.w	r6, [r5, #4]!
 8017052:	e7eb      	b.n	801702c <__copybits+0x18>
 8017054:	f840 3b04 	str.w	r3, [r0], #4
 8017058:	e7f4      	b.n	8017044 <__copybits+0x30>

0801705a <__any_on>:
 801705a:	f100 0214 	add.w	r2, r0, #20
 801705e:	6900      	ldr	r0, [r0, #16]
 8017060:	114b      	asrs	r3, r1, #5
 8017062:	4298      	cmp	r0, r3
 8017064:	b510      	push	{r4, lr}
 8017066:	db11      	blt.n	801708c <__any_on+0x32>
 8017068:	dd0a      	ble.n	8017080 <__any_on+0x26>
 801706a:	f011 011f 	ands.w	r1, r1, #31
 801706e:	d007      	beq.n	8017080 <__any_on+0x26>
 8017070:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017074:	fa24 f001 	lsr.w	r0, r4, r1
 8017078:	fa00 f101 	lsl.w	r1, r0, r1
 801707c:	428c      	cmp	r4, r1
 801707e:	d10b      	bne.n	8017098 <__any_on+0x3e>
 8017080:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017084:	4293      	cmp	r3, r2
 8017086:	d803      	bhi.n	8017090 <__any_on+0x36>
 8017088:	2000      	movs	r0, #0
 801708a:	bd10      	pop	{r4, pc}
 801708c:	4603      	mov	r3, r0
 801708e:	e7f7      	b.n	8017080 <__any_on+0x26>
 8017090:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017094:	2900      	cmp	r1, #0
 8017096:	d0f5      	beq.n	8017084 <__any_on+0x2a>
 8017098:	2001      	movs	r0, #1
 801709a:	e7f6      	b.n	801708a <__any_on+0x30>

0801709c <sulp>:
 801709c:	b570      	push	{r4, r5, r6, lr}
 801709e:	4604      	mov	r4, r0
 80170a0:	460d      	mov	r5, r1
 80170a2:	ec45 4b10 	vmov	d0, r4, r5
 80170a6:	4616      	mov	r6, r2
 80170a8:	f7ff feba 	bl	8016e20 <__ulp>
 80170ac:	ec51 0b10 	vmov	r0, r1, d0
 80170b0:	b17e      	cbz	r6, 80170d2 <sulp+0x36>
 80170b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80170b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	dd09      	ble.n	80170d2 <sulp+0x36>
 80170be:	051b      	lsls	r3, r3, #20
 80170c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80170c4:	2400      	movs	r4, #0
 80170c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80170ca:	4622      	mov	r2, r4
 80170cc:	462b      	mov	r3, r5
 80170ce:	f7e9 fa9b 	bl	8000608 <__aeabi_dmul>
 80170d2:	ec41 0b10 	vmov	d0, r0, r1
 80170d6:	bd70      	pop	{r4, r5, r6, pc}

080170d8 <_strtod_l>:
 80170d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170dc:	b09f      	sub	sp, #124	@ 0x7c
 80170de:	460c      	mov	r4, r1
 80170e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80170e2:	2200      	movs	r2, #0
 80170e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80170e6:	9005      	str	r0, [sp, #20]
 80170e8:	f04f 0a00 	mov.w	sl, #0
 80170ec:	f04f 0b00 	mov.w	fp, #0
 80170f0:	460a      	mov	r2, r1
 80170f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80170f4:	7811      	ldrb	r1, [r2, #0]
 80170f6:	292b      	cmp	r1, #43	@ 0x2b
 80170f8:	d04a      	beq.n	8017190 <_strtod_l+0xb8>
 80170fa:	d838      	bhi.n	801716e <_strtod_l+0x96>
 80170fc:	290d      	cmp	r1, #13
 80170fe:	d832      	bhi.n	8017166 <_strtod_l+0x8e>
 8017100:	2908      	cmp	r1, #8
 8017102:	d832      	bhi.n	801716a <_strtod_l+0x92>
 8017104:	2900      	cmp	r1, #0
 8017106:	d03b      	beq.n	8017180 <_strtod_l+0xa8>
 8017108:	2200      	movs	r2, #0
 801710a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801710c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801710e:	782a      	ldrb	r2, [r5, #0]
 8017110:	2a30      	cmp	r2, #48	@ 0x30
 8017112:	f040 80b3 	bne.w	801727c <_strtod_l+0x1a4>
 8017116:	786a      	ldrb	r2, [r5, #1]
 8017118:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801711c:	2a58      	cmp	r2, #88	@ 0x58
 801711e:	d16e      	bne.n	80171fe <_strtod_l+0x126>
 8017120:	9302      	str	r3, [sp, #8]
 8017122:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017124:	9301      	str	r3, [sp, #4]
 8017126:	ab1a      	add	r3, sp, #104	@ 0x68
 8017128:	9300      	str	r3, [sp, #0]
 801712a:	4a8e      	ldr	r2, [pc, #568]	@ (8017364 <_strtod_l+0x28c>)
 801712c:	9805      	ldr	r0, [sp, #20]
 801712e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8017130:	a919      	add	r1, sp, #100	@ 0x64
 8017132:	f001 f99f 	bl	8018474 <__gethex>
 8017136:	f010 060f 	ands.w	r6, r0, #15
 801713a:	4604      	mov	r4, r0
 801713c:	d005      	beq.n	801714a <_strtod_l+0x72>
 801713e:	2e06      	cmp	r6, #6
 8017140:	d128      	bne.n	8017194 <_strtod_l+0xbc>
 8017142:	3501      	adds	r5, #1
 8017144:	2300      	movs	r3, #0
 8017146:	9519      	str	r5, [sp, #100]	@ 0x64
 8017148:	930b      	str	r3, [sp, #44]	@ 0x2c
 801714a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801714c:	2b00      	cmp	r3, #0
 801714e:	f040 858e 	bne.w	8017c6e <_strtod_l+0xb96>
 8017152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017154:	b1cb      	cbz	r3, 801718a <_strtod_l+0xb2>
 8017156:	4652      	mov	r2, sl
 8017158:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801715c:	ec43 2b10 	vmov	d0, r2, r3
 8017160:	b01f      	add	sp, #124	@ 0x7c
 8017162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017166:	2920      	cmp	r1, #32
 8017168:	d1ce      	bne.n	8017108 <_strtod_l+0x30>
 801716a:	3201      	adds	r2, #1
 801716c:	e7c1      	b.n	80170f2 <_strtod_l+0x1a>
 801716e:	292d      	cmp	r1, #45	@ 0x2d
 8017170:	d1ca      	bne.n	8017108 <_strtod_l+0x30>
 8017172:	2101      	movs	r1, #1
 8017174:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017176:	1c51      	adds	r1, r2, #1
 8017178:	9119      	str	r1, [sp, #100]	@ 0x64
 801717a:	7852      	ldrb	r2, [r2, #1]
 801717c:	2a00      	cmp	r2, #0
 801717e:	d1c5      	bne.n	801710c <_strtod_l+0x34>
 8017180:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017182:	9419      	str	r4, [sp, #100]	@ 0x64
 8017184:	2b00      	cmp	r3, #0
 8017186:	f040 8570 	bne.w	8017c6a <_strtod_l+0xb92>
 801718a:	4652      	mov	r2, sl
 801718c:	465b      	mov	r3, fp
 801718e:	e7e5      	b.n	801715c <_strtod_l+0x84>
 8017190:	2100      	movs	r1, #0
 8017192:	e7ef      	b.n	8017174 <_strtod_l+0x9c>
 8017194:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017196:	b13a      	cbz	r2, 80171a8 <_strtod_l+0xd0>
 8017198:	2135      	movs	r1, #53	@ 0x35
 801719a:	a81c      	add	r0, sp, #112	@ 0x70
 801719c:	f7ff ff3a 	bl	8017014 <__copybits>
 80171a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80171a2:	9805      	ldr	r0, [sp, #20]
 80171a4:	f7ff fb08 	bl	80167b8 <_Bfree>
 80171a8:	3e01      	subs	r6, #1
 80171aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80171ac:	2e04      	cmp	r6, #4
 80171ae:	d806      	bhi.n	80171be <_strtod_l+0xe6>
 80171b0:	e8df f006 	tbb	[pc, r6]
 80171b4:	201d0314 	.word	0x201d0314
 80171b8:	14          	.byte	0x14
 80171b9:	00          	.byte	0x00
 80171ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80171be:	05e1      	lsls	r1, r4, #23
 80171c0:	bf48      	it	mi
 80171c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80171c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80171ca:	0d1b      	lsrs	r3, r3, #20
 80171cc:	051b      	lsls	r3, r3, #20
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d1bb      	bne.n	801714a <_strtod_l+0x72>
 80171d2:	f7fe fb21 	bl	8015818 <__errno>
 80171d6:	2322      	movs	r3, #34	@ 0x22
 80171d8:	6003      	str	r3, [r0, #0]
 80171da:	e7b6      	b.n	801714a <_strtod_l+0x72>
 80171dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80171e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80171e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80171e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80171ec:	e7e7      	b.n	80171be <_strtod_l+0xe6>
 80171ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801736c <_strtod_l+0x294>
 80171f2:	e7e4      	b.n	80171be <_strtod_l+0xe6>
 80171f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80171f8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80171fc:	e7df      	b.n	80171be <_strtod_l+0xe6>
 80171fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017200:	1c5a      	adds	r2, r3, #1
 8017202:	9219      	str	r2, [sp, #100]	@ 0x64
 8017204:	785b      	ldrb	r3, [r3, #1]
 8017206:	2b30      	cmp	r3, #48	@ 0x30
 8017208:	d0f9      	beq.n	80171fe <_strtod_l+0x126>
 801720a:	2b00      	cmp	r3, #0
 801720c:	d09d      	beq.n	801714a <_strtod_l+0x72>
 801720e:	2301      	movs	r3, #1
 8017210:	9309      	str	r3, [sp, #36]	@ 0x24
 8017212:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017214:	930c      	str	r3, [sp, #48]	@ 0x30
 8017216:	2300      	movs	r3, #0
 8017218:	9308      	str	r3, [sp, #32]
 801721a:	930a      	str	r3, [sp, #40]	@ 0x28
 801721c:	461f      	mov	r7, r3
 801721e:	220a      	movs	r2, #10
 8017220:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8017222:	7805      	ldrb	r5, [r0, #0]
 8017224:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8017228:	b2d9      	uxtb	r1, r3
 801722a:	2909      	cmp	r1, #9
 801722c:	d928      	bls.n	8017280 <_strtod_l+0x1a8>
 801722e:	494e      	ldr	r1, [pc, #312]	@ (8017368 <_strtod_l+0x290>)
 8017230:	2201      	movs	r2, #1
 8017232:	f001 f837 	bl	80182a4 <strncmp>
 8017236:	2800      	cmp	r0, #0
 8017238:	d032      	beq.n	80172a0 <_strtod_l+0x1c8>
 801723a:	2000      	movs	r0, #0
 801723c:	462a      	mov	r2, r5
 801723e:	4681      	mov	r9, r0
 8017240:	463d      	mov	r5, r7
 8017242:	4603      	mov	r3, r0
 8017244:	2a65      	cmp	r2, #101	@ 0x65
 8017246:	d001      	beq.n	801724c <_strtod_l+0x174>
 8017248:	2a45      	cmp	r2, #69	@ 0x45
 801724a:	d114      	bne.n	8017276 <_strtod_l+0x19e>
 801724c:	b91d      	cbnz	r5, 8017256 <_strtod_l+0x17e>
 801724e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017250:	4302      	orrs	r2, r0
 8017252:	d095      	beq.n	8017180 <_strtod_l+0xa8>
 8017254:	2500      	movs	r5, #0
 8017256:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8017258:	1c62      	adds	r2, r4, #1
 801725a:	9219      	str	r2, [sp, #100]	@ 0x64
 801725c:	7862      	ldrb	r2, [r4, #1]
 801725e:	2a2b      	cmp	r2, #43	@ 0x2b
 8017260:	d077      	beq.n	8017352 <_strtod_l+0x27a>
 8017262:	2a2d      	cmp	r2, #45	@ 0x2d
 8017264:	d07b      	beq.n	801735e <_strtod_l+0x286>
 8017266:	f04f 0c00 	mov.w	ip, #0
 801726a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801726e:	2909      	cmp	r1, #9
 8017270:	f240 8082 	bls.w	8017378 <_strtod_l+0x2a0>
 8017274:	9419      	str	r4, [sp, #100]	@ 0x64
 8017276:	f04f 0800 	mov.w	r8, #0
 801727a:	e0a2      	b.n	80173c2 <_strtod_l+0x2ea>
 801727c:	2300      	movs	r3, #0
 801727e:	e7c7      	b.n	8017210 <_strtod_l+0x138>
 8017280:	2f08      	cmp	r7, #8
 8017282:	bfd5      	itete	le
 8017284:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8017286:	9908      	ldrgt	r1, [sp, #32]
 8017288:	fb02 3301 	mlale	r3, r2, r1, r3
 801728c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8017290:	f100 0001 	add.w	r0, r0, #1
 8017294:	bfd4      	ite	le
 8017296:	930a      	strle	r3, [sp, #40]	@ 0x28
 8017298:	9308      	strgt	r3, [sp, #32]
 801729a:	3701      	adds	r7, #1
 801729c:	9019      	str	r0, [sp, #100]	@ 0x64
 801729e:	e7bf      	b.n	8017220 <_strtod_l+0x148>
 80172a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80172a2:	1c5a      	adds	r2, r3, #1
 80172a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80172a6:	785a      	ldrb	r2, [r3, #1]
 80172a8:	b37f      	cbz	r7, 801730a <_strtod_l+0x232>
 80172aa:	4681      	mov	r9, r0
 80172ac:	463d      	mov	r5, r7
 80172ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80172b2:	2b09      	cmp	r3, #9
 80172b4:	d912      	bls.n	80172dc <_strtod_l+0x204>
 80172b6:	2301      	movs	r3, #1
 80172b8:	e7c4      	b.n	8017244 <_strtod_l+0x16c>
 80172ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80172bc:	1c5a      	adds	r2, r3, #1
 80172be:	9219      	str	r2, [sp, #100]	@ 0x64
 80172c0:	785a      	ldrb	r2, [r3, #1]
 80172c2:	3001      	adds	r0, #1
 80172c4:	2a30      	cmp	r2, #48	@ 0x30
 80172c6:	d0f8      	beq.n	80172ba <_strtod_l+0x1e2>
 80172c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80172cc:	2b08      	cmp	r3, #8
 80172ce:	f200 84d3 	bhi.w	8017c78 <_strtod_l+0xba0>
 80172d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80172d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80172d6:	4681      	mov	r9, r0
 80172d8:	2000      	movs	r0, #0
 80172da:	4605      	mov	r5, r0
 80172dc:	3a30      	subs	r2, #48	@ 0x30
 80172de:	f100 0301 	add.w	r3, r0, #1
 80172e2:	d02a      	beq.n	801733a <_strtod_l+0x262>
 80172e4:	4499      	add	r9, r3
 80172e6:	eb00 0c05 	add.w	ip, r0, r5
 80172ea:	462b      	mov	r3, r5
 80172ec:	210a      	movs	r1, #10
 80172ee:	4563      	cmp	r3, ip
 80172f0:	d10d      	bne.n	801730e <_strtod_l+0x236>
 80172f2:	1c69      	adds	r1, r5, #1
 80172f4:	4401      	add	r1, r0
 80172f6:	4428      	add	r0, r5
 80172f8:	2808      	cmp	r0, #8
 80172fa:	dc16      	bgt.n	801732a <_strtod_l+0x252>
 80172fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80172fe:	230a      	movs	r3, #10
 8017300:	fb03 2300 	mla	r3, r3, r0, r2
 8017304:	930a      	str	r3, [sp, #40]	@ 0x28
 8017306:	2300      	movs	r3, #0
 8017308:	e018      	b.n	801733c <_strtod_l+0x264>
 801730a:	4638      	mov	r0, r7
 801730c:	e7da      	b.n	80172c4 <_strtod_l+0x1ec>
 801730e:	2b08      	cmp	r3, #8
 8017310:	f103 0301 	add.w	r3, r3, #1
 8017314:	dc03      	bgt.n	801731e <_strtod_l+0x246>
 8017316:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017318:	434e      	muls	r6, r1
 801731a:	960a      	str	r6, [sp, #40]	@ 0x28
 801731c:	e7e7      	b.n	80172ee <_strtod_l+0x216>
 801731e:	2b10      	cmp	r3, #16
 8017320:	bfde      	ittt	le
 8017322:	9e08      	ldrle	r6, [sp, #32]
 8017324:	434e      	mulle	r6, r1
 8017326:	9608      	strle	r6, [sp, #32]
 8017328:	e7e1      	b.n	80172ee <_strtod_l+0x216>
 801732a:	280f      	cmp	r0, #15
 801732c:	dceb      	bgt.n	8017306 <_strtod_l+0x22e>
 801732e:	9808      	ldr	r0, [sp, #32]
 8017330:	230a      	movs	r3, #10
 8017332:	fb03 2300 	mla	r3, r3, r0, r2
 8017336:	9308      	str	r3, [sp, #32]
 8017338:	e7e5      	b.n	8017306 <_strtod_l+0x22e>
 801733a:	4629      	mov	r1, r5
 801733c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801733e:	1c50      	adds	r0, r2, #1
 8017340:	9019      	str	r0, [sp, #100]	@ 0x64
 8017342:	7852      	ldrb	r2, [r2, #1]
 8017344:	4618      	mov	r0, r3
 8017346:	460d      	mov	r5, r1
 8017348:	e7b1      	b.n	80172ae <_strtod_l+0x1d6>
 801734a:	f04f 0900 	mov.w	r9, #0
 801734e:	2301      	movs	r3, #1
 8017350:	e77d      	b.n	801724e <_strtod_l+0x176>
 8017352:	f04f 0c00 	mov.w	ip, #0
 8017356:	1ca2      	adds	r2, r4, #2
 8017358:	9219      	str	r2, [sp, #100]	@ 0x64
 801735a:	78a2      	ldrb	r2, [r4, #2]
 801735c:	e785      	b.n	801726a <_strtod_l+0x192>
 801735e:	f04f 0c01 	mov.w	ip, #1
 8017362:	e7f8      	b.n	8017356 <_strtod_l+0x27e>
 8017364:	0802e8d8 	.word	0x0802e8d8
 8017368:	0802e8c0 	.word	0x0802e8c0
 801736c:	7ff00000 	.word	0x7ff00000
 8017370:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017372:	1c51      	adds	r1, r2, #1
 8017374:	9119      	str	r1, [sp, #100]	@ 0x64
 8017376:	7852      	ldrb	r2, [r2, #1]
 8017378:	2a30      	cmp	r2, #48	@ 0x30
 801737a:	d0f9      	beq.n	8017370 <_strtod_l+0x298>
 801737c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8017380:	2908      	cmp	r1, #8
 8017382:	f63f af78 	bhi.w	8017276 <_strtod_l+0x19e>
 8017386:	3a30      	subs	r2, #48	@ 0x30
 8017388:	920e      	str	r2, [sp, #56]	@ 0x38
 801738a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801738c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801738e:	f04f 080a 	mov.w	r8, #10
 8017392:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017394:	1c56      	adds	r6, r2, #1
 8017396:	9619      	str	r6, [sp, #100]	@ 0x64
 8017398:	7852      	ldrb	r2, [r2, #1]
 801739a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801739e:	f1be 0f09 	cmp.w	lr, #9
 80173a2:	d939      	bls.n	8017418 <_strtod_l+0x340>
 80173a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80173a6:	1a76      	subs	r6, r6, r1
 80173a8:	2e08      	cmp	r6, #8
 80173aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80173ae:	dc03      	bgt.n	80173b8 <_strtod_l+0x2e0>
 80173b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80173b2:	4588      	cmp	r8, r1
 80173b4:	bfa8      	it	ge
 80173b6:	4688      	movge	r8, r1
 80173b8:	f1bc 0f00 	cmp.w	ip, #0
 80173bc:	d001      	beq.n	80173c2 <_strtod_l+0x2ea>
 80173be:	f1c8 0800 	rsb	r8, r8, #0
 80173c2:	2d00      	cmp	r5, #0
 80173c4:	d14e      	bne.n	8017464 <_strtod_l+0x38c>
 80173c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80173c8:	4308      	orrs	r0, r1
 80173ca:	f47f aebe 	bne.w	801714a <_strtod_l+0x72>
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	f47f aed6 	bne.w	8017180 <_strtod_l+0xa8>
 80173d4:	2a69      	cmp	r2, #105	@ 0x69
 80173d6:	d028      	beq.n	801742a <_strtod_l+0x352>
 80173d8:	dc25      	bgt.n	8017426 <_strtod_l+0x34e>
 80173da:	2a49      	cmp	r2, #73	@ 0x49
 80173dc:	d025      	beq.n	801742a <_strtod_l+0x352>
 80173de:	2a4e      	cmp	r2, #78	@ 0x4e
 80173e0:	f47f aece 	bne.w	8017180 <_strtod_l+0xa8>
 80173e4:	499b      	ldr	r1, [pc, #620]	@ (8017654 <_strtod_l+0x57c>)
 80173e6:	a819      	add	r0, sp, #100	@ 0x64
 80173e8:	f001 fa66 	bl	80188b8 <__match>
 80173ec:	2800      	cmp	r0, #0
 80173ee:	f43f aec7 	beq.w	8017180 <_strtod_l+0xa8>
 80173f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80173f4:	781b      	ldrb	r3, [r3, #0]
 80173f6:	2b28      	cmp	r3, #40	@ 0x28
 80173f8:	d12e      	bne.n	8017458 <_strtod_l+0x380>
 80173fa:	4997      	ldr	r1, [pc, #604]	@ (8017658 <_strtod_l+0x580>)
 80173fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80173fe:	a819      	add	r0, sp, #100	@ 0x64
 8017400:	f001 fa6e 	bl	80188e0 <__hexnan>
 8017404:	2805      	cmp	r0, #5
 8017406:	d127      	bne.n	8017458 <_strtod_l+0x380>
 8017408:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801740a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801740e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017412:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8017416:	e698      	b.n	801714a <_strtod_l+0x72>
 8017418:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801741a:	fb08 2101 	mla	r1, r8, r1, r2
 801741e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8017422:	920e      	str	r2, [sp, #56]	@ 0x38
 8017424:	e7b5      	b.n	8017392 <_strtod_l+0x2ba>
 8017426:	2a6e      	cmp	r2, #110	@ 0x6e
 8017428:	e7da      	b.n	80173e0 <_strtod_l+0x308>
 801742a:	498c      	ldr	r1, [pc, #560]	@ (801765c <_strtod_l+0x584>)
 801742c:	a819      	add	r0, sp, #100	@ 0x64
 801742e:	f001 fa43 	bl	80188b8 <__match>
 8017432:	2800      	cmp	r0, #0
 8017434:	f43f aea4 	beq.w	8017180 <_strtod_l+0xa8>
 8017438:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801743a:	4989      	ldr	r1, [pc, #548]	@ (8017660 <_strtod_l+0x588>)
 801743c:	3b01      	subs	r3, #1
 801743e:	a819      	add	r0, sp, #100	@ 0x64
 8017440:	9319      	str	r3, [sp, #100]	@ 0x64
 8017442:	f001 fa39 	bl	80188b8 <__match>
 8017446:	b910      	cbnz	r0, 801744e <_strtod_l+0x376>
 8017448:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801744a:	3301      	adds	r3, #1
 801744c:	9319      	str	r3, [sp, #100]	@ 0x64
 801744e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8017670 <_strtod_l+0x598>
 8017452:	f04f 0a00 	mov.w	sl, #0
 8017456:	e678      	b.n	801714a <_strtod_l+0x72>
 8017458:	4882      	ldr	r0, [pc, #520]	@ (8017664 <_strtod_l+0x58c>)
 801745a:	f000 ff69 	bl	8018330 <nan>
 801745e:	ec5b ab10 	vmov	sl, fp, d0
 8017462:	e672      	b.n	801714a <_strtod_l+0x72>
 8017464:	eba8 0309 	sub.w	r3, r8, r9
 8017468:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801746a:	9309      	str	r3, [sp, #36]	@ 0x24
 801746c:	2f00      	cmp	r7, #0
 801746e:	bf08      	it	eq
 8017470:	462f      	moveq	r7, r5
 8017472:	2d10      	cmp	r5, #16
 8017474:	462c      	mov	r4, r5
 8017476:	bfa8      	it	ge
 8017478:	2410      	movge	r4, #16
 801747a:	f7e9 f84b 	bl	8000514 <__aeabi_ui2d>
 801747e:	2d09      	cmp	r5, #9
 8017480:	4682      	mov	sl, r0
 8017482:	468b      	mov	fp, r1
 8017484:	dc13      	bgt.n	80174ae <_strtod_l+0x3d6>
 8017486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017488:	2b00      	cmp	r3, #0
 801748a:	f43f ae5e 	beq.w	801714a <_strtod_l+0x72>
 801748e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017490:	dd78      	ble.n	8017584 <_strtod_l+0x4ac>
 8017492:	2b16      	cmp	r3, #22
 8017494:	dc5f      	bgt.n	8017556 <_strtod_l+0x47e>
 8017496:	4974      	ldr	r1, [pc, #464]	@ (8017668 <_strtod_l+0x590>)
 8017498:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801749c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80174a0:	4652      	mov	r2, sl
 80174a2:	465b      	mov	r3, fp
 80174a4:	f7e9 f8b0 	bl	8000608 <__aeabi_dmul>
 80174a8:	4682      	mov	sl, r0
 80174aa:	468b      	mov	fp, r1
 80174ac:	e64d      	b.n	801714a <_strtod_l+0x72>
 80174ae:	4b6e      	ldr	r3, [pc, #440]	@ (8017668 <_strtod_l+0x590>)
 80174b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80174b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80174b8:	f7e9 f8a6 	bl	8000608 <__aeabi_dmul>
 80174bc:	4682      	mov	sl, r0
 80174be:	9808      	ldr	r0, [sp, #32]
 80174c0:	468b      	mov	fp, r1
 80174c2:	f7e9 f827 	bl	8000514 <__aeabi_ui2d>
 80174c6:	4602      	mov	r2, r0
 80174c8:	460b      	mov	r3, r1
 80174ca:	4650      	mov	r0, sl
 80174cc:	4659      	mov	r1, fp
 80174ce:	f7e8 fee5 	bl	800029c <__adddf3>
 80174d2:	2d0f      	cmp	r5, #15
 80174d4:	4682      	mov	sl, r0
 80174d6:	468b      	mov	fp, r1
 80174d8:	ddd5      	ble.n	8017486 <_strtod_l+0x3ae>
 80174da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174dc:	1b2c      	subs	r4, r5, r4
 80174de:	441c      	add	r4, r3
 80174e0:	2c00      	cmp	r4, #0
 80174e2:	f340 8096 	ble.w	8017612 <_strtod_l+0x53a>
 80174e6:	f014 030f 	ands.w	r3, r4, #15
 80174ea:	d00a      	beq.n	8017502 <_strtod_l+0x42a>
 80174ec:	495e      	ldr	r1, [pc, #376]	@ (8017668 <_strtod_l+0x590>)
 80174ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80174f2:	4652      	mov	r2, sl
 80174f4:	465b      	mov	r3, fp
 80174f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80174fa:	f7e9 f885 	bl	8000608 <__aeabi_dmul>
 80174fe:	4682      	mov	sl, r0
 8017500:	468b      	mov	fp, r1
 8017502:	f034 040f 	bics.w	r4, r4, #15
 8017506:	d073      	beq.n	80175f0 <_strtod_l+0x518>
 8017508:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801750c:	dd48      	ble.n	80175a0 <_strtod_l+0x4c8>
 801750e:	2400      	movs	r4, #0
 8017510:	46a0      	mov	r8, r4
 8017512:	940a      	str	r4, [sp, #40]	@ 0x28
 8017514:	46a1      	mov	r9, r4
 8017516:	9a05      	ldr	r2, [sp, #20]
 8017518:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8017670 <_strtod_l+0x598>
 801751c:	2322      	movs	r3, #34	@ 0x22
 801751e:	6013      	str	r3, [r2, #0]
 8017520:	f04f 0a00 	mov.w	sl, #0
 8017524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017526:	2b00      	cmp	r3, #0
 8017528:	f43f ae0f 	beq.w	801714a <_strtod_l+0x72>
 801752c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801752e:	9805      	ldr	r0, [sp, #20]
 8017530:	f7ff f942 	bl	80167b8 <_Bfree>
 8017534:	9805      	ldr	r0, [sp, #20]
 8017536:	4649      	mov	r1, r9
 8017538:	f7ff f93e 	bl	80167b8 <_Bfree>
 801753c:	9805      	ldr	r0, [sp, #20]
 801753e:	4641      	mov	r1, r8
 8017540:	f7ff f93a 	bl	80167b8 <_Bfree>
 8017544:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017546:	9805      	ldr	r0, [sp, #20]
 8017548:	f7ff f936 	bl	80167b8 <_Bfree>
 801754c:	9805      	ldr	r0, [sp, #20]
 801754e:	4621      	mov	r1, r4
 8017550:	f7ff f932 	bl	80167b8 <_Bfree>
 8017554:	e5f9      	b.n	801714a <_strtod_l+0x72>
 8017556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017558:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801755c:	4293      	cmp	r3, r2
 801755e:	dbbc      	blt.n	80174da <_strtod_l+0x402>
 8017560:	4c41      	ldr	r4, [pc, #260]	@ (8017668 <_strtod_l+0x590>)
 8017562:	f1c5 050f 	rsb	r5, r5, #15
 8017566:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801756a:	4652      	mov	r2, sl
 801756c:	465b      	mov	r3, fp
 801756e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017572:	f7e9 f849 	bl	8000608 <__aeabi_dmul>
 8017576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017578:	1b5d      	subs	r5, r3, r5
 801757a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801757e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017582:	e78f      	b.n	80174a4 <_strtod_l+0x3cc>
 8017584:	3316      	adds	r3, #22
 8017586:	dba8      	blt.n	80174da <_strtod_l+0x402>
 8017588:	4b37      	ldr	r3, [pc, #220]	@ (8017668 <_strtod_l+0x590>)
 801758a:	eba9 0808 	sub.w	r8, r9, r8
 801758e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8017592:	e9d8 2300 	ldrd	r2, r3, [r8]
 8017596:	4650      	mov	r0, sl
 8017598:	4659      	mov	r1, fp
 801759a:	f7e9 f95f 	bl	800085c <__aeabi_ddiv>
 801759e:	e783      	b.n	80174a8 <_strtod_l+0x3d0>
 80175a0:	4b32      	ldr	r3, [pc, #200]	@ (801766c <_strtod_l+0x594>)
 80175a2:	9308      	str	r3, [sp, #32]
 80175a4:	2300      	movs	r3, #0
 80175a6:	1124      	asrs	r4, r4, #4
 80175a8:	4650      	mov	r0, sl
 80175aa:	4659      	mov	r1, fp
 80175ac:	461e      	mov	r6, r3
 80175ae:	2c01      	cmp	r4, #1
 80175b0:	dc21      	bgt.n	80175f6 <_strtod_l+0x51e>
 80175b2:	b10b      	cbz	r3, 80175b8 <_strtod_l+0x4e0>
 80175b4:	4682      	mov	sl, r0
 80175b6:	468b      	mov	fp, r1
 80175b8:	492c      	ldr	r1, [pc, #176]	@ (801766c <_strtod_l+0x594>)
 80175ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80175be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80175c2:	4652      	mov	r2, sl
 80175c4:	465b      	mov	r3, fp
 80175c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80175ca:	f7e9 f81d 	bl	8000608 <__aeabi_dmul>
 80175ce:	4b28      	ldr	r3, [pc, #160]	@ (8017670 <_strtod_l+0x598>)
 80175d0:	460a      	mov	r2, r1
 80175d2:	400b      	ands	r3, r1
 80175d4:	4927      	ldr	r1, [pc, #156]	@ (8017674 <_strtod_l+0x59c>)
 80175d6:	428b      	cmp	r3, r1
 80175d8:	4682      	mov	sl, r0
 80175da:	d898      	bhi.n	801750e <_strtod_l+0x436>
 80175dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80175e0:	428b      	cmp	r3, r1
 80175e2:	bf86      	itte	hi
 80175e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8017678 <_strtod_l+0x5a0>
 80175e8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80175ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80175f0:	2300      	movs	r3, #0
 80175f2:	9308      	str	r3, [sp, #32]
 80175f4:	e07a      	b.n	80176ec <_strtod_l+0x614>
 80175f6:	07e2      	lsls	r2, r4, #31
 80175f8:	d505      	bpl.n	8017606 <_strtod_l+0x52e>
 80175fa:	9b08      	ldr	r3, [sp, #32]
 80175fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017600:	f7e9 f802 	bl	8000608 <__aeabi_dmul>
 8017604:	2301      	movs	r3, #1
 8017606:	9a08      	ldr	r2, [sp, #32]
 8017608:	3208      	adds	r2, #8
 801760a:	3601      	adds	r6, #1
 801760c:	1064      	asrs	r4, r4, #1
 801760e:	9208      	str	r2, [sp, #32]
 8017610:	e7cd      	b.n	80175ae <_strtod_l+0x4d6>
 8017612:	d0ed      	beq.n	80175f0 <_strtod_l+0x518>
 8017614:	4264      	negs	r4, r4
 8017616:	f014 020f 	ands.w	r2, r4, #15
 801761a:	d00a      	beq.n	8017632 <_strtod_l+0x55a>
 801761c:	4b12      	ldr	r3, [pc, #72]	@ (8017668 <_strtod_l+0x590>)
 801761e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017622:	4650      	mov	r0, sl
 8017624:	4659      	mov	r1, fp
 8017626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762a:	f7e9 f917 	bl	800085c <__aeabi_ddiv>
 801762e:	4682      	mov	sl, r0
 8017630:	468b      	mov	fp, r1
 8017632:	1124      	asrs	r4, r4, #4
 8017634:	d0dc      	beq.n	80175f0 <_strtod_l+0x518>
 8017636:	2c1f      	cmp	r4, #31
 8017638:	dd20      	ble.n	801767c <_strtod_l+0x5a4>
 801763a:	2400      	movs	r4, #0
 801763c:	46a0      	mov	r8, r4
 801763e:	940a      	str	r4, [sp, #40]	@ 0x28
 8017640:	46a1      	mov	r9, r4
 8017642:	9a05      	ldr	r2, [sp, #20]
 8017644:	2322      	movs	r3, #34	@ 0x22
 8017646:	f04f 0a00 	mov.w	sl, #0
 801764a:	f04f 0b00 	mov.w	fp, #0
 801764e:	6013      	str	r3, [r2, #0]
 8017650:	e768      	b.n	8017524 <_strtod_l+0x44c>
 8017652:	bf00      	nop
 8017654:	0802e6ad 	.word	0x0802e6ad
 8017658:	0802e8c4 	.word	0x0802e8c4
 801765c:	0802e6a5 	.word	0x0802e6a5
 8017660:	0802e6dc 	.word	0x0802e6dc
 8017664:	0802ea6d 	.word	0x0802ea6d
 8017668:	0802e7f8 	.word	0x0802e7f8
 801766c:	0802e7d0 	.word	0x0802e7d0
 8017670:	7ff00000 	.word	0x7ff00000
 8017674:	7ca00000 	.word	0x7ca00000
 8017678:	7fefffff 	.word	0x7fefffff
 801767c:	f014 0310 	ands.w	r3, r4, #16
 8017680:	bf18      	it	ne
 8017682:	236a      	movne	r3, #106	@ 0x6a
 8017684:	4ea9      	ldr	r6, [pc, #676]	@ (801792c <_strtod_l+0x854>)
 8017686:	9308      	str	r3, [sp, #32]
 8017688:	4650      	mov	r0, sl
 801768a:	4659      	mov	r1, fp
 801768c:	2300      	movs	r3, #0
 801768e:	07e2      	lsls	r2, r4, #31
 8017690:	d504      	bpl.n	801769c <_strtod_l+0x5c4>
 8017692:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017696:	f7e8 ffb7 	bl	8000608 <__aeabi_dmul>
 801769a:	2301      	movs	r3, #1
 801769c:	1064      	asrs	r4, r4, #1
 801769e:	f106 0608 	add.w	r6, r6, #8
 80176a2:	d1f4      	bne.n	801768e <_strtod_l+0x5b6>
 80176a4:	b10b      	cbz	r3, 80176aa <_strtod_l+0x5d2>
 80176a6:	4682      	mov	sl, r0
 80176a8:	468b      	mov	fp, r1
 80176aa:	9b08      	ldr	r3, [sp, #32]
 80176ac:	b1b3      	cbz	r3, 80176dc <_strtod_l+0x604>
 80176ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80176b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	4659      	mov	r1, fp
 80176ba:	dd0f      	ble.n	80176dc <_strtod_l+0x604>
 80176bc:	2b1f      	cmp	r3, #31
 80176be:	dd55      	ble.n	801776c <_strtod_l+0x694>
 80176c0:	2b34      	cmp	r3, #52	@ 0x34
 80176c2:	bfde      	ittt	le
 80176c4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80176c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80176cc:	4093      	lslle	r3, r2
 80176ce:	f04f 0a00 	mov.w	sl, #0
 80176d2:	bfcc      	ite	gt
 80176d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80176d8:	ea03 0b01 	andle.w	fp, r3, r1
 80176dc:	2200      	movs	r2, #0
 80176de:	2300      	movs	r3, #0
 80176e0:	4650      	mov	r0, sl
 80176e2:	4659      	mov	r1, fp
 80176e4:	f7e9 f9f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80176e8:	2800      	cmp	r0, #0
 80176ea:	d1a6      	bne.n	801763a <_strtod_l+0x562>
 80176ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80176ee:	9300      	str	r3, [sp, #0]
 80176f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80176f2:	9805      	ldr	r0, [sp, #20]
 80176f4:	462b      	mov	r3, r5
 80176f6:	463a      	mov	r2, r7
 80176f8:	f7ff f8c6 	bl	8016888 <__s2b>
 80176fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80176fe:	2800      	cmp	r0, #0
 8017700:	f43f af05 	beq.w	801750e <_strtod_l+0x436>
 8017704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017706:	2a00      	cmp	r2, #0
 8017708:	eba9 0308 	sub.w	r3, r9, r8
 801770c:	bfa8      	it	ge
 801770e:	2300      	movge	r3, #0
 8017710:	9312      	str	r3, [sp, #72]	@ 0x48
 8017712:	2400      	movs	r4, #0
 8017714:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017718:	9316      	str	r3, [sp, #88]	@ 0x58
 801771a:	46a0      	mov	r8, r4
 801771c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801771e:	9805      	ldr	r0, [sp, #20]
 8017720:	6859      	ldr	r1, [r3, #4]
 8017722:	f7ff f809 	bl	8016738 <_Balloc>
 8017726:	4681      	mov	r9, r0
 8017728:	2800      	cmp	r0, #0
 801772a:	f43f aef4 	beq.w	8017516 <_strtod_l+0x43e>
 801772e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017730:	691a      	ldr	r2, [r3, #16]
 8017732:	3202      	adds	r2, #2
 8017734:	f103 010c 	add.w	r1, r3, #12
 8017738:	0092      	lsls	r2, r2, #2
 801773a:	300c      	adds	r0, #12
 801773c:	f7fe f899 	bl	8015872 <memcpy>
 8017740:	ec4b ab10 	vmov	d0, sl, fp
 8017744:	9805      	ldr	r0, [sp, #20]
 8017746:	aa1c      	add	r2, sp, #112	@ 0x70
 8017748:	a91b      	add	r1, sp, #108	@ 0x6c
 801774a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801774e:	f7ff fbd7 	bl	8016f00 <__d2b>
 8017752:	901a      	str	r0, [sp, #104]	@ 0x68
 8017754:	2800      	cmp	r0, #0
 8017756:	f43f aede 	beq.w	8017516 <_strtod_l+0x43e>
 801775a:	9805      	ldr	r0, [sp, #20]
 801775c:	2101      	movs	r1, #1
 801775e:	f7ff f929 	bl	80169b4 <__i2b>
 8017762:	4680      	mov	r8, r0
 8017764:	b948      	cbnz	r0, 801777a <_strtod_l+0x6a2>
 8017766:	f04f 0800 	mov.w	r8, #0
 801776a:	e6d4      	b.n	8017516 <_strtod_l+0x43e>
 801776c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017770:	fa02 f303 	lsl.w	r3, r2, r3
 8017774:	ea03 0a0a 	and.w	sl, r3, sl
 8017778:	e7b0      	b.n	80176dc <_strtod_l+0x604>
 801777a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801777c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801777e:	2d00      	cmp	r5, #0
 8017780:	bfab      	itete	ge
 8017782:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8017784:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8017786:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8017788:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801778a:	bfac      	ite	ge
 801778c:	18ef      	addge	r7, r5, r3
 801778e:	1b5e      	sublt	r6, r3, r5
 8017790:	9b08      	ldr	r3, [sp, #32]
 8017792:	1aed      	subs	r5, r5, r3
 8017794:	4415      	add	r5, r2
 8017796:	4b66      	ldr	r3, [pc, #408]	@ (8017930 <_strtod_l+0x858>)
 8017798:	3d01      	subs	r5, #1
 801779a:	429d      	cmp	r5, r3
 801779c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80177a0:	da50      	bge.n	8017844 <_strtod_l+0x76c>
 80177a2:	1b5b      	subs	r3, r3, r5
 80177a4:	2b1f      	cmp	r3, #31
 80177a6:	eba2 0203 	sub.w	r2, r2, r3
 80177aa:	f04f 0101 	mov.w	r1, #1
 80177ae:	dc3d      	bgt.n	801782c <_strtod_l+0x754>
 80177b0:	fa01 f303 	lsl.w	r3, r1, r3
 80177b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80177b6:	2300      	movs	r3, #0
 80177b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80177ba:	18bd      	adds	r5, r7, r2
 80177bc:	9b08      	ldr	r3, [sp, #32]
 80177be:	42af      	cmp	r7, r5
 80177c0:	4416      	add	r6, r2
 80177c2:	441e      	add	r6, r3
 80177c4:	463b      	mov	r3, r7
 80177c6:	bfa8      	it	ge
 80177c8:	462b      	movge	r3, r5
 80177ca:	42b3      	cmp	r3, r6
 80177cc:	bfa8      	it	ge
 80177ce:	4633      	movge	r3, r6
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	bfc2      	ittt	gt
 80177d4:	1aed      	subgt	r5, r5, r3
 80177d6:	1af6      	subgt	r6, r6, r3
 80177d8:	1aff      	subgt	r7, r7, r3
 80177da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80177dc:	2b00      	cmp	r3, #0
 80177de:	dd16      	ble.n	801780e <_strtod_l+0x736>
 80177e0:	4641      	mov	r1, r8
 80177e2:	9805      	ldr	r0, [sp, #20]
 80177e4:	461a      	mov	r2, r3
 80177e6:	f7ff f9a5 	bl	8016b34 <__pow5mult>
 80177ea:	4680      	mov	r8, r0
 80177ec:	2800      	cmp	r0, #0
 80177ee:	d0ba      	beq.n	8017766 <_strtod_l+0x68e>
 80177f0:	4601      	mov	r1, r0
 80177f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80177f4:	9805      	ldr	r0, [sp, #20]
 80177f6:	f7ff f8f3 	bl	80169e0 <__multiply>
 80177fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80177fc:	2800      	cmp	r0, #0
 80177fe:	f43f ae8a 	beq.w	8017516 <_strtod_l+0x43e>
 8017802:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017804:	9805      	ldr	r0, [sp, #20]
 8017806:	f7fe ffd7 	bl	80167b8 <_Bfree>
 801780a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801780c:	931a      	str	r3, [sp, #104]	@ 0x68
 801780e:	2d00      	cmp	r5, #0
 8017810:	dc1d      	bgt.n	801784e <_strtod_l+0x776>
 8017812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017814:	2b00      	cmp	r3, #0
 8017816:	dd23      	ble.n	8017860 <_strtod_l+0x788>
 8017818:	4649      	mov	r1, r9
 801781a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801781c:	9805      	ldr	r0, [sp, #20]
 801781e:	f7ff f989 	bl	8016b34 <__pow5mult>
 8017822:	4681      	mov	r9, r0
 8017824:	b9e0      	cbnz	r0, 8017860 <_strtod_l+0x788>
 8017826:	f04f 0900 	mov.w	r9, #0
 801782a:	e674      	b.n	8017516 <_strtod_l+0x43e>
 801782c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8017830:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8017834:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8017838:	35e2      	adds	r5, #226	@ 0xe2
 801783a:	fa01 f305 	lsl.w	r3, r1, r5
 801783e:	9310      	str	r3, [sp, #64]	@ 0x40
 8017840:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017842:	e7ba      	b.n	80177ba <_strtod_l+0x6e2>
 8017844:	2300      	movs	r3, #0
 8017846:	9310      	str	r3, [sp, #64]	@ 0x40
 8017848:	2301      	movs	r3, #1
 801784a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801784c:	e7b5      	b.n	80177ba <_strtod_l+0x6e2>
 801784e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017850:	9805      	ldr	r0, [sp, #20]
 8017852:	462a      	mov	r2, r5
 8017854:	f7ff f9c8 	bl	8016be8 <__lshift>
 8017858:	901a      	str	r0, [sp, #104]	@ 0x68
 801785a:	2800      	cmp	r0, #0
 801785c:	d1d9      	bne.n	8017812 <_strtod_l+0x73a>
 801785e:	e65a      	b.n	8017516 <_strtod_l+0x43e>
 8017860:	2e00      	cmp	r6, #0
 8017862:	dd07      	ble.n	8017874 <_strtod_l+0x79c>
 8017864:	4649      	mov	r1, r9
 8017866:	9805      	ldr	r0, [sp, #20]
 8017868:	4632      	mov	r2, r6
 801786a:	f7ff f9bd 	bl	8016be8 <__lshift>
 801786e:	4681      	mov	r9, r0
 8017870:	2800      	cmp	r0, #0
 8017872:	d0d8      	beq.n	8017826 <_strtod_l+0x74e>
 8017874:	2f00      	cmp	r7, #0
 8017876:	dd08      	ble.n	801788a <_strtod_l+0x7b2>
 8017878:	4641      	mov	r1, r8
 801787a:	9805      	ldr	r0, [sp, #20]
 801787c:	463a      	mov	r2, r7
 801787e:	f7ff f9b3 	bl	8016be8 <__lshift>
 8017882:	4680      	mov	r8, r0
 8017884:	2800      	cmp	r0, #0
 8017886:	f43f ae46 	beq.w	8017516 <_strtod_l+0x43e>
 801788a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801788c:	9805      	ldr	r0, [sp, #20]
 801788e:	464a      	mov	r2, r9
 8017890:	f7ff fa32 	bl	8016cf8 <__mdiff>
 8017894:	4604      	mov	r4, r0
 8017896:	2800      	cmp	r0, #0
 8017898:	f43f ae3d 	beq.w	8017516 <_strtod_l+0x43e>
 801789c:	68c3      	ldr	r3, [r0, #12]
 801789e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80178a0:	2300      	movs	r3, #0
 80178a2:	60c3      	str	r3, [r0, #12]
 80178a4:	4641      	mov	r1, r8
 80178a6:	f7ff fa0b 	bl	8016cc0 <__mcmp>
 80178aa:	2800      	cmp	r0, #0
 80178ac:	da46      	bge.n	801793c <_strtod_l+0x864>
 80178ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80178b0:	ea53 030a 	orrs.w	r3, r3, sl
 80178b4:	d16c      	bne.n	8017990 <_strtod_l+0x8b8>
 80178b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d168      	bne.n	8017990 <_strtod_l+0x8b8>
 80178be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80178c2:	0d1b      	lsrs	r3, r3, #20
 80178c4:	051b      	lsls	r3, r3, #20
 80178c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80178ca:	d961      	bls.n	8017990 <_strtod_l+0x8b8>
 80178cc:	6963      	ldr	r3, [r4, #20]
 80178ce:	b913      	cbnz	r3, 80178d6 <_strtod_l+0x7fe>
 80178d0:	6923      	ldr	r3, [r4, #16]
 80178d2:	2b01      	cmp	r3, #1
 80178d4:	dd5c      	ble.n	8017990 <_strtod_l+0x8b8>
 80178d6:	4621      	mov	r1, r4
 80178d8:	2201      	movs	r2, #1
 80178da:	9805      	ldr	r0, [sp, #20]
 80178dc:	f7ff f984 	bl	8016be8 <__lshift>
 80178e0:	4641      	mov	r1, r8
 80178e2:	4604      	mov	r4, r0
 80178e4:	f7ff f9ec 	bl	8016cc0 <__mcmp>
 80178e8:	2800      	cmp	r0, #0
 80178ea:	dd51      	ble.n	8017990 <_strtod_l+0x8b8>
 80178ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80178f0:	9a08      	ldr	r2, [sp, #32]
 80178f2:	0d1b      	lsrs	r3, r3, #20
 80178f4:	051b      	lsls	r3, r3, #20
 80178f6:	2a00      	cmp	r2, #0
 80178f8:	d06b      	beq.n	80179d2 <_strtod_l+0x8fa>
 80178fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80178fe:	d868      	bhi.n	80179d2 <_strtod_l+0x8fa>
 8017900:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017904:	f67f ae9d 	bls.w	8017642 <_strtod_l+0x56a>
 8017908:	4b0a      	ldr	r3, [pc, #40]	@ (8017934 <_strtod_l+0x85c>)
 801790a:	4650      	mov	r0, sl
 801790c:	4659      	mov	r1, fp
 801790e:	2200      	movs	r2, #0
 8017910:	f7e8 fe7a 	bl	8000608 <__aeabi_dmul>
 8017914:	4b08      	ldr	r3, [pc, #32]	@ (8017938 <_strtod_l+0x860>)
 8017916:	400b      	ands	r3, r1
 8017918:	4682      	mov	sl, r0
 801791a:	468b      	mov	fp, r1
 801791c:	2b00      	cmp	r3, #0
 801791e:	f47f ae05 	bne.w	801752c <_strtod_l+0x454>
 8017922:	9a05      	ldr	r2, [sp, #20]
 8017924:	2322      	movs	r3, #34	@ 0x22
 8017926:	6013      	str	r3, [r2, #0]
 8017928:	e600      	b.n	801752c <_strtod_l+0x454>
 801792a:	bf00      	nop
 801792c:	0802e8f0 	.word	0x0802e8f0
 8017930:	fffffc02 	.word	0xfffffc02
 8017934:	39500000 	.word	0x39500000
 8017938:	7ff00000 	.word	0x7ff00000
 801793c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8017940:	d165      	bne.n	8017a0e <_strtod_l+0x936>
 8017942:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017948:	b35a      	cbz	r2, 80179a2 <_strtod_l+0x8ca>
 801794a:	4a9f      	ldr	r2, [pc, #636]	@ (8017bc8 <_strtod_l+0xaf0>)
 801794c:	4293      	cmp	r3, r2
 801794e:	d12b      	bne.n	80179a8 <_strtod_l+0x8d0>
 8017950:	9b08      	ldr	r3, [sp, #32]
 8017952:	4651      	mov	r1, sl
 8017954:	b303      	cbz	r3, 8017998 <_strtod_l+0x8c0>
 8017956:	4b9d      	ldr	r3, [pc, #628]	@ (8017bcc <_strtod_l+0xaf4>)
 8017958:	465a      	mov	r2, fp
 801795a:	4013      	ands	r3, r2
 801795c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017964:	d81b      	bhi.n	801799e <_strtod_l+0x8c6>
 8017966:	0d1b      	lsrs	r3, r3, #20
 8017968:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801796c:	fa02 f303 	lsl.w	r3, r2, r3
 8017970:	4299      	cmp	r1, r3
 8017972:	d119      	bne.n	80179a8 <_strtod_l+0x8d0>
 8017974:	4b96      	ldr	r3, [pc, #600]	@ (8017bd0 <_strtod_l+0xaf8>)
 8017976:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017978:	429a      	cmp	r2, r3
 801797a:	d102      	bne.n	8017982 <_strtod_l+0x8aa>
 801797c:	3101      	adds	r1, #1
 801797e:	f43f adca 	beq.w	8017516 <_strtod_l+0x43e>
 8017982:	4b92      	ldr	r3, [pc, #584]	@ (8017bcc <_strtod_l+0xaf4>)
 8017984:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017986:	401a      	ands	r2, r3
 8017988:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801798c:	f04f 0a00 	mov.w	sl, #0
 8017990:	9b08      	ldr	r3, [sp, #32]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d1b8      	bne.n	8017908 <_strtod_l+0x830>
 8017996:	e5c9      	b.n	801752c <_strtod_l+0x454>
 8017998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801799c:	e7e8      	b.n	8017970 <_strtod_l+0x898>
 801799e:	4613      	mov	r3, r2
 80179a0:	e7e6      	b.n	8017970 <_strtod_l+0x898>
 80179a2:	ea53 030a 	orrs.w	r3, r3, sl
 80179a6:	d0a1      	beq.n	80178ec <_strtod_l+0x814>
 80179a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80179aa:	b1db      	cbz	r3, 80179e4 <_strtod_l+0x90c>
 80179ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80179ae:	4213      	tst	r3, r2
 80179b0:	d0ee      	beq.n	8017990 <_strtod_l+0x8b8>
 80179b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80179b4:	9a08      	ldr	r2, [sp, #32]
 80179b6:	4650      	mov	r0, sl
 80179b8:	4659      	mov	r1, fp
 80179ba:	b1bb      	cbz	r3, 80179ec <_strtod_l+0x914>
 80179bc:	f7ff fb6e 	bl	801709c <sulp>
 80179c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80179c4:	ec53 2b10 	vmov	r2, r3, d0
 80179c8:	f7e8 fc68 	bl	800029c <__adddf3>
 80179cc:	4682      	mov	sl, r0
 80179ce:	468b      	mov	fp, r1
 80179d0:	e7de      	b.n	8017990 <_strtod_l+0x8b8>
 80179d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80179d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80179da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80179de:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80179e2:	e7d5      	b.n	8017990 <_strtod_l+0x8b8>
 80179e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80179e6:	ea13 0f0a 	tst.w	r3, sl
 80179ea:	e7e1      	b.n	80179b0 <_strtod_l+0x8d8>
 80179ec:	f7ff fb56 	bl	801709c <sulp>
 80179f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80179f4:	ec53 2b10 	vmov	r2, r3, d0
 80179f8:	f7e8 fc4e 	bl	8000298 <__aeabi_dsub>
 80179fc:	2200      	movs	r2, #0
 80179fe:	2300      	movs	r3, #0
 8017a00:	4682      	mov	sl, r0
 8017a02:	468b      	mov	fp, r1
 8017a04:	f7e9 f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8017a08:	2800      	cmp	r0, #0
 8017a0a:	d0c1      	beq.n	8017990 <_strtod_l+0x8b8>
 8017a0c:	e619      	b.n	8017642 <_strtod_l+0x56a>
 8017a0e:	4641      	mov	r1, r8
 8017a10:	4620      	mov	r0, r4
 8017a12:	f7ff facd 	bl	8016fb0 <__ratio>
 8017a16:	ec57 6b10 	vmov	r6, r7, d0
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017a20:	4630      	mov	r0, r6
 8017a22:	4639      	mov	r1, r7
 8017a24:	f7e9 f86c 	bl	8000b00 <__aeabi_dcmple>
 8017a28:	2800      	cmp	r0, #0
 8017a2a:	d06f      	beq.n	8017b0c <_strtod_l+0xa34>
 8017a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d17a      	bne.n	8017b28 <_strtod_l+0xa50>
 8017a32:	f1ba 0f00 	cmp.w	sl, #0
 8017a36:	d158      	bne.n	8017aea <_strtod_l+0xa12>
 8017a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d15a      	bne.n	8017af8 <_strtod_l+0xa20>
 8017a42:	4b64      	ldr	r3, [pc, #400]	@ (8017bd4 <_strtod_l+0xafc>)
 8017a44:	2200      	movs	r2, #0
 8017a46:	4630      	mov	r0, r6
 8017a48:	4639      	mov	r1, r7
 8017a4a:	f7e9 f84f 	bl	8000aec <__aeabi_dcmplt>
 8017a4e:	2800      	cmp	r0, #0
 8017a50:	d159      	bne.n	8017b06 <_strtod_l+0xa2e>
 8017a52:	4630      	mov	r0, r6
 8017a54:	4639      	mov	r1, r7
 8017a56:	4b60      	ldr	r3, [pc, #384]	@ (8017bd8 <_strtod_l+0xb00>)
 8017a58:	2200      	movs	r2, #0
 8017a5a:	f7e8 fdd5 	bl	8000608 <__aeabi_dmul>
 8017a5e:	4606      	mov	r6, r0
 8017a60:	460f      	mov	r7, r1
 8017a62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8017a66:	9606      	str	r6, [sp, #24]
 8017a68:	9307      	str	r3, [sp, #28]
 8017a6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017a6e:	4d57      	ldr	r5, [pc, #348]	@ (8017bcc <_strtod_l+0xaf4>)
 8017a70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a76:	401d      	ands	r5, r3
 8017a78:	4b58      	ldr	r3, [pc, #352]	@ (8017bdc <_strtod_l+0xb04>)
 8017a7a:	429d      	cmp	r5, r3
 8017a7c:	f040 80b2 	bne.w	8017be4 <_strtod_l+0xb0c>
 8017a80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8017a86:	ec4b ab10 	vmov	d0, sl, fp
 8017a8a:	f7ff f9c9 	bl	8016e20 <__ulp>
 8017a8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017a92:	ec51 0b10 	vmov	r0, r1, d0
 8017a96:	f7e8 fdb7 	bl	8000608 <__aeabi_dmul>
 8017a9a:	4652      	mov	r2, sl
 8017a9c:	465b      	mov	r3, fp
 8017a9e:	f7e8 fbfd 	bl	800029c <__adddf3>
 8017aa2:	460b      	mov	r3, r1
 8017aa4:	4949      	ldr	r1, [pc, #292]	@ (8017bcc <_strtod_l+0xaf4>)
 8017aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8017be0 <_strtod_l+0xb08>)
 8017aa8:	4019      	ands	r1, r3
 8017aaa:	4291      	cmp	r1, r2
 8017aac:	4682      	mov	sl, r0
 8017aae:	d942      	bls.n	8017b36 <_strtod_l+0xa5e>
 8017ab0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017ab2:	4b47      	ldr	r3, [pc, #284]	@ (8017bd0 <_strtod_l+0xaf8>)
 8017ab4:	429a      	cmp	r2, r3
 8017ab6:	d103      	bne.n	8017ac0 <_strtod_l+0x9e8>
 8017ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017aba:	3301      	adds	r3, #1
 8017abc:	f43f ad2b 	beq.w	8017516 <_strtod_l+0x43e>
 8017ac0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017bd0 <_strtod_l+0xaf8>
 8017ac4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8017ac8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017aca:	9805      	ldr	r0, [sp, #20]
 8017acc:	f7fe fe74 	bl	80167b8 <_Bfree>
 8017ad0:	9805      	ldr	r0, [sp, #20]
 8017ad2:	4649      	mov	r1, r9
 8017ad4:	f7fe fe70 	bl	80167b8 <_Bfree>
 8017ad8:	9805      	ldr	r0, [sp, #20]
 8017ada:	4641      	mov	r1, r8
 8017adc:	f7fe fe6c 	bl	80167b8 <_Bfree>
 8017ae0:	9805      	ldr	r0, [sp, #20]
 8017ae2:	4621      	mov	r1, r4
 8017ae4:	f7fe fe68 	bl	80167b8 <_Bfree>
 8017ae8:	e618      	b.n	801771c <_strtod_l+0x644>
 8017aea:	f1ba 0f01 	cmp.w	sl, #1
 8017aee:	d103      	bne.n	8017af8 <_strtod_l+0xa20>
 8017af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	f43f ada5 	beq.w	8017642 <_strtod_l+0x56a>
 8017af8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017ba8 <_strtod_l+0xad0>
 8017afc:	4f35      	ldr	r7, [pc, #212]	@ (8017bd4 <_strtod_l+0xafc>)
 8017afe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017b02:	2600      	movs	r6, #0
 8017b04:	e7b1      	b.n	8017a6a <_strtod_l+0x992>
 8017b06:	4f34      	ldr	r7, [pc, #208]	@ (8017bd8 <_strtod_l+0xb00>)
 8017b08:	2600      	movs	r6, #0
 8017b0a:	e7aa      	b.n	8017a62 <_strtod_l+0x98a>
 8017b0c:	4b32      	ldr	r3, [pc, #200]	@ (8017bd8 <_strtod_l+0xb00>)
 8017b0e:	4630      	mov	r0, r6
 8017b10:	4639      	mov	r1, r7
 8017b12:	2200      	movs	r2, #0
 8017b14:	f7e8 fd78 	bl	8000608 <__aeabi_dmul>
 8017b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b1a:	4606      	mov	r6, r0
 8017b1c:	460f      	mov	r7, r1
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d09f      	beq.n	8017a62 <_strtod_l+0x98a>
 8017b22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8017b26:	e7a0      	b.n	8017a6a <_strtod_l+0x992>
 8017b28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017bb0 <_strtod_l+0xad8>
 8017b2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017b30:	ec57 6b17 	vmov	r6, r7, d7
 8017b34:	e799      	b.n	8017a6a <_strtod_l+0x992>
 8017b36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8017b3a:	9b08      	ldr	r3, [sp, #32]
 8017b3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d1c1      	bne.n	8017ac8 <_strtod_l+0x9f0>
 8017b44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017b48:	0d1b      	lsrs	r3, r3, #20
 8017b4a:	051b      	lsls	r3, r3, #20
 8017b4c:	429d      	cmp	r5, r3
 8017b4e:	d1bb      	bne.n	8017ac8 <_strtod_l+0x9f0>
 8017b50:	4630      	mov	r0, r6
 8017b52:	4639      	mov	r1, r7
 8017b54:	f7e9 f8b8 	bl	8000cc8 <__aeabi_d2lz>
 8017b58:	f7e8 fd28 	bl	80005ac <__aeabi_l2d>
 8017b5c:	4602      	mov	r2, r0
 8017b5e:	460b      	mov	r3, r1
 8017b60:	4630      	mov	r0, r6
 8017b62:	4639      	mov	r1, r7
 8017b64:	f7e8 fb98 	bl	8000298 <__aeabi_dsub>
 8017b68:	460b      	mov	r3, r1
 8017b6a:	4602      	mov	r2, r0
 8017b6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017b70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8017b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b76:	ea46 060a 	orr.w	r6, r6, sl
 8017b7a:	431e      	orrs	r6, r3
 8017b7c:	d06f      	beq.n	8017c5e <_strtod_l+0xb86>
 8017b7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017bb8 <_strtod_l+0xae0>)
 8017b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b84:	f7e8 ffb2 	bl	8000aec <__aeabi_dcmplt>
 8017b88:	2800      	cmp	r0, #0
 8017b8a:	f47f accf 	bne.w	801752c <_strtod_l+0x454>
 8017b8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8017bc0 <_strtod_l+0xae8>)
 8017b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017b98:	f7e8 ffc6 	bl	8000b28 <__aeabi_dcmpgt>
 8017b9c:	2800      	cmp	r0, #0
 8017b9e:	d093      	beq.n	8017ac8 <_strtod_l+0x9f0>
 8017ba0:	e4c4      	b.n	801752c <_strtod_l+0x454>
 8017ba2:	bf00      	nop
 8017ba4:	f3af 8000 	nop.w
 8017ba8:	00000000 	.word	0x00000000
 8017bac:	bff00000 	.word	0xbff00000
 8017bb0:	00000000 	.word	0x00000000
 8017bb4:	3ff00000 	.word	0x3ff00000
 8017bb8:	94a03595 	.word	0x94a03595
 8017bbc:	3fdfffff 	.word	0x3fdfffff
 8017bc0:	35afe535 	.word	0x35afe535
 8017bc4:	3fe00000 	.word	0x3fe00000
 8017bc8:	000fffff 	.word	0x000fffff
 8017bcc:	7ff00000 	.word	0x7ff00000
 8017bd0:	7fefffff 	.word	0x7fefffff
 8017bd4:	3ff00000 	.word	0x3ff00000
 8017bd8:	3fe00000 	.word	0x3fe00000
 8017bdc:	7fe00000 	.word	0x7fe00000
 8017be0:	7c9fffff 	.word	0x7c9fffff
 8017be4:	9b08      	ldr	r3, [sp, #32]
 8017be6:	b323      	cbz	r3, 8017c32 <_strtod_l+0xb5a>
 8017be8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8017bec:	d821      	bhi.n	8017c32 <_strtod_l+0xb5a>
 8017bee:	a328      	add	r3, pc, #160	@ (adr r3, 8017c90 <_strtod_l+0xbb8>)
 8017bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bf4:	4630      	mov	r0, r6
 8017bf6:	4639      	mov	r1, r7
 8017bf8:	f7e8 ff82 	bl	8000b00 <__aeabi_dcmple>
 8017bfc:	b1a0      	cbz	r0, 8017c28 <_strtod_l+0xb50>
 8017bfe:	4639      	mov	r1, r7
 8017c00:	4630      	mov	r0, r6
 8017c02:	f7e8 ffd9 	bl	8000bb8 <__aeabi_d2uiz>
 8017c06:	2801      	cmp	r0, #1
 8017c08:	bf38      	it	cc
 8017c0a:	2001      	movcc	r0, #1
 8017c0c:	f7e8 fc82 	bl	8000514 <__aeabi_ui2d>
 8017c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c12:	4606      	mov	r6, r0
 8017c14:	460f      	mov	r7, r1
 8017c16:	b9fb      	cbnz	r3, 8017c58 <_strtod_l+0xb80>
 8017c18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017c1c:	9014      	str	r0, [sp, #80]	@ 0x50
 8017c1e:	9315      	str	r3, [sp, #84]	@ 0x54
 8017c20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8017c24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017c28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017c2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8017c2e:	1b5b      	subs	r3, r3, r5
 8017c30:	9311      	str	r3, [sp, #68]	@ 0x44
 8017c32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017c36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8017c3a:	f7ff f8f1 	bl	8016e20 <__ulp>
 8017c3e:	4650      	mov	r0, sl
 8017c40:	ec53 2b10 	vmov	r2, r3, d0
 8017c44:	4659      	mov	r1, fp
 8017c46:	f7e8 fcdf 	bl	8000608 <__aeabi_dmul>
 8017c4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8017c4e:	f7e8 fb25 	bl	800029c <__adddf3>
 8017c52:	4682      	mov	sl, r0
 8017c54:	468b      	mov	fp, r1
 8017c56:	e770      	b.n	8017b3a <_strtod_l+0xa62>
 8017c58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8017c5c:	e7e0      	b.n	8017c20 <_strtod_l+0xb48>
 8017c5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8017c98 <_strtod_l+0xbc0>)
 8017c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c64:	f7e8 ff42 	bl	8000aec <__aeabi_dcmplt>
 8017c68:	e798      	b.n	8017b9c <_strtod_l+0xac4>
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017c6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017c70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017c72:	6013      	str	r3, [r2, #0]
 8017c74:	f7ff ba6d 	b.w	8017152 <_strtod_l+0x7a>
 8017c78:	2a65      	cmp	r2, #101	@ 0x65
 8017c7a:	f43f ab66 	beq.w	801734a <_strtod_l+0x272>
 8017c7e:	2a45      	cmp	r2, #69	@ 0x45
 8017c80:	f43f ab63 	beq.w	801734a <_strtod_l+0x272>
 8017c84:	2301      	movs	r3, #1
 8017c86:	f7ff bb9e 	b.w	80173c6 <_strtod_l+0x2ee>
 8017c8a:	bf00      	nop
 8017c8c:	f3af 8000 	nop.w
 8017c90:	ffc00000 	.word	0xffc00000
 8017c94:	41dfffff 	.word	0x41dfffff
 8017c98:	94a03595 	.word	0x94a03595
 8017c9c:	3fcfffff 	.word	0x3fcfffff

08017ca0 <_strtod_r>:
 8017ca0:	4b01      	ldr	r3, [pc, #4]	@ (8017ca8 <_strtod_r+0x8>)
 8017ca2:	f7ff ba19 	b.w	80170d8 <_strtod_l>
 8017ca6:	bf00      	nop
 8017ca8:	20000190 	.word	0x20000190

08017cac <_strtol_l.constprop.0>:
 8017cac:	2b24      	cmp	r3, #36	@ 0x24
 8017cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cb2:	4686      	mov	lr, r0
 8017cb4:	4690      	mov	r8, r2
 8017cb6:	d801      	bhi.n	8017cbc <_strtol_l.constprop.0+0x10>
 8017cb8:	2b01      	cmp	r3, #1
 8017cba:	d106      	bne.n	8017cca <_strtol_l.constprop.0+0x1e>
 8017cbc:	f7fd fdac 	bl	8015818 <__errno>
 8017cc0:	2316      	movs	r3, #22
 8017cc2:	6003      	str	r3, [r0, #0]
 8017cc4:	2000      	movs	r0, #0
 8017cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cca:	4834      	ldr	r0, [pc, #208]	@ (8017d9c <_strtol_l.constprop.0+0xf0>)
 8017ccc:	460d      	mov	r5, r1
 8017cce:	462a      	mov	r2, r5
 8017cd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017cd4:	5d06      	ldrb	r6, [r0, r4]
 8017cd6:	f016 0608 	ands.w	r6, r6, #8
 8017cda:	d1f8      	bne.n	8017cce <_strtol_l.constprop.0+0x22>
 8017cdc:	2c2d      	cmp	r4, #45	@ 0x2d
 8017cde:	d12d      	bne.n	8017d3c <_strtol_l.constprop.0+0x90>
 8017ce0:	782c      	ldrb	r4, [r5, #0]
 8017ce2:	2601      	movs	r6, #1
 8017ce4:	1c95      	adds	r5, r2, #2
 8017ce6:	f033 0210 	bics.w	r2, r3, #16
 8017cea:	d109      	bne.n	8017d00 <_strtol_l.constprop.0+0x54>
 8017cec:	2c30      	cmp	r4, #48	@ 0x30
 8017cee:	d12a      	bne.n	8017d46 <_strtol_l.constprop.0+0x9a>
 8017cf0:	782a      	ldrb	r2, [r5, #0]
 8017cf2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017cf6:	2a58      	cmp	r2, #88	@ 0x58
 8017cf8:	d125      	bne.n	8017d46 <_strtol_l.constprop.0+0x9a>
 8017cfa:	786c      	ldrb	r4, [r5, #1]
 8017cfc:	2310      	movs	r3, #16
 8017cfe:	3502      	adds	r5, #2
 8017d00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017d04:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8017d08:	2200      	movs	r2, #0
 8017d0a:	fbbc f9f3 	udiv	r9, ip, r3
 8017d0e:	4610      	mov	r0, r2
 8017d10:	fb03 ca19 	mls	sl, r3, r9, ip
 8017d14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017d18:	2f09      	cmp	r7, #9
 8017d1a:	d81b      	bhi.n	8017d54 <_strtol_l.constprop.0+0xa8>
 8017d1c:	463c      	mov	r4, r7
 8017d1e:	42a3      	cmp	r3, r4
 8017d20:	dd27      	ble.n	8017d72 <_strtol_l.constprop.0+0xc6>
 8017d22:	1c57      	adds	r7, r2, #1
 8017d24:	d007      	beq.n	8017d36 <_strtol_l.constprop.0+0x8a>
 8017d26:	4581      	cmp	r9, r0
 8017d28:	d320      	bcc.n	8017d6c <_strtol_l.constprop.0+0xc0>
 8017d2a:	d101      	bne.n	8017d30 <_strtol_l.constprop.0+0x84>
 8017d2c:	45a2      	cmp	sl, r4
 8017d2e:	db1d      	blt.n	8017d6c <_strtol_l.constprop.0+0xc0>
 8017d30:	fb00 4003 	mla	r0, r0, r3, r4
 8017d34:	2201      	movs	r2, #1
 8017d36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d3a:	e7eb      	b.n	8017d14 <_strtol_l.constprop.0+0x68>
 8017d3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8017d3e:	bf04      	itt	eq
 8017d40:	782c      	ldrbeq	r4, [r5, #0]
 8017d42:	1c95      	addeq	r5, r2, #2
 8017d44:	e7cf      	b.n	8017ce6 <_strtol_l.constprop.0+0x3a>
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d1da      	bne.n	8017d00 <_strtol_l.constprop.0+0x54>
 8017d4a:	2c30      	cmp	r4, #48	@ 0x30
 8017d4c:	bf0c      	ite	eq
 8017d4e:	2308      	moveq	r3, #8
 8017d50:	230a      	movne	r3, #10
 8017d52:	e7d5      	b.n	8017d00 <_strtol_l.constprop.0+0x54>
 8017d54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017d58:	2f19      	cmp	r7, #25
 8017d5a:	d801      	bhi.n	8017d60 <_strtol_l.constprop.0+0xb4>
 8017d5c:	3c37      	subs	r4, #55	@ 0x37
 8017d5e:	e7de      	b.n	8017d1e <_strtol_l.constprop.0+0x72>
 8017d60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017d64:	2f19      	cmp	r7, #25
 8017d66:	d804      	bhi.n	8017d72 <_strtol_l.constprop.0+0xc6>
 8017d68:	3c57      	subs	r4, #87	@ 0x57
 8017d6a:	e7d8      	b.n	8017d1e <_strtol_l.constprop.0+0x72>
 8017d6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017d70:	e7e1      	b.n	8017d36 <_strtol_l.constprop.0+0x8a>
 8017d72:	1c53      	adds	r3, r2, #1
 8017d74:	d108      	bne.n	8017d88 <_strtol_l.constprop.0+0xdc>
 8017d76:	2322      	movs	r3, #34	@ 0x22
 8017d78:	f8ce 3000 	str.w	r3, [lr]
 8017d7c:	4660      	mov	r0, ip
 8017d7e:	f1b8 0f00 	cmp.w	r8, #0
 8017d82:	d0a0      	beq.n	8017cc6 <_strtol_l.constprop.0+0x1a>
 8017d84:	1e69      	subs	r1, r5, #1
 8017d86:	e006      	b.n	8017d96 <_strtol_l.constprop.0+0xea>
 8017d88:	b106      	cbz	r6, 8017d8c <_strtol_l.constprop.0+0xe0>
 8017d8a:	4240      	negs	r0, r0
 8017d8c:	f1b8 0f00 	cmp.w	r8, #0
 8017d90:	d099      	beq.n	8017cc6 <_strtol_l.constprop.0+0x1a>
 8017d92:	2a00      	cmp	r2, #0
 8017d94:	d1f6      	bne.n	8017d84 <_strtol_l.constprop.0+0xd8>
 8017d96:	f8c8 1000 	str.w	r1, [r8]
 8017d9a:	e794      	b.n	8017cc6 <_strtol_l.constprop.0+0x1a>
 8017d9c:	0802e919 	.word	0x0802e919

08017da0 <_strtol_r>:
 8017da0:	f7ff bf84 	b.w	8017cac <_strtol_l.constprop.0>

08017da4 <__ssputs_r>:
 8017da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017da8:	688e      	ldr	r6, [r1, #8]
 8017daa:	461f      	mov	r7, r3
 8017dac:	42be      	cmp	r6, r7
 8017dae:	680b      	ldr	r3, [r1, #0]
 8017db0:	4682      	mov	sl, r0
 8017db2:	460c      	mov	r4, r1
 8017db4:	4690      	mov	r8, r2
 8017db6:	d82d      	bhi.n	8017e14 <__ssputs_r+0x70>
 8017db8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017dbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017dc0:	d026      	beq.n	8017e10 <__ssputs_r+0x6c>
 8017dc2:	6965      	ldr	r5, [r4, #20]
 8017dc4:	6909      	ldr	r1, [r1, #16]
 8017dc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017dca:	eba3 0901 	sub.w	r9, r3, r1
 8017dce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017dd2:	1c7b      	adds	r3, r7, #1
 8017dd4:	444b      	add	r3, r9
 8017dd6:	106d      	asrs	r5, r5, #1
 8017dd8:	429d      	cmp	r5, r3
 8017dda:	bf38      	it	cc
 8017ddc:	461d      	movcc	r5, r3
 8017dde:	0553      	lsls	r3, r2, #21
 8017de0:	d527      	bpl.n	8017e32 <__ssputs_r+0x8e>
 8017de2:	4629      	mov	r1, r5
 8017de4:	f7fe fc1c 	bl	8016620 <_malloc_r>
 8017de8:	4606      	mov	r6, r0
 8017dea:	b360      	cbz	r0, 8017e46 <__ssputs_r+0xa2>
 8017dec:	6921      	ldr	r1, [r4, #16]
 8017dee:	464a      	mov	r2, r9
 8017df0:	f7fd fd3f 	bl	8015872 <memcpy>
 8017df4:	89a3      	ldrh	r3, [r4, #12]
 8017df6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017dfe:	81a3      	strh	r3, [r4, #12]
 8017e00:	6126      	str	r6, [r4, #16]
 8017e02:	6165      	str	r5, [r4, #20]
 8017e04:	444e      	add	r6, r9
 8017e06:	eba5 0509 	sub.w	r5, r5, r9
 8017e0a:	6026      	str	r6, [r4, #0]
 8017e0c:	60a5      	str	r5, [r4, #8]
 8017e0e:	463e      	mov	r6, r7
 8017e10:	42be      	cmp	r6, r7
 8017e12:	d900      	bls.n	8017e16 <__ssputs_r+0x72>
 8017e14:	463e      	mov	r6, r7
 8017e16:	6820      	ldr	r0, [r4, #0]
 8017e18:	4632      	mov	r2, r6
 8017e1a:	4641      	mov	r1, r8
 8017e1c:	f000 fa28 	bl	8018270 <memmove>
 8017e20:	68a3      	ldr	r3, [r4, #8]
 8017e22:	1b9b      	subs	r3, r3, r6
 8017e24:	60a3      	str	r3, [r4, #8]
 8017e26:	6823      	ldr	r3, [r4, #0]
 8017e28:	4433      	add	r3, r6
 8017e2a:	6023      	str	r3, [r4, #0]
 8017e2c:	2000      	movs	r0, #0
 8017e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e32:	462a      	mov	r2, r5
 8017e34:	f000 fe01 	bl	8018a3a <_realloc_r>
 8017e38:	4606      	mov	r6, r0
 8017e3a:	2800      	cmp	r0, #0
 8017e3c:	d1e0      	bne.n	8017e00 <__ssputs_r+0x5c>
 8017e3e:	6921      	ldr	r1, [r4, #16]
 8017e40:	4650      	mov	r0, sl
 8017e42:	f7fe fb79 	bl	8016538 <_free_r>
 8017e46:	230c      	movs	r3, #12
 8017e48:	f8ca 3000 	str.w	r3, [sl]
 8017e4c:	89a3      	ldrh	r3, [r4, #12]
 8017e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e52:	81a3      	strh	r3, [r4, #12]
 8017e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e58:	e7e9      	b.n	8017e2e <__ssputs_r+0x8a>
	...

08017e5c <_svfiprintf_r>:
 8017e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e60:	4698      	mov	r8, r3
 8017e62:	898b      	ldrh	r3, [r1, #12]
 8017e64:	061b      	lsls	r3, r3, #24
 8017e66:	b09d      	sub	sp, #116	@ 0x74
 8017e68:	4607      	mov	r7, r0
 8017e6a:	460d      	mov	r5, r1
 8017e6c:	4614      	mov	r4, r2
 8017e6e:	d510      	bpl.n	8017e92 <_svfiprintf_r+0x36>
 8017e70:	690b      	ldr	r3, [r1, #16]
 8017e72:	b973      	cbnz	r3, 8017e92 <_svfiprintf_r+0x36>
 8017e74:	2140      	movs	r1, #64	@ 0x40
 8017e76:	f7fe fbd3 	bl	8016620 <_malloc_r>
 8017e7a:	6028      	str	r0, [r5, #0]
 8017e7c:	6128      	str	r0, [r5, #16]
 8017e7e:	b930      	cbnz	r0, 8017e8e <_svfiprintf_r+0x32>
 8017e80:	230c      	movs	r3, #12
 8017e82:	603b      	str	r3, [r7, #0]
 8017e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e88:	b01d      	add	sp, #116	@ 0x74
 8017e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e8e:	2340      	movs	r3, #64	@ 0x40
 8017e90:	616b      	str	r3, [r5, #20]
 8017e92:	2300      	movs	r3, #0
 8017e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e96:	2320      	movs	r3, #32
 8017e98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ea0:	2330      	movs	r3, #48	@ 0x30
 8017ea2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018040 <_svfiprintf_r+0x1e4>
 8017ea6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017eaa:	f04f 0901 	mov.w	r9, #1
 8017eae:	4623      	mov	r3, r4
 8017eb0:	469a      	mov	sl, r3
 8017eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017eb6:	b10a      	cbz	r2, 8017ebc <_svfiprintf_r+0x60>
 8017eb8:	2a25      	cmp	r2, #37	@ 0x25
 8017eba:	d1f9      	bne.n	8017eb0 <_svfiprintf_r+0x54>
 8017ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8017ec0:	d00b      	beq.n	8017eda <_svfiprintf_r+0x7e>
 8017ec2:	465b      	mov	r3, fp
 8017ec4:	4622      	mov	r2, r4
 8017ec6:	4629      	mov	r1, r5
 8017ec8:	4638      	mov	r0, r7
 8017eca:	f7ff ff6b 	bl	8017da4 <__ssputs_r>
 8017ece:	3001      	adds	r0, #1
 8017ed0:	f000 80a7 	beq.w	8018022 <_svfiprintf_r+0x1c6>
 8017ed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ed6:	445a      	add	r2, fp
 8017ed8:	9209      	str	r2, [sp, #36]	@ 0x24
 8017eda:	f89a 3000 	ldrb.w	r3, [sl]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	f000 809f 	beq.w	8018022 <_svfiprintf_r+0x1c6>
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017eee:	f10a 0a01 	add.w	sl, sl, #1
 8017ef2:	9304      	str	r3, [sp, #16]
 8017ef4:	9307      	str	r3, [sp, #28]
 8017ef6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017efa:	931a      	str	r3, [sp, #104]	@ 0x68
 8017efc:	4654      	mov	r4, sl
 8017efe:	2205      	movs	r2, #5
 8017f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f04:	484e      	ldr	r0, [pc, #312]	@ (8018040 <_svfiprintf_r+0x1e4>)
 8017f06:	f7e8 f96b 	bl	80001e0 <memchr>
 8017f0a:	9a04      	ldr	r2, [sp, #16]
 8017f0c:	b9d8      	cbnz	r0, 8017f46 <_svfiprintf_r+0xea>
 8017f0e:	06d0      	lsls	r0, r2, #27
 8017f10:	bf44      	itt	mi
 8017f12:	2320      	movmi	r3, #32
 8017f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f18:	0711      	lsls	r1, r2, #28
 8017f1a:	bf44      	itt	mi
 8017f1c:	232b      	movmi	r3, #43	@ 0x2b
 8017f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f22:	f89a 3000 	ldrb.w	r3, [sl]
 8017f26:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f28:	d015      	beq.n	8017f56 <_svfiprintf_r+0xfa>
 8017f2a:	9a07      	ldr	r2, [sp, #28]
 8017f2c:	4654      	mov	r4, sl
 8017f2e:	2000      	movs	r0, #0
 8017f30:	f04f 0c0a 	mov.w	ip, #10
 8017f34:	4621      	mov	r1, r4
 8017f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f3a:	3b30      	subs	r3, #48	@ 0x30
 8017f3c:	2b09      	cmp	r3, #9
 8017f3e:	d94b      	bls.n	8017fd8 <_svfiprintf_r+0x17c>
 8017f40:	b1b0      	cbz	r0, 8017f70 <_svfiprintf_r+0x114>
 8017f42:	9207      	str	r2, [sp, #28]
 8017f44:	e014      	b.n	8017f70 <_svfiprintf_r+0x114>
 8017f46:	eba0 0308 	sub.w	r3, r0, r8
 8017f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8017f4e:	4313      	orrs	r3, r2
 8017f50:	9304      	str	r3, [sp, #16]
 8017f52:	46a2      	mov	sl, r4
 8017f54:	e7d2      	b.n	8017efc <_svfiprintf_r+0xa0>
 8017f56:	9b03      	ldr	r3, [sp, #12]
 8017f58:	1d19      	adds	r1, r3, #4
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	9103      	str	r1, [sp, #12]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	bfbb      	ittet	lt
 8017f62:	425b      	neglt	r3, r3
 8017f64:	f042 0202 	orrlt.w	r2, r2, #2
 8017f68:	9307      	strge	r3, [sp, #28]
 8017f6a:	9307      	strlt	r3, [sp, #28]
 8017f6c:	bfb8      	it	lt
 8017f6e:	9204      	strlt	r2, [sp, #16]
 8017f70:	7823      	ldrb	r3, [r4, #0]
 8017f72:	2b2e      	cmp	r3, #46	@ 0x2e
 8017f74:	d10a      	bne.n	8017f8c <_svfiprintf_r+0x130>
 8017f76:	7863      	ldrb	r3, [r4, #1]
 8017f78:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f7a:	d132      	bne.n	8017fe2 <_svfiprintf_r+0x186>
 8017f7c:	9b03      	ldr	r3, [sp, #12]
 8017f7e:	1d1a      	adds	r2, r3, #4
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	9203      	str	r2, [sp, #12]
 8017f84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017f88:	3402      	adds	r4, #2
 8017f8a:	9305      	str	r3, [sp, #20]
 8017f8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018050 <_svfiprintf_r+0x1f4>
 8017f90:	7821      	ldrb	r1, [r4, #0]
 8017f92:	2203      	movs	r2, #3
 8017f94:	4650      	mov	r0, sl
 8017f96:	f7e8 f923 	bl	80001e0 <memchr>
 8017f9a:	b138      	cbz	r0, 8017fac <_svfiprintf_r+0x150>
 8017f9c:	9b04      	ldr	r3, [sp, #16]
 8017f9e:	eba0 000a 	sub.w	r0, r0, sl
 8017fa2:	2240      	movs	r2, #64	@ 0x40
 8017fa4:	4082      	lsls	r2, r0
 8017fa6:	4313      	orrs	r3, r2
 8017fa8:	3401      	adds	r4, #1
 8017faa:	9304      	str	r3, [sp, #16]
 8017fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fb0:	4824      	ldr	r0, [pc, #144]	@ (8018044 <_svfiprintf_r+0x1e8>)
 8017fb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017fb6:	2206      	movs	r2, #6
 8017fb8:	f7e8 f912 	bl	80001e0 <memchr>
 8017fbc:	2800      	cmp	r0, #0
 8017fbe:	d036      	beq.n	801802e <_svfiprintf_r+0x1d2>
 8017fc0:	4b21      	ldr	r3, [pc, #132]	@ (8018048 <_svfiprintf_r+0x1ec>)
 8017fc2:	bb1b      	cbnz	r3, 801800c <_svfiprintf_r+0x1b0>
 8017fc4:	9b03      	ldr	r3, [sp, #12]
 8017fc6:	3307      	adds	r3, #7
 8017fc8:	f023 0307 	bic.w	r3, r3, #7
 8017fcc:	3308      	adds	r3, #8
 8017fce:	9303      	str	r3, [sp, #12]
 8017fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017fd2:	4433      	add	r3, r6
 8017fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017fd6:	e76a      	b.n	8017eae <_svfiprintf_r+0x52>
 8017fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8017fdc:	460c      	mov	r4, r1
 8017fde:	2001      	movs	r0, #1
 8017fe0:	e7a8      	b.n	8017f34 <_svfiprintf_r+0xd8>
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	3401      	adds	r4, #1
 8017fe6:	9305      	str	r3, [sp, #20]
 8017fe8:	4619      	mov	r1, r3
 8017fea:	f04f 0c0a 	mov.w	ip, #10
 8017fee:	4620      	mov	r0, r4
 8017ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ff4:	3a30      	subs	r2, #48	@ 0x30
 8017ff6:	2a09      	cmp	r2, #9
 8017ff8:	d903      	bls.n	8018002 <_svfiprintf_r+0x1a6>
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d0c6      	beq.n	8017f8c <_svfiprintf_r+0x130>
 8017ffe:	9105      	str	r1, [sp, #20]
 8018000:	e7c4      	b.n	8017f8c <_svfiprintf_r+0x130>
 8018002:	fb0c 2101 	mla	r1, ip, r1, r2
 8018006:	4604      	mov	r4, r0
 8018008:	2301      	movs	r3, #1
 801800a:	e7f0      	b.n	8017fee <_svfiprintf_r+0x192>
 801800c:	ab03      	add	r3, sp, #12
 801800e:	9300      	str	r3, [sp, #0]
 8018010:	462a      	mov	r2, r5
 8018012:	4b0e      	ldr	r3, [pc, #56]	@ (801804c <_svfiprintf_r+0x1f0>)
 8018014:	a904      	add	r1, sp, #16
 8018016:	4638      	mov	r0, r7
 8018018:	f7fc fb3a 	bl	8014690 <_printf_float>
 801801c:	1c42      	adds	r2, r0, #1
 801801e:	4606      	mov	r6, r0
 8018020:	d1d6      	bne.n	8017fd0 <_svfiprintf_r+0x174>
 8018022:	89ab      	ldrh	r3, [r5, #12]
 8018024:	065b      	lsls	r3, r3, #25
 8018026:	f53f af2d 	bmi.w	8017e84 <_svfiprintf_r+0x28>
 801802a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801802c:	e72c      	b.n	8017e88 <_svfiprintf_r+0x2c>
 801802e:	ab03      	add	r3, sp, #12
 8018030:	9300      	str	r3, [sp, #0]
 8018032:	462a      	mov	r2, r5
 8018034:	4b05      	ldr	r3, [pc, #20]	@ (801804c <_svfiprintf_r+0x1f0>)
 8018036:	a904      	add	r1, sp, #16
 8018038:	4638      	mov	r0, r7
 801803a:	f7fc fdc1 	bl	8014bc0 <_printf_i>
 801803e:	e7ed      	b.n	801801c <_svfiprintf_r+0x1c0>
 8018040:	0802ea19 	.word	0x0802ea19
 8018044:	0802ea23 	.word	0x0802ea23
 8018048:	08014691 	.word	0x08014691
 801804c:	08017da5 	.word	0x08017da5
 8018050:	0802ea1f 	.word	0x0802ea1f

08018054 <__sflush_r>:
 8018054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801805c:	0716      	lsls	r6, r2, #28
 801805e:	4605      	mov	r5, r0
 8018060:	460c      	mov	r4, r1
 8018062:	d454      	bmi.n	801810e <__sflush_r+0xba>
 8018064:	684b      	ldr	r3, [r1, #4]
 8018066:	2b00      	cmp	r3, #0
 8018068:	dc02      	bgt.n	8018070 <__sflush_r+0x1c>
 801806a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801806c:	2b00      	cmp	r3, #0
 801806e:	dd48      	ble.n	8018102 <__sflush_r+0xae>
 8018070:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018072:	2e00      	cmp	r6, #0
 8018074:	d045      	beq.n	8018102 <__sflush_r+0xae>
 8018076:	2300      	movs	r3, #0
 8018078:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801807c:	682f      	ldr	r7, [r5, #0]
 801807e:	6a21      	ldr	r1, [r4, #32]
 8018080:	602b      	str	r3, [r5, #0]
 8018082:	d030      	beq.n	80180e6 <__sflush_r+0x92>
 8018084:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018086:	89a3      	ldrh	r3, [r4, #12]
 8018088:	0759      	lsls	r1, r3, #29
 801808a:	d505      	bpl.n	8018098 <__sflush_r+0x44>
 801808c:	6863      	ldr	r3, [r4, #4]
 801808e:	1ad2      	subs	r2, r2, r3
 8018090:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018092:	b10b      	cbz	r3, 8018098 <__sflush_r+0x44>
 8018094:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018096:	1ad2      	subs	r2, r2, r3
 8018098:	2300      	movs	r3, #0
 801809a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801809c:	6a21      	ldr	r1, [r4, #32]
 801809e:	4628      	mov	r0, r5
 80180a0:	47b0      	blx	r6
 80180a2:	1c43      	adds	r3, r0, #1
 80180a4:	89a3      	ldrh	r3, [r4, #12]
 80180a6:	d106      	bne.n	80180b6 <__sflush_r+0x62>
 80180a8:	6829      	ldr	r1, [r5, #0]
 80180aa:	291d      	cmp	r1, #29
 80180ac:	d82b      	bhi.n	8018106 <__sflush_r+0xb2>
 80180ae:	4a2a      	ldr	r2, [pc, #168]	@ (8018158 <__sflush_r+0x104>)
 80180b0:	410a      	asrs	r2, r1
 80180b2:	07d6      	lsls	r6, r2, #31
 80180b4:	d427      	bmi.n	8018106 <__sflush_r+0xb2>
 80180b6:	2200      	movs	r2, #0
 80180b8:	6062      	str	r2, [r4, #4]
 80180ba:	04d9      	lsls	r1, r3, #19
 80180bc:	6922      	ldr	r2, [r4, #16]
 80180be:	6022      	str	r2, [r4, #0]
 80180c0:	d504      	bpl.n	80180cc <__sflush_r+0x78>
 80180c2:	1c42      	adds	r2, r0, #1
 80180c4:	d101      	bne.n	80180ca <__sflush_r+0x76>
 80180c6:	682b      	ldr	r3, [r5, #0]
 80180c8:	b903      	cbnz	r3, 80180cc <__sflush_r+0x78>
 80180ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80180cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80180ce:	602f      	str	r7, [r5, #0]
 80180d0:	b1b9      	cbz	r1, 8018102 <__sflush_r+0xae>
 80180d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80180d6:	4299      	cmp	r1, r3
 80180d8:	d002      	beq.n	80180e0 <__sflush_r+0x8c>
 80180da:	4628      	mov	r0, r5
 80180dc:	f7fe fa2c 	bl	8016538 <_free_r>
 80180e0:	2300      	movs	r3, #0
 80180e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80180e4:	e00d      	b.n	8018102 <__sflush_r+0xae>
 80180e6:	2301      	movs	r3, #1
 80180e8:	4628      	mov	r0, r5
 80180ea:	47b0      	blx	r6
 80180ec:	4602      	mov	r2, r0
 80180ee:	1c50      	adds	r0, r2, #1
 80180f0:	d1c9      	bne.n	8018086 <__sflush_r+0x32>
 80180f2:	682b      	ldr	r3, [r5, #0]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d0c6      	beq.n	8018086 <__sflush_r+0x32>
 80180f8:	2b1d      	cmp	r3, #29
 80180fa:	d001      	beq.n	8018100 <__sflush_r+0xac>
 80180fc:	2b16      	cmp	r3, #22
 80180fe:	d11e      	bne.n	801813e <__sflush_r+0xea>
 8018100:	602f      	str	r7, [r5, #0]
 8018102:	2000      	movs	r0, #0
 8018104:	e022      	b.n	801814c <__sflush_r+0xf8>
 8018106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801810a:	b21b      	sxth	r3, r3
 801810c:	e01b      	b.n	8018146 <__sflush_r+0xf2>
 801810e:	690f      	ldr	r7, [r1, #16]
 8018110:	2f00      	cmp	r7, #0
 8018112:	d0f6      	beq.n	8018102 <__sflush_r+0xae>
 8018114:	0793      	lsls	r3, r2, #30
 8018116:	680e      	ldr	r6, [r1, #0]
 8018118:	bf08      	it	eq
 801811a:	694b      	ldreq	r3, [r1, #20]
 801811c:	600f      	str	r7, [r1, #0]
 801811e:	bf18      	it	ne
 8018120:	2300      	movne	r3, #0
 8018122:	eba6 0807 	sub.w	r8, r6, r7
 8018126:	608b      	str	r3, [r1, #8]
 8018128:	f1b8 0f00 	cmp.w	r8, #0
 801812c:	dde9      	ble.n	8018102 <__sflush_r+0xae>
 801812e:	6a21      	ldr	r1, [r4, #32]
 8018130:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018132:	4643      	mov	r3, r8
 8018134:	463a      	mov	r2, r7
 8018136:	4628      	mov	r0, r5
 8018138:	47b0      	blx	r6
 801813a:	2800      	cmp	r0, #0
 801813c:	dc08      	bgt.n	8018150 <__sflush_r+0xfc>
 801813e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018146:	81a3      	strh	r3, [r4, #12]
 8018148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801814c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018150:	4407      	add	r7, r0
 8018152:	eba8 0800 	sub.w	r8, r8, r0
 8018156:	e7e7      	b.n	8018128 <__sflush_r+0xd4>
 8018158:	dfbffffe 	.word	0xdfbffffe

0801815c <_fflush_r>:
 801815c:	b538      	push	{r3, r4, r5, lr}
 801815e:	690b      	ldr	r3, [r1, #16]
 8018160:	4605      	mov	r5, r0
 8018162:	460c      	mov	r4, r1
 8018164:	b913      	cbnz	r3, 801816c <_fflush_r+0x10>
 8018166:	2500      	movs	r5, #0
 8018168:	4628      	mov	r0, r5
 801816a:	bd38      	pop	{r3, r4, r5, pc}
 801816c:	b118      	cbz	r0, 8018176 <_fflush_r+0x1a>
 801816e:	6a03      	ldr	r3, [r0, #32]
 8018170:	b90b      	cbnz	r3, 8018176 <_fflush_r+0x1a>
 8018172:	f7fd f8e5 	bl	8015340 <__sinit>
 8018176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d0f3      	beq.n	8018166 <_fflush_r+0xa>
 801817e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018180:	07d0      	lsls	r0, r2, #31
 8018182:	d404      	bmi.n	801818e <_fflush_r+0x32>
 8018184:	0599      	lsls	r1, r3, #22
 8018186:	d402      	bmi.n	801818e <_fflush_r+0x32>
 8018188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801818a:	f7fd fb70 	bl	801586e <__retarget_lock_acquire_recursive>
 801818e:	4628      	mov	r0, r5
 8018190:	4621      	mov	r1, r4
 8018192:	f7ff ff5f 	bl	8018054 <__sflush_r>
 8018196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018198:	07da      	lsls	r2, r3, #31
 801819a:	4605      	mov	r5, r0
 801819c:	d4e4      	bmi.n	8018168 <_fflush_r+0xc>
 801819e:	89a3      	ldrh	r3, [r4, #12]
 80181a0:	059b      	lsls	r3, r3, #22
 80181a2:	d4e1      	bmi.n	8018168 <_fflush_r+0xc>
 80181a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80181a6:	f7fd fb63 	bl	8015870 <__retarget_lock_release_recursive>
 80181aa:	e7dd      	b.n	8018168 <_fflush_r+0xc>

080181ac <__swhatbuf_r>:
 80181ac:	b570      	push	{r4, r5, r6, lr}
 80181ae:	460c      	mov	r4, r1
 80181b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181b4:	2900      	cmp	r1, #0
 80181b6:	b096      	sub	sp, #88	@ 0x58
 80181b8:	4615      	mov	r5, r2
 80181ba:	461e      	mov	r6, r3
 80181bc:	da0d      	bge.n	80181da <__swhatbuf_r+0x2e>
 80181be:	89a3      	ldrh	r3, [r4, #12]
 80181c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80181c4:	f04f 0100 	mov.w	r1, #0
 80181c8:	bf14      	ite	ne
 80181ca:	2340      	movne	r3, #64	@ 0x40
 80181cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80181d0:	2000      	movs	r0, #0
 80181d2:	6031      	str	r1, [r6, #0]
 80181d4:	602b      	str	r3, [r5, #0]
 80181d6:	b016      	add	sp, #88	@ 0x58
 80181d8:	bd70      	pop	{r4, r5, r6, pc}
 80181da:	466a      	mov	r2, sp
 80181dc:	f000 f874 	bl	80182c8 <_fstat_r>
 80181e0:	2800      	cmp	r0, #0
 80181e2:	dbec      	blt.n	80181be <__swhatbuf_r+0x12>
 80181e4:	9901      	ldr	r1, [sp, #4]
 80181e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80181ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80181ee:	4259      	negs	r1, r3
 80181f0:	4159      	adcs	r1, r3
 80181f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80181f6:	e7eb      	b.n	80181d0 <__swhatbuf_r+0x24>

080181f8 <__smakebuf_r>:
 80181f8:	898b      	ldrh	r3, [r1, #12]
 80181fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80181fc:	079d      	lsls	r5, r3, #30
 80181fe:	4606      	mov	r6, r0
 8018200:	460c      	mov	r4, r1
 8018202:	d507      	bpl.n	8018214 <__smakebuf_r+0x1c>
 8018204:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018208:	6023      	str	r3, [r4, #0]
 801820a:	6123      	str	r3, [r4, #16]
 801820c:	2301      	movs	r3, #1
 801820e:	6163      	str	r3, [r4, #20]
 8018210:	b003      	add	sp, #12
 8018212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018214:	ab01      	add	r3, sp, #4
 8018216:	466a      	mov	r2, sp
 8018218:	f7ff ffc8 	bl	80181ac <__swhatbuf_r>
 801821c:	9f00      	ldr	r7, [sp, #0]
 801821e:	4605      	mov	r5, r0
 8018220:	4639      	mov	r1, r7
 8018222:	4630      	mov	r0, r6
 8018224:	f7fe f9fc 	bl	8016620 <_malloc_r>
 8018228:	b948      	cbnz	r0, 801823e <__smakebuf_r+0x46>
 801822a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801822e:	059a      	lsls	r2, r3, #22
 8018230:	d4ee      	bmi.n	8018210 <__smakebuf_r+0x18>
 8018232:	f023 0303 	bic.w	r3, r3, #3
 8018236:	f043 0302 	orr.w	r3, r3, #2
 801823a:	81a3      	strh	r3, [r4, #12]
 801823c:	e7e2      	b.n	8018204 <__smakebuf_r+0xc>
 801823e:	89a3      	ldrh	r3, [r4, #12]
 8018240:	6020      	str	r0, [r4, #0]
 8018242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018246:	81a3      	strh	r3, [r4, #12]
 8018248:	9b01      	ldr	r3, [sp, #4]
 801824a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801824e:	b15b      	cbz	r3, 8018268 <__smakebuf_r+0x70>
 8018250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018254:	4630      	mov	r0, r6
 8018256:	f000 f849 	bl	80182ec <_isatty_r>
 801825a:	b128      	cbz	r0, 8018268 <__smakebuf_r+0x70>
 801825c:	89a3      	ldrh	r3, [r4, #12]
 801825e:	f023 0303 	bic.w	r3, r3, #3
 8018262:	f043 0301 	orr.w	r3, r3, #1
 8018266:	81a3      	strh	r3, [r4, #12]
 8018268:	89a3      	ldrh	r3, [r4, #12]
 801826a:	431d      	orrs	r5, r3
 801826c:	81a5      	strh	r5, [r4, #12]
 801826e:	e7cf      	b.n	8018210 <__smakebuf_r+0x18>

08018270 <memmove>:
 8018270:	4288      	cmp	r0, r1
 8018272:	b510      	push	{r4, lr}
 8018274:	eb01 0402 	add.w	r4, r1, r2
 8018278:	d902      	bls.n	8018280 <memmove+0x10>
 801827a:	4284      	cmp	r4, r0
 801827c:	4623      	mov	r3, r4
 801827e:	d807      	bhi.n	8018290 <memmove+0x20>
 8018280:	1e43      	subs	r3, r0, #1
 8018282:	42a1      	cmp	r1, r4
 8018284:	d008      	beq.n	8018298 <memmove+0x28>
 8018286:	f811 2b01 	ldrb.w	r2, [r1], #1
 801828a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801828e:	e7f8      	b.n	8018282 <memmove+0x12>
 8018290:	4402      	add	r2, r0
 8018292:	4601      	mov	r1, r0
 8018294:	428a      	cmp	r2, r1
 8018296:	d100      	bne.n	801829a <memmove+0x2a>
 8018298:	bd10      	pop	{r4, pc}
 801829a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801829e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80182a2:	e7f7      	b.n	8018294 <memmove+0x24>

080182a4 <strncmp>:
 80182a4:	b510      	push	{r4, lr}
 80182a6:	b16a      	cbz	r2, 80182c4 <strncmp+0x20>
 80182a8:	3901      	subs	r1, #1
 80182aa:	1884      	adds	r4, r0, r2
 80182ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80182b4:	429a      	cmp	r2, r3
 80182b6:	d103      	bne.n	80182c0 <strncmp+0x1c>
 80182b8:	42a0      	cmp	r0, r4
 80182ba:	d001      	beq.n	80182c0 <strncmp+0x1c>
 80182bc:	2a00      	cmp	r2, #0
 80182be:	d1f5      	bne.n	80182ac <strncmp+0x8>
 80182c0:	1ad0      	subs	r0, r2, r3
 80182c2:	bd10      	pop	{r4, pc}
 80182c4:	4610      	mov	r0, r2
 80182c6:	e7fc      	b.n	80182c2 <strncmp+0x1e>

080182c8 <_fstat_r>:
 80182c8:	b538      	push	{r3, r4, r5, lr}
 80182ca:	4d07      	ldr	r5, [pc, #28]	@ (80182e8 <_fstat_r+0x20>)
 80182cc:	2300      	movs	r3, #0
 80182ce:	4604      	mov	r4, r0
 80182d0:	4608      	mov	r0, r1
 80182d2:	4611      	mov	r1, r2
 80182d4:	602b      	str	r3, [r5, #0]
 80182d6:	f7ea ffc1 	bl	800325c <_fstat>
 80182da:	1c43      	adds	r3, r0, #1
 80182dc:	d102      	bne.n	80182e4 <_fstat_r+0x1c>
 80182de:	682b      	ldr	r3, [r5, #0]
 80182e0:	b103      	cbz	r3, 80182e4 <_fstat_r+0x1c>
 80182e2:	6023      	str	r3, [r4, #0]
 80182e4:	bd38      	pop	{r3, r4, r5, pc}
 80182e6:	bf00      	nop
 80182e8:	200233b8 	.word	0x200233b8

080182ec <_isatty_r>:
 80182ec:	b538      	push	{r3, r4, r5, lr}
 80182ee:	4d06      	ldr	r5, [pc, #24]	@ (8018308 <_isatty_r+0x1c>)
 80182f0:	2300      	movs	r3, #0
 80182f2:	4604      	mov	r4, r0
 80182f4:	4608      	mov	r0, r1
 80182f6:	602b      	str	r3, [r5, #0]
 80182f8:	f7ea ffc0 	bl	800327c <_isatty>
 80182fc:	1c43      	adds	r3, r0, #1
 80182fe:	d102      	bne.n	8018306 <_isatty_r+0x1a>
 8018300:	682b      	ldr	r3, [r5, #0]
 8018302:	b103      	cbz	r3, 8018306 <_isatty_r+0x1a>
 8018304:	6023      	str	r3, [r4, #0]
 8018306:	bd38      	pop	{r3, r4, r5, pc}
 8018308:	200233b8 	.word	0x200233b8

0801830c <_sbrk_r>:
 801830c:	b538      	push	{r3, r4, r5, lr}
 801830e:	4d06      	ldr	r5, [pc, #24]	@ (8018328 <_sbrk_r+0x1c>)
 8018310:	2300      	movs	r3, #0
 8018312:	4604      	mov	r4, r0
 8018314:	4608      	mov	r0, r1
 8018316:	602b      	str	r3, [r5, #0]
 8018318:	f7ea ffc8 	bl	80032ac <_sbrk>
 801831c:	1c43      	adds	r3, r0, #1
 801831e:	d102      	bne.n	8018326 <_sbrk_r+0x1a>
 8018320:	682b      	ldr	r3, [r5, #0]
 8018322:	b103      	cbz	r3, 8018326 <_sbrk_r+0x1a>
 8018324:	6023      	str	r3, [r4, #0]
 8018326:	bd38      	pop	{r3, r4, r5, pc}
 8018328:	200233b8 	.word	0x200233b8
 801832c:	00000000 	.word	0x00000000

08018330 <nan>:
 8018330:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018338 <nan+0x8>
 8018334:	4770      	bx	lr
 8018336:	bf00      	nop
 8018338:	00000000 	.word	0x00000000
 801833c:	7ff80000 	.word	0x7ff80000

08018340 <__assert_func>:
 8018340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018342:	4614      	mov	r4, r2
 8018344:	461a      	mov	r2, r3
 8018346:	4b09      	ldr	r3, [pc, #36]	@ (801836c <__assert_func+0x2c>)
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	4605      	mov	r5, r0
 801834c:	68d8      	ldr	r0, [r3, #12]
 801834e:	b954      	cbnz	r4, 8018366 <__assert_func+0x26>
 8018350:	4b07      	ldr	r3, [pc, #28]	@ (8018370 <__assert_func+0x30>)
 8018352:	461c      	mov	r4, r3
 8018354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018358:	9100      	str	r1, [sp, #0]
 801835a:	462b      	mov	r3, r5
 801835c:	4905      	ldr	r1, [pc, #20]	@ (8018374 <__assert_func+0x34>)
 801835e:	f000 fba7 	bl	8018ab0 <fiprintf>
 8018362:	f000 fbb7 	bl	8018ad4 <abort>
 8018366:	4b04      	ldr	r3, [pc, #16]	@ (8018378 <__assert_func+0x38>)
 8018368:	e7f4      	b.n	8018354 <__assert_func+0x14>
 801836a:	bf00      	nop
 801836c:	20000140 	.word	0x20000140
 8018370:	0802ea6d 	.word	0x0802ea6d
 8018374:	0802ea3f 	.word	0x0802ea3f
 8018378:	0802ea32 	.word	0x0802ea32

0801837c <_calloc_r>:
 801837c:	b570      	push	{r4, r5, r6, lr}
 801837e:	fba1 5402 	umull	r5, r4, r1, r2
 8018382:	b93c      	cbnz	r4, 8018394 <_calloc_r+0x18>
 8018384:	4629      	mov	r1, r5
 8018386:	f7fe f94b 	bl	8016620 <_malloc_r>
 801838a:	4606      	mov	r6, r0
 801838c:	b928      	cbnz	r0, 801839a <_calloc_r+0x1e>
 801838e:	2600      	movs	r6, #0
 8018390:	4630      	mov	r0, r6
 8018392:	bd70      	pop	{r4, r5, r6, pc}
 8018394:	220c      	movs	r2, #12
 8018396:	6002      	str	r2, [r0, #0]
 8018398:	e7f9      	b.n	801838e <_calloc_r+0x12>
 801839a:	462a      	mov	r2, r5
 801839c:	4621      	mov	r1, r4
 801839e:	f7fd f993 	bl	80156c8 <memset>
 80183a2:	e7f5      	b.n	8018390 <_calloc_r+0x14>

080183a4 <rshift>:
 80183a4:	6903      	ldr	r3, [r0, #16]
 80183a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80183aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80183b2:	f100 0414 	add.w	r4, r0, #20
 80183b6:	dd45      	ble.n	8018444 <rshift+0xa0>
 80183b8:	f011 011f 	ands.w	r1, r1, #31
 80183bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80183c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80183c4:	d10c      	bne.n	80183e0 <rshift+0x3c>
 80183c6:	f100 0710 	add.w	r7, r0, #16
 80183ca:	4629      	mov	r1, r5
 80183cc:	42b1      	cmp	r1, r6
 80183ce:	d334      	bcc.n	801843a <rshift+0x96>
 80183d0:	1a9b      	subs	r3, r3, r2
 80183d2:	009b      	lsls	r3, r3, #2
 80183d4:	1eea      	subs	r2, r5, #3
 80183d6:	4296      	cmp	r6, r2
 80183d8:	bf38      	it	cc
 80183da:	2300      	movcc	r3, #0
 80183dc:	4423      	add	r3, r4
 80183de:	e015      	b.n	801840c <rshift+0x68>
 80183e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80183e4:	f1c1 0820 	rsb	r8, r1, #32
 80183e8:	40cf      	lsrs	r7, r1
 80183ea:	f105 0e04 	add.w	lr, r5, #4
 80183ee:	46a1      	mov	r9, r4
 80183f0:	4576      	cmp	r6, lr
 80183f2:	46f4      	mov	ip, lr
 80183f4:	d815      	bhi.n	8018422 <rshift+0x7e>
 80183f6:	1a9a      	subs	r2, r3, r2
 80183f8:	0092      	lsls	r2, r2, #2
 80183fa:	3a04      	subs	r2, #4
 80183fc:	3501      	adds	r5, #1
 80183fe:	42ae      	cmp	r6, r5
 8018400:	bf38      	it	cc
 8018402:	2200      	movcc	r2, #0
 8018404:	18a3      	adds	r3, r4, r2
 8018406:	50a7      	str	r7, [r4, r2]
 8018408:	b107      	cbz	r7, 801840c <rshift+0x68>
 801840a:	3304      	adds	r3, #4
 801840c:	1b1a      	subs	r2, r3, r4
 801840e:	42a3      	cmp	r3, r4
 8018410:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018414:	bf08      	it	eq
 8018416:	2300      	moveq	r3, #0
 8018418:	6102      	str	r2, [r0, #16]
 801841a:	bf08      	it	eq
 801841c:	6143      	streq	r3, [r0, #20]
 801841e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018422:	f8dc c000 	ldr.w	ip, [ip]
 8018426:	fa0c fc08 	lsl.w	ip, ip, r8
 801842a:	ea4c 0707 	orr.w	r7, ip, r7
 801842e:	f849 7b04 	str.w	r7, [r9], #4
 8018432:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018436:	40cf      	lsrs	r7, r1
 8018438:	e7da      	b.n	80183f0 <rshift+0x4c>
 801843a:	f851 cb04 	ldr.w	ip, [r1], #4
 801843e:	f847 cf04 	str.w	ip, [r7, #4]!
 8018442:	e7c3      	b.n	80183cc <rshift+0x28>
 8018444:	4623      	mov	r3, r4
 8018446:	e7e1      	b.n	801840c <rshift+0x68>

08018448 <__hexdig_fun>:
 8018448:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801844c:	2b09      	cmp	r3, #9
 801844e:	d802      	bhi.n	8018456 <__hexdig_fun+0xe>
 8018450:	3820      	subs	r0, #32
 8018452:	b2c0      	uxtb	r0, r0
 8018454:	4770      	bx	lr
 8018456:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801845a:	2b05      	cmp	r3, #5
 801845c:	d801      	bhi.n	8018462 <__hexdig_fun+0x1a>
 801845e:	3847      	subs	r0, #71	@ 0x47
 8018460:	e7f7      	b.n	8018452 <__hexdig_fun+0xa>
 8018462:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8018466:	2b05      	cmp	r3, #5
 8018468:	d801      	bhi.n	801846e <__hexdig_fun+0x26>
 801846a:	3827      	subs	r0, #39	@ 0x27
 801846c:	e7f1      	b.n	8018452 <__hexdig_fun+0xa>
 801846e:	2000      	movs	r0, #0
 8018470:	4770      	bx	lr
	...

08018474 <__gethex>:
 8018474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018478:	b085      	sub	sp, #20
 801847a:	468a      	mov	sl, r1
 801847c:	9302      	str	r3, [sp, #8]
 801847e:	680b      	ldr	r3, [r1, #0]
 8018480:	9001      	str	r0, [sp, #4]
 8018482:	4690      	mov	r8, r2
 8018484:	1c9c      	adds	r4, r3, #2
 8018486:	46a1      	mov	r9, r4
 8018488:	f814 0b01 	ldrb.w	r0, [r4], #1
 801848c:	2830      	cmp	r0, #48	@ 0x30
 801848e:	d0fa      	beq.n	8018486 <__gethex+0x12>
 8018490:	eba9 0303 	sub.w	r3, r9, r3
 8018494:	f1a3 0b02 	sub.w	fp, r3, #2
 8018498:	f7ff ffd6 	bl	8018448 <__hexdig_fun>
 801849c:	4605      	mov	r5, r0
 801849e:	2800      	cmp	r0, #0
 80184a0:	d168      	bne.n	8018574 <__gethex+0x100>
 80184a2:	49a0      	ldr	r1, [pc, #640]	@ (8018724 <__gethex+0x2b0>)
 80184a4:	2201      	movs	r2, #1
 80184a6:	4648      	mov	r0, r9
 80184a8:	f7ff fefc 	bl	80182a4 <strncmp>
 80184ac:	4607      	mov	r7, r0
 80184ae:	2800      	cmp	r0, #0
 80184b0:	d167      	bne.n	8018582 <__gethex+0x10e>
 80184b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80184b6:	4626      	mov	r6, r4
 80184b8:	f7ff ffc6 	bl	8018448 <__hexdig_fun>
 80184bc:	2800      	cmp	r0, #0
 80184be:	d062      	beq.n	8018586 <__gethex+0x112>
 80184c0:	4623      	mov	r3, r4
 80184c2:	7818      	ldrb	r0, [r3, #0]
 80184c4:	2830      	cmp	r0, #48	@ 0x30
 80184c6:	4699      	mov	r9, r3
 80184c8:	f103 0301 	add.w	r3, r3, #1
 80184cc:	d0f9      	beq.n	80184c2 <__gethex+0x4e>
 80184ce:	f7ff ffbb 	bl	8018448 <__hexdig_fun>
 80184d2:	fab0 f580 	clz	r5, r0
 80184d6:	096d      	lsrs	r5, r5, #5
 80184d8:	f04f 0b01 	mov.w	fp, #1
 80184dc:	464a      	mov	r2, r9
 80184de:	4616      	mov	r6, r2
 80184e0:	3201      	adds	r2, #1
 80184e2:	7830      	ldrb	r0, [r6, #0]
 80184e4:	f7ff ffb0 	bl	8018448 <__hexdig_fun>
 80184e8:	2800      	cmp	r0, #0
 80184ea:	d1f8      	bne.n	80184de <__gethex+0x6a>
 80184ec:	498d      	ldr	r1, [pc, #564]	@ (8018724 <__gethex+0x2b0>)
 80184ee:	2201      	movs	r2, #1
 80184f0:	4630      	mov	r0, r6
 80184f2:	f7ff fed7 	bl	80182a4 <strncmp>
 80184f6:	2800      	cmp	r0, #0
 80184f8:	d13f      	bne.n	801857a <__gethex+0x106>
 80184fa:	b944      	cbnz	r4, 801850e <__gethex+0x9a>
 80184fc:	1c74      	adds	r4, r6, #1
 80184fe:	4622      	mov	r2, r4
 8018500:	4616      	mov	r6, r2
 8018502:	3201      	adds	r2, #1
 8018504:	7830      	ldrb	r0, [r6, #0]
 8018506:	f7ff ff9f 	bl	8018448 <__hexdig_fun>
 801850a:	2800      	cmp	r0, #0
 801850c:	d1f8      	bne.n	8018500 <__gethex+0x8c>
 801850e:	1ba4      	subs	r4, r4, r6
 8018510:	00a7      	lsls	r7, r4, #2
 8018512:	7833      	ldrb	r3, [r6, #0]
 8018514:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8018518:	2b50      	cmp	r3, #80	@ 0x50
 801851a:	d13e      	bne.n	801859a <__gethex+0x126>
 801851c:	7873      	ldrb	r3, [r6, #1]
 801851e:	2b2b      	cmp	r3, #43	@ 0x2b
 8018520:	d033      	beq.n	801858a <__gethex+0x116>
 8018522:	2b2d      	cmp	r3, #45	@ 0x2d
 8018524:	d034      	beq.n	8018590 <__gethex+0x11c>
 8018526:	1c71      	adds	r1, r6, #1
 8018528:	2400      	movs	r4, #0
 801852a:	7808      	ldrb	r0, [r1, #0]
 801852c:	f7ff ff8c 	bl	8018448 <__hexdig_fun>
 8018530:	1e43      	subs	r3, r0, #1
 8018532:	b2db      	uxtb	r3, r3
 8018534:	2b18      	cmp	r3, #24
 8018536:	d830      	bhi.n	801859a <__gethex+0x126>
 8018538:	f1a0 0210 	sub.w	r2, r0, #16
 801853c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018540:	f7ff ff82 	bl	8018448 <__hexdig_fun>
 8018544:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8018548:	fa5f fc8c 	uxtb.w	ip, ip
 801854c:	f1bc 0f18 	cmp.w	ip, #24
 8018550:	f04f 030a 	mov.w	r3, #10
 8018554:	d91e      	bls.n	8018594 <__gethex+0x120>
 8018556:	b104      	cbz	r4, 801855a <__gethex+0xe6>
 8018558:	4252      	negs	r2, r2
 801855a:	4417      	add	r7, r2
 801855c:	f8ca 1000 	str.w	r1, [sl]
 8018560:	b1ed      	cbz	r5, 801859e <__gethex+0x12a>
 8018562:	f1bb 0f00 	cmp.w	fp, #0
 8018566:	bf0c      	ite	eq
 8018568:	2506      	moveq	r5, #6
 801856a:	2500      	movne	r5, #0
 801856c:	4628      	mov	r0, r5
 801856e:	b005      	add	sp, #20
 8018570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018574:	2500      	movs	r5, #0
 8018576:	462c      	mov	r4, r5
 8018578:	e7b0      	b.n	80184dc <__gethex+0x68>
 801857a:	2c00      	cmp	r4, #0
 801857c:	d1c7      	bne.n	801850e <__gethex+0x9a>
 801857e:	4627      	mov	r7, r4
 8018580:	e7c7      	b.n	8018512 <__gethex+0x9e>
 8018582:	464e      	mov	r6, r9
 8018584:	462f      	mov	r7, r5
 8018586:	2501      	movs	r5, #1
 8018588:	e7c3      	b.n	8018512 <__gethex+0x9e>
 801858a:	2400      	movs	r4, #0
 801858c:	1cb1      	adds	r1, r6, #2
 801858e:	e7cc      	b.n	801852a <__gethex+0xb6>
 8018590:	2401      	movs	r4, #1
 8018592:	e7fb      	b.n	801858c <__gethex+0x118>
 8018594:	fb03 0002 	mla	r0, r3, r2, r0
 8018598:	e7ce      	b.n	8018538 <__gethex+0xc4>
 801859a:	4631      	mov	r1, r6
 801859c:	e7de      	b.n	801855c <__gethex+0xe8>
 801859e:	eba6 0309 	sub.w	r3, r6, r9
 80185a2:	3b01      	subs	r3, #1
 80185a4:	4629      	mov	r1, r5
 80185a6:	2b07      	cmp	r3, #7
 80185a8:	dc0a      	bgt.n	80185c0 <__gethex+0x14c>
 80185aa:	9801      	ldr	r0, [sp, #4]
 80185ac:	f7fe f8c4 	bl	8016738 <_Balloc>
 80185b0:	4604      	mov	r4, r0
 80185b2:	b940      	cbnz	r0, 80185c6 <__gethex+0x152>
 80185b4:	4b5c      	ldr	r3, [pc, #368]	@ (8018728 <__gethex+0x2b4>)
 80185b6:	4602      	mov	r2, r0
 80185b8:	21e4      	movs	r1, #228	@ 0xe4
 80185ba:	485c      	ldr	r0, [pc, #368]	@ (801872c <__gethex+0x2b8>)
 80185bc:	f7ff fec0 	bl	8018340 <__assert_func>
 80185c0:	3101      	adds	r1, #1
 80185c2:	105b      	asrs	r3, r3, #1
 80185c4:	e7ef      	b.n	80185a6 <__gethex+0x132>
 80185c6:	f100 0a14 	add.w	sl, r0, #20
 80185ca:	2300      	movs	r3, #0
 80185cc:	4655      	mov	r5, sl
 80185ce:	469b      	mov	fp, r3
 80185d0:	45b1      	cmp	r9, r6
 80185d2:	d337      	bcc.n	8018644 <__gethex+0x1d0>
 80185d4:	f845 bb04 	str.w	fp, [r5], #4
 80185d8:	eba5 050a 	sub.w	r5, r5, sl
 80185dc:	10ad      	asrs	r5, r5, #2
 80185de:	6125      	str	r5, [r4, #16]
 80185e0:	4658      	mov	r0, fp
 80185e2:	f7fe f99b 	bl	801691c <__hi0bits>
 80185e6:	016d      	lsls	r5, r5, #5
 80185e8:	f8d8 6000 	ldr.w	r6, [r8]
 80185ec:	1a2d      	subs	r5, r5, r0
 80185ee:	42b5      	cmp	r5, r6
 80185f0:	dd54      	ble.n	801869c <__gethex+0x228>
 80185f2:	1bad      	subs	r5, r5, r6
 80185f4:	4629      	mov	r1, r5
 80185f6:	4620      	mov	r0, r4
 80185f8:	f7fe fd2f 	bl	801705a <__any_on>
 80185fc:	4681      	mov	r9, r0
 80185fe:	b178      	cbz	r0, 8018620 <__gethex+0x1ac>
 8018600:	1e6b      	subs	r3, r5, #1
 8018602:	1159      	asrs	r1, r3, #5
 8018604:	f003 021f 	and.w	r2, r3, #31
 8018608:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801860c:	f04f 0901 	mov.w	r9, #1
 8018610:	fa09 f202 	lsl.w	r2, r9, r2
 8018614:	420a      	tst	r2, r1
 8018616:	d003      	beq.n	8018620 <__gethex+0x1ac>
 8018618:	454b      	cmp	r3, r9
 801861a:	dc36      	bgt.n	801868a <__gethex+0x216>
 801861c:	f04f 0902 	mov.w	r9, #2
 8018620:	4629      	mov	r1, r5
 8018622:	4620      	mov	r0, r4
 8018624:	f7ff febe 	bl	80183a4 <rshift>
 8018628:	442f      	add	r7, r5
 801862a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801862e:	42bb      	cmp	r3, r7
 8018630:	da42      	bge.n	80186b8 <__gethex+0x244>
 8018632:	9801      	ldr	r0, [sp, #4]
 8018634:	4621      	mov	r1, r4
 8018636:	f7fe f8bf 	bl	80167b8 <_Bfree>
 801863a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801863c:	2300      	movs	r3, #0
 801863e:	6013      	str	r3, [r2, #0]
 8018640:	25a3      	movs	r5, #163	@ 0xa3
 8018642:	e793      	b.n	801856c <__gethex+0xf8>
 8018644:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018648:	2a2e      	cmp	r2, #46	@ 0x2e
 801864a:	d012      	beq.n	8018672 <__gethex+0x1fe>
 801864c:	2b20      	cmp	r3, #32
 801864e:	d104      	bne.n	801865a <__gethex+0x1e6>
 8018650:	f845 bb04 	str.w	fp, [r5], #4
 8018654:	f04f 0b00 	mov.w	fp, #0
 8018658:	465b      	mov	r3, fp
 801865a:	7830      	ldrb	r0, [r6, #0]
 801865c:	9303      	str	r3, [sp, #12]
 801865e:	f7ff fef3 	bl	8018448 <__hexdig_fun>
 8018662:	9b03      	ldr	r3, [sp, #12]
 8018664:	f000 000f 	and.w	r0, r0, #15
 8018668:	4098      	lsls	r0, r3
 801866a:	ea4b 0b00 	orr.w	fp, fp, r0
 801866e:	3304      	adds	r3, #4
 8018670:	e7ae      	b.n	80185d0 <__gethex+0x15c>
 8018672:	45b1      	cmp	r9, r6
 8018674:	d8ea      	bhi.n	801864c <__gethex+0x1d8>
 8018676:	492b      	ldr	r1, [pc, #172]	@ (8018724 <__gethex+0x2b0>)
 8018678:	9303      	str	r3, [sp, #12]
 801867a:	2201      	movs	r2, #1
 801867c:	4630      	mov	r0, r6
 801867e:	f7ff fe11 	bl	80182a4 <strncmp>
 8018682:	9b03      	ldr	r3, [sp, #12]
 8018684:	2800      	cmp	r0, #0
 8018686:	d1e1      	bne.n	801864c <__gethex+0x1d8>
 8018688:	e7a2      	b.n	80185d0 <__gethex+0x15c>
 801868a:	1ea9      	subs	r1, r5, #2
 801868c:	4620      	mov	r0, r4
 801868e:	f7fe fce4 	bl	801705a <__any_on>
 8018692:	2800      	cmp	r0, #0
 8018694:	d0c2      	beq.n	801861c <__gethex+0x1a8>
 8018696:	f04f 0903 	mov.w	r9, #3
 801869a:	e7c1      	b.n	8018620 <__gethex+0x1ac>
 801869c:	da09      	bge.n	80186b2 <__gethex+0x23e>
 801869e:	1b75      	subs	r5, r6, r5
 80186a0:	4621      	mov	r1, r4
 80186a2:	9801      	ldr	r0, [sp, #4]
 80186a4:	462a      	mov	r2, r5
 80186a6:	f7fe fa9f 	bl	8016be8 <__lshift>
 80186aa:	1b7f      	subs	r7, r7, r5
 80186ac:	4604      	mov	r4, r0
 80186ae:	f100 0a14 	add.w	sl, r0, #20
 80186b2:	f04f 0900 	mov.w	r9, #0
 80186b6:	e7b8      	b.n	801862a <__gethex+0x1b6>
 80186b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80186bc:	42bd      	cmp	r5, r7
 80186be:	dd6f      	ble.n	80187a0 <__gethex+0x32c>
 80186c0:	1bed      	subs	r5, r5, r7
 80186c2:	42ae      	cmp	r6, r5
 80186c4:	dc34      	bgt.n	8018730 <__gethex+0x2bc>
 80186c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80186ca:	2b02      	cmp	r3, #2
 80186cc:	d022      	beq.n	8018714 <__gethex+0x2a0>
 80186ce:	2b03      	cmp	r3, #3
 80186d0:	d024      	beq.n	801871c <__gethex+0x2a8>
 80186d2:	2b01      	cmp	r3, #1
 80186d4:	d115      	bne.n	8018702 <__gethex+0x28e>
 80186d6:	42ae      	cmp	r6, r5
 80186d8:	d113      	bne.n	8018702 <__gethex+0x28e>
 80186da:	2e01      	cmp	r6, #1
 80186dc:	d10b      	bne.n	80186f6 <__gethex+0x282>
 80186de:	9a02      	ldr	r2, [sp, #8]
 80186e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80186e4:	6013      	str	r3, [r2, #0]
 80186e6:	2301      	movs	r3, #1
 80186e8:	6123      	str	r3, [r4, #16]
 80186ea:	f8ca 3000 	str.w	r3, [sl]
 80186ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80186f0:	2562      	movs	r5, #98	@ 0x62
 80186f2:	601c      	str	r4, [r3, #0]
 80186f4:	e73a      	b.n	801856c <__gethex+0xf8>
 80186f6:	1e71      	subs	r1, r6, #1
 80186f8:	4620      	mov	r0, r4
 80186fa:	f7fe fcae 	bl	801705a <__any_on>
 80186fe:	2800      	cmp	r0, #0
 8018700:	d1ed      	bne.n	80186de <__gethex+0x26a>
 8018702:	9801      	ldr	r0, [sp, #4]
 8018704:	4621      	mov	r1, r4
 8018706:	f7fe f857 	bl	80167b8 <_Bfree>
 801870a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801870c:	2300      	movs	r3, #0
 801870e:	6013      	str	r3, [r2, #0]
 8018710:	2550      	movs	r5, #80	@ 0x50
 8018712:	e72b      	b.n	801856c <__gethex+0xf8>
 8018714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018716:	2b00      	cmp	r3, #0
 8018718:	d1f3      	bne.n	8018702 <__gethex+0x28e>
 801871a:	e7e0      	b.n	80186de <__gethex+0x26a>
 801871c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801871e:	2b00      	cmp	r3, #0
 8018720:	d1dd      	bne.n	80186de <__gethex+0x26a>
 8018722:	e7ee      	b.n	8018702 <__gethex+0x28e>
 8018724:	0802e8c0 	.word	0x0802e8c0
 8018728:	0802e755 	.word	0x0802e755
 801872c:	0802ea6e 	.word	0x0802ea6e
 8018730:	1e6f      	subs	r7, r5, #1
 8018732:	f1b9 0f00 	cmp.w	r9, #0
 8018736:	d130      	bne.n	801879a <__gethex+0x326>
 8018738:	b127      	cbz	r7, 8018744 <__gethex+0x2d0>
 801873a:	4639      	mov	r1, r7
 801873c:	4620      	mov	r0, r4
 801873e:	f7fe fc8c 	bl	801705a <__any_on>
 8018742:	4681      	mov	r9, r0
 8018744:	117a      	asrs	r2, r7, #5
 8018746:	2301      	movs	r3, #1
 8018748:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801874c:	f007 071f 	and.w	r7, r7, #31
 8018750:	40bb      	lsls	r3, r7
 8018752:	4213      	tst	r3, r2
 8018754:	4629      	mov	r1, r5
 8018756:	4620      	mov	r0, r4
 8018758:	bf18      	it	ne
 801875a:	f049 0902 	orrne.w	r9, r9, #2
 801875e:	f7ff fe21 	bl	80183a4 <rshift>
 8018762:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8018766:	1b76      	subs	r6, r6, r5
 8018768:	2502      	movs	r5, #2
 801876a:	f1b9 0f00 	cmp.w	r9, #0
 801876e:	d047      	beq.n	8018800 <__gethex+0x38c>
 8018770:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018774:	2b02      	cmp	r3, #2
 8018776:	d015      	beq.n	80187a4 <__gethex+0x330>
 8018778:	2b03      	cmp	r3, #3
 801877a:	d017      	beq.n	80187ac <__gethex+0x338>
 801877c:	2b01      	cmp	r3, #1
 801877e:	d109      	bne.n	8018794 <__gethex+0x320>
 8018780:	f019 0f02 	tst.w	r9, #2
 8018784:	d006      	beq.n	8018794 <__gethex+0x320>
 8018786:	f8da 3000 	ldr.w	r3, [sl]
 801878a:	ea49 0903 	orr.w	r9, r9, r3
 801878e:	f019 0f01 	tst.w	r9, #1
 8018792:	d10e      	bne.n	80187b2 <__gethex+0x33e>
 8018794:	f045 0510 	orr.w	r5, r5, #16
 8018798:	e032      	b.n	8018800 <__gethex+0x38c>
 801879a:	f04f 0901 	mov.w	r9, #1
 801879e:	e7d1      	b.n	8018744 <__gethex+0x2d0>
 80187a0:	2501      	movs	r5, #1
 80187a2:	e7e2      	b.n	801876a <__gethex+0x2f6>
 80187a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80187a6:	f1c3 0301 	rsb	r3, r3, #1
 80187aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80187ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d0f0      	beq.n	8018794 <__gethex+0x320>
 80187b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80187b6:	f104 0314 	add.w	r3, r4, #20
 80187ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80187be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80187c2:	f04f 0c00 	mov.w	ip, #0
 80187c6:	4618      	mov	r0, r3
 80187c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80187cc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80187d0:	d01b      	beq.n	801880a <__gethex+0x396>
 80187d2:	3201      	adds	r2, #1
 80187d4:	6002      	str	r2, [r0, #0]
 80187d6:	2d02      	cmp	r5, #2
 80187d8:	f104 0314 	add.w	r3, r4, #20
 80187dc:	d13c      	bne.n	8018858 <__gethex+0x3e4>
 80187de:	f8d8 2000 	ldr.w	r2, [r8]
 80187e2:	3a01      	subs	r2, #1
 80187e4:	42b2      	cmp	r2, r6
 80187e6:	d109      	bne.n	80187fc <__gethex+0x388>
 80187e8:	1171      	asrs	r1, r6, #5
 80187ea:	2201      	movs	r2, #1
 80187ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80187f0:	f006 061f 	and.w	r6, r6, #31
 80187f4:	fa02 f606 	lsl.w	r6, r2, r6
 80187f8:	421e      	tst	r6, r3
 80187fa:	d13a      	bne.n	8018872 <__gethex+0x3fe>
 80187fc:	f045 0520 	orr.w	r5, r5, #32
 8018800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018802:	601c      	str	r4, [r3, #0]
 8018804:	9b02      	ldr	r3, [sp, #8]
 8018806:	601f      	str	r7, [r3, #0]
 8018808:	e6b0      	b.n	801856c <__gethex+0xf8>
 801880a:	4299      	cmp	r1, r3
 801880c:	f843 cc04 	str.w	ip, [r3, #-4]
 8018810:	d8d9      	bhi.n	80187c6 <__gethex+0x352>
 8018812:	68a3      	ldr	r3, [r4, #8]
 8018814:	459b      	cmp	fp, r3
 8018816:	db17      	blt.n	8018848 <__gethex+0x3d4>
 8018818:	6861      	ldr	r1, [r4, #4]
 801881a:	9801      	ldr	r0, [sp, #4]
 801881c:	3101      	adds	r1, #1
 801881e:	f7fd ff8b 	bl	8016738 <_Balloc>
 8018822:	4681      	mov	r9, r0
 8018824:	b918      	cbnz	r0, 801882e <__gethex+0x3ba>
 8018826:	4b1a      	ldr	r3, [pc, #104]	@ (8018890 <__gethex+0x41c>)
 8018828:	4602      	mov	r2, r0
 801882a:	2184      	movs	r1, #132	@ 0x84
 801882c:	e6c5      	b.n	80185ba <__gethex+0x146>
 801882e:	6922      	ldr	r2, [r4, #16]
 8018830:	3202      	adds	r2, #2
 8018832:	f104 010c 	add.w	r1, r4, #12
 8018836:	0092      	lsls	r2, r2, #2
 8018838:	300c      	adds	r0, #12
 801883a:	f7fd f81a 	bl	8015872 <memcpy>
 801883e:	4621      	mov	r1, r4
 8018840:	9801      	ldr	r0, [sp, #4]
 8018842:	f7fd ffb9 	bl	80167b8 <_Bfree>
 8018846:	464c      	mov	r4, r9
 8018848:	6923      	ldr	r3, [r4, #16]
 801884a:	1c5a      	adds	r2, r3, #1
 801884c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018850:	6122      	str	r2, [r4, #16]
 8018852:	2201      	movs	r2, #1
 8018854:	615a      	str	r2, [r3, #20]
 8018856:	e7be      	b.n	80187d6 <__gethex+0x362>
 8018858:	6922      	ldr	r2, [r4, #16]
 801885a:	455a      	cmp	r2, fp
 801885c:	dd0b      	ble.n	8018876 <__gethex+0x402>
 801885e:	2101      	movs	r1, #1
 8018860:	4620      	mov	r0, r4
 8018862:	f7ff fd9f 	bl	80183a4 <rshift>
 8018866:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801886a:	3701      	adds	r7, #1
 801886c:	42bb      	cmp	r3, r7
 801886e:	f6ff aee0 	blt.w	8018632 <__gethex+0x1be>
 8018872:	2501      	movs	r5, #1
 8018874:	e7c2      	b.n	80187fc <__gethex+0x388>
 8018876:	f016 061f 	ands.w	r6, r6, #31
 801887a:	d0fa      	beq.n	8018872 <__gethex+0x3fe>
 801887c:	4453      	add	r3, sl
 801887e:	f1c6 0620 	rsb	r6, r6, #32
 8018882:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018886:	f7fe f849 	bl	801691c <__hi0bits>
 801888a:	42b0      	cmp	r0, r6
 801888c:	dbe7      	blt.n	801885e <__gethex+0x3ea>
 801888e:	e7f0      	b.n	8018872 <__gethex+0x3fe>
 8018890:	0802e755 	.word	0x0802e755

08018894 <L_shift>:
 8018894:	f1c2 0208 	rsb	r2, r2, #8
 8018898:	0092      	lsls	r2, r2, #2
 801889a:	b570      	push	{r4, r5, r6, lr}
 801889c:	f1c2 0620 	rsb	r6, r2, #32
 80188a0:	6843      	ldr	r3, [r0, #4]
 80188a2:	6804      	ldr	r4, [r0, #0]
 80188a4:	fa03 f506 	lsl.w	r5, r3, r6
 80188a8:	432c      	orrs	r4, r5
 80188aa:	40d3      	lsrs	r3, r2
 80188ac:	6004      	str	r4, [r0, #0]
 80188ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80188b2:	4288      	cmp	r0, r1
 80188b4:	d3f4      	bcc.n	80188a0 <L_shift+0xc>
 80188b6:	bd70      	pop	{r4, r5, r6, pc}

080188b8 <__match>:
 80188b8:	b530      	push	{r4, r5, lr}
 80188ba:	6803      	ldr	r3, [r0, #0]
 80188bc:	3301      	adds	r3, #1
 80188be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188c2:	b914      	cbnz	r4, 80188ca <__match+0x12>
 80188c4:	6003      	str	r3, [r0, #0]
 80188c6:	2001      	movs	r0, #1
 80188c8:	bd30      	pop	{r4, r5, pc}
 80188ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80188d2:	2d19      	cmp	r5, #25
 80188d4:	bf98      	it	ls
 80188d6:	3220      	addls	r2, #32
 80188d8:	42a2      	cmp	r2, r4
 80188da:	d0f0      	beq.n	80188be <__match+0x6>
 80188dc:	2000      	movs	r0, #0
 80188de:	e7f3      	b.n	80188c8 <__match+0x10>

080188e0 <__hexnan>:
 80188e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188e4:	680b      	ldr	r3, [r1, #0]
 80188e6:	6801      	ldr	r1, [r0, #0]
 80188e8:	115e      	asrs	r6, r3, #5
 80188ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80188ee:	f013 031f 	ands.w	r3, r3, #31
 80188f2:	b087      	sub	sp, #28
 80188f4:	bf18      	it	ne
 80188f6:	3604      	addne	r6, #4
 80188f8:	2500      	movs	r5, #0
 80188fa:	1f37      	subs	r7, r6, #4
 80188fc:	4682      	mov	sl, r0
 80188fe:	4690      	mov	r8, r2
 8018900:	9301      	str	r3, [sp, #4]
 8018902:	f846 5c04 	str.w	r5, [r6, #-4]
 8018906:	46b9      	mov	r9, r7
 8018908:	463c      	mov	r4, r7
 801890a:	9502      	str	r5, [sp, #8]
 801890c:	46ab      	mov	fp, r5
 801890e:	784a      	ldrb	r2, [r1, #1]
 8018910:	1c4b      	adds	r3, r1, #1
 8018912:	9303      	str	r3, [sp, #12]
 8018914:	b342      	cbz	r2, 8018968 <__hexnan+0x88>
 8018916:	4610      	mov	r0, r2
 8018918:	9105      	str	r1, [sp, #20]
 801891a:	9204      	str	r2, [sp, #16]
 801891c:	f7ff fd94 	bl	8018448 <__hexdig_fun>
 8018920:	2800      	cmp	r0, #0
 8018922:	d151      	bne.n	80189c8 <__hexnan+0xe8>
 8018924:	9a04      	ldr	r2, [sp, #16]
 8018926:	9905      	ldr	r1, [sp, #20]
 8018928:	2a20      	cmp	r2, #32
 801892a:	d818      	bhi.n	801895e <__hexnan+0x7e>
 801892c:	9b02      	ldr	r3, [sp, #8]
 801892e:	459b      	cmp	fp, r3
 8018930:	dd13      	ble.n	801895a <__hexnan+0x7a>
 8018932:	454c      	cmp	r4, r9
 8018934:	d206      	bcs.n	8018944 <__hexnan+0x64>
 8018936:	2d07      	cmp	r5, #7
 8018938:	dc04      	bgt.n	8018944 <__hexnan+0x64>
 801893a:	462a      	mov	r2, r5
 801893c:	4649      	mov	r1, r9
 801893e:	4620      	mov	r0, r4
 8018940:	f7ff ffa8 	bl	8018894 <L_shift>
 8018944:	4544      	cmp	r4, r8
 8018946:	d952      	bls.n	80189ee <__hexnan+0x10e>
 8018948:	2300      	movs	r3, #0
 801894a:	f1a4 0904 	sub.w	r9, r4, #4
 801894e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018952:	f8cd b008 	str.w	fp, [sp, #8]
 8018956:	464c      	mov	r4, r9
 8018958:	461d      	mov	r5, r3
 801895a:	9903      	ldr	r1, [sp, #12]
 801895c:	e7d7      	b.n	801890e <__hexnan+0x2e>
 801895e:	2a29      	cmp	r2, #41	@ 0x29
 8018960:	d157      	bne.n	8018a12 <__hexnan+0x132>
 8018962:	3102      	adds	r1, #2
 8018964:	f8ca 1000 	str.w	r1, [sl]
 8018968:	f1bb 0f00 	cmp.w	fp, #0
 801896c:	d051      	beq.n	8018a12 <__hexnan+0x132>
 801896e:	454c      	cmp	r4, r9
 8018970:	d206      	bcs.n	8018980 <__hexnan+0xa0>
 8018972:	2d07      	cmp	r5, #7
 8018974:	dc04      	bgt.n	8018980 <__hexnan+0xa0>
 8018976:	462a      	mov	r2, r5
 8018978:	4649      	mov	r1, r9
 801897a:	4620      	mov	r0, r4
 801897c:	f7ff ff8a 	bl	8018894 <L_shift>
 8018980:	4544      	cmp	r4, r8
 8018982:	d936      	bls.n	80189f2 <__hexnan+0x112>
 8018984:	f1a8 0204 	sub.w	r2, r8, #4
 8018988:	4623      	mov	r3, r4
 801898a:	f853 1b04 	ldr.w	r1, [r3], #4
 801898e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018992:	429f      	cmp	r7, r3
 8018994:	d2f9      	bcs.n	801898a <__hexnan+0xaa>
 8018996:	1b3b      	subs	r3, r7, r4
 8018998:	f023 0303 	bic.w	r3, r3, #3
 801899c:	3304      	adds	r3, #4
 801899e:	3401      	adds	r4, #1
 80189a0:	3e03      	subs	r6, #3
 80189a2:	42b4      	cmp	r4, r6
 80189a4:	bf88      	it	hi
 80189a6:	2304      	movhi	r3, #4
 80189a8:	4443      	add	r3, r8
 80189aa:	2200      	movs	r2, #0
 80189ac:	f843 2b04 	str.w	r2, [r3], #4
 80189b0:	429f      	cmp	r7, r3
 80189b2:	d2fb      	bcs.n	80189ac <__hexnan+0xcc>
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	b91b      	cbnz	r3, 80189c0 <__hexnan+0xe0>
 80189b8:	4547      	cmp	r7, r8
 80189ba:	d128      	bne.n	8018a0e <__hexnan+0x12e>
 80189bc:	2301      	movs	r3, #1
 80189be:	603b      	str	r3, [r7, #0]
 80189c0:	2005      	movs	r0, #5
 80189c2:	b007      	add	sp, #28
 80189c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c8:	3501      	adds	r5, #1
 80189ca:	2d08      	cmp	r5, #8
 80189cc:	f10b 0b01 	add.w	fp, fp, #1
 80189d0:	dd06      	ble.n	80189e0 <__hexnan+0x100>
 80189d2:	4544      	cmp	r4, r8
 80189d4:	d9c1      	bls.n	801895a <__hexnan+0x7a>
 80189d6:	2300      	movs	r3, #0
 80189d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80189dc:	2501      	movs	r5, #1
 80189de:	3c04      	subs	r4, #4
 80189e0:	6822      	ldr	r2, [r4, #0]
 80189e2:	f000 000f 	and.w	r0, r0, #15
 80189e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80189ea:	6020      	str	r0, [r4, #0]
 80189ec:	e7b5      	b.n	801895a <__hexnan+0x7a>
 80189ee:	2508      	movs	r5, #8
 80189f0:	e7b3      	b.n	801895a <__hexnan+0x7a>
 80189f2:	9b01      	ldr	r3, [sp, #4]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d0dd      	beq.n	80189b4 <__hexnan+0xd4>
 80189f8:	f1c3 0320 	rsb	r3, r3, #32
 80189fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018a00:	40da      	lsrs	r2, r3
 8018a02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018a06:	4013      	ands	r3, r2
 8018a08:	f846 3c04 	str.w	r3, [r6, #-4]
 8018a0c:	e7d2      	b.n	80189b4 <__hexnan+0xd4>
 8018a0e:	3f04      	subs	r7, #4
 8018a10:	e7d0      	b.n	80189b4 <__hexnan+0xd4>
 8018a12:	2004      	movs	r0, #4
 8018a14:	e7d5      	b.n	80189c2 <__hexnan+0xe2>

08018a16 <__ascii_mbtowc>:
 8018a16:	b082      	sub	sp, #8
 8018a18:	b901      	cbnz	r1, 8018a1c <__ascii_mbtowc+0x6>
 8018a1a:	a901      	add	r1, sp, #4
 8018a1c:	b142      	cbz	r2, 8018a30 <__ascii_mbtowc+0x1a>
 8018a1e:	b14b      	cbz	r3, 8018a34 <__ascii_mbtowc+0x1e>
 8018a20:	7813      	ldrb	r3, [r2, #0]
 8018a22:	600b      	str	r3, [r1, #0]
 8018a24:	7812      	ldrb	r2, [r2, #0]
 8018a26:	1e10      	subs	r0, r2, #0
 8018a28:	bf18      	it	ne
 8018a2a:	2001      	movne	r0, #1
 8018a2c:	b002      	add	sp, #8
 8018a2e:	4770      	bx	lr
 8018a30:	4610      	mov	r0, r2
 8018a32:	e7fb      	b.n	8018a2c <__ascii_mbtowc+0x16>
 8018a34:	f06f 0001 	mvn.w	r0, #1
 8018a38:	e7f8      	b.n	8018a2c <__ascii_mbtowc+0x16>

08018a3a <_realloc_r>:
 8018a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a3e:	4680      	mov	r8, r0
 8018a40:	4615      	mov	r5, r2
 8018a42:	460c      	mov	r4, r1
 8018a44:	b921      	cbnz	r1, 8018a50 <_realloc_r+0x16>
 8018a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a4a:	4611      	mov	r1, r2
 8018a4c:	f7fd bde8 	b.w	8016620 <_malloc_r>
 8018a50:	b92a      	cbnz	r2, 8018a5e <_realloc_r+0x24>
 8018a52:	f7fd fd71 	bl	8016538 <_free_r>
 8018a56:	2400      	movs	r4, #0
 8018a58:	4620      	mov	r0, r4
 8018a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a5e:	f000 f840 	bl	8018ae2 <_malloc_usable_size_r>
 8018a62:	4285      	cmp	r5, r0
 8018a64:	4606      	mov	r6, r0
 8018a66:	d802      	bhi.n	8018a6e <_realloc_r+0x34>
 8018a68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018a6c:	d8f4      	bhi.n	8018a58 <_realloc_r+0x1e>
 8018a6e:	4629      	mov	r1, r5
 8018a70:	4640      	mov	r0, r8
 8018a72:	f7fd fdd5 	bl	8016620 <_malloc_r>
 8018a76:	4607      	mov	r7, r0
 8018a78:	2800      	cmp	r0, #0
 8018a7a:	d0ec      	beq.n	8018a56 <_realloc_r+0x1c>
 8018a7c:	42b5      	cmp	r5, r6
 8018a7e:	462a      	mov	r2, r5
 8018a80:	4621      	mov	r1, r4
 8018a82:	bf28      	it	cs
 8018a84:	4632      	movcs	r2, r6
 8018a86:	f7fc fef4 	bl	8015872 <memcpy>
 8018a8a:	4621      	mov	r1, r4
 8018a8c:	4640      	mov	r0, r8
 8018a8e:	f7fd fd53 	bl	8016538 <_free_r>
 8018a92:	463c      	mov	r4, r7
 8018a94:	e7e0      	b.n	8018a58 <_realloc_r+0x1e>

08018a96 <__ascii_wctomb>:
 8018a96:	4603      	mov	r3, r0
 8018a98:	4608      	mov	r0, r1
 8018a9a:	b141      	cbz	r1, 8018aae <__ascii_wctomb+0x18>
 8018a9c:	2aff      	cmp	r2, #255	@ 0xff
 8018a9e:	d904      	bls.n	8018aaa <__ascii_wctomb+0x14>
 8018aa0:	228a      	movs	r2, #138	@ 0x8a
 8018aa2:	601a      	str	r2, [r3, #0]
 8018aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018aa8:	4770      	bx	lr
 8018aaa:	700a      	strb	r2, [r1, #0]
 8018aac:	2001      	movs	r0, #1
 8018aae:	4770      	bx	lr

08018ab0 <fiprintf>:
 8018ab0:	b40e      	push	{r1, r2, r3}
 8018ab2:	b503      	push	{r0, r1, lr}
 8018ab4:	4601      	mov	r1, r0
 8018ab6:	ab03      	add	r3, sp, #12
 8018ab8:	4805      	ldr	r0, [pc, #20]	@ (8018ad0 <fiprintf+0x20>)
 8018aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8018abe:	6800      	ldr	r0, [r0, #0]
 8018ac0:	9301      	str	r3, [sp, #4]
 8018ac2:	f000 f83f 	bl	8018b44 <_vfiprintf_r>
 8018ac6:	b002      	add	sp, #8
 8018ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018acc:	b003      	add	sp, #12
 8018ace:	4770      	bx	lr
 8018ad0:	20000140 	.word	0x20000140

08018ad4 <abort>:
 8018ad4:	b508      	push	{r3, lr}
 8018ad6:	2006      	movs	r0, #6
 8018ad8:	f000 f974 	bl	8018dc4 <raise>
 8018adc:	2001      	movs	r0, #1
 8018ade:	f7ea fb6d 	bl	80031bc <_exit>

08018ae2 <_malloc_usable_size_r>:
 8018ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ae6:	1f18      	subs	r0, r3, #4
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	bfbc      	itt	lt
 8018aec:	580b      	ldrlt	r3, [r1, r0]
 8018aee:	18c0      	addlt	r0, r0, r3
 8018af0:	4770      	bx	lr

08018af2 <__sfputc_r>:
 8018af2:	6893      	ldr	r3, [r2, #8]
 8018af4:	3b01      	subs	r3, #1
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	b410      	push	{r4}
 8018afa:	6093      	str	r3, [r2, #8]
 8018afc:	da08      	bge.n	8018b10 <__sfputc_r+0x1e>
 8018afe:	6994      	ldr	r4, [r2, #24]
 8018b00:	42a3      	cmp	r3, r4
 8018b02:	db01      	blt.n	8018b08 <__sfputc_r+0x16>
 8018b04:	290a      	cmp	r1, #10
 8018b06:	d103      	bne.n	8018b10 <__sfputc_r+0x1e>
 8018b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b0c:	f7fc bd48 	b.w	80155a0 <__swbuf_r>
 8018b10:	6813      	ldr	r3, [r2, #0]
 8018b12:	1c58      	adds	r0, r3, #1
 8018b14:	6010      	str	r0, [r2, #0]
 8018b16:	7019      	strb	r1, [r3, #0]
 8018b18:	4608      	mov	r0, r1
 8018b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b1e:	4770      	bx	lr

08018b20 <__sfputs_r>:
 8018b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b22:	4606      	mov	r6, r0
 8018b24:	460f      	mov	r7, r1
 8018b26:	4614      	mov	r4, r2
 8018b28:	18d5      	adds	r5, r2, r3
 8018b2a:	42ac      	cmp	r4, r5
 8018b2c:	d101      	bne.n	8018b32 <__sfputs_r+0x12>
 8018b2e:	2000      	movs	r0, #0
 8018b30:	e007      	b.n	8018b42 <__sfputs_r+0x22>
 8018b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b36:	463a      	mov	r2, r7
 8018b38:	4630      	mov	r0, r6
 8018b3a:	f7ff ffda 	bl	8018af2 <__sfputc_r>
 8018b3e:	1c43      	adds	r3, r0, #1
 8018b40:	d1f3      	bne.n	8018b2a <__sfputs_r+0xa>
 8018b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018b44 <_vfiprintf_r>:
 8018b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b48:	460d      	mov	r5, r1
 8018b4a:	b09d      	sub	sp, #116	@ 0x74
 8018b4c:	4614      	mov	r4, r2
 8018b4e:	4698      	mov	r8, r3
 8018b50:	4606      	mov	r6, r0
 8018b52:	b118      	cbz	r0, 8018b5c <_vfiprintf_r+0x18>
 8018b54:	6a03      	ldr	r3, [r0, #32]
 8018b56:	b90b      	cbnz	r3, 8018b5c <_vfiprintf_r+0x18>
 8018b58:	f7fc fbf2 	bl	8015340 <__sinit>
 8018b5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b5e:	07d9      	lsls	r1, r3, #31
 8018b60:	d405      	bmi.n	8018b6e <_vfiprintf_r+0x2a>
 8018b62:	89ab      	ldrh	r3, [r5, #12]
 8018b64:	059a      	lsls	r2, r3, #22
 8018b66:	d402      	bmi.n	8018b6e <_vfiprintf_r+0x2a>
 8018b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b6a:	f7fc fe80 	bl	801586e <__retarget_lock_acquire_recursive>
 8018b6e:	89ab      	ldrh	r3, [r5, #12]
 8018b70:	071b      	lsls	r3, r3, #28
 8018b72:	d501      	bpl.n	8018b78 <_vfiprintf_r+0x34>
 8018b74:	692b      	ldr	r3, [r5, #16]
 8018b76:	b99b      	cbnz	r3, 8018ba0 <_vfiprintf_r+0x5c>
 8018b78:	4629      	mov	r1, r5
 8018b7a:	4630      	mov	r0, r6
 8018b7c:	f7fc fd4e 	bl	801561c <__swsetup_r>
 8018b80:	b170      	cbz	r0, 8018ba0 <_vfiprintf_r+0x5c>
 8018b82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b84:	07dc      	lsls	r4, r3, #31
 8018b86:	d504      	bpl.n	8018b92 <_vfiprintf_r+0x4e>
 8018b88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018b8c:	b01d      	add	sp, #116	@ 0x74
 8018b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b92:	89ab      	ldrh	r3, [r5, #12]
 8018b94:	0598      	lsls	r0, r3, #22
 8018b96:	d4f7      	bmi.n	8018b88 <_vfiprintf_r+0x44>
 8018b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b9a:	f7fc fe69 	bl	8015870 <__retarget_lock_release_recursive>
 8018b9e:	e7f3      	b.n	8018b88 <_vfiprintf_r+0x44>
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ba4:	2320      	movs	r3, #32
 8018ba6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018baa:	f8cd 800c 	str.w	r8, [sp, #12]
 8018bae:	2330      	movs	r3, #48	@ 0x30
 8018bb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018d60 <_vfiprintf_r+0x21c>
 8018bb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018bb8:	f04f 0901 	mov.w	r9, #1
 8018bbc:	4623      	mov	r3, r4
 8018bbe:	469a      	mov	sl, r3
 8018bc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018bc4:	b10a      	cbz	r2, 8018bca <_vfiprintf_r+0x86>
 8018bc6:	2a25      	cmp	r2, #37	@ 0x25
 8018bc8:	d1f9      	bne.n	8018bbe <_vfiprintf_r+0x7a>
 8018bca:	ebba 0b04 	subs.w	fp, sl, r4
 8018bce:	d00b      	beq.n	8018be8 <_vfiprintf_r+0xa4>
 8018bd0:	465b      	mov	r3, fp
 8018bd2:	4622      	mov	r2, r4
 8018bd4:	4629      	mov	r1, r5
 8018bd6:	4630      	mov	r0, r6
 8018bd8:	f7ff ffa2 	bl	8018b20 <__sfputs_r>
 8018bdc:	3001      	adds	r0, #1
 8018bde:	f000 80a7 	beq.w	8018d30 <_vfiprintf_r+0x1ec>
 8018be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018be4:	445a      	add	r2, fp
 8018be6:	9209      	str	r2, [sp, #36]	@ 0x24
 8018be8:	f89a 3000 	ldrb.w	r3, [sl]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	f000 809f 	beq.w	8018d30 <_vfiprintf_r+0x1ec>
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018bfc:	f10a 0a01 	add.w	sl, sl, #1
 8018c00:	9304      	str	r3, [sp, #16]
 8018c02:	9307      	str	r3, [sp, #28]
 8018c04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018c08:	931a      	str	r3, [sp, #104]	@ 0x68
 8018c0a:	4654      	mov	r4, sl
 8018c0c:	2205      	movs	r2, #5
 8018c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c12:	4853      	ldr	r0, [pc, #332]	@ (8018d60 <_vfiprintf_r+0x21c>)
 8018c14:	f7e7 fae4 	bl	80001e0 <memchr>
 8018c18:	9a04      	ldr	r2, [sp, #16]
 8018c1a:	b9d8      	cbnz	r0, 8018c54 <_vfiprintf_r+0x110>
 8018c1c:	06d1      	lsls	r1, r2, #27
 8018c1e:	bf44      	itt	mi
 8018c20:	2320      	movmi	r3, #32
 8018c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c26:	0713      	lsls	r3, r2, #28
 8018c28:	bf44      	itt	mi
 8018c2a:	232b      	movmi	r3, #43	@ 0x2b
 8018c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c30:	f89a 3000 	ldrb.w	r3, [sl]
 8018c34:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c36:	d015      	beq.n	8018c64 <_vfiprintf_r+0x120>
 8018c38:	9a07      	ldr	r2, [sp, #28]
 8018c3a:	4654      	mov	r4, sl
 8018c3c:	2000      	movs	r0, #0
 8018c3e:	f04f 0c0a 	mov.w	ip, #10
 8018c42:	4621      	mov	r1, r4
 8018c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c48:	3b30      	subs	r3, #48	@ 0x30
 8018c4a:	2b09      	cmp	r3, #9
 8018c4c:	d94b      	bls.n	8018ce6 <_vfiprintf_r+0x1a2>
 8018c4e:	b1b0      	cbz	r0, 8018c7e <_vfiprintf_r+0x13a>
 8018c50:	9207      	str	r2, [sp, #28]
 8018c52:	e014      	b.n	8018c7e <_vfiprintf_r+0x13a>
 8018c54:	eba0 0308 	sub.w	r3, r0, r8
 8018c58:	fa09 f303 	lsl.w	r3, r9, r3
 8018c5c:	4313      	orrs	r3, r2
 8018c5e:	9304      	str	r3, [sp, #16]
 8018c60:	46a2      	mov	sl, r4
 8018c62:	e7d2      	b.n	8018c0a <_vfiprintf_r+0xc6>
 8018c64:	9b03      	ldr	r3, [sp, #12]
 8018c66:	1d19      	adds	r1, r3, #4
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	9103      	str	r1, [sp, #12]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	bfbb      	ittet	lt
 8018c70:	425b      	neglt	r3, r3
 8018c72:	f042 0202 	orrlt.w	r2, r2, #2
 8018c76:	9307      	strge	r3, [sp, #28]
 8018c78:	9307      	strlt	r3, [sp, #28]
 8018c7a:	bfb8      	it	lt
 8018c7c:	9204      	strlt	r2, [sp, #16]
 8018c7e:	7823      	ldrb	r3, [r4, #0]
 8018c80:	2b2e      	cmp	r3, #46	@ 0x2e
 8018c82:	d10a      	bne.n	8018c9a <_vfiprintf_r+0x156>
 8018c84:	7863      	ldrb	r3, [r4, #1]
 8018c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c88:	d132      	bne.n	8018cf0 <_vfiprintf_r+0x1ac>
 8018c8a:	9b03      	ldr	r3, [sp, #12]
 8018c8c:	1d1a      	adds	r2, r3, #4
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	9203      	str	r2, [sp, #12]
 8018c92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018c96:	3402      	adds	r4, #2
 8018c98:	9305      	str	r3, [sp, #20]
 8018c9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018d70 <_vfiprintf_r+0x22c>
 8018c9e:	7821      	ldrb	r1, [r4, #0]
 8018ca0:	2203      	movs	r2, #3
 8018ca2:	4650      	mov	r0, sl
 8018ca4:	f7e7 fa9c 	bl	80001e0 <memchr>
 8018ca8:	b138      	cbz	r0, 8018cba <_vfiprintf_r+0x176>
 8018caa:	9b04      	ldr	r3, [sp, #16]
 8018cac:	eba0 000a 	sub.w	r0, r0, sl
 8018cb0:	2240      	movs	r2, #64	@ 0x40
 8018cb2:	4082      	lsls	r2, r0
 8018cb4:	4313      	orrs	r3, r2
 8018cb6:	3401      	adds	r4, #1
 8018cb8:	9304      	str	r3, [sp, #16]
 8018cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cbe:	4829      	ldr	r0, [pc, #164]	@ (8018d64 <_vfiprintf_r+0x220>)
 8018cc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018cc4:	2206      	movs	r2, #6
 8018cc6:	f7e7 fa8b 	bl	80001e0 <memchr>
 8018cca:	2800      	cmp	r0, #0
 8018ccc:	d03f      	beq.n	8018d4e <_vfiprintf_r+0x20a>
 8018cce:	4b26      	ldr	r3, [pc, #152]	@ (8018d68 <_vfiprintf_r+0x224>)
 8018cd0:	bb1b      	cbnz	r3, 8018d1a <_vfiprintf_r+0x1d6>
 8018cd2:	9b03      	ldr	r3, [sp, #12]
 8018cd4:	3307      	adds	r3, #7
 8018cd6:	f023 0307 	bic.w	r3, r3, #7
 8018cda:	3308      	adds	r3, #8
 8018cdc:	9303      	str	r3, [sp, #12]
 8018cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ce0:	443b      	add	r3, r7
 8018ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ce4:	e76a      	b.n	8018bbc <_vfiprintf_r+0x78>
 8018ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8018cea:	460c      	mov	r4, r1
 8018cec:	2001      	movs	r0, #1
 8018cee:	e7a8      	b.n	8018c42 <_vfiprintf_r+0xfe>
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	3401      	adds	r4, #1
 8018cf4:	9305      	str	r3, [sp, #20]
 8018cf6:	4619      	mov	r1, r3
 8018cf8:	f04f 0c0a 	mov.w	ip, #10
 8018cfc:	4620      	mov	r0, r4
 8018cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d02:	3a30      	subs	r2, #48	@ 0x30
 8018d04:	2a09      	cmp	r2, #9
 8018d06:	d903      	bls.n	8018d10 <_vfiprintf_r+0x1cc>
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d0c6      	beq.n	8018c9a <_vfiprintf_r+0x156>
 8018d0c:	9105      	str	r1, [sp, #20]
 8018d0e:	e7c4      	b.n	8018c9a <_vfiprintf_r+0x156>
 8018d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d14:	4604      	mov	r4, r0
 8018d16:	2301      	movs	r3, #1
 8018d18:	e7f0      	b.n	8018cfc <_vfiprintf_r+0x1b8>
 8018d1a:	ab03      	add	r3, sp, #12
 8018d1c:	9300      	str	r3, [sp, #0]
 8018d1e:	462a      	mov	r2, r5
 8018d20:	4b12      	ldr	r3, [pc, #72]	@ (8018d6c <_vfiprintf_r+0x228>)
 8018d22:	a904      	add	r1, sp, #16
 8018d24:	4630      	mov	r0, r6
 8018d26:	f7fb fcb3 	bl	8014690 <_printf_float>
 8018d2a:	4607      	mov	r7, r0
 8018d2c:	1c78      	adds	r0, r7, #1
 8018d2e:	d1d6      	bne.n	8018cde <_vfiprintf_r+0x19a>
 8018d30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d32:	07d9      	lsls	r1, r3, #31
 8018d34:	d405      	bmi.n	8018d42 <_vfiprintf_r+0x1fe>
 8018d36:	89ab      	ldrh	r3, [r5, #12]
 8018d38:	059a      	lsls	r2, r3, #22
 8018d3a:	d402      	bmi.n	8018d42 <_vfiprintf_r+0x1fe>
 8018d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d3e:	f7fc fd97 	bl	8015870 <__retarget_lock_release_recursive>
 8018d42:	89ab      	ldrh	r3, [r5, #12]
 8018d44:	065b      	lsls	r3, r3, #25
 8018d46:	f53f af1f 	bmi.w	8018b88 <_vfiprintf_r+0x44>
 8018d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018d4c:	e71e      	b.n	8018b8c <_vfiprintf_r+0x48>
 8018d4e:	ab03      	add	r3, sp, #12
 8018d50:	9300      	str	r3, [sp, #0]
 8018d52:	462a      	mov	r2, r5
 8018d54:	4b05      	ldr	r3, [pc, #20]	@ (8018d6c <_vfiprintf_r+0x228>)
 8018d56:	a904      	add	r1, sp, #16
 8018d58:	4630      	mov	r0, r6
 8018d5a:	f7fb ff31 	bl	8014bc0 <_printf_i>
 8018d5e:	e7e4      	b.n	8018d2a <_vfiprintf_r+0x1e6>
 8018d60:	0802ea19 	.word	0x0802ea19
 8018d64:	0802ea23 	.word	0x0802ea23
 8018d68:	08014691 	.word	0x08014691
 8018d6c:	08018b21 	.word	0x08018b21
 8018d70:	0802ea1f 	.word	0x0802ea1f

08018d74 <_raise_r>:
 8018d74:	291f      	cmp	r1, #31
 8018d76:	b538      	push	{r3, r4, r5, lr}
 8018d78:	4605      	mov	r5, r0
 8018d7a:	460c      	mov	r4, r1
 8018d7c:	d904      	bls.n	8018d88 <_raise_r+0x14>
 8018d7e:	2316      	movs	r3, #22
 8018d80:	6003      	str	r3, [r0, #0]
 8018d82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018d86:	bd38      	pop	{r3, r4, r5, pc}
 8018d88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018d8a:	b112      	cbz	r2, 8018d92 <_raise_r+0x1e>
 8018d8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018d90:	b94b      	cbnz	r3, 8018da6 <_raise_r+0x32>
 8018d92:	4628      	mov	r0, r5
 8018d94:	f000 f830 	bl	8018df8 <_getpid_r>
 8018d98:	4622      	mov	r2, r4
 8018d9a:	4601      	mov	r1, r0
 8018d9c:	4628      	mov	r0, r5
 8018d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018da2:	f000 b817 	b.w	8018dd4 <_kill_r>
 8018da6:	2b01      	cmp	r3, #1
 8018da8:	d00a      	beq.n	8018dc0 <_raise_r+0x4c>
 8018daa:	1c59      	adds	r1, r3, #1
 8018dac:	d103      	bne.n	8018db6 <_raise_r+0x42>
 8018dae:	2316      	movs	r3, #22
 8018db0:	6003      	str	r3, [r0, #0]
 8018db2:	2001      	movs	r0, #1
 8018db4:	e7e7      	b.n	8018d86 <_raise_r+0x12>
 8018db6:	2100      	movs	r1, #0
 8018db8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018dbc:	4620      	mov	r0, r4
 8018dbe:	4798      	blx	r3
 8018dc0:	2000      	movs	r0, #0
 8018dc2:	e7e0      	b.n	8018d86 <_raise_r+0x12>

08018dc4 <raise>:
 8018dc4:	4b02      	ldr	r3, [pc, #8]	@ (8018dd0 <raise+0xc>)
 8018dc6:	4601      	mov	r1, r0
 8018dc8:	6818      	ldr	r0, [r3, #0]
 8018dca:	f7ff bfd3 	b.w	8018d74 <_raise_r>
 8018dce:	bf00      	nop
 8018dd0:	20000140 	.word	0x20000140

08018dd4 <_kill_r>:
 8018dd4:	b538      	push	{r3, r4, r5, lr}
 8018dd6:	4d07      	ldr	r5, [pc, #28]	@ (8018df4 <_kill_r+0x20>)
 8018dd8:	2300      	movs	r3, #0
 8018dda:	4604      	mov	r4, r0
 8018ddc:	4608      	mov	r0, r1
 8018dde:	4611      	mov	r1, r2
 8018de0:	602b      	str	r3, [r5, #0]
 8018de2:	f7ea f9db 	bl	800319c <_kill>
 8018de6:	1c43      	adds	r3, r0, #1
 8018de8:	d102      	bne.n	8018df0 <_kill_r+0x1c>
 8018dea:	682b      	ldr	r3, [r5, #0]
 8018dec:	b103      	cbz	r3, 8018df0 <_kill_r+0x1c>
 8018dee:	6023      	str	r3, [r4, #0]
 8018df0:	bd38      	pop	{r3, r4, r5, pc}
 8018df2:	bf00      	nop
 8018df4:	200233b8 	.word	0x200233b8

08018df8 <_getpid_r>:
 8018df8:	f7ea b9c8 	b.w	800318c <_getpid>

08018dfc <pow>:
 8018dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dfe:	ed2d 8b02 	vpush	{d8}
 8018e02:	eeb0 8a40 	vmov.f32	s16, s0
 8018e06:	eef0 8a60 	vmov.f32	s17, s1
 8018e0a:	ec55 4b11 	vmov	r4, r5, d1
 8018e0e:	f000 fd67 	bl	80198e0 <__ieee754_pow>
 8018e12:	4622      	mov	r2, r4
 8018e14:	462b      	mov	r3, r5
 8018e16:	4620      	mov	r0, r4
 8018e18:	4629      	mov	r1, r5
 8018e1a:	ec57 6b10 	vmov	r6, r7, d0
 8018e1e:	f7e7 fe8d 	bl	8000b3c <__aeabi_dcmpun>
 8018e22:	2800      	cmp	r0, #0
 8018e24:	d13b      	bne.n	8018e9e <pow+0xa2>
 8018e26:	ec51 0b18 	vmov	r0, r1, d8
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	f7e7 fe53 	bl	8000ad8 <__aeabi_dcmpeq>
 8018e32:	b1b8      	cbz	r0, 8018e64 <pow+0x68>
 8018e34:	2200      	movs	r2, #0
 8018e36:	2300      	movs	r3, #0
 8018e38:	4620      	mov	r0, r4
 8018e3a:	4629      	mov	r1, r5
 8018e3c:	f7e7 fe4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8018e40:	2800      	cmp	r0, #0
 8018e42:	d146      	bne.n	8018ed2 <pow+0xd6>
 8018e44:	ec45 4b10 	vmov	d0, r4, r5
 8018e48:	f000 fadc 	bl	8019404 <finite>
 8018e4c:	b338      	cbz	r0, 8018e9e <pow+0xa2>
 8018e4e:	2200      	movs	r2, #0
 8018e50:	2300      	movs	r3, #0
 8018e52:	4620      	mov	r0, r4
 8018e54:	4629      	mov	r1, r5
 8018e56:	f7e7 fe49 	bl	8000aec <__aeabi_dcmplt>
 8018e5a:	b300      	cbz	r0, 8018e9e <pow+0xa2>
 8018e5c:	f7fc fcdc 	bl	8015818 <__errno>
 8018e60:	2322      	movs	r3, #34	@ 0x22
 8018e62:	e01b      	b.n	8018e9c <pow+0xa0>
 8018e64:	ec47 6b10 	vmov	d0, r6, r7
 8018e68:	f000 facc 	bl	8019404 <finite>
 8018e6c:	b9e0      	cbnz	r0, 8018ea8 <pow+0xac>
 8018e6e:	eeb0 0a48 	vmov.f32	s0, s16
 8018e72:	eef0 0a68 	vmov.f32	s1, s17
 8018e76:	f000 fac5 	bl	8019404 <finite>
 8018e7a:	b1a8      	cbz	r0, 8018ea8 <pow+0xac>
 8018e7c:	ec45 4b10 	vmov	d0, r4, r5
 8018e80:	f000 fac0 	bl	8019404 <finite>
 8018e84:	b180      	cbz	r0, 8018ea8 <pow+0xac>
 8018e86:	4632      	mov	r2, r6
 8018e88:	463b      	mov	r3, r7
 8018e8a:	4630      	mov	r0, r6
 8018e8c:	4639      	mov	r1, r7
 8018e8e:	f7e7 fe55 	bl	8000b3c <__aeabi_dcmpun>
 8018e92:	2800      	cmp	r0, #0
 8018e94:	d0e2      	beq.n	8018e5c <pow+0x60>
 8018e96:	f7fc fcbf 	bl	8015818 <__errno>
 8018e9a:	2321      	movs	r3, #33	@ 0x21
 8018e9c:	6003      	str	r3, [r0, #0]
 8018e9e:	ecbd 8b02 	vpop	{d8}
 8018ea2:	ec47 6b10 	vmov	d0, r6, r7
 8018ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	2300      	movs	r3, #0
 8018eac:	4630      	mov	r0, r6
 8018eae:	4639      	mov	r1, r7
 8018eb0:	f7e7 fe12 	bl	8000ad8 <__aeabi_dcmpeq>
 8018eb4:	2800      	cmp	r0, #0
 8018eb6:	d0f2      	beq.n	8018e9e <pow+0xa2>
 8018eb8:	eeb0 0a48 	vmov.f32	s0, s16
 8018ebc:	eef0 0a68 	vmov.f32	s1, s17
 8018ec0:	f000 faa0 	bl	8019404 <finite>
 8018ec4:	2800      	cmp	r0, #0
 8018ec6:	d0ea      	beq.n	8018e9e <pow+0xa2>
 8018ec8:	ec45 4b10 	vmov	d0, r4, r5
 8018ecc:	f000 fa9a 	bl	8019404 <finite>
 8018ed0:	e7c3      	b.n	8018e5a <pow+0x5e>
 8018ed2:	4f01      	ldr	r7, [pc, #4]	@ (8018ed8 <pow+0xdc>)
 8018ed4:	2600      	movs	r6, #0
 8018ed6:	e7e2      	b.n	8018e9e <pow+0xa2>
 8018ed8:	3ff00000 	.word	0x3ff00000

08018edc <sqrt>:
 8018edc:	b538      	push	{r3, r4, r5, lr}
 8018ede:	ed2d 8b02 	vpush	{d8}
 8018ee2:	ec55 4b10 	vmov	r4, r5, d0
 8018ee6:	f000 fa99 	bl	801941c <__ieee754_sqrt>
 8018eea:	4622      	mov	r2, r4
 8018eec:	462b      	mov	r3, r5
 8018eee:	4620      	mov	r0, r4
 8018ef0:	4629      	mov	r1, r5
 8018ef2:	eeb0 8a40 	vmov.f32	s16, s0
 8018ef6:	eef0 8a60 	vmov.f32	s17, s1
 8018efa:	f7e7 fe1f 	bl	8000b3c <__aeabi_dcmpun>
 8018efe:	b990      	cbnz	r0, 8018f26 <sqrt+0x4a>
 8018f00:	2200      	movs	r2, #0
 8018f02:	2300      	movs	r3, #0
 8018f04:	4620      	mov	r0, r4
 8018f06:	4629      	mov	r1, r5
 8018f08:	f7e7 fdf0 	bl	8000aec <__aeabi_dcmplt>
 8018f0c:	b158      	cbz	r0, 8018f26 <sqrt+0x4a>
 8018f0e:	f7fc fc83 	bl	8015818 <__errno>
 8018f12:	2321      	movs	r3, #33	@ 0x21
 8018f14:	6003      	str	r3, [r0, #0]
 8018f16:	2200      	movs	r2, #0
 8018f18:	2300      	movs	r3, #0
 8018f1a:	4610      	mov	r0, r2
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	f7e7 fc9d 	bl	800085c <__aeabi_ddiv>
 8018f22:	ec41 0b18 	vmov	d8, r0, r1
 8018f26:	eeb0 0a48 	vmov.f32	s0, s16
 8018f2a:	eef0 0a68 	vmov.f32	s1, s17
 8018f2e:	ecbd 8b02 	vpop	{d8}
 8018f32:	bd38      	pop	{r3, r4, r5, pc}
 8018f34:	0000      	movs	r0, r0
	...

08018f38 <atan>:
 8018f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f3c:	ec55 4b10 	vmov	r4, r5, d0
 8018f40:	4bbf      	ldr	r3, [pc, #764]	@ (8019240 <atan+0x308>)
 8018f42:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8018f46:	429e      	cmp	r6, r3
 8018f48:	46ab      	mov	fp, r5
 8018f4a:	d918      	bls.n	8018f7e <atan+0x46>
 8018f4c:	4bbd      	ldr	r3, [pc, #756]	@ (8019244 <atan+0x30c>)
 8018f4e:	429e      	cmp	r6, r3
 8018f50:	d801      	bhi.n	8018f56 <atan+0x1e>
 8018f52:	d109      	bne.n	8018f68 <atan+0x30>
 8018f54:	b144      	cbz	r4, 8018f68 <atan+0x30>
 8018f56:	4622      	mov	r2, r4
 8018f58:	462b      	mov	r3, r5
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	4629      	mov	r1, r5
 8018f5e:	f7e7 f99d 	bl	800029c <__adddf3>
 8018f62:	4604      	mov	r4, r0
 8018f64:	460d      	mov	r5, r1
 8018f66:	e006      	b.n	8018f76 <atan+0x3e>
 8018f68:	f1bb 0f00 	cmp.w	fp, #0
 8018f6c:	f340 812b 	ble.w	80191c6 <atan+0x28e>
 8018f70:	a597      	add	r5, pc, #604	@ (adr r5, 80191d0 <atan+0x298>)
 8018f72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018f76:	ec45 4b10 	vmov	d0, r4, r5
 8018f7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f7e:	4bb2      	ldr	r3, [pc, #712]	@ (8019248 <atan+0x310>)
 8018f80:	429e      	cmp	r6, r3
 8018f82:	d813      	bhi.n	8018fac <atan+0x74>
 8018f84:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8018f88:	429e      	cmp	r6, r3
 8018f8a:	d80c      	bhi.n	8018fa6 <atan+0x6e>
 8018f8c:	a392      	add	r3, pc, #584	@ (adr r3, 80191d8 <atan+0x2a0>)
 8018f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f92:	4620      	mov	r0, r4
 8018f94:	4629      	mov	r1, r5
 8018f96:	f7e7 f981 	bl	800029c <__adddf3>
 8018f9a:	4bac      	ldr	r3, [pc, #688]	@ (801924c <atan+0x314>)
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	f7e7 fdc3 	bl	8000b28 <__aeabi_dcmpgt>
 8018fa2:	2800      	cmp	r0, #0
 8018fa4:	d1e7      	bne.n	8018f76 <atan+0x3e>
 8018fa6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8018faa:	e029      	b.n	8019000 <atan+0xc8>
 8018fac:	f000 f9b0 	bl	8019310 <fabs>
 8018fb0:	4ba7      	ldr	r3, [pc, #668]	@ (8019250 <atan+0x318>)
 8018fb2:	429e      	cmp	r6, r3
 8018fb4:	ec55 4b10 	vmov	r4, r5, d0
 8018fb8:	f200 80bc 	bhi.w	8019134 <atan+0x1fc>
 8018fbc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8018fc0:	429e      	cmp	r6, r3
 8018fc2:	f200 809e 	bhi.w	8019102 <atan+0x1ca>
 8018fc6:	4622      	mov	r2, r4
 8018fc8:	462b      	mov	r3, r5
 8018fca:	4620      	mov	r0, r4
 8018fcc:	4629      	mov	r1, r5
 8018fce:	f7e7 f965 	bl	800029c <__adddf3>
 8018fd2:	4b9e      	ldr	r3, [pc, #632]	@ (801924c <atan+0x314>)
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	f7e7 f95f 	bl	8000298 <__aeabi_dsub>
 8018fda:	2200      	movs	r2, #0
 8018fdc:	4606      	mov	r6, r0
 8018fde:	460f      	mov	r7, r1
 8018fe0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018fe4:	4620      	mov	r0, r4
 8018fe6:	4629      	mov	r1, r5
 8018fe8:	f7e7 f958 	bl	800029c <__adddf3>
 8018fec:	4602      	mov	r2, r0
 8018fee:	460b      	mov	r3, r1
 8018ff0:	4630      	mov	r0, r6
 8018ff2:	4639      	mov	r1, r7
 8018ff4:	f7e7 fc32 	bl	800085c <__aeabi_ddiv>
 8018ff8:	f04f 0a00 	mov.w	sl, #0
 8018ffc:	4604      	mov	r4, r0
 8018ffe:	460d      	mov	r5, r1
 8019000:	4622      	mov	r2, r4
 8019002:	462b      	mov	r3, r5
 8019004:	4620      	mov	r0, r4
 8019006:	4629      	mov	r1, r5
 8019008:	f7e7 fafe 	bl	8000608 <__aeabi_dmul>
 801900c:	4602      	mov	r2, r0
 801900e:	460b      	mov	r3, r1
 8019010:	4680      	mov	r8, r0
 8019012:	4689      	mov	r9, r1
 8019014:	f7e7 faf8 	bl	8000608 <__aeabi_dmul>
 8019018:	a371      	add	r3, pc, #452	@ (adr r3, 80191e0 <atan+0x2a8>)
 801901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801901e:	4606      	mov	r6, r0
 8019020:	460f      	mov	r7, r1
 8019022:	f7e7 faf1 	bl	8000608 <__aeabi_dmul>
 8019026:	a370      	add	r3, pc, #448	@ (adr r3, 80191e8 <atan+0x2b0>)
 8019028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801902c:	f7e7 f936 	bl	800029c <__adddf3>
 8019030:	4632      	mov	r2, r6
 8019032:	463b      	mov	r3, r7
 8019034:	f7e7 fae8 	bl	8000608 <__aeabi_dmul>
 8019038:	a36d      	add	r3, pc, #436	@ (adr r3, 80191f0 <atan+0x2b8>)
 801903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801903e:	f7e7 f92d 	bl	800029c <__adddf3>
 8019042:	4632      	mov	r2, r6
 8019044:	463b      	mov	r3, r7
 8019046:	f7e7 fadf 	bl	8000608 <__aeabi_dmul>
 801904a:	a36b      	add	r3, pc, #428	@ (adr r3, 80191f8 <atan+0x2c0>)
 801904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019050:	f7e7 f924 	bl	800029c <__adddf3>
 8019054:	4632      	mov	r2, r6
 8019056:	463b      	mov	r3, r7
 8019058:	f7e7 fad6 	bl	8000608 <__aeabi_dmul>
 801905c:	a368      	add	r3, pc, #416	@ (adr r3, 8019200 <atan+0x2c8>)
 801905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019062:	f7e7 f91b 	bl	800029c <__adddf3>
 8019066:	4632      	mov	r2, r6
 8019068:	463b      	mov	r3, r7
 801906a:	f7e7 facd 	bl	8000608 <__aeabi_dmul>
 801906e:	a366      	add	r3, pc, #408	@ (adr r3, 8019208 <atan+0x2d0>)
 8019070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019074:	f7e7 f912 	bl	800029c <__adddf3>
 8019078:	4642      	mov	r2, r8
 801907a:	464b      	mov	r3, r9
 801907c:	f7e7 fac4 	bl	8000608 <__aeabi_dmul>
 8019080:	a363      	add	r3, pc, #396	@ (adr r3, 8019210 <atan+0x2d8>)
 8019082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019086:	4680      	mov	r8, r0
 8019088:	4689      	mov	r9, r1
 801908a:	4630      	mov	r0, r6
 801908c:	4639      	mov	r1, r7
 801908e:	f7e7 fabb 	bl	8000608 <__aeabi_dmul>
 8019092:	a361      	add	r3, pc, #388	@ (adr r3, 8019218 <atan+0x2e0>)
 8019094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019098:	f7e7 f8fe 	bl	8000298 <__aeabi_dsub>
 801909c:	4632      	mov	r2, r6
 801909e:	463b      	mov	r3, r7
 80190a0:	f7e7 fab2 	bl	8000608 <__aeabi_dmul>
 80190a4:	a35e      	add	r3, pc, #376	@ (adr r3, 8019220 <atan+0x2e8>)
 80190a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190aa:	f7e7 f8f5 	bl	8000298 <__aeabi_dsub>
 80190ae:	4632      	mov	r2, r6
 80190b0:	463b      	mov	r3, r7
 80190b2:	f7e7 faa9 	bl	8000608 <__aeabi_dmul>
 80190b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8019228 <atan+0x2f0>)
 80190b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190bc:	f7e7 f8ec 	bl	8000298 <__aeabi_dsub>
 80190c0:	4632      	mov	r2, r6
 80190c2:	463b      	mov	r3, r7
 80190c4:	f7e7 faa0 	bl	8000608 <__aeabi_dmul>
 80190c8:	a359      	add	r3, pc, #356	@ (adr r3, 8019230 <atan+0x2f8>)
 80190ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190ce:	f7e7 f8e3 	bl	8000298 <__aeabi_dsub>
 80190d2:	4632      	mov	r2, r6
 80190d4:	463b      	mov	r3, r7
 80190d6:	f7e7 fa97 	bl	8000608 <__aeabi_dmul>
 80190da:	4602      	mov	r2, r0
 80190dc:	460b      	mov	r3, r1
 80190de:	4640      	mov	r0, r8
 80190e0:	4649      	mov	r1, r9
 80190e2:	f7e7 f8db 	bl	800029c <__adddf3>
 80190e6:	4622      	mov	r2, r4
 80190e8:	462b      	mov	r3, r5
 80190ea:	f7e7 fa8d 	bl	8000608 <__aeabi_dmul>
 80190ee:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80190f2:	4602      	mov	r2, r0
 80190f4:	460b      	mov	r3, r1
 80190f6:	d148      	bne.n	801918a <atan+0x252>
 80190f8:	4620      	mov	r0, r4
 80190fa:	4629      	mov	r1, r5
 80190fc:	f7e7 f8cc 	bl	8000298 <__aeabi_dsub>
 8019100:	e72f      	b.n	8018f62 <atan+0x2a>
 8019102:	4b52      	ldr	r3, [pc, #328]	@ (801924c <atan+0x314>)
 8019104:	2200      	movs	r2, #0
 8019106:	4620      	mov	r0, r4
 8019108:	4629      	mov	r1, r5
 801910a:	f7e7 f8c5 	bl	8000298 <__aeabi_dsub>
 801910e:	4b4f      	ldr	r3, [pc, #316]	@ (801924c <atan+0x314>)
 8019110:	4606      	mov	r6, r0
 8019112:	460f      	mov	r7, r1
 8019114:	2200      	movs	r2, #0
 8019116:	4620      	mov	r0, r4
 8019118:	4629      	mov	r1, r5
 801911a:	f7e7 f8bf 	bl	800029c <__adddf3>
 801911e:	4602      	mov	r2, r0
 8019120:	460b      	mov	r3, r1
 8019122:	4630      	mov	r0, r6
 8019124:	4639      	mov	r1, r7
 8019126:	f7e7 fb99 	bl	800085c <__aeabi_ddiv>
 801912a:	f04f 0a01 	mov.w	sl, #1
 801912e:	4604      	mov	r4, r0
 8019130:	460d      	mov	r5, r1
 8019132:	e765      	b.n	8019000 <atan+0xc8>
 8019134:	4b47      	ldr	r3, [pc, #284]	@ (8019254 <atan+0x31c>)
 8019136:	429e      	cmp	r6, r3
 8019138:	d21c      	bcs.n	8019174 <atan+0x23c>
 801913a:	4b47      	ldr	r3, [pc, #284]	@ (8019258 <atan+0x320>)
 801913c:	2200      	movs	r2, #0
 801913e:	4620      	mov	r0, r4
 8019140:	4629      	mov	r1, r5
 8019142:	f7e7 f8a9 	bl	8000298 <__aeabi_dsub>
 8019146:	4b44      	ldr	r3, [pc, #272]	@ (8019258 <atan+0x320>)
 8019148:	4606      	mov	r6, r0
 801914a:	460f      	mov	r7, r1
 801914c:	2200      	movs	r2, #0
 801914e:	4620      	mov	r0, r4
 8019150:	4629      	mov	r1, r5
 8019152:	f7e7 fa59 	bl	8000608 <__aeabi_dmul>
 8019156:	4b3d      	ldr	r3, [pc, #244]	@ (801924c <atan+0x314>)
 8019158:	2200      	movs	r2, #0
 801915a:	f7e7 f89f 	bl	800029c <__adddf3>
 801915e:	4602      	mov	r2, r0
 8019160:	460b      	mov	r3, r1
 8019162:	4630      	mov	r0, r6
 8019164:	4639      	mov	r1, r7
 8019166:	f7e7 fb79 	bl	800085c <__aeabi_ddiv>
 801916a:	f04f 0a02 	mov.w	sl, #2
 801916e:	4604      	mov	r4, r0
 8019170:	460d      	mov	r5, r1
 8019172:	e745      	b.n	8019000 <atan+0xc8>
 8019174:	4622      	mov	r2, r4
 8019176:	462b      	mov	r3, r5
 8019178:	4938      	ldr	r1, [pc, #224]	@ (801925c <atan+0x324>)
 801917a:	2000      	movs	r0, #0
 801917c:	f7e7 fb6e 	bl	800085c <__aeabi_ddiv>
 8019180:	f04f 0a03 	mov.w	sl, #3
 8019184:	4604      	mov	r4, r0
 8019186:	460d      	mov	r5, r1
 8019188:	e73a      	b.n	8019000 <atan+0xc8>
 801918a:	4b35      	ldr	r3, [pc, #212]	@ (8019260 <atan+0x328>)
 801918c:	4e35      	ldr	r6, [pc, #212]	@ (8019264 <atan+0x32c>)
 801918e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019196:	f7e7 f87f 	bl	8000298 <__aeabi_dsub>
 801919a:	4622      	mov	r2, r4
 801919c:	462b      	mov	r3, r5
 801919e:	f7e7 f87b 	bl	8000298 <__aeabi_dsub>
 80191a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80191a6:	4602      	mov	r2, r0
 80191a8:	460b      	mov	r3, r1
 80191aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80191ae:	f7e7 f873 	bl	8000298 <__aeabi_dsub>
 80191b2:	f1bb 0f00 	cmp.w	fp, #0
 80191b6:	4604      	mov	r4, r0
 80191b8:	460d      	mov	r5, r1
 80191ba:	f6bf aedc 	bge.w	8018f76 <atan+0x3e>
 80191be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80191c2:	461d      	mov	r5, r3
 80191c4:	e6d7      	b.n	8018f76 <atan+0x3e>
 80191c6:	a51c      	add	r5, pc, #112	@ (adr r5, 8019238 <atan+0x300>)
 80191c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80191cc:	e6d3      	b.n	8018f76 <atan+0x3e>
 80191ce:	bf00      	nop
 80191d0:	54442d18 	.word	0x54442d18
 80191d4:	3ff921fb 	.word	0x3ff921fb
 80191d8:	8800759c 	.word	0x8800759c
 80191dc:	7e37e43c 	.word	0x7e37e43c
 80191e0:	e322da11 	.word	0xe322da11
 80191e4:	3f90ad3a 	.word	0x3f90ad3a
 80191e8:	24760deb 	.word	0x24760deb
 80191ec:	3fa97b4b 	.word	0x3fa97b4b
 80191f0:	a0d03d51 	.word	0xa0d03d51
 80191f4:	3fb10d66 	.word	0x3fb10d66
 80191f8:	c54c206e 	.word	0xc54c206e
 80191fc:	3fb745cd 	.word	0x3fb745cd
 8019200:	920083ff 	.word	0x920083ff
 8019204:	3fc24924 	.word	0x3fc24924
 8019208:	5555550d 	.word	0x5555550d
 801920c:	3fd55555 	.word	0x3fd55555
 8019210:	2c6a6c2f 	.word	0x2c6a6c2f
 8019214:	bfa2b444 	.word	0xbfa2b444
 8019218:	52defd9a 	.word	0x52defd9a
 801921c:	3fadde2d 	.word	0x3fadde2d
 8019220:	af749a6d 	.word	0xaf749a6d
 8019224:	3fb3b0f2 	.word	0x3fb3b0f2
 8019228:	fe231671 	.word	0xfe231671
 801922c:	3fbc71c6 	.word	0x3fbc71c6
 8019230:	9998ebc4 	.word	0x9998ebc4
 8019234:	3fc99999 	.word	0x3fc99999
 8019238:	54442d18 	.word	0x54442d18
 801923c:	bff921fb 	.word	0xbff921fb
 8019240:	440fffff 	.word	0x440fffff
 8019244:	7ff00000 	.word	0x7ff00000
 8019248:	3fdbffff 	.word	0x3fdbffff
 801924c:	3ff00000 	.word	0x3ff00000
 8019250:	3ff2ffff 	.word	0x3ff2ffff
 8019254:	40038000 	.word	0x40038000
 8019258:	3ff80000 	.word	0x3ff80000
 801925c:	bff00000 	.word	0xbff00000
 8019260:	0802ead0 	.word	0x0802ead0
 8019264:	0802eaf0 	.word	0x0802eaf0

08019268 <cos>:
 8019268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801926a:	ec53 2b10 	vmov	r2, r3, d0
 801926e:	4826      	ldr	r0, [pc, #152]	@ (8019308 <cos+0xa0>)
 8019270:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019274:	4281      	cmp	r1, r0
 8019276:	d806      	bhi.n	8019286 <cos+0x1e>
 8019278:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8019300 <cos+0x98>
 801927c:	b005      	add	sp, #20
 801927e:	f85d eb04 	ldr.w	lr, [sp], #4
 8019282:	f000 b9a9 	b.w	80195d8 <__kernel_cos>
 8019286:	4821      	ldr	r0, [pc, #132]	@ (801930c <cos+0xa4>)
 8019288:	4281      	cmp	r1, r0
 801928a:	d908      	bls.n	801929e <cos+0x36>
 801928c:	4610      	mov	r0, r2
 801928e:	4619      	mov	r1, r3
 8019290:	f7e7 f802 	bl	8000298 <__aeabi_dsub>
 8019294:	ec41 0b10 	vmov	d0, r0, r1
 8019298:	b005      	add	sp, #20
 801929a:	f85d fb04 	ldr.w	pc, [sp], #4
 801929e:	4668      	mov	r0, sp
 80192a0:	f001 f862 	bl	801a368 <__ieee754_rem_pio2>
 80192a4:	f000 0003 	and.w	r0, r0, #3
 80192a8:	2801      	cmp	r0, #1
 80192aa:	d00b      	beq.n	80192c4 <cos+0x5c>
 80192ac:	2802      	cmp	r0, #2
 80192ae:	d015      	beq.n	80192dc <cos+0x74>
 80192b0:	b9d8      	cbnz	r0, 80192ea <cos+0x82>
 80192b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80192b6:	ed9d 0b00 	vldr	d0, [sp]
 80192ba:	f000 f98d 	bl	80195d8 <__kernel_cos>
 80192be:	ec51 0b10 	vmov	r0, r1, d0
 80192c2:	e7e7      	b.n	8019294 <cos+0x2c>
 80192c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80192c8:	ed9d 0b00 	vldr	d0, [sp]
 80192cc:	f000 fa4c 	bl	8019768 <__kernel_sin>
 80192d0:	ec53 2b10 	vmov	r2, r3, d0
 80192d4:	4610      	mov	r0, r2
 80192d6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80192da:	e7db      	b.n	8019294 <cos+0x2c>
 80192dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80192e0:	ed9d 0b00 	vldr	d0, [sp]
 80192e4:	f000 f978 	bl	80195d8 <__kernel_cos>
 80192e8:	e7f2      	b.n	80192d0 <cos+0x68>
 80192ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80192ee:	ed9d 0b00 	vldr	d0, [sp]
 80192f2:	2001      	movs	r0, #1
 80192f4:	f000 fa38 	bl	8019768 <__kernel_sin>
 80192f8:	e7e1      	b.n	80192be <cos+0x56>
 80192fa:	bf00      	nop
 80192fc:	f3af 8000 	nop.w
	...
 8019308:	3fe921fb 	.word	0x3fe921fb
 801930c:	7fefffff 	.word	0x7fefffff

08019310 <fabs>:
 8019310:	ec51 0b10 	vmov	r0, r1, d0
 8019314:	4602      	mov	r2, r0
 8019316:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801931a:	ec43 2b10 	vmov	d0, r2, r3
 801931e:	4770      	bx	lr

08019320 <sin>:
 8019320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019322:	ec53 2b10 	vmov	r2, r3, d0
 8019326:	4826      	ldr	r0, [pc, #152]	@ (80193c0 <sin+0xa0>)
 8019328:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801932c:	4281      	cmp	r1, r0
 801932e:	d807      	bhi.n	8019340 <sin+0x20>
 8019330:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80193b8 <sin+0x98>
 8019334:	2000      	movs	r0, #0
 8019336:	b005      	add	sp, #20
 8019338:	f85d eb04 	ldr.w	lr, [sp], #4
 801933c:	f000 ba14 	b.w	8019768 <__kernel_sin>
 8019340:	4820      	ldr	r0, [pc, #128]	@ (80193c4 <sin+0xa4>)
 8019342:	4281      	cmp	r1, r0
 8019344:	d908      	bls.n	8019358 <sin+0x38>
 8019346:	4610      	mov	r0, r2
 8019348:	4619      	mov	r1, r3
 801934a:	f7e6 ffa5 	bl	8000298 <__aeabi_dsub>
 801934e:	ec41 0b10 	vmov	d0, r0, r1
 8019352:	b005      	add	sp, #20
 8019354:	f85d fb04 	ldr.w	pc, [sp], #4
 8019358:	4668      	mov	r0, sp
 801935a:	f001 f805 	bl	801a368 <__ieee754_rem_pio2>
 801935e:	f000 0003 	and.w	r0, r0, #3
 8019362:	2801      	cmp	r0, #1
 8019364:	d00c      	beq.n	8019380 <sin+0x60>
 8019366:	2802      	cmp	r0, #2
 8019368:	d011      	beq.n	801938e <sin+0x6e>
 801936a:	b9e8      	cbnz	r0, 80193a8 <sin+0x88>
 801936c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019370:	ed9d 0b00 	vldr	d0, [sp]
 8019374:	2001      	movs	r0, #1
 8019376:	f000 f9f7 	bl	8019768 <__kernel_sin>
 801937a:	ec51 0b10 	vmov	r0, r1, d0
 801937e:	e7e6      	b.n	801934e <sin+0x2e>
 8019380:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019384:	ed9d 0b00 	vldr	d0, [sp]
 8019388:	f000 f926 	bl	80195d8 <__kernel_cos>
 801938c:	e7f5      	b.n	801937a <sin+0x5a>
 801938e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019392:	ed9d 0b00 	vldr	d0, [sp]
 8019396:	2001      	movs	r0, #1
 8019398:	f000 f9e6 	bl	8019768 <__kernel_sin>
 801939c:	ec53 2b10 	vmov	r2, r3, d0
 80193a0:	4610      	mov	r0, r2
 80193a2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80193a6:	e7d2      	b.n	801934e <sin+0x2e>
 80193a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80193ac:	ed9d 0b00 	vldr	d0, [sp]
 80193b0:	f000 f912 	bl	80195d8 <__kernel_cos>
 80193b4:	e7f2      	b.n	801939c <sin+0x7c>
 80193b6:	bf00      	nop
	...
 80193c0:	3fe921fb 	.word	0x3fe921fb
 80193c4:	7fefffff 	.word	0x7fefffff

080193c8 <sqrtf>:
 80193c8:	b508      	push	{r3, lr}
 80193ca:	ed2d 8b02 	vpush	{d8}
 80193ce:	eeb0 8a40 	vmov.f32	s16, s0
 80193d2:	f000 f8fd 	bl	80195d0 <__ieee754_sqrtf>
 80193d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80193da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193de:	d60c      	bvs.n	80193fa <sqrtf+0x32>
 80193e0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8019400 <sqrtf+0x38>
 80193e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80193e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193ec:	d505      	bpl.n	80193fa <sqrtf+0x32>
 80193ee:	f7fc fa13 	bl	8015818 <__errno>
 80193f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80193f6:	2321      	movs	r3, #33	@ 0x21
 80193f8:	6003      	str	r3, [r0, #0]
 80193fa:	ecbd 8b02 	vpop	{d8}
 80193fe:	bd08      	pop	{r3, pc}
 8019400:	00000000 	.word	0x00000000

08019404 <finite>:
 8019404:	b082      	sub	sp, #8
 8019406:	ed8d 0b00 	vstr	d0, [sp]
 801940a:	9801      	ldr	r0, [sp, #4]
 801940c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8019410:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8019414:	0fc0      	lsrs	r0, r0, #31
 8019416:	b002      	add	sp, #8
 8019418:	4770      	bx	lr
	...

0801941c <__ieee754_sqrt>:
 801941c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019420:	4a68      	ldr	r2, [pc, #416]	@ (80195c4 <__ieee754_sqrt+0x1a8>)
 8019422:	ec55 4b10 	vmov	r4, r5, d0
 8019426:	43aa      	bics	r2, r5
 8019428:	462b      	mov	r3, r5
 801942a:	4621      	mov	r1, r4
 801942c:	d110      	bne.n	8019450 <__ieee754_sqrt+0x34>
 801942e:	4622      	mov	r2, r4
 8019430:	4620      	mov	r0, r4
 8019432:	4629      	mov	r1, r5
 8019434:	f7e7 f8e8 	bl	8000608 <__aeabi_dmul>
 8019438:	4602      	mov	r2, r0
 801943a:	460b      	mov	r3, r1
 801943c:	4620      	mov	r0, r4
 801943e:	4629      	mov	r1, r5
 8019440:	f7e6 ff2c 	bl	800029c <__adddf3>
 8019444:	4604      	mov	r4, r0
 8019446:	460d      	mov	r5, r1
 8019448:	ec45 4b10 	vmov	d0, r4, r5
 801944c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019450:	2d00      	cmp	r5, #0
 8019452:	dc0e      	bgt.n	8019472 <__ieee754_sqrt+0x56>
 8019454:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8019458:	4322      	orrs	r2, r4
 801945a:	d0f5      	beq.n	8019448 <__ieee754_sqrt+0x2c>
 801945c:	b19d      	cbz	r5, 8019486 <__ieee754_sqrt+0x6a>
 801945e:	4622      	mov	r2, r4
 8019460:	4620      	mov	r0, r4
 8019462:	4629      	mov	r1, r5
 8019464:	f7e6 ff18 	bl	8000298 <__aeabi_dsub>
 8019468:	4602      	mov	r2, r0
 801946a:	460b      	mov	r3, r1
 801946c:	f7e7 f9f6 	bl	800085c <__aeabi_ddiv>
 8019470:	e7e8      	b.n	8019444 <__ieee754_sqrt+0x28>
 8019472:	152a      	asrs	r2, r5, #20
 8019474:	d115      	bne.n	80194a2 <__ieee754_sqrt+0x86>
 8019476:	2000      	movs	r0, #0
 8019478:	e009      	b.n	801948e <__ieee754_sqrt+0x72>
 801947a:	0acb      	lsrs	r3, r1, #11
 801947c:	3a15      	subs	r2, #21
 801947e:	0549      	lsls	r1, r1, #21
 8019480:	2b00      	cmp	r3, #0
 8019482:	d0fa      	beq.n	801947a <__ieee754_sqrt+0x5e>
 8019484:	e7f7      	b.n	8019476 <__ieee754_sqrt+0x5a>
 8019486:	462a      	mov	r2, r5
 8019488:	e7fa      	b.n	8019480 <__ieee754_sqrt+0x64>
 801948a:	005b      	lsls	r3, r3, #1
 801948c:	3001      	adds	r0, #1
 801948e:	02dc      	lsls	r4, r3, #11
 8019490:	d5fb      	bpl.n	801948a <__ieee754_sqrt+0x6e>
 8019492:	1e44      	subs	r4, r0, #1
 8019494:	1b12      	subs	r2, r2, r4
 8019496:	f1c0 0420 	rsb	r4, r0, #32
 801949a:	fa21 f404 	lsr.w	r4, r1, r4
 801949e:	4323      	orrs	r3, r4
 80194a0:	4081      	lsls	r1, r0
 80194a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80194a6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80194aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80194ae:	07d2      	lsls	r2, r2, #31
 80194b0:	bf5c      	itt	pl
 80194b2:	005b      	lslpl	r3, r3, #1
 80194b4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80194b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80194bc:	bf58      	it	pl
 80194be:	0049      	lslpl	r1, r1, #1
 80194c0:	2600      	movs	r6, #0
 80194c2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80194c6:	106d      	asrs	r5, r5, #1
 80194c8:	0049      	lsls	r1, r1, #1
 80194ca:	2016      	movs	r0, #22
 80194cc:	4632      	mov	r2, r6
 80194ce:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80194d2:	1917      	adds	r7, r2, r4
 80194d4:	429f      	cmp	r7, r3
 80194d6:	bfde      	ittt	le
 80194d8:	193a      	addle	r2, r7, r4
 80194da:	1bdb      	suble	r3, r3, r7
 80194dc:	1936      	addle	r6, r6, r4
 80194de:	0fcf      	lsrs	r7, r1, #31
 80194e0:	3801      	subs	r0, #1
 80194e2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80194e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80194ea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80194ee:	d1f0      	bne.n	80194d2 <__ieee754_sqrt+0xb6>
 80194f0:	4604      	mov	r4, r0
 80194f2:	2720      	movs	r7, #32
 80194f4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80194f8:	429a      	cmp	r2, r3
 80194fa:	eb00 0e0c 	add.w	lr, r0, ip
 80194fe:	db02      	blt.n	8019506 <__ieee754_sqrt+0xea>
 8019500:	d113      	bne.n	801952a <__ieee754_sqrt+0x10e>
 8019502:	458e      	cmp	lr, r1
 8019504:	d811      	bhi.n	801952a <__ieee754_sqrt+0x10e>
 8019506:	f1be 0f00 	cmp.w	lr, #0
 801950a:	eb0e 000c 	add.w	r0, lr, ip
 801950e:	da42      	bge.n	8019596 <__ieee754_sqrt+0x17a>
 8019510:	2800      	cmp	r0, #0
 8019512:	db40      	blt.n	8019596 <__ieee754_sqrt+0x17a>
 8019514:	f102 0801 	add.w	r8, r2, #1
 8019518:	1a9b      	subs	r3, r3, r2
 801951a:	458e      	cmp	lr, r1
 801951c:	bf88      	it	hi
 801951e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8019522:	eba1 010e 	sub.w	r1, r1, lr
 8019526:	4464      	add	r4, ip
 8019528:	4642      	mov	r2, r8
 801952a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801952e:	3f01      	subs	r7, #1
 8019530:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8019534:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019538:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801953c:	d1dc      	bne.n	80194f8 <__ieee754_sqrt+0xdc>
 801953e:	4319      	orrs	r1, r3
 8019540:	d01b      	beq.n	801957a <__ieee754_sqrt+0x15e>
 8019542:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80195c8 <__ieee754_sqrt+0x1ac>
 8019546:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80195cc <__ieee754_sqrt+0x1b0>
 801954a:	e9da 0100 	ldrd	r0, r1, [sl]
 801954e:	e9db 2300 	ldrd	r2, r3, [fp]
 8019552:	f7e6 fea1 	bl	8000298 <__aeabi_dsub>
 8019556:	e9da 8900 	ldrd	r8, r9, [sl]
 801955a:	4602      	mov	r2, r0
 801955c:	460b      	mov	r3, r1
 801955e:	4640      	mov	r0, r8
 8019560:	4649      	mov	r1, r9
 8019562:	f7e7 facd 	bl	8000b00 <__aeabi_dcmple>
 8019566:	b140      	cbz	r0, 801957a <__ieee754_sqrt+0x15e>
 8019568:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801956c:	e9da 0100 	ldrd	r0, r1, [sl]
 8019570:	e9db 2300 	ldrd	r2, r3, [fp]
 8019574:	d111      	bne.n	801959a <__ieee754_sqrt+0x17e>
 8019576:	3601      	adds	r6, #1
 8019578:	463c      	mov	r4, r7
 801957a:	1072      	asrs	r2, r6, #1
 801957c:	0863      	lsrs	r3, r4, #1
 801957e:	07f1      	lsls	r1, r6, #31
 8019580:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8019584:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8019588:	bf48      	it	mi
 801958a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801958e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8019592:	4618      	mov	r0, r3
 8019594:	e756      	b.n	8019444 <__ieee754_sqrt+0x28>
 8019596:	4690      	mov	r8, r2
 8019598:	e7be      	b.n	8019518 <__ieee754_sqrt+0xfc>
 801959a:	f7e6 fe7f 	bl	800029c <__adddf3>
 801959e:	e9da 8900 	ldrd	r8, r9, [sl]
 80195a2:	4602      	mov	r2, r0
 80195a4:	460b      	mov	r3, r1
 80195a6:	4640      	mov	r0, r8
 80195a8:	4649      	mov	r1, r9
 80195aa:	f7e7 fa9f 	bl	8000aec <__aeabi_dcmplt>
 80195ae:	b120      	cbz	r0, 80195ba <__ieee754_sqrt+0x19e>
 80195b0:	1ca0      	adds	r0, r4, #2
 80195b2:	bf08      	it	eq
 80195b4:	3601      	addeq	r6, #1
 80195b6:	3402      	adds	r4, #2
 80195b8:	e7df      	b.n	801957a <__ieee754_sqrt+0x15e>
 80195ba:	1c63      	adds	r3, r4, #1
 80195bc:	f023 0401 	bic.w	r4, r3, #1
 80195c0:	e7db      	b.n	801957a <__ieee754_sqrt+0x15e>
 80195c2:	bf00      	nop
 80195c4:	7ff00000 	.word	0x7ff00000
 80195c8:	20000308 	.word	0x20000308
 80195cc:	20000300 	.word	0x20000300

080195d0 <__ieee754_sqrtf>:
 80195d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80195d4:	4770      	bx	lr
	...

080195d8 <__kernel_cos>:
 80195d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195dc:	ec57 6b10 	vmov	r6, r7, d0
 80195e0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80195e4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80195e8:	ed8d 1b00 	vstr	d1, [sp]
 80195ec:	d206      	bcs.n	80195fc <__kernel_cos+0x24>
 80195ee:	4630      	mov	r0, r6
 80195f0:	4639      	mov	r1, r7
 80195f2:	f7e7 fab9 	bl	8000b68 <__aeabi_d2iz>
 80195f6:	2800      	cmp	r0, #0
 80195f8:	f000 8088 	beq.w	801970c <__kernel_cos+0x134>
 80195fc:	4632      	mov	r2, r6
 80195fe:	463b      	mov	r3, r7
 8019600:	4630      	mov	r0, r6
 8019602:	4639      	mov	r1, r7
 8019604:	f7e7 f800 	bl	8000608 <__aeabi_dmul>
 8019608:	4b51      	ldr	r3, [pc, #324]	@ (8019750 <__kernel_cos+0x178>)
 801960a:	2200      	movs	r2, #0
 801960c:	4604      	mov	r4, r0
 801960e:	460d      	mov	r5, r1
 8019610:	f7e6 fffa 	bl	8000608 <__aeabi_dmul>
 8019614:	a340      	add	r3, pc, #256	@ (adr r3, 8019718 <__kernel_cos+0x140>)
 8019616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801961a:	4682      	mov	sl, r0
 801961c:	468b      	mov	fp, r1
 801961e:	4620      	mov	r0, r4
 8019620:	4629      	mov	r1, r5
 8019622:	f7e6 fff1 	bl	8000608 <__aeabi_dmul>
 8019626:	a33e      	add	r3, pc, #248	@ (adr r3, 8019720 <__kernel_cos+0x148>)
 8019628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801962c:	f7e6 fe36 	bl	800029c <__adddf3>
 8019630:	4622      	mov	r2, r4
 8019632:	462b      	mov	r3, r5
 8019634:	f7e6 ffe8 	bl	8000608 <__aeabi_dmul>
 8019638:	a33b      	add	r3, pc, #236	@ (adr r3, 8019728 <__kernel_cos+0x150>)
 801963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801963e:	f7e6 fe2b 	bl	8000298 <__aeabi_dsub>
 8019642:	4622      	mov	r2, r4
 8019644:	462b      	mov	r3, r5
 8019646:	f7e6 ffdf 	bl	8000608 <__aeabi_dmul>
 801964a:	a339      	add	r3, pc, #228	@ (adr r3, 8019730 <__kernel_cos+0x158>)
 801964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019650:	f7e6 fe24 	bl	800029c <__adddf3>
 8019654:	4622      	mov	r2, r4
 8019656:	462b      	mov	r3, r5
 8019658:	f7e6 ffd6 	bl	8000608 <__aeabi_dmul>
 801965c:	a336      	add	r3, pc, #216	@ (adr r3, 8019738 <__kernel_cos+0x160>)
 801965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019662:	f7e6 fe19 	bl	8000298 <__aeabi_dsub>
 8019666:	4622      	mov	r2, r4
 8019668:	462b      	mov	r3, r5
 801966a:	f7e6 ffcd 	bl	8000608 <__aeabi_dmul>
 801966e:	a334      	add	r3, pc, #208	@ (adr r3, 8019740 <__kernel_cos+0x168>)
 8019670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019674:	f7e6 fe12 	bl	800029c <__adddf3>
 8019678:	4622      	mov	r2, r4
 801967a:	462b      	mov	r3, r5
 801967c:	f7e6 ffc4 	bl	8000608 <__aeabi_dmul>
 8019680:	4622      	mov	r2, r4
 8019682:	462b      	mov	r3, r5
 8019684:	f7e6 ffc0 	bl	8000608 <__aeabi_dmul>
 8019688:	e9dd 2300 	ldrd	r2, r3, [sp]
 801968c:	4604      	mov	r4, r0
 801968e:	460d      	mov	r5, r1
 8019690:	4630      	mov	r0, r6
 8019692:	4639      	mov	r1, r7
 8019694:	f7e6 ffb8 	bl	8000608 <__aeabi_dmul>
 8019698:	460b      	mov	r3, r1
 801969a:	4602      	mov	r2, r0
 801969c:	4629      	mov	r1, r5
 801969e:	4620      	mov	r0, r4
 80196a0:	f7e6 fdfa 	bl	8000298 <__aeabi_dsub>
 80196a4:	4b2b      	ldr	r3, [pc, #172]	@ (8019754 <__kernel_cos+0x17c>)
 80196a6:	4598      	cmp	r8, r3
 80196a8:	4606      	mov	r6, r0
 80196aa:	460f      	mov	r7, r1
 80196ac:	d810      	bhi.n	80196d0 <__kernel_cos+0xf8>
 80196ae:	4602      	mov	r2, r0
 80196b0:	460b      	mov	r3, r1
 80196b2:	4650      	mov	r0, sl
 80196b4:	4659      	mov	r1, fp
 80196b6:	f7e6 fdef 	bl	8000298 <__aeabi_dsub>
 80196ba:	460b      	mov	r3, r1
 80196bc:	4926      	ldr	r1, [pc, #152]	@ (8019758 <__kernel_cos+0x180>)
 80196be:	4602      	mov	r2, r0
 80196c0:	2000      	movs	r0, #0
 80196c2:	f7e6 fde9 	bl	8000298 <__aeabi_dsub>
 80196c6:	ec41 0b10 	vmov	d0, r0, r1
 80196ca:	b003      	add	sp, #12
 80196cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196d0:	4b22      	ldr	r3, [pc, #136]	@ (801975c <__kernel_cos+0x184>)
 80196d2:	4921      	ldr	r1, [pc, #132]	@ (8019758 <__kernel_cos+0x180>)
 80196d4:	4598      	cmp	r8, r3
 80196d6:	bf8c      	ite	hi
 80196d8:	4d21      	ldrhi	r5, [pc, #132]	@ (8019760 <__kernel_cos+0x188>)
 80196da:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80196de:	2400      	movs	r4, #0
 80196e0:	4622      	mov	r2, r4
 80196e2:	462b      	mov	r3, r5
 80196e4:	2000      	movs	r0, #0
 80196e6:	f7e6 fdd7 	bl	8000298 <__aeabi_dsub>
 80196ea:	4622      	mov	r2, r4
 80196ec:	4680      	mov	r8, r0
 80196ee:	4689      	mov	r9, r1
 80196f0:	462b      	mov	r3, r5
 80196f2:	4650      	mov	r0, sl
 80196f4:	4659      	mov	r1, fp
 80196f6:	f7e6 fdcf 	bl	8000298 <__aeabi_dsub>
 80196fa:	4632      	mov	r2, r6
 80196fc:	463b      	mov	r3, r7
 80196fe:	f7e6 fdcb 	bl	8000298 <__aeabi_dsub>
 8019702:	4602      	mov	r2, r0
 8019704:	460b      	mov	r3, r1
 8019706:	4640      	mov	r0, r8
 8019708:	4649      	mov	r1, r9
 801970a:	e7da      	b.n	80196c2 <__kernel_cos+0xea>
 801970c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8019748 <__kernel_cos+0x170>
 8019710:	e7db      	b.n	80196ca <__kernel_cos+0xf2>
 8019712:	bf00      	nop
 8019714:	f3af 8000 	nop.w
 8019718:	be8838d4 	.word	0xbe8838d4
 801971c:	bda8fae9 	.word	0xbda8fae9
 8019720:	bdb4b1c4 	.word	0xbdb4b1c4
 8019724:	3e21ee9e 	.word	0x3e21ee9e
 8019728:	809c52ad 	.word	0x809c52ad
 801972c:	3e927e4f 	.word	0x3e927e4f
 8019730:	19cb1590 	.word	0x19cb1590
 8019734:	3efa01a0 	.word	0x3efa01a0
 8019738:	16c15177 	.word	0x16c15177
 801973c:	3f56c16c 	.word	0x3f56c16c
 8019740:	5555554c 	.word	0x5555554c
 8019744:	3fa55555 	.word	0x3fa55555
 8019748:	00000000 	.word	0x00000000
 801974c:	3ff00000 	.word	0x3ff00000
 8019750:	3fe00000 	.word	0x3fe00000
 8019754:	3fd33332 	.word	0x3fd33332
 8019758:	3ff00000 	.word	0x3ff00000
 801975c:	3fe90000 	.word	0x3fe90000
 8019760:	3fd20000 	.word	0x3fd20000
 8019764:	00000000 	.word	0x00000000

08019768 <__kernel_sin>:
 8019768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801976c:	ec55 4b10 	vmov	r4, r5, d0
 8019770:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8019774:	b085      	sub	sp, #20
 8019776:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801977a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801977e:	4680      	mov	r8, r0
 8019780:	d205      	bcs.n	801978e <__kernel_sin+0x26>
 8019782:	4620      	mov	r0, r4
 8019784:	4629      	mov	r1, r5
 8019786:	f7e7 f9ef 	bl	8000b68 <__aeabi_d2iz>
 801978a:	2800      	cmp	r0, #0
 801978c:	d052      	beq.n	8019834 <__kernel_sin+0xcc>
 801978e:	4622      	mov	r2, r4
 8019790:	462b      	mov	r3, r5
 8019792:	4620      	mov	r0, r4
 8019794:	4629      	mov	r1, r5
 8019796:	f7e6 ff37 	bl	8000608 <__aeabi_dmul>
 801979a:	4682      	mov	sl, r0
 801979c:	468b      	mov	fp, r1
 801979e:	4602      	mov	r2, r0
 80197a0:	460b      	mov	r3, r1
 80197a2:	4620      	mov	r0, r4
 80197a4:	4629      	mov	r1, r5
 80197a6:	f7e6 ff2f 	bl	8000608 <__aeabi_dmul>
 80197aa:	a342      	add	r3, pc, #264	@ (adr r3, 80198b4 <__kernel_sin+0x14c>)
 80197ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197b0:	e9cd 0100 	strd	r0, r1, [sp]
 80197b4:	4650      	mov	r0, sl
 80197b6:	4659      	mov	r1, fp
 80197b8:	f7e6 ff26 	bl	8000608 <__aeabi_dmul>
 80197bc:	a33f      	add	r3, pc, #252	@ (adr r3, 80198bc <__kernel_sin+0x154>)
 80197be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c2:	f7e6 fd69 	bl	8000298 <__aeabi_dsub>
 80197c6:	4652      	mov	r2, sl
 80197c8:	465b      	mov	r3, fp
 80197ca:	f7e6 ff1d 	bl	8000608 <__aeabi_dmul>
 80197ce:	a33d      	add	r3, pc, #244	@ (adr r3, 80198c4 <__kernel_sin+0x15c>)
 80197d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197d4:	f7e6 fd62 	bl	800029c <__adddf3>
 80197d8:	4652      	mov	r2, sl
 80197da:	465b      	mov	r3, fp
 80197dc:	f7e6 ff14 	bl	8000608 <__aeabi_dmul>
 80197e0:	a33a      	add	r3, pc, #232	@ (adr r3, 80198cc <__kernel_sin+0x164>)
 80197e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e6:	f7e6 fd57 	bl	8000298 <__aeabi_dsub>
 80197ea:	4652      	mov	r2, sl
 80197ec:	465b      	mov	r3, fp
 80197ee:	f7e6 ff0b 	bl	8000608 <__aeabi_dmul>
 80197f2:	a338      	add	r3, pc, #224	@ (adr r3, 80198d4 <__kernel_sin+0x16c>)
 80197f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197f8:	f7e6 fd50 	bl	800029c <__adddf3>
 80197fc:	4606      	mov	r6, r0
 80197fe:	460f      	mov	r7, r1
 8019800:	f1b8 0f00 	cmp.w	r8, #0
 8019804:	d11b      	bne.n	801983e <__kernel_sin+0xd6>
 8019806:	4602      	mov	r2, r0
 8019808:	460b      	mov	r3, r1
 801980a:	4650      	mov	r0, sl
 801980c:	4659      	mov	r1, fp
 801980e:	f7e6 fefb 	bl	8000608 <__aeabi_dmul>
 8019812:	a325      	add	r3, pc, #148	@ (adr r3, 80198a8 <__kernel_sin+0x140>)
 8019814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019818:	f7e6 fd3e 	bl	8000298 <__aeabi_dsub>
 801981c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019820:	f7e6 fef2 	bl	8000608 <__aeabi_dmul>
 8019824:	4602      	mov	r2, r0
 8019826:	460b      	mov	r3, r1
 8019828:	4620      	mov	r0, r4
 801982a:	4629      	mov	r1, r5
 801982c:	f7e6 fd36 	bl	800029c <__adddf3>
 8019830:	4604      	mov	r4, r0
 8019832:	460d      	mov	r5, r1
 8019834:	ec45 4b10 	vmov	d0, r4, r5
 8019838:	b005      	add	sp, #20
 801983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801983e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019842:	4b1b      	ldr	r3, [pc, #108]	@ (80198b0 <__kernel_sin+0x148>)
 8019844:	2200      	movs	r2, #0
 8019846:	f7e6 fedf 	bl	8000608 <__aeabi_dmul>
 801984a:	4632      	mov	r2, r6
 801984c:	4680      	mov	r8, r0
 801984e:	4689      	mov	r9, r1
 8019850:	463b      	mov	r3, r7
 8019852:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019856:	f7e6 fed7 	bl	8000608 <__aeabi_dmul>
 801985a:	4602      	mov	r2, r0
 801985c:	460b      	mov	r3, r1
 801985e:	4640      	mov	r0, r8
 8019860:	4649      	mov	r1, r9
 8019862:	f7e6 fd19 	bl	8000298 <__aeabi_dsub>
 8019866:	4652      	mov	r2, sl
 8019868:	465b      	mov	r3, fp
 801986a:	f7e6 fecd 	bl	8000608 <__aeabi_dmul>
 801986e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019872:	f7e6 fd11 	bl	8000298 <__aeabi_dsub>
 8019876:	a30c      	add	r3, pc, #48	@ (adr r3, 80198a8 <__kernel_sin+0x140>)
 8019878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801987c:	4606      	mov	r6, r0
 801987e:	460f      	mov	r7, r1
 8019880:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019884:	f7e6 fec0 	bl	8000608 <__aeabi_dmul>
 8019888:	4602      	mov	r2, r0
 801988a:	460b      	mov	r3, r1
 801988c:	4630      	mov	r0, r6
 801988e:	4639      	mov	r1, r7
 8019890:	f7e6 fd04 	bl	800029c <__adddf3>
 8019894:	4602      	mov	r2, r0
 8019896:	460b      	mov	r3, r1
 8019898:	4620      	mov	r0, r4
 801989a:	4629      	mov	r1, r5
 801989c:	f7e6 fcfc 	bl	8000298 <__aeabi_dsub>
 80198a0:	e7c6      	b.n	8019830 <__kernel_sin+0xc8>
 80198a2:	bf00      	nop
 80198a4:	f3af 8000 	nop.w
 80198a8:	55555549 	.word	0x55555549
 80198ac:	3fc55555 	.word	0x3fc55555
 80198b0:	3fe00000 	.word	0x3fe00000
 80198b4:	5acfd57c 	.word	0x5acfd57c
 80198b8:	3de5d93a 	.word	0x3de5d93a
 80198bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80198c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80198c4:	57b1fe7d 	.word	0x57b1fe7d
 80198c8:	3ec71de3 	.word	0x3ec71de3
 80198cc:	19c161d5 	.word	0x19c161d5
 80198d0:	3f2a01a0 	.word	0x3f2a01a0
 80198d4:	1110f8a6 	.word	0x1110f8a6
 80198d8:	3f811111 	.word	0x3f811111
 80198dc:	00000000 	.word	0x00000000

080198e0 <__ieee754_pow>:
 80198e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198e4:	b091      	sub	sp, #68	@ 0x44
 80198e6:	ed8d 1b00 	vstr	d1, [sp]
 80198ea:	e9dd 1900 	ldrd	r1, r9, [sp]
 80198ee:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80198f2:	ea5a 0001 	orrs.w	r0, sl, r1
 80198f6:	ec57 6b10 	vmov	r6, r7, d0
 80198fa:	d113      	bne.n	8019924 <__ieee754_pow+0x44>
 80198fc:	19b3      	adds	r3, r6, r6
 80198fe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8019902:	4152      	adcs	r2, r2
 8019904:	4298      	cmp	r0, r3
 8019906:	4b98      	ldr	r3, [pc, #608]	@ (8019b68 <__ieee754_pow+0x288>)
 8019908:	4193      	sbcs	r3, r2
 801990a:	f080 84ea 	bcs.w	801a2e2 <__ieee754_pow+0xa02>
 801990e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019912:	4630      	mov	r0, r6
 8019914:	4639      	mov	r1, r7
 8019916:	f7e6 fcc1 	bl	800029c <__adddf3>
 801991a:	ec41 0b10 	vmov	d0, r0, r1
 801991e:	b011      	add	sp, #68	@ 0x44
 8019920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019924:	4a91      	ldr	r2, [pc, #580]	@ (8019b6c <__ieee754_pow+0x28c>)
 8019926:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801992a:	4590      	cmp	r8, r2
 801992c:	463d      	mov	r5, r7
 801992e:	4633      	mov	r3, r6
 8019930:	d806      	bhi.n	8019940 <__ieee754_pow+0x60>
 8019932:	d101      	bne.n	8019938 <__ieee754_pow+0x58>
 8019934:	2e00      	cmp	r6, #0
 8019936:	d1ea      	bne.n	801990e <__ieee754_pow+0x2e>
 8019938:	4592      	cmp	sl, r2
 801993a:	d801      	bhi.n	8019940 <__ieee754_pow+0x60>
 801993c:	d10e      	bne.n	801995c <__ieee754_pow+0x7c>
 801993e:	b169      	cbz	r1, 801995c <__ieee754_pow+0x7c>
 8019940:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8019944:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8019948:	431d      	orrs	r5, r3
 801994a:	d1e0      	bne.n	801990e <__ieee754_pow+0x2e>
 801994c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019950:	18db      	adds	r3, r3, r3
 8019952:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8019956:	4152      	adcs	r2, r2
 8019958:	429d      	cmp	r5, r3
 801995a:	e7d4      	b.n	8019906 <__ieee754_pow+0x26>
 801995c:	2d00      	cmp	r5, #0
 801995e:	46c3      	mov	fp, r8
 8019960:	da3a      	bge.n	80199d8 <__ieee754_pow+0xf8>
 8019962:	4a83      	ldr	r2, [pc, #524]	@ (8019b70 <__ieee754_pow+0x290>)
 8019964:	4592      	cmp	sl, r2
 8019966:	d84d      	bhi.n	8019a04 <__ieee754_pow+0x124>
 8019968:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801996c:	4592      	cmp	sl, r2
 801996e:	f240 84c7 	bls.w	801a300 <__ieee754_pow+0xa20>
 8019972:	ea4f 522a 	mov.w	r2, sl, asr #20
 8019976:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801997a:	2a14      	cmp	r2, #20
 801997c:	dd0f      	ble.n	801999e <__ieee754_pow+0xbe>
 801997e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8019982:	fa21 f402 	lsr.w	r4, r1, r2
 8019986:	fa04 f202 	lsl.w	r2, r4, r2
 801998a:	428a      	cmp	r2, r1
 801998c:	f040 84b8 	bne.w	801a300 <__ieee754_pow+0xa20>
 8019990:	f004 0401 	and.w	r4, r4, #1
 8019994:	f1c4 0402 	rsb	r4, r4, #2
 8019998:	2900      	cmp	r1, #0
 801999a:	d158      	bne.n	8019a4e <__ieee754_pow+0x16e>
 801999c:	e00e      	b.n	80199bc <__ieee754_pow+0xdc>
 801999e:	2900      	cmp	r1, #0
 80199a0:	d154      	bne.n	8019a4c <__ieee754_pow+0x16c>
 80199a2:	f1c2 0214 	rsb	r2, r2, #20
 80199a6:	fa4a f402 	asr.w	r4, sl, r2
 80199aa:	fa04 f202 	lsl.w	r2, r4, r2
 80199ae:	4552      	cmp	r2, sl
 80199b0:	f040 84a3 	bne.w	801a2fa <__ieee754_pow+0xa1a>
 80199b4:	f004 0401 	and.w	r4, r4, #1
 80199b8:	f1c4 0402 	rsb	r4, r4, #2
 80199bc:	4a6d      	ldr	r2, [pc, #436]	@ (8019b74 <__ieee754_pow+0x294>)
 80199be:	4592      	cmp	sl, r2
 80199c0:	d12e      	bne.n	8019a20 <__ieee754_pow+0x140>
 80199c2:	f1b9 0f00 	cmp.w	r9, #0
 80199c6:	f280 8494 	bge.w	801a2f2 <__ieee754_pow+0xa12>
 80199ca:	496a      	ldr	r1, [pc, #424]	@ (8019b74 <__ieee754_pow+0x294>)
 80199cc:	4632      	mov	r2, r6
 80199ce:	463b      	mov	r3, r7
 80199d0:	2000      	movs	r0, #0
 80199d2:	f7e6 ff43 	bl	800085c <__aeabi_ddiv>
 80199d6:	e7a0      	b.n	801991a <__ieee754_pow+0x3a>
 80199d8:	2400      	movs	r4, #0
 80199da:	bbc1      	cbnz	r1, 8019a4e <__ieee754_pow+0x16e>
 80199dc:	4a63      	ldr	r2, [pc, #396]	@ (8019b6c <__ieee754_pow+0x28c>)
 80199de:	4592      	cmp	sl, r2
 80199e0:	d1ec      	bne.n	80199bc <__ieee754_pow+0xdc>
 80199e2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80199e6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80199ea:	431a      	orrs	r2, r3
 80199ec:	f000 8479 	beq.w	801a2e2 <__ieee754_pow+0xa02>
 80199f0:	4b61      	ldr	r3, [pc, #388]	@ (8019b78 <__ieee754_pow+0x298>)
 80199f2:	4598      	cmp	r8, r3
 80199f4:	d908      	bls.n	8019a08 <__ieee754_pow+0x128>
 80199f6:	f1b9 0f00 	cmp.w	r9, #0
 80199fa:	f2c0 8476 	blt.w	801a2ea <__ieee754_pow+0xa0a>
 80199fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019a02:	e78a      	b.n	801991a <__ieee754_pow+0x3a>
 8019a04:	2402      	movs	r4, #2
 8019a06:	e7e8      	b.n	80199da <__ieee754_pow+0xfa>
 8019a08:	f1b9 0f00 	cmp.w	r9, #0
 8019a0c:	f04f 0000 	mov.w	r0, #0
 8019a10:	f04f 0100 	mov.w	r1, #0
 8019a14:	da81      	bge.n	801991a <__ieee754_pow+0x3a>
 8019a16:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019a1a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8019a1e:	e77c      	b.n	801991a <__ieee754_pow+0x3a>
 8019a20:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8019a24:	d106      	bne.n	8019a34 <__ieee754_pow+0x154>
 8019a26:	4632      	mov	r2, r6
 8019a28:	463b      	mov	r3, r7
 8019a2a:	4630      	mov	r0, r6
 8019a2c:	4639      	mov	r1, r7
 8019a2e:	f7e6 fdeb 	bl	8000608 <__aeabi_dmul>
 8019a32:	e772      	b.n	801991a <__ieee754_pow+0x3a>
 8019a34:	4a51      	ldr	r2, [pc, #324]	@ (8019b7c <__ieee754_pow+0x29c>)
 8019a36:	4591      	cmp	r9, r2
 8019a38:	d109      	bne.n	8019a4e <__ieee754_pow+0x16e>
 8019a3a:	2d00      	cmp	r5, #0
 8019a3c:	db07      	blt.n	8019a4e <__ieee754_pow+0x16e>
 8019a3e:	ec47 6b10 	vmov	d0, r6, r7
 8019a42:	b011      	add	sp, #68	@ 0x44
 8019a44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a48:	f7ff bce8 	b.w	801941c <__ieee754_sqrt>
 8019a4c:	2400      	movs	r4, #0
 8019a4e:	ec47 6b10 	vmov	d0, r6, r7
 8019a52:	9302      	str	r3, [sp, #8]
 8019a54:	f7ff fc5c 	bl	8019310 <fabs>
 8019a58:	9b02      	ldr	r3, [sp, #8]
 8019a5a:	ec51 0b10 	vmov	r0, r1, d0
 8019a5e:	bb53      	cbnz	r3, 8019ab6 <__ieee754_pow+0x1d6>
 8019a60:	4b44      	ldr	r3, [pc, #272]	@ (8019b74 <__ieee754_pow+0x294>)
 8019a62:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8019a66:	429a      	cmp	r2, r3
 8019a68:	d002      	beq.n	8019a70 <__ieee754_pow+0x190>
 8019a6a:	f1b8 0f00 	cmp.w	r8, #0
 8019a6e:	d122      	bne.n	8019ab6 <__ieee754_pow+0x1d6>
 8019a70:	f1b9 0f00 	cmp.w	r9, #0
 8019a74:	da05      	bge.n	8019a82 <__ieee754_pow+0x1a2>
 8019a76:	4602      	mov	r2, r0
 8019a78:	460b      	mov	r3, r1
 8019a7a:	2000      	movs	r0, #0
 8019a7c:	493d      	ldr	r1, [pc, #244]	@ (8019b74 <__ieee754_pow+0x294>)
 8019a7e:	f7e6 feed 	bl	800085c <__aeabi_ddiv>
 8019a82:	2d00      	cmp	r5, #0
 8019a84:	f6bf af49 	bge.w	801991a <__ieee754_pow+0x3a>
 8019a88:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8019a8c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8019a90:	ea58 0804 	orrs.w	r8, r8, r4
 8019a94:	d108      	bne.n	8019aa8 <__ieee754_pow+0x1c8>
 8019a96:	4602      	mov	r2, r0
 8019a98:	460b      	mov	r3, r1
 8019a9a:	4610      	mov	r0, r2
 8019a9c:	4619      	mov	r1, r3
 8019a9e:	f7e6 fbfb 	bl	8000298 <__aeabi_dsub>
 8019aa2:	4602      	mov	r2, r0
 8019aa4:	460b      	mov	r3, r1
 8019aa6:	e794      	b.n	80199d2 <__ieee754_pow+0xf2>
 8019aa8:	2c01      	cmp	r4, #1
 8019aaa:	f47f af36 	bne.w	801991a <__ieee754_pow+0x3a>
 8019aae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019ab2:	4619      	mov	r1, r3
 8019ab4:	e731      	b.n	801991a <__ieee754_pow+0x3a>
 8019ab6:	0feb      	lsrs	r3, r5, #31
 8019ab8:	3b01      	subs	r3, #1
 8019aba:	ea53 0204 	orrs.w	r2, r3, r4
 8019abe:	d102      	bne.n	8019ac6 <__ieee754_pow+0x1e6>
 8019ac0:	4632      	mov	r2, r6
 8019ac2:	463b      	mov	r3, r7
 8019ac4:	e7e9      	b.n	8019a9a <__ieee754_pow+0x1ba>
 8019ac6:	3c01      	subs	r4, #1
 8019ac8:	431c      	orrs	r4, r3
 8019aca:	d016      	beq.n	8019afa <__ieee754_pow+0x21a>
 8019acc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8019b58 <__ieee754_pow+0x278>
 8019ad0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8019ad4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019ad8:	f240 8112 	bls.w	8019d00 <__ieee754_pow+0x420>
 8019adc:	4b28      	ldr	r3, [pc, #160]	@ (8019b80 <__ieee754_pow+0x2a0>)
 8019ade:	459a      	cmp	sl, r3
 8019ae0:	4b25      	ldr	r3, [pc, #148]	@ (8019b78 <__ieee754_pow+0x298>)
 8019ae2:	d916      	bls.n	8019b12 <__ieee754_pow+0x232>
 8019ae4:	4598      	cmp	r8, r3
 8019ae6:	d80b      	bhi.n	8019b00 <__ieee754_pow+0x220>
 8019ae8:	f1b9 0f00 	cmp.w	r9, #0
 8019aec:	da0b      	bge.n	8019b06 <__ieee754_pow+0x226>
 8019aee:	2000      	movs	r0, #0
 8019af0:	b011      	add	sp, #68	@ 0x44
 8019af2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019af6:	f000 bee7 	b.w	801a8c8 <__math_oflow>
 8019afa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8019b60 <__ieee754_pow+0x280>
 8019afe:	e7e7      	b.n	8019ad0 <__ieee754_pow+0x1f0>
 8019b00:	f1b9 0f00 	cmp.w	r9, #0
 8019b04:	dcf3      	bgt.n	8019aee <__ieee754_pow+0x20e>
 8019b06:	2000      	movs	r0, #0
 8019b08:	b011      	add	sp, #68	@ 0x44
 8019b0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b0e:	f000 bed3 	b.w	801a8b8 <__math_uflow>
 8019b12:	4598      	cmp	r8, r3
 8019b14:	d20c      	bcs.n	8019b30 <__ieee754_pow+0x250>
 8019b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	f7e6 ffe5 	bl	8000aec <__aeabi_dcmplt>
 8019b22:	3800      	subs	r0, #0
 8019b24:	bf18      	it	ne
 8019b26:	2001      	movne	r0, #1
 8019b28:	f1b9 0f00 	cmp.w	r9, #0
 8019b2c:	daec      	bge.n	8019b08 <__ieee754_pow+0x228>
 8019b2e:	e7df      	b.n	8019af0 <__ieee754_pow+0x210>
 8019b30:	4b10      	ldr	r3, [pc, #64]	@ (8019b74 <__ieee754_pow+0x294>)
 8019b32:	4598      	cmp	r8, r3
 8019b34:	f04f 0200 	mov.w	r2, #0
 8019b38:	d924      	bls.n	8019b84 <__ieee754_pow+0x2a4>
 8019b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b3e:	2300      	movs	r3, #0
 8019b40:	f7e6 ffd4 	bl	8000aec <__aeabi_dcmplt>
 8019b44:	3800      	subs	r0, #0
 8019b46:	bf18      	it	ne
 8019b48:	2001      	movne	r0, #1
 8019b4a:	f1b9 0f00 	cmp.w	r9, #0
 8019b4e:	dccf      	bgt.n	8019af0 <__ieee754_pow+0x210>
 8019b50:	e7da      	b.n	8019b08 <__ieee754_pow+0x228>
 8019b52:	bf00      	nop
 8019b54:	f3af 8000 	nop.w
 8019b58:	00000000 	.word	0x00000000
 8019b5c:	3ff00000 	.word	0x3ff00000
 8019b60:	00000000 	.word	0x00000000
 8019b64:	bff00000 	.word	0xbff00000
 8019b68:	fff00000 	.word	0xfff00000
 8019b6c:	7ff00000 	.word	0x7ff00000
 8019b70:	433fffff 	.word	0x433fffff
 8019b74:	3ff00000 	.word	0x3ff00000
 8019b78:	3fefffff 	.word	0x3fefffff
 8019b7c:	3fe00000 	.word	0x3fe00000
 8019b80:	43f00000 	.word	0x43f00000
 8019b84:	4b5a      	ldr	r3, [pc, #360]	@ (8019cf0 <__ieee754_pow+0x410>)
 8019b86:	f7e6 fb87 	bl	8000298 <__aeabi_dsub>
 8019b8a:	a351      	add	r3, pc, #324	@ (adr r3, 8019cd0 <__ieee754_pow+0x3f0>)
 8019b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b90:	4604      	mov	r4, r0
 8019b92:	460d      	mov	r5, r1
 8019b94:	f7e6 fd38 	bl	8000608 <__aeabi_dmul>
 8019b98:	a34f      	add	r3, pc, #316	@ (adr r3, 8019cd8 <__ieee754_pow+0x3f8>)
 8019b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b9e:	4606      	mov	r6, r0
 8019ba0:	460f      	mov	r7, r1
 8019ba2:	4620      	mov	r0, r4
 8019ba4:	4629      	mov	r1, r5
 8019ba6:	f7e6 fd2f 	bl	8000608 <__aeabi_dmul>
 8019baa:	4b52      	ldr	r3, [pc, #328]	@ (8019cf4 <__ieee754_pow+0x414>)
 8019bac:	4682      	mov	sl, r0
 8019bae:	468b      	mov	fp, r1
 8019bb0:	2200      	movs	r2, #0
 8019bb2:	4620      	mov	r0, r4
 8019bb4:	4629      	mov	r1, r5
 8019bb6:	f7e6 fd27 	bl	8000608 <__aeabi_dmul>
 8019bba:	4602      	mov	r2, r0
 8019bbc:	460b      	mov	r3, r1
 8019bbe:	a148      	add	r1, pc, #288	@ (adr r1, 8019ce0 <__ieee754_pow+0x400>)
 8019bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bc4:	f7e6 fb68 	bl	8000298 <__aeabi_dsub>
 8019bc8:	4622      	mov	r2, r4
 8019bca:	462b      	mov	r3, r5
 8019bcc:	f7e6 fd1c 	bl	8000608 <__aeabi_dmul>
 8019bd0:	4602      	mov	r2, r0
 8019bd2:	460b      	mov	r3, r1
 8019bd4:	2000      	movs	r0, #0
 8019bd6:	4948      	ldr	r1, [pc, #288]	@ (8019cf8 <__ieee754_pow+0x418>)
 8019bd8:	f7e6 fb5e 	bl	8000298 <__aeabi_dsub>
 8019bdc:	4622      	mov	r2, r4
 8019bde:	4680      	mov	r8, r0
 8019be0:	4689      	mov	r9, r1
 8019be2:	462b      	mov	r3, r5
 8019be4:	4620      	mov	r0, r4
 8019be6:	4629      	mov	r1, r5
 8019be8:	f7e6 fd0e 	bl	8000608 <__aeabi_dmul>
 8019bec:	4602      	mov	r2, r0
 8019bee:	460b      	mov	r3, r1
 8019bf0:	4640      	mov	r0, r8
 8019bf2:	4649      	mov	r1, r9
 8019bf4:	f7e6 fd08 	bl	8000608 <__aeabi_dmul>
 8019bf8:	a33b      	add	r3, pc, #236	@ (adr r3, 8019ce8 <__ieee754_pow+0x408>)
 8019bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bfe:	f7e6 fd03 	bl	8000608 <__aeabi_dmul>
 8019c02:	4602      	mov	r2, r0
 8019c04:	460b      	mov	r3, r1
 8019c06:	4650      	mov	r0, sl
 8019c08:	4659      	mov	r1, fp
 8019c0a:	f7e6 fb45 	bl	8000298 <__aeabi_dsub>
 8019c0e:	4602      	mov	r2, r0
 8019c10:	460b      	mov	r3, r1
 8019c12:	4680      	mov	r8, r0
 8019c14:	4689      	mov	r9, r1
 8019c16:	4630      	mov	r0, r6
 8019c18:	4639      	mov	r1, r7
 8019c1a:	f7e6 fb3f 	bl	800029c <__adddf3>
 8019c1e:	2400      	movs	r4, #0
 8019c20:	4632      	mov	r2, r6
 8019c22:	463b      	mov	r3, r7
 8019c24:	4620      	mov	r0, r4
 8019c26:	460d      	mov	r5, r1
 8019c28:	f7e6 fb36 	bl	8000298 <__aeabi_dsub>
 8019c2c:	4602      	mov	r2, r0
 8019c2e:	460b      	mov	r3, r1
 8019c30:	4640      	mov	r0, r8
 8019c32:	4649      	mov	r1, r9
 8019c34:	f7e6 fb30 	bl	8000298 <__aeabi_dsub>
 8019c38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019c3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019c40:	2300      	movs	r3, #0
 8019c42:	9304      	str	r3, [sp, #16]
 8019c44:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8019c48:	4606      	mov	r6, r0
 8019c4a:	460f      	mov	r7, r1
 8019c4c:	4652      	mov	r2, sl
 8019c4e:	465b      	mov	r3, fp
 8019c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019c54:	f7e6 fb20 	bl	8000298 <__aeabi_dsub>
 8019c58:	4622      	mov	r2, r4
 8019c5a:	462b      	mov	r3, r5
 8019c5c:	f7e6 fcd4 	bl	8000608 <__aeabi_dmul>
 8019c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019c64:	4680      	mov	r8, r0
 8019c66:	4689      	mov	r9, r1
 8019c68:	4630      	mov	r0, r6
 8019c6a:	4639      	mov	r1, r7
 8019c6c:	f7e6 fccc 	bl	8000608 <__aeabi_dmul>
 8019c70:	4602      	mov	r2, r0
 8019c72:	460b      	mov	r3, r1
 8019c74:	4640      	mov	r0, r8
 8019c76:	4649      	mov	r1, r9
 8019c78:	f7e6 fb10 	bl	800029c <__adddf3>
 8019c7c:	4652      	mov	r2, sl
 8019c7e:	465b      	mov	r3, fp
 8019c80:	4606      	mov	r6, r0
 8019c82:	460f      	mov	r7, r1
 8019c84:	4620      	mov	r0, r4
 8019c86:	4629      	mov	r1, r5
 8019c88:	f7e6 fcbe 	bl	8000608 <__aeabi_dmul>
 8019c8c:	460b      	mov	r3, r1
 8019c8e:	4602      	mov	r2, r0
 8019c90:	4680      	mov	r8, r0
 8019c92:	4689      	mov	r9, r1
 8019c94:	4630      	mov	r0, r6
 8019c96:	4639      	mov	r1, r7
 8019c98:	f7e6 fb00 	bl	800029c <__adddf3>
 8019c9c:	4b17      	ldr	r3, [pc, #92]	@ (8019cfc <__ieee754_pow+0x41c>)
 8019c9e:	4299      	cmp	r1, r3
 8019ca0:	4604      	mov	r4, r0
 8019ca2:	460d      	mov	r5, r1
 8019ca4:	468a      	mov	sl, r1
 8019ca6:	468b      	mov	fp, r1
 8019ca8:	f340 82ef 	ble.w	801a28a <__ieee754_pow+0x9aa>
 8019cac:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8019cb0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8019cb4:	4303      	orrs	r3, r0
 8019cb6:	f000 81e8 	beq.w	801a08a <__ieee754_pow+0x7aa>
 8019cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	f7e6 ff13 	bl	8000aec <__aeabi_dcmplt>
 8019cc6:	3800      	subs	r0, #0
 8019cc8:	bf18      	it	ne
 8019cca:	2001      	movne	r0, #1
 8019ccc:	e710      	b.n	8019af0 <__ieee754_pow+0x210>
 8019cce:	bf00      	nop
 8019cd0:	60000000 	.word	0x60000000
 8019cd4:	3ff71547 	.word	0x3ff71547
 8019cd8:	f85ddf44 	.word	0xf85ddf44
 8019cdc:	3e54ae0b 	.word	0x3e54ae0b
 8019ce0:	55555555 	.word	0x55555555
 8019ce4:	3fd55555 	.word	0x3fd55555
 8019ce8:	652b82fe 	.word	0x652b82fe
 8019cec:	3ff71547 	.word	0x3ff71547
 8019cf0:	3ff00000 	.word	0x3ff00000
 8019cf4:	3fd00000 	.word	0x3fd00000
 8019cf8:	3fe00000 	.word	0x3fe00000
 8019cfc:	408fffff 	.word	0x408fffff
 8019d00:	4bd5      	ldr	r3, [pc, #852]	@ (801a058 <__ieee754_pow+0x778>)
 8019d02:	402b      	ands	r3, r5
 8019d04:	2200      	movs	r2, #0
 8019d06:	b92b      	cbnz	r3, 8019d14 <__ieee754_pow+0x434>
 8019d08:	4bd4      	ldr	r3, [pc, #848]	@ (801a05c <__ieee754_pow+0x77c>)
 8019d0a:	f7e6 fc7d 	bl	8000608 <__aeabi_dmul>
 8019d0e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8019d12:	468b      	mov	fp, r1
 8019d14:	ea4f 532b 	mov.w	r3, fp, asr #20
 8019d18:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8019d1c:	4413      	add	r3, r2
 8019d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019d20:	4bcf      	ldr	r3, [pc, #828]	@ (801a060 <__ieee754_pow+0x780>)
 8019d22:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8019d26:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8019d2a:	459b      	cmp	fp, r3
 8019d2c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8019d30:	dd08      	ble.n	8019d44 <__ieee754_pow+0x464>
 8019d32:	4bcc      	ldr	r3, [pc, #816]	@ (801a064 <__ieee754_pow+0x784>)
 8019d34:	459b      	cmp	fp, r3
 8019d36:	f340 81a5 	ble.w	801a084 <__ieee754_pow+0x7a4>
 8019d3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d3c:	3301      	adds	r3, #1
 8019d3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019d40:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8019d44:	f04f 0a00 	mov.w	sl, #0
 8019d48:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019d4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019d4e:	4bc6      	ldr	r3, [pc, #792]	@ (801a068 <__ieee754_pow+0x788>)
 8019d50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019d54:	ed93 7b00 	vldr	d7, [r3]
 8019d58:	4629      	mov	r1, r5
 8019d5a:	ec53 2b17 	vmov	r2, r3, d7
 8019d5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019d62:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019d66:	f7e6 fa97 	bl	8000298 <__aeabi_dsub>
 8019d6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019d6e:	4606      	mov	r6, r0
 8019d70:	460f      	mov	r7, r1
 8019d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019d76:	f7e6 fa91 	bl	800029c <__adddf3>
 8019d7a:	4602      	mov	r2, r0
 8019d7c:	460b      	mov	r3, r1
 8019d7e:	2000      	movs	r0, #0
 8019d80:	49ba      	ldr	r1, [pc, #744]	@ (801a06c <__ieee754_pow+0x78c>)
 8019d82:	f7e6 fd6b 	bl	800085c <__aeabi_ddiv>
 8019d86:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8019d8a:	4602      	mov	r2, r0
 8019d8c:	460b      	mov	r3, r1
 8019d8e:	4630      	mov	r0, r6
 8019d90:	4639      	mov	r1, r7
 8019d92:	f7e6 fc39 	bl	8000608 <__aeabi_dmul>
 8019d96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019d9a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8019d9e:	106d      	asrs	r5, r5, #1
 8019da0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8019da4:	f04f 0b00 	mov.w	fp, #0
 8019da8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8019dac:	4661      	mov	r1, ip
 8019dae:	2200      	movs	r2, #0
 8019db0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8019db4:	4658      	mov	r0, fp
 8019db6:	46e1      	mov	r9, ip
 8019db8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8019dbc:	4614      	mov	r4, r2
 8019dbe:	461d      	mov	r5, r3
 8019dc0:	f7e6 fc22 	bl	8000608 <__aeabi_dmul>
 8019dc4:	4602      	mov	r2, r0
 8019dc6:	460b      	mov	r3, r1
 8019dc8:	4630      	mov	r0, r6
 8019dca:	4639      	mov	r1, r7
 8019dcc:	f7e6 fa64 	bl	8000298 <__aeabi_dsub>
 8019dd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019dd4:	4606      	mov	r6, r0
 8019dd6:	460f      	mov	r7, r1
 8019dd8:	4620      	mov	r0, r4
 8019dda:	4629      	mov	r1, r5
 8019ddc:	f7e6 fa5c 	bl	8000298 <__aeabi_dsub>
 8019de0:	4602      	mov	r2, r0
 8019de2:	460b      	mov	r3, r1
 8019de4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019de8:	f7e6 fa56 	bl	8000298 <__aeabi_dsub>
 8019dec:	465a      	mov	r2, fp
 8019dee:	464b      	mov	r3, r9
 8019df0:	f7e6 fc0a 	bl	8000608 <__aeabi_dmul>
 8019df4:	4602      	mov	r2, r0
 8019df6:	460b      	mov	r3, r1
 8019df8:	4630      	mov	r0, r6
 8019dfa:	4639      	mov	r1, r7
 8019dfc:	f7e6 fa4c 	bl	8000298 <__aeabi_dsub>
 8019e00:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8019e04:	f7e6 fc00 	bl	8000608 <__aeabi_dmul>
 8019e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019e0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019e10:	4610      	mov	r0, r2
 8019e12:	4619      	mov	r1, r3
 8019e14:	f7e6 fbf8 	bl	8000608 <__aeabi_dmul>
 8019e18:	a37d      	add	r3, pc, #500	@ (adr r3, 801a010 <__ieee754_pow+0x730>)
 8019e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e1e:	4604      	mov	r4, r0
 8019e20:	460d      	mov	r5, r1
 8019e22:	f7e6 fbf1 	bl	8000608 <__aeabi_dmul>
 8019e26:	a37c      	add	r3, pc, #496	@ (adr r3, 801a018 <__ieee754_pow+0x738>)
 8019e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e2c:	f7e6 fa36 	bl	800029c <__adddf3>
 8019e30:	4622      	mov	r2, r4
 8019e32:	462b      	mov	r3, r5
 8019e34:	f7e6 fbe8 	bl	8000608 <__aeabi_dmul>
 8019e38:	a379      	add	r3, pc, #484	@ (adr r3, 801a020 <__ieee754_pow+0x740>)
 8019e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e3e:	f7e6 fa2d 	bl	800029c <__adddf3>
 8019e42:	4622      	mov	r2, r4
 8019e44:	462b      	mov	r3, r5
 8019e46:	f7e6 fbdf 	bl	8000608 <__aeabi_dmul>
 8019e4a:	a377      	add	r3, pc, #476	@ (adr r3, 801a028 <__ieee754_pow+0x748>)
 8019e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e50:	f7e6 fa24 	bl	800029c <__adddf3>
 8019e54:	4622      	mov	r2, r4
 8019e56:	462b      	mov	r3, r5
 8019e58:	f7e6 fbd6 	bl	8000608 <__aeabi_dmul>
 8019e5c:	a374      	add	r3, pc, #464	@ (adr r3, 801a030 <__ieee754_pow+0x750>)
 8019e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e62:	f7e6 fa1b 	bl	800029c <__adddf3>
 8019e66:	4622      	mov	r2, r4
 8019e68:	462b      	mov	r3, r5
 8019e6a:	f7e6 fbcd 	bl	8000608 <__aeabi_dmul>
 8019e6e:	a372      	add	r3, pc, #456	@ (adr r3, 801a038 <__ieee754_pow+0x758>)
 8019e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e74:	f7e6 fa12 	bl	800029c <__adddf3>
 8019e78:	4622      	mov	r2, r4
 8019e7a:	4606      	mov	r6, r0
 8019e7c:	460f      	mov	r7, r1
 8019e7e:	462b      	mov	r3, r5
 8019e80:	4620      	mov	r0, r4
 8019e82:	4629      	mov	r1, r5
 8019e84:	f7e6 fbc0 	bl	8000608 <__aeabi_dmul>
 8019e88:	4602      	mov	r2, r0
 8019e8a:	460b      	mov	r3, r1
 8019e8c:	4630      	mov	r0, r6
 8019e8e:	4639      	mov	r1, r7
 8019e90:	f7e6 fbba 	bl	8000608 <__aeabi_dmul>
 8019e94:	465a      	mov	r2, fp
 8019e96:	4604      	mov	r4, r0
 8019e98:	460d      	mov	r5, r1
 8019e9a:	464b      	mov	r3, r9
 8019e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019ea0:	f7e6 f9fc 	bl	800029c <__adddf3>
 8019ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019ea8:	f7e6 fbae 	bl	8000608 <__aeabi_dmul>
 8019eac:	4622      	mov	r2, r4
 8019eae:	462b      	mov	r3, r5
 8019eb0:	f7e6 f9f4 	bl	800029c <__adddf3>
 8019eb4:	465a      	mov	r2, fp
 8019eb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019eba:	464b      	mov	r3, r9
 8019ebc:	4658      	mov	r0, fp
 8019ebe:	4649      	mov	r1, r9
 8019ec0:	f7e6 fba2 	bl	8000608 <__aeabi_dmul>
 8019ec4:	4b6a      	ldr	r3, [pc, #424]	@ (801a070 <__ieee754_pow+0x790>)
 8019ec6:	2200      	movs	r2, #0
 8019ec8:	4606      	mov	r6, r0
 8019eca:	460f      	mov	r7, r1
 8019ecc:	f7e6 f9e6 	bl	800029c <__adddf3>
 8019ed0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019ed4:	f7e6 f9e2 	bl	800029c <__adddf3>
 8019ed8:	46d8      	mov	r8, fp
 8019eda:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8019ede:	460d      	mov	r5, r1
 8019ee0:	465a      	mov	r2, fp
 8019ee2:	460b      	mov	r3, r1
 8019ee4:	4640      	mov	r0, r8
 8019ee6:	4649      	mov	r1, r9
 8019ee8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8019eec:	f7e6 fb8c 	bl	8000608 <__aeabi_dmul>
 8019ef0:	465c      	mov	r4, fp
 8019ef2:	4680      	mov	r8, r0
 8019ef4:	4689      	mov	r9, r1
 8019ef6:	4b5e      	ldr	r3, [pc, #376]	@ (801a070 <__ieee754_pow+0x790>)
 8019ef8:	2200      	movs	r2, #0
 8019efa:	4620      	mov	r0, r4
 8019efc:	4629      	mov	r1, r5
 8019efe:	f7e6 f9cb 	bl	8000298 <__aeabi_dsub>
 8019f02:	4632      	mov	r2, r6
 8019f04:	463b      	mov	r3, r7
 8019f06:	f7e6 f9c7 	bl	8000298 <__aeabi_dsub>
 8019f0a:	4602      	mov	r2, r0
 8019f0c:	460b      	mov	r3, r1
 8019f0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019f12:	f7e6 f9c1 	bl	8000298 <__aeabi_dsub>
 8019f16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019f1a:	f7e6 fb75 	bl	8000608 <__aeabi_dmul>
 8019f1e:	4622      	mov	r2, r4
 8019f20:	4606      	mov	r6, r0
 8019f22:	460f      	mov	r7, r1
 8019f24:	462b      	mov	r3, r5
 8019f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019f2a:	f7e6 fb6d 	bl	8000608 <__aeabi_dmul>
 8019f2e:	4602      	mov	r2, r0
 8019f30:	460b      	mov	r3, r1
 8019f32:	4630      	mov	r0, r6
 8019f34:	4639      	mov	r1, r7
 8019f36:	f7e6 f9b1 	bl	800029c <__adddf3>
 8019f3a:	4606      	mov	r6, r0
 8019f3c:	460f      	mov	r7, r1
 8019f3e:	4602      	mov	r2, r0
 8019f40:	460b      	mov	r3, r1
 8019f42:	4640      	mov	r0, r8
 8019f44:	4649      	mov	r1, r9
 8019f46:	f7e6 f9a9 	bl	800029c <__adddf3>
 8019f4a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8019f4e:	a33c      	add	r3, pc, #240	@ (adr r3, 801a040 <__ieee754_pow+0x760>)
 8019f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f54:	4658      	mov	r0, fp
 8019f56:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8019f5a:	460d      	mov	r5, r1
 8019f5c:	f7e6 fb54 	bl	8000608 <__aeabi_dmul>
 8019f60:	465c      	mov	r4, fp
 8019f62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019f66:	4642      	mov	r2, r8
 8019f68:	464b      	mov	r3, r9
 8019f6a:	4620      	mov	r0, r4
 8019f6c:	4629      	mov	r1, r5
 8019f6e:	f7e6 f993 	bl	8000298 <__aeabi_dsub>
 8019f72:	4602      	mov	r2, r0
 8019f74:	460b      	mov	r3, r1
 8019f76:	4630      	mov	r0, r6
 8019f78:	4639      	mov	r1, r7
 8019f7a:	f7e6 f98d 	bl	8000298 <__aeabi_dsub>
 8019f7e:	a332      	add	r3, pc, #200	@ (adr r3, 801a048 <__ieee754_pow+0x768>)
 8019f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f84:	f7e6 fb40 	bl	8000608 <__aeabi_dmul>
 8019f88:	a331      	add	r3, pc, #196	@ (adr r3, 801a050 <__ieee754_pow+0x770>)
 8019f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8e:	4606      	mov	r6, r0
 8019f90:	460f      	mov	r7, r1
 8019f92:	4620      	mov	r0, r4
 8019f94:	4629      	mov	r1, r5
 8019f96:	f7e6 fb37 	bl	8000608 <__aeabi_dmul>
 8019f9a:	4602      	mov	r2, r0
 8019f9c:	460b      	mov	r3, r1
 8019f9e:	4630      	mov	r0, r6
 8019fa0:	4639      	mov	r1, r7
 8019fa2:	f7e6 f97b 	bl	800029c <__adddf3>
 8019fa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019fa8:	4b32      	ldr	r3, [pc, #200]	@ (801a074 <__ieee754_pow+0x794>)
 8019faa:	4413      	add	r3, r2
 8019fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fb0:	f7e6 f974 	bl	800029c <__adddf3>
 8019fb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019fb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019fba:	f7e6 fabb 	bl	8000534 <__aeabi_i2d>
 8019fbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019fc0:	4b2d      	ldr	r3, [pc, #180]	@ (801a078 <__ieee754_pow+0x798>)
 8019fc2:	4413      	add	r3, r2
 8019fc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019fc8:	4606      	mov	r6, r0
 8019fca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019fce:	460f      	mov	r7, r1
 8019fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019fd4:	f7e6 f962 	bl	800029c <__adddf3>
 8019fd8:	4642      	mov	r2, r8
 8019fda:	464b      	mov	r3, r9
 8019fdc:	f7e6 f95e 	bl	800029c <__adddf3>
 8019fe0:	4632      	mov	r2, r6
 8019fe2:	463b      	mov	r3, r7
 8019fe4:	f7e6 f95a 	bl	800029c <__adddf3>
 8019fe8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8019fec:	4632      	mov	r2, r6
 8019fee:	463b      	mov	r3, r7
 8019ff0:	4658      	mov	r0, fp
 8019ff2:	460d      	mov	r5, r1
 8019ff4:	f7e6 f950 	bl	8000298 <__aeabi_dsub>
 8019ff8:	4642      	mov	r2, r8
 8019ffa:	464b      	mov	r3, r9
 8019ffc:	f7e6 f94c 	bl	8000298 <__aeabi_dsub>
 801a000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a004:	f7e6 f948 	bl	8000298 <__aeabi_dsub>
 801a008:	465c      	mov	r4, fp
 801a00a:	4602      	mov	r2, r0
 801a00c:	e036      	b.n	801a07c <__ieee754_pow+0x79c>
 801a00e:	bf00      	nop
 801a010:	4a454eef 	.word	0x4a454eef
 801a014:	3fca7e28 	.word	0x3fca7e28
 801a018:	93c9db65 	.word	0x93c9db65
 801a01c:	3fcd864a 	.word	0x3fcd864a
 801a020:	a91d4101 	.word	0xa91d4101
 801a024:	3fd17460 	.word	0x3fd17460
 801a028:	518f264d 	.word	0x518f264d
 801a02c:	3fd55555 	.word	0x3fd55555
 801a030:	db6fabff 	.word	0xdb6fabff
 801a034:	3fdb6db6 	.word	0x3fdb6db6
 801a038:	33333303 	.word	0x33333303
 801a03c:	3fe33333 	.word	0x3fe33333
 801a040:	e0000000 	.word	0xe0000000
 801a044:	3feec709 	.word	0x3feec709
 801a048:	dc3a03fd 	.word	0xdc3a03fd
 801a04c:	3feec709 	.word	0x3feec709
 801a050:	145b01f5 	.word	0x145b01f5
 801a054:	be3e2fe0 	.word	0xbe3e2fe0
 801a058:	7ff00000 	.word	0x7ff00000
 801a05c:	43400000 	.word	0x43400000
 801a060:	0003988e 	.word	0x0003988e
 801a064:	000bb679 	.word	0x000bb679
 801a068:	0802eb30 	.word	0x0802eb30
 801a06c:	3ff00000 	.word	0x3ff00000
 801a070:	40080000 	.word	0x40080000
 801a074:	0802eb10 	.word	0x0802eb10
 801a078:	0802eb20 	.word	0x0802eb20
 801a07c:	460b      	mov	r3, r1
 801a07e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a082:	e5d7      	b.n	8019c34 <__ieee754_pow+0x354>
 801a084:	f04f 0a01 	mov.w	sl, #1
 801a088:	e65e      	b.n	8019d48 <__ieee754_pow+0x468>
 801a08a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801a35c <__ieee754_pow+0xa7c>)
 801a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a090:	4630      	mov	r0, r6
 801a092:	4639      	mov	r1, r7
 801a094:	f7e6 f902 	bl	800029c <__adddf3>
 801a098:	4642      	mov	r2, r8
 801a09a:	e9cd 0100 	strd	r0, r1, [sp]
 801a09e:	464b      	mov	r3, r9
 801a0a0:	4620      	mov	r0, r4
 801a0a2:	4629      	mov	r1, r5
 801a0a4:	f7e6 f8f8 	bl	8000298 <__aeabi_dsub>
 801a0a8:	4602      	mov	r2, r0
 801a0aa:	460b      	mov	r3, r1
 801a0ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a0b0:	f7e6 fd3a 	bl	8000b28 <__aeabi_dcmpgt>
 801a0b4:	2800      	cmp	r0, #0
 801a0b6:	f47f ae00 	bne.w	8019cba <__ieee754_pow+0x3da>
 801a0ba:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801a0be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801a0c2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801a0c6:	fa43 fa0a 	asr.w	sl, r3, sl
 801a0ca:	44da      	add	sl, fp
 801a0cc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801a0d0:	489d      	ldr	r0, [pc, #628]	@ (801a348 <__ieee754_pow+0xa68>)
 801a0d2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801a0d6:	4108      	asrs	r0, r1
 801a0d8:	ea00 030a 	and.w	r3, r0, sl
 801a0dc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a0e0:	f1c1 0114 	rsb	r1, r1, #20
 801a0e4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801a0e8:	fa4a fa01 	asr.w	sl, sl, r1
 801a0ec:	f1bb 0f00 	cmp.w	fp, #0
 801a0f0:	4640      	mov	r0, r8
 801a0f2:	4649      	mov	r1, r9
 801a0f4:	f04f 0200 	mov.w	r2, #0
 801a0f8:	bfb8      	it	lt
 801a0fa:	f1ca 0a00 	rsblt	sl, sl, #0
 801a0fe:	f7e6 f8cb 	bl	8000298 <__aeabi_dsub>
 801a102:	4680      	mov	r8, r0
 801a104:	4689      	mov	r9, r1
 801a106:	4632      	mov	r2, r6
 801a108:	463b      	mov	r3, r7
 801a10a:	4640      	mov	r0, r8
 801a10c:	4649      	mov	r1, r9
 801a10e:	f7e6 f8c5 	bl	800029c <__adddf3>
 801a112:	2400      	movs	r4, #0
 801a114:	a37c      	add	r3, pc, #496	@ (adr r3, 801a308 <__ieee754_pow+0xa28>)
 801a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a11a:	4620      	mov	r0, r4
 801a11c:	460d      	mov	r5, r1
 801a11e:	f7e6 fa73 	bl	8000608 <__aeabi_dmul>
 801a122:	4642      	mov	r2, r8
 801a124:	e9cd 0100 	strd	r0, r1, [sp]
 801a128:	464b      	mov	r3, r9
 801a12a:	4620      	mov	r0, r4
 801a12c:	4629      	mov	r1, r5
 801a12e:	f7e6 f8b3 	bl	8000298 <__aeabi_dsub>
 801a132:	4602      	mov	r2, r0
 801a134:	460b      	mov	r3, r1
 801a136:	4630      	mov	r0, r6
 801a138:	4639      	mov	r1, r7
 801a13a:	f7e6 f8ad 	bl	8000298 <__aeabi_dsub>
 801a13e:	a374      	add	r3, pc, #464	@ (adr r3, 801a310 <__ieee754_pow+0xa30>)
 801a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a144:	f7e6 fa60 	bl	8000608 <__aeabi_dmul>
 801a148:	a373      	add	r3, pc, #460	@ (adr r3, 801a318 <__ieee754_pow+0xa38>)
 801a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a14e:	4680      	mov	r8, r0
 801a150:	4689      	mov	r9, r1
 801a152:	4620      	mov	r0, r4
 801a154:	4629      	mov	r1, r5
 801a156:	f7e6 fa57 	bl	8000608 <__aeabi_dmul>
 801a15a:	4602      	mov	r2, r0
 801a15c:	460b      	mov	r3, r1
 801a15e:	4640      	mov	r0, r8
 801a160:	4649      	mov	r1, r9
 801a162:	f7e6 f89b 	bl	800029c <__adddf3>
 801a166:	4604      	mov	r4, r0
 801a168:	460d      	mov	r5, r1
 801a16a:	4602      	mov	r2, r0
 801a16c:	460b      	mov	r3, r1
 801a16e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a172:	f7e6 f893 	bl	800029c <__adddf3>
 801a176:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a17a:	4680      	mov	r8, r0
 801a17c:	4689      	mov	r9, r1
 801a17e:	f7e6 f88b 	bl	8000298 <__aeabi_dsub>
 801a182:	4602      	mov	r2, r0
 801a184:	460b      	mov	r3, r1
 801a186:	4620      	mov	r0, r4
 801a188:	4629      	mov	r1, r5
 801a18a:	f7e6 f885 	bl	8000298 <__aeabi_dsub>
 801a18e:	4642      	mov	r2, r8
 801a190:	4606      	mov	r6, r0
 801a192:	460f      	mov	r7, r1
 801a194:	464b      	mov	r3, r9
 801a196:	4640      	mov	r0, r8
 801a198:	4649      	mov	r1, r9
 801a19a:	f7e6 fa35 	bl	8000608 <__aeabi_dmul>
 801a19e:	a360      	add	r3, pc, #384	@ (adr r3, 801a320 <__ieee754_pow+0xa40>)
 801a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1a4:	4604      	mov	r4, r0
 801a1a6:	460d      	mov	r5, r1
 801a1a8:	f7e6 fa2e 	bl	8000608 <__aeabi_dmul>
 801a1ac:	a35e      	add	r3, pc, #376	@ (adr r3, 801a328 <__ieee754_pow+0xa48>)
 801a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1b2:	f7e6 f871 	bl	8000298 <__aeabi_dsub>
 801a1b6:	4622      	mov	r2, r4
 801a1b8:	462b      	mov	r3, r5
 801a1ba:	f7e6 fa25 	bl	8000608 <__aeabi_dmul>
 801a1be:	a35c      	add	r3, pc, #368	@ (adr r3, 801a330 <__ieee754_pow+0xa50>)
 801a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1c4:	f7e6 f86a 	bl	800029c <__adddf3>
 801a1c8:	4622      	mov	r2, r4
 801a1ca:	462b      	mov	r3, r5
 801a1cc:	f7e6 fa1c 	bl	8000608 <__aeabi_dmul>
 801a1d0:	a359      	add	r3, pc, #356	@ (adr r3, 801a338 <__ieee754_pow+0xa58>)
 801a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1d6:	f7e6 f85f 	bl	8000298 <__aeabi_dsub>
 801a1da:	4622      	mov	r2, r4
 801a1dc:	462b      	mov	r3, r5
 801a1de:	f7e6 fa13 	bl	8000608 <__aeabi_dmul>
 801a1e2:	a357      	add	r3, pc, #348	@ (adr r3, 801a340 <__ieee754_pow+0xa60>)
 801a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1e8:	f7e6 f858 	bl	800029c <__adddf3>
 801a1ec:	4622      	mov	r2, r4
 801a1ee:	462b      	mov	r3, r5
 801a1f0:	f7e6 fa0a 	bl	8000608 <__aeabi_dmul>
 801a1f4:	4602      	mov	r2, r0
 801a1f6:	460b      	mov	r3, r1
 801a1f8:	4640      	mov	r0, r8
 801a1fa:	4649      	mov	r1, r9
 801a1fc:	f7e6 f84c 	bl	8000298 <__aeabi_dsub>
 801a200:	4604      	mov	r4, r0
 801a202:	460d      	mov	r5, r1
 801a204:	4602      	mov	r2, r0
 801a206:	460b      	mov	r3, r1
 801a208:	4640      	mov	r0, r8
 801a20a:	4649      	mov	r1, r9
 801a20c:	f7e6 f9fc 	bl	8000608 <__aeabi_dmul>
 801a210:	2200      	movs	r2, #0
 801a212:	e9cd 0100 	strd	r0, r1, [sp]
 801a216:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a21a:	4620      	mov	r0, r4
 801a21c:	4629      	mov	r1, r5
 801a21e:	f7e6 f83b 	bl	8000298 <__aeabi_dsub>
 801a222:	4602      	mov	r2, r0
 801a224:	460b      	mov	r3, r1
 801a226:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a22a:	f7e6 fb17 	bl	800085c <__aeabi_ddiv>
 801a22e:	4632      	mov	r2, r6
 801a230:	4604      	mov	r4, r0
 801a232:	460d      	mov	r5, r1
 801a234:	463b      	mov	r3, r7
 801a236:	4640      	mov	r0, r8
 801a238:	4649      	mov	r1, r9
 801a23a:	f7e6 f9e5 	bl	8000608 <__aeabi_dmul>
 801a23e:	4632      	mov	r2, r6
 801a240:	463b      	mov	r3, r7
 801a242:	f7e6 f82b 	bl	800029c <__adddf3>
 801a246:	4602      	mov	r2, r0
 801a248:	460b      	mov	r3, r1
 801a24a:	4620      	mov	r0, r4
 801a24c:	4629      	mov	r1, r5
 801a24e:	f7e6 f823 	bl	8000298 <__aeabi_dsub>
 801a252:	4642      	mov	r2, r8
 801a254:	464b      	mov	r3, r9
 801a256:	f7e6 f81f 	bl	8000298 <__aeabi_dsub>
 801a25a:	460b      	mov	r3, r1
 801a25c:	4602      	mov	r2, r0
 801a25e:	493b      	ldr	r1, [pc, #236]	@ (801a34c <__ieee754_pow+0xa6c>)
 801a260:	2000      	movs	r0, #0
 801a262:	f7e6 f819 	bl	8000298 <__aeabi_dsub>
 801a266:	ec41 0b10 	vmov	d0, r0, r1
 801a26a:	ee10 3a90 	vmov	r3, s1
 801a26e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a276:	da30      	bge.n	801a2da <__ieee754_pow+0x9fa>
 801a278:	4650      	mov	r0, sl
 801a27a:	f000 fa71 	bl	801a760 <scalbn>
 801a27e:	ec51 0b10 	vmov	r0, r1, d0
 801a282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a286:	f7ff bbd2 	b.w	8019a2e <__ieee754_pow+0x14e>
 801a28a:	4c31      	ldr	r4, [pc, #196]	@ (801a350 <__ieee754_pow+0xa70>)
 801a28c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a290:	42a3      	cmp	r3, r4
 801a292:	d91a      	bls.n	801a2ca <__ieee754_pow+0x9ea>
 801a294:	4b2f      	ldr	r3, [pc, #188]	@ (801a354 <__ieee754_pow+0xa74>)
 801a296:	440b      	add	r3, r1
 801a298:	4303      	orrs	r3, r0
 801a29a:	d009      	beq.n	801a2b0 <__ieee754_pow+0x9d0>
 801a29c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	f7e6 fc22 	bl	8000aec <__aeabi_dcmplt>
 801a2a8:	3800      	subs	r0, #0
 801a2aa:	bf18      	it	ne
 801a2ac:	2001      	movne	r0, #1
 801a2ae:	e42b      	b.n	8019b08 <__ieee754_pow+0x228>
 801a2b0:	4642      	mov	r2, r8
 801a2b2:	464b      	mov	r3, r9
 801a2b4:	f7e5 fff0 	bl	8000298 <__aeabi_dsub>
 801a2b8:	4632      	mov	r2, r6
 801a2ba:	463b      	mov	r3, r7
 801a2bc:	f7e6 fc2a 	bl	8000b14 <__aeabi_dcmpge>
 801a2c0:	2800      	cmp	r0, #0
 801a2c2:	d1eb      	bne.n	801a29c <__ieee754_pow+0x9bc>
 801a2c4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801a364 <__ieee754_pow+0xa84>
 801a2c8:	e6f7      	b.n	801a0ba <__ieee754_pow+0x7da>
 801a2ca:	469a      	mov	sl, r3
 801a2cc:	4b22      	ldr	r3, [pc, #136]	@ (801a358 <__ieee754_pow+0xa78>)
 801a2ce:	459a      	cmp	sl, r3
 801a2d0:	f63f aef3 	bhi.w	801a0ba <__ieee754_pow+0x7da>
 801a2d4:	f8dd a010 	ldr.w	sl, [sp, #16]
 801a2d8:	e715      	b.n	801a106 <__ieee754_pow+0x826>
 801a2da:	ec51 0b10 	vmov	r0, r1, d0
 801a2de:	4619      	mov	r1, r3
 801a2e0:	e7cf      	b.n	801a282 <__ieee754_pow+0x9a2>
 801a2e2:	491a      	ldr	r1, [pc, #104]	@ (801a34c <__ieee754_pow+0xa6c>)
 801a2e4:	2000      	movs	r0, #0
 801a2e6:	f7ff bb18 	b.w	801991a <__ieee754_pow+0x3a>
 801a2ea:	2000      	movs	r0, #0
 801a2ec:	2100      	movs	r1, #0
 801a2ee:	f7ff bb14 	b.w	801991a <__ieee754_pow+0x3a>
 801a2f2:	4630      	mov	r0, r6
 801a2f4:	4639      	mov	r1, r7
 801a2f6:	f7ff bb10 	b.w	801991a <__ieee754_pow+0x3a>
 801a2fa:	460c      	mov	r4, r1
 801a2fc:	f7ff bb5e 	b.w	80199bc <__ieee754_pow+0xdc>
 801a300:	2400      	movs	r4, #0
 801a302:	f7ff bb49 	b.w	8019998 <__ieee754_pow+0xb8>
 801a306:	bf00      	nop
 801a308:	00000000 	.word	0x00000000
 801a30c:	3fe62e43 	.word	0x3fe62e43
 801a310:	fefa39ef 	.word	0xfefa39ef
 801a314:	3fe62e42 	.word	0x3fe62e42
 801a318:	0ca86c39 	.word	0x0ca86c39
 801a31c:	be205c61 	.word	0xbe205c61
 801a320:	72bea4d0 	.word	0x72bea4d0
 801a324:	3e663769 	.word	0x3e663769
 801a328:	c5d26bf1 	.word	0xc5d26bf1
 801a32c:	3ebbbd41 	.word	0x3ebbbd41
 801a330:	af25de2c 	.word	0xaf25de2c
 801a334:	3f11566a 	.word	0x3f11566a
 801a338:	16bebd93 	.word	0x16bebd93
 801a33c:	3f66c16c 	.word	0x3f66c16c
 801a340:	5555553e 	.word	0x5555553e
 801a344:	3fc55555 	.word	0x3fc55555
 801a348:	fff00000 	.word	0xfff00000
 801a34c:	3ff00000 	.word	0x3ff00000
 801a350:	4090cbff 	.word	0x4090cbff
 801a354:	3f6f3400 	.word	0x3f6f3400
 801a358:	3fe00000 	.word	0x3fe00000
 801a35c:	652b82fe 	.word	0x652b82fe
 801a360:	3c971547 	.word	0x3c971547
 801a364:	4090cc00 	.word	0x4090cc00

0801a368 <__ieee754_rem_pio2>:
 801a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a36c:	ec57 6b10 	vmov	r6, r7, d0
 801a370:	4bc5      	ldr	r3, [pc, #788]	@ (801a688 <__ieee754_rem_pio2+0x320>)
 801a372:	b08d      	sub	sp, #52	@ 0x34
 801a374:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801a378:	4598      	cmp	r8, r3
 801a37a:	4604      	mov	r4, r0
 801a37c:	9704      	str	r7, [sp, #16]
 801a37e:	d807      	bhi.n	801a390 <__ieee754_rem_pio2+0x28>
 801a380:	2200      	movs	r2, #0
 801a382:	2300      	movs	r3, #0
 801a384:	ed80 0b00 	vstr	d0, [r0]
 801a388:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a38c:	2500      	movs	r5, #0
 801a38e:	e028      	b.n	801a3e2 <__ieee754_rem_pio2+0x7a>
 801a390:	4bbe      	ldr	r3, [pc, #760]	@ (801a68c <__ieee754_rem_pio2+0x324>)
 801a392:	4598      	cmp	r8, r3
 801a394:	d878      	bhi.n	801a488 <__ieee754_rem_pio2+0x120>
 801a396:	9b04      	ldr	r3, [sp, #16]
 801a398:	4dbd      	ldr	r5, [pc, #756]	@ (801a690 <__ieee754_rem_pio2+0x328>)
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	4630      	mov	r0, r6
 801a39e:	a3ac      	add	r3, pc, #688	@ (adr r3, 801a650 <__ieee754_rem_pio2+0x2e8>)
 801a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a4:	4639      	mov	r1, r7
 801a3a6:	dd38      	ble.n	801a41a <__ieee754_rem_pio2+0xb2>
 801a3a8:	f7e5 ff76 	bl	8000298 <__aeabi_dsub>
 801a3ac:	45a8      	cmp	r8, r5
 801a3ae:	4606      	mov	r6, r0
 801a3b0:	460f      	mov	r7, r1
 801a3b2:	d01a      	beq.n	801a3ea <__ieee754_rem_pio2+0x82>
 801a3b4:	a3a8      	add	r3, pc, #672	@ (adr r3, 801a658 <__ieee754_rem_pio2+0x2f0>)
 801a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ba:	f7e5 ff6d 	bl	8000298 <__aeabi_dsub>
 801a3be:	4602      	mov	r2, r0
 801a3c0:	460b      	mov	r3, r1
 801a3c2:	4680      	mov	r8, r0
 801a3c4:	4689      	mov	r9, r1
 801a3c6:	4630      	mov	r0, r6
 801a3c8:	4639      	mov	r1, r7
 801a3ca:	f7e5 ff65 	bl	8000298 <__aeabi_dsub>
 801a3ce:	a3a2      	add	r3, pc, #648	@ (adr r3, 801a658 <__ieee754_rem_pio2+0x2f0>)
 801a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3d4:	f7e5 ff60 	bl	8000298 <__aeabi_dsub>
 801a3d8:	e9c4 8900 	strd	r8, r9, [r4]
 801a3dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a3e0:	2501      	movs	r5, #1
 801a3e2:	4628      	mov	r0, r5
 801a3e4:	b00d      	add	sp, #52	@ 0x34
 801a3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3ea:	a39d      	add	r3, pc, #628	@ (adr r3, 801a660 <__ieee754_rem_pio2+0x2f8>)
 801a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3f0:	f7e5 ff52 	bl	8000298 <__aeabi_dsub>
 801a3f4:	a39c      	add	r3, pc, #624	@ (adr r3, 801a668 <__ieee754_rem_pio2+0x300>)
 801a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3fa:	4606      	mov	r6, r0
 801a3fc:	460f      	mov	r7, r1
 801a3fe:	f7e5 ff4b 	bl	8000298 <__aeabi_dsub>
 801a402:	4602      	mov	r2, r0
 801a404:	460b      	mov	r3, r1
 801a406:	4680      	mov	r8, r0
 801a408:	4689      	mov	r9, r1
 801a40a:	4630      	mov	r0, r6
 801a40c:	4639      	mov	r1, r7
 801a40e:	f7e5 ff43 	bl	8000298 <__aeabi_dsub>
 801a412:	a395      	add	r3, pc, #596	@ (adr r3, 801a668 <__ieee754_rem_pio2+0x300>)
 801a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a418:	e7dc      	b.n	801a3d4 <__ieee754_rem_pio2+0x6c>
 801a41a:	f7e5 ff3f 	bl	800029c <__adddf3>
 801a41e:	45a8      	cmp	r8, r5
 801a420:	4606      	mov	r6, r0
 801a422:	460f      	mov	r7, r1
 801a424:	d018      	beq.n	801a458 <__ieee754_rem_pio2+0xf0>
 801a426:	a38c      	add	r3, pc, #560	@ (adr r3, 801a658 <__ieee754_rem_pio2+0x2f0>)
 801a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a42c:	f7e5 ff36 	bl	800029c <__adddf3>
 801a430:	4602      	mov	r2, r0
 801a432:	460b      	mov	r3, r1
 801a434:	4680      	mov	r8, r0
 801a436:	4689      	mov	r9, r1
 801a438:	4630      	mov	r0, r6
 801a43a:	4639      	mov	r1, r7
 801a43c:	f7e5 ff2c 	bl	8000298 <__aeabi_dsub>
 801a440:	a385      	add	r3, pc, #532	@ (adr r3, 801a658 <__ieee754_rem_pio2+0x2f0>)
 801a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a446:	f7e5 ff29 	bl	800029c <__adddf3>
 801a44a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a44e:	e9c4 8900 	strd	r8, r9, [r4]
 801a452:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a456:	e7c4      	b.n	801a3e2 <__ieee754_rem_pio2+0x7a>
 801a458:	a381      	add	r3, pc, #516	@ (adr r3, 801a660 <__ieee754_rem_pio2+0x2f8>)
 801a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a45e:	f7e5 ff1d 	bl	800029c <__adddf3>
 801a462:	a381      	add	r3, pc, #516	@ (adr r3, 801a668 <__ieee754_rem_pio2+0x300>)
 801a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a468:	4606      	mov	r6, r0
 801a46a:	460f      	mov	r7, r1
 801a46c:	f7e5 ff16 	bl	800029c <__adddf3>
 801a470:	4602      	mov	r2, r0
 801a472:	460b      	mov	r3, r1
 801a474:	4680      	mov	r8, r0
 801a476:	4689      	mov	r9, r1
 801a478:	4630      	mov	r0, r6
 801a47a:	4639      	mov	r1, r7
 801a47c:	f7e5 ff0c 	bl	8000298 <__aeabi_dsub>
 801a480:	a379      	add	r3, pc, #484	@ (adr r3, 801a668 <__ieee754_rem_pio2+0x300>)
 801a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a486:	e7de      	b.n	801a446 <__ieee754_rem_pio2+0xde>
 801a488:	4b82      	ldr	r3, [pc, #520]	@ (801a694 <__ieee754_rem_pio2+0x32c>)
 801a48a:	4598      	cmp	r8, r3
 801a48c:	f200 80d1 	bhi.w	801a632 <__ieee754_rem_pio2+0x2ca>
 801a490:	f7fe ff3e 	bl	8019310 <fabs>
 801a494:	ec57 6b10 	vmov	r6, r7, d0
 801a498:	a375      	add	r3, pc, #468	@ (adr r3, 801a670 <__ieee754_rem_pio2+0x308>)
 801a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a49e:	4630      	mov	r0, r6
 801a4a0:	4639      	mov	r1, r7
 801a4a2:	f7e6 f8b1 	bl	8000608 <__aeabi_dmul>
 801a4a6:	4b7c      	ldr	r3, [pc, #496]	@ (801a698 <__ieee754_rem_pio2+0x330>)
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	f7e5 fef7 	bl	800029c <__adddf3>
 801a4ae:	f7e6 fb5b 	bl	8000b68 <__aeabi_d2iz>
 801a4b2:	4605      	mov	r5, r0
 801a4b4:	f7e6 f83e 	bl	8000534 <__aeabi_i2d>
 801a4b8:	4602      	mov	r2, r0
 801a4ba:	460b      	mov	r3, r1
 801a4bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a4c0:	a363      	add	r3, pc, #396	@ (adr r3, 801a650 <__ieee754_rem_pio2+0x2e8>)
 801a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4c6:	f7e6 f89f 	bl	8000608 <__aeabi_dmul>
 801a4ca:	4602      	mov	r2, r0
 801a4cc:	460b      	mov	r3, r1
 801a4ce:	4630      	mov	r0, r6
 801a4d0:	4639      	mov	r1, r7
 801a4d2:	f7e5 fee1 	bl	8000298 <__aeabi_dsub>
 801a4d6:	a360      	add	r3, pc, #384	@ (adr r3, 801a658 <__ieee754_rem_pio2+0x2f0>)
 801a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4dc:	4682      	mov	sl, r0
 801a4de:	468b      	mov	fp, r1
 801a4e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a4e4:	f7e6 f890 	bl	8000608 <__aeabi_dmul>
 801a4e8:	2d1f      	cmp	r5, #31
 801a4ea:	4606      	mov	r6, r0
 801a4ec:	460f      	mov	r7, r1
 801a4ee:	dc0c      	bgt.n	801a50a <__ieee754_rem_pio2+0x1a2>
 801a4f0:	4b6a      	ldr	r3, [pc, #424]	@ (801a69c <__ieee754_rem_pio2+0x334>)
 801a4f2:	1e6a      	subs	r2, r5, #1
 801a4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a4f8:	4543      	cmp	r3, r8
 801a4fa:	d006      	beq.n	801a50a <__ieee754_rem_pio2+0x1a2>
 801a4fc:	4632      	mov	r2, r6
 801a4fe:	463b      	mov	r3, r7
 801a500:	4650      	mov	r0, sl
 801a502:	4659      	mov	r1, fp
 801a504:	f7e5 fec8 	bl	8000298 <__aeabi_dsub>
 801a508:	e00e      	b.n	801a528 <__ieee754_rem_pio2+0x1c0>
 801a50a:	463b      	mov	r3, r7
 801a50c:	4632      	mov	r2, r6
 801a50e:	4650      	mov	r0, sl
 801a510:	4659      	mov	r1, fp
 801a512:	f7e5 fec1 	bl	8000298 <__aeabi_dsub>
 801a516:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a51a:	9305      	str	r3, [sp, #20]
 801a51c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a520:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801a524:	2b10      	cmp	r3, #16
 801a526:	dc02      	bgt.n	801a52e <__ieee754_rem_pio2+0x1c6>
 801a528:	e9c4 0100 	strd	r0, r1, [r4]
 801a52c:	e039      	b.n	801a5a2 <__ieee754_rem_pio2+0x23a>
 801a52e:	a34c      	add	r3, pc, #304	@ (adr r3, 801a660 <__ieee754_rem_pio2+0x2f8>)
 801a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a538:	f7e6 f866 	bl	8000608 <__aeabi_dmul>
 801a53c:	4606      	mov	r6, r0
 801a53e:	460f      	mov	r7, r1
 801a540:	4602      	mov	r2, r0
 801a542:	460b      	mov	r3, r1
 801a544:	4650      	mov	r0, sl
 801a546:	4659      	mov	r1, fp
 801a548:	f7e5 fea6 	bl	8000298 <__aeabi_dsub>
 801a54c:	4602      	mov	r2, r0
 801a54e:	460b      	mov	r3, r1
 801a550:	4680      	mov	r8, r0
 801a552:	4689      	mov	r9, r1
 801a554:	4650      	mov	r0, sl
 801a556:	4659      	mov	r1, fp
 801a558:	f7e5 fe9e 	bl	8000298 <__aeabi_dsub>
 801a55c:	4632      	mov	r2, r6
 801a55e:	463b      	mov	r3, r7
 801a560:	f7e5 fe9a 	bl	8000298 <__aeabi_dsub>
 801a564:	a340      	add	r3, pc, #256	@ (adr r3, 801a668 <__ieee754_rem_pio2+0x300>)
 801a566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a56a:	4606      	mov	r6, r0
 801a56c:	460f      	mov	r7, r1
 801a56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a572:	f7e6 f849 	bl	8000608 <__aeabi_dmul>
 801a576:	4632      	mov	r2, r6
 801a578:	463b      	mov	r3, r7
 801a57a:	f7e5 fe8d 	bl	8000298 <__aeabi_dsub>
 801a57e:	4602      	mov	r2, r0
 801a580:	460b      	mov	r3, r1
 801a582:	4606      	mov	r6, r0
 801a584:	460f      	mov	r7, r1
 801a586:	4640      	mov	r0, r8
 801a588:	4649      	mov	r1, r9
 801a58a:	f7e5 fe85 	bl	8000298 <__aeabi_dsub>
 801a58e:	9a05      	ldr	r2, [sp, #20]
 801a590:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a594:	1ad3      	subs	r3, r2, r3
 801a596:	2b31      	cmp	r3, #49	@ 0x31
 801a598:	dc20      	bgt.n	801a5dc <__ieee754_rem_pio2+0x274>
 801a59a:	e9c4 0100 	strd	r0, r1, [r4]
 801a59e:	46c2      	mov	sl, r8
 801a5a0:	46cb      	mov	fp, r9
 801a5a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a5a6:	4650      	mov	r0, sl
 801a5a8:	4642      	mov	r2, r8
 801a5aa:	464b      	mov	r3, r9
 801a5ac:	4659      	mov	r1, fp
 801a5ae:	f7e5 fe73 	bl	8000298 <__aeabi_dsub>
 801a5b2:	463b      	mov	r3, r7
 801a5b4:	4632      	mov	r2, r6
 801a5b6:	f7e5 fe6f 	bl	8000298 <__aeabi_dsub>
 801a5ba:	9b04      	ldr	r3, [sp, #16]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a5c2:	f6bf af0e 	bge.w	801a3e2 <__ieee754_rem_pio2+0x7a>
 801a5c6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801a5ca:	6063      	str	r3, [r4, #4]
 801a5cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a5d0:	f8c4 8000 	str.w	r8, [r4]
 801a5d4:	60a0      	str	r0, [r4, #8]
 801a5d6:	60e3      	str	r3, [r4, #12]
 801a5d8:	426d      	negs	r5, r5
 801a5da:	e702      	b.n	801a3e2 <__ieee754_rem_pio2+0x7a>
 801a5dc:	a326      	add	r3, pc, #152	@ (adr r3, 801a678 <__ieee754_rem_pio2+0x310>)
 801a5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a5e6:	f7e6 f80f 	bl	8000608 <__aeabi_dmul>
 801a5ea:	4606      	mov	r6, r0
 801a5ec:	460f      	mov	r7, r1
 801a5ee:	4602      	mov	r2, r0
 801a5f0:	460b      	mov	r3, r1
 801a5f2:	4640      	mov	r0, r8
 801a5f4:	4649      	mov	r1, r9
 801a5f6:	f7e5 fe4f 	bl	8000298 <__aeabi_dsub>
 801a5fa:	4602      	mov	r2, r0
 801a5fc:	460b      	mov	r3, r1
 801a5fe:	4682      	mov	sl, r0
 801a600:	468b      	mov	fp, r1
 801a602:	4640      	mov	r0, r8
 801a604:	4649      	mov	r1, r9
 801a606:	f7e5 fe47 	bl	8000298 <__aeabi_dsub>
 801a60a:	4632      	mov	r2, r6
 801a60c:	463b      	mov	r3, r7
 801a60e:	f7e5 fe43 	bl	8000298 <__aeabi_dsub>
 801a612:	a31b      	add	r3, pc, #108	@ (adr r3, 801a680 <__ieee754_rem_pio2+0x318>)
 801a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a618:	4606      	mov	r6, r0
 801a61a:	460f      	mov	r7, r1
 801a61c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a620:	f7e5 fff2 	bl	8000608 <__aeabi_dmul>
 801a624:	4632      	mov	r2, r6
 801a626:	463b      	mov	r3, r7
 801a628:	f7e5 fe36 	bl	8000298 <__aeabi_dsub>
 801a62c:	4606      	mov	r6, r0
 801a62e:	460f      	mov	r7, r1
 801a630:	e764      	b.n	801a4fc <__ieee754_rem_pio2+0x194>
 801a632:	4b1b      	ldr	r3, [pc, #108]	@ (801a6a0 <__ieee754_rem_pio2+0x338>)
 801a634:	4598      	cmp	r8, r3
 801a636:	d935      	bls.n	801a6a4 <__ieee754_rem_pio2+0x33c>
 801a638:	4632      	mov	r2, r6
 801a63a:	463b      	mov	r3, r7
 801a63c:	4630      	mov	r0, r6
 801a63e:	4639      	mov	r1, r7
 801a640:	f7e5 fe2a 	bl	8000298 <__aeabi_dsub>
 801a644:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a648:	e9c4 0100 	strd	r0, r1, [r4]
 801a64c:	e69e      	b.n	801a38c <__ieee754_rem_pio2+0x24>
 801a64e:	bf00      	nop
 801a650:	54400000 	.word	0x54400000
 801a654:	3ff921fb 	.word	0x3ff921fb
 801a658:	1a626331 	.word	0x1a626331
 801a65c:	3dd0b461 	.word	0x3dd0b461
 801a660:	1a600000 	.word	0x1a600000
 801a664:	3dd0b461 	.word	0x3dd0b461
 801a668:	2e037073 	.word	0x2e037073
 801a66c:	3ba3198a 	.word	0x3ba3198a
 801a670:	6dc9c883 	.word	0x6dc9c883
 801a674:	3fe45f30 	.word	0x3fe45f30
 801a678:	2e000000 	.word	0x2e000000
 801a67c:	3ba3198a 	.word	0x3ba3198a
 801a680:	252049c1 	.word	0x252049c1
 801a684:	397b839a 	.word	0x397b839a
 801a688:	3fe921fb 	.word	0x3fe921fb
 801a68c:	4002d97b 	.word	0x4002d97b
 801a690:	3ff921fb 	.word	0x3ff921fb
 801a694:	413921fb 	.word	0x413921fb
 801a698:	3fe00000 	.word	0x3fe00000
 801a69c:	0802eb40 	.word	0x0802eb40
 801a6a0:	7fefffff 	.word	0x7fefffff
 801a6a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a6a8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801a6ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a6b0:	4630      	mov	r0, r6
 801a6b2:	460f      	mov	r7, r1
 801a6b4:	f7e6 fa58 	bl	8000b68 <__aeabi_d2iz>
 801a6b8:	f7e5 ff3c 	bl	8000534 <__aeabi_i2d>
 801a6bc:	4602      	mov	r2, r0
 801a6be:	460b      	mov	r3, r1
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	4639      	mov	r1, r7
 801a6c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a6c8:	f7e5 fde6 	bl	8000298 <__aeabi_dsub>
 801a6cc:	4b22      	ldr	r3, [pc, #136]	@ (801a758 <__ieee754_rem_pio2+0x3f0>)
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	f7e5 ff9a 	bl	8000608 <__aeabi_dmul>
 801a6d4:	460f      	mov	r7, r1
 801a6d6:	4606      	mov	r6, r0
 801a6d8:	f7e6 fa46 	bl	8000b68 <__aeabi_d2iz>
 801a6dc:	f7e5 ff2a 	bl	8000534 <__aeabi_i2d>
 801a6e0:	4602      	mov	r2, r0
 801a6e2:	460b      	mov	r3, r1
 801a6e4:	4630      	mov	r0, r6
 801a6e6:	4639      	mov	r1, r7
 801a6e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a6ec:	f7e5 fdd4 	bl	8000298 <__aeabi_dsub>
 801a6f0:	4b19      	ldr	r3, [pc, #100]	@ (801a758 <__ieee754_rem_pio2+0x3f0>)
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	f7e5 ff88 	bl	8000608 <__aeabi_dmul>
 801a6f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801a6fc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801a700:	f04f 0803 	mov.w	r8, #3
 801a704:	2600      	movs	r6, #0
 801a706:	2700      	movs	r7, #0
 801a708:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a70c:	4632      	mov	r2, r6
 801a70e:	463b      	mov	r3, r7
 801a710:	46c2      	mov	sl, r8
 801a712:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801a716:	f7e6 f9df 	bl	8000ad8 <__aeabi_dcmpeq>
 801a71a:	2800      	cmp	r0, #0
 801a71c:	d1f4      	bne.n	801a708 <__ieee754_rem_pio2+0x3a0>
 801a71e:	4b0f      	ldr	r3, [pc, #60]	@ (801a75c <__ieee754_rem_pio2+0x3f4>)
 801a720:	9301      	str	r3, [sp, #4]
 801a722:	2302      	movs	r3, #2
 801a724:	9300      	str	r3, [sp, #0]
 801a726:	462a      	mov	r2, r5
 801a728:	4653      	mov	r3, sl
 801a72a:	4621      	mov	r1, r4
 801a72c:	a806      	add	r0, sp, #24
 801a72e:	f000 f8d3 	bl	801a8d8 <__kernel_rem_pio2>
 801a732:	9b04      	ldr	r3, [sp, #16]
 801a734:	2b00      	cmp	r3, #0
 801a736:	4605      	mov	r5, r0
 801a738:	f6bf ae53 	bge.w	801a3e2 <__ieee754_rem_pio2+0x7a>
 801a73c:	e9d4 2100 	ldrd	r2, r1, [r4]
 801a740:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a744:	e9c4 2300 	strd	r2, r3, [r4]
 801a748:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801a74c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a750:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801a754:	e740      	b.n	801a5d8 <__ieee754_rem_pio2+0x270>
 801a756:	bf00      	nop
 801a758:	41700000 	.word	0x41700000
 801a75c:	0802ebc0 	.word	0x0802ebc0

0801a760 <scalbn>:
 801a760:	b570      	push	{r4, r5, r6, lr}
 801a762:	ec55 4b10 	vmov	r4, r5, d0
 801a766:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801a76a:	4606      	mov	r6, r0
 801a76c:	462b      	mov	r3, r5
 801a76e:	b991      	cbnz	r1, 801a796 <scalbn+0x36>
 801a770:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801a774:	4323      	orrs	r3, r4
 801a776:	d03d      	beq.n	801a7f4 <scalbn+0x94>
 801a778:	4b35      	ldr	r3, [pc, #212]	@ (801a850 <scalbn+0xf0>)
 801a77a:	4620      	mov	r0, r4
 801a77c:	4629      	mov	r1, r5
 801a77e:	2200      	movs	r2, #0
 801a780:	f7e5 ff42 	bl	8000608 <__aeabi_dmul>
 801a784:	4b33      	ldr	r3, [pc, #204]	@ (801a854 <scalbn+0xf4>)
 801a786:	429e      	cmp	r6, r3
 801a788:	4604      	mov	r4, r0
 801a78a:	460d      	mov	r5, r1
 801a78c:	da0f      	bge.n	801a7ae <scalbn+0x4e>
 801a78e:	a328      	add	r3, pc, #160	@ (adr r3, 801a830 <scalbn+0xd0>)
 801a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a794:	e01e      	b.n	801a7d4 <scalbn+0x74>
 801a796:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801a79a:	4291      	cmp	r1, r2
 801a79c:	d10b      	bne.n	801a7b6 <scalbn+0x56>
 801a79e:	4622      	mov	r2, r4
 801a7a0:	4620      	mov	r0, r4
 801a7a2:	4629      	mov	r1, r5
 801a7a4:	f7e5 fd7a 	bl	800029c <__adddf3>
 801a7a8:	4604      	mov	r4, r0
 801a7aa:	460d      	mov	r5, r1
 801a7ac:	e022      	b.n	801a7f4 <scalbn+0x94>
 801a7ae:	460b      	mov	r3, r1
 801a7b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801a7b4:	3936      	subs	r1, #54	@ 0x36
 801a7b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801a7ba:	4296      	cmp	r6, r2
 801a7bc:	dd0d      	ble.n	801a7da <scalbn+0x7a>
 801a7be:	2d00      	cmp	r5, #0
 801a7c0:	a11d      	add	r1, pc, #116	@ (adr r1, 801a838 <scalbn+0xd8>)
 801a7c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7c6:	da02      	bge.n	801a7ce <scalbn+0x6e>
 801a7c8:	a11d      	add	r1, pc, #116	@ (adr r1, 801a840 <scalbn+0xe0>)
 801a7ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7ce:	a31a      	add	r3, pc, #104	@ (adr r3, 801a838 <scalbn+0xd8>)
 801a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7d4:	f7e5 ff18 	bl	8000608 <__aeabi_dmul>
 801a7d8:	e7e6      	b.n	801a7a8 <scalbn+0x48>
 801a7da:	1872      	adds	r2, r6, r1
 801a7dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801a7e0:	428a      	cmp	r2, r1
 801a7e2:	dcec      	bgt.n	801a7be <scalbn+0x5e>
 801a7e4:	2a00      	cmp	r2, #0
 801a7e6:	dd08      	ble.n	801a7fa <scalbn+0x9a>
 801a7e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a7ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801a7f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a7f4:	ec45 4b10 	vmov	d0, r4, r5
 801a7f8:	bd70      	pop	{r4, r5, r6, pc}
 801a7fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801a7fe:	da08      	bge.n	801a812 <scalbn+0xb2>
 801a800:	2d00      	cmp	r5, #0
 801a802:	a10b      	add	r1, pc, #44	@ (adr r1, 801a830 <scalbn+0xd0>)
 801a804:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a808:	dac1      	bge.n	801a78e <scalbn+0x2e>
 801a80a:	a10f      	add	r1, pc, #60	@ (adr r1, 801a848 <scalbn+0xe8>)
 801a80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a810:	e7bd      	b.n	801a78e <scalbn+0x2e>
 801a812:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a816:	3236      	adds	r2, #54	@ 0x36
 801a818:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801a81c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a820:	4620      	mov	r0, r4
 801a822:	4b0d      	ldr	r3, [pc, #52]	@ (801a858 <scalbn+0xf8>)
 801a824:	4629      	mov	r1, r5
 801a826:	2200      	movs	r2, #0
 801a828:	e7d4      	b.n	801a7d4 <scalbn+0x74>
 801a82a:	bf00      	nop
 801a82c:	f3af 8000 	nop.w
 801a830:	c2f8f359 	.word	0xc2f8f359
 801a834:	01a56e1f 	.word	0x01a56e1f
 801a838:	8800759c 	.word	0x8800759c
 801a83c:	7e37e43c 	.word	0x7e37e43c
 801a840:	8800759c 	.word	0x8800759c
 801a844:	fe37e43c 	.word	0xfe37e43c
 801a848:	c2f8f359 	.word	0xc2f8f359
 801a84c:	81a56e1f 	.word	0x81a56e1f
 801a850:	43500000 	.word	0x43500000
 801a854:	ffff3cb0 	.word	0xffff3cb0
 801a858:	3c900000 	.word	0x3c900000

0801a85c <with_errno>:
 801a85c:	b510      	push	{r4, lr}
 801a85e:	ed2d 8b02 	vpush	{d8}
 801a862:	eeb0 8a40 	vmov.f32	s16, s0
 801a866:	eef0 8a60 	vmov.f32	s17, s1
 801a86a:	4604      	mov	r4, r0
 801a86c:	f7fa ffd4 	bl	8015818 <__errno>
 801a870:	eeb0 0a48 	vmov.f32	s0, s16
 801a874:	eef0 0a68 	vmov.f32	s1, s17
 801a878:	ecbd 8b02 	vpop	{d8}
 801a87c:	6004      	str	r4, [r0, #0]
 801a87e:	bd10      	pop	{r4, pc}

0801a880 <xflow>:
 801a880:	4603      	mov	r3, r0
 801a882:	b507      	push	{r0, r1, r2, lr}
 801a884:	ec51 0b10 	vmov	r0, r1, d0
 801a888:	b183      	cbz	r3, 801a8ac <xflow+0x2c>
 801a88a:	4602      	mov	r2, r0
 801a88c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a890:	e9cd 2300 	strd	r2, r3, [sp]
 801a894:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a898:	f7e5 feb6 	bl	8000608 <__aeabi_dmul>
 801a89c:	ec41 0b10 	vmov	d0, r0, r1
 801a8a0:	2022      	movs	r0, #34	@ 0x22
 801a8a2:	b003      	add	sp, #12
 801a8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a8a8:	f7ff bfd8 	b.w	801a85c <with_errno>
 801a8ac:	4602      	mov	r2, r0
 801a8ae:	460b      	mov	r3, r1
 801a8b0:	e7ee      	b.n	801a890 <xflow+0x10>
 801a8b2:	0000      	movs	r0, r0
 801a8b4:	0000      	movs	r0, r0
	...

0801a8b8 <__math_uflow>:
 801a8b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a8c0 <__math_uflow+0x8>
 801a8bc:	f7ff bfe0 	b.w	801a880 <xflow>
 801a8c0:	00000000 	.word	0x00000000
 801a8c4:	10000000 	.word	0x10000000

0801a8c8 <__math_oflow>:
 801a8c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a8d0 <__math_oflow+0x8>
 801a8cc:	f7ff bfd8 	b.w	801a880 <xflow>
 801a8d0:	00000000 	.word	0x00000000
 801a8d4:	70000000 	.word	0x70000000

0801a8d8 <__kernel_rem_pio2>:
 801a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8dc:	ed2d 8b02 	vpush	{d8}
 801a8e0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801a8e4:	f112 0f14 	cmn.w	r2, #20
 801a8e8:	9306      	str	r3, [sp, #24]
 801a8ea:	9104      	str	r1, [sp, #16]
 801a8ec:	4bbe      	ldr	r3, [pc, #760]	@ (801abe8 <__kernel_rem_pio2+0x310>)
 801a8ee:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801a8f0:	9008      	str	r0, [sp, #32]
 801a8f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a8f6:	9300      	str	r3, [sp, #0]
 801a8f8:	9b06      	ldr	r3, [sp, #24]
 801a8fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801a8fe:	bfa8      	it	ge
 801a900:	1ed4      	subge	r4, r2, #3
 801a902:	9305      	str	r3, [sp, #20]
 801a904:	bfb2      	itee	lt
 801a906:	2400      	movlt	r4, #0
 801a908:	2318      	movge	r3, #24
 801a90a:	fb94 f4f3 	sdivge	r4, r4, r3
 801a90e:	f06f 0317 	mvn.w	r3, #23
 801a912:	fb04 3303 	mla	r3, r4, r3, r3
 801a916:	eb03 0b02 	add.w	fp, r3, r2
 801a91a:	9b00      	ldr	r3, [sp, #0]
 801a91c:	9a05      	ldr	r2, [sp, #20]
 801a91e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801abd8 <__kernel_rem_pio2+0x300>
 801a922:	eb03 0802 	add.w	r8, r3, r2
 801a926:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801a928:	1aa7      	subs	r7, r4, r2
 801a92a:	ae20      	add	r6, sp, #128	@ 0x80
 801a92c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a930:	2500      	movs	r5, #0
 801a932:	4545      	cmp	r5, r8
 801a934:	dd13      	ble.n	801a95e <__kernel_rem_pio2+0x86>
 801a936:	9b06      	ldr	r3, [sp, #24]
 801a938:	aa20      	add	r2, sp, #128	@ 0x80
 801a93a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801a93e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801a942:	f04f 0800 	mov.w	r8, #0
 801a946:	9b00      	ldr	r3, [sp, #0]
 801a948:	4598      	cmp	r8, r3
 801a94a:	dc31      	bgt.n	801a9b0 <__kernel_rem_pio2+0xd8>
 801a94c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801abd8 <__kernel_rem_pio2+0x300>
 801a950:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a954:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a958:	462f      	mov	r7, r5
 801a95a:	2600      	movs	r6, #0
 801a95c:	e01b      	b.n	801a996 <__kernel_rem_pio2+0xbe>
 801a95e:	42ef      	cmn	r7, r5
 801a960:	d407      	bmi.n	801a972 <__kernel_rem_pio2+0x9a>
 801a962:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a966:	f7e5 fde5 	bl	8000534 <__aeabi_i2d>
 801a96a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a96e:	3501      	adds	r5, #1
 801a970:	e7df      	b.n	801a932 <__kernel_rem_pio2+0x5a>
 801a972:	ec51 0b18 	vmov	r0, r1, d8
 801a976:	e7f8      	b.n	801a96a <__kernel_rem_pio2+0x92>
 801a978:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a97c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a980:	f7e5 fe42 	bl	8000608 <__aeabi_dmul>
 801a984:	4602      	mov	r2, r0
 801a986:	460b      	mov	r3, r1
 801a988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a98c:	f7e5 fc86 	bl	800029c <__adddf3>
 801a990:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a994:	3601      	adds	r6, #1
 801a996:	9b05      	ldr	r3, [sp, #20]
 801a998:	429e      	cmp	r6, r3
 801a99a:	f1a7 0708 	sub.w	r7, r7, #8
 801a99e:	ddeb      	ble.n	801a978 <__kernel_rem_pio2+0xa0>
 801a9a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a9a4:	f108 0801 	add.w	r8, r8, #1
 801a9a8:	ecaa 7b02 	vstmia	sl!, {d7}
 801a9ac:	3508      	adds	r5, #8
 801a9ae:	e7ca      	b.n	801a946 <__kernel_rem_pio2+0x6e>
 801a9b0:	9b00      	ldr	r3, [sp, #0]
 801a9b2:	f8dd 8000 	ldr.w	r8, [sp]
 801a9b6:	aa0c      	add	r2, sp, #48	@ 0x30
 801a9b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a9bc:	930a      	str	r3, [sp, #40]	@ 0x28
 801a9be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801a9c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a9c6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801a9ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a9cc:	ab98      	add	r3, sp, #608	@ 0x260
 801a9ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a9d2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801a9d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a9da:	ac0c      	add	r4, sp, #48	@ 0x30
 801a9dc:	ab70      	add	r3, sp, #448	@ 0x1c0
 801a9de:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801a9e2:	46a1      	mov	r9, r4
 801a9e4:	46c2      	mov	sl, r8
 801a9e6:	f1ba 0f00 	cmp.w	sl, #0
 801a9ea:	f1a5 0508 	sub.w	r5, r5, #8
 801a9ee:	dc77      	bgt.n	801aae0 <__kernel_rem_pio2+0x208>
 801a9f0:	4658      	mov	r0, fp
 801a9f2:	ed9d 0b02 	vldr	d0, [sp, #8]
 801a9f6:	f7ff feb3 	bl	801a760 <scalbn>
 801a9fa:	ec57 6b10 	vmov	r6, r7, d0
 801a9fe:	2200      	movs	r2, #0
 801aa00:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801aa04:	4630      	mov	r0, r6
 801aa06:	4639      	mov	r1, r7
 801aa08:	f7e5 fdfe 	bl	8000608 <__aeabi_dmul>
 801aa0c:	ec41 0b10 	vmov	d0, r0, r1
 801aa10:	f000 faba 	bl	801af88 <floor>
 801aa14:	4b75      	ldr	r3, [pc, #468]	@ (801abec <__kernel_rem_pio2+0x314>)
 801aa16:	ec51 0b10 	vmov	r0, r1, d0
 801aa1a:	2200      	movs	r2, #0
 801aa1c:	f7e5 fdf4 	bl	8000608 <__aeabi_dmul>
 801aa20:	4602      	mov	r2, r0
 801aa22:	460b      	mov	r3, r1
 801aa24:	4630      	mov	r0, r6
 801aa26:	4639      	mov	r1, r7
 801aa28:	f7e5 fc36 	bl	8000298 <__aeabi_dsub>
 801aa2c:	460f      	mov	r7, r1
 801aa2e:	4606      	mov	r6, r0
 801aa30:	f7e6 f89a 	bl	8000b68 <__aeabi_d2iz>
 801aa34:	9002      	str	r0, [sp, #8]
 801aa36:	f7e5 fd7d 	bl	8000534 <__aeabi_i2d>
 801aa3a:	4602      	mov	r2, r0
 801aa3c:	460b      	mov	r3, r1
 801aa3e:	4630      	mov	r0, r6
 801aa40:	4639      	mov	r1, r7
 801aa42:	f7e5 fc29 	bl	8000298 <__aeabi_dsub>
 801aa46:	f1bb 0f00 	cmp.w	fp, #0
 801aa4a:	4606      	mov	r6, r0
 801aa4c:	460f      	mov	r7, r1
 801aa4e:	dd6c      	ble.n	801ab2a <__kernel_rem_pio2+0x252>
 801aa50:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801aa54:	ab0c      	add	r3, sp, #48	@ 0x30
 801aa56:	9d02      	ldr	r5, [sp, #8]
 801aa58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801aa5c:	f1cb 0018 	rsb	r0, fp, #24
 801aa60:	fa43 f200 	asr.w	r2, r3, r0
 801aa64:	4415      	add	r5, r2
 801aa66:	4082      	lsls	r2, r0
 801aa68:	1a9b      	subs	r3, r3, r2
 801aa6a:	aa0c      	add	r2, sp, #48	@ 0x30
 801aa6c:	9502      	str	r5, [sp, #8]
 801aa6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801aa72:	f1cb 0217 	rsb	r2, fp, #23
 801aa76:	fa43 f902 	asr.w	r9, r3, r2
 801aa7a:	f1b9 0f00 	cmp.w	r9, #0
 801aa7e:	dd64      	ble.n	801ab4a <__kernel_rem_pio2+0x272>
 801aa80:	9b02      	ldr	r3, [sp, #8]
 801aa82:	2200      	movs	r2, #0
 801aa84:	3301      	adds	r3, #1
 801aa86:	9302      	str	r3, [sp, #8]
 801aa88:	4615      	mov	r5, r2
 801aa8a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801aa8e:	4590      	cmp	r8, r2
 801aa90:	f300 80b8 	bgt.w	801ac04 <__kernel_rem_pio2+0x32c>
 801aa94:	f1bb 0f00 	cmp.w	fp, #0
 801aa98:	dd07      	ble.n	801aaaa <__kernel_rem_pio2+0x1d2>
 801aa9a:	f1bb 0f01 	cmp.w	fp, #1
 801aa9e:	f000 80bf 	beq.w	801ac20 <__kernel_rem_pio2+0x348>
 801aaa2:	f1bb 0f02 	cmp.w	fp, #2
 801aaa6:	f000 80c6 	beq.w	801ac36 <__kernel_rem_pio2+0x35e>
 801aaaa:	f1b9 0f02 	cmp.w	r9, #2
 801aaae:	d14c      	bne.n	801ab4a <__kernel_rem_pio2+0x272>
 801aab0:	4632      	mov	r2, r6
 801aab2:	463b      	mov	r3, r7
 801aab4:	494e      	ldr	r1, [pc, #312]	@ (801abf0 <__kernel_rem_pio2+0x318>)
 801aab6:	2000      	movs	r0, #0
 801aab8:	f7e5 fbee 	bl	8000298 <__aeabi_dsub>
 801aabc:	4606      	mov	r6, r0
 801aabe:	460f      	mov	r7, r1
 801aac0:	2d00      	cmp	r5, #0
 801aac2:	d042      	beq.n	801ab4a <__kernel_rem_pio2+0x272>
 801aac4:	4658      	mov	r0, fp
 801aac6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801abe0 <__kernel_rem_pio2+0x308>
 801aaca:	f7ff fe49 	bl	801a760 <scalbn>
 801aace:	4630      	mov	r0, r6
 801aad0:	4639      	mov	r1, r7
 801aad2:	ec53 2b10 	vmov	r2, r3, d0
 801aad6:	f7e5 fbdf 	bl	8000298 <__aeabi_dsub>
 801aada:	4606      	mov	r6, r0
 801aadc:	460f      	mov	r7, r1
 801aade:	e034      	b.n	801ab4a <__kernel_rem_pio2+0x272>
 801aae0:	4b44      	ldr	r3, [pc, #272]	@ (801abf4 <__kernel_rem_pio2+0x31c>)
 801aae2:	2200      	movs	r2, #0
 801aae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aae8:	f7e5 fd8e 	bl	8000608 <__aeabi_dmul>
 801aaec:	f7e6 f83c 	bl	8000b68 <__aeabi_d2iz>
 801aaf0:	f7e5 fd20 	bl	8000534 <__aeabi_i2d>
 801aaf4:	4b40      	ldr	r3, [pc, #256]	@ (801abf8 <__kernel_rem_pio2+0x320>)
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	4606      	mov	r6, r0
 801aafa:	460f      	mov	r7, r1
 801aafc:	f7e5 fd84 	bl	8000608 <__aeabi_dmul>
 801ab00:	4602      	mov	r2, r0
 801ab02:	460b      	mov	r3, r1
 801ab04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ab08:	f7e5 fbc6 	bl	8000298 <__aeabi_dsub>
 801ab0c:	f7e6 f82c 	bl	8000b68 <__aeabi_d2iz>
 801ab10:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ab14:	f849 0b04 	str.w	r0, [r9], #4
 801ab18:	4639      	mov	r1, r7
 801ab1a:	4630      	mov	r0, r6
 801ab1c:	f7e5 fbbe 	bl	800029c <__adddf3>
 801ab20:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801ab24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ab28:	e75d      	b.n	801a9e6 <__kernel_rem_pio2+0x10e>
 801ab2a:	d107      	bne.n	801ab3c <__kernel_rem_pio2+0x264>
 801ab2c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801ab30:	aa0c      	add	r2, sp, #48	@ 0x30
 801ab32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ab36:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801ab3a:	e79e      	b.n	801aa7a <__kernel_rem_pio2+0x1a2>
 801ab3c:	4b2f      	ldr	r3, [pc, #188]	@ (801abfc <__kernel_rem_pio2+0x324>)
 801ab3e:	2200      	movs	r2, #0
 801ab40:	f7e5 ffe8 	bl	8000b14 <__aeabi_dcmpge>
 801ab44:	2800      	cmp	r0, #0
 801ab46:	d143      	bne.n	801abd0 <__kernel_rem_pio2+0x2f8>
 801ab48:	4681      	mov	r9, r0
 801ab4a:	2200      	movs	r2, #0
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	4630      	mov	r0, r6
 801ab50:	4639      	mov	r1, r7
 801ab52:	f7e5 ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 801ab56:	2800      	cmp	r0, #0
 801ab58:	f000 80bf 	beq.w	801acda <__kernel_rem_pio2+0x402>
 801ab5c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801ab60:	2200      	movs	r2, #0
 801ab62:	9900      	ldr	r1, [sp, #0]
 801ab64:	428b      	cmp	r3, r1
 801ab66:	da6e      	bge.n	801ac46 <__kernel_rem_pio2+0x36e>
 801ab68:	2a00      	cmp	r2, #0
 801ab6a:	f000 8089 	beq.w	801ac80 <__kernel_rem_pio2+0x3a8>
 801ab6e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801ab72:	ab0c      	add	r3, sp, #48	@ 0x30
 801ab74:	f1ab 0b18 	sub.w	fp, fp, #24
 801ab78:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d0f6      	beq.n	801ab6e <__kernel_rem_pio2+0x296>
 801ab80:	4658      	mov	r0, fp
 801ab82:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801abe0 <__kernel_rem_pio2+0x308>
 801ab86:	f7ff fdeb 	bl	801a760 <scalbn>
 801ab8a:	f108 0301 	add.w	r3, r8, #1
 801ab8e:	00da      	lsls	r2, r3, #3
 801ab90:	9205      	str	r2, [sp, #20]
 801ab92:	ec55 4b10 	vmov	r4, r5, d0
 801ab96:	aa70      	add	r2, sp, #448	@ 0x1c0
 801ab98:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801abf4 <__kernel_rem_pio2+0x31c>
 801ab9c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801aba0:	4646      	mov	r6, r8
 801aba2:	f04f 0a00 	mov.w	sl, #0
 801aba6:	2e00      	cmp	r6, #0
 801aba8:	f280 80cf 	bge.w	801ad4a <__kernel_rem_pio2+0x472>
 801abac:	4644      	mov	r4, r8
 801abae:	2c00      	cmp	r4, #0
 801abb0:	f2c0 80fd 	blt.w	801adae <__kernel_rem_pio2+0x4d6>
 801abb4:	4b12      	ldr	r3, [pc, #72]	@ (801ac00 <__kernel_rem_pio2+0x328>)
 801abb6:	461f      	mov	r7, r3
 801abb8:	ab70      	add	r3, sp, #448	@ 0x1c0
 801abba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801abbe:	9306      	str	r3, [sp, #24]
 801abc0:	f04f 0a00 	mov.w	sl, #0
 801abc4:	f04f 0b00 	mov.w	fp, #0
 801abc8:	2600      	movs	r6, #0
 801abca:	eba8 0504 	sub.w	r5, r8, r4
 801abce:	e0e2      	b.n	801ad96 <__kernel_rem_pio2+0x4be>
 801abd0:	f04f 0902 	mov.w	r9, #2
 801abd4:	e754      	b.n	801aa80 <__kernel_rem_pio2+0x1a8>
 801abd6:	bf00      	nop
	...
 801abe4:	3ff00000 	.word	0x3ff00000
 801abe8:	0802ed08 	.word	0x0802ed08
 801abec:	40200000 	.word	0x40200000
 801abf0:	3ff00000 	.word	0x3ff00000
 801abf4:	3e700000 	.word	0x3e700000
 801abf8:	41700000 	.word	0x41700000
 801abfc:	3fe00000 	.word	0x3fe00000
 801ac00:	0802ecc8 	.word	0x0802ecc8
 801ac04:	f854 3b04 	ldr.w	r3, [r4], #4
 801ac08:	b945      	cbnz	r5, 801ac1c <__kernel_rem_pio2+0x344>
 801ac0a:	b123      	cbz	r3, 801ac16 <__kernel_rem_pio2+0x33e>
 801ac0c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801ac10:	f844 3c04 	str.w	r3, [r4, #-4]
 801ac14:	2301      	movs	r3, #1
 801ac16:	3201      	adds	r2, #1
 801ac18:	461d      	mov	r5, r3
 801ac1a:	e738      	b.n	801aa8e <__kernel_rem_pio2+0x1b6>
 801ac1c:	1acb      	subs	r3, r1, r3
 801ac1e:	e7f7      	b.n	801ac10 <__kernel_rem_pio2+0x338>
 801ac20:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801ac24:	ab0c      	add	r3, sp, #48	@ 0x30
 801ac26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac2a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ac2e:	a90c      	add	r1, sp, #48	@ 0x30
 801ac30:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801ac34:	e739      	b.n	801aaaa <__kernel_rem_pio2+0x1d2>
 801ac36:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801ac3a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ac3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ac44:	e7f3      	b.n	801ac2e <__kernel_rem_pio2+0x356>
 801ac46:	a90c      	add	r1, sp, #48	@ 0x30
 801ac48:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801ac4c:	3b01      	subs	r3, #1
 801ac4e:	430a      	orrs	r2, r1
 801ac50:	e787      	b.n	801ab62 <__kernel_rem_pio2+0x28a>
 801ac52:	3401      	adds	r4, #1
 801ac54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801ac58:	2a00      	cmp	r2, #0
 801ac5a:	d0fa      	beq.n	801ac52 <__kernel_rem_pio2+0x37a>
 801ac5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac5e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801ac62:	eb0d 0503 	add.w	r5, sp, r3
 801ac66:	9b06      	ldr	r3, [sp, #24]
 801ac68:	aa20      	add	r2, sp, #128	@ 0x80
 801ac6a:	4443      	add	r3, r8
 801ac6c:	f108 0701 	add.w	r7, r8, #1
 801ac70:	3d98      	subs	r5, #152	@ 0x98
 801ac72:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801ac76:	4444      	add	r4, r8
 801ac78:	42bc      	cmp	r4, r7
 801ac7a:	da04      	bge.n	801ac86 <__kernel_rem_pio2+0x3ae>
 801ac7c:	46a0      	mov	r8, r4
 801ac7e:	e6a2      	b.n	801a9c6 <__kernel_rem_pio2+0xee>
 801ac80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ac82:	2401      	movs	r4, #1
 801ac84:	e7e6      	b.n	801ac54 <__kernel_rem_pio2+0x37c>
 801ac86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac88:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801ac8c:	f7e5 fc52 	bl	8000534 <__aeabi_i2d>
 801ac90:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801af58 <__kernel_rem_pio2+0x680>
 801ac94:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ac98:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ac9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801aca0:	46b2      	mov	sl, r6
 801aca2:	f04f 0800 	mov.w	r8, #0
 801aca6:	9b05      	ldr	r3, [sp, #20]
 801aca8:	4598      	cmp	r8, r3
 801acaa:	dd05      	ble.n	801acb8 <__kernel_rem_pio2+0x3e0>
 801acac:	ed9d 7b02 	vldr	d7, [sp, #8]
 801acb0:	3701      	adds	r7, #1
 801acb2:	eca5 7b02 	vstmia	r5!, {d7}
 801acb6:	e7df      	b.n	801ac78 <__kernel_rem_pio2+0x3a0>
 801acb8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801acbc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801acc0:	f7e5 fca2 	bl	8000608 <__aeabi_dmul>
 801acc4:	4602      	mov	r2, r0
 801acc6:	460b      	mov	r3, r1
 801acc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801accc:	f7e5 fae6 	bl	800029c <__adddf3>
 801acd0:	f108 0801 	add.w	r8, r8, #1
 801acd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801acd8:	e7e5      	b.n	801aca6 <__kernel_rem_pio2+0x3ce>
 801acda:	f1cb 0000 	rsb	r0, fp, #0
 801acde:	ec47 6b10 	vmov	d0, r6, r7
 801ace2:	f7ff fd3d 	bl	801a760 <scalbn>
 801ace6:	ec55 4b10 	vmov	r4, r5, d0
 801acea:	4b9d      	ldr	r3, [pc, #628]	@ (801af60 <__kernel_rem_pio2+0x688>)
 801acec:	2200      	movs	r2, #0
 801acee:	4620      	mov	r0, r4
 801acf0:	4629      	mov	r1, r5
 801acf2:	f7e5 ff0f 	bl	8000b14 <__aeabi_dcmpge>
 801acf6:	b300      	cbz	r0, 801ad3a <__kernel_rem_pio2+0x462>
 801acf8:	4b9a      	ldr	r3, [pc, #616]	@ (801af64 <__kernel_rem_pio2+0x68c>)
 801acfa:	2200      	movs	r2, #0
 801acfc:	4620      	mov	r0, r4
 801acfe:	4629      	mov	r1, r5
 801ad00:	f7e5 fc82 	bl	8000608 <__aeabi_dmul>
 801ad04:	f7e5 ff30 	bl	8000b68 <__aeabi_d2iz>
 801ad08:	4606      	mov	r6, r0
 801ad0a:	f7e5 fc13 	bl	8000534 <__aeabi_i2d>
 801ad0e:	4b94      	ldr	r3, [pc, #592]	@ (801af60 <__kernel_rem_pio2+0x688>)
 801ad10:	2200      	movs	r2, #0
 801ad12:	f7e5 fc79 	bl	8000608 <__aeabi_dmul>
 801ad16:	460b      	mov	r3, r1
 801ad18:	4602      	mov	r2, r0
 801ad1a:	4629      	mov	r1, r5
 801ad1c:	4620      	mov	r0, r4
 801ad1e:	f7e5 fabb 	bl	8000298 <__aeabi_dsub>
 801ad22:	f7e5 ff21 	bl	8000b68 <__aeabi_d2iz>
 801ad26:	ab0c      	add	r3, sp, #48	@ 0x30
 801ad28:	f10b 0b18 	add.w	fp, fp, #24
 801ad2c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801ad30:	f108 0801 	add.w	r8, r8, #1
 801ad34:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801ad38:	e722      	b.n	801ab80 <__kernel_rem_pio2+0x2a8>
 801ad3a:	4620      	mov	r0, r4
 801ad3c:	4629      	mov	r1, r5
 801ad3e:	f7e5 ff13 	bl	8000b68 <__aeabi_d2iz>
 801ad42:	ab0c      	add	r3, sp, #48	@ 0x30
 801ad44:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801ad48:	e71a      	b.n	801ab80 <__kernel_rem_pio2+0x2a8>
 801ad4a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ad4c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ad50:	f7e5 fbf0 	bl	8000534 <__aeabi_i2d>
 801ad54:	4622      	mov	r2, r4
 801ad56:	462b      	mov	r3, r5
 801ad58:	f7e5 fc56 	bl	8000608 <__aeabi_dmul>
 801ad5c:	4652      	mov	r2, sl
 801ad5e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801ad62:	465b      	mov	r3, fp
 801ad64:	4620      	mov	r0, r4
 801ad66:	4629      	mov	r1, r5
 801ad68:	f7e5 fc4e 	bl	8000608 <__aeabi_dmul>
 801ad6c:	3e01      	subs	r6, #1
 801ad6e:	4604      	mov	r4, r0
 801ad70:	460d      	mov	r5, r1
 801ad72:	e718      	b.n	801aba6 <__kernel_rem_pio2+0x2ce>
 801ad74:	9906      	ldr	r1, [sp, #24]
 801ad76:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801ad7a:	9106      	str	r1, [sp, #24]
 801ad7c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801ad80:	f7e5 fc42 	bl	8000608 <__aeabi_dmul>
 801ad84:	4602      	mov	r2, r0
 801ad86:	460b      	mov	r3, r1
 801ad88:	4650      	mov	r0, sl
 801ad8a:	4659      	mov	r1, fp
 801ad8c:	f7e5 fa86 	bl	800029c <__adddf3>
 801ad90:	3601      	adds	r6, #1
 801ad92:	4682      	mov	sl, r0
 801ad94:	468b      	mov	fp, r1
 801ad96:	9b00      	ldr	r3, [sp, #0]
 801ad98:	429e      	cmp	r6, r3
 801ad9a:	dc01      	bgt.n	801ada0 <__kernel_rem_pio2+0x4c8>
 801ad9c:	42b5      	cmp	r5, r6
 801ad9e:	dae9      	bge.n	801ad74 <__kernel_rem_pio2+0x49c>
 801ada0:	ab48      	add	r3, sp, #288	@ 0x120
 801ada2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801ada6:	e9c5 ab00 	strd	sl, fp, [r5]
 801adaa:	3c01      	subs	r4, #1
 801adac:	e6ff      	b.n	801abae <__kernel_rem_pio2+0x2d6>
 801adae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801adb0:	2b02      	cmp	r3, #2
 801adb2:	dc0b      	bgt.n	801adcc <__kernel_rem_pio2+0x4f4>
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	dc39      	bgt.n	801ae2c <__kernel_rem_pio2+0x554>
 801adb8:	d05d      	beq.n	801ae76 <__kernel_rem_pio2+0x59e>
 801adba:	9b02      	ldr	r3, [sp, #8]
 801adbc:	f003 0007 	and.w	r0, r3, #7
 801adc0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801adc4:	ecbd 8b02 	vpop	{d8}
 801adc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adcc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801adce:	2b03      	cmp	r3, #3
 801add0:	d1f3      	bne.n	801adba <__kernel_rem_pio2+0x4e2>
 801add2:	9b05      	ldr	r3, [sp, #20]
 801add4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801add8:	eb0d 0403 	add.w	r4, sp, r3
 801addc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801ade0:	4625      	mov	r5, r4
 801ade2:	46c2      	mov	sl, r8
 801ade4:	f1ba 0f00 	cmp.w	sl, #0
 801ade8:	f1a5 0508 	sub.w	r5, r5, #8
 801adec:	dc6b      	bgt.n	801aec6 <__kernel_rem_pio2+0x5ee>
 801adee:	4645      	mov	r5, r8
 801adf0:	2d01      	cmp	r5, #1
 801adf2:	f1a4 0408 	sub.w	r4, r4, #8
 801adf6:	f300 8087 	bgt.w	801af08 <__kernel_rem_pio2+0x630>
 801adfa:	9c05      	ldr	r4, [sp, #20]
 801adfc:	ab48      	add	r3, sp, #288	@ 0x120
 801adfe:	441c      	add	r4, r3
 801ae00:	2000      	movs	r0, #0
 801ae02:	2100      	movs	r1, #0
 801ae04:	f1b8 0f01 	cmp.w	r8, #1
 801ae08:	f300 809c 	bgt.w	801af44 <__kernel_rem_pio2+0x66c>
 801ae0c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801ae10:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801ae14:	f1b9 0f00 	cmp.w	r9, #0
 801ae18:	f040 80a6 	bne.w	801af68 <__kernel_rem_pio2+0x690>
 801ae1c:	9b04      	ldr	r3, [sp, #16]
 801ae1e:	e9c3 7800 	strd	r7, r8, [r3]
 801ae22:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801ae26:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ae2a:	e7c6      	b.n	801adba <__kernel_rem_pio2+0x4e2>
 801ae2c:	9d05      	ldr	r5, [sp, #20]
 801ae2e:	ab48      	add	r3, sp, #288	@ 0x120
 801ae30:	441d      	add	r5, r3
 801ae32:	4644      	mov	r4, r8
 801ae34:	2000      	movs	r0, #0
 801ae36:	2100      	movs	r1, #0
 801ae38:	2c00      	cmp	r4, #0
 801ae3a:	da35      	bge.n	801aea8 <__kernel_rem_pio2+0x5d0>
 801ae3c:	f1b9 0f00 	cmp.w	r9, #0
 801ae40:	d038      	beq.n	801aeb4 <__kernel_rem_pio2+0x5dc>
 801ae42:	4602      	mov	r2, r0
 801ae44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ae48:	9c04      	ldr	r4, [sp, #16]
 801ae4a:	e9c4 2300 	strd	r2, r3, [r4]
 801ae4e:	4602      	mov	r2, r0
 801ae50:	460b      	mov	r3, r1
 801ae52:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801ae56:	f7e5 fa1f 	bl	8000298 <__aeabi_dsub>
 801ae5a:	ad4a      	add	r5, sp, #296	@ 0x128
 801ae5c:	2401      	movs	r4, #1
 801ae5e:	45a0      	cmp	r8, r4
 801ae60:	da2b      	bge.n	801aeba <__kernel_rem_pio2+0x5e2>
 801ae62:	f1b9 0f00 	cmp.w	r9, #0
 801ae66:	d002      	beq.n	801ae6e <__kernel_rem_pio2+0x596>
 801ae68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ae6c:	4619      	mov	r1, r3
 801ae6e:	9b04      	ldr	r3, [sp, #16]
 801ae70:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ae74:	e7a1      	b.n	801adba <__kernel_rem_pio2+0x4e2>
 801ae76:	9c05      	ldr	r4, [sp, #20]
 801ae78:	ab48      	add	r3, sp, #288	@ 0x120
 801ae7a:	441c      	add	r4, r3
 801ae7c:	2000      	movs	r0, #0
 801ae7e:	2100      	movs	r1, #0
 801ae80:	f1b8 0f00 	cmp.w	r8, #0
 801ae84:	da09      	bge.n	801ae9a <__kernel_rem_pio2+0x5c2>
 801ae86:	f1b9 0f00 	cmp.w	r9, #0
 801ae8a:	d002      	beq.n	801ae92 <__kernel_rem_pio2+0x5ba>
 801ae8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ae90:	4619      	mov	r1, r3
 801ae92:	9b04      	ldr	r3, [sp, #16]
 801ae94:	e9c3 0100 	strd	r0, r1, [r3]
 801ae98:	e78f      	b.n	801adba <__kernel_rem_pio2+0x4e2>
 801ae9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ae9e:	f7e5 f9fd 	bl	800029c <__adddf3>
 801aea2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801aea6:	e7eb      	b.n	801ae80 <__kernel_rem_pio2+0x5a8>
 801aea8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801aeac:	f7e5 f9f6 	bl	800029c <__adddf3>
 801aeb0:	3c01      	subs	r4, #1
 801aeb2:	e7c1      	b.n	801ae38 <__kernel_rem_pio2+0x560>
 801aeb4:	4602      	mov	r2, r0
 801aeb6:	460b      	mov	r3, r1
 801aeb8:	e7c6      	b.n	801ae48 <__kernel_rem_pio2+0x570>
 801aeba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801aebe:	f7e5 f9ed 	bl	800029c <__adddf3>
 801aec2:	3401      	adds	r4, #1
 801aec4:	e7cb      	b.n	801ae5e <__kernel_rem_pio2+0x586>
 801aec6:	ed95 7b00 	vldr	d7, [r5]
 801aeca:	ed8d 7b00 	vstr	d7, [sp]
 801aece:	ed95 7b02 	vldr	d7, [r5, #8]
 801aed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aed6:	ec53 2b17 	vmov	r2, r3, d7
 801aeda:	ed8d 7b06 	vstr	d7, [sp, #24]
 801aede:	f7e5 f9dd 	bl	800029c <__adddf3>
 801aee2:	4602      	mov	r2, r0
 801aee4:	460b      	mov	r3, r1
 801aee6:	4606      	mov	r6, r0
 801aee8:	460f      	mov	r7, r1
 801aeea:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aeee:	f7e5 f9d3 	bl	8000298 <__aeabi_dsub>
 801aef2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801aef6:	f7e5 f9d1 	bl	800029c <__adddf3>
 801aefa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801aefe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801af02:	e9c5 6700 	strd	r6, r7, [r5]
 801af06:	e76d      	b.n	801ade4 <__kernel_rem_pio2+0x50c>
 801af08:	ed94 7b00 	vldr	d7, [r4]
 801af0c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801af10:	ec51 0b17 	vmov	r0, r1, d7
 801af14:	4652      	mov	r2, sl
 801af16:	465b      	mov	r3, fp
 801af18:	ed8d 7b00 	vstr	d7, [sp]
 801af1c:	f7e5 f9be 	bl	800029c <__adddf3>
 801af20:	4602      	mov	r2, r0
 801af22:	460b      	mov	r3, r1
 801af24:	4606      	mov	r6, r0
 801af26:	460f      	mov	r7, r1
 801af28:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af2c:	f7e5 f9b4 	bl	8000298 <__aeabi_dsub>
 801af30:	4652      	mov	r2, sl
 801af32:	465b      	mov	r3, fp
 801af34:	f7e5 f9b2 	bl	800029c <__adddf3>
 801af38:	3d01      	subs	r5, #1
 801af3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801af3e:	e9c4 6700 	strd	r6, r7, [r4]
 801af42:	e755      	b.n	801adf0 <__kernel_rem_pio2+0x518>
 801af44:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801af48:	f7e5 f9a8 	bl	800029c <__adddf3>
 801af4c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801af50:	e758      	b.n	801ae04 <__kernel_rem_pio2+0x52c>
 801af52:	bf00      	nop
 801af54:	f3af 8000 	nop.w
	...
 801af60:	41700000 	.word	0x41700000
 801af64:	3e700000 	.word	0x3e700000
 801af68:	9b04      	ldr	r3, [sp, #16]
 801af6a:	9a04      	ldr	r2, [sp, #16]
 801af6c:	601f      	str	r7, [r3, #0]
 801af6e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801af72:	605c      	str	r4, [r3, #4]
 801af74:	609d      	str	r5, [r3, #8]
 801af76:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801af7a:	60d3      	str	r3, [r2, #12]
 801af7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801af80:	6110      	str	r0, [r2, #16]
 801af82:	6153      	str	r3, [r2, #20]
 801af84:	e719      	b.n	801adba <__kernel_rem_pio2+0x4e2>
 801af86:	bf00      	nop

0801af88 <floor>:
 801af88:	ec51 0b10 	vmov	r0, r1, d0
 801af8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af94:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801af98:	2e13      	cmp	r6, #19
 801af9a:	460c      	mov	r4, r1
 801af9c:	4605      	mov	r5, r0
 801af9e:	4680      	mov	r8, r0
 801afa0:	dc34      	bgt.n	801b00c <floor+0x84>
 801afa2:	2e00      	cmp	r6, #0
 801afa4:	da17      	bge.n	801afd6 <floor+0x4e>
 801afa6:	a332      	add	r3, pc, #200	@ (adr r3, 801b070 <floor+0xe8>)
 801afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afac:	f7e5 f976 	bl	800029c <__adddf3>
 801afb0:	2200      	movs	r2, #0
 801afb2:	2300      	movs	r3, #0
 801afb4:	f7e5 fdb8 	bl	8000b28 <__aeabi_dcmpgt>
 801afb8:	b150      	cbz	r0, 801afd0 <floor+0x48>
 801afba:	2c00      	cmp	r4, #0
 801afbc:	da55      	bge.n	801b06a <floor+0xe2>
 801afbe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801afc2:	432c      	orrs	r4, r5
 801afc4:	2500      	movs	r5, #0
 801afc6:	42ac      	cmp	r4, r5
 801afc8:	4c2b      	ldr	r4, [pc, #172]	@ (801b078 <floor+0xf0>)
 801afca:	bf08      	it	eq
 801afcc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801afd0:	4621      	mov	r1, r4
 801afd2:	4628      	mov	r0, r5
 801afd4:	e023      	b.n	801b01e <floor+0x96>
 801afd6:	4f29      	ldr	r7, [pc, #164]	@ (801b07c <floor+0xf4>)
 801afd8:	4137      	asrs	r7, r6
 801afda:	ea01 0307 	and.w	r3, r1, r7
 801afde:	4303      	orrs	r3, r0
 801afe0:	d01d      	beq.n	801b01e <floor+0x96>
 801afe2:	a323      	add	r3, pc, #140	@ (adr r3, 801b070 <floor+0xe8>)
 801afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afe8:	f7e5 f958 	bl	800029c <__adddf3>
 801afec:	2200      	movs	r2, #0
 801afee:	2300      	movs	r3, #0
 801aff0:	f7e5 fd9a 	bl	8000b28 <__aeabi_dcmpgt>
 801aff4:	2800      	cmp	r0, #0
 801aff6:	d0eb      	beq.n	801afd0 <floor+0x48>
 801aff8:	2c00      	cmp	r4, #0
 801affa:	bfbe      	ittt	lt
 801affc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801b000:	4133      	asrlt	r3, r6
 801b002:	18e4      	addlt	r4, r4, r3
 801b004:	ea24 0407 	bic.w	r4, r4, r7
 801b008:	2500      	movs	r5, #0
 801b00a:	e7e1      	b.n	801afd0 <floor+0x48>
 801b00c:	2e33      	cmp	r6, #51	@ 0x33
 801b00e:	dd0a      	ble.n	801b026 <floor+0x9e>
 801b010:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801b014:	d103      	bne.n	801b01e <floor+0x96>
 801b016:	4602      	mov	r2, r0
 801b018:	460b      	mov	r3, r1
 801b01a:	f7e5 f93f 	bl	800029c <__adddf3>
 801b01e:	ec41 0b10 	vmov	d0, r0, r1
 801b022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b026:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801b02a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b02e:	40df      	lsrs	r7, r3
 801b030:	4207      	tst	r7, r0
 801b032:	d0f4      	beq.n	801b01e <floor+0x96>
 801b034:	a30e      	add	r3, pc, #56	@ (adr r3, 801b070 <floor+0xe8>)
 801b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b03a:	f7e5 f92f 	bl	800029c <__adddf3>
 801b03e:	2200      	movs	r2, #0
 801b040:	2300      	movs	r3, #0
 801b042:	f7e5 fd71 	bl	8000b28 <__aeabi_dcmpgt>
 801b046:	2800      	cmp	r0, #0
 801b048:	d0c2      	beq.n	801afd0 <floor+0x48>
 801b04a:	2c00      	cmp	r4, #0
 801b04c:	da0a      	bge.n	801b064 <floor+0xdc>
 801b04e:	2e14      	cmp	r6, #20
 801b050:	d101      	bne.n	801b056 <floor+0xce>
 801b052:	3401      	adds	r4, #1
 801b054:	e006      	b.n	801b064 <floor+0xdc>
 801b056:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801b05a:	2301      	movs	r3, #1
 801b05c:	40b3      	lsls	r3, r6
 801b05e:	441d      	add	r5, r3
 801b060:	4545      	cmp	r5, r8
 801b062:	d3f6      	bcc.n	801b052 <floor+0xca>
 801b064:	ea25 0507 	bic.w	r5, r5, r7
 801b068:	e7b2      	b.n	801afd0 <floor+0x48>
 801b06a:	2500      	movs	r5, #0
 801b06c:	462c      	mov	r4, r5
 801b06e:	e7af      	b.n	801afd0 <floor+0x48>
 801b070:	8800759c 	.word	0x8800759c
 801b074:	7e37e43c 	.word	0x7e37e43c
 801b078:	bff00000 	.word	0xbff00000
 801b07c:	000fffff 	.word	0x000fffff

0801b080 <_init>:
 801b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b082:	bf00      	nop
 801b084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b086:	bc08      	pop	{r3}
 801b088:	469e      	mov	lr, r3
 801b08a:	4770      	bx	lr

0801b08c <_fini>:
 801b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b08e:	bf00      	nop
 801b090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b092:	bc08      	pop	{r3}
 801b094:	469e      	mov	lr, r3
 801b096:	4770      	bx	lr
