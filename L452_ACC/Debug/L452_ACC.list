
L452_ACC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram2        00000000  10000000  10000000  00031310  2**0
                  CONTENTS
  1 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0001b748  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013df0  0801b8e8  0801b8e8  0001c8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802f6d8  0802f6d8  00031310  2**0
                  CONTENTS
  5 .ARM          00000008  0802f6d8  0802f6d8  000306d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802f6e0  0802f6e0  00031310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0802f6e0  0802f6e0  000306e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0802f6e4  0802f6e4  000306e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000310  20000000  0802f6e8  00031000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000248bc  20000310  0802f9f8  00031310  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20024bcc  0802f9f8  00031bcc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00031310  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036256  00000000  00000000  00031340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007852  00000000  00000000  00067596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002478  00000000  00000000  0006ede8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ad1  00000000  00000000  00071260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b5d6  00000000  00000000  00072d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d30d  00000000  00000000  0009e307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f29fd  00000000  00000000  000cb614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  001be011  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b064  00000000  00000000  001be0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001c9130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00003c05  00000000  00000000  001c91a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000001a8  00000000  00000000  001ccda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000310 	.word	0x20000310
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b8d0 	.word	0x0801b8d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000314 	.word	0x20000314
 80001dc:	0801b8d0 	.word	0x0801b8d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <ADXL355_Init>:

/**
   @brief Initialization the accelerometer sensor
   @return none
**/
void ADXL355_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
//   DioPulPin(DATARDYACC_PORT, DATARDYACC_PIN_NUMBER, 0);         /* Disable the internal pull up on INT2ACC pin */
//   DioOenPin(DATARDYACC_PORT, DATARDYACC_PIN_NUMBER, 0);         /* Set INT2ACC pin as input */

	/* Quick verification test for boards */

   uint32_t volatile ui32test = ADXL355_SPI_Read(DEVID_AD);                  /* Read the ID register */
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f001 fa3c 	bl	8002478 <ADXL355_SPI_Read>
 8001000:	4603      	mov	r3, r0
 8001002:	60fb      	str	r3, [r7, #12]
   uint32_t volatile ui32test2 = ADXL355_SPI_Read(DEVID_MST);                  /* Read the ID register */
 8001004:	2001      	movs	r0, #1
 8001006:	f001 fa37 	bl	8002478 <ADXL355_SPI_Read>
 800100a:	4603      	mov	r3, r0
 800100c:	60bb      	str	r3, [r7, #8]
   uint32_t volatile ui32test3 = ADXL355_SPI_Read(PARTID);                  /* Read the ID register */
 800100e:	2002      	movs	r0, #2
 8001010:	f001 fa32 	bl	8002478 <ADXL355_SPI_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	607b      	str	r3, [r7, #4]
   uint32_t volatile ui32test4 = ADXL355_SPI_Read(REVID);                 /* Read the ID register */
 8001018:	2003      	movs	r0, #3
 800101a:	f001 fa2d 	bl	8002478 <ADXL355_SPI_Read>
 800101e:	4603      	mov	r3, r0
 8001020:	603b      	str	r3, [r7, #0]

   if ((ui32test == 0xAD) && (ui32test2 == 0x1D) && (ui32test3 == 0xED) && (ui32test4 == 0x01)) {
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2bad      	cmp	r3, #173	@ 0xad
 8001026:	d111      	bne.n	800104c <ADXL355_Init+0x58>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b1d      	cmp	r3, #29
 800102c:	d10e      	bne.n	800104c <ADXL355_Init+0x58>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2bed      	cmp	r3, #237	@ 0xed
 8001032:	d10b      	bne.n	800104c <ADXL355_Init+0x58>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <ADXL355_Init+0x58>
	   kappa("\n\rReset and initialized.\n\r");
 800103a:	4808      	ldr	r0, [pc, #32]	@ (800105c <ADXL355_Init+0x68>)
 800103c:	f000 fa66 	bl	800150c <kappa>
	   ADXL355_SPI_Write(0x2F, 0x52, 1); //reset
 8001040:	2201      	movs	r2, #1
 8001042:	2152      	movs	r1, #82	@ 0x52
 8001044:	202f      	movs	r0, #47	@ 0x2f
 8001046:	f001 fa55 	bl	80024f4 <ADXL355_SPI_Write>
   if ((ui32test == 0xAD) && (ui32test2 == 0x1D) && (ui32test3 == 0xED) && (ui32test4 == 0x01)) {
 800104a:	e003      	b.n	8001054 <ADXL355_Init+0x60>
   }
   else
	   kappa("Error initializing\n\r");
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <ADXL355_Init+0x6c>)
 800104e:	f000 fa5d 	bl	800150c <kappa>
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0801b8e8 	.word	0x0801b8e8
 8001060:	0801b904 	.word	0x0801b904

08001064 <ADXL355_Start_Sensor>:

/**
   @brief Turns on accelerometer measurement mode.
   @return none
**/
void ADXL355_Start_Sensor(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
   uint8_t ui8temp;

   ui8temp = (uint8_t)ADXL355_SPI_Read(POWER_CTL);       /* Read POWER_CTL register, before modifying it */
 800106a:	202d      	movs	r0, #45	@ 0x2d
 800106c:	f001 fa04 	bl	8002478 <ADXL355_SPI_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]

   ui8temp = ui8temp & 0xFE;                                          /* Set measurement bit in POWER_CTL register */
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f023 0301 	bic.w	r3, r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]

   ADXL355_SPI_Write(POWER_CTL, ui8temp, SPI_WRITE_ONE_REG);                    /* Write the new value to POWER_CTL register */
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	202d      	movs	r0, #45	@ 0x2d
 8001084:	f001 fa36 	bl	80024f4 <ADXL355_SPI_Write>

   kappa("\n\rSensors started.\n\r");
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <ADXL355_Start_Sensor+0x34>)
 800108a:	f000 fa3f 	bl	800150c <kappa>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	0801b91c 	.word	0x0801b91c

0800109c <ADXL355_Acceleration_Data_Conversion>:
   @brief Convert the two's complement data in X,Y,Z registers to signed integers
   @param ui32SensorData - raw data from register
   @return int32_t - signed integer data
**/
int32_t ADXL355_Acceleration_Data_Conversion (uint32_t ui32SensorData)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
   int32_t volatile i32Conversion = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]

   ui32SensorData = ( ui32SensorData >> 4);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	607b      	str	r3, [r7, #4]

   ui32SensorData = (ui32SensorData & 0x000FFFFF);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010b4:	607b      	str	r3, [r7, #4]

   if((ui32SensorData & 0x00080000)  == 0x00080000){ //checking if most sig bit is set
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <ADXL355_Acceleration_Data_Conversion+0x32>
         i32Conversion = (ui32SensorData | 0xFFF00000); //if its set, we try to make it negative
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80010c6:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e001      	b.n	80010d2 <ADXL355_Acceleration_Data_Conversion+0x36>
   }
   else{
         i32Conversion = ui32SensorData;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]
   }

   return i32Conversion;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <get_eeprom_data_len>:
#include "EEPROM.h"
#include "m95p32.h"


uint16_t get_eeprom_data_len()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
	uint8_t		status;
	uint16_t	data_len = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	81fb      	strh	r3, [r7, #14]

	for(int ii=0;ii<eeprom_size;ii++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	e015      	b.n	800111c <get_eeprom_data_len+0x3c>
	{
		Single_Read(&status, ii*M95P32_PAGESIZE ,1);
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	0259      	lsls	r1, r3, #9
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	2201      	movs	r2, #1
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f8eb 	bl	80012d4 <Single_Read>
		kappa("\r\n [%d]: %x", ii, status);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	461a      	mov	r2, r3
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	480d      	ldr	r0, [pc, #52]	@ (800113c <get_eeprom_data_len+0x5c>)
 8001106:	f000 fa01 	bl	800150c <kappa>
		if(status!=0xFF)
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2bff      	cmp	r3, #255	@ 0xff
 800110e:	d002      	beq.n	8001116 <get_eeprom_data_len+0x36>
			data_len++;
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	3301      	adds	r3, #1
 8001114:	81fb      	strh	r3, [r7, #14]
	for(int ii=0;ii<eeprom_size;ii++)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3301      	adds	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 8001122:	4293      	cmp	r3, r2
 8001124:	dde4      	ble.n	80010f0 <get_eeprom_data_len+0x10>
	}
	kappa("\r\nData_len:%d", data_len);
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	4619      	mov	r1, r3
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <get_eeprom_data_len+0x60>)
 800112c:	f000 f9ee 	bl	800150c <kappa>
	return data_len;
 8001130:	89fb      	ldrh	r3, [r7, #14]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	0801b980 	.word	0x0801b980
 8001140:	0801b98c 	.word	0x0801b98c

08001144 <vPortSuppressTicksAndSleep>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <EEPROMEX_CTRL_HIGH>:
  * @brief  This function gives high on selected control pin
  * @param  None
  * @retval None
  */  
void EEPROMEX_CTRL_HIGH(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(M95P32_EEPROM_SPI_CS_PORT,M95P32_EEPROM_SPI_CS_PIN,GPIO_PIN_SET );
 800115c:	2201      	movs	r2, #1
 800115e:	2110      	movs	r1, #16
 8001160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001164:	f003 fc40 	bl	80049e8 <HAL_GPIO_WritePin>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <EEPROMEX_CTRL_LOW>:
  * @brief  This function gives low on selected control pin
  * @param  None
  * @retval None
  */  
void EEPROMEX_CTRL_LOW(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(M95P32_EEPROM_SPI_CS_PORT,M95P32_EEPROM_SPI_CS_PIN,GPIO_PIN_RESET );
 8001170:	2200      	movs	r2, #0
 8001172:	2110      	movs	r1, #16
 8001174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001178:	f003 fc36 	bl	80049e8 <HAL_GPIO_WritePin>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <Transmit_Data_polling>:
  * @brief  This function polls WIP bit of status register
  * @param  None
  * @retval None
  */ 
void Transmit_Data_polling(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  /* read status register until WIP bit become 0 */
  HAL_StatusTypeDef  Rep;
  CmdBuff[0] = CMD_READ_STATUS_REG;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <Transmit_Data_polling+0x80>)
 8001188:	2205      	movs	r2, #5
 800118a:	701a      	strb	r2, [r3, #0]
  EEPROMEX_CTRL_LOW();
 800118c:	f7ff ffee 	bl	800116c <EEPROMEX_CTRL_LOW>
  Rep = HAL_SPI_Transmit_DMA(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_1_BYTE);
 8001190:	2201      	movs	r2, #1
 8001192:	491b      	ldr	r1, [pc, #108]	@ (8001200 <Transmit_Data_polling+0x80>)
 8001194:	481b      	ldr	r0, [pc, #108]	@ (8001204 <Transmit_Data_polling+0x84>)
 8001196:	f008 f949 	bl	800942c <HAL_SPI_Transmit_DMA>
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  osSemaphoreAcquire(sem_SPI_tx, osWaitForever);
 800119e:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <Transmit_Data_polling+0x88>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011a6:	4618      	mov	r0, r3
 80011a8:	f00e faaa 	bl	800f700 <osSemaphoreAcquire>
  //Rep = HAL_SPI_Transmit(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_1_BYTE, SPI_DATA_TIMEOUT);
  if(Rep != HAL_OK)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <Transmit_Data_polling+0x36>
  {
    Error_Handler();
 80011b2:	f002 f853 	bl	800325c <Error_Handler>
  }
  RxCom[0] = 1;
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <Transmit_Data_polling+0x8c>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
  while ((RxCom[0] & 0x01U) != 0U)
 80011bc:	e014      	b.n	80011e8 <Transmit_Data_polling+0x68>
  {
    Rep = HAL_SPI_Receive_DMA(&SPI_INSTANCE, RxCom, INSTRUCTION_LEN_1_BYTE);
 80011be:	2201      	movs	r2, #1
 80011c0:	4912      	ldr	r1, [pc, #72]	@ (800120c <Transmit_Data_polling+0x8c>)
 80011c2:	4810      	ldr	r0, [pc, #64]	@ (8001204 <Transmit_Data_polling+0x84>)
 80011c4:	f008 fa22 	bl	800960c <HAL_SPI_Receive_DMA>
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
    osSemaphoreAcquire(sem_SPI_rx, osWaitForever);
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <Transmit_Data_polling+0x90>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00e fa93 	bl	800f700 <osSemaphoreAcquire>
    //vTaskDelay(1);
    //Rep = HAL_SPI_Receive(&SPI_INSTANCE, RxCom, INSTRUCTION_LEN_1_BYTE, SPI_DATA_TIMEOUT);

    if(Rep != HAL_OK)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <Transmit_Data_polling+0x68>
    {
      EEPROMEX_CTRL_HIGH();
 80011e0:	f7ff ffba 	bl	8001158 <EEPROMEX_CTRL_HIGH>
      Error_Handler();
 80011e4:	f002 f83a 	bl	800325c <Error_Handler>
  while ((RxCom[0] & 0x01U) != 0U)
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Transmit_Data_polling+0x8c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e4      	bne.n	80011be <Transmit_Data_polling+0x3e>
    }
  }
  EEPROMEX_CTRL_HIGH();
 80011f4:	f7ff ffb0 	bl	8001158 <EEPROMEX_CTRL_HIGH>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000032c 	.word	0x2000032c
 8001204:	200007ec 	.word	0x200007ec
 8001208:	20000ab4 	.word	0x20000ab4
 800120c:	20000590 	.word	0x20000590
 8001210:	20000ab8 	.word	0x20000ab8

08001214 <WRITE_ENABLE>:
  *               register to a 1
  * @param  None
  * @retval BSP status
  */
int32_t WRITE_ENABLE(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = M95_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
  

  EEPROMEX_CTRL_LOW();
 8001222:	f7ff ffa3 	bl	800116c <EEPROMEX_CTRL_LOW>
  CmdBuff[0] = CMD_WREN;
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <WRITE_ENABLE+0x54>)
 8001228:	2206      	movs	r2, #6
 800122a:	701a      	strb	r2, [r3, #0]
  status = HAL_SPI_Transmit_DMA(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_1_BYTE);
 800122c:	2201      	movs	r2, #1
 800122e:	490e      	ldr	r1, [pc, #56]	@ (8001268 <WRITE_ENABLE+0x54>)
 8001230:	480e      	ldr	r0, [pc, #56]	@ (800126c <WRITE_ENABLE+0x58>)
 8001232:	f008 f8fb 	bl	800942c <HAL_SPI_Transmit_DMA>
 8001236:	4603      	mov	r3, r0
 8001238:	70fb      	strb	r3, [r7, #3]
  osSemaphoreAcquire(sem_SPI_tx, osWaitForever);
 800123a:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <WRITE_ENABLE+0x5c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001242:	4618      	mov	r0, r3
 8001244:	f00e fa5c 	bl	800f700 <osSemaphoreAcquire>
  EEPROMEX_CTRL_HIGH();
 8001248:	f7ff ff86 	bl	8001158 <EEPROMEX_CTRL_HIGH>

  if( status != HAL_OK)
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <WRITE_ENABLE+0x46>
  {
    ret = M95_ERROR;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	e001      	b.n	800125e <WRITE_ENABLE+0x4a>
  }
  else
  {
    ret = M95_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
  }
  return ret;
 800125e:	687b      	ldr	r3, [r7, #4]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000032c 	.word	0x2000032c
 800126c:	200007ec 	.word	0x200007ec
 8001270:	20000ab4 	.word	0x20000ab4

08001274 <WRITE_DISABLE>:
  *               register to a 0
  * @param  None
  * @retval BSP status
  */
int32_t WRITE_DISABLE(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = M95_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  
#if defined (USE_QUADSPI)
  status = QSPI_WriteDisable(&QSPI_INSTANCE);

#elif defined (USE_SPI)
  EEPROMEX_CTRL_LOW();
 8001282:	f7ff ff73 	bl	800116c <EEPROMEX_CTRL_LOW>
  CmdBuff[0] = CMD_WRDI;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <WRITE_DISABLE+0x58>)
 8001288:	2204      	movs	r2, #4
 800128a:	701a      	strb	r2, [r3, #0]
  status = HAL_SPI_Transmit(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_1_BYTE, SPI_DATA_TIMEOUT);
 800128c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001290:	2201      	movs	r2, #1
 8001292:	490e      	ldr	r1, [pc, #56]	@ (80012cc <WRITE_DISABLE+0x58>)
 8001294:	480e      	ldr	r0, [pc, #56]	@ (80012d0 <WRITE_DISABLE+0x5c>)
 8001296:	f007 fbfa 	bl	8008a8e <HAL_SPI_Transmit>
 800129a:	4603      	mov	r3, r0
 800129c:	70fb      	strb	r3, [r7, #3]
  EEPROMEX_CTRL_HIGH();
 800129e:	f7ff ff5b 	bl	8001158 <EEPROMEX_CTRL_HIGH>
  memset(&CmdBuff, 0, sizeof(CmdBuff));
 80012a2:	f240 2262 	movw	r2, #610	@ 0x262
 80012a6:	2100      	movs	r1, #0
 80012a8:	4808      	ldr	r0, [pc, #32]	@ (80012cc <WRITE_DISABLE+0x58>)
 80012aa:	f014 fd91 	bl	8015dd0 <memset>
#else
  /* Select SPI or QUADSPI interface */
#endif
  
  if( status != HAL_OK)
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <WRITE_DISABLE+0x48>
  {
    ret = M95_ERROR;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	e001      	b.n	80012c0 <WRITE_DISABLE+0x4c>
  }
  else
  {
    ret = M95_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  }
  return ret;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000032c 	.word	0x2000032c
 80012d0:	200007ec 	.word	0x200007ec

080012d4 <Single_Read>:
  * @param  Size : Number of Bytes of data to be read
  * @retval BSP status
  */

int32_t Single_Read(uint8_t *pData, uint32_t TarAddr, uint32_t Size)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	75fb      	strb	r3, [r7, #23]
  int32_t ret = M95_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]


  CmdBuff[0] = CMD_READ_DATA;
 80012e8:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <Single_Read+0xb0>)
 80012ea:	2203      	movs	r2, #3
 80012ec:	701a      	strb	r2, [r3, #0]
  CmdBuff[1] = (uint8_t)((TarAddr & MSK_BYTE3) >> SHIFT_16BIT);
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	0c1b      	lsrs	r3, r3, #16
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <Single_Read+0xb0>)
 80012f6:	705a      	strb	r2, [r3, #1]
  CmdBuff[2] = (uint8_t)((TarAddr & MSK_BYTE2) >> SHIFT_8BIT);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <Single_Read+0xb0>)
 8001300:	709a      	strb	r2, [r3, #2]
  CmdBuff[3] = (uint8_t)(TarAddr & MSK_BYTE1);
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <Single_Read+0xb0>)
 8001308:	70da      	strb	r2, [r3, #3]
  
  EEPROMEX_CTRL_LOW();
 800130a:	f7ff ff2f 	bl	800116c <EEPROMEX_CTRL_LOW>
  
  status = HAL_SPI_Transmit_DMA(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_4_BYTE);
 800130e:	2204      	movs	r2, #4
 8001310:	491c      	ldr	r1, [pc, #112]	@ (8001384 <Single_Read+0xb0>)
 8001312:	481d      	ldr	r0, [pc, #116]	@ (8001388 <Single_Read+0xb4>)
 8001314:	f008 f88a 	bl	800942c <HAL_SPI_Transmit_DMA>
 8001318:	4603      	mov	r3, r0
 800131a:	75fb      	strb	r3, [r7, #23]
  osSemaphoreAcquire(sem_SPI_tx, osWaitForever);
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <Single_Read+0xb8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001324:	4618      	mov	r0, r3
 8001326:	f00e f9eb 	bl	800f700 <osSemaphoreAcquire>
  if(status != HAL_OK)
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <Single_Read+0x62>
  {
    EEPROMEX_CTRL_HIGH();
 8001330:	f7ff ff12 	bl	8001158 <EEPROMEX_CTRL_HIGH>
 8001334:	e011      	b.n	800135a <Single_Read+0x86>
  }
  else
  {
    status = HAL_SPI_Receive_DMA(&SPI_INSTANCE, pData, (uint16_t)Size);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	b29b      	uxth	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	4812      	ldr	r0, [pc, #72]	@ (8001388 <Single_Read+0xb4>)
 8001340:	f008 f964 	bl	800960c <HAL_SPI_Receive_DMA>
 8001344:	4603      	mov	r3, r0
 8001346:	75fb      	strb	r3, [r7, #23]
    osSemaphoreAcquire(sem_SPI_rx, osWaitForever);
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <Single_Read+0xbc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001350:	4618      	mov	r0, r3
 8001352:	f00e f9d5 	bl	800f700 <osSemaphoreAcquire>
    EEPROMEX_CTRL_HIGH();
 8001356:	f7ff feff 	bl	8001158 <EEPROMEX_CTRL_HIGH>
  }
  memset(&CmdBuff, 0, sizeof(CmdBuff));
 800135a:	f240 2262 	movw	r2, #610	@ 0x262
 800135e:	2100      	movs	r1, #0
 8001360:	4808      	ldr	r0, [pc, #32]	@ (8001384 <Single_Read+0xb0>)
 8001362:	f014 fd35 	bl	8015dd0 <memset>

  if( status != HAL_OK)
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <Single_Read+0xa0>
  {
    ret = M95_ERROR;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	e001      	b.n	8001378 <Single_Read+0xa4>
  }
  else
  {
    ret = M95_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  }
  return ret;
 8001378:	693b      	ldr	r3, [r7, #16]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000032c 	.word	0x2000032c
 8001388:	200007ec 	.word	0x200007ec
 800138c:	20000ab4 	.word	0x20000ab4
 8001390:	20000ab8 	.word	0x20000ab8

08001394 <Chip_Erase>:
  *               state of all 1s(FFh)
  * @param  Add Starting address of the erase command
  * @retval BSP status
  */
int32_t Chip_Erase(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = M95_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  
#if defined (USE_QUADSPI)
  status = QSPI_ChipErase(&QSPI_INSTANCE);

#elif defined (USE_SPI)
  CmdBuff[0] = CMD_ERASE_CHIP;
 80013a2:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <Chip_Erase+0x5c>)
 80013a4:	22c7      	movs	r2, #199	@ 0xc7
 80013a6:	701a      	strb	r2, [r3, #0]
  EEPROMEX_CTRL_LOW();
 80013a8:	f7ff fee0 	bl	800116c <EEPROMEX_CTRL_LOW>
  status = HAL_SPI_Transmit(&SPI_INSTANCE, CmdBuff, INSTRUCTION_LEN_1_BYTE, SPI_DATA_TIMEOUT);
 80013ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013b0:	2201      	movs	r2, #1
 80013b2:	490f      	ldr	r1, [pc, #60]	@ (80013f0 <Chip_Erase+0x5c>)
 80013b4:	480f      	ldr	r0, [pc, #60]	@ (80013f4 <Chip_Erase+0x60>)
 80013b6:	f007 fb6a 	bl	8008a8e <HAL_SPI_Transmit>
 80013ba:	4603      	mov	r3, r0
 80013bc:	70fb      	strb	r3, [r7, #3]
  EEPROMEX_CTRL_HIGH();
 80013be:	f7ff fecb 	bl	8001158 <EEPROMEX_CTRL_HIGH>
  
  Transmit_Data_polling();
 80013c2:	f7ff fedd 	bl	8001180 <Transmit_Data_polling>
  memset(&CmdBuff, 0, sizeof(CmdBuff));
 80013c6:	f240 2262 	movw	r2, #610	@ 0x262
 80013ca:	2100      	movs	r1, #0
 80013cc:	4808      	ldr	r0, [pc, #32]	@ (80013f0 <Chip_Erase+0x5c>)
 80013ce:	f014 fcff 	bl	8015dd0 <memset>
#else
  /* Select SPI or QUADSPI interface */  
#endif
  
  if( status != HAL_OK)
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <Chip_Erase+0x4c>
  {
    ret = M95_ERROR;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	e001      	b.n	80013e4 <Chip_Erase+0x50>
  }
  else
  {
    ret = M95_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  }
  return ret;
 80013e4:	687b      	ldr	r3, [r7, #4]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000032c 	.word	0x2000032c
 80013f4:	200007ec 	.word	0x200007ec

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	@ (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	@ (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	@ (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	@ 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	@ 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <kappa>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void kappa(const char *fmt, ...)
{
 800150c:	b40f      	push	{r0, r1, r2, r3}
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001522:	480b      	ldr	r0, [pc, #44]	@ (8001550 <kappa+0x44>)
 8001524:	f014 fbb2 	bl	8015c8c <vsniprintf>
	va_end(args);
	int len = strlen(buffer);
 8001528:	4809      	ldr	r0, [pc, #36]	@ (8001550 <kappa+0x44>)
 800152a:	f7fe fea9 	bl	8000280 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	b29a      	uxth	r2, r3
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800153a:	4905      	ldr	r1, [pc, #20]	@ (8001550 <kappa+0x44>)
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <kappa+0x48>)
 800153e:	f008 fe7f 	bl	800a240 <HAL_UART_Transmit>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800154c:	b004      	add	sp, #16
 800154e:	4770      	bx	lr
 8001550:	2001a198 	.word	0x2001a198
 8001554:	200009d4 	.word	0x200009d4

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155c:	f002 fa6f 	bl	8003a3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001560:	f000 f8b4 	bl	80016cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	  MX_GPIO_Init();
 8001564:	f000 fa88 	bl	8001a78 <MX_GPIO_Init>
	  MX_DMA_Init();
 8001568:	f000 fa1c 	bl	80019a4 <MX_DMA_Init>
	  MX_RTC_Init();
 800156c:	f000 f932 	bl	80017d4 <MX_RTC_Init>
	  MX_USART1_UART_Init();
 8001570:	f000 f9e8 	bl	8001944 <MX_USART1_UART_Init>
	  MX_SPI1_Init();
 8001574:	f000 f96a 	bl	800184c <MX_SPI1_Init>
	  MX_SPI2_Init();
 8001578:	f000 f9a6 	bl	80018c8 <MX_SPI2_Init>
	  MX_LPTIM1_Init();
 800157c:	f000 f8fc 	bl	8001778 <MX_LPTIM1_Init>
	  HAL_Delay(100);
 8001580:	2064      	movs	r0, #100	@ 0x64
 8001582:	f002 fad1 	bl	8003b28 <HAL_Delay>
	  SET_BIT(PWR->CR2, PWR_PVM_1);
 8001586:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <main+0x110>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a37      	ldr	r2, [pc, #220]	@ (8001668 <main+0x110>)
 800158c:	f043 0310 	orr.w	r3, r3, #16
 8001590:	6053      	str	r3, [r2, #4]
	  HAL_Delay(500);
 8001592:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001596:	f002 fac7 	bl	8003b28 <HAL_Delay>
	  if (!HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_PVMO1)) //Detect USBVDD
 800159a:	4b33      	ldr	r3, [pc, #204]	@ (8001668 <main+0x110>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015a6:	d005      	beq.n	80015b4 <main+0x5c>
	  {
		  kappa("\r\n USB ON");
 80015a8:	4830      	ldr	r0, [pc, #192]	@ (800166c <main+0x114>)
 80015aa:	f7ff ffaf 	bl	800150c <kappa>
		  MX_USB_DEVICE_Init();
 80015ae:	f011 fb4b 	bl	8012c48 <MX_USB_DEVICE_Init>
 80015b2:	e002      	b.n	80015ba <main+0x62>

	  }else
	  {
		  kappa("\r\n USB OFF");
 80015b4:	482e      	ldr	r0, [pc, #184]	@ (8001670 <main+0x118>)
 80015b6:	f7ff ffa9 	bl	800150c <kappa>

  //GPIO_ConfigAN();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_SPI2_Init();
 80015ba:	f000 f985 	bl	80018c8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015be:	f00d feb3 	bl	800f328 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_buffer */
  mutex_bufferHandle = osMutexNew(&mutex_buffer_attributes);
 80015c2:	482c      	ldr	r0, [pc, #176]	@ (8001674 <main+0x11c>)
 80015c4:	f00d ff8c 	bl	800f4e0 <osMutexNew>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001678 <main+0x120>)
 80015cc:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sem_mem_write */
  sem_mem_writeHandle = osSemaphoreNew(1, 0, &sem_mem_write_attributes);
 80015ce:	4a2b      	ldr	r2, [pc, #172]	@ (800167c <main+0x124>)
 80015d0:	2100      	movs	r1, #0
 80015d2:	2001      	movs	r0, #1
 80015d4:	f00e f80a 	bl	800f5ec <osSemaphoreNew>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a29      	ldr	r2, [pc, #164]	@ (8001680 <main+0x128>)
 80015dc:	6013      	str	r3, [r2, #0]

  /* creation of sem_mem_read */
  sem_mem_readHandle = osSemaphoreNew(1, 0, &sem_mem_read_attributes);
 80015de:	4a29      	ldr	r2, [pc, #164]	@ (8001684 <main+0x12c>)
 80015e0:	2100      	movs	r1, #0
 80015e2:	2001      	movs	r0, #1
 80015e4:	f00e f802 	bl	800f5ec <osSemaphoreNew>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a27      	ldr	r2, [pc, #156]	@ (8001688 <main+0x130>)
 80015ec:	6013      	str	r3, [r2, #0]

  /* creation of sem_usb */
  sem_usbHandle = osSemaphoreNew(1, 0, &sem_usb_attributes);
 80015ee:	4a27      	ldr	r2, [pc, #156]	@ (800168c <main+0x134>)
 80015f0:	2100      	movs	r1, #0
 80015f2:	2001      	movs	r0, #1
 80015f4:	f00d fffa 	bl	800f5ec <osSemaphoreNew>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a25      	ldr	r2, [pc, #148]	@ (8001690 <main+0x138>)
 80015fc:	6013      	str	r3, [r2, #0]

  /* creation of sem_SPI_DMA */
  sem_SPI_DMAHandle = osSemaphoreNew(1, 0, &sem_SPI_DMA_attributes);
 80015fe:	4a25      	ldr	r2, [pc, #148]	@ (8001694 <main+0x13c>)
 8001600:	2100      	movs	r1, #0
 8001602:	2001      	movs	r0, #1
 8001604:	f00d fff2 	bl	800f5ec <osSemaphoreNew>
 8001608:	4603      	mov	r3, r0
 800160a:	4a23      	ldr	r2, [pc, #140]	@ (8001698 <main+0x140>)
 800160c:	6013      	str	r3, [r2, #0]

  /* creation of sem_processing */
  sem_processingHandle = osSemaphoreNew(1, 0, &sem_processing_attributes);
 800160e:	4a23      	ldr	r2, [pc, #140]	@ (800169c <main+0x144>)
 8001610:	2100      	movs	r1, #0
 8001612:	2001      	movs	r0, #1
 8001614:	f00d ffea 	bl	800f5ec <osSemaphoreNew>
 8001618:	4603      	mov	r3, r0
 800161a:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <main+0x148>)
 800161c:	6013      	str	r3, [r2, #0]

  /* creation of sem_sampling */
  sem_samplingHandle = osSemaphoreNew(1, 0, &sem_sampling_attributes);
 800161e:	4a21      	ldr	r2, [pc, #132]	@ (80016a4 <main+0x14c>)
 8001620:	2100      	movs	r1, #0
 8001622:	2001      	movs	r0, #1
 8001624:	f00d ffe2 	bl	800f5ec <osSemaphoreNew>
 8001628:	4603      	mov	r3, r0
 800162a:	4a1f      	ldr	r2, [pc, #124]	@ (80016a8 <main+0x150>)
 800162c:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of usb_cmd_queue */
  usb_cmd_queueHandle = osMessageQueueNew (30, sizeof(uint8_t), &usb_cmd_queue_attributes);
 800162e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ac <main+0x154>)
 8001630:	2101      	movs	r1, #1
 8001632:	201e      	movs	r0, #30
 8001634:	f00e f8fa 	bl	800f82c <osMessageQueueNew>
 8001638:	4603      	mov	r3, r0
 800163a:	4a1d      	ldr	r2, [pc, #116]	@ (80016b0 <main+0x158>)
 800163c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of main_task */
  main_taskHandle = osThreadNew(task_main, NULL, &main_task_attributes);
 800163e:	4a1d      	ldr	r2, [pc, #116]	@ (80016b4 <main+0x15c>)
 8001640:	2100      	movs	r1, #0
 8001642:	481d      	ldr	r0, [pc, #116]	@ (80016b8 <main+0x160>)
 8001644:	f00d feba 	bl	800f3bc <osThreadNew>
 8001648:	4603      	mov	r3, r0
 800164a:	4a1c      	ldr	r2, [pc, #112]	@ (80016bc <main+0x164>)
 800164c:	6013      	str	r3, [r2, #0]

  /* creation of task_sampling */
  task_samplingHandle = osThreadNew(sampling_task, NULL, &task_sampling_attributes);
 800164e:	4a1c      	ldr	r2, [pc, #112]	@ (80016c0 <main+0x168>)
 8001650:	2100      	movs	r1, #0
 8001652:	481c      	ldr	r0, [pc, #112]	@ (80016c4 <main+0x16c>)
 8001654:	f00d feb2 	bl	800f3bc <osThreadNew>
 8001658:	4603      	mov	r3, r0
 800165a:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <main+0x170>)
 800165c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800165e:	f00d fe87 	bl	800f370 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001662:	bf00      	nop
 8001664:	e7fd      	b.n	8001662 <main+0x10a>
 8001666:	bf00      	nop
 8001668:	40007000 	.word	0x40007000
 800166c:	0801ba38 	.word	0x0801ba38
 8001670:	0801ba44 	.word	0x0801ba44
 8001674:	0801bed0 	.word	0x0801bed0
 8001678:	20000ab0 	.word	0x20000ab0
 800167c:	0801bee0 	.word	0x0801bee0
 8001680:	20000ab4 	.word	0x20000ab4
 8001684:	0801bef0 	.word	0x0801bef0
 8001688:	20000ab8 	.word	0x20000ab8
 800168c:	0801bf00 	.word	0x0801bf00
 8001690:	20000abc 	.word	0x20000abc
 8001694:	0801bf10 	.word	0x0801bf10
 8001698:	20000ac0 	.word	0x20000ac0
 800169c:	0801bf20 	.word	0x0801bf20
 80016a0:	20000ac4 	.word	0x20000ac4
 80016a4:	0801bf30 	.word	0x0801bf30
 80016a8:	20000ac8 	.word	0x20000ac8
 80016ac:	0801beb8 	.word	0x0801beb8
 80016b0:	20000aac 	.word	0x20000aac
 80016b4:	0801be70 	.word	0x0801be70
 80016b8:	0800310d 	.word	0x0800310d
 80016bc:	20000aa4 	.word	0x20000aa4
 80016c0:	0801be94 	.word	0x0801be94
 80016c4:	0800320d 	.word	0x0800320d
 80016c8:	20000aa8 	.word	0x20000aa8

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b096      	sub	sp, #88	@ 0x58
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	2244      	movs	r2, #68	@ 0x44
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f014 fb78 	bl	8015dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016f2:	f005 fad7 	bl	8006ca4 <HAL_PWREx_ControlVoltageScaling>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016fc:	f001 fdae 	bl	800325c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001700:	f005 fab2 	bl	8006c68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <SystemClock_Config+0xa8>)
 8001706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170a:	4a1a      	ldr	r2, [pc, #104]	@ (8001774 <SystemClock_Config+0xa8>)
 800170c:	f023 0318 	bic.w	r3, r3, #24
 8001710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001714:	2325      	movs	r3, #37	@ 0x25
 8001716:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001718:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800171c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800171e:	2301      	movs	r3, #1
 8001720:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001722:	2301      	movs	r3, #1
 8001724:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001726:	2300      	movs	r3, #0
 8001728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4618      	mov	r0, r3
 8001730:	f005 fb4a 	bl	8006dc8 <HAL_RCC_OscConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800173a:	f001 fd8f 	bl	800325c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173e:	230f      	movs	r3, #15
 8001740:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001742:	2302      	movs	r3, #2
 8001744:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001752:	463b      	mov	r3, r7
 8001754:	2101      	movs	r1, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f005 ff4e 	bl	80075f8 <HAL_RCC_ClockConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001762:	f001 fd7b 	bl	800325c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001766:	f006 f90b 	bl	8007980 <HAL_RCC_EnableCSS>
}
 800176a:	bf00      	nop
 800176c:	3758      	adds	r7, #88	@ 0x58
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000

08001778 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_LPTIM1_Init+0x54>)
 800177e:	4a14      	ldr	r2, [pc, #80]	@ (80017d0 <MX_LPTIM1_Init+0x58>)
 8001780:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001782:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <MX_LPTIM1_Init+0x54>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001788:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <MX_LPTIM1_Init+0x54>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_LPTIM1_Init+0x54>)
 8001790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001794:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <MX_LPTIM1_Init+0x54>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <MX_LPTIM1_Init+0x54>)
 800179e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_LPTIM1_Init+0x54>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <MX_LPTIM1_Init+0x54>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_LPTIM1_Init+0x54>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_LPTIM1_Init+0x54>)
 80017b8:	f003 f960 	bl	8004a7c <HAL_LPTIM_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80017c2:	f001 fd4b 	bl	800325c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000790 	.word	0x20000790
 80017d0:	40007c00 	.word	0x40007c00

080017d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <MX_RTC_Init+0x6c>)
 80017da:	4a1a      	ldr	r2, [pc, #104]	@ (8001844 <MX_RTC_Init+0x70>)
 80017dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017de:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <MX_RTC_Init+0x6c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017e4:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <MX_RTC_Init+0x6c>)
 80017e6:	227f      	movs	r2, #127	@ 0x7f
 80017e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <MX_RTC_Init+0x6c>)
 80017ec:	22ff      	movs	r2, #255	@ 0xff
 80017ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017f0:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <MX_RTC_Init+0x6c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <MX_RTC_Init+0x6c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <MX_RTC_Init+0x6c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_RTC_Init+0x6c>)
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001808:	480d      	ldr	r0, [pc, #52]	@ (8001840 <MX_RTC_Init+0x6c>)
 800180a:	f006 fca3 	bl	8008154 <HAL_RTC_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001814:	f001 fd22 	bl	800325c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  time_ref.tm_hour = 0x00;
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <MX_RTC_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  time_ref.tm_min = 0x00;
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <MX_RTC_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
  time_ref.tm_sec = 0x00;
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <MX_RTC_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
  time_ref.tm_mday = 0x01;
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <MX_RTC_Init+0x74>)
 800182c:	2201      	movs	r2, #1
 800182e:	60da      	str	r2, [r3, #12]
  time_ref.tm_mon = 0x01;
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <MX_RTC_Init+0x74>)
 8001832:	2201      	movs	r2, #1
 8001834:	611a      	str	r2, [r3, #16]
  time_ref.tm_year = 0x22;
 8001836:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <MX_RTC_Init+0x74>)
 8001838:	2222      	movs	r2, #34	@ 0x22
 800183a:	615a      	str	r2, [r3, #20]
  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD);
  HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);*/

  /* USER CODE END RTC_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200007c8 	.word	0x200007c8
 8001844:	40002800 	.word	0x40002800
 8001848:	20000ae8 	.word	0x20000ae8

0800184c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <MX_SPI1_Init+0x74>)
 8001852:	4a1c      	ldr	r2, [pc, #112]	@ (80018c4 <MX_SPI1_Init+0x78>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <MX_SPI1_Init+0x74>)
 8001858:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <MX_SPI1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001864:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <MX_SPI1_Init+0x74>)
 8001866:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800186a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <MX_SPI1_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <MX_SPI1_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <MX_SPI1_Init+0x74>)
 800187a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800187e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <MX_SPI1_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <MX_SPI1_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <MX_SPI1_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <MX_SPI1_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <MX_SPI1_Init+0x74>)
 800189a:	2207      	movs	r2, #7
 800189c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <MX_SPI1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <MX_SPI1_Init+0x74>)
 80018a6:	2208      	movs	r2, #8
 80018a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <MX_SPI1_Init+0x74>)
 80018ac:	f007 f84c 	bl	8008948 <HAL_SPI_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018b6:	f001 fcd1 	bl	800325c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200007ec 	.word	0x200007ec
 80018c4:	40013000 	.word	0x40013000

080018c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <MX_SPI2_Init+0x74>)
 80018ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001940 <MX_SPI2_Init+0x78>)
 80018d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <MX_SPI2_Init+0x74>)
 80018d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <MX_SPI2_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <MX_SPI2_Init+0x74>)
 80018e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <MX_SPI2_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <MX_SPI2_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <MX_SPI2_Init+0x74>)
 80018f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <MX_SPI2_Init+0x74>)
 80018fe:	2228      	movs	r2, #40	@ 0x28
 8001900:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_SPI2_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <MX_SPI2_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <MX_SPI2_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <MX_SPI2_Init+0x74>)
 8001916:	2207      	movs	r2, #7
 8001918:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <MX_SPI2_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <MX_SPI2_Init+0x74>)
 8001922:	2208      	movs	r2, #8
 8001924:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001926:	4805      	ldr	r0, [pc, #20]	@ (800193c <MX_SPI2_Init+0x74>)
 8001928:	f007 f80e 	bl	8008948 <HAL_SPI_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001932:	f001 fc93 	bl	800325c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000850 	.word	0x20000850
 8001940:	40003800 	.word	0x40003800

08001944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <MX_USART1_UART_Init+0x58>)
 800194a:	4a15      	ldr	r2, [pc, #84]	@ (80019a0 <MX_USART1_UART_Init+0x5c>)
 800194c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 32000;
 800194e:	4b13      	ldr	r3, [pc, #76]	@ (800199c <MX_USART1_UART_Init+0x58>)
 8001950:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <MX_USART1_UART_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <MX_USART1_UART_Init+0x58>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <MX_USART1_UART_Init+0x58>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_USART1_UART_Init+0x58>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <MX_USART1_UART_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_USART1_UART_Init+0x58>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <MX_USART1_UART_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <MX_USART1_UART_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_USART1_UART_Init+0x58>)
 8001988:	f008 fc0c 	bl	800a1a4 <HAL_UART_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001992:	f001 fc63 	bl	800325c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200009d4 	.word	0x200009d4
 80019a0:	40013800 	.word	0x40013800

080019a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019aa:	4b32      	ldr	r3, [pc, #200]	@ (8001a74 <MX_DMA_Init+0xd0>)
 80019ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ae:	4a31      	ldr	r2, [pc, #196]	@ (8001a74 <MX_DMA_Init+0xd0>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80019b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a74 <MX_DMA_Init+0xd0>)
 80019b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a74 <MX_DMA_Init+0xd0>)
 80019c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001a74 <MX_DMA_Init+0xd0>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80019ce:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <MX_DMA_Init+0xd0>)
 80019d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2105      	movs	r1, #5
 80019de:	200c      	movs	r0, #12
 80019e0:	f002 f9d5 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80019e4:	200c      	movs	r0, #12
 80019e6:	f002 f9ee 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2105      	movs	r1, #5
 80019ee:	200d      	movs	r0, #13
 80019f0:	f002 f9cd 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80019f4:	200d      	movs	r0, #13
 80019f6:	f002 f9e6 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2105      	movs	r1, #5
 80019fe:	200e      	movs	r0, #14
 8001a00:	f002 f9c5 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a04:	200e      	movs	r0, #14
 8001a06:	f002 f9de 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f002 f9bd 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a14:	200f      	movs	r0, #15
 8001a16:	f002 f9d6 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8001a1a:	f7ff fced 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2200      	movs	r2, #0
 8001a22:	2106      	movs	r1, #6
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fd3d 	bl	80014a4 <NVIC_EncodePriority>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	203a      	movs	r0, #58	@ 0x3a
 8001a30:	f7ff fd0e 	bl	8001450 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001a34:	203a      	movs	r0, #58	@ 0x3a
 8001a36:	f7ff fced 	bl	8001414 <__NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001a3a:	f7ff fcdd 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2200      	movs	r2, #0
 8001a42:	2105      	movs	r1, #5
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fd2d 	bl	80014a4 <NVIC_EncodePriority>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	203b      	movs	r0, #59	@ 0x3b
 8001a50:	f7ff fcfe 	bl	8001450 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001a54:	203b      	movs	r0, #59	@ 0x3b
 8001a56:	f7ff fcdd 	bl	8001414 <__NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2105      	movs	r1, #5
 8001a5e:	2044      	movs	r0, #68	@ 0x44
 8001a60:	f002 f995 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001a64:	2044      	movs	r0, #68	@ 0x44
 8001a66:	f002 f9ae 	bl	8003dc6 <HAL_NVIC_EnableIRQ>

}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000

08001a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	4a49      	ldr	r2, [pc, #292]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9a:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa6:	4b44      	ldr	r3, [pc, #272]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	4a43      	ldr	r2, [pc, #268]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab2:	4b41      	ldr	r3, [pc, #260]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aca:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	4b38      	ldr	r3, [pc, #224]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	4a37      	ldr	r2, [pc, #220]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae2:	4b35      	ldr	r3, [pc, #212]	@ (8001bb8 <MX_GPIO_Init+0x140>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2110      	movs	r1, #16
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af6:	f002 ff77 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b00:	482e      	ldr	r0, [pc, #184]	@ (8001bbc <MX_GPIO_Init+0x144>)
 8001b02:	f002 ff71 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS_P_Pin|STATUS_N_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	21c0      	movs	r1, #192	@ 0xc0
 8001b0a:	482d      	ldr	r0, [pc, #180]	@ (8001bc0 <MX_GPIO_Init+0x148>)
 8001b0c:	f002 ff6c 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001b10:	2310      	movs	r3, #16
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b2a:	f002 fde3 	bl	80046f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	481d      	ldr	r0, [pc, #116]	@ (8001bbc <MX_GPIO_Init+0x144>)
 8001b48:	f002 fdd4 	bl	80046f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB_ST_Pin */
  GPIO_InitStruct.Pin = PB_ST_Pin;
 8001b4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB_ST_GPIO_Port, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	4816      	ldr	r0, [pc, #88]	@ (8001bbc <MX_GPIO_Init+0x144>)
 8001b64:	f002 fdc6 	bl	80046f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_P_Pin */
  GPIO_InitStruct.Pin = STATUS_P_Pin;
 8001b68:	2340      	movs	r3, #64	@ 0x40
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_P_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4810      	ldr	r0, [pc, #64]	@ (8001bc0 <MX_GPIO_Init+0x148>)
 8001b80:	f002 fdb8 	bl	80046f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_N_Pin */
  GPIO_InitStruct.Pin = STATUS_N_Pin;
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_N_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4809      	ldr	r0, [pc, #36]	@ (8001bc0 <MX_GPIO_Init+0x148>)
 8001b9c:	f002 fdaa 	bl	80046f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2105      	movs	r1, #5
 8001ba4:	2028      	movs	r0, #40	@ 0x28
 8001ba6:	f002 f8f2 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001baa:	2028      	movs	r0, #40	@ 0x28
 8001bac:	f002 f90b 	bl	8003dc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb0:	bf00      	nop
 8001bb2:	3728      	adds	r7, #40	@ 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	48000800 	.word	0x48000800

08001bc4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	kappa("Alarm!\r\n");
 8001bcc:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <HAL_RTC_AlarmAEventCallback+0x18>)
 8001bce:	f7ff fc9d 	bl	800150c <kappa>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	0801ba50 	.word	0x0801ba50

08001be0 <Queue_put>:

	return t;
}

osStatus_t Queue_put(struct BUFF *queue, uint8_t *msg_in, uint8_t msg_len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	4613      	mov	r3, r2
 8001bec:	71fb      	strb	r3, [r7, #7]
	if (queue->bufferLength == max_msgs)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	2b0a      	cmp	r3, #10
 8001bf4:	d105      	bne.n	8001c02 <Queue_put+0x22>
	{
		#ifdef DEBUG
			kappa("\r\nBuffer is full!");
 8001bf6:	481c      	ldr	r0, [pc, #112]	@ (8001c68 <Queue_put+0x88>)
 8001bf8:	f7ff fc88 	bl	800150c <kappa>
		#endif
		return osError;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c00:	e02d      	b.n	8001c5e <Queue_put+0x7e>
	}
	queue->bufferMain[queue->writeIndex][0] = msg_len;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	885b      	ldrh	r3, [r3, #2]
 8001c06:	4619      	mov	r1, r3
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	2364      	movs	r3, #100	@ 0x64
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	3306      	adds	r3, #6
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	701a      	strb	r2, [r3, #0]
	//memset(queue->bufferMain[queue->writeIndex], 0, buffer_size);	TODO: Make this work//Clear buffer for previous data
	memcpy(&queue->bufferMain[queue->writeIndex][1], msg_in, msg_len);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	885b      	ldrh	r3, [r3, #2]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2364      	movs	r3, #100	@ 0x64
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4413      	add	r3, r2
 8001c2a:	3306      	adds	r3, #6
 8001c2c:	79fa      	ldrb	r2, [r7, #7]
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f014 f9a2 	bl	8015f7a <memcpy>

	queue->bufferLength++;	 //	Increase buffer size after writing
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	801a      	strh	r2, [r3, #0]
	queue->writeIndex++;	 //	Increase writeIndex position to prepare for next write
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	885b      	ldrh	r3, [r3, #2]
 8001c46:	3301      	adds	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	805a      	strh	r2, [r3, #2]

	// If at last index in buffer, set writeIndex back to 0
	if (queue->writeIndex == max_msgs)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	885b      	ldrh	r3, [r3, #2]
 8001c52:	2b0a      	cmp	r3, #10
 8001c54:	d102      	bne.n	8001c5c <Queue_put+0x7c>
		queue->writeIndex = 0;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	805a      	strh	r2, [r3, #2]

	return osOK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	0801ba5c 	.word	0x0801ba5c

08001c6c <Queue_get>:

osStatus_t Queue_get(struct BUFF *queue, uint8_t *msg_out)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
	if (queue->bufferLength == 0)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <Queue_get+0x1e>
	{
		#ifdef DEBUG
			kappa("\r\nBuffer is empty!");
 8001c7e:	481b      	ldr	r0, [pc, #108]	@ (8001cec <Queue_get+0x80>)
 8001c80:	f7ff fc44 	bl	800150c <kappa>
		#endif
		return osError;
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c88:	e02b      	b.n	8001ce2 <Queue_get+0x76>
	}

	memcpy(msg_out, queue->bufferMain[queue->readIndex], queue->bufferMain[queue->readIndex][0]+1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	889b      	ldrh	r3, [r3, #4]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2364      	movs	r3, #100	@ 0x64
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	1d99      	adds	r1, r3, #6
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	889b      	ldrh	r3, [r3, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	2364      	movs	r3, #100	@ 0x64
 8001ca6:	fb00 f303 	mul.w	r3, r0, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3306      	adds	r3, #6
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6838      	ldr	r0, [r7, #0]
 8001cb6:	f014 f960 	bl	8015f7a <memcpy>
	queue->bufferLength--;	 //	Decrease buffer size after reading
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	801a      	strh	r2, [r3, #0]
	queue->readIndex++;	 //	Increase readIndex position to prepare for next read
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	889b      	ldrh	r3, [r3, #4]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	809a      	strh	r2, [r3, #4]

	// If at last index in buffer, set readIndex back to 0
	if (queue->readIndex == max_msgs)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	889b      	ldrh	r3, [r3, #4]
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d102      	bne.n	8001ce0 <Queue_get+0x74>
		queue->readIndex = 0;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	809a      	strh	r2, [r3, #4]

	return osOK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	0801ba70 	.word	0x0801ba70

08001cf0 <task_usb>:

	return osOK;
}

void task_usb(void *argument)
{
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	b0a7      	sub	sp, #156	@ 0x9c
 8001cf4:	af06      	add	r7, sp, #24
 8001cf6:	60f8      	str	r0, [r7, #12]
	/* USER CODE BEGIN task_usb */
	uint16_t data_len = 0, tout = 100;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8001cfe:	2364      	movs	r3, #100	@ 0x64
 8001d00:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	uint64_t p;

	uint64_t config_val = 0;
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	uint8_t currTimeBuff[50];
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(sem_usbHandle, osWaitForever);
 8001d10:	4bb0      	ldr	r3, [pc, #704]	@ (8001fd4 <task_usb+0x2e4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f00d fcf1 	bl	800f700 <osSemaphoreAcquire>
		#ifdef debug_USB
			//kappa("\r\ncmd0:%02x%02x%02x", usb_cmd[0], usb_cmd[1], usb_cmd[2]);
		#endif

		kappa("\r\nQueue out [%d]: ", USB_msgs.bufferLength);
 8001d1e:	4bae      	ldr	r3, [pc, #696]	@ (8001fd8 <task_usb+0x2e8>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	48ad      	ldr	r0, [pc, #692]	@ (8001fdc <task_usb+0x2ec>)
 8001d26:	f7ff fbf1 	bl	800150c <kappa>

		while(USB_msgs.bufferLength>0)
 8001d2a:	e017      	b.n	8001d5c <task_usb+0x6c>
		{
			Queue_get(&USB_msgs, usb_cmd);
 8001d2c:	49ac      	ldr	r1, [pc, #688]	@ (8001fe0 <task_usb+0x2f0>)
 8001d2e:	48aa      	ldr	r0, [pc, #680]	@ (8001fd8 <task_usb+0x2e8>)
 8001d30:	f7ff ff9c 	bl	8001c6c <Queue_get>
			for(int ii=0;ii<usb_cmd[0];ii++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d38:	e00a      	b.n	8001d50 <task_usb+0x60>
				kappa("%c", usb_cmd[ii+1]);
 8001d3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	4aa8      	ldr	r2, [pc, #672]	@ (8001fe0 <task_usb+0x2f0>)
 8001d40:	5cd3      	ldrb	r3, [r2, r3]
 8001d42:	4619      	mov	r1, r3
 8001d44:	48a7      	ldr	r0, [pc, #668]	@ (8001fe4 <task_usb+0x2f4>)
 8001d46:	f7ff fbe1 	bl	800150c <kappa>
			for(int ii=0;ii<usb_cmd[0];ii++)
 8001d4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d50:	4ba3      	ldr	r3, [pc, #652]	@ (8001fe0 <task_usb+0x2f0>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	dbee      	blt.n	8001d3a <task_usb+0x4a>
		while(USB_msgs.bufferLength>0)
 8001d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8001fd8 <task_usb+0x2e8>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e3      	bne.n	8001d2c <task_usb+0x3c>
		}

		switch(usb_cmd[1])
 8001d64:	4b9e      	ldr	r3, [pc, #632]	@ (8001fe0 <task_usb+0x2f0>)
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	dc19      	bgt.n	8001da0 <task_usb+0xb0>
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f340 8175 	ble.w	800205c <task_usb+0x36c>
 8001d72:	3b01      	subs	r3, #1
 8001d74:	2b07      	cmp	r3, #7
 8001d76:	f200 8171 	bhi.w	800205c <task_usb+0x36c>
 8001d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d80 <task_usb+0x90>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001dbb 	.word	0x08001dbb
 8001d84:	08001ddf 	.word	0x08001ddf
 8001d88:	08001e3b 	.word	0x08001e3b
 8001d8c:	08001e51 	.word	0x08001e51
 8001d90:	08001e89 	.word	0x08001e89
 8001d94:	08001f09 	.word	0x08001f09
 8001d98:	08002049 	.word	0x08002049
 8001d9c:	08002065 	.word	0x08002065
 8001da0:	2bff      	cmp	r3, #255	@ 0xff
 8001da2:	f040 815b 	bne.w	800205c <task_usb+0x36c>
		{
			case 0xFF:	//Validate PC connection sending the random bytes back
				#ifdef debug_USB
					kappa("\r\nConnected!");
 8001da6:	4890      	ldr	r0, [pc, #576]	@ (8001fe8 <task_usb+0x2f8>)
 8001da8:	f7ff fbb0 	bl	800150c <kappa>
				#endif
				CDC_Transmit_FS(&usb_cmd[1], usb_cmd[0]);
 8001dac:	4b8c      	ldr	r3, [pc, #560]	@ (8001fe0 <task_usb+0x2f0>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	488e      	ldr	r0, [pc, #568]	@ (8001fec <task_usb+0x2fc>)
 8001db4:	f011 f85c 	bl	8012e70 <CDC_Transmit_FS>
			break;
 8001db8:	e155      	b.n	8002066 <task_usb+0x376>

			case 0x01:	//Get EEPROM data length
				data_len = get_eeprom_data_len();
 8001dba:	f7ff f991 	bl	80010e0 <get_eeprom_data_len>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
				#ifdef debug_USB
					kappa("\r\nEEPROM Length: %d", data_len);
 8001dc4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4889      	ldr	r0, [pc, #548]	@ (8001ff0 <task_usb+0x300>)
 8001dcc:	f7ff fb9e 	bl	800150c <kappa>
				#endif
				CDC_Transmit_FS((uint8_t*)&data_len, 2);
 8001dd0:	f107 0376 	add.w	r3, r7, #118	@ 0x76
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f011 f84a 	bl	8012e70 <CDC_Transmit_FS>
			break;
 8001ddc:	e143      	b.n	8002066 <task_usb+0x376>

			case 0x02: //Read EEPROM data
				memcpy(&data_len, &usb_cmd[2], 2);
 8001dde:	4b80      	ldr	r3, [pc, #512]	@ (8001fe0 <task_usb+0x2f0>)
 8001de0:	885b      	ldrh	r3, [r3, #2]
 8001de2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
				Single_Read(eeprom_aux_buffer, data_len*M95P32_PAGESIZE, block_len*2);
 8001de6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001dea:	025b      	lsls	r3, r3, #9
 8001dec:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 8001df0:	4619      	mov	r1, r3
 8001df2:	4880      	ldr	r0, [pc, #512]	@ (8001ff4 <task_usb+0x304>)
 8001df4:	f7ff fa6e 	bl	80012d4 <Single_Read>
				#ifdef debug_USB
					kappa("\r\EEPROM Length: %d", data_len);
 8001df8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	487e      	ldr	r0, [pc, #504]	@ (8001ff8 <task_usb+0x308>)
 8001e00:	f7ff fb84 	bl	800150c <kappa>
					kappa("\r\nRead: ");
 8001e04:	487d      	ldr	r0, [pc, #500]	@ (8001ffc <task_usb+0x30c>)
 8001e06:	f7ff fb81 	bl	800150c <kappa>
					for(int ii=0;ii<block_len*2;ii++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e0e:	e00a      	b.n	8001e26 <task_usb+0x136>
						kappa("%02x", eeprom_aux_buffer[ii]);
 8001e10:	4a78      	ldr	r2, [pc, #480]	@ (8001ff4 <task_usb+0x304>)
 8001e12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4879      	ldr	r0, [pc, #484]	@ (8002000 <task_usb+0x310>)
 8001e1c:	f7ff fb76 	bl	800150c <kappa>
					for(int ii=0;ii<block_len*2;ii++)
 8001e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e22:	3301      	adds	r3, #1
 8001e24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e28:	f5b3 7ff6 	cmp.w	r3, #492	@ 0x1ec
 8001e2c:	dbf0      	blt.n	8001e10 <task_usb+0x120>
				#endif
				CDC_Transmit_FS(eeprom_aux_buffer, block_len*2);
 8001e2e:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 8001e32:	4870      	ldr	r0, [pc, #448]	@ (8001ff4 <task_usb+0x304>)
 8001e34:	f011 f81c 	bl	8012e70 <CDC_Transmit_FS>
			break;
 8001e38:	e115      	b.n	8002066 <task_usb+0x376>

			case 0x03:	//Enter LPWA configuration
				memcpy(&tout, &usb_cmd[2], 2);
 8001e3a:	4b69      	ldr	r3, [pc, #420]	@ (8001fe0 <task_usb+0x2f0>)
 8001e3c:	885b      	ldrh	r3, [r3, #2]
 8001e3e:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

				#ifdef debug_USB
					kappa("\r\nIoT Config! (Tout=%d)", tout);
 8001e42:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001e46:	4619      	mov	r1, r3
 8001e48:	486e      	ldr	r0, [pc, #440]	@ (8002004 <task_usb+0x314>)
 8001e4a:	f7ff fb5f 	bl	800150c <kappa>
				#endif

			break;
 8001e4e:	e10a      	b.n	8002066 <task_usb+0x376>

			case 0x04:	//Get configuration value from flash memory
				p = *(uint64_t *)ADDR_FLASH_PAGE_252;
 8001e50:	4b6d      	ldr	r3, [pc, #436]	@ (8002008 <task_usb+0x318>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
				#ifdef debug_USB
					kappa("\r\nConfig. value:%lx - %lx",(uint32_t)(p>>32), (uint32_t)(p&0xFFFFFFFF));
 8001e5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	000a      	movs	r2, r1
 8001e68:	2300      	movs	r3, #0
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001e70:	4613      	mov	r3, r2
 8001e72:	461a      	mov	r2, r3
 8001e74:	4865      	ldr	r0, [pc, #404]	@ (800200c <task_usb+0x31c>)
 8001e76:	f7ff fb49 	bl	800150c <kappa>
				#endif
				CDC_Transmit_FS((uint8_t*)&p, 8);
 8001e7a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001e7e:	2108      	movs	r1, #8
 8001e80:	4618      	mov	r0, r3
 8001e82:	f010 fff5 	bl	8012e70 <CDC_Transmit_FS>
			break;
 8001e86:	e0ee      	b.n	8002066 <task_usb+0x376>

			case 0x05:	//Receive 64bit configuration data and store it in flash

				memcpy(&config_val, &usb_cmd[2], 8);
 8001e88:	4b55      	ldr	r3, [pc, #340]	@ (8001fe0 <task_usb+0x2f0>)
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	681c      	ldr	r4, [r3, #0]
 8001e8e:	685d      	ldr	r5, [r3, #4]
 8001e90:	4622      	mov	r2, r4
 8001e92:	462b      	mov	r3, r5
 8001e94:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

				#ifdef debug_USB
					kappa("\r\nConfig_val: %d", config_val);
 8001e98:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001e9c:	485c      	ldr	r0, [pc, #368]	@ (8002010 <task_usb+0x320>)
 8001e9e:	f7ff fb35 	bl	800150c <kappa>
				#endif
				store_config_64(config_val);
 8001ea2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f000 f8e1 	bl	8002070 <store_config_64>
				vTaskDelay(100);
 8001eae:	2064      	movs	r0, #100	@ 0x64
 8001eb0:	f00f f84e 	bl	8010f50 <vTaskDelay>
				load_config(&cal, &gps_enabled, &lpwa_enabled, &octave, &RecTime, &LeqTime);
 8001eb4:	4b57      	ldr	r3, [pc, #348]	@ (8002014 <task_usb+0x324>)
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	4b57      	ldr	r3, [pc, #348]	@ (8002018 <task_usb+0x328>)
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4b57      	ldr	r3, [pc, #348]	@ (800201c <task_usb+0x32c>)
 8001ebe:	4a58      	ldr	r2, [pc, #352]	@ (8002020 <task_usb+0x330>)
 8001ec0:	4958      	ldr	r1, [pc, #352]	@ (8002024 <task_usb+0x334>)
 8001ec2:	4859      	ldr	r0, [pc, #356]	@ (8002028 <task_usb+0x338>)
 8001ec4:	f000 f97e 	bl	80021c4 <load_config>
				#ifdef debug_USB
					kappa("\r\nCal: %f, gps:%d, lwpa:%d, octave:%d, Rec:%d, Leq:%d", cal, gps_enabled, lpwa_enabled, octave, RecTime, LeqTime);
 8001ec8:	4b57      	ldr	r3, [pc, #348]	@ (8002028 <task_usb+0x338>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb43 	bl	8000558 <__aeabi_f2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4953      	ldr	r1, [pc, #332]	@ (8002024 <task_usb+0x334>)
 8001ed8:	7809      	ldrb	r1, [r1, #0]
 8001eda:	4608      	mov	r0, r1
 8001edc:	4950      	ldr	r1, [pc, #320]	@ (8002020 <task_usb+0x330>)
 8001ede:	7809      	ldrb	r1, [r1, #0]
 8001ee0:	460e      	mov	r6, r1
 8001ee2:	494e      	ldr	r1, [pc, #312]	@ (800201c <task_usb+0x32c>)
 8001ee4:	7809      	ldrb	r1, [r1, #0]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	494b      	ldr	r1, [pc, #300]	@ (8002018 <task_usb+0x328>)
 8001eea:	8809      	ldrh	r1, [r1, #0]
 8001eec:	6079      	str	r1, [r7, #4]
 8001eee:	4949      	ldr	r1, [pc, #292]	@ (8002014 <task_usb+0x324>)
 8001ef0:	8809      	ldrh	r1, [r1, #0]
 8001ef2:	9104      	str	r1, [sp, #16]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	9103      	str	r1, [sp, #12]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	9102      	str	r1, [sp, #8]
 8001efc:	9601      	str	r6, [sp, #4]
 8001efe:	9000      	str	r0, [sp, #0]
 8001f00:	484a      	ldr	r0, [pc, #296]	@ (800202c <task_usb+0x33c>)
 8001f02:	f7ff fb03 	bl	800150c <kappa>
				#endif
			break;
 8001f06:	e0ae      	b.n	8002066 <task_usb+0x376>

			case 0x06:
				time.Hours = usb_cmd[2];
 8001f08:	4b35      	ldr	r3, [pc, #212]	@ (8001fe0 <task_usb+0x2f0>)
 8001f0a:	789b      	ldrb	r3, [r3, #2]
 8001f0c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
				time.Minutes = usb_cmd[3];
 8001f10:	4b33      	ldr	r3, [pc, #204]	@ (8001fe0 <task_usb+0x2f0>)
 8001f12:	78db      	ldrb	r3, [r3, #3]
 8001f14:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				time.Seconds = usb_cmd[4];
 8001f18:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <task_usb+0x2f0>)
 8001f1a:	791b      	ldrb	r3, [r3, #4]
 8001f1c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
				date.WeekDay = usb_cmd[5];
 8001f20:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <task_usb+0x2f0>)
 8001f22:	795b      	ldrb	r3, [r3, #5]
 8001f24:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
				date.Year = usb_cmd[6];
 8001f28:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <task_usb+0x2f0>)
 8001f2a:	799b      	ldrb	r3, [r3, #6]
 8001f2c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
				date.Month = usb_cmd[7];
 8001f30:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe0 <task_usb+0x2f0>)
 8001f32:	79db      	ldrb	r3, [r3, #7]
 8001f34:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
				date.Date = usb_cmd[8];
 8001f38:	4b29      	ldr	r3, [pc, #164]	@ (8001fe0 <task_usb+0x2f0>)
 8001f3a:	7a1b      	ldrb	r3, [r3, #8]
 8001f3c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
				HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8001f40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f44:	2201      	movs	r2, #1
 8001f46:	4619      	mov	r1, r3
 8001f48:	4839      	ldr	r0, [pc, #228]	@ (8002030 <task_usb+0x340>)
 8001f4a:	f006 f98b 	bl	8008264 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8001f4e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f52:	2201      	movs	r2, #1
 8001f54:	4619      	mov	r1, r3
 8001f56:	4836      	ldr	r0, [pc, #216]	@ (8002030 <task_usb+0x340>)
 8001f58:	f006 fa7d 	bl	8008456 <HAL_RTC_SetDate>

				#ifdef debug_USB
					vTaskDelay(100);
 8001f5c:	2064      	movs	r0, #100	@ 0x64
 8001f5e:	f00e fff7 	bl	8010f50 <vTaskDelay>
					HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001f62:	2200      	movs	r2, #0
 8001f64:	4933      	ldr	r1, [pc, #204]	@ (8002034 <task_usb+0x344>)
 8001f66:	4832      	ldr	r0, [pc, #200]	@ (8002030 <task_usb+0x340>)
 8001f68:	f006 fa19 	bl	800839e <HAL_RTC_GetTime>
					HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4932      	ldr	r1, [pc, #200]	@ (8002038 <task_usb+0x348>)
 8001f70:	482f      	ldr	r0, [pc, #188]	@ (8002030 <task_usb+0x340>)
 8001f72:	f006 faf7 	bl	8008564 <HAL_RTC_GetDate>
					sprintf((char *)currTimeBuff, "%02d/%02d/%02d %02d:%02d:%02d %04lu/%04lu", rtc_date.Date, rtc_date.Month, rtc_date.Year,
 8001f76:	4b30      	ldr	r3, [pc, #192]	@ (8002038 <task_usb+0x348>)
 8001f78:	789b      	ldrb	r3, [r3, #2]
 8001f7a:	469c      	mov	ip, r3
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002038 <task_usb+0x348>)
 8001f7e:	785b      	ldrb	r3, [r3, #1]
 8001f80:	469e      	mov	lr, r3
 8001f82:	4b2d      	ldr	r3, [pc, #180]	@ (8002038 <task_usb+0x348>)
 8001f84:	78db      	ldrb	r3, [r3, #3]
 8001f86:	4619      	mov	r1, r3
								rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, rtc_time.SubSeconds, rtc_time.SecondFraction);
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <task_usb+0x344>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
					sprintf((char *)currTimeBuff, "%02d/%02d/%02d %02d:%02d:%02d %04lu/%04lu", rtc_date.Date, rtc_date.Month, rtc_date.Year,
 8001f8c:	461e      	mov	r6, r3
								rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, rtc_time.SubSeconds, rtc_time.SecondFraction);
 8001f8e:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <task_usb+0x344>)
 8001f90:	785b      	ldrb	r3, [r3, #1]
					sprintf((char *)currTimeBuff, "%02d/%02d/%02d %02d:%02d:%02d %04lu/%04lu", rtc_date.Date, rtc_date.Month, rtc_date.Year,
 8001f92:	60bb      	str	r3, [r7, #8]
								rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, rtc_time.SubSeconds, rtc_time.SecondFraction);
 8001f94:	4b27      	ldr	r3, [pc, #156]	@ (8002034 <task_usb+0x344>)
 8001f96:	789b      	ldrb	r3, [r3, #2]
					sprintf((char *)currTimeBuff, "%02d/%02d/%02d %02d:%02d:%02d %04lu/%04lu", rtc_date.Date, rtc_date.Month, rtc_date.Year,
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <task_usb+0x344>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4a25      	ldr	r2, [pc, #148]	@ (8002034 <task_usb+0x344>)
 8001fa0:	6892      	ldr	r2, [r2, #8]
 8001fa2:	f107 0014 	add.w	r0, r7, #20
 8001fa6:	9205      	str	r2, [sp, #20]
 8001fa8:	9304      	str	r3, [sp, #16]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	9203      	str	r2, [sp, #12]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	9601      	str	r6, [sp, #4]
 8001fb4:	9100      	str	r1, [sp, #0]
 8001fb6:	4673      	mov	r3, lr
 8001fb8:	4662      	mov	r2, ip
 8001fba:	4920      	ldr	r1, [pc, #128]	@ (800203c <task_usb+0x34c>)
 8001fbc:	f013 fdd8 	bl	8015b70 <siprintf>
					kappa("\r\n%s", currTimeBuff);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	481e      	ldr	r0, [pc, #120]	@ (8002040 <task_usb+0x350>)
 8001fc8:	f7ff faa0 	bl	800150c <kappa>
					kappa("\r\nDatetime Configuration EXIT!");
 8001fcc:	481d      	ldr	r0, [pc, #116]	@ (8002044 <task_usb+0x354>)
 8001fce:	f7ff fa9d 	bl	800150c <kappa>
				#endif
			break;
 8001fd2:	e048      	b.n	8002066 <task_usb+0x376>
 8001fd4:	20000abc 	.word	0x20000abc
 8001fd8:	20000b94 	.word	0x20000b94
 8001fdc:	0801badc 	.word	0x0801badc
 8001fe0:	20000b24 	.word	0x20000b24
 8001fe4:	0801baf0 	.word	0x0801baf0
 8001fe8:	0801baf4 	.word	0x0801baf4
 8001fec:	20000b25 	.word	0x20000b25
 8001ff0:	0801bb04 	.word	0x0801bb04
 8001ff4:	20019f98 	.word	0x20019f98
 8001ff8:	0801bb18 	.word	0x0801bb18
 8001ffc:	0801bb2c 	.word	0x0801bb2c
 8002000:	0801bb38 	.word	0x0801bb38
 8002004:	0801bb40 	.word	0x0801bb40
 8002008:	0807e000 	.word	0x0807e000
 800200c:	0801bb58 	.word	0x0801bb58
 8002010:	0801bb74 	.word	0x0801bb74
 8002014:	20000000 	.word	0x20000000
 8002018:	20000b90 	.word	0x20000b90
 800201c:	20000002 	.word	0x20000002
 8002020:	20000b8a 	.word	0x20000b8a
 8002024:	20000b89 	.word	0x20000b89
 8002028:	20000b8c 	.word	0x20000b8c
 800202c:	0801bb88 	.word	0x0801bb88
 8002030:	200007c8 	.word	0x200007c8
 8002034:	20000ad0 	.word	0x20000ad0
 8002038:	20000ae4 	.word	0x20000ae4
 800203c:	0801bbc0 	.word	0x0801bbc0
 8002040:	0801bbec 	.word	0x0801bbec
 8002044:	0801bbf4 	.word	0x0801bbf4

			case 0x07:
				//TODO: Return data to validate erase ok
				WRITE_ENABLE();
 8002048:	f7ff f8e4 	bl	8001214 <WRITE_ENABLE>
				Chip_Erase();
 800204c:	f7ff f9a2 	bl	8001394 <Chip_Erase>
				WRITE_DISABLE();
 8002050:	f7ff f910 	bl	8001274 <WRITE_DISABLE>
				#ifdef debug_USB
					kappa("\r\nChip_Erase");
 8002054:	4804      	ldr	r0, [pc, #16]	@ (8002068 <task_usb+0x378>)
 8002056:	f7ff fa59 	bl	800150c <kappa>
				#endif
			break;
 800205a:	e004      	b.n	8002066 <task_usb+0x376>
			case 0x08:

			break;

			default:
				kappa("\r\nUnknown command!");
 800205c:	4803      	ldr	r0, [pc, #12]	@ (800206c <task_usb+0x37c>)
 800205e:	f7ff fa55 	bl	800150c <kappa>
			break;
 8002062:	e000      	b.n	8002066 <task_usb+0x376>
			break;
 8002064:	bf00      	nop
		osSemaphoreAcquire(sem_usbHandle, osWaitForever);
 8002066:	e653      	b.n	8001d10 <task_usb+0x20>
 8002068:	0801bc14 	.word	0x0801bc14
 800206c:	0801bc24 	.word	0x0801bc24

08002070 <store_config_64>:
	}
	//kappa("\r\n");
}

void store_config_64(uint64_t config_data)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t ctr = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef stat = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	73bb      	strb	r3, [r7, #14]
	if (HAL_FLASH_Unlock()!= HAL_OK)
 8002082:	f002 f92d 	bl	80042e0 <HAL_FLASH_Unlock>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <store_config_64+0x24>
			kappa("\r\nError unlocking memory...");
 800208c:	4842      	ldr	r0, [pc, #264]	@ (8002198 <store_config_64+0x128>)
 800208e:	f7ff fa3d 	bl	800150c <kappa>
 8002092:	e002      	b.n	800209a <store_config_64+0x2a>
	else
		kappa("\r\nMEMORY UNLOCKED!");
 8002094:	4841      	ldr	r0, [pc, #260]	@ (800219c <store_config_64+0x12c>)
 8002096:	f7ff fa39 	bl	800150c <kappa>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800209a:	4b41      	ldr	r3, [pc, #260]	@ (80021a0 <store_config_64+0x130>)
 800209c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020a0:	611a      	str	r2, [r3, #16]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80020a2:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <store_config_64+0x134>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
	//EraseInitStruct.TypeErase = FLASH_TYPEERASE_MASSERASE;
	EraseInitStruct.NbPages = 1;
 80020a8:	4b3e      	ldr	r3, [pc, #248]	@ (80021a4 <store_config_64+0x134>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	60da      	str	r2, [r3, #12]
	EraseInitStruct.Page	= 252;
 80020ae:	4b3d      	ldr	r3, [pc, #244]	@ (80021a4 <store_config_64+0x134>)
 80020b0:	22fc      	movs	r2, #252	@ 0xfc
 80020b2:	609a      	str	r2, [r3, #8]
	EraseInitStruct.Banks = FLASH_BANK_1;
 80020b4:	4b3b      	ldr	r3, [pc, #236]	@ (80021a4 <store_config_64+0x134>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	605a      	str	r2, [r3, #4]
	vTaskDelay(150);
 80020ba:	2096      	movs	r0, #150	@ 0x96
 80020bc:	f00e ff48 	bl	8010f50 <vTaskDelay>
	stat = HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) ;
 80020c0:	4939      	ldr	r1, [pc, #228]	@ (80021a8 <store_config_64+0x138>)
 80020c2:	4838      	ldr	r0, [pc, #224]	@ (80021a4 <store_config_64+0x134>)
 80020c4:	f002 f9f0 	bl	80044a8 <HAL_FLASHEx_Erase>
 80020c8:	4603      	mov	r3, r0
 80020ca:	73bb      	strb	r3, [r7, #14]
	while ((stat!= HAL_OK) & (ctr<3))
 80020cc:	e00e      	b.n	80020ec <store_config_64+0x7c>
	{
		kappa("\r\nError clearing memory...");
 80020ce:	4837      	ldr	r0, [pc, #220]	@ (80021ac <store_config_64+0x13c>)
 80020d0:	f7ff fa1c 	bl	800150c <kappa>
		ctr++;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	3301      	adds	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(150);
 80020da:	2096      	movs	r0, #150	@ 0x96
 80020dc:	f00e ff38 	bl	8010f50 <vTaskDelay>
		stat = HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) ;
 80020e0:	4931      	ldr	r1, [pc, #196]	@ (80021a8 <store_config_64+0x138>)
 80020e2:	4830      	ldr	r0, [pc, #192]	@ (80021a4 <store_config_64+0x134>)
 80020e4:	f002 f9e0 	bl	80044a8 <HAL_FLASHEx_Erase>
 80020e8:	4603      	mov	r3, r0
 80020ea:	73bb      	strb	r3, [r7, #14]
	while ((stat!= HAL_OK) & (ctr<3))
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf14      	ite	ne
 80020f2:	2301      	movne	r3, #1
 80020f4:	2300      	moveq	r3, #0
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	bf94      	ite	ls
 80020fe:	2301      	movls	r3, #1
 8002100:	2300      	movhi	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4013      	ands	r3, r2
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e0      	bne.n	80020ce <store_config_64+0x5e>
	}
	if (stat==HAL_OK)
 800210c:	7bbb      	ldrb	r3, [r7, #14]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d102      	bne.n	8002118 <store_config_64+0xa8>
		kappa("\r\nMEMORY ERASED!");
 8002112:	4827      	ldr	r0, [pc, #156]	@ (80021b0 <store_config_64+0x140>)
 8002114:	f7ff f9fa 	bl	800150c <kappa>

	vTaskDelay(150);
 8002118:	2096      	movs	r0, #150	@ 0x96
 800211a:	f00e ff19 	bl	8010f50 <vTaskDelay>
	ctr=0;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
	stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_252,  config_data);
 8002122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002126:	4923      	ldr	r1, [pc, #140]	@ (80021b4 <store_config_64+0x144>)
 8002128:	2000      	movs	r0, #0
 800212a:	f002 f86d 	bl	8004208 <HAL_FLASH_Program>
 800212e:	4603      	mov	r3, r0
 8002130:	73bb      	strb	r3, [r7, #14]
	while ( (stat != HAL_OK) & (ctr<3))
 8002132:	e012      	b.n	800215a <store_config_64+0xea>
	{
		kappa("\r\nError writing config (%d)...", stat);
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	4619      	mov	r1, r3
 8002138:	481f      	ldr	r0, [pc, #124]	@ (80021b8 <store_config_64+0x148>)
 800213a:	f7ff f9e7 	bl	800150c <kappa>
		ctr++;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	3301      	adds	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(150);
 8002144:	2096      	movs	r0, #150	@ 0x96
 8002146:	f00e ff03 	bl	8010f50 <vTaskDelay>
		stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_252,  config_data);
 800214a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800214e:	4919      	ldr	r1, [pc, #100]	@ (80021b4 <store_config_64+0x144>)
 8002150:	2000      	movs	r0, #0
 8002152:	f002 f859 	bl	8004208 <HAL_FLASH_Program>
 8002156:	4603      	mov	r3, r0
 8002158:	73bb      	strb	r3, [r7, #14]
	while ( (stat != HAL_OK) & (ctr<3))
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2da      	uxtb	r2, r3
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	2b02      	cmp	r3, #2
 800216a:	bf94      	ite	ls
 800216c:	2301      	movls	r3, #1
 800216e:	2300      	movhi	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4013      	ands	r3, r2
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1dc      	bne.n	8002134 <store_config_64+0xc4>
	}

	if (stat==HAL_OK)
 800217a:	7bbb      	ldrb	r3, [r7, #14]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <store_config_64+0x116>
		kappa("\r\nCONFIG STORED!");
 8002180:	480e      	ldr	r0, [pc, #56]	@ (80021bc <store_config_64+0x14c>)
 8002182:	f7ff f9c3 	bl	800150c <kappa>

	HAL_FLASH_Lock();
 8002186:	f002 f8cd 	bl	8004324 <HAL_FLASH_Lock>

	kappa("\r\nStore_config_64 finished!");
 800218a:	480d      	ldr	r0, [pc, #52]	@ (80021c0 <store_config_64+0x150>)
 800218c:	f7ff f9be 	bl	800150c <kappa>
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	0801bc38 	.word	0x0801bc38
 800219c:	0801bc54 	.word	0x0801bc54
 80021a0:	40022000 	.word	0x40022000
 80021a4:	20000b14 	.word	0x20000b14
 80021a8:	20000b10 	.word	0x20000b10
 80021ac:	0801bc68 	.word	0x0801bc68
 80021b0:	0801bc84 	.word	0x0801bc84
 80021b4:	0807e000 	.word	0x0807e000
 80021b8:	0801bc98 	.word	0x0801bc98
 80021bc:	0801bcb8 	.word	0x0801bcb8
 80021c0:	0801bccc 	.word	0x0801bccc

080021c4 <load_config>:
	////kappa("\r\nstore_config Done!");
}

void load_config(float32_t *cal_loc, uint8_t *gps_loc, uint8_t *lpwa_loc,
			uint8_t *octave_loc, uint16_t *RecTime_loc, uint16_t	*LeqTime_loc)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
	Address =ADDR_FLASH_PAGE_252;
 80021d2:	4b22      	ldr	r3, [pc, #136]	@ (800225c <load_config+0x98>)
 80021d4:	4a22      	ldr	r2, [pc, #136]	@ (8002260 <load_config+0x9c>)
 80021d6:	601a      	str	r2, [r3, #0]
	uint64_t *p = (uint64_t *)ADDR_FLASH_PAGE_252;
 80021d8:	4b21      	ldr	r3, [pc, #132]	@ (8002260 <load_config+0x9c>)
 80021da:	61fb      	str	r3, [r7, #28]
	////kappa("\r\nload_config: %lx - %lx",(uint32_t)((*p)>>32), (uint32_t)((*p)&0xFFFFFFFF));
	uint32_t pt1 = (*p)>>32;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	000a      	movs	r2, r1
 80021ec:	2300      	movs	r3, #0
 80021ee:	4613      	mov	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
	uint32_t pt2 = (uint32_t)((*p)&0xFFFFFFFF);
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	4613      	mov	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
	*cal_loc = *(float32_t*)&pt1;
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	601a      	str	r2, [r3, #0]
	*gps_loc = (pt2>>31);
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	0fdb      	lsrs	r3, r3, #31
 800220a:	b2da      	uxtb	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	701a      	strb	r2, [r3, #0]
	*lpwa_loc = (pt2>>30)&0x01;
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	0f9b      	lsrs	r3, r3, #30
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	b2da      	uxtb	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	701a      	strb	r2, [r3, #0]
	*octave_loc = (pt2>>29)&0x01;
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	0f5b      	lsrs	r3, r3, #29
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	701a      	strb	r2, [r3, #0]
	*RecTime_loc = ((pt2>>16)&0x1FFF);
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	0c1b      	lsrs	r3, r3, #16
 8002234:	b29b      	uxth	r3, r3
 8002236:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800223a:	b29a      	uxth	r2, r3
 800223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223e:	801a      	strh	r2, [r3, #0]
	*LeqTime_loc = ((pt2>>4)&0xFFF);
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	b29b      	uxth	r3, r3
 8002246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224a:	b29a      	uxth	r2, r3
 800224c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224e:	801a      	strh	r2, [r3, #0]
	////kappa("\r\nload_config Done!");
}
 8002250:	bf00      	nop
 8002252:	3724      	adds	r7, #36	@ 0x24
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	20000b0c 	.word	0x20000b0c
 8002260:	0807e000 	.word	0x0807e000

08002264 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	kappa("\r\nWakeup timer");
 800226c:	4806      	ldr	r0, [pc, #24]	@ (8002288 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 800226e:	f7ff f94d 	bl	800150c <kappa>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002272:	2028      	movs	r0, #40	@ 0x28
 8002274:	f001 fda7 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f006 fad7 	bl	800882c <HAL_RTCEx_DeactivateWakeUpTimer>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	0801bce8 	.word	0x0801bce8

0800228c <SystemClock_Config_Low>:

void SystemClock_Config_Low(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b096      	sub	sp, #88	@ 0x58
 8002290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	2244      	movs	r2, #68	@ 0x44
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f013 fd98 	bl	8015dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a0:	463b      	mov	r3, r7
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022b2:	f004 fcf7 	bl	8006ca4 <HAL_PWREx_ControlVoltageScaling>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <SystemClock_Config_Low+0x34>
  {
    Error_Handler();
 80022bc:	f000 ffce 	bl	800325c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022c0:	f004 fcd2 	bl	8006c68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022c4:	4b20      	ldr	r3, [pc, #128]	@ (8002348 <SystemClock_Config_Low+0xbc>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002348 <SystemClock_Config_Low+0xbc>)
 80022cc:	f023 0318 	bic.w	r3, r3, #24
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80022d4:	2305      	movs	r3, #5
 80022d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022de:	2301      	movs	r3, #1
 80022e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e2:	2302      	movs	r3, #2
 80022e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e6:	2303      	movs	r3, #3
 80022e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80022ea:	2302      	movs	r3, #2
 80022ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80022ee:	2308      	movs	r3, #8
 80022f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV19;
 80022f2:	2313      	movs	r3, #19
 80022f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80022f6:	2308      	movs	r3, #8
 80022f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80022fa:	2308      	movs	r3, #8
 80022fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4618      	mov	r0, r3
 8002304:	f004 fd60 	bl	8006dc8 <HAL_RCC_OscConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <SystemClock_Config_Low+0x86>
  {
    Error_Handler();
 800230e:	f000 ffa5 	bl	800325c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002312:	230f      	movs	r3, #15
 8002314:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002316:	2303      	movs	r3, #3
 8002318:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002326:	463b      	mov	r3, r7
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f005 f964 	bl	80075f8 <HAL_RCC_ClockConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <SystemClock_Config_Low+0xae>
  {
    Error_Handler();
 8002336:	f000 ff91 	bl	800325c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800233a:	f005 fb21 	bl	8007980 <HAL_RCC_EnableCSS>
}
 800233e:	bf00      	nop
 8002340:	3758      	adds	r7, #88	@ 0x58
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000

0800234c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	//kappa("\r\nSPI Tx: %x-%x-%x", hspi, &hspi1, &hspi2);
	if(hspi == &hspi2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a0b      	ldr	r2, [pc, #44]	@ (8002384 <HAL_SPI_TxCpltCallback+0x38>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d105      	bne.n	8002368 <HAL_SPI_TxCpltCallback+0x1c>
		osSemaphoreRelease(sem_SPI_DMAHandle);
 800235c:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_SPI_TxCpltCallback+0x3c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f00d fa1f 	bl	800f7a4 <osSemaphoreRelease>
	else if(hspi == &hspi1)
		osSemaphoreRelease(sem_mem_writeHandle);
	//kappa("\r\nSPI Tx!");
}
 8002366:	e008      	b.n	800237a <HAL_SPI_TxCpltCallback+0x2e>
	else if(hspi == &hspi1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a08      	ldr	r2, [pc, #32]	@ (800238c <HAL_SPI_TxCpltCallback+0x40>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d104      	bne.n	800237a <HAL_SPI_TxCpltCallback+0x2e>
		osSemaphoreRelease(sem_mem_writeHandle);
 8002370:	4b07      	ldr	r3, [pc, #28]	@ (8002390 <HAL_SPI_TxCpltCallback+0x44>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f00d fa15 	bl	800f7a4 <osSemaphoreRelease>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000850 	.word	0x20000850
 8002388:	20000ac0 	.word	0x20000ac0
 800238c:	200007ec 	.word	0x200007ec
 8002390:	20000ab4 	.word	0x20000ab4

08002394 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

	if(hspi == &hspi2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a0b      	ldr	r2, [pc, #44]	@ (80023cc <HAL_SPI_RxCpltCallback+0x38>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d105      	bne.n	80023b0 <HAL_SPI_RxCpltCallback+0x1c>
		osSemaphoreRelease(sem_SPI_DMAHandle);
 80023a4:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <HAL_SPI_RxCpltCallback+0x3c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f00d f9fb 	bl	800f7a4 <osSemaphoreRelease>
	else if(hspi == &hspi1)
		osSemaphoreRelease(sem_mem_readHandle);
	//kappa("\r\nSPI Rx!");
}
 80023ae:	e008      	b.n	80023c2 <HAL_SPI_RxCpltCallback+0x2e>
	else if(hspi == &hspi1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a08      	ldr	r2, [pc, #32]	@ (80023d4 <HAL_SPI_RxCpltCallback+0x40>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d104      	bne.n	80023c2 <HAL_SPI_RxCpltCallback+0x2e>
		osSemaphoreRelease(sem_mem_readHandle);
 80023b8:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <HAL_SPI_RxCpltCallback+0x44>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f00d f9f1 	bl	800f7a4 <osSemaphoreRelease>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000850 	.word	0x20000850
 80023d0:	20000ac0 	.word	0x20000ac0
 80023d4:	200007ec 	.word	0x200007ec
 80023d8:	20000ab8 	.word	0x20000ab8

080023dc <ADXL355_SPI_Read_DMA>:

uint32_t ADXL355_SPI_Read_DMA(uint8_t ui8address) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;
	uint8_t recieveData;
	uint8_t txData;

	txData = (ui8address << 1) | 1 ;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	b25b      	sxtb	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET); //ON
 80023f6:	2200      	movs	r2, #0
 80023f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023fc:	481a      	ldr	r0, [pc, #104]	@ (8002468 <ADXL355_SPI_Read_DMA+0x8c>)
 80023fe:	f002 faf3 	bl	80049e8 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit_DMA(&hspi2, &txData, 1);
 8002402:	f107 030d 	add.w	r3, r7, #13
 8002406:	2201      	movs	r2, #1
 8002408:	4619      	mov	r1, r3
 800240a:	4818      	ldr	r0, [pc, #96]	@ (800246c <ADXL355_SPI_Read_DMA+0x90>)
 800240c:	f007 f80e 	bl	800942c <HAL_SPI_Transmit_DMA>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
	osSemaphoreAcquire(sem_SPI_DMAHandle, osWaitForever);
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <ADXL355_SPI_Read_DMA+0x94>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800241c:	4618      	mov	r0, r3
 800241e:	f00d f96f 	bl	800f700 <osSemaphoreAcquire>

	status = HAL_SPI_Receive_DMA(&hspi2, &recieveData, 1);
 8002422:	f107 030e 	add.w	r3, r7, #14
 8002426:	2201      	movs	r2, #1
 8002428:	4619      	mov	r1, r3
 800242a:	4810      	ldr	r0, [pc, #64]	@ (800246c <ADXL355_SPI_Read_DMA+0x90>)
 800242c:	f007 f8ee 	bl	800960c <HAL_SPI_Receive_DMA>
 8002430:	4603      	mov	r3, r0
 8002432:	73fb      	strb	r3, [r7, #15]
	osSemaphoreAcquire(sem_SPI_DMAHandle, osWaitForever);
 8002434:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <ADXL355_SPI_Read_DMA+0x94>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800243c:	4618      	mov	r0, r3
 800243e:	f00d f95f 	bl	800f700 <osSemaphoreAcquire>

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET); //OFF
 8002442:	2201      	movs	r2, #1
 8002444:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002448:	4807      	ldr	r0, [pc, #28]	@ (8002468 <ADXL355_SPI_Read_DMA+0x8c>)
 800244a:	f002 facd 	bl	80049e8 <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <ADXL355_SPI_Read_DMA+0x7c>
		return recieveData;
 8002454:	7bbb      	ldrb	r3, [r7, #14]
 8002456:	e003      	b.n	8002460 <ADXL355_SPI_Read_DMA+0x84>
	else
		printf("\r\nError Reading: Invalid HAL_STATUS\r\n");
 8002458:	4806      	ldr	r0, [pc, #24]	@ (8002474 <ADXL355_SPI_Read_DMA+0x98>)
 800245a:	f013 fb81 	bl	8015b60 <puts>

	return 255;
 800245e:	23ff      	movs	r3, #255	@ 0xff
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	48000400 	.word	0x48000400
 800246c:	20000850 	.word	0x20000850
 8002470:	20000ac0 	.word	0x20000ac0
 8002474:	0801bcf8 	.word	0x0801bcf8

08002478 <ADXL355_SPI_Read>:

uint32_t ADXL355_SPI_Read(uint8_t ui8address) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;
	uint8_t recieveData;
	uint8_t txData;

	txData = (ui8address << 1) | 1 ;
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	b25b      	sxtb	r3, r3
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	b25b      	sxtb	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET); //ON
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002498:	4813      	ldr	r0, [pc, #76]	@ (80024e8 <ADXL355_SPI_Read+0x70>)
 800249a:	f002 faa5 	bl	80049e8 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit (&hspi2, &txData, 1, 100);
 800249e:	f107 010d 	add.w	r1, r7, #13
 80024a2:	2364      	movs	r3, #100	@ 0x64
 80024a4:	2201      	movs	r2, #1
 80024a6:	4811      	ldr	r0, [pc, #68]	@ (80024ec <ADXL355_SPI_Read+0x74>)
 80024a8:	f006 faf1 	bl	8008a8e <HAL_SPI_Transmit>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Receive (&hspi2, &recieveData, 1, 100);
 80024b0:	f107 010e 	add.w	r1, r7, #14
 80024b4:	2364      	movs	r3, #100	@ 0x64
 80024b6:	2201      	movs	r2, #1
 80024b8:	480c      	ldr	r0, [pc, #48]	@ (80024ec <ADXL355_SPI_Read+0x74>)
 80024ba:	f006 fc5d 	bl	8008d78 <HAL_SPI_Receive>
 80024be:	4603      	mov	r3, r0
 80024c0:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET); //OFF
 80024c2:	2201      	movs	r2, #1
 80024c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024c8:	4807      	ldr	r0, [pc, #28]	@ (80024e8 <ADXL355_SPI_Read+0x70>)
 80024ca:	f002 fa8d 	bl	80049e8 <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <ADXL355_SPI_Read+0x60>
		return recieveData;
 80024d4:	7bbb      	ldrb	r3, [r7, #14]
 80024d6:	e003      	b.n	80024e0 <ADXL355_SPI_Read+0x68>
	else
		kappa("\r\nError Reading: Invalid HAL_STATUS\r\n");
 80024d8:	4805      	ldr	r0, [pc, #20]	@ (80024f0 <ADXL355_SPI_Read+0x78>)
 80024da:	f7ff f817 	bl	800150c <kappa>

	return 255;
 80024de:	23ff      	movs	r3, #255	@ 0xff
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	48000400 	.word	0x48000400
 80024ec:	20000850 	.word	0x20000850
 80024f0:	0801bd20 	.word	0x0801bd20

080024f4 <ADXL355_SPI_Write>:
 * @param : enMode - regarding how many bytes of data you will write, i chose to not really use this and hardcoded a
 *                   1 for '1 byte' in every write I ever used
 *
 * This function is a callback for the accelerometer write
 */
void ADXL355_SPI_Write(uint8_t ui8address, uint8_t ui8Data, enWriteData enMode) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	460b      	mov	r3, r1
 8002500:	71bb      	strb	r3, [r7, #6]
 8002502:	4613      	mov	r3, r2
 8002504:	717b      	strb	r3, [r7, #5]

	HAL_StatusTypeDef status;
	uint8_t address;

	address = ((ui8address << 1) & 0xFE);
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET); //ON
 800250e:	2200      	movs	r2, #0
 8002510:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002514:	4811      	ldr	r0, [pc, #68]	@ (800255c <ADXL355_SPI_Write+0x68>)
 8002516:	f002 fa67 	bl	80049e8 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit (&hspi2, &address, 1, 100);
 800251a:	f107 010e 	add.w	r1, r7, #14
 800251e:	2364      	movs	r3, #100	@ 0x64
 8002520:	2201      	movs	r2, #1
 8002522:	480f      	ldr	r0, [pc, #60]	@ (8002560 <ADXL355_SPI_Write+0x6c>)
 8002524:	f006 fab3 	bl	8008a8e <HAL_SPI_Transmit>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit (&hspi2, &ui8Data, 1, 100);
 800252c:	1db9      	adds	r1, r7, #6
 800252e:	2364      	movs	r3, #100	@ 0x64
 8002530:	2201      	movs	r2, #1
 8002532:	480b      	ldr	r0, [pc, #44]	@ (8002560 <ADXL355_SPI_Write+0x6c>)
 8002534:	f006 faab 	bl	8008a8e <HAL_SPI_Transmit>
 8002538:	4603      	mov	r3, r0
 800253a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET); //OFF
 800253c:	2201      	movs	r2, #1
 800253e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002542:	4806      	ldr	r0, [pc, #24]	@ (800255c <ADXL355_SPI_Write+0x68>)
 8002544:	f002 fa50 	bl	80049e8 <HAL_GPIO_WritePin>

	if (status != HAL_OK)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <ADXL355_SPI_Write+0x60>
		printf("\r\nError writing: Invalid HAL STATUS\r\n");
 800254e:	4805      	ldr	r0, [pc, #20]	@ (8002564 <ADXL355_SPI_Write+0x70>)
 8002550:	f013 fb06 	bl	8015b60 <puts>
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	48000400 	.word	0x48000400
 8002560:	20000850 	.word	0x20000850
 8002564:	0801bd48 	.word	0x0801bd48

08002568 <ADXL355_SPI_READ_ACC>:

int32_t ADXL355_SPI_READ_ACC(uint8_t axis)	//Axis = 0x00 - x, 0x01 - y, 0x02 - z
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
	uint32_t acc_val_raw3 = 0, acc_val_raw2 = 0, acc_val_raw1 = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
	int32_t acc_val = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]

	switch(axis)
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d020      	beq.n	80025ca <ADXL355_SPI_READ_ACC+0x62>
 8002588:	2b02      	cmp	r3, #2
 800258a:	dc2b      	bgt.n	80025e4 <ADXL355_SPI_READ_ACC+0x7c>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <ADXL355_SPI_READ_ACC+0x2e>
 8002590:	2b01      	cmp	r3, #1
 8002592:	d00d      	beq.n	80025b0 <ADXL355_SPI_READ_ACC+0x48>
 8002594:	e026      	b.n	80025e4 <ADXL355_SPI_READ_ACC+0x7c>
	{
		case 0x00:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(XDATA3);
 8002596:	2008      	movs	r0, #8
 8002598:	f7ff ff20 	bl	80023dc <ADXL355_SPI_Read_DMA>
 800259c:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(XDATA2);
 800259e:	2009      	movs	r0, #9
 80025a0:	f7ff ff1c 	bl	80023dc <ADXL355_SPI_Read_DMA>
 80025a4:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(XDATA1);
 80025a6:	200a      	movs	r0, #10
 80025a8:	f7ff ff18 	bl	80023dc <ADXL355_SPI_Read_DMA>
 80025ac:	60f8      	str	r0, [r7, #12]
		break;
 80025ae:	e019      	b.n	80025e4 <ADXL355_SPI_READ_ACC+0x7c>

		case 0x01:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(YDATA3);
 80025b0:	200b      	movs	r0, #11
 80025b2:	f7ff ff13 	bl	80023dc <ADXL355_SPI_Read_DMA>
 80025b6:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(YDATA2);
 80025b8:	200c      	movs	r0, #12
 80025ba:	f7ff ff0f 	bl	80023dc <ADXL355_SPI_Read_DMA>
 80025be:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(YDATA1);
 80025c0:	200d      	movs	r0, #13
 80025c2:	f7ff ff0b 	bl	80023dc <ADXL355_SPI_Read_DMA>
 80025c6:	60f8      	str	r0, [r7, #12]
		break;
 80025c8:	e00c      	b.n	80025e4 <ADXL355_SPI_READ_ACC+0x7c>

		case 0x02:
			acc_val_raw3 = ADXL355_SPI_Read_DMA(ZDATA3);
 80025ca:	200e      	movs	r0, #14
 80025cc:	f7ff ff06 	bl	80023dc <ADXL355_SPI_Read_DMA>
 80025d0:	6178      	str	r0, [r7, #20]
			acc_val_raw2 = ADXL355_SPI_Read_DMA(ZDATA2);
 80025d2:	200f      	movs	r0, #15
 80025d4:	f7ff ff02 	bl	80023dc <ADXL355_SPI_Read_DMA>
 80025d8:	6138      	str	r0, [r7, #16]
			acc_val_raw1 = ADXL355_SPI_Read_DMA(ZDATA1);
 80025da:	2010      	movs	r0, #16
 80025dc:	f7ff fefe 	bl	80023dc <ADXL355_SPI_Read_DMA>
 80025e0:	60f8      	str	r0, [r7, #12]

			/*acc_val_raw3 = ADXL355_SPI_Read(ZDATA3);
			acc_val_raw2 = ADXL355_SPI_Read(ZDATA2);
			acc_val_raw1 = ADXL355_SPI_Read(ZDATA1);*/
		break;
 80025e2:	bf00      	nop
	}

	acc_val = ADXL355_Acceleration_Data_Conversion(
							((acc_val_raw3<<16) & 0x00FF0000) |
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	041b      	lsls	r3, r3, #16
 80025e8:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
									((acc_val_raw2<<8) & 0x0000FF00) |
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	b29b      	uxth	r3, r3
							((acc_val_raw3<<16) & 0x00FF0000) |
 80025f2:	431a      	orrs	r2, r3
											(acc_val_raw1 & 0x000000FF));
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	b2db      	uxtb	r3, r3
	acc_val = ADXL355_Acceleration_Data_Conversion(
 80025f8:	4313      	orrs	r3, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fd4e 	bl	800109c <ADXL355_Acceleration_Data_Conversion>
 8002600:	60b8      	str	r0, [r7, #8]
	return acc_val;
 8002602:	68bb      	ldr	r3, [r7, #8]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800261c:	d11d      	bne.n	800265a <HAL_GPIO_EXTI_Callback+0x4e>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800261e:	2028      	movs	r0, #40	@ 0x28
 8002620:	f001 fbdf 	bl	8003de2 <HAL_NVIC_DisableIRQ>
		data_ctr = 0;
 8002624:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <HAL_GPIO_EXTI_Callback+0x58>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

		SystemClock_Config_Low();
 800262a:	f7ff fe2f 	bl	800228c <SystemClock_Config_Low>
		MX_GPIO_Init();
 800262e:	f7ff fa23 	bl	8001a78 <MX_GPIO_Init>
		MX_DMA_Init();
 8002632:	f7ff f9b7 	bl	80019a4 <MX_DMA_Init>
		MX_RTC_Init();
 8002636:	f7ff f8cd 	bl	80017d4 <MX_RTC_Init>
		MX_USART1_UART_Init();
 800263a:	f7ff f983 	bl	8001944 <MX_USART1_UART_Init>
		MX_SPI1_Init();
 800263e:	f7ff f905 	bl	800184c <MX_SPI1_Init>
	    MX_SPI2_Init();
 8002642:	f7ff f941 	bl	80018c8 <MX_SPI2_Init>
	    MX_LPTIM1_Init();
 8002646:	f7ff f897 	bl	8001778 <MX_LPTIM1_Init>
		HAL_LPTIM_Counter_Start_IT(&hlptim1, 15999);
 800264a:	f643 617f 	movw	r1, #15999	@ 0x3e7f
 800264e:	4806      	ldr	r0, [pc, #24]	@ (8002668 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002650:	f002 fab6 	bl	8004bc0 <HAL_LPTIM_Counter_Start_IT>
		kappa("Iniciado\r\n");
 8002654:	4805      	ldr	r0, [pc, #20]	@ (800266c <HAL_GPIO_EXTI_Callback+0x60>)
 8002656:	f7fe ff59 	bl	800150c <kappa>
	}
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000f84 	.word	0x20000f84
 8002668:	20000790 	.word	0x20000790
 800266c:	0801bd70 	.word	0x0801bd70

08002670 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	//kappa("Timer\r\n");
	if(data_ctr < data_buff_len)
 8002678:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_LPTIM_AutoReloadMatchCallback+0x38>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002680:	d205      	bcs.n	800268e <HAL_LPTIM_AutoReloadMatchCallback+0x1e>
	{
		osSemaphoreRelease(sem_samplingHandle);
 8002682:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <HAL_LPTIM_AutoReloadMatchCallback+0x3c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f00d f88c 	bl	800f7a4 <osSemaphoreRelease>
	}else
	{
		HAL_LPTIM_Counter_Stop_IT(&hlptim1);
		osSemaphoreRelease(sem_processingHandle);
	}
}
 800268c:	e007      	b.n	800269e <HAL_LPTIM_AutoReloadMatchCallback+0x2e>
		HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 800268e:	4808      	ldr	r0, [pc, #32]	@ (80026b0 <HAL_LPTIM_AutoReloadMatchCallback+0x40>)
 8002690:	f002 fb14 	bl	8004cbc <HAL_LPTIM_Counter_Stop_IT>
		osSemaphoreRelease(sem_processingHandle);
 8002694:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <HAL_LPTIM_AutoReloadMatchCallback+0x44>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f00d f883 	bl	800f7a4 <osSemaphoreRelease>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000f84 	.word	0x20000f84
 80026ac:	20000ac8 	.word	0x20000ac8
 80026b0:	20000790 	.word	0x20000790
 80026b4:	20000ac4 	.word	0x20000ac4

080026b8 <postprocessing>:

void postprocessing()
{
 80026b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026bc:	ed2d 8b02 	vpush	{d8}
 80026c0:	b0ac      	sub	sp, #176	@ 0xb0
 80026c2:	af00      	add	r7, sp, #0

	arm_rfft_fast_instance_f32 S;	//for FFT
	arm_rfft_fast_instance_f32 K;	// for InverseFFT
	arm_rfft_fast_instance_f32 M;	// for third-octave FFT

	for(int ii=0;ii<data_buff_len;ii++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026ca:	e070      	b.n	80027ae <postprocessing+0xf6>
	{


		//input_buf[ii] = 1000*data_array[ii] / 26214.4;
		input_f32[ii]= 1000*((data_array[ii] / 26214.4)-9.722);
 80026cc:	4a90      	ldr	r2, [pc, #576]	@ (8002910 <postprocessing+0x258>)
 80026ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff2c 	bl	8000534 <__aeabi_i2d>
 80026dc:	a388      	add	r3, pc, #544	@ (adr r3, 8002900 <postprocessing+0x248>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f7fe f8bb 	bl	800085c <__aeabi_ddiv>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	a386      	add	r3, pc, #536	@ (adr r3, 8002908 <postprocessing+0x250>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	f7fd fdd0 	bl	8000298 <__aeabi_dsub>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	4b83      	ldr	r3, [pc, #524]	@ (8002914 <postprocessing+0x25c>)
 8002706:	f7fd ff7f 	bl	8000608 <__aeabi_dmul>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f7fe fa71 	bl	8000bf8 <__aeabi_d2f>
 8002716:	4602      	mov	r2, r0
 8002718:	497f      	ldr	r1, [pc, #508]	@ (8002918 <postprocessing+0x260>)
 800271a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	601a      	str	r2, [r3, #0]
		#ifdef debug
			acc_val_flt = 1000*((data_array[ii] / 26214.4)-9.722);
 8002724:	4a7a      	ldr	r2, [pc, #488]	@ (8002910 <postprocessing+0x258>)
 8002726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd ff00 	bl	8000534 <__aeabi_i2d>
 8002734:	a372      	add	r3, pc, #456	@ (adr r3, 8002900 <postprocessing+0x248>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fe f88f 	bl	800085c <__aeabi_ddiv>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	a370      	add	r3, pc, #448	@ (adr r3, 8002908 <postprocessing+0x250>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fd fda4 	bl	8000298 <__aeabi_dsub>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4b6d      	ldr	r3, [pc, #436]	@ (8002914 <postprocessing+0x25c>)
 800275e:	f7fd ff53 	bl	8000608 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f7fe fa45 	bl	8000bf8 <__aeabi_d2f>
 800276e:	4603      	mov	r3, r0
 8002770:	64fb      	str	r3, [r7, #76]	@ 0x4c
			kappa("%d.%d\r\n", (int) acc_val_flt, (int) (fmodf(fabs(acc_val_flt), 1.0)*1));
 8002772:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002776:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 800277a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800277e:	eef0 7ae7 	vabs.f32	s15, s15
 8002782:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002786:	eeb0 0a67 	vmov.f32	s0, s15
 800278a:	f017 f9a1 	bl	8019ad0 <fmodf>
 800278e:	eef0 7a40 	vmov.f32	s15, s0
 8002792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002796:	ee17 2a90 	vmov	r2, s15
 800279a:	ee18 1a10 	vmov	r1, s16
 800279e:	485f      	ldr	r0, [pc, #380]	@ (800291c <postprocessing+0x264>)
 80027a0:	f7fe feb4 	bl	800150c <kappa>
	for(int ii=0;ii<data_buff_len;ii++)
 80027a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027a8:	3301      	adds	r3, #1
 80027aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027b6:	db89      	blt.n	80026cc <postprocessing+0x14>
		#endif
	}

	//// FFT ////
	arm_rfft_fast_init_f32(&S,2048); //Initialize the rFFT
 80027b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027c0:	4618      	mov	r0, r3
 80027c2:	f011 f9a3 	bl	8013b0c <arm_rfft_fast_init_f32>

	arm_rfft_fast_f32(&S, input_f32, output_f32, 0); //rFFT
 80027c6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80027ca:	2300      	movs	r3, #0
 80027cc:	4a54      	ldr	r2, [pc, #336]	@ (8002920 <postprocessing+0x268>)
 80027ce:	4952      	ldr	r1, [pc, #328]	@ (8002918 <postprocessing+0x260>)
 80027d0:	f011 fa80 	bl	8013cd4 <arm_rfft_fast_f32>

	////////////


	 ////// Sign from the input
		int sig=0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		while (sig<2048)
 80027da:	e03c      	b.n	8002856 <postprocessing+0x19e>
	   {

			if(output_f32[sig]>=0)
 80027dc:	4a50      	ldr	r2, [pc, #320]	@ (8002920 <postprocessing+0x268>)
 80027de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	db10      	blt.n	8002816 <postprocessing+0x15e>
			{
				signo[sig]=1;
 80027f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002924 <postprocessing+0x26c>)
 80027f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002802:	601a      	str	r2, [r3, #0]
				signo[sig+1]=1;
 8002804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002808:	3301      	adds	r3, #1
 800280a:	4a46      	ldr	r2, [pc, #280]	@ (8002924 <postprocessing+0x26c>)
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002814:	601a      	str	r2, [r3, #0]
			}
			if(output_f32[sig]<0)
 8002816:	4a42      	ldr	r2, [pc, #264]	@ (8002920 <postprocessing+0x268>)
 8002818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282c:	d50e      	bpl.n	800284c <postprocessing+0x194>
			{
				signo[sig]=-1;
 800282e:	4a3d      	ldr	r2, [pc, #244]	@ (8002924 <postprocessing+0x26c>)
 8002830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	4a3b      	ldr	r2, [pc, #236]	@ (8002928 <postprocessing+0x270>)
 800283a:	601a      	str	r2, [r3, #0]
				signo[sig+1]=-1;
 800283c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002840:	3301      	adds	r3, #1
 8002842:	4a38      	ldr	r2, [pc, #224]	@ (8002924 <postprocessing+0x26c>)
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	4a37      	ldr	r2, [pc, #220]	@ (8002928 <postprocessing+0x270>)
 800284a:	601a      	str	r2, [r3, #0]
			}

		 sig=sig+2;  	//incremento
 800284c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002850:	3302      	adds	r3, #2
 8002852:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		while (sig<2048)
 8002856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800285a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800285e:	dbbd      	blt.n	80027dc <postprocessing+0x124>
	  //////////////////
	   }

	 ////// Angle (between real and imaginary data)
		int cc=0;
 8002860:	2300      	movs	r3, #0
 8002862:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		int aa=0;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		while (cc<2048 && aa < 1024)
 800286c:	e031      	b.n	80028d2 <postprocessing+0x21a>
	   {
		rfft_angle[aa]=atan(output_f32[cc+1]/output_f32[cc]);
 800286e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002872:	3301      	adds	r3, #1
 8002874:	4a2a      	ldr	r2, [pc, #168]	@ (8002920 <postprocessing+0x268>)
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	ed93 7a00 	vldr	s14, [r3]
 800287e:	4a28      	ldr	r2, [pc, #160]	@ (8002920 <postprocessing+0x268>)
 8002880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002890:	ee16 0a90 	vmov	r0, s13
 8002894:	f7fd fe60 	bl	8000558 <__aeabi_f2d>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	ec43 2b10 	vmov	d0, r2, r3
 80028a0:	f016 fece 	bl	8019640 <atan>
 80028a4:	ec53 2b10 	vmov	r2, r3, d0
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7fe f9a4 	bl	8000bf8 <__aeabi_d2f>
 80028b0:	4602      	mov	r2, r0
 80028b2:	491e      	ldr	r1, [pc, #120]	@ (800292c <postprocessing+0x274>)
 80028b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	601a      	str	r2, [r3, #0]
		cc=cc+2;  	//incremento
 80028be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028c2:	3302      	adds	r3, #2
 80028c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		aa++;
 80028c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028cc:	3301      	adds	r3, #1
 80028ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		while (cc<2048 && aa < 1024)
 80028d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028da:	da04      	bge.n	80028e6 <postprocessing+0x22e>
 80028dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e4:	dbc3      	blt.n	800286e <postprocessing+0x1b6>
	  //////////////////
	   }

		//Modulo FFT (ocupo aqui el mismo array despeus de haber extraido el angulo y eel signo)
		arm_cmplx_mag_f32(output_f32, output_f32, 1024);//1024 /magnitud porq tiene parte imaginaria
 80028e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028ea:	490d      	ldr	r1, [pc, #52]	@ (8002920 <postprocessing+0x268>)
 80028ec:	480c      	ldr	r0, [pc, #48]	@ (8002920 <postprocessing+0x268>)
 80028ee:	f011 fdcf 	bl	8014490 <arm_cmplx_mag_f32>


		int q=0;  		 	//inicialización del contador
 80028f2:	2300      	movs	r3, #0
 80028f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		while (q<1024) 	//condicion  (para array de volyaje j=4096)///////////
 80028f8:	e14c      	b.n	8002b94 <postprocessing+0x4dc>
 80028fa:	bf00      	nop
 80028fc:	f3af 8000 	nop.w
 8002900:	9999999a 	.word	0x9999999a
 8002904:	40d99999 	.word	0x40d99999
 8002908:	fbe76c8b 	.word	0xfbe76c8b
 800290c:	402371a9 	.word	0x402371a9
 8002910:	20000f88 	.word	0x20000f88
 8002914:	408f4000 	.word	0x408f4000
 8002918:	20002f88 	.word	0x20002f88
 800291c:	0801bd7c 	.word	0x0801bd7c
 8002920:	20004f88 	.word	0x20004f88
 8002924:	20008f88 	.word	0x20008f88
 8002928:	bf800000 	.word	0xbf800000
 800292c:	20006f88 	.word	0x20006f88

		//Ponderacion: H= PasoAlto * PasoBajo * PondFrecPura
		//Ponderacion: H= Hh * Hl * Ht

		//FRECUENCIA para ponderacion
		f[q]=q*0.125; //0.125 // 1024/125 = 8 //calculo de la frecuencia de cada muestra
 8002930:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002934:	f7fd fdfe 	bl	8000534 <__aeabi_i2d>
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002940:	f7fd fe62 	bl	8000608 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f7fe f954 	bl	8000bf8 <__aeabi_d2f>
 8002950:	4602      	mov	r2, r0
 8002952:	499b      	ldr	r1, [pc, #620]	@ (8002bc0 <postprocessing+0x508>)
 8002954:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	601a      	str	r2, [r3, #0]

		///PASO ALTO///
			//f1=10^-0.1Hz
		f1= 0.79432823472428150206591828283639; //pow(10,-0.1)
 800295e:	4b99      	ldr	r3, [pc, #612]	@ (8002bc4 <postprocessing+0x50c>)
 8002960:	4a99      	ldr	r2, [pc, #612]	@ (8002bc8 <postprocessing+0x510>)
 8002962:	601a      	str	r2, [r3, #0]
		//Hh= sqrt((pow(f,4)/(pow(f,4)+pow(f1,4)));
		//Hh[q]= sqrt(pow(f[q],4)/(pow(f[q],4)+pow(f1,4)));

		///PASO BAJO///
		f2=100;
 8002964:	4b99      	ldr	r3, [pc, #612]	@ (8002bcc <postprocessing+0x514>)
 8002966:	4a9a      	ldr	r2, [pc, #616]	@ (8002bd0 <postprocessing+0x518>)
 8002968:	601a      	str	r2, [r3, #0]
		//Hl= sqrt((pow(f2,4)/(pow(f,4)+pow(f2,4)));
		//Hl[q]= sqrt(pow(f2,4)/(pow(f[q],4)+pow(f2,4)));

		///PONDERACION PURA///
		f3=5.6841051104248334203172772633041; //   formula: 1/(0.028*(2*M_PI));
 800296a:	4b9a      	ldr	r3, [pc, #616]	@ (8002bd4 <postprocessing+0x51c>)
 800296c:	4a9a      	ldr	r2, [pc, #616]	@ (8002bd8 <postprocessing+0x520>)
 800296e:	601a      	str	r2, [r3, #0]
		//Ht[q]= sqrt(pow(f3,2)/(pow(f[q],2)+pow(f3,2)));

		///FUNCION DE TRASNFERENCIA///
			///Transformar a dB, (20log(x))///
		//H[q]= (Hh[q])*(Hl[q])*(Ht[q]);     /// realizo en un solo paso el calculo
		H[q]= (sqrt(pow(f[q],4)/(pow(f[q],4)+pow(f1,4))))*(sqrt(pow(f2,4)/(pow(f[q],4)+pow(f2,4))))
 8002970:	4a93      	ldr	r2, [pc, #588]	@ (8002bc0 <postprocessing+0x508>)
 8002972:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fdeb 	bl	8000558 <__aeabi_f2d>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8002bb0 <postprocessing+0x4f8>
 800298a:	ec43 2b10 	vmov	d0, r2, r3
 800298e:	f016 fdb9 	bl	8019504 <pow>
 8002992:	ec55 4b10 	vmov	r4, r5, d0
 8002996:	4a8a      	ldr	r2, [pc, #552]	@ (8002bc0 <postprocessing+0x508>)
 8002998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fdd8 	bl	8000558 <__aeabi_f2d>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	ed9f 1b80 	vldr	d1, [pc, #512]	@ 8002bb0 <postprocessing+0x4f8>
 80029b0:	ec43 2b10 	vmov	d0, r2, r3
 80029b4:	f016 fda6 	bl	8019504 <pow>
 80029b8:	ec59 8b10 	vmov	r8, r9, d0
 80029bc:	4b81      	ldr	r3, [pc, #516]	@ (8002bc4 <postprocessing+0x50c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fdc9 	bl	8000558 <__aeabi_f2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 8002bb0 <postprocessing+0x4f8>
 80029ce:	ec43 2b10 	vmov	d0, r2, r3
 80029d2:	f016 fd97 	bl	8019504 <pow>
 80029d6:	ec53 2b10 	vmov	r2, r3, d0
 80029da:	4640      	mov	r0, r8
 80029dc:	4649      	mov	r1, r9
 80029de:	f7fd fc5d 	bl	800029c <__adddf3>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4620      	mov	r0, r4
 80029e8:	4629      	mov	r1, r5
 80029ea:	f7fd ff37 	bl	800085c <__aeabi_ddiv>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	ec43 2b17 	vmov	d7, r2, r3
 80029f6:	eeb0 0a47 	vmov.f32	s0, s14
 80029fa:	eef0 0a67 	vmov.f32	s1, s15
 80029fe:	f016 fdf1 	bl	80195e4 <sqrt>
 8002a02:	ec55 4b10 	vmov	r4, r5, d0
 8002a06:	4b71      	ldr	r3, [pc, #452]	@ (8002bcc <postprocessing+0x514>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fda4 	bl	8000558 <__aeabi_f2d>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	ed9f 1b66 	vldr	d1, [pc, #408]	@ 8002bb0 <postprocessing+0x4f8>
 8002a18:	ec43 2b10 	vmov	d0, r2, r3
 8002a1c:	f016 fd72 	bl	8019504 <pow>
 8002a20:	ec59 8b10 	vmov	r8, r9, d0
 8002a24:	4a66      	ldr	r2, [pc, #408]	@ (8002bc0 <postprocessing+0x508>)
 8002a26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd91 	bl	8000558 <__aeabi_f2d>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	ed9f 1b5d 	vldr	d1, [pc, #372]	@ 8002bb0 <postprocessing+0x4f8>
 8002a3e:	ec43 2b10 	vmov	d0, r2, r3
 8002a42:	f016 fd5f 	bl	8019504 <pow>
 8002a46:	ec5b ab10 	vmov	sl, fp, d0
 8002a4a:	4b60      	ldr	r3, [pc, #384]	@ (8002bcc <postprocessing+0x514>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd82 	bl	8000558 <__aeabi_f2d>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8002bb0 <postprocessing+0x4f8>
 8002a5c:	ec43 2b10 	vmov	d0, r2, r3
 8002a60:	f016 fd50 	bl	8019504 <pow>
 8002a64:	ec53 2b10 	vmov	r2, r3, d0
 8002a68:	4650      	mov	r0, sl
 8002a6a:	4659      	mov	r1, fp
 8002a6c:	f7fd fc16 	bl	800029c <__adddf3>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4640      	mov	r0, r8
 8002a76:	4649      	mov	r1, r9
 8002a78:	f7fd fef0 	bl	800085c <__aeabi_ddiv>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	ec43 2b17 	vmov	d7, r2, r3
 8002a84:	eeb0 0a47 	vmov.f32	s0, s14
 8002a88:	eef0 0a67 	vmov.f32	s1, s15
 8002a8c:	f016 fdaa 	bl	80195e4 <sqrt>
 8002a90:	ec53 2b10 	vmov	r2, r3, d0
 8002a94:	4620      	mov	r0, r4
 8002a96:	4629      	mov	r1, r5
 8002a98:	f7fd fdb6 	bl	8000608 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	461d      	mov	r5, r3
			   *(sqrt(pow(f3,2)/(pow(f[q],2)+pow(f3,2))));
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd4 <postprocessing+0x51c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd55 	bl	8000558 <__aeabi_f2d>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	ed9f 1b41 	vldr	d1, [pc, #260]	@ 8002bb8 <postprocessing+0x500>
 8002ab6:	ec43 2b10 	vmov	d0, r2, r3
 8002aba:	f016 fd23 	bl	8019504 <pow>
 8002abe:	ec59 8b10 	vmov	r8, r9, d0
 8002ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8002bc0 <postprocessing+0x508>)
 8002ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fd fd42 	bl	8000558 <__aeabi_f2d>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	ed9f 1b37 	vldr	d1, [pc, #220]	@ 8002bb8 <postprocessing+0x500>
 8002adc:	ec43 2b10 	vmov	d0, r2, r3
 8002ae0:	f016 fd10 	bl	8019504 <pow>
 8002ae4:	ec5b ab10 	vmov	sl, fp, d0
 8002ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd4 <postprocessing+0x51c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd33 	bl	8000558 <__aeabi_f2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8002bb8 <postprocessing+0x500>
 8002afa:	ec43 2b10 	vmov	d0, r2, r3
 8002afe:	f016 fd01 	bl	8019504 <pow>
 8002b02:	ec53 2b10 	vmov	r2, r3, d0
 8002b06:	4650      	mov	r0, sl
 8002b08:	4659      	mov	r1, fp
 8002b0a:	f7fd fbc7 	bl	800029c <__adddf3>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4640      	mov	r0, r8
 8002b14:	4649      	mov	r1, r9
 8002b16:	f7fd fea1 	bl	800085c <__aeabi_ddiv>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	ec43 2b17 	vmov	d7, r2, r3
 8002b22:	eeb0 0a47 	vmov.f32	s0, s14
 8002b26:	eef0 0a67 	vmov.f32	s1, s15
 8002b2a:	f016 fd5b 	bl	80195e4 <sqrt>
 8002b2e:	ec53 2b10 	vmov	r2, r3, d0
 8002b32:	4620      	mov	r0, r4
 8002b34:	4629      	mov	r1, r5
 8002b36:	f7fd fd67 	bl	8000608 <__aeabi_dmul>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7fe f859 	bl	8000bf8 <__aeabi_d2f>
 8002b46:	4602      	mov	r2, r0
		H[q]= (sqrt(pow(f[q],4)/(pow(f[q],4)+pow(f1,4))))*(sqrt(pow(f2,4)/(pow(f[q],4)+pow(f2,4))))
 8002b48:	4924      	ldr	r1, [pc, #144]	@ (8002bdc <postprocessing+0x524>)
 8002b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	601a      	str	r2, [r3, #0]
		//Introducir ala salida compleja de FFT en ingreso de InverseFFT
		//y se multiplica por la ponderacio en frecuencia

		//inputIFFT_f32[q]=output_f32[q] * H[q];
		//inputIFFT_f32_mod[q]=output_rfft[q];
		output_f32[q]=(output_f32[q]*H[q])/1024;	//
 8002b54:	4a22      	ldr	r2, [pc, #136]	@ (8002be0 <postprocessing+0x528>)
 8002b56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	ed93 7a00 	vldr	s14, [r3]
 8002b62:	4a1e      	ldr	r2, [pc, #120]	@ (8002bdc <postprocessing+0x524>)
 8002b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b74:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002be4 <postprocessing+0x52c>
 8002b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b7c:	4a18      	ldr	r2, [pc, #96]	@ (8002be0 <postprocessing+0x528>)
 8002b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	edc3 7a00 	vstr	s15, [r3]
		//output_f32[q]=(output_f32[q]*H[q])/1024;	//

			q++;  			//incremento
 8002b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		while (q<1024) 	//condicion  (para array de volyaje j=4096)///////////
 8002b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9c:	f6ff aec8 	blt.w	8002930 <postprocessing+0x278>
	//////////////////
	//	   }

	////// Calculation of real e imaginary part  (base on module & angle)

			int www=0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			int aaa=0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			while (www<2048 && aaa < 1024)
 8002bac:	e0a5      	b.n	8002cfa <postprocessing+0x642>
 8002bae:	bf00      	nop
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	40100000 	.word	0x40100000
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	40000000 	.word	0x40000000
 8002bc0:	20014f8c 	.word	0x20014f8c
 8002bc4:	20016f8c 	.word	0x20016f8c
 8002bc8:	3f4b5918 	.word	0x3f4b5918
 8002bcc:	20016f90 	.word	0x20016f90
 8002bd0:	42c80000 	.word	0x42c80000
 8002bd4:	20016f94 	.word	0x20016f94
 8002bd8:	40b5e430 	.word	0x40b5e430
 8002bdc:	20012f8c 	.word	0x20012f8c
 8002be0:	20004f88 	.word	0x20004f88
 8002be4:	44800000 	.word	0x44800000
				 {
				#ifdef debug
					output_INT=output_f32[aaa];
 8002be8:	4aad      	ldr	r2, [pc, #692]	@ (8002ea0 <postprocessing+0x7e8>)
 8002bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	663b      	str	r3, [r7, #96]	@ 0x60
					kappa("%d.%d\r\n", (int) output_INT, (int) (fmodf(fabs(output_INT), 1.0)*1000));
 8002bf6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002bfa:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8002bfe:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002c02:	eef0 7ae7 	vabs.f32	s15, s15
 8002c06:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	f016 ff5f 	bl	8019ad0 <fmodf>
 8002c12:	eef0 7a40 	vmov.f32	s15, s0
 8002c16:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8002ea4 <postprocessing+0x7ec>
 8002c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c22:	ee17 2a90 	vmov	r2, s15
 8002c26:	ee18 1a10 	vmov	r1, s16
 8002c2a:	489f      	ldr	r0, [pc, #636]	@ (8002ea8 <postprocessing+0x7f0>)
 8002c2c:	f7fe fc6e 	bl	800150c <kappa>
				#endif
				inputIFFT_f32[www]=(cos(rfft_angle[aaa]))*(output_f32[aaa]);
 8002c30:	4a9e      	ldr	r2, [pc, #632]	@ (8002eac <postprocessing+0x7f4>)
 8002c32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd fc8b 	bl	8000558 <__aeabi_f2d>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	ec43 2b10 	vmov	d0, r2, r3
 8002c4a:	f016 fe91 	bl	8019970 <cos>
 8002c4e:	ec55 4b10 	vmov	r4, r5, d0
 8002c52:	4a93      	ldr	r2, [pc, #588]	@ (8002ea0 <postprocessing+0x7e8>)
 8002c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fc7a 	bl	8000558 <__aeabi_f2d>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	f7fd fccc 	bl	8000608 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	f7fd ffbe 	bl	8000bf8 <__aeabi_d2f>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	498c      	ldr	r1, [pc, #560]	@ (8002eb0 <postprocessing+0x7f8>)
 8002c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	601a      	str	r2, [r3, #0]
				//inputIFFT_f32[www]=(cos(rfft_angle[aaa]))*(inputIFFT_f32_mod[aaa]);
				inputIFFT_f32[www+1]=(sin(rfft_angle[aaa]))*(output_f32[aaa]);
 8002c8a:	4a88      	ldr	r2, [pc, #544]	@ (8002eac <postprocessing+0x7f4>)
 8002c8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fc5e 	bl	8000558 <__aeabi_f2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	ec43 2b10 	vmov	d0, r2, r3
 8002ca4:	f016 fec0 	bl	8019a28 <sin>
 8002ca8:	ec55 4b10 	vmov	r4, r5, d0
 8002cac:	4a7c      	ldr	r2, [pc, #496]	@ (8002ea0 <postprocessing+0x7e8>)
 8002cae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc4d 	bl	8000558 <__aeabi_f2d>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	f7fd fc9f 	bl	8000608 <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cd6:	1c5c      	adds	r4, r3, #1
 8002cd8:	f7fd ff8e 	bl	8000bf8 <__aeabi_d2f>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4974      	ldr	r1, [pc, #464]	@ (8002eb0 <postprocessing+0x7f8>)
 8002ce0:	00a3      	lsls	r3, r4, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	601a      	str	r2, [r3, #0]
				//inputIFFT_f32[www+1]=(sin(rfft_angle[aaa]))*(inputIFFT_f32_mod[aaa]);

				www=www+2;  	//increment
 8002ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cea:	3302      	adds	r3, #2
 8002cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				aaa++;
 8002cf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			while (www<2048 && aaa < 1024)
 8002cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d02:	da05      	bge.n	8002d10 <postprocessing+0x658>
 8002d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d0c:	f6ff af6c 	blt.w	8002be8 <postprocessing+0x530>
	//////////////////
		   }

	//// AÑADIR SIGNO
			int sig2=0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			while (sig2<2048)
 8002d16:	e01b      	b.n	8002d50 <postprocessing+0x698>
		   {
			input_f32[sig2]= inputIFFT_f32[sig2]*signo[sig2];//se ocupa array anterior
 8002d18:	4a65      	ldr	r2, [pc, #404]	@ (8002eb0 <postprocessing+0x7f8>)
 8002d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	ed93 7a00 	vldr	s14, [r3]
 8002d26:	4a63      	ldr	r2, [pc, #396]	@ (8002eb4 <postprocessing+0x7fc>)
 8002d28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d38:	4a5f      	ldr	r2, [pc, #380]	@ (8002eb8 <postprocessing+0x800>)
 8002d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	edc3 7a00 	vstr	s15, [r3]
			//output_signo[sig2]= inputIFFT_f32[sig2]*signo[sig2];

				sig2++;  	//incremento
 8002d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			while (sig2<2048)
 8002d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d58:	dbde      	blt.n	8002d18 <postprocessing+0x660>
		  //////////////////
		   }

	/////INVERSE FFT ///
	arm_rfft_fast_init_f32(&K,2048); ///Initialize the riFFT
 8002d5a:	f107 031c 	add.w	r3, r7, #28
 8002d5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d62:	4618      	mov	r0, r3
 8002d64:	f010 fed2 	bl	8013b0c <arm_rfft_fast_init_f32>
	arm_rfft_fast_f32(&K, input_f32, outputIFFT_f32, 1); //ingreso del output complejo de FFT en la funcion IFFT
 8002d68:	f107 001c 	add.w	r0, r7, #28
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	4a53      	ldr	r2, [pc, #332]	@ (8002ebc <postprocessing+0x804>)
 8002d70:	4951      	ldr	r1, [pc, #324]	@ (8002eb8 <postprocessing+0x800>)
 8002d72:	f010 ffaf 	bl	8013cd4 <arm_rfft_fast_f32>


	#ifdef debug
		for(int iiii=0;iiii<2048;iiii++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d7c:	e02e      	b.n	8002ddc <postprocessing+0x724>
		{
		output_Final=1000*outputIFFT_f32[iiii];
 8002d7e:	4a4f      	ldr	r2, [pc, #316]	@ (8002ebc <postprocessing+0x804>)
 8002d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	edd3 7a00 	vldr	s15, [r3]
 8002d8c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002ea4 <postprocessing+0x7ec>
 8002d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d94:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		kappa("%d.%d\r\n", (int) output_Final, (int) (fmodf(fabs(output_Final), 1.0)*1000));
 8002d98:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002d9c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8002da0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002da4:	eef0 7ae7 	vabs.f32	s15, s15
 8002da8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002dac:	eeb0 0a67 	vmov.f32	s0, s15
 8002db0:	f016 fe8e 	bl	8019ad0 <fmodf>
 8002db4:	eef0 7a40 	vmov.f32	s15, s0
 8002db8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002ea4 <postprocessing+0x7ec>
 8002dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dc4:	ee17 2a90 	vmov	r2, s15
 8002dc8:	ee18 1a10 	vmov	r1, s16
 8002dcc:	4836      	ldr	r0, [pc, #216]	@ (8002ea8 <postprocessing+0x7f0>)
 8002dce:	f7fe fb9d 	bl	800150c <kappa>
		for(int iiii=0;iiii<2048;iiii++)
 8002dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002de0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002de4:	dbcb      	blt.n	8002d7e <postprocessing+0x6c6>
//			   }

	//////////////// RMS ////////////////

	   // Calculate RMS values
		for (int i = 0; i < 2048; i++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dec:	e0af      	b.n	8002f4e <postprocessing+0x896>
		{						 // 256 es el numero de muestras en 1 segundo
								 // velocidad del RMS movil 0,125sec
			if (i <= (2048-32)) // 32 muestras (0,125sec)total menos intervalo de RMS
 8002dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002df2:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 8002df6:	dc47      	bgt.n	8002e88 <postprocessing+0x7d0>
			{
				float suma_cuadrada = 0.0;
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				for (int j = i; j < i+32; j++) // 32 samples = 0,125sec
 8002e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e08:	e01a      	b.n	8002e40 <postprocessing+0x788>
				{
					suma_cuadrada += outputIFFT_f32[j] * outputIFFT_f32[j];
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002ebc <postprocessing+0x804>)
 8002e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	ed93 7a00 	vldr	s14, [r3]
 8002e18:	4a28      	ldr	r2, [pc, #160]	@ (8002ebc <postprocessing+0x804>)
 8002e1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2a:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e32:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
				for (int j = i; j < i+32; j++) // 32 samples = 0,125sec
 8002e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e44:	331f      	adds	r3, #31
 8002e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	dddd      	ble.n	8002e0a <postprocessing+0x752>
					}
					RunRMS[i] = sqrt(suma_cuadrada / 32); // 32 samples = 0,125sec
 8002e4e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002e52:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002ec0 <postprocessing+0x808>
 8002e56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e5a:	ee16 0a90 	vmov	r0, s13
 8002e5e:	f7fd fb7b 	bl	8000558 <__aeabi_f2d>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	ec43 2b10 	vmov	d0, r2, r3
 8002e6a:	f016 fbbb 	bl	80195e4 <sqrt>
 8002e6e:	ec53 2b10 	vmov	r2, r3, d0
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7fd febf 	bl	8000bf8 <__aeabi_d2f>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4911      	ldr	r1, [pc, #68]	@ (8002ec4 <postprocessing+0x80c>)
 8002e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	601a      	str	r2, [r3, #0]
					//RunRunRMS[i] = sqrt(suma_cuadrada / 32);
						}
						if (i > (2048-32)) 	// 32 samples = 0,125sec
 8002e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e8c:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 8002e90:	dd58      	ble.n	8002f44 <postprocessing+0x88c>
						{
							float suma_cuadrada = 0.0;
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
							for (int j = i; j < 2048; j++)
 8002e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e9e:	e02a      	b.n	8002ef6 <postprocessing+0x83e>
 8002ea0:	20004f88 	.word	0x20004f88
 8002ea4:	447a0000 	.word	0x447a0000
 8002ea8:	0801bd7c 	.word	0x0801bd7c
 8002eac:	20006f88 	.word	0x20006f88
 8002eb0:	2000af88 	.word	0x2000af88
 8002eb4:	20008f88 	.word	0x20008f88
 8002eb8:	20002f88 	.word	0x20002f88
 8002ebc:	2000cf88 	.word	0x2000cf88
 8002ec0:	42000000 	.word	0x42000000
 8002ec4:	20016f98 	.word	0x20016f98
					 {
					suma_cuadrada += outputIFFT_f32[j] * outputIFFT_f32[j];
 8002ec8:	4a85      	ldr	r2, [pc, #532]	@ (80030e0 <postprocessing+0xa28>)
 8002eca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	ed93 7a00 	vldr	s14, [r3]
 8002ed4:	4a82      	ldr	r2, [pc, #520]	@ (80030e0 <postprocessing+0xa28>)
 8002ed6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee4:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
							for (int j = i; j < 2048; j++)
 8002ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002efc:	dbe4      	blt.n	8002ec8 <postprocessing+0x810>
				}
				 RunRMS[i] = sqrt(suma_cuadrada / (2048 - i));
 8002efe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f02:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f0e:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002f12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f16:	ee16 0a90 	vmov	r0, s13
 8002f1a:	f7fd fb1d 	bl	8000558 <__aeabi_f2d>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	ec43 2b10 	vmov	d0, r2, r3
 8002f26:	f016 fb5d 	bl	80195e4 <sqrt>
 8002f2a:	ec53 2b10 	vmov	r2, r3, d0
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	f7fd fe61 	bl	8000bf8 <__aeabi_d2f>
 8002f36:	4602      	mov	r2, r0
 8002f38:	496a      	ldr	r1, [pc, #424]	@ (80030e4 <postprocessing+0xa2c>)
 8002f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 2048; i++)
 8002f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f56:	f6ff af4a 	blt.w	8002dee <postprocessing+0x736>
			 }
		}

		//// FFT para Tercios de octava////

		arm_rfft_fast_init_f32(&M,2048); //Initialize the rFFT
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f60:	4618      	mov	r0, r3
 8002f62:	f010 fdd3 	bl	8013b0c <arm_rfft_fast_init_f32>

		arm_rfft_fast_f32(&M, RunRMS, output_Run, 0); //rFFT
 8002f66:	1d38      	adds	r0, r7, #4
 8002f68:	2300      	movs	r3, #0
 8002f6a:	4a5f      	ldr	r2, [pc, #380]	@ (80030e8 <postprocessing+0xa30>)
 8002f6c:	495d      	ldr	r1, [pc, #372]	@ (80030e4 <postprocessing+0xa2c>)
 8002f6e:	f010 feb1 	bl	8013cd4 <arm_rfft_fast_f32>
		arm_cmplx_mag_f32(output_Run, output_Run_mag, 1024);//1024 /magnitud
 8002f72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f76:	495d      	ldr	r1, [pc, #372]	@ (80030ec <postprocessing+0xa34>)
 8002f78:	485b      	ldr	r0, [pc, #364]	@ (80030e8 <postprocessing+0xa30>)
 8002f7a:	f011 fa89 	bl	8014490 <arm_cmplx_mag_f32>

		//////////////// OCTAVE ////////////////
		for (int i = 0; i < 24; i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f82:	e047      	b.n	8003014 <postprocessing+0x95c>
		{
			// índice inicial y la cantidad de elementos para sumar
			int indice_inicial = NPosition[i];
 8002f84:	4a5a      	ldr	r2, [pc, #360]	@ (80030f0 <postprocessing+0xa38>)
 8002f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f94:	ee17 3a90 	vmov	r3, s15
 8002f98:	65bb      	str	r3, [r7, #88]	@ 0x58
			int elementos_a_sumar = Nband[i];
 8002f9a:	4a56      	ldr	r2, [pc, #344]	@ (80030f4 <postprocessing+0xa3c>)
 8002f9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002faa:	ee17 3a90 	vmov	r3, s15
 8002fae:	657b      	str	r3, [r7, #84]	@ 0x54

			// suma de los elementos
			float suma_amp = 0;
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	673b      	str	r3, [r7, #112]	@ 0x70
			for (int j = 0; j < elementos_a_sumar; j++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fba:	e010      	b.n	8002fde <postprocessing+0x926>
			{
				suma_amp += output_Run_mag[indice_inicial + j];
 8002fbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc0:	4413      	add	r3, r2
 8002fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80030ec <postprocessing+0xa34>)
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	edd3 7a00 	vldr	s15, [r3]
 8002fcc:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd4:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
			for (int j = 0; j < elementos_a_sumar; j++)
 8002fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fda:	3301      	adds	r3, #1
 8002fdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	dbea      	blt.n	8002fbc <postprocessing+0x904>
			}

		// Almacenar la suma (Altura x Base)(Amplitude x Bandwidth)(amplitud del bin de frecuwncia)
		Octave[i] = suma_amp*Nband[i]*0.125; //sumAmplitud*NumeroBandas*AnchoFreq
 8002fe6:	4a43      	ldr	r2, [pc, #268]	@ (80030f4 <postprocessing+0xa3c>)
 8002fe8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	ed93 7a00 	vldr	s14, [r3]
 8002ff2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffa:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003002:	4a3d      	ldr	r2, [pc, #244]	@ (80030f8 <postprocessing+0xa40>)
 8003004:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 24; i++)
 800300e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003010:	3301      	adds	r3, #1
 8003012:	677b      	str	r3, [r7, #116]	@ 0x74
 8003014:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003016:	2b17      	cmp	r3, #23
 8003018:	ddb4      	ble.n	8002f84 <postprocessing+0x8cc>
		}


		//Extraccion y envio de MTVV
		for(int iiii=0;iiii<1;iiii++) // solo 1 dato
 800301a:	2300      	movs	r3, #0
 800301c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800301e:	e028      	b.n	8003072 <postprocessing+0x9ba>
		{
			//Max value of spectrum after Running RMS
			arm_max_f32(output_Run_mag, 2048, max_mtvv, output_Run_mag);
 8003020:	4b32      	ldr	r3, [pc, #200]	@ (80030ec <postprocessing+0xa34>)
 8003022:	4a36      	ldr	r2, [pc, #216]	@ (80030fc <postprocessing+0xa44>)
 8003024:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003028:	4830      	ldr	r0, [pc, #192]	@ (80030ec <postprocessing+0xa34>)
 800302a:	f010 fc3b 	bl	80138a4 <arm_max_f32>
			#ifdef debug
				Octavas_Final=max_mtvv[iiii];	//ocupo el mismo array que ocupare en las octavas mas adelante
 800302e:	4a33      	ldr	r2, [pc, #204]	@ (80030fc <postprocessing+0xa44>)
 8003030:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	65fb      	str	r3, [r7, #92]	@ 0x5c
				kappa("%d.%d\r MTVV\n", (int) Octavas_Final, (int) (fmodf(fabs(Octavas_Final), 1.0)*1));
 800303a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800303e:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8003042:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003046:	eef0 7ae7 	vabs.f32	s15, s15
 800304a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800304e:	eeb0 0a67 	vmov.f32	s0, s15
 8003052:	f016 fd3d 	bl	8019ad0 <fmodf>
 8003056:	eef0 7a40 	vmov.f32	s15, s0
 800305a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800305e:	ee17 2a90 	vmov	r2, s15
 8003062:	ee18 1a10 	vmov	r1, s16
 8003066:	4826      	ldr	r0, [pc, #152]	@ (8003100 <postprocessing+0xa48>)
 8003068:	f7fe fa50 	bl	800150c <kappa>
		for(int iiii=0;iiii<1;iiii++) // solo 1 dato
 800306c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800306e:	3301      	adds	r3, #1
 8003070:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003074:	2b00      	cmp	r3, #0
 8003076:	ddd3      	ble.n	8003020 <postprocessing+0x968>
			#endif
			//kappa("%d.%d\r\n", (int) output_INT, (int) (fmodf(fabs(output_INT), 1.0)*1000));
		}
		#ifdef debug
			//Envio de las 20 Octavas
			for(int iiii=0;iiii<20;iiii++) //para transmitir las 20 bandas (para llegar a 80Hz que interesa)
 8003078:	2300      	movs	r3, #0
 800307a:	667b      	str	r3, [r7, #100]	@ 0x64
 800307c:	e025      	b.n	80030ca <postprocessing+0xa12>
			{
				Octavas_Final=Octave[iiii];
 800307e:	4a1e      	ldr	r2, [pc, #120]	@ (80030f8 <postprocessing+0xa40>)
 8003080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	65fb      	str	r3, [r7, #92]	@ 0x5c
				kappa("%d.%d\r\n", (int) Octavas_Final, (int) (fmodf(fabs(Octavas_Final), 1.0)*1000));
 800308a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800308e:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8003092:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003096:	eef0 7ae7 	vabs.f32	s15, s15
 800309a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800309e:	eeb0 0a67 	vmov.f32	s0, s15
 80030a2:	f016 fd15 	bl	8019ad0 <fmodf>
 80030a6:	eef0 7a40 	vmov.f32	s15, s0
 80030aa:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003104 <postprocessing+0xa4c>
 80030ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030b6:	ee17 2a90 	vmov	r2, s15
 80030ba:	ee18 1a10 	vmov	r1, s16
 80030be:	4812      	ldr	r0, [pc, #72]	@ (8003108 <postprocessing+0xa50>)
 80030c0:	f7fe fa24 	bl	800150c <kappa>
			for(int iiii=0;iiii<20;iiii++) //para transmitir las 20 bandas (para llegar a 80Hz que interesa)
 80030c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030c6:	3301      	adds	r3, #1
 80030c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80030ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030cc:	2b13      	cmp	r3, #19
 80030ce:	ddd6      	ble.n	800307e <postprocessing+0x9c6>
				//kappa("%d.%d\r\n", (int) output_INT, (int) (fmodf(fabs(output_INT), 1.0)*1000));
			}
		#endif
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	37b0      	adds	r7, #176	@ 0xb0
 80030d6:	46bd      	mov	sp, r7
 80030d8:	ecbd 8b02 	vpop	{d8}
 80030dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e0:	2000cf88 	.word	0x2000cf88
 80030e4:	20016f98 	.word	0x20016f98
 80030e8:	2000ef88 	.word	0x2000ef88
 80030ec:	20010f88 	.word	0x20010f88
 80030f0:	0801bfc8 	.word	0x0801bfc8
 80030f4:	0801bf64 	.word	0x0801bf64
 80030f8:	20018f98 	.word	0x20018f98
 80030fc:	20012f88 	.word	0x20012f88
 8003100:	0801bd84 	.word	0x0801bd84
 8003104:	447a0000 	.word	0x447a0000
 8003108:	0801bd7c 	.word	0x0801bd7c

0800310c <task_main>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_main */
void task_main(void *argument)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	kappa("\r\n****STARTING...!****");
 8003114:	4831      	ldr	r0, [pc, #196]	@ (80031dc <task_main+0xd0>)
 8003116:	f7fe f9f9 	bl	800150c <kappa>
	//kappa("\r\nEEPROM Length: %d", get_eeprom_data_len());
	/* Infinite loop */
	vTaskDelay(500);
 800311a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800311e:	f00d ff17 	bl	8010f50 <vTaskDelay>
	if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8003122:	4b2f      	ldr	r3, [pc, #188]	@ (80031e0 <task_main+0xd4>)
 8003124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b03      	cmp	r3, #3
 800312c:	d117      	bne.n	800315e <task_main+0x52>
	{
		usb_taskHandle = osThreadNew(task_usb, NULL, &usb_task_attributes);
 800312e:	4a2d      	ldr	r2, [pc, #180]	@ (80031e4 <task_main+0xd8>)
 8003130:	2100      	movs	r1, #0
 8003132:	482d      	ldr	r0, [pc, #180]	@ (80031e8 <task_main+0xdc>)
 8003134:	f00c f942 	bl	800f3bc <osThreadNew>
 8003138:	4603      	mov	r3, r0
 800313a:	4a2c      	ldr	r2, [pc, #176]	@ (80031ec <task_main+0xe0>)
 800313c:	6013      	str	r3, [r2, #0]
		USB_plugged = 1;
 800313e:	4b2c      	ldr	r3, [pc, #176]	@ (80031f0 <task_main+0xe4>)
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
		kappa("\r\nUSB MODE(%d, %d)",  hUsbDeviceFS.ep0_state, hUsbDeviceFS.dev_state);
 8003144:	4b26      	ldr	r3, [pc, #152]	@ (80031e0 <task_main+0xd4>)
 8003146:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800314a:	4a25      	ldr	r2, [pc, #148]	@ (80031e0 <task_main+0xd4>)
 800314c:	f892 229c 	ldrb.w	r2, [r2, #668]	@ 0x29c
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	4619      	mov	r1, r3
 8003154:	4827      	ldr	r0, [pc, #156]	@ (80031f4 <task_main+0xe8>)
 8003156:	f7fe f9d9 	bl	800150c <kappa>
		for (;;)
 800315a:	bf00      	nop
 800315c:	e7fd      	b.n	800315a <task_main+0x4e>
		{}
	}

	vTaskDelay(1000);
 800315e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003162:	f00d fef5 	bl	8010f50 <vTaskDelay>
	ADXL355_Init();
 8003166:	f7fd ff45 	bl	8000ff4 <ADXL355_Init>
	vTaskDelay(100);
 800316a:	2064      	movs	r0, #100	@ 0x64
 800316c:	f00d fef0 	bl	8010f50 <vTaskDelay>
	ADXL355_Start_Sensor();
 8003170:	f7fd ff78 	bl	8001064 <ADXL355_Start_Sensor>
	kappa("\r\nSYSTEM READY!\r\n");
 8003174:	4820      	ldr	r0, [pc, #128]	@ (80031f8 <task_main+0xec>)
 8003176:	f7fe f9c9 	bl	800150c <kappa>

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800317a:	2001      	movs	r0, #1
 800317c:	f003 fdf8 	bl	8006d70 <HAL_PWREx_EnterSTOP2Mode>

	for (;;)
	{
		osSemaphoreAcquire(sem_processingHandle, osWaitForever);
 8003180:	4b1e      	ldr	r3, [pc, #120]	@ (80031fc <task_main+0xf0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003188:	4618      	mov	r0, r3
 800318a:	f00c fab9 	bl	800f700 <osSemaphoreAcquire>

		SystemClock_Config();
 800318e:	f7fe fa9d 	bl	80016cc <SystemClock_Config>
		MX_GPIO_Init();
 8003192:	f7fe fc71 	bl	8001a78 <MX_GPIO_Init>
		MX_DMA_Init();
 8003196:	f7fe fc05 	bl	80019a4 <MX_DMA_Init>
		MX_RTC_Init();
 800319a:	f7fe fb1b 	bl	80017d4 <MX_RTC_Init>
		MX_USART1_UART_Init();
 800319e:	f7fe fbd1 	bl	8001944 <MX_USART1_UART_Init>
		MX_SPI1_Init();
 80031a2:	f7fe fb53 	bl	800184c <MX_SPI1_Init>
		MX_SPI2_Init();
 80031a6:	f7fe fb8f 	bl	80018c8 <MX_SPI2_Init>
		MX_LPTIM1_Init();
 80031aa:	f7fe fae5 	bl	8001778 <MX_LPTIM1_Init>

		kappa("\r\nProcessing data!");
 80031ae:	4814      	ldr	r0, [pc, #80]	@ (8003200 <task_main+0xf4>)
 80031b0:	f7fe f9ac 	bl	800150c <kappa>

		postprocessing();
 80031b4:	f7ff fa80 	bl	80026b8 <postprocessing>

		kappa("\r\nDone!\r\n");
 80031b8:	4812      	ldr	r0, [pc, #72]	@ (8003204 <task_main+0xf8>)
 80031ba:	f7fe f9a7 	bl	800150c <kappa>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 80031be:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <task_main+0xfc>)
 80031c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031c4:	615a      	str	r2, [r3, #20]
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031c6:	2028      	movs	r0, #40	@ 0x28
 80031c8:	f000 fdfd 	bl	8003dc6 <HAL_NVIC_EnableIRQ>

		HAL_SuspendTick();
 80031cc:	f000 fcd0 	bl	8003b70 <HAL_SuspendTick>
		//HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
		HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80031d0:	2001      	movs	r0, #1
 80031d2:	f003 fdcd 	bl	8006d70 <HAL_PWREx_EnterSTOP2Mode>
		osSemaphoreAcquire(sem_processingHandle, osWaitForever);
 80031d6:	bf00      	nop
 80031d8:	e7d2      	b.n	8003180 <task_main+0x74>
 80031da:	bf00      	nop
 80031dc:	0801bd94 	.word	0x0801bd94
 80031e0:	2002308c 	.word	0x2002308c
 80031e4:	0801bf40 	.word	0x0801bf40
 80031e8:	08001cf1 	.word	0x08001cf1
 80031ec:	20000acc 	.word	0x20000acc
 80031f0:	20000b88 	.word	0x20000b88
 80031f4:	0801bdac 	.word	0x0801bdac
 80031f8:	0801bdc0 	.word	0x0801bdc0
 80031fc:	20000ac4 	.word	0x20000ac4
 8003200:	0801bdd4 	.word	0x0801bdd4
 8003204:	0801bde8 	.word	0x0801bde8
 8003208:	40010400 	.word	0x40010400

0800320c <sampling_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sampling_task */
void sampling_task(void *argument)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sampling_task */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(sem_samplingHandle, osWaitForever);
 8003214:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <sampling_task+0x40>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800321c:	4618      	mov	r0, r3
 800321e:	f00c fa6f 	bl	800f700 <osSemaphoreAcquire>
	  HAL_GPIO_TogglePin(STATUS_P_GPIO_Port, STATUS_P_Pin);
 8003222:	2140      	movs	r1, #64	@ 0x40
 8003224:	480a      	ldr	r0, [pc, #40]	@ (8003250 <sampling_task+0x44>)
 8003226:	f001 fbf7 	bl	8004a18 <HAL_GPIO_TogglePin>
	  data_array[data_ctr] = ADXL355_SPI_READ_ACC(2);
 800322a:	4b0a      	ldr	r3, [pc, #40]	@ (8003254 <sampling_task+0x48>)
 800322c:	681c      	ldr	r4, [r3, #0]
 800322e:	2002      	movs	r0, #2
 8003230:	f7ff f99a 	bl	8002568 <ADXL355_SPI_READ_ACC>
 8003234:	4603      	mov	r3, r0
 8003236:	4a08      	ldr	r2, [pc, #32]	@ (8003258 <sampling_task+0x4c>)
 8003238:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  data_ctr++;
 800323c:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <sampling_task+0x48>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <sampling_task+0x48>)
 8003244:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(sem_samplingHandle, osWaitForever);
 8003246:	bf00      	nop
 8003248:	e7e4      	b.n	8003214 <sampling_task+0x8>
 800324a:	bf00      	nop
 800324c:	20000ac8 	.word	0x20000ac8
 8003250:	48000800 	.word	0x48000800
 8003254:	20000f84 	.word	0x20000f84
 8003258:	20000f88 	.word	0x20000f88

0800325c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003260:	b672      	cpsid	i
}
 8003262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003264:	bf00      	nop
 8003266:	e7fd      	b.n	8003264 <Error_Handler+0x8>

08003268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <HAL_MspInit+0x4c>)
 8003270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003272:	4a10      	ldr	r2, [pc, #64]	@ (80032b4 <HAL_MspInit+0x4c>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6613      	str	r3, [r2, #96]	@ 0x60
 800327a:	4b0e      	ldr	r3, [pc, #56]	@ (80032b4 <HAL_MspInit+0x4c>)
 800327c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <HAL_MspInit+0x4c>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <HAL_MspInit+0x4c>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003290:	6593      	str	r3, [r2, #88]	@ 0x58
 8003292:	4b08      	ldr	r3, [pc, #32]	@ (80032b4 <HAL_MspInit+0x4c>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	210f      	movs	r1, #15
 80032a2:	f06f 0001 	mvn.w	r0, #1
 80032a6:	f000 fd72 	bl	8003d8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000

080032b8 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b09e      	sub	sp, #120	@ 0x78
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032c0:	f107 0310 	add.w	r3, r7, #16
 80032c4:	2268      	movs	r2, #104	@ 0x68
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f012 fd81 	bl	8015dd0 <memset>
  if(hlptim->Instance==LPTIM1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a15      	ldr	r2, [pc, #84]	@ (8003328 <HAL_LPTIM_MspInit+0x70>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d122      	bne.n	800331e <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80032d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80032de:	2300      	movs	r3, #0
 80032e0:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032e2:	f107 0310 	add.w	r3, r7, #16
 80032e6:	4618      	mov	r0, r3
 80032e8:	f004 fbd6 	bl	8007a98 <HAL_RCCEx_PeriphCLKConfig>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 80032f2:	f7ff ffb3 	bl	800325c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <HAL_LPTIM_MspInit+0x74>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	4a0c      	ldr	r2, [pc, #48]	@ (800332c <HAL_LPTIM_MspInit+0x74>)
 80032fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003300:	6593      	str	r3, [r2, #88]	@ 0x58
 8003302:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <HAL_LPTIM_MspInit+0x74>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003306:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2105      	movs	r1, #5
 8003312:	2041      	movs	r0, #65	@ 0x41
 8003314:	f000 fd3b 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003318:	2041      	movs	r0, #65	@ 0x41
 800331a:	f000 fd54 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800331e:	bf00      	nop
 8003320:	3778      	adds	r7, #120	@ 0x78
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40007c00 	.word	0x40007c00
 800332c:	40021000 	.word	0x40021000

08003330 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b09c      	sub	sp, #112	@ 0x70
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003338:	f107 0308 	add.w	r3, r7, #8
 800333c:	2268      	movs	r2, #104	@ 0x68
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f012 fd45 	bl	8015dd0 <memset>
  if(hrtc->Instance==RTC)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <HAL_RTC_MspInit+0x68>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d11f      	bne.n	8003390 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003350:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800335a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800335c:	f107 0308 	add.w	r3, r7, #8
 8003360:	4618      	mov	r0, r3
 8003362:	f004 fb99 	bl	8007a98 <HAL_RCCEx_PeriphCLKConfig>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800336c:	f7ff ff76 	bl	800325c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003370:	4b0a      	ldr	r3, [pc, #40]	@ (800339c <HAL_RTC_MspInit+0x6c>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003376:	4a09      	ldr	r2, [pc, #36]	@ (800339c <HAL_RTC_MspInit+0x6c>)
 8003378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8003380:	2200      	movs	r2, #0
 8003382:	2105      	movs	r1, #5
 8003384:	2003      	movs	r0, #3
 8003386:	f000 fd02 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800338a:	2003      	movs	r0, #3
 800338c:	f000 fd1b 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003390:	bf00      	nop
 8003392:	3770      	adds	r7, #112	@ 0x70
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40002800 	.word	0x40002800
 800339c:	40021000 	.word	0x40021000

080033a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08c      	sub	sp, #48	@ 0x30
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 031c 	add.w	r3, r7, #28
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a81      	ldr	r2, [pc, #516]	@ (80035c4 <HAL_SPI_MspInit+0x224>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d17b      	bne.n	80034ba <HAL_SPI_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033c2:	4b81      	ldr	r3, [pc, #516]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80033c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c6:	4a80      	ldr	r2, [pc, #512]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80033c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80033ce:	4b7e      	ldr	r3, [pc, #504]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80033d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033da:	4b7b      	ldr	r3, [pc, #492]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033de:	4a7a      	ldr	r2, [pc, #488]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033e6:	4b78      	ldr	r3, [pc, #480]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80033f2:	23e0      	movs	r3, #224	@ 0xe0
 80033f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003402:	2305      	movs	r3, #5
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	4619      	mov	r1, r3
 800340c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003410:	f001 f970 	bl	80046f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8003414:	4b6d      	ldr	r3, [pc, #436]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 8003416:	4a6e      	ldr	r2, [pc, #440]	@ (80035d0 <HAL_SPI_MspInit+0x230>)
 8003418:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800341a:	4b6c      	ldr	r3, [pc, #432]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 800341c:	2201      	movs	r2, #1
 800341e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003420:	4b6a      	ldr	r3, [pc, #424]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003426:	4b69      	ldr	r3, [pc, #420]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 8003428:	2200      	movs	r2, #0
 800342a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800342c:	4b67      	ldr	r3, [pc, #412]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 800342e:	2280      	movs	r2, #128	@ 0x80
 8003430:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003432:	4b66      	ldr	r3, [pc, #408]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003438:	4b64      	ldr	r3, [pc, #400]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800343e:	4b63      	ldr	r3, [pc, #396]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 8003440:	2200      	movs	r2, #0
 8003442:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003444:	4b61      	ldr	r3, [pc, #388]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 8003446:	2200      	movs	r2, #0
 8003448:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800344a:	4860      	ldr	r0, [pc, #384]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 800344c:	f000 fce4 	bl	8003e18 <HAL_DMA_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003456:	f7ff ff01 	bl	800325c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a5b      	ldr	r2, [pc, #364]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 800345e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003460:	4a5a      	ldr	r2, [pc, #360]	@ (80035cc <HAL_SPI_MspInit+0x22c>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003466:	4b5b      	ldr	r3, [pc, #364]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 8003468:	4a5b      	ldr	r2, [pc, #364]	@ (80035d8 <HAL_SPI_MspInit+0x238>)
 800346a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800346c:	4b59      	ldr	r3, [pc, #356]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 800346e:	2201      	movs	r2, #1
 8003470:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003472:	4b58      	ldr	r3, [pc, #352]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 8003474:	2210      	movs	r2, #16
 8003476:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003478:	4b56      	ldr	r3, [pc, #344]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 800347a:	2200      	movs	r2, #0
 800347c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800347e:	4b55      	ldr	r3, [pc, #340]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 8003480:	2280      	movs	r2, #128	@ 0x80
 8003482:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003484:	4b53      	ldr	r3, [pc, #332]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 8003486:	2200      	movs	r2, #0
 8003488:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800348a:	4b52      	ldr	r3, [pc, #328]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 800348c:	2200      	movs	r2, #0
 800348e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003490:	4b50      	ldr	r3, [pc, #320]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 8003492:	2200      	movs	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003496:	4b4f      	ldr	r3, [pc, #316]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 8003498:	2200      	movs	r2, #0
 800349a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800349c:	484d      	ldr	r0, [pc, #308]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 800349e:	f000 fcbb 	bl	8003e18 <HAL_DMA_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80034a8:	f7ff fed8 	bl	800325c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a49      	ldr	r2, [pc, #292]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 80034b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80034b2:	4a48      	ldr	r2, [pc, #288]	@ (80035d4 <HAL_SPI_MspInit+0x234>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034b8:	e07f      	b.n	80035ba <HAL_SPI_MspInit+0x21a>
  else if(hspi->Instance==SPI2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a47      	ldr	r2, [pc, #284]	@ (80035dc <HAL_SPI_MspInit+0x23c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d17a      	bne.n	80035ba <HAL_SPI_MspInit+0x21a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034c4:	4b40      	ldr	r3, [pc, #256]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c8:	4a3f      	ldr	r2, [pc, #252]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80034ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d0:	4b3d      	ldr	r3, [pc, #244]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034dc:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80034de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e0:	4a39      	ldr	r2, [pc, #228]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80034e2:	f043 0302 	orr.w	r3, r3, #2
 80034e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034e8:	4b37      	ldr	r3, [pc, #220]	@ (80035c8 <HAL_SPI_MspInit+0x228>)
 80034ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80034f4:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80034f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003506:	2305      	movs	r3, #5
 8003508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350a:	f107 031c 	add.w	r3, r7, #28
 800350e:	4619      	mov	r1, r3
 8003510:	4833      	ldr	r0, [pc, #204]	@ (80035e0 <HAL_SPI_MspInit+0x240>)
 8003512:	f001 f8ef 	bl	80046f4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8003516:	4b33      	ldr	r3, [pc, #204]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 8003518:	4a33      	ldr	r2, [pc, #204]	@ (80035e8 <HAL_SPI_MspInit+0x248>)
 800351a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 800351c:	4b31      	ldr	r3, [pc, #196]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 800351e:	2201      	movs	r2, #1
 8003520:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003522:	4b30      	ldr	r3, [pc, #192]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003528:	4b2e      	ldr	r3, [pc, #184]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800352e:	4b2d      	ldr	r3, [pc, #180]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 8003530:	2280      	movs	r2, #128	@ 0x80
 8003532:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003534:	4b2b      	ldr	r3, [pc, #172]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 8003536:	2200      	movs	r2, #0
 8003538:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800353a:	4b2a      	ldr	r3, [pc, #168]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 800353c:	2200      	movs	r2, #0
 800353e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003540:	4b28      	ldr	r3, [pc, #160]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 8003542:	2200      	movs	r2, #0
 8003544:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003546:	4b27      	ldr	r3, [pc, #156]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 8003548:	2200      	movs	r2, #0
 800354a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800354c:	4825      	ldr	r0, [pc, #148]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 800354e:	f000 fc63 	bl	8003e18 <HAL_DMA_Init>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_SPI_MspInit+0x1bc>
      Error_Handler();
 8003558:	f7ff fe80 	bl	800325c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a21      	ldr	r2, [pc, #132]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 8003560:	659a      	str	r2, [r3, #88]	@ 0x58
 8003562:	4a20      	ldr	r2, [pc, #128]	@ (80035e4 <HAL_SPI_MspInit+0x244>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8003568:	4b20      	ldr	r3, [pc, #128]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 800356a:	4a21      	ldr	r2, [pc, #132]	@ (80035f0 <HAL_SPI_MspInit+0x250>)
 800356c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 8003570:	2201      	movs	r2, #1
 8003572:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003574:	4b1d      	ldr	r3, [pc, #116]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 8003576:	2210      	movs	r2, #16
 8003578:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800357a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003580:	4b1a      	ldr	r3, [pc, #104]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 8003582:	2280      	movs	r2, #128	@ 0x80
 8003584:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003586:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 8003588:	2200      	movs	r2, #0
 800358a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800358c:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 800358e:	2200      	movs	r2, #0
 8003590:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003592:	4b16      	ldr	r3, [pc, #88]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 8003594:	2200      	movs	r2, #0
 8003596:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003598:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 800359a:	2200      	movs	r2, #0
 800359c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800359e:	4813      	ldr	r0, [pc, #76]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 80035a0:	f000 fc3a 	bl	8003e18 <HAL_DMA_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_SPI_MspInit+0x20e>
      Error_Handler();
 80035aa:	f7ff fe57 	bl	800325c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a0e      	ldr	r2, [pc, #56]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 80035b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80035b4:	4a0d      	ldr	r2, [pc, #52]	@ (80035ec <HAL_SPI_MspInit+0x24c>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80035ba:	bf00      	nop
 80035bc:	3730      	adds	r7, #48	@ 0x30
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40013000 	.word	0x40013000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	200008b4 	.word	0x200008b4
 80035d0:	4002001c 	.word	0x4002001c
 80035d4:	200008fc 	.word	0x200008fc
 80035d8:	40020030 	.word	0x40020030
 80035dc:	40003800 	.word	0x40003800
 80035e0:	48000400 	.word	0x48000400
 80035e4:	20000944 	.word	0x20000944
 80035e8:	40020044 	.word	0x40020044
 80035ec:	2000098c 	.word	0x2000098c
 80035f0:	40020058 	.word	0x40020058

080035f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0a4      	sub	sp, #144	@ 0x90
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	2268      	movs	r2, #104	@ 0x68
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f012 fbdb 	bl	8015dd0 <memset>
  if(huart->Instance==USART1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a35      	ldr	r2, [pc, #212]	@ (80036f4 <HAL_UART_MspInit+0x100>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d162      	bne.n	80036ea <HAL_UART_MspInit+0xf6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003624:	2301      	movs	r3, #1
 8003626:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003628:	2300      	movs	r3, #0
 800362a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	4618      	mov	r0, r3
 8003632:	f004 fa31 	bl	8007a98 <HAL_RCCEx_PeriphCLKConfig>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800363c:	f7ff fe0e 	bl	800325c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003640:	4b2d      	ldr	r3, [pc, #180]	@ (80036f8 <HAL_UART_MspInit+0x104>)
 8003642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003644:	4a2c      	ldr	r2, [pc, #176]	@ (80036f8 <HAL_UART_MspInit+0x104>)
 8003646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800364a:	6613      	str	r3, [r2, #96]	@ 0x60
 800364c:	4b2a      	ldr	r3, [pc, #168]	@ (80036f8 <HAL_UART_MspInit+0x104>)
 800364e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003658:	4b27      	ldr	r3, [pc, #156]	@ (80036f8 <HAL_UART_MspInit+0x104>)
 800365a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365c:	4a26      	ldr	r2, [pc, #152]	@ (80036f8 <HAL_UART_MspInit+0x104>)
 800365e:	f043 0302 	orr.w	r3, r3, #2
 8003662:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003664:	4b24      	ldr	r3, [pc, #144]	@ (80036f8 <HAL_UART_MspInit+0x104>)
 8003666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_DEBUG_Tx_Pin|UART_DEBUG_Rx_Pin;
 8003670:	23c0      	movs	r3, #192	@ 0xc0
 8003672:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	2300      	movs	r3, #0
 800367c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003680:	2303      	movs	r3, #3
 8003682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003686:	2307      	movs	r3, #7
 8003688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003690:	4619      	mov	r1, r3
 8003692:	481a      	ldr	r0, [pc, #104]	@ (80036fc <HAL_UART_MspInit+0x108>)
 8003694:	f001 f82e 	bl	80046f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8003698:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 800369a:	4a1a      	ldr	r2, [pc, #104]	@ (8003704 <HAL_UART_MspInit+0x110>)
 800369c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800369e:	4b18      	ldr	r3, [pc, #96]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036a0:	2202      	movs	r2, #2
 80036a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036a4:	4b16      	ldr	r3, [pc, #88]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036a6:	2210      	movs	r2, #16
 80036a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036aa:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036b0:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036b2:	2280      	movs	r2, #128	@ 0x80
 80036b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036b6:	4b12      	ldr	r3, [pc, #72]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036bc:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80036c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80036ce:	480c      	ldr	r0, [pc, #48]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036d0:	f000 fba2 	bl	8003e18 <HAL_DMA_Init>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 80036da:	f7ff fdbf 	bl	800325c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a07      	ldr	r2, [pc, #28]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036e2:	671a      	str	r2, [r3, #112]	@ 0x70
 80036e4:	4a06      	ldr	r2, [pc, #24]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036ea:	bf00      	nop
 80036ec:	3790      	adds	r7, #144	@ 0x90
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40021000 	.word	0x40021000
 80036fc:	48000400 	.word	0x48000400
 8003700:	20000a5c 	.word	0x20000a5c
 8003704:	4002046c 	.word	0x4002046c

08003708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800370c:	f004 f948 	bl	80079a0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <NMI_Handler+0x8>

08003714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <HardFault_Handler+0x4>

0800371c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <MemManage_Handler+0x4>

08003724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <BusFault_Handler+0x4>

0800372c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <UsageFault_Handler+0x4>

08003734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003746:	f000 f9cf 	bl	8003ae8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800374a:	f00e f8fd 	bl	8011948 <xTaskGetSchedulerState>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d001      	beq.n	8003758 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003754:	f00e fff8 	bl	8012748 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}

0800375c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003760:	4802      	ldr	r0, [pc, #8]	@ (800376c <RTC_WKUP_IRQHandler+0x10>)
 8003762:	f005 f8c1 	bl	80088e8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200007c8 	.word	0x200007c8

08003770 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003774:	4802      	ldr	r0, [pc, #8]	@ (8003780 <DMA1_Channel2_IRQHandler+0x10>)
 8003776:	f000 fc67 	bl	8004048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200008b4 	.word	0x200008b4

08003784 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003788:	4802      	ldr	r0, [pc, #8]	@ (8003794 <DMA1_Channel3_IRQHandler+0x10>)
 800378a:	f000 fc5d 	bl	8004048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200008fc 	.word	0x200008fc

08003798 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800379c:	4802      	ldr	r0, [pc, #8]	@ (80037a8 <DMA1_Channel4_IRQHandler+0x10>)
 800379e:	f000 fc53 	bl	8004048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000944 	.word	0x20000944

080037ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80037b0:	4802      	ldr	r0, [pc, #8]	@ (80037bc <DMA1_Channel5_IRQHandler+0x10>)
 80037b2:	f000 fc49 	bl	8004048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000098c 	.word	0x2000098c

080037c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB_ST_Pin);
 80037c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80037c8:	f001 f940 	bl	8004a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80037f0:	4802      	ldr	r0, [pc, #8]	@ (80037fc <LPTIM1_IRQHandler+0x10>)
 80037f2:	f001 faa5 	bl	8004d40 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000790 	.word	0x20000790

08003800 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003804:	4802      	ldr	r0, [pc, #8]	@ (8003810 <USB_IRQHandler+0x10>)
 8003806:	f001 fdd9 	bl	80053bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20024568 	.word	0x20024568

08003814 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003818:	4802      	ldr	r0, [pc, #8]	@ (8003824 <DMA2_Channel6_IRQHandler+0x10>)
 800381a:	f000 fc15 	bl	8004048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000a5c 	.word	0x20000a5c

08003828 <RTC_Alarm_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_Alarm_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800382c:	4802      	ldr	r0, [pc, #8]	@ (8003838 <RTC_Alarm_IRQHandler+0x10>)
 800382e:	f004 fee7 	bl	8008600 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200007c8 	.word	0x200007c8

0800383c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return 1;
 8003840:	2301      	movs	r3, #1
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <_kill>:

int _kill(int pid, int sig)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003856:	f012 fb63 	bl	8015f20 <__errno>
 800385a:	4603      	mov	r3, r0
 800385c:	2216      	movs	r2, #22
 800385e:	601a      	str	r2, [r3, #0]
  return -1;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <_exit>:

void _exit (int status)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003874:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ffe7 	bl	800384c <_kill>
  while (1) {}    /* Make sure we hang here */
 800387e:	bf00      	nop
 8003880:	e7fd      	b.n	800387e <_exit+0x12>

08003882 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b086      	sub	sp, #24
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	e00a      	b.n	80038aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003894:	f3af 8000 	nop.w
 8003898:	4601      	mov	r1, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	60ba      	str	r2, [r7, #8]
 80038a0:	b2ca      	uxtb	r2, r1
 80038a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3301      	adds	r3, #1
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	dbf0      	blt.n	8003894 <_read+0x12>
  }

  return len;
 80038b2:	687b      	ldr	r3, [r7, #4]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e009      	b.n	80038e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	60ba      	str	r2, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3301      	adds	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	dbf1      	blt.n	80038ce <_write+0x12>
  }
  return len;
 80038ea:	687b      	ldr	r3, [r7, #4]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_close>:

int _close(int file)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800391c:	605a      	str	r2, [r3, #4]
  return 0;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <_isatty>:

int _isatty(int file)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003934:	2301      	movs	r3, #1
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003964:	4a14      	ldr	r2, [pc, #80]	@ (80039b8 <_sbrk+0x5c>)
 8003966:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <_sbrk+0x60>)
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003970:	4b13      	ldr	r3, [pc, #76]	@ (80039c0 <_sbrk+0x64>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003978:	4b11      	ldr	r3, [pc, #68]	@ (80039c0 <_sbrk+0x64>)
 800397a:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <_sbrk+0x68>)
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <_sbrk+0x64>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d207      	bcs.n	800399c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800398c:	f012 fac8 	bl	8015f20 <__errno>
 8003990:	4603      	mov	r3, r0
 8003992:	220c      	movs	r2, #12
 8003994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800399a:	e009      	b.n	80039b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800399c:	4b08      	ldr	r3, [pc, #32]	@ (80039c0 <_sbrk+0x64>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039a2:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <_sbrk+0x64>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	4a05      	ldr	r2, [pc, #20]	@ (80039c0 <_sbrk+0x64>)
 80039ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20028000 	.word	0x20028000
 80039bc:	00000400 	.word	0x00000400
 80039c0:	2001a298 	.word	0x2001a298
 80039c4:	20024bd0 	.word	0x20024bd0

080039c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80039cc:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <SystemInit+0x20>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	4a05      	ldr	r2, [pc, #20]	@ (80039e8 <SystemInit+0x20>)
 80039d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80039ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039f0:	f7ff ffea 	bl	80039c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039f4:	480c      	ldr	r0, [pc, #48]	@ (8003a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80039f6:	490d      	ldr	r1, [pc, #52]	@ (8003a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80039f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003a30 <LoopForever+0xe>)
  movs r3, #0
 80039fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039fc:	e002      	b.n	8003a04 <LoopCopyDataInit>

080039fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a02:	3304      	adds	r3, #4

08003a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a08:	d3f9      	bcc.n	80039fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a38 <LoopForever+0x16>)
  movs r3, #0
 8003a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a10:	e001      	b.n	8003a16 <LoopFillZerobss>

08003a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a14:	3204      	adds	r2, #4

08003a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a18:	d3fb      	bcc.n	8003a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a1a:	f012 fa87 	bl	8015f2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a1e:	f7fd fd9b 	bl	8001558 <main>

08003a22 <LoopForever>:

LoopForever:
    b LoopForever
 8003a22:	e7fe      	b.n	8003a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a24:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8003a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a2c:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8003a30:	0802f6e8 	.word	0x0802f6e8
  ldr r2, =_sbss
 8003a34:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8003a38:	20024bcc 	.word	0x20024bcc

08003a3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a3c:	e7fe      	b.n	8003a3c <ADC1_IRQHandler>

08003a3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a48:	2003      	movs	r0, #3
 8003a4a:	f000 f995 	bl	8003d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a4e:	200f      	movs	r0, #15
 8003a50:	f000 f80e 	bl	8003a70 <HAL_InitTick>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	71fb      	strb	r3, [r7, #7]
 8003a5e:	e001      	b.n	8003a64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a60:	f7ff fc02 	bl	8003268 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a64:	79fb      	ldrb	r3, [r7, #7]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a7c:	4b17      	ldr	r3, [pc, #92]	@ (8003adc <HAL_InitTick+0x6c>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d023      	beq.n	8003acc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a84:	4b16      	ldr	r3, [pc, #88]	@ (8003ae0 <HAL_InitTick+0x70>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <HAL_InitTick+0x6c>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f9af 	bl	8003dfe <HAL_SYSTICK_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b0f      	cmp	r3, #15
 8003aaa:	d809      	bhi.n	8003ac0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aac:	2200      	movs	r2, #0
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ab4:	f000 f96b 	bl	8003d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <HAL_InitTick+0x74>)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e007      	b.n	8003ad0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e004      	b.n	8003ad0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
 8003aca:	e001      	b.n	8003ad0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	2000000c 	.word	0x2000000c
 8003ae0:	20000004 	.word	0x20000004
 8003ae4:	20000008 	.word	0x20000008

08003ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_IncTick+0x20>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <HAL_IncTick+0x24>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	4a04      	ldr	r2, [pc, #16]	@ (8003b0c <HAL_IncTick+0x24>)
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	2000000c 	.word	0x2000000c
 8003b0c:	2001a29c 	.word	0x2001a29c

08003b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return uwTick;
 8003b14:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <HAL_GetTick+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	2001a29c 	.word	0x2001a29c

08003b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7ff ffee 	bl	8003b10 <HAL_GetTick>
 8003b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b40:	d005      	beq.n	8003b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b42:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <HAL_Delay+0x44>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b4e:	bf00      	nop
 8003b50:	f7ff ffde 	bl	8003b10 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d8f7      	bhi.n	8003b50 <HAL_Delay+0x28>
  {
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	2000000c 	.word	0x2000000c

08003b70 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <HAL_SuspendTick+0x1c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a04      	ldr	r2, [pc, #16]	@ (8003b8c <HAL_SuspendTick+0x1c>)
 8003b7a:	f023 0302 	bic.w	r3, r3, #2
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	e000e010 	.word	0xe000e010

08003b90 <__NVIC_SetPriorityGrouping>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bac:	4013      	ands	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc2:	4a04      	ldr	r2, [pc, #16]	@ (8003bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	60d3      	str	r3, [r2, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_GetPriorityGrouping>:
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bdc:	4b04      	ldr	r3, [pc, #16]	@ (8003bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	f003 0307 	and.w	r3, r3, #7
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <__NVIC_EnableIRQ>:
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	db0b      	blt.n	8003c1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	4907      	ldr	r1, [pc, #28]	@ (8003c2c <__NVIC_EnableIRQ+0x38>)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	2001      	movs	r0, #1
 8003c16:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	e000e100 	.word	0xe000e100

08003c30 <__NVIC_DisableIRQ>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	db12      	blt.n	8003c68 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	f003 021f 	and.w	r2, r3, #31
 8003c48:	490a      	ldr	r1, [pc, #40]	@ (8003c74 <__NVIC_DisableIRQ+0x44>)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2001      	movs	r0, #1
 8003c52:	fa00 f202 	lsl.w	r2, r0, r2
 8003c56:	3320      	adds	r3, #32
 8003c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c5c:	f3bf 8f4f 	dsb	sy
}
 8003c60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c62:	f3bf 8f6f 	isb	sy
}
 8003c66:	bf00      	nop
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	e000e100 	.word	0xe000e100

08003c78 <__NVIC_SetPriority>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	db0a      	blt.n	8003ca2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	490c      	ldr	r1, [pc, #48]	@ (8003cc4 <__NVIC_SetPriority+0x4c>)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	0112      	lsls	r2, r2, #4
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ca0:	e00a      	b.n	8003cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	4908      	ldr	r1, [pc, #32]	@ (8003cc8 <__NVIC_SetPriority+0x50>)
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	3b04      	subs	r3, #4
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	761a      	strb	r2, [r3, #24]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000e100 	.word	0xe000e100
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <NVIC_EncodePriority>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	@ 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f1c3 0307 	rsb	r3, r3, #7
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	bf28      	it	cs
 8003cea:	2304      	movcs	r3, #4
 8003cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	2b06      	cmp	r3, #6
 8003cf4:	d902      	bls.n	8003cfc <NVIC_EncodePriority+0x30>
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3b03      	subs	r3, #3
 8003cfa:	e000      	b.n	8003cfe <NVIC_EncodePriority+0x32>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43da      	mvns	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	401a      	ands	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	43d9      	mvns	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d24:	4313      	orrs	r3, r2
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3724      	adds	r7, #36	@ 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d44:	d301      	bcc.n	8003d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00f      	b.n	8003d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d74 <SysTick_Config+0x40>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d52:	210f      	movs	r1, #15
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d58:	f7ff ff8e 	bl	8003c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d5c:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <SysTick_Config+0x40>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d62:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <SysTick_Config+0x40>)
 8003d64:	2207      	movs	r2, #7
 8003d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000e010 	.word	0xe000e010

08003d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff05 	bl	8003b90 <__NVIC_SetPriorityGrouping>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003da0:	f7ff ff1a 	bl	8003bd8 <__NVIC_GetPriorityGrouping>
 8003da4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	6978      	ldr	r0, [r7, #20]
 8003dac:	f7ff ff8e 	bl	8003ccc <NVIC_EncodePriority>
 8003db0:	4602      	mov	r2, r0
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff5d 	bl	8003c78 <__NVIC_SetPriority>
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff0d 	bl	8003bf4 <__NVIC_EnableIRQ>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ff1d 	bl	8003c30 <__NVIC_DisableIRQ>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ff94 	bl	8003d34 <SysTick_Config>
 8003e0c:	4603      	mov	r3, r0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e098      	b.n	8003f5c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b4d      	ldr	r3, [pc, #308]	@ (8003f68 <HAL_DMA_Init+0x150>)
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d80f      	bhi.n	8003e56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f6c <HAL_DMA_Init+0x154>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	4a4b      	ldr	r2, [pc, #300]	@ (8003f70 <HAL_DMA_Init+0x158>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	091b      	lsrs	r3, r3, #4
 8003e48:	009a      	lsls	r2, r3, #2
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a48      	ldr	r2, [pc, #288]	@ (8003f74 <HAL_DMA_Init+0x15c>)
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e54:	e00e      	b.n	8003e74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b46      	ldr	r3, [pc, #280]	@ (8003f78 <HAL_DMA_Init+0x160>)
 8003e5e:	4413      	add	r3, r2
 8003e60:	4a43      	ldr	r2, [pc, #268]	@ (8003f70 <HAL_DMA_Init+0x158>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	009a      	lsls	r2, r3, #2
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a42      	ldr	r2, [pc, #264]	@ (8003f7c <HAL_DMA_Init+0x164>)
 8003e72:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ece:	d039      	beq.n	8003f44 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed4:	4a27      	ldr	r2, [pc, #156]	@ (8003f74 <HAL_DMA_Init+0x15c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d11a      	bne.n	8003f10 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003eda:	4b29      	ldr	r3, [pc, #164]	@ (8003f80 <HAL_DMA_Init+0x168>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	f003 031c 	and.w	r3, r3, #28
 8003ee6:	210f      	movs	r1, #15
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	4924      	ldr	r1, [pc, #144]	@ (8003f80 <HAL_DMA_Init+0x168>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ef4:	4b22      	ldr	r3, [pc, #136]	@ (8003f80 <HAL_DMA_Init+0x168>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6859      	ldr	r1, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f00:	f003 031c 	and.w	r3, r3, #28
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	491d      	ldr	r1, [pc, #116]	@ (8003f80 <HAL_DMA_Init+0x168>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]
 8003f0e:	e019      	b.n	8003f44 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f10:	4b1c      	ldr	r3, [pc, #112]	@ (8003f84 <HAL_DMA_Init+0x16c>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f18:	f003 031c 	and.w	r3, r3, #28
 8003f1c:	210f      	movs	r1, #15
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	4917      	ldr	r1, [pc, #92]	@ (8003f84 <HAL_DMA_Init+0x16c>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f2a:	4b16      	ldr	r3, [pc, #88]	@ (8003f84 <HAL_DMA_Init+0x16c>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	f003 031c 	and.w	r3, r3, #28
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	4911      	ldr	r1, [pc, #68]	@ (8003f84 <HAL_DMA_Init+0x16c>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40020407 	.word	0x40020407
 8003f6c:	bffdfff8 	.word	0xbffdfff8
 8003f70:	cccccccd 	.word	0xcccccccd
 8003f74:	40020000 	.word	0x40020000
 8003f78:	bffdfbf8 	.word	0xbffdfbf8
 8003f7c:	40020400 	.word	0x40020400
 8003f80:	400200a8 	.word	0x400200a8
 8003f84:	400204a8 	.word	0x400204a8

08003f88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_DMA_Start_IT+0x20>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e04b      	b.n	8004040 <HAL_DMA_Start_IT+0xb8>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d13a      	bne.n	8004032 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f8e0 	bl	80041a6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 020e 	orr.w	r2, r2, #14
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e00f      	b.n	8004020 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0204 	bic.w	r2, r2, #4
 800400e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 020a 	orr.w	r2, r2, #10
 800401e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e005      	b.n	800403e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800403a:	2302      	movs	r3, #2
 800403c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800403e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004064:	f003 031c 	and.w	r3, r3, #28
 8004068:	2204      	movs	r2, #4
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d026      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x7a>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d021      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d107      	bne.n	800409c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0204 	bic.w	r2, r2, #4
 800409a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a0:	f003 021c 	and.w	r2, r3, #28
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	2104      	movs	r1, #4
 80040aa:	fa01 f202 	lsl.w	r2, r1, r2
 80040ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d071      	beq.n	800419c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040c0:	e06c      	b.n	800419c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f003 031c 	and.w	r3, r3, #28
 80040ca:	2202      	movs	r2, #2
 80040cc:	409a      	lsls	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d02e      	beq.n	8004134 <HAL_DMA_IRQHandler+0xec>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d029      	beq.n	8004134 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 020a 	bic.w	r2, r2, #10
 80040fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	f003 021c 	and.w	r2, r3, #28
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	2102      	movs	r1, #2
 8004114:	fa01 f202 	lsl.w	r2, r1, r2
 8004118:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d038      	beq.n	800419c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004132:	e033      	b.n	800419c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004138:	f003 031c 	and.w	r3, r3, #28
 800413c:	2208      	movs	r2, #8
 800413e:	409a      	lsls	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02a      	beq.n	800419e <HAL_DMA_IRQHandler+0x156>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d025      	beq.n	800419e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 020e 	bic.w	r2, r2, #14
 8004160:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	f003 021c 	and.w	r2, r3, #28
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	2101      	movs	r1, #1
 8004170:	fa01 f202 	lsl.w	r2, r1, r2
 8004174:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800419c:	bf00      	nop
 800419e:	bf00      	nop
}
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b8:	f003 021c 	and.w	r2, r3, #28
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	2101      	movs	r1, #1
 80041c2:	fa01 f202 	lsl.w	r2, r1, r2
 80041c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b10      	cmp	r3, #16
 80041d6:	d108      	bne.n	80041ea <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041e8:	e007      	b.n	80041fa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	60da      	str	r2, [r3, #12]
}
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800421a:	4b2f      	ldr	r3, [pc, #188]	@ (80042d8 <HAL_FLASH_Program+0xd0>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_FLASH_Program+0x1e>
 8004222:	2302      	movs	r3, #2
 8004224:	e053      	b.n	80042ce <HAL_FLASH_Program+0xc6>
 8004226:	4b2c      	ldr	r3, [pc, #176]	@ (80042d8 <HAL_FLASH_Program+0xd0>)
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800422c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004230:	f000 f888 	bl	8004344 <FLASH_WaitForLastOperation>
 8004234:	4603      	mov	r3, r0
 8004236:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d143      	bne.n	80042c6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800423e:	4b26      	ldr	r3, [pc, #152]	@ (80042d8 <HAL_FLASH_Program+0xd0>)
 8004240:	2200      	movs	r2, #0
 8004242:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004244:	4b25      	ldr	r3, [pc, #148]	@ (80042dc <HAL_FLASH_Program+0xd4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004250:	4b22      	ldr	r3, [pc, #136]	@ (80042dc <HAL_FLASH_Program+0xd4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a21      	ldr	r2, [pc, #132]	@ (80042dc <HAL_FLASH_Program+0xd4>)
 8004256:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800425a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800425c:	4b1e      	ldr	r3, [pc, #120]	@ (80042d8 <HAL_FLASH_Program+0xd0>)
 800425e:	2202      	movs	r2, #2
 8004260:	771a      	strb	r2, [r3, #28]
 8004262:	e002      	b.n	800426a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004264:	4b1c      	ldr	r3, [pc, #112]	@ (80042d8 <HAL_FLASH_Program+0xd0>)
 8004266:	2200      	movs	r2, #0
 8004268:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d107      	bne.n	8004280 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004274:	68b8      	ldr	r0, [r7, #8]
 8004276:	f000 f8bb 	bl	80043f0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800427a:	2301      	movs	r3, #1
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	e010      	b.n	80042a2 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d002      	beq.n	800428c <HAL_FLASH_Program+0x84>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d10a      	bne.n	80042a2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	4619      	mov	r1, r3
 8004290:	68b8      	ldr	r0, [r7, #8]
 8004292:	f000 f8d3 	bl	800443c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d102      	bne.n	80042a2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800429c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80042a0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80042a6:	f000 f84d 	bl	8004344 <FLASH_WaitForLastOperation>
 80042aa:	4603      	mov	r3, r0
 80042ac:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d006      	beq.n	80042c2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80042b4:	4b09      	ldr	r3, [pc, #36]	@ (80042dc <HAL_FLASH_Program+0xd4>)
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	43db      	mvns	r3, r3
 80042bc:	4907      	ldr	r1, [pc, #28]	@ (80042dc <HAL_FLASH_Program+0xd4>)
 80042be:	4013      	ands	r3, r2
 80042c0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80042c2:	f000 f9cd 	bl	8004660 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042c6:	4b04      	ldr	r3, [pc, #16]	@ (80042d8 <HAL_FLASH_Program+0xd0>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]

  return status;
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000010 	.word	0x20000010
 80042dc:	40022000 	.word	0x40022000

080042e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80042ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <HAL_FLASH_Unlock+0x38>)
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da0b      	bge.n	800430a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042f2:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <HAL_FLASH_Unlock+0x38>)
 80042f4:	4a09      	ldr	r2, [pc, #36]	@ (800431c <HAL_FLASH_Unlock+0x3c>)
 80042f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042f8:	4b07      	ldr	r3, [pc, #28]	@ (8004318 <HAL_FLASH_Unlock+0x38>)
 80042fa:	4a09      	ldr	r2, [pc, #36]	@ (8004320 <HAL_FLASH_Unlock+0x40>)
 80042fc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80042fe:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <HAL_FLASH_Unlock+0x38>)
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	da01      	bge.n	800430a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800430a:	79fb      	ldrb	r3, [r7, #7]
}
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40022000 	.word	0x40022000
 800431c:	45670123 	.word	0x45670123
 8004320:	cdef89ab 	.word	0xcdef89ab

08004324 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004328:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <HAL_FLASH_Lock+0x1c>)
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	4a04      	ldr	r2, [pc, #16]	@ (8004340 <HAL_FLASH_Lock+0x1c>)
 800432e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004332:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40022000 	.word	0x40022000

08004344 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800434c:	f7ff fbe0 	bl	8003b10 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004352:	e00d      	b.n	8004370 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800435a:	d009      	beq.n	8004370 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800435c:	f7ff fbd8 	bl	8003b10 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	429a      	cmp	r2, r3
 800436a:	d801      	bhi.n	8004370 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e035      	b.n	80043dc <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004370:	4b1c      	ldr	r3, [pc, #112]	@ (80043e4 <FLASH_WaitForLastOperation+0xa0>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1eb      	bne.n	8004354 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800437c:	4b19      	ldr	r3, [pc, #100]	@ (80043e4 <FLASH_WaitForLastOperation+0xa0>)
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	4b19      	ldr	r3, [pc, #100]	@ (80043e8 <FLASH_WaitForLastOperation+0xa4>)
 8004382:	4013      	ands	r3, r2
 8004384:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01d      	beq.n	80043c8 <FLASH_WaitForLastOperation+0x84>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800438c:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <FLASH_WaitForLastOperation+0xa8>)
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
 8004394:	4a15      	ldr	r2, [pc, #84]	@ (80043ec <FLASH_WaitForLastOperation+0xa8>)
 8004396:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439e:	d307      	bcc.n	80043b0 <FLASH_WaitForLastOperation+0x6c>
 80043a0:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <FLASH_WaitForLastOperation+0xa0>)
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80043aa:	490e      	ldr	r1, [pc, #56]	@ (80043e4 <FLASH_WaitForLastOperation+0xa0>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	618b      	str	r3, [r1, #24]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <FLASH_WaitForLastOperation+0x80>
 80043ba:	4a0a      	ldr	r2, [pc, #40]	@ (80043e4 <FLASH_WaitForLastOperation+0xa0>)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80043c2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e009      	b.n	80043dc <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80043c8:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <FLASH_WaitForLastOperation+0xa0>)
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <FLASH_WaitForLastOperation+0x96>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80043d4:	4b03      	ldr	r3, [pc, #12]	@ (80043e4 <FLASH_WaitForLastOperation+0xa0>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40022000 	.word	0x40022000
 80043e8:	0002c3fa 	.word	0x0002c3fa
 80043ec:	20000010 	.word	0x20000010

080043f0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80043fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <FLASH_Program_DoubleWord+0x48>)
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	4a0d      	ldr	r2, [pc, #52]	@ (8004438 <FLASH_Program_DoubleWord+0x48>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800440e:	f3bf 8f6f 	isb	sy
}
 8004412:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8004414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	000a      	movs	r2, r1
 8004422:	2300      	movs	r3, #0
 8004424:	68f9      	ldr	r1, [r7, #12]
 8004426:	3104      	adds	r1, #4
 8004428:	4613      	mov	r3, r2
 800442a:	600b      	str	r3, [r1, #0]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40022000 	.word	0x40022000

0800443c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800443c:	b480      	push	{r7}
 800443e:	b089      	sub	sp, #36	@ 0x24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004446:	2340      	movs	r3, #64	@ 0x40
 8004448:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004452:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <FLASH_Program_Fast+0x68>)
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <FLASH_Program_Fast+0x68>)
 8004458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800445c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445e:	f3ef 8310 	mrs	r3, PRIMASK
 8004462:	60fb      	str	r3, [r7, #12]
  return(result);
 8004464:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004468:	b672      	cpsid	i
}
 800446a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	3304      	adds	r3, #4
 8004478:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	3304      	adds	r3, #4
 800447e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004480:	7ffb      	ldrb	r3, [r7, #31]
 8004482:	3b01      	subs	r3, #1
 8004484:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8004486:	7ffb      	ldrb	r3, [r7, #31]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1ef      	bne.n	800446c <FLASH_Program_Fast+0x30>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f383 8810 	msr	PRIMASK, r3
}
 8004496:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004498:	bf00      	nop
 800449a:	3724      	adds	r7, #36	@ 0x24
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40022000 	.word	0x40022000

080044a8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80044b2:	4b48      	ldr	r3, [pc, #288]	@ (80045d4 <HAL_FLASHEx_Erase+0x12c>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_FLASHEx_Erase+0x16>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e085      	b.n	80045ca <HAL_FLASHEx_Erase+0x122>
 80044be:	4b45      	ldr	r3, [pc, #276]	@ (80045d4 <HAL_FLASHEx_Erase+0x12c>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80044c8:	f7ff ff3c 	bl	8004344 <FLASH_WaitForLastOperation>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d175      	bne.n	80045c2 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044d6:	4b3f      	ldr	r3, [pc, #252]	@ (80045d4 <HAL_FLASHEx_Erase+0x12c>)
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80044dc:	4b3e      	ldr	r3, [pc, #248]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d013      	beq.n	8004510 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80044e8:	4b3b      	ldr	r3, [pc, #236]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80044f4:	4b38      	ldr	r3, [pc, #224]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a37      	ldr	r2, [pc, #220]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 80044fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044fe:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004500:	4b34      	ldr	r3, [pc, #208]	@ (80045d4 <HAL_FLASHEx_Erase+0x12c>)
 8004502:	2203      	movs	r2, #3
 8004504:	771a      	strb	r2, [r3, #28]
 8004506:	e016      	b.n	8004536 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004508:	4b32      	ldr	r3, [pc, #200]	@ (80045d4 <HAL_FLASHEx_Erase+0x12c>)
 800450a:	2201      	movs	r2, #1
 800450c:	771a      	strb	r2, [r3, #28]
 800450e:	e012      	b.n	8004536 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004510:	4b31      	ldr	r3, [pc, #196]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800451c:	4b2e      	ldr	r3, [pc, #184]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a2d      	ldr	r2, [pc, #180]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 8004522:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004526:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004528:	4b2a      	ldr	r3, [pc, #168]	@ (80045d4 <HAL_FLASHEx_Erase+0x12c>)
 800452a:	2202      	movs	r2, #2
 800452c:	771a      	strb	r2, [r3, #28]
 800452e:	e002      	b.n	8004536 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004530:	4b28      	ldr	r3, [pc, #160]	@ (80045d4 <HAL_FLASHEx_Erase+0x12c>)
 8004532:	2200      	movs	r2, #0
 8004534:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d111      	bne.n	8004562 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f84a 	bl	80045dc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004548:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800454c:	f7ff fefa 	bl	8004344 <FLASH_WaitForLastOperation>
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8004554:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	4a1f      	ldr	r2, [pc, #124]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 800455a:	f023 0304 	bic.w	r3, r3, #4
 800455e:	6153      	str	r3, [r2, #20]
 8004560:	e02d      	b.n	80045be <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004568:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	e01d      	b.n	80045ae <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4619      	mov	r1, r3
 8004578:	68b8      	ldr	r0, [r7, #8]
 800457a:	f000 f84d 	bl	8004618 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800457e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004582:	f7ff fedf 	bl	8004344 <FLASH_WaitForLastOperation>
 8004586:	4603      	mov	r3, r0
 8004588:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800458a:	4b13      	ldr	r3, [pc, #76]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	4a12      	ldr	r2, [pc, #72]	@ (80045d8 <HAL_FLASHEx_Erase+0x130>)
 8004590:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004594:	f023 0302 	bic.w	r3, r3, #2
 8004598:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	601a      	str	r2, [r3, #0]
          break;
 80045a6:	e00a      	b.n	80045be <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	3301      	adds	r3, #1
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d3d9      	bcc.n	8004572 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80045be:	f000 f84f 	bl	8004660 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80045c2:	4b04      	ldr	r3, [pc, #16]	@ (80045d4 <HAL_FLASHEx_Erase+0x12c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]

  return status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000010 	.word	0x20000010
 80045d8:	40022000 	.word	0x40022000

080045dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80045ee:	4b09      	ldr	r3, [pc, #36]	@ (8004614 <FLASH_MassErase+0x38>)
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4a08      	ldr	r2, [pc, #32]	@ (8004614 <FLASH_MassErase+0x38>)
 80045f4:	f043 0304 	orr.w	r3, r3, #4
 80045f8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80045fa:	4b06      	ldr	r3, [pc, #24]	@ (8004614 <FLASH_MassErase+0x38>)
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4a05      	ldr	r2, [pc, #20]	@ (8004614 <FLASH_MassErase+0x38>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004604:	6153      	str	r3, [r2, #20]
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40022000 	.word	0x40022000

08004618 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004622:	4b0e      	ldr	r3, [pc, #56]	@ (800465c <FLASH_PageErase+0x44>)
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8004632:	490a      	ldr	r1, [pc, #40]	@ (800465c <FLASH_PageErase+0x44>)
 8004634:	4313      	orrs	r3, r2
 8004636:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004638:	4b08      	ldr	r3, [pc, #32]	@ (800465c <FLASH_PageErase+0x44>)
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	4a07      	ldr	r2, [pc, #28]	@ (800465c <FLASH_PageErase+0x44>)
 800463e:	f043 0302 	orr.w	r3, r3, #2
 8004642:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004644:	4b05      	ldr	r3, [pc, #20]	@ (800465c <FLASH_PageErase+0x44>)
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	4a04      	ldr	r2, [pc, #16]	@ (800465c <FLASH_PageErase+0x44>)
 800464a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800464e:	6153      	str	r3, [r2, #20]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40022000 	.word	0x40022000

08004660 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004666:	4b21      	ldr	r3, [pc, #132]	@ (80046ec <FLASH_FlushCaches+0x8c>)
 8004668:	7f1b      	ldrb	r3, [r3, #28]
 800466a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d002      	beq.n	8004678 <FLASH_FlushCaches+0x18>
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d117      	bne.n	80046a8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004678:	4b1d      	ldr	r3, [pc, #116]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1c      	ldr	r2, [pc, #112]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 800467e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004682:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004684:	4b1a      	ldr	r3, [pc, #104]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a19      	ldr	r2, [pc, #100]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 800468a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b17      	ldr	r3, [pc, #92]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a16      	ldr	r2, [pc, #88]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 8004696:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800469a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800469c:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a13      	ldr	r2, [pc, #76]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 80046a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046a6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d002      	beq.n	80046b4 <FLASH_FlushCaches+0x54>
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d111      	bne.n	80046d8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80046b4:	4b0e      	ldr	r3, [pc, #56]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a0d      	ldr	r2, [pc, #52]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 80046ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a0a      	ldr	r2, [pc, #40]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 80046c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80046cc:	4b08      	ldr	r3, [pc, #32]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a07      	ldr	r2, [pc, #28]	@ (80046f0 <FLASH_FlushCaches+0x90>)
 80046d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046d6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80046d8:	4b04      	ldr	r3, [pc, #16]	@ (80046ec <FLASH_FlushCaches+0x8c>)
 80046da:	2200      	movs	r2, #0
 80046dc:	771a      	strb	r2, [r3, #28]
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000010 	.word	0x20000010
 80046f0:	40022000 	.word	0x40022000

080046f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004702:	e154      	b.n	80049ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	2101      	movs	r1, #1
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	4013      	ands	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8146 	beq.w	80049a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d005      	beq.n	8004734 <HAL_GPIO_Init+0x40>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d130      	bne.n	8004796 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	2203      	movs	r2, #3
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4013      	ands	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800476a:	2201      	movs	r2, #1
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	f003 0201 	and.w	r2, r3, #1
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d017      	beq.n	80047d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	2203      	movs	r2, #3
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d123      	bne.n	8004826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	08da      	lsrs	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3208      	adds	r2, #8
 80047e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	220f      	movs	r2, #15
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4013      	ands	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	08da      	lsrs	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3208      	adds	r2, #8
 8004820:	6939      	ldr	r1, [r7, #16]
 8004822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	2203      	movs	r2, #3
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43db      	mvns	r3, r3
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4013      	ands	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 0203 	and.w	r2, r3, #3
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80a0 	beq.w	80049a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004868:	4b58      	ldr	r3, [pc, #352]	@ (80049cc <HAL_GPIO_Init+0x2d8>)
 800486a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486c:	4a57      	ldr	r2, [pc, #348]	@ (80049cc <HAL_GPIO_Init+0x2d8>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6613      	str	r3, [r2, #96]	@ 0x60
 8004874:	4b55      	ldr	r3, [pc, #340]	@ (80049cc <HAL_GPIO_Init+0x2d8>)
 8004876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004880:	4a53      	ldr	r2, [pc, #332]	@ (80049d0 <HAL_GPIO_Init+0x2dc>)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	3302      	adds	r3, #2
 8004888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	220f      	movs	r2, #15
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4013      	ands	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80048aa:	d019      	beq.n	80048e0 <HAL_GPIO_Init+0x1ec>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a49      	ldr	r2, [pc, #292]	@ (80049d4 <HAL_GPIO_Init+0x2e0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <HAL_GPIO_Init+0x1e8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a48      	ldr	r2, [pc, #288]	@ (80049d8 <HAL_GPIO_Init+0x2e4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00d      	beq.n	80048d8 <HAL_GPIO_Init+0x1e4>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a47      	ldr	r2, [pc, #284]	@ (80049dc <HAL_GPIO_Init+0x2e8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <HAL_GPIO_Init+0x1e0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a46      	ldr	r2, [pc, #280]	@ (80049e0 <HAL_GPIO_Init+0x2ec>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d101      	bne.n	80048d0 <HAL_GPIO_Init+0x1dc>
 80048cc:	2304      	movs	r3, #4
 80048ce:	e008      	b.n	80048e2 <HAL_GPIO_Init+0x1ee>
 80048d0:	2307      	movs	r3, #7
 80048d2:	e006      	b.n	80048e2 <HAL_GPIO_Init+0x1ee>
 80048d4:	2303      	movs	r3, #3
 80048d6:	e004      	b.n	80048e2 <HAL_GPIO_Init+0x1ee>
 80048d8:	2302      	movs	r3, #2
 80048da:	e002      	b.n	80048e2 <HAL_GPIO_Init+0x1ee>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <HAL_GPIO_Init+0x1ee>
 80048e0:	2300      	movs	r3, #0
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	f002 0203 	and.w	r2, r2, #3
 80048e8:	0092      	lsls	r2, r2, #2
 80048ea:	4093      	lsls	r3, r2
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048f2:	4937      	ldr	r1, [pc, #220]	@ (80049d0 <HAL_GPIO_Init+0x2dc>)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	089b      	lsrs	r3, r3, #2
 80048f8:	3302      	adds	r3, #2
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004900:	4b38      	ldr	r3, [pc, #224]	@ (80049e4 <HAL_GPIO_Init+0x2f0>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	43db      	mvns	r3, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004924:	4a2f      	ldr	r2, [pc, #188]	@ (80049e4 <HAL_GPIO_Init+0x2f0>)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800492a:	4b2e      	ldr	r3, [pc, #184]	@ (80049e4 <HAL_GPIO_Init+0x2f0>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	43db      	mvns	r3, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4013      	ands	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800494e:	4a25      	ldr	r2, [pc, #148]	@ (80049e4 <HAL_GPIO_Init+0x2f0>)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004954:	4b23      	ldr	r3, [pc, #140]	@ (80049e4 <HAL_GPIO_Init+0x2f0>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	43db      	mvns	r3, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4013      	ands	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004978:	4a1a      	ldr	r2, [pc, #104]	@ (80049e4 <HAL_GPIO_Init+0x2f0>)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800497e:	4b19      	ldr	r3, [pc, #100]	@ (80049e4 <HAL_GPIO_Init+0x2f0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	43db      	mvns	r3, r3
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4013      	ands	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049a2:	4a10      	ldr	r2, [pc, #64]	@ (80049e4 <HAL_GPIO_Init+0x2f0>)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	3301      	adds	r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f47f aea3 	bne.w	8004704 <HAL_GPIO_Init+0x10>
  }
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40010000 	.word	0x40010000
 80049d4:	48000400 	.word	0x48000400
 80049d8:	48000800 	.word	0x48000800
 80049dc:	48000c00 	.word	0x48000c00
 80049e0:	48001000 	.word	0x48001000
 80049e4:	40010400 	.word	0x40010400

080049e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
 80049f4:	4613      	mov	r3, r2
 80049f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f8:	787b      	ldrb	r3, [r7, #1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a04:	e002      	b.n	8004a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	041a      	lsls	r2, r3, #16
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	43d9      	mvns	r1, r3
 8004a36:	887b      	ldrh	r3, [r7, #2]
 8004a38:	400b      	ands	r3, r1
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	619a      	str	r2, [r3, #24]
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a56:	4b08      	ldr	r3, [pc, #32]	@ (8004a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d006      	beq.n	8004a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a62:	4a05      	ldr	r2, [pc, #20]	@ (8004a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a68:	88fb      	ldrh	r3, [r7, #6]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd fdce 	bl	800260c <HAL_GPIO_EXTI_Callback>
  }
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40010400 	.word	0x40010400

08004a7c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e08f      	b.n	8004bae <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fe fc05 	bl	80032b8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d004      	beq.n	8004ad0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ace:	d103      	bne.n	8004ad8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 031e 	bic.w	r3, r3, #30
 8004ad6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d005      	beq.n	8004af0 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004aea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004aee:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4b31      	ldr	r3, [pc, #196]	@ (8004bb8 <HAL_LPTIM_Init+0x13c>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b00:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004b06:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8004b0c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004b12:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d107      	bne.n	8004b32 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d004      	beq.n	8004b44 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b42:	d107      	bne.n	8004b54 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00a      	beq.n	8004b76 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004b68:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004b6e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a0e      	ldr	r2, [pc, #56]	@ (8004bbc <HAL_LPTIM_Init+0x140>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	621a      	str	r2, [r3, #32]
 8004b98:	e004      	b.n	8004ba4 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ba2:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	ff19f1fe 	.word	0xff19f1fe
 8004bbc:	40007c00 	.word	0x40007c00

08004bc0 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a37      	ldr	r2, [pc, #220]	@ (8004cb4 <HAL_LPTIM_Counter_Start_IT+0xf4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d106      	bne.n	8004bea <HAL_LPTIM_Counter_Start_IT+0x2a>
 8004bdc:	4b36      	ldr	r3, [pc, #216]	@ (8004cb8 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	4a35      	ldr	r2, [pc, #212]	@ (8004cb8 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6213      	str	r3, [r2, #32]
 8004be8:	e005      	b.n	8004bf6 <HAL_LPTIM_Counter_Start_IT+0x36>
 8004bea:	4b33      	ldr	r3, [pc, #204]	@ (8004cb8 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	4a32      	ldr	r2, [pc, #200]	@ (8004cb8 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d00c      	beq.n	8004c18 <HAL_LPTIM_Counter_Start_IT+0x58>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c06:	d107      	bne.n	8004c18 <HAL_LPTIM_Counter_Start_IT+0x58>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8004c16:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004c38:	2110      	movs	r1, #16
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f966 	bl	8004f0c <LPTIM_WaitForFlag>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d101      	bne.n	8004c4a <HAL_LPTIM_Counter_Start_IT+0x8a>
  {
    return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e02f      	b.n	8004caa <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f98e 	bl	8004f6c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f94c 	bl	8004eee <HAL_LPTIM_GetState>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d101      	bne.n	8004c60 <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e024      	b.n	8004caa <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0210 	orr.w	r2, r2, #16
 8004c6e:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0202 	orr.w	r2, r2, #2
 8004c7e:	609a      	str	r2, [r3, #8]
  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0204 	orr.w	r2, r2, #4
 8004c9e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40007c00 	.word	0x40007c00
 8004cb8:	40010400 	.word	0x40010400

08004cbc <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d38 <HAL_LPTIM_Counter_Stop_IT+0x7c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d106      	bne.n	8004cdc <HAL_LPTIM_Counter_Stop_IT+0x20>
 8004cce:	4b1b      	ldr	r3, [pc, #108]	@ (8004d3c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d3c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	6213      	str	r3, [r2, #32]
 8004cda:	e005      	b.n	8004ce8 <HAL_LPTIM_Counter_Stop_IT+0x2c>
 8004cdc:	4b17      	ldr	r3, [pc, #92]	@ (8004d3c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	4a16      	ldr	r2, [pc, #88]	@ (8004d3c <HAL_LPTIM_Counter_Stop_IT+0x80>)
 8004ce2:	f023 0302 	bic.w	r3, r3, #2
 8004ce6:	6213      	str	r3, [r2, #32]

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f93b 	bl	8004f6c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f8f9 	bl	8004eee <HAL_LPTIM_GetState>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d101      	bne.n	8004d06 <HAL_LPTIM_Counter_Stop_IT+0x4a>
  {
    return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e014      	b.n	8004d30 <HAL_LPTIM_Counter_Stop_IT+0x74>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0210 	bic.w	r2, r2, #16
 8004d14:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0202 	bic.w	r2, r2, #2
 8004d24:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
#endif
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40007c00 	.word	0x40007c00
 8004d3c:	40010400 	.word	0x40010400

08004d40 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d10d      	bne.n	8004d72 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d106      	bne.n	8004d72 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f882 	bl	8004e76 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d10d      	bne.n	8004d9c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d106      	bne.n	8004d9c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2202      	movs	r2, #2
 8004d94:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fd fc6a 	bl	8002670 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d10d      	bne.n	8004dc6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d106      	bne.n	8004dc6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f862 	bl	8004e8a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d10d      	bne.n	8004df0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d106      	bne.n	8004df0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2208      	movs	r2, #8
 8004de8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f857 	bl	8004e9e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d10d      	bne.n	8004e1a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d106      	bne.n	8004e1a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2210      	movs	r2, #16
 8004e12:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f84c 	bl	8004eb2 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d10d      	bne.n	8004e44 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d106      	bne.n	8004e44 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f841 	bl	8004ec6 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4e:	2b40      	cmp	r3, #64	@ 0x40
 8004e50:	d10d      	bne.n	8004e6e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5c:	2b40      	cmp	r3, #64	@ 0x40
 8004e5e:	d106      	bne.n	8004e6e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2240      	movs	r2, #64	@ 0x40
 8004e66:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f836 	bl	8004eda <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004efc:	b2db      	uxtb	r3, r3
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004f1a:	4b12      	ldr	r3, [pc, #72]	@ (8004f64 <LPTIM_WaitForFlag+0x58>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a12      	ldr	r2, [pc, #72]	@ (8004f68 <LPTIM_WaitForFlag+0x5c>)
 8004f20:	fba2 2303 	umull	r2, r3, r2, r3
 8004f24:	0b9b      	lsrs	r3, r3, #14
 8004f26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d002      	beq.n	8004f56 <LPTIM_WaitForFlag+0x4a>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ec      	bne.n	8004f30 <LPTIM_WaitForFlag+0x24>

  return result;
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000004 	.word	0x20000004
 8004f68:	d1b71759 	.word	0xd1b71759

08004f6c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08c      	sub	sp, #48	@ 0x30
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f78:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f82:	2301      	movs	r3, #1
 8004f84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f383 8810 	msr	PRIMASK, r3
}
 8004f8c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a73      	ldr	r2, [pc, #460]	@ (8005160 <LPTIM_Disable+0x1f4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <LPTIM_Disable+0x34>
 8004f98:	4a72      	ldr	r2, [pc, #456]	@ (8005164 <LPTIM_Disable+0x1f8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004f9e:	e00d      	b.n	8004fbc <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004fa0:	4b71      	ldr	r3, [pc, #452]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004fac:	e006      	b.n	8004fbc <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004fae:	4b6e      	ldr	r3, [pc, #440]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004fba:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8005160 <LPTIM_Disable+0x1f4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <LPTIM_Disable+0x8a>
 8004fee:	4a5d      	ldr	r2, [pc, #372]	@ (8005164 <LPTIM_Disable+0x1f8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00d      	beq.n	8005010 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004ff4:	e019      	b.n	800502a <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffa:	4a5b      	ldr	r2, [pc, #364]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8004ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005000:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005002:	4b59      	ldr	r3, [pc, #356]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8005004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005006:	4a58      	ldr	r2, [pc, #352]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8005008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800500c:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 800500e:	e00c      	b.n	800502a <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005010:	4b55      	ldr	r3, [pc, #340]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8005012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005014:	4a54      	ldr	r2, [pc, #336]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8005016:	f043 0320 	orr.w	r3, r3, #32
 800501a:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800501c:	4b52      	ldr	r3, [pc, #328]	@ (8005168 <LPTIM_Disable+0x1fc>)
 800501e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005020:	4a51      	ldr	r2, [pc, #324]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8005022:	f023 0320 	bic.w	r3, r3, #32
 8005026:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8005028:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <LPTIM_Disable+0xca>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d075      	beq.n	8005122 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a49      	ldr	r2, [pc, #292]	@ (8005160 <LPTIM_Disable+0x1f4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <LPTIM_Disable+0xdc>
 8005040:	4a48      	ldr	r2, [pc, #288]	@ (8005164 <LPTIM_Disable+0x1f8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005046:	e011      	b.n	800506c <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005048:	4b47      	ldr	r3, [pc, #284]	@ (8005168 <LPTIM_Disable+0x1fc>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504e:	4a46      	ldr	r2, [pc, #280]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8005050:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8005054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8005058:	e008      	b.n	800506c <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800505a:	4b43      	ldr	r3, [pc, #268]	@ (8005168 <LPTIM_Disable+0x1fc>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005060:	4a41      	ldr	r2, [pc, #260]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8005062:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005066:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 800506a:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01a      	beq.n	80050a8 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800508a:	2108      	movs	r1, #8
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff ff3d 	bl	8004f0c <LPTIM_WaitForFlag>
 8005092:	4603      	mov	r3, r0
 8005094:	2b03      	cmp	r3, #3
 8005096:	d103      	bne.n	80050a0 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2203      	movs	r2, #3
 800509c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2208      	movs	r2, #8
 80050a6:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01a      	beq.n	80050e4 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80050c6:	2110      	movs	r1, #16
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ff1f 	bl	8004f0c <LPTIM_WaitForFlag>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d103      	bne.n	80050dc <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2203      	movs	r2, #3
 80050d8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2210      	movs	r2, #16
 80050e2:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005160 <LPTIM_Disable+0x1f4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <LPTIM_Disable+0x18a>
 80050ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005164 <LPTIM_Disable+0x1f8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00b      	beq.n	800510c <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80050f4:	e015      	b.n	8005122 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80050f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005168 <LPTIM_Disable+0x1fc>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005100:	4919      	ldr	r1, [pc, #100]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 800510a:	e00a      	b.n	8005122 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800510c:	4b16      	ldr	r3, [pc, #88]	@ (8005168 <LPTIM_Disable+0x1fc>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005112:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005116:	4914      	ldr	r1, [pc, #80]	@ (8005168 <LPTIM_Disable+0x1fc>)
 8005118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8005120:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005138:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	621a      	str	r2, [r3, #32]
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005156:	bf00      	nop
 8005158:	3730      	adds	r7, #48	@ 0x30
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40007c00 	.word	0x40007c00
 8005164:	40009400 	.word	0x40009400
 8005168:	40021000 	.word	0x40021000

0800516c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800516c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516e:	b08b      	sub	sp, #44	@ 0x2c
 8005170:	af06      	add	r7, sp, #24
 8005172:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e0f8      	b.n	8005370 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f00d ffc6 	bl	8013124 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2203      	movs	r2, #3
 800519c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f005 fd98 	bl	800acda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	687e      	ldr	r6, [r7, #4]
 80051b2:	466d      	mov	r5, sp
 80051b4:	f106 0410 	add.w	r4, r6, #16
 80051b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	1d33      	adds	r3, r6, #4
 80051c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051c4:	6838      	ldr	r0, [r7, #0]
 80051c6:	f005 fd60 	bl	800ac8a <USB_CoreInit>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e0c9      	b.n	8005370 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f005 fd94 	bl	800ad10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	73fb      	strb	r3, [r7, #15]
 80051ec:	e040      	b.n	8005270 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	3301      	adds	r3, #1
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	440b      	add	r3, r1
 8005214:	7bfa      	ldrb	r2, [r7, #15]
 8005216:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	440b      	add	r3, r1
 8005228:	3303      	adds	r3, #3
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800522e:	7bfa      	ldrb	r2, [r7, #15]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	440b      	add	r3, r1
 800523c:	3338      	adds	r3, #56	@ 0x38
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005242:	7bfa      	ldrb	r2, [r7, #15]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	440b      	add	r3, r1
 8005250:	333c      	adds	r3, #60	@ 0x3c
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005256:	7bfa      	ldrb	r2, [r7, #15]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	440b      	add	r3, r1
 8005264:	3340      	adds	r3, #64	@ 0x40
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	3301      	adds	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	429a      	cmp	r2, r3
 8005278:	d3b9      	bcc.n	80051ee <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
 800527e:	e044      	b.n	800530a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005280:	7bfa      	ldrb	r2, [r7, #15]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	440b      	add	r3, r1
 800528e:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005296:	7bfa      	ldrb	r2, [r7, #15]
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	440b      	add	r3, r1
 80052a4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80052a8:	7bfa      	ldrb	r2, [r7, #15]
 80052aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052ac:	7bfa      	ldrb	r2, [r7, #15]
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	440b      	add	r3, r1
 80052ba:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052c2:	7bfa      	ldrb	r2, [r7, #15]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	440b      	add	r3, r1
 80052d0:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052d8:	7bfa      	ldrb	r2, [r7, #15]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	440b      	add	r3, r1
 80052e6:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052ee:	7bfa      	ldrb	r2, [r7, #15]
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	440b      	add	r3, r1
 80052fc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	3301      	adds	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
 800530a:	7bfa      	ldrb	r2, [r7, #15]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d3b5      	bcc.n	8005280 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	687e      	ldr	r6, [r7, #4]
 800531c:	466d      	mov	r5, sp
 800531e:	f106 0410 	add.w	r4, r6, #16
 8005322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	602b      	str	r3, [r5, #0]
 800532a:	1d33      	adds	r3, r6, #4
 800532c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800532e:	6838      	ldr	r0, [r7, #0]
 8005330:	f005 fcfb 	bl	800ad2a <USB_DevInit>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e014      	b.n	8005370 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d102      	bne.n	8005364 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 fc57 	bl	8006c12 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f007 ff8b 	bl	800d284 <USB_DevDisconnect>

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005378 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_PCD_Start+0x16>
 800538a:	2302      	movs	r3, #2
 800538c:	e012      	b.n	80053b4 <HAL_PCD_Start+0x3c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f005 fc86 	bl	800acac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f007 ff56 	bl	800d256 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f007 ff70 	bl	800d2ae <USB_ReadInterrupts>
 80053ce:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fb13 	bl	8005a06 <PCD_EP_ISR_Handler>

    return;
 80053e0:	e110      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d013      	beq.n	8005414 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fe:	b292      	uxth	r2, r2
 8005400:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f00d ff48 	bl	801329a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800540a:	2100      	movs	r1, #0
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8fc 	bl	800560a <HAL_PCD_SetAddress>

    return;
 8005412:	e0f7      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005426:	b29a      	uxth	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005430:	b292      	uxth	r2, r2
 8005432:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005436:	e0e5      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800544a:	b29a      	uxth	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005454:	b292      	uxth	r2, r2
 8005456:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800545a:	e0d3      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d034      	beq.n	80054d0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0204 	bic.w	r2, r2, #4
 8005478:	b292      	uxth	r2, r2
 800547a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0208 	bic.w	r2, r2, #8
 8005490:	b292      	uxth	r2, r2
 8005492:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054a8:	2100      	movs	r1, #0
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f00e f9a6 	bl	80137fc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f00d ff2b 	bl	801330c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054c8:	b292      	uxth	r2, r2
 80054ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80054ce:	e099      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d027      	beq.n	800552a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0208 	orr.w	r2, r2, #8
 80054ec:	b292      	uxth	r2, r2
 80054ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005504:	b292      	uxth	r2, r2
 8005506:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005512:	b29a      	uxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0204 	orr.w	r2, r2, #4
 800551c:	b292      	uxth	r2, r2
 800551e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f00d fed8 	bl	80132d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005528:	e06c      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005530:	2b00      	cmp	r3, #0
 8005532:	d040      	beq.n	80055b6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005546:	b292      	uxth	r2, r2
 8005548:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d12b      	bne.n	80055ae <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0204 	orr.w	r2, r2, #4
 8005568:	b292      	uxth	r2, r2
 800556a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0208 	orr.w	r2, r2, #8
 8005580:	b292      	uxth	r2, r2
 8005582:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005596:	b29b      	uxth	r3, r3
 8005598:	089b      	lsrs	r3, r3, #2
 800559a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80055a4:	2101      	movs	r1, #1
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f00e f928 	bl	80137fc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80055ac:	e02a      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f00d fe92 	bl	80132d8 <HAL_PCD_SuspendCallback>
    return;
 80055b4:	e026      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00f      	beq.n	80055e0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80055d2:	b292      	uxth	r2, r2
 80055d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f00d fe50 	bl	801327e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80055de:	e011      	b.n	8005604 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055fc:	b292      	uxth	r2, r2
 80055fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005602:	bf00      	nop
  }
}
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_PCD_SetAddress+0x1a>
 8005620:	2302      	movs	r3, #2
 8005622:	e013      	b.n	800564c <HAL_PCD_SetAddress+0x42>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f007 fdf6 	bl	800d22e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	4608      	mov	r0, r1
 800565e:	4611      	mov	r1, r2
 8005660:	461a      	mov	r2, r3
 8005662:	4603      	mov	r3, r0
 8005664:	70fb      	strb	r3, [r7, #3]
 8005666:	460b      	mov	r3, r1
 8005668:	803b      	strh	r3, [r7, #0]
 800566a:	4613      	mov	r3, r2
 800566c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da0e      	bge.n	8005698 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	705a      	strb	r2, [r3, #1]
 8005696:	e00e      	b.n	80056b6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	f003 0207 	and.w	r2, r3, #7
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056c2:	883a      	ldrh	r2, [r7, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	78ba      	ldrb	r2, [r7, #2]
 80056cc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056ce:	78bb      	ldrb	r3, [r7, #2]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d102      	bne.n	80056da <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_PCD_EP_Open+0x94>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e00e      	b.n	8005706 <HAL_PCD_EP_Open+0xb2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f005 fb38 	bl	800ad6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8005704:	7afb      	ldrb	r3, [r7, #11]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	460b      	mov	r3, r1
 8005718:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800571a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800571e:	2b00      	cmp	r3, #0
 8005720:	da0e      	bge.n	8005740 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	4413      	add	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	705a      	strb	r2, [r3, #1]
 800573e:	e00e      	b.n	800575e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	f003 0207 	and.w	r2, r3, #7
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_PCD_EP_Close+0x6a>
 8005774:	2302      	movs	r3, #2
 8005776:	e00e      	b.n	8005796 <HAL_PCD_EP_Close+0x88>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68f9      	ldr	r1, [r7, #12]
 8005786:	4618      	mov	r0, r3
 8005788:	f005 feb4 	bl	800b4f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	460b      	mov	r3, r1
 80057ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ae:	7afb      	ldrb	r3, [r7, #11]
 80057b0:	f003 0207 	and.w	r2, r3, #7
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2200      	movs	r2, #0
 80057dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6979      	ldr	r1, [r7, #20]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f006 f86c 	bl	800b8ce <USB_EPStartXfer>

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	f003 0207 	and.w	r2, r3, #7
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	440b      	add	r3, r1
 800581e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005822:	681b      	ldr	r3, [r3, #0]
}
 8005824:	4618      	mov	r0, r3
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	460b      	mov	r3, r1
 800583e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005840:	7afb      	ldrb	r3, [r7, #11]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2200      	movs	r2, #0
 8005874:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2201      	movs	r2, #1
 800587a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800587c:	7afb      	ldrb	r3, [r7, #11]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	b2da      	uxtb	r2, r3
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6979      	ldr	r1, [r7, #20]
 800588e:	4618      	mov	r0, r3
 8005890:	f006 f81d 	bl	800b8ce <USB_EPStartXfer>

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	f003 0207 	and.w	r2, r3, #7
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d901      	bls.n	80058bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e04c      	b.n	8005956 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	da0e      	bge.n	80058e2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4413      	add	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	705a      	strb	r2, [r3, #1]
 80058e0:	e00c      	b.n	80058fc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058e2:	78fa      	ldrb	r2, [r7, #3]
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	4413      	add	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	b2da      	uxtb	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_PCD_EP_SetStall+0x7e>
 8005918:	2302      	movs	r3, #2
 800591a:	e01c      	b.n	8005956 <HAL_PCD_EP_SetStall+0xb8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68f9      	ldr	r1, [r7, #12]
 800592a:	4618      	mov	r0, r3
 800592c:	f007 fb80 	bl	800d030 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	2b00      	cmp	r3, #0
 8005938:	d108      	bne.n	800594c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f007 fcc1 	bl	800d2ce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	429a      	cmp	r2, r3
 8005976:	d901      	bls.n	800597c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e040      	b.n	80059fe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800597c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005980:	2b00      	cmp	r3, #0
 8005982:	da0e      	bge.n	80059a2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	705a      	strb	r2, [r3, #1]
 80059a0:	e00e      	b.n	80059c0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	f003 0207 	and.w	r2, r3, #7
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	4413      	add	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_PCD_EP_ClrStall+0x82>
 80059dc:	2302      	movs	r3, #2
 80059de:	e00e      	b.n	80059fe <HAL_PCD_EP_ClrStall+0xa0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68f9      	ldr	r1, [r7, #12]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f007 fb6f 	bl	800d0d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b096      	sub	sp, #88	@ 0x58
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005a0e:	e3b0      	b.n	8006172 <PCD_EP_ISR_Handler+0x76c>
  {
    wIstr = hpcd->Instance->ISTR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005a1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005a2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 8172 	bne.w	8005d18 <PCD_EP_ISR_Handler+0x312>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d14f      	bne.n	8005ae0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a50:	81fb      	strh	r3, [r7, #14]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	89fb      	ldrh	r3, [r7, #14]
 8005a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3328      	adds	r3, #40	@ 0x28
 8005a68:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	4413      	add	r3, r2
 8005a84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	441a      	add	r2, r3
 8005a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a9e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f00d fbd1 	bl	801324a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 835e 	beq.w	8006172 <PCD_EP_ISR_Handler+0x76c>
 8005ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f040 8359 	bne.w	8006172 <PCD_EP_ISR_Handler+0x76c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005ade:	e348      	b.n	8006172 <PCD_EP_ISR_Handler+0x76c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005ae6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005af2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005af6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d032      	beq.n	8005b64 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	4413      	add	r3, r2
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	4413      	add	r3, r2
 8005b18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b24:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8005b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b32:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b36:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f007 fc16 	bl	800d36a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	823b      	strh	r3, [r7, #16]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	8a3a      	ldrh	r2, [r7, #16]
 8005b54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b58:	b292      	uxth	r2, r2
 8005b5a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f00d fb47 	bl	80131f0 <HAL_PCD_SetupStageCallback>
 8005b62:	e306      	b.n	8006172 <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b64:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f280 8302 	bge.w	8006172 <PCD_EP_ISR_Handler+0x76c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	83fb      	strh	r3, [r7, #30]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	8bfa      	ldrh	r2, [r7, #30]
 8005b84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b88:	b292      	uxth	r2, r2
 8005b8a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d019      	beq.n	8005bf0 <PCD_EP_ISR_Handler+0x1ea>
 8005bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d015      	beq.n	8005bf0 <PCD_EP_ISR_Handler+0x1ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bca:	6959      	ldr	r1, [r3, #20]
 8005bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bd2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f007 fbc8 	bl	800d36a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bdc:	695a      	ldr	r2, [r3, #20]
 8005bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	441a      	add	r2, r3
 8005be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005be6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005be8:	2100      	movs	r1, #0
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f00d fb12 	bl	8013214 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005bfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f040 82b5 	bne.w	8006172 <PCD_EP_ISR_Handler+0x76c>
 8005c08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c0c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c14:	f000 82ad 	beq.w	8006172 <PCD_EP_ISR_Handler+0x76c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	801a      	strh	r2, [r3, #0]
 8005c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c4e:	d91d      	bls.n	8005c8c <PCD_EP_ISR_Handler+0x286>
 8005c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d102      	bne.n	8005c6a <PCD_EP_ISR_Handler+0x264>
 8005c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c66:	3b01      	subs	r3, #1
 8005c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	029b      	lsls	r3, r3, #10
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	e026      	b.n	8005cda <PCD_EP_ISR_Handler+0x2d4>
 8005c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <PCD_EP_ISR_Handler+0x2a4>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	e017      	b.n	8005cda <PCD_EP_ISR_Handler+0x2d4>
 8005caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <PCD_EP_ISR_Handler+0x2be>
 8005cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	029b      	lsls	r3, r3, #10
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cea:	827b      	strh	r3, [r7, #18]
 8005cec:	8a7b      	ldrh	r3, [r7, #18]
 8005cee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005cf2:	827b      	strh	r3, [r7, #18]
 8005cf4:	8a7b      	ldrh	r3, [r7, #18]
 8005cf6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005cfa:	827b      	strh	r3, [r7, #18]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	8a7b      	ldrh	r3, [r7, #18]
 8005d02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	8013      	strh	r3, [r2, #0]
 8005d16:	e22c      	b.n	8006172 <PCD_EP_ISR_Handler+0x76c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d2c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f280 80f6 	bge.w	8005f22 <PCD_EP_ISR_Handler+0x51c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005d64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d68:	b292      	uxth	r2, r2
 8005d6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005d6c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4413      	add	r3, r2
 8005d80:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d84:	7b1b      	ldrb	r3, [r3, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d123      	bne.n	8005dd2 <PCD_EP_ISR_Handler+0x3cc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	4413      	add	r3, r2
 8005da4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005db2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 808e 	beq.w	8005ed8 <PCD_EP_ISR_Handler+0x4d2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc2:	6959      	ldr	r1, [r3, #20]
 8005dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc6:	88da      	ldrh	r2, [r3, #6]
 8005dc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005dcc:	f007 facd 	bl	800d36a <USB_ReadPMA>
 8005dd0:	e082      	b.n	8005ed8 <PCD_EP_ISR_Handler+0x4d2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd4:	78db      	ldrb	r3, [r3, #3]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d10a      	bne.n	8005df0 <PCD_EP_ISR_Handler+0x3ea>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005dda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005dde:	461a      	mov	r2, r3
 8005de0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f9d3 	bl	800618e <HAL_PCD_EP_DB_Receive>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005dee:	e073      	b.n	8005ed8 <PCD_EP_ISR_Handler+0x4d2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d022      	beq.n	8005e94 <PCD_EP_ISR_Handler+0x48e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	4413      	add	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	4413      	add	r3, r2
 8005e68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e72:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005e76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d02c      	beq.n	8005ed8 <PCD_EP_ISR_Handler+0x4d2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e84:	6959      	ldr	r1, [r3, #20]
 8005e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e88:	891a      	ldrh	r2, [r3, #8]
 8005e8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005e8e:	f007 fa6c 	bl	800d36a <USB_ReadPMA>
 8005e92:	e021      	b.n	8005ed8 <PCD_EP_ISR_Handler+0x4d2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	4413      	add	r3, r2
 8005eae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005ebc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d009      	beq.n	8005ed8 <PCD_EP_ISR_Handler+0x4d2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eca:	6959      	ldr	r1, [r3, #20]
 8005ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ece:	895a      	ldrh	r2, [r3, #10]
 8005ed0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005ed4:	f007 fa49 	bl	800d36a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005ee0:	441a      	add	r2, r3
 8005ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ee4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ee8:	695a      	ldr	r2, [r3, #20]
 8005eea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005eee:	441a      	add	r2, r3
 8005ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ef2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <PCD_EP_ISR_Handler+0x502>
 8005efc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d206      	bcs.n	8005f16 <PCD_EP_ISR_Handler+0x510>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f00d f980 	bl	8013214 <HAL_PCD_DataOutStageCallback>
 8005f14:	e005      	b.n	8005f22 <PCD_EP_ISR_Handler+0x51c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f005 fcd6 	bl	800b8ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005f22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8121 	beq.w	8006172 <PCD_EP_ISR_Handler+0x76c>
      {
        ep = &hpcd->IN_ep[epindex];
 8005f30:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	4413      	add	r3, r2
 8005f42:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f82:	78db      	ldrb	r3, [r3, #3]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	f040 80a2 	bne.w	80060ce <PCD_EP_ISR_Handler+0x6c8>
        {
          ep->xfer_len = 0U;
 8005f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f92:	7b1b      	ldrb	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8093 	beq.w	80060c0 <PCD_EP_ISR_Handler+0x6ba>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d046      	beq.n	8006034 <PCD_EP_ISR_Handler+0x62e>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d126      	bne.n	8005ffc <PCD_EP_ISR_Handler+0x5f6>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	4413      	add	r3, r2
 8005fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	00da      	lsls	r2, r3, #3
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	4413      	add	r3, r2
 8005fd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005fd4:	623b      	str	r3, [r7, #32]
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	801a      	strh	r2, [r3, #0]
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	801a      	strh	r2, [r3, #0]
 8005ffa:	e061      	b.n	80060c0 <PCD_EP_ISR_Handler+0x6ba>
 8005ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d15d      	bne.n	80060c0 <PCD_EP_ISR_Handler+0x6ba>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006018:	4413      	add	r3, r2
 800601a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800601c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	00da      	lsls	r2, r3, #3
 8006022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006024:	4413      	add	r3, r2
 8006026:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800602a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800602c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602e:	2200      	movs	r2, #0
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	e045      	b.n	80060c0 <PCD_EP_ISR_Handler+0x6ba>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800603a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d126      	bne.n	8006090 <PCD_EP_ISR_Handler+0x68a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	637b      	str	r3, [r7, #52]	@ 0x34
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006050:	b29b      	uxth	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006056:	4413      	add	r3, r2
 8006058:	637b      	str	r3, [r7, #52]	@ 0x34
 800605a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	00da      	lsls	r2, r3, #3
 8006060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006062:	4413      	add	r3, r2
 8006064:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006068:	633b      	str	r3, [r7, #48]	@ 0x30
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006074:	b29a      	uxth	r2, r3
 8006076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006088:	b29a      	uxth	r2, r3
 800608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	e017      	b.n	80060c0 <PCD_EP_ISR_Handler+0x6ba>
 8006090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d113      	bne.n	80060c0 <PCD_EP_ISR_Handler+0x6ba>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a6:	4413      	add	r3, r2
 80060a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	00da      	lsls	r2, r3, #3
 80060b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b2:	4413      	add	r3, r2
 80060b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060bc:	2200      	movs	r2, #0
 80060be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f00d f8bf 	bl	801324a <HAL_PCD_DataInStageCallback>
 80060cc:	e051      	b.n	8006172 <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80060ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80060d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d144      	bne.n	8006164 <PCD_EP_ISR_Handler+0x75e>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	4413      	add	r3, r2
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6812      	ldr	r2, [r2, #0]
 80060f2:	4413      	add	r3, r2
 80060f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8006102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800610a:	429a      	cmp	r2, r3
 800610c:	d907      	bls.n	800611e <PCD_EP_ISR_Handler+0x718>
            {
              ep->xfer_len -= TxPctSize;
 800610e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006116:	1ad2      	subs	r2, r2, r3
 8006118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800611a:	619a      	str	r2, [r3, #24]
 800611c:	e002      	b.n	8006124 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              ep->xfer_len = 0U;
 800611e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006120:	2200      	movs	r2, #0
 8006122:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <PCD_EP_ISR_Handler+0x734>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800612c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f00d f889 	bl	801324a <HAL_PCD_DataInStageCallback>
 8006138:	e01b      	b.n	8006172 <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800613a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006142:	441a      	add	r2, r3
 8006144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006146:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006150:	441a      	add	r2, r3
 8006152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006154:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800615c:	4618      	mov	r0, r3
 800615e:	f005 fbb6 	bl	800b8ce <USB_EPStartXfer>
 8006162:	e006      	b.n	8006172 <PCD_EP_ISR_Handler+0x76c>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006164:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006168:	461a      	mov	r2, r3
 800616a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f917 	bl	80063a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800617a:	b29b      	uxth	r3, r3
 800617c:	b21b      	sxth	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	f6ff ac46 	blt.w	8005a10 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3758      	adds	r7, #88	@ 0x58
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b088      	sub	sp, #32
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	4613      	mov	r3, r2
 800619a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d07c      	beq.n	80062a0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4413      	add	r3, r2
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	4413      	add	r3, r2
 80061c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	8b7b      	ldrh	r3, [r7, #26]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d306      	bcc.n	80061e4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	8b7b      	ldrh	r3, [r7, #26]
 80061dc:	1ad2      	subs	r2, r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	619a      	str	r2, [r3, #24]
 80061e2:	e002      	b.n	80061ea <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d123      	bne.n	800623a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620c:	833b      	strh	r3, [r7, #24]
 800620e:	8b3b      	ldrh	r3, [r7, #24]
 8006210:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006214:	833b      	strh	r3, [r7, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	441a      	add	r2, r3
 8006224:	8b3b      	ldrh	r3, [r7, #24]
 8006226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800622a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800622e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006236:	b29b      	uxth	r3, r3
 8006238:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01f      	beq.n	8006284 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800625a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625e:	82fb      	strh	r3, [r7, #22]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	8afb      	ldrh	r3, [r7, #22]
 8006270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800627c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006280:	b29b      	uxth	r3, r3
 8006282:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006284:	8b7b      	ldrh	r3, [r7, #26]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 8085 	beq.w	8006396 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6818      	ldr	r0, [r3, #0]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6959      	ldr	r1, [r3, #20]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	891a      	ldrh	r2, [r3, #8]
 8006298:	8b7b      	ldrh	r3, [r7, #26]
 800629a:	f007 f866 	bl	800d36a <USB_ReadPMA>
 800629e:	e07a      	b.n	8006396 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4413      	add	r3, r2
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	4413      	add	r3, r2
 80062ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	8b7b      	ldrh	r3, [r7, #26]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d306      	bcc.n	80062de <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	8b7b      	ldrh	r3, [r7, #26]
 80062d6:	1ad2      	subs	r2, r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	619a      	str	r2, [r3, #24]
 80062dc:	e002      	b.n	80062e4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2200      	movs	r2, #0
 80062e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d123      	bne.n	8006334 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006306:	83fb      	strh	r3, [r7, #30]
 8006308:	8bfb      	ldrh	r3, [r7, #30]
 800630a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800630e:	83fb      	strh	r3, [r7, #30]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	8bfb      	ldrh	r3, [r7, #30]
 8006320:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006324:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006328:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800632c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006330:	b29b      	uxth	r3, r3
 8006332:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11f      	bne.n	800637e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006358:	83bb      	strh	r3, [r7, #28]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	441a      	add	r2, r3
 8006368:	8bbb      	ldrh	r3, [r7, #28]
 800636a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800636e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006376:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800637a:	b29b      	uxth	r3, r3
 800637c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800637e:	8b7b      	ldrh	r3, [r7, #26]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	6959      	ldr	r1, [r3, #20]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	895a      	ldrh	r2, [r3, #10]
 8006390:	8b7b      	ldrh	r3, [r7, #26]
 8006392:	f006 ffea 	bl	800d36a <USB_ReadPMA>
    }
  }

  return count;
 8006396:	8b7b      	ldrh	r3, [r7, #26]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b0a4      	sub	sp, #144	@ 0x90
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 81db 	beq.w	8006770 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4413      	add	r3, r2
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063de:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d907      	bls.n	80063fe <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80063f6:	1ad2      	subs	r2, r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	619a      	str	r2, [r3, #24]
 80063fc:	e002      	b.n	8006404 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 80b9 	bne.w	8006580 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d126      	bne.n	8006464 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006424:	b29b      	uxth	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642a:	4413      	add	r3, r2
 800642c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	00da      	lsls	r2, r3, #3
 8006434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006436:	4413      	add	r3, r2
 8006438:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006448:	b29a      	uxth	r2, r3
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	801a      	strh	r2, [r3, #0]
 800644e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645c:	b29a      	uxth	r2, r3
 800645e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	e01a      	b.n	800649a <HAL_PCD_EP_DB_Transmit+0xfa>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d116      	bne.n	800649a <HAL_PCD_EP_DB_Transmit+0xfa>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	637b      	str	r3, [r7, #52]	@ 0x34
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800647a:	b29b      	uxth	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006480:	4413      	add	r3, r2
 8006482:	637b      	str	r3, [r7, #52]	@ 0x34
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	00da      	lsls	r2, r3, #3
 800648a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800648c:	4413      	add	r3, r2
 800648e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006492:	633b      	str	r3, [r7, #48]	@ 0x30
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	2200      	movs	r2, #0
 8006498:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d126      	bne.n	80064f6 <HAL_PCD_EP_DB_Transmit+0x156>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	61fb      	str	r3, [r7, #28]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	00da      	lsls	r2, r3, #3
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	4413      	add	r3, r2
 80064ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064da:	b29a      	uxth	r2, r3
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	801a      	strh	r2, [r3, #0]
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	e017      	b.n	8006526 <HAL_PCD_EP_DB_Transmit+0x186>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d113      	bne.n	8006526 <HAL_PCD_EP_DB_Transmit+0x186>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006506:	b29b      	uxth	r3, r3
 8006508:	461a      	mov	r2, r3
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	4413      	add	r3, r2
 800650e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	00da      	lsls	r2, r3, #3
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	4413      	add	r3, r2
 800651a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2200      	movs	r2, #0
 8006524:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	4619      	mov	r1, r3
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f00c fe8c 	bl	801324a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 82fa 	beq.w	8006b32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006558:	82fb      	strh	r3, [r7, #22]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	441a      	add	r2, r3
 8006568:	8afb      	ldrh	r3, [r7, #22]
 800656a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800656e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657a:	b29b      	uxth	r3, r3
 800657c:	8013      	strh	r3, [r2, #0]
 800657e:	e2d8      	b.n	8006b32 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d021      	beq.n	80065ce <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	441a      	add	r2, r3
 80065b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	f040 82ac 	bne.w	8006b32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065e2:	441a      	add	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	69da      	ldr	r2, [r3, #28]
 80065ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065f0:	441a      	add	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6a1a      	ldr	r2, [r3, #32]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d30b      	bcc.n	800661a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	621a      	str	r2, [r3, #32]
 8006618:	e017      	b.n	800664a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d108      	bne.n	8006634 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006622:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006626:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006632:	e00a      	b.n	800664a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2200      	movs	r2, #0
 8006648:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	785b      	ldrb	r3, [r3, #1]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d165      	bne.n	800671e <HAL_PCD_EP_DB_Transmit+0x37e>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006660:	b29b      	uxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006666:	4413      	add	r3, r2
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	00da      	lsls	r2, r3, #3
 8006670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006672:	4413      	add	r3, r2
 8006674:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006678:	63bb      	str	r3, [r7, #56]	@ 0x38
 800667a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006684:	b29a      	uxth	r2, r3
 8006686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800668e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006690:	d91d      	bls.n	80066ce <HAL_PCD_EP_DB_Transmit+0x32e>
 8006692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800669a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d102      	bne.n	80066ac <HAL_PCD_EP_DB_Transmit+0x30c>
 80066a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066a8:	3b01      	subs	r3, #1
 80066aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	029b      	lsls	r3, r3, #10
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b29b      	uxth	r3, r3
 80066be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e044      	b.n	8006758 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80066ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <HAL_PCD_EP_DB_Transmit+0x34c>
 80066d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e035      	b.n	8006758 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80066ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <HAL_PCD_EP_DB_Transmit+0x366>
 8006700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006702:	3301      	adds	r3, #1
 8006704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29a      	uxth	r2, r3
 800670c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800670e:	b29b      	uxth	r3, r3
 8006710:	029b      	lsls	r3, r3, #10
 8006712:	b29b      	uxth	r3, r3
 8006714:	4313      	orrs	r3, r2
 8006716:	b29a      	uxth	r2, r3
 8006718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e01c      	b.n	8006758 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	785b      	ldrb	r3, [r3, #1]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d118      	bne.n	8006758 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	647b      	str	r3, [r7, #68]	@ 0x44
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006734:	b29b      	uxth	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673a:	4413      	add	r3, r2
 800673c:	647b      	str	r3, [r7, #68]	@ 0x44
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	00da      	lsls	r2, r3, #3
 8006744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006746:	4413      	add	r3, r2
 8006748:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800674c:	643b      	str	r3, [r7, #64]	@ 0x40
 800674e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006752:	b29a      	uxth	r2, r3
 8006754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006756:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6959      	ldr	r1, [r3, #20]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	891a      	ldrh	r2, [r3, #8]
 8006764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006768:	b29b      	uxth	r3, r3
 800676a:	f006 fdbc 	bl	800d2e6 <USB_WritePMA>
 800676e:	e1e0      	b.n	8006b32 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006778:	b29b      	uxth	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	4413      	add	r3, r2
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	4413      	add	r3, r2
 800678a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006794:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	699a      	ldr	r2, [r3, #24]
 800679c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d307      	bcc.n	80067b4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	699a      	ldr	r2, [r3, #24]
 80067a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80067ac:	1ad2      	subs	r2, r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	619a      	str	r2, [r3, #24]
 80067b2:	e002      	b.n	80067ba <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2200      	movs	r2, #0
 80067b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 80c0 	bne.w	8006944 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d126      	bne.n	800681a <HAL_PCD_EP_DB_Transmit+0x47a>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067da:	b29b      	uxth	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067e0:	4413      	add	r3, r2
 80067e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	00da      	lsls	r2, r3, #3
 80067ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067ec:	4413      	add	r3, r2
 80067ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067fe:	b29a      	uxth	r2, r3
 8006800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800680e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006812:	b29a      	uxth	r2, r3
 8006814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	e01a      	b.n	8006850 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d116      	bne.n	8006850 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	667b      	str	r3, [r7, #100]	@ 0x64
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006830:	b29b      	uxth	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006836:	4413      	add	r3, r2
 8006838:	667b      	str	r3, [r7, #100]	@ 0x64
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	00da      	lsls	r2, r3, #3
 8006840:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006842:	4413      	add	r3, r2
 8006844:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006848:	663b      	str	r3, [r7, #96]	@ 0x60
 800684a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800684c:	2200      	movs	r2, #0
 800684e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	677b      	str	r3, [r7, #116]	@ 0x74
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	785b      	ldrb	r3, [r3, #1]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12b      	bne.n	80068b6 <HAL_PCD_EP_DB_Transmit+0x516>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800686c:	b29b      	uxth	r3, r3
 800686e:	461a      	mov	r2, r3
 8006870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006872:	4413      	add	r3, r2
 8006874:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	00da      	lsls	r2, r3, #3
 800687c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800687e:	4413      	add	r3, r2
 8006880:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006884:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006888:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006894:	b29a      	uxth	r2, r3
 8006896:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800689a:	801a      	strh	r2, [r3, #0]
 800689c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068b2:	801a      	strh	r2, [r3, #0]
 80068b4:	e017      	b.n	80068e6 <HAL_PCD_EP_DB_Transmit+0x546>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d113      	bne.n	80068e6 <HAL_PCD_EP_DB_Transmit+0x546>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068cc:	4413      	add	r3, r2
 80068ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	00da      	lsls	r2, r3, #3
 80068d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068d8:	4413      	add	r3, r2
 80068da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068de:	673b      	str	r3, [r7, #112]	@ 0x70
 80068e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068e2:	2200      	movs	r2, #0
 80068e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	4619      	mov	r1, r3
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f00c fcac 	bl	801324a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f040 811a 	bne.w	8006b32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b29b      	uxth	r3, r3
 8006910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006918:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	441a      	add	r2, r3
 800692a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800692e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006936:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800693a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693e:	b29b      	uxth	r3, r3
 8006940:	8013      	strh	r3, [r2, #0]
 8006942:	e0f6      	b.n	8006b32 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d121      	bne.n	8006992 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006968:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	441a      	add	r2, r3
 800697a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800697e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006986:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800698a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800698e:	b29b      	uxth	r3, r3
 8006990:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006998:	2b01      	cmp	r3, #1
 800699a:	f040 80ca 	bne.w	8006b32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80069a6:	441a      	add	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80069b4:	441a      	add	r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6a1a      	ldr	r2, [r3, #32]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d30b      	bcc.n	80069de <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6a1a      	ldr	r2, [r3, #32]
 80069d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	621a      	str	r2, [r3, #32]
 80069dc:	e017      	b.n	8006a0e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d108      	bne.n	80069f8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80069e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80069ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80069f6:	e00a      	b.n	8006a0e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d165      	bne.n	8006ae8 <HAL_PCD_EP_DB_Transmit+0x748>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a30:	4413      	add	r3, r2
 8006a32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	00da      	lsls	r2, r3, #3
 8006a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a52:	801a      	strh	r2, [r3, #0]
 8006a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a58:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a5a:	d91d      	bls.n	8006a98 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a60:	095b      	lsrs	r3, r3, #5
 8006a62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006a70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a72:	3b01      	subs	r3, #1
 8006a74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	029b      	lsls	r3, r3, #10
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	4313      	orrs	r3, r2
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	e041      	b.n	8006b1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8006a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <HAL_PCD_EP_DB_Transmit+0x716>
 8006aa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	e032      	b.n	8006b1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8006ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <HAL_PCD_EP_DB_Transmit+0x730>
 8006aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006acc:	3301      	adds	r3, #1
 8006ace:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ad0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	029b      	lsls	r3, r3, #10
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ae4:	801a      	strh	r2, [r3, #0]
 8006ae6:	e019      	b.n	8006b1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	785b      	ldrb	r3, [r3, #1]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d115      	bne.n	8006b1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006afe:	4413      	add	r3, r2
 8006b00:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	00da      	lsls	r2, r3, #3
 8006b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b10:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b1a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	6959      	ldr	r1, [r3, #20]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	895a      	ldrh	r2, [r3, #10]
 8006b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f006 fbda 	bl	800d2e6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b4c:	82bb      	strh	r3, [r7, #20]
 8006b4e:	8abb      	ldrh	r3, [r7, #20]
 8006b50:	f083 0310 	eor.w	r3, r3, #16
 8006b54:	82bb      	strh	r3, [r7, #20]
 8006b56:	8abb      	ldrh	r3, [r7, #20]
 8006b58:	f083 0320 	eor.w	r3, r3, #32
 8006b5c:	82bb      	strh	r3, [r7, #20]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	8abb      	ldrh	r3, [r7, #20]
 8006b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3790      	adds	r7, #144	@ 0x90
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	607b      	str	r3, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	817b      	strh	r3, [r7, #10]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b9e:	897b      	ldrh	r3, [r7, #10]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00b      	beq.n	8006bc2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006baa:	897b      	ldrh	r3, [r7, #10]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	e009      	b.n	8006bd6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bc2:	897a      	ldrh	r2, [r7, #10]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006bd6:	893b      	ldrh	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d107      	bne.n	8006bec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2200      	movs	r2, #0
 8006be0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	80da      	strh	r2, [r3, #6]
 8006bea:	e00b      	b.n	8006c04 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	0c1b      	lsrs	r3, r3, #16
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
  hpcd->LPM_State = LPM_L0;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f043 0302 	orr.w	r3, r3, #2
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
	...

08006c68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c6c:	4b05      	ldr	r3, [pc, #20]	@ (8006c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a04      	ldr	r2, [pc, #16]	@ (8006c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c76:	6013      	str	r3, [r2, #0]
}
 8006c78:	bf00      	nop
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40007000 	.word	0x40007000

08006c88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006c8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ca0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40007000 	.word	0x40007000

08006ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb2:	d130      	bne.n	8006d16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cb4:	4b23      	ldr	r3, [pc, #140]	@ (8006d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cc0:	d038      	beq.n	8006d34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cc2:	4b20      	ldr	r3, [pc, #128]	@ (8006d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cca:	4a1e      	ldr	r2, [pc, #120]	@ (8006d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ccc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2232      	movs	r2, #50	@ 0x32
 8006cd8:	fb02 f303 	mul.w	r3, r2, r3
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006cde:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce2:	0c9b      	lsrs	r3, r3, #18
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ce8:	e002      	b.n	8006cf0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cf0:	4b14      	ldr	r3, [pc, #80]	@ (8006d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cfc:	d102      	bne.n	8006d04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1f2      	bne.n	8006cea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d04:	4b0f      	ldr	r3, [pc, #60]	@ (8006d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d10:	d110      	bne.n	8006d34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e00f      	b.n	8006d36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d16:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d22:	d007      	beq.n	8006d34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d24:	4b07      	ldr	r3, [pc, #28]	@ (8006d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d2c:	4a05      	ldr	r2, [pc, #20]	@ (8006d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40007000 	.word	0x40007000
 8006d48:	20000004 	.word	0x20000004
 8006d4c:	431bde83 	.word	0x431bde83

08006d50 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006d54:	4b05      	ldr	r3, [pc, #20]	@ (8006d6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	4a04      	ldr	r2, [pc, #16]	@ (8006d6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006d5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d5e:	6053      	str	r3, [r2, #4]
}
 8006d60:	bf00      	nop
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40007000 	.word	0x40007000

08006d70 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8006d7a:	4b11      	ldr	r3, [pc, #68]	@ (8006dc0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f023 0307 	bic.w	r3, r3, #7
 8006d82:	4a0f      	ldr	r2, [pc, #60]	@ (8006dc0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006d84:	f043 0302 	orr.w	r3, r3, #2
 8006d88:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006dc4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006d90:	f043 0304 	orr.w	r3, r3, #4
 8006d94:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006d96:	79fb      	ldrb	r3, [r7, #7]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006d9c:	bf30      	wfi
 8006d9e:	e002      	b.n	8006da6 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006da0:	bf40      	sev
    __WFE();
 8006da2:	bf20      	wfe
    __WFE();
 8006da4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006da6:	4b07      	ldr	r3, [pc, #28]	@ (8006dc4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	4a06      	ldr	r2, [pc, #24]	@ (8006dc4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006dac:	f023 0304 	bic.w	r3, r3, #4
 8006db0:	6113      	str	r3, [r2, #16]
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40007000 	.word	0x40007000
 8006dc4:	e000ed00 	.word	0xe000ed00

08006dc8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d102      	bne.n	8006ddc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f000 bc06 	b.w	80075e8 <HAL_RCC_OscConfig+0x820>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ddc:	4b96      	ldr	r3, [pc, #600]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006de6:	4b94      	ldr	r3, [pc, #592]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0310 	and.w	r3, r3, #16
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 80e4 	beq.w	8006fc6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <HAL_RCC_OscConfig+0x4c>
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2b0c      	cmp	r3, #12
 8006e08:	f040 808b 	bne.w	8006f22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	f040 8087 	bne.w	8006f22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e14:	4b88      	ldr	r3, [pc, #544]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCC_OscConfig+0x64>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e3dd      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1a      	ldr	r2, [r3, #32]
 8006e30:	4b81      	ldr	r3, [pc, #516]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d004      	beq.n	8006e46 <HAL_RCC_OscConfig+0x7e>
 8006e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e44:	e005      	b.n	8006e52 <HAL_RCC_OscConfig+0x8a>
 8006e46:	4b7c      	ldr	r3, [pc, #496]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e4c:	091b      	lsrs	r3, r3, #4
 8006e4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d223      	bcs.n	8006e9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fdbc 	bl	80079d8 <RCC_SetFlashLatencyFromMSIRange>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e3be      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e6a:	4b73      	ldr	r3, [pc, #460]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a72      	ldr	r2, [pc, #456]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006e70:	f043 0308 	orr.w	r3, r3, #8
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	4b70      	ldr	r3, [pc, #448]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	496d      	ldr	r1, [pc, #436]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e88:	4b6b      	ldr	r3, [pc, #428]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	4968      	ldr	r1, [pc, #416]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	604b      	str	r3, [r1, #4]
 8006e9c:	e025      	b.n	8006eea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e9e:	4b66      	ldr	r3, [pc, #408]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a65      	ldr	r2, [pc, #404]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006ea4:	f043 0308 	orr.w	r3, r3, #8
 8006ea8:	6013      	str	r3, [r2, #0]
 8006eaa:	4b63      	ldr	r3, [pc, #396]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	4960      	ldr	r1, [pc, #384]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ebc:	4b5e      	ldr	r3, [pc, #376]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	021b      	lsls	r3, r3, #8
 8006eca:	495b      	ldr	r1, [pc, #364]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fd7c 	bl	80079d8 <RCC_SetFlashLatencyFromMSIRange>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e37e      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006eea:	f000 fc85 	bl	80077f8 <HAL_RCC_GetSysClockFreq>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	4b51      	ldr	r3, [pc, #324]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	091b      	lsrs	r3, r3, #4
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	4950      	ldr	r1, [pc, #320]	@ (800703c <HAL_RCC_OscConfig+0x274>)
 8006efc:	5ccb      	ldrb	r3, [r1, r3]
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	fa22 f303 	lsr.w	r3, r2, r3
 8006f06:	4a4e      	ldr	r2, [pc, #312]	@ (8007040 <HAL_RCC_OscConfig+0x278>)
 8006f08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fc fdae 	bl	8003a70 <HAL_InitTick>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d052      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	e362      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d032      	beq.n	8006f90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f2a:	4b43      	ldr	r3, [pc, #268]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a42      	ldr	r2, [pc, #264]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f30:	f043 0301 	orr.w	r3, r3, #1
 8006f34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f36:	f7fc fdeb 	bl	8003b10 <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f3e:	f7fc fde7 	bl	8003b10 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e34b      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f50:	4b39      	ldr	r3, [pc, #228]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0f0      	beq.n	8006f3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f5c:	4b36      	ldr	r3, [pc, #216]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a35      	ldr	r2, [pc, #212]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f62:	f043 0308 	orr.w	r3, r3, #8
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	4b33      	ldr	r3, [pc, #204]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	4930      	ldr	r1, [pc, #192]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	021b      	lsls	r3, r3, #8
 8006f88:	492b      	ldr	r1, [pc, #172]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	604b      	str	r3, [r1, #4]
 8006f8e:	e01a      	b.n	8006fc6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f90:	4b29      	ldr	r3, [pc, #164]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a28      	ldr	r2, [pc, #160]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f9c:	f7fc fdb8 	bl	8003b10 <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fa4:	f7fc fdb4 	bl	8003b10 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e318      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006fb6:	4b20      	ldr	r3, [pc, #128]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f0      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x1dc>
 8006fc2:	e000      	b.n	8006fc6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d077      	beq.n	80070c2 <HAL_RCC_OscConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d005      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x21c>
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	2b0c      	cmp	r3, #12
 8006fdc:	d10e      	bne.n	8006ffc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d10b      	bne.n	8006ffc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fe4:	4b14      	ldr	r3, [pc, #80]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d067      	beq.n	80070c0 <HAL_RCC_OscConfig+0x2f8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d163      	bne.n	80070c0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e2f5      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007004:	d106      	bne.n	8007014 <HAL_RCC_OscConfig+0x24c>
 8007006:	4b0c      	ldr	r3, [pc, #48]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a0b      	ldr	r2, [pc, #44]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 800700c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e025      	b.n	8007060 <HAL_RCC_OscConfig+0x298>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800701c:	d114      	bne.n	8007048 <HAL_RCC_OscConfig+0x280>
 800701e:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a05      	ldr	r2, [pc, #20]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8007024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	4b03      	ldr	r3, [pc, #12]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a02      	ldr	r2, [pc, #8]	@ (8007038 <HAL_RCC_OscConfig+0x270>)
 8007030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	e013      	b.n	8007060 <HAL_RCC_OscConfig+0x298>
 8007038:	40021000 	.word	0x40021000
 800703c:	0801c02c 	.word	0x0801c02c
 8007040:	20000004 	.word	0x20000004
 8007044:	20000008 	.word	0x20000008
 8007048:	4ba2      	ldr	r3, [pc, #648]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4aa1      	ldr	r2, [pc, #644]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 800704e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	4b9f      	ldr	r3, [pc, #636]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a9e      	ldr	r2, [pc, #632]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 800705a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800705e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d015      	beq.n	8007094 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007068:	f7fc fd52 	bl	8003b10 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800706e:	e00a      	b.n	8007086 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007070:	f7fc fd4e 	bl	8003b10 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800707e:	4293      	cmp	r3, r2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e2b0      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007086:	4b93      	ldr	r3, [pc, #588]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0ee      	beq.n	8007070 <HAL_RCC_OscConfig+0x2a8>
 8007092:	e016      	b.n	80070c2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fc fd3c 	bl	8003b10 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800709a:	e00a      	b.n	80070b2 <HAL_RCC_OscConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800709c:	f7fc fd38 	bl	8003b10 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e29a      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070b2:	4b88      	ldr	r3, [pc, #544]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1ee      	bne.n	800709c <HAL_RCC_OscConfig+0x2d4>
 80070be:	e000      	b.n	80070c2 <HAL_RCC_OscConfig+0x2fa>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d060      	beq.n	8007190 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d005      	beq.n	80070e0 <HAL_RCC_OscConfig+0x318>
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	2b0c      	cmp	r3, #12
 80070d8:	d119      	bne.n	800710e <HAL_RCC_OscConfig+0x346>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d116      	bne.n	800710e <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070e0:	4b7c      	ldr	r3, [pc, #496]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <HAL_RCC_OscConfig+0x330>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e277      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f8:	4b76      	ldr	r3, [pc, #472]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	061b      	lsls	r3, r3, #24
 8007106:	4973      	ldr	r1, [pc, #460]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007108:	4313      	orrs	r3, r2
 800710a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800710c:	e040      	b.n	8007190 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d023      	beq.n	800715e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007116:	4b6f      	ldr	r3, [pc, #444]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a6e      	ldr	r2, [pc, #440]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 800711c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007122:	f7fc fcf5 	bl	8003b10 <HAL_GetTick>
 8007126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007128:	e008      	b.n	800713c <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800712a:	f7fc fcf1 	bl	8003b10 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e255      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800713c:	4b65      	ldr	r3, [pc, #404]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0f0      	beq.n	800712a <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007148:	4b62      	ldr	r3, [pc, #392]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	061b      	lsls	r3, r3, #24
 8007156:	495f      	ldr	r1, [pc, #380]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007158:	4313      	orrs	r3, r2
 800715a:	604b      	str	r3, [r1, #4]
 800715c:	e018      	b.n	8007190 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800715e:	4b5d      	ldr	r3, [pc, #372]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a5c      	ldr	r2, [pc, #368]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716a:	f7fc fcd1 	bl	8003b10 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007172:	f7fc fccd 	bl	8003b10 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e231      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007184:	4b53      	ldr	r3, [pc, #332]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f0      	bne.n	8007172 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d03c      	beq.n	8007216 <HAL_RCC_OscConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01c      	beq.n	80071de <HAL_RCC_OscConfig+0x416>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071a4:	4b4b      	ldr	r3, [pc, #300]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80071a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071aa:	4a4a      	ldr	r2, [pc, #296]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80071ac:	f043 0301 	orr.w	r3, r3, #1
 80071b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b4:	f7fc fcac 	bl	8003b10 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x406>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071bc:	f7fc fca8 	bl	8003b10 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x406>
        {
          return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e20c      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071ce:	4b41      	ldr	r3, [pc, #260]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80071d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0ef      	beq.n	80071bc <HAL_RCC_OscConfig+0x3f4>
 80071dc:	e01b      	b.n	8007216 <HAL_RCC_OscConfig+0x44e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071de:	4b3d      	ldr	r3, [pc, #244]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80071e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071e4:	4a3b      	ldr	r2, [pc, #236]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80071e6:	f023 0301 	bic.w	r3, r3, #1
 80071ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ee:	f7fc fc8f 	bl	8003b10 <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x440>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071f6:	f7fc fc8b 	bl	8003b10 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e1ef      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007208:	4b32      	ldr	r3, [pc, #200]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 800720a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1ef      	bne.n	80071f6 <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 80a6 	beq.w	8007370 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007224:	2300      	movs	r3, #0
 8007226:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007228:	4b2a      	ldr	r3, [pc, #168]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 800722a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10d      	bne.n	8007250 <HAL_RCC_OscConfig+0x488>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007234:	4b27      	ldr	r3, [pc, #156]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007238:	4a26      	ldr	r2, [pc, #152]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 800723a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800723e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007240:	4b24      	ldr	r3, [pc, #144]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800724c:	2301      	movs	r3, #1
 800724e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007250:	4b21      	ldr	r3, [pc, #132]	@ (80072d8 <HAL_RCC_OscConfig+0x510>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007258:	2b00      	cmp	r3, #0
 800725a:	d118      	bne.n	800728e <HAL_RCC_OscConfig+0x4c6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800725c:	4b1e      	ldr	r3, [pc, #120]	@ (80072d8 <HAL_RCC_OscConfig+0x510>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1d      	ldr	r2, [pc, #116]	@ (80072d8 <HAL_RCC_OscConfig+0x510>)
 8007262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007266:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007268:	f7fc fc52 	bl	8003b10 <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x4ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007270:	f7fc fc4e 	bl	8003b10 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e1b2      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007282:	4b15      	ldr	r3, [pc, #84]	@ (80072d8 <HAL_RCC_OscConfig+0x510>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCC_OscConfig+0x4a8>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d108      	bne.n	80072a8 <HAL_RCC_OscConfig+0x4e0>
 8007296:	4b0f      	ldr	r3, [pc, #60]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729c:	4a0d      	ldr	r2, [pc, #52]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 800729e:	f043 0301 	orr.w	r3, r3, #1
 80072a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072a6:	e029      	b.n	80072fc <HAL_RCC_OscConfig+0x534>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b05      	cmp	r3, #5
 80072ae:	d115      	bne.n	80072dc <HAL_RCC_OscConfig+0x514>
 80072b0:	4b08      	ldr	r3, [pc, #32]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b6:	4a07      	ldr	r2, [pc, #28]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80072b8:	f043 0304 	orr.w	r3, r3, #4
 80072bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072c0:	4b04      	ldr	r3, [pc, #16]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c6:	4a03      	ldr	r2, [pc, #12]	@ (80072d4 <HAL_RCC_OscConfig+0x50c>)
 80072c8:	f043 0301 	orr.w	r3, r3, #1
 80072cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072d0:	e014      	b.n	80072fc <HAL_RCC_OscConfig+0x534>
 80072d2:	bf00      	nop
 80072d4:	40021000 	.word	0x40021000
 80072d8:	40007000 	.word	0x40007000
 80072dc:	4b9a      	ldr	r3, [pc, #616]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 80072de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e2:	4a99      	ldr	r2, [pc, #612]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 80072e4:	f023 0301 	bic.w	r3, r3, #1
 80072e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072ec:	4b96      	ldr	r3, [pc, #600]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 80072ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f2:	4a95      	ldr	r2, [pc, #596]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 80072f4:	f023 0304 	bic.w	r3, r3, #4
 80072f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d016      	beq.n	8007332 <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007304:	f7fc fc04 	bl	8003b10 <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800730a:	e00a      	b.n	8007322 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730c:	f7fc fc00 	bl	8003b10 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800731a:	4293      	cmp	r3, r2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e162      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007322:	4b89      	ldr	r3, [pc, #548]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0ed      	beq.n	800730c <HAL_RCC_OscConfig+0x544>
 8007330:	e015      	b.n	800735e <HAL_RCC_OscConfig+0x596>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007332:	f7fc fbed 	bl	8003b10 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007338:	e00a      	b.n	8007350 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800733a:	f7fc fbe9 	bl	8003b10 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007348:	4293      	cmp	r3, r2
 800734a:	d901      	bls.n	8007350 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e14b      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007350:	4b7d      	ldr	r3, [pc, #500]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1ed      	bne.n	800733a <HAL_RCC_OscConfig+0x572>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800735e:	7ffb      	ldrb	r3, [r7, #31]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d105      	bne.n	8007370 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007364:	4b78      	ldr	r3, [pc, #480]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007368:	4a77      	ldr	r2, [pc, #476]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 800736a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800736e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d03c      	beq.n	80073f6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01c      	beq.n	80073be <HAL_RCC_OscConfig+0x5f6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007384:	4b70      	ldr	r3, [pc, #448]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800738a:	4a6f      	ldr	r2, [pc, #444]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 800738c:	f043 0301 	orr.w	r3, r3, #1
 8007390:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007394:	f7fc fbbc 	bl	8003b10 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800739a:	e008      	b.n	80073ae <HAL_RCC_OscConfig+0x5e6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800739c:	f7fc fbb8 	bl	8003b10 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0x5e6>
        {
          return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e11c      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073ae:	4b66      	ldr	r3, [pc, #408]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 80073b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0ef      	beq.n	800739c <HAL_RCC_OscConfig+0x5d4>
 80073bc:	e01b      	b.n	80073f6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073be:	4b62      	ldr	r3, [pc, #392]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 80073c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073c4:	4a60      	ldr	r2, [pc, #384]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ce:	f7fc fb9f 	bl	8003b10 <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073d4:	e008      	b.n	80073e8 <HAL_RCC_OscConfig+0x620>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073d6:	f7fc fb9b 	bl	8003b10 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x620>
        {
          return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e0ff      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073e8:	4b57      	ldr	r3, [pc, #348]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 80073ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1ef      	bne.n	80073d6 <HAL_RCC_OscConfig+0x60e>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 80f3 	beq.w	80075e6 <HAL_RCC_OscConfig+0x81e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	2b02      	cmp	r3, #2
 8007406:	f040 80c9 	bne.w	800759c <HAL_RCC_OscConfig+0x7d4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800740a:	4b4f      	ldr	r3, [pc, #316]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f003 0203 	and.w	r2, r3, #3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741a:	429a      	cmp	r2, r3
 800741c:	d12c      	bne.n	8007478 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007428:	3b01      	subs	r3, #1
 800742a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800742c:	429a      	cmp	r2, r3
 800742e:	d123      	bne.n	8007478 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800743c:	429a      	cmp	r2, r3
 800743e:	d11b      	bne.n	8007478 <HAL_RCC_OscConfig+0x6b0>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800744c:	429a      	cmp	r2, r3
 800744e:	d113      	bne.n	8007478 <HAL_RCC_OscConfig+0x6b0>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	3b01      	subs	r3, #1
 800745e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007460:	429a      	cmp	r2, r3
 8007462:	d109      	bne.n	8007478 <HAL_RCC_OscConfig+0x6b0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746e:	085b      	lsrs	r3, r3, #1
 8007470:	3b01      	subs	r3, #1
 8007472:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007474:	429a      	cmp	r2, r3
 8007476:	d06b      	beq.n	8007550 <HAL_RCC_OscConfig+0x788>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b0c      	cmp	r3, #12
 800747c:	d062      	beq.n	8007544 <HAL_RCC_OscConfig+0x77c>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800747e:	4b32      	ldr	r3, [pc, #200]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e0ac      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800748e:	4b2e      	ldr	r3, [pc, #184]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a2d      	ldr	r2, [pc, #180]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007494:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007498:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800749a:	f7fc fb39 	bl	8003b10 <HAL_GetTick>
 800749e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a0:	e008      	b.n	80074b4 <HAL_RCC_OscConfig+0x6ec>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a2:	f7fc fb35 	bl	8003b10 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x6ec>
              {
                return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e099      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074b4:	4b24      	ldr	r3, [pc, #144]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1f0      	bne.n	80074a2 <HAL_RCC_OscConfig+0x6da>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074c0:	4b21      	ldr	r3, [pc, #132]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	4b21      	ldr	r3, [pc, #132]	@ (800754c <HAL_RCC_OscConfig+0x784>)
 80074c6:	4013      	ands	r3, r2
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80074d0:	3a01      	subs	r2, #1
 80074d2:	0112      	lsls	r2, r2, #4
 80074d4:	4311      	orrs	r1, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80074da:	0212      	lsls	r2, r2, #8
 80074dc:	4311      	orrs	r1, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80074e2:	0852      	lsrs	r2, r2, #1
 80074e4:	3a01      	subs	r2, #1
 80074e6:	0552      	lsls	r2, r2, #21
 80074e8:	4311      	orrs	r1, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80074ee:	0852      	lsrs	r2, r2, #1
 80074f0:	3a01      	subs	r2, #1
 80074f2:	0652      	lsls	r2, r2, #25
 80074f4:	4311      	orrs	r1, r2
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80074fa:	06d2      	lsls	r2, r2, #27
 80074fc:	430a      	orrs	r2, r1
 80074fe:	4912      	ldr	r1, [pc, #72]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007500:	4313      	orrs	r3, r2
 8007502:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007504:	4b10      	ldr	r3, [pc, #64]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a0f      	ldr	r2, [pc, #60]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 800750a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800750e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007510:	4b0d      	ldr	r3, [pc, #52]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	4a0c      	ldr	r2, [pc, #48]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800751a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800751c:	f7fc faf8 	bl	8003b10 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x76e>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007524:	f7fc faf4 	bl	8003b10 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x76e>
              {
                return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e058      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007536:	4b04      	ldr	r3, [pc, #16]	@ (8007548 <HAL_RCC_OscConfig+0x780>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <HAL_RCC_OscConfig+0x75c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007542:	e050      	b.n	80075e6 <HAL_RCC_OscConfig+0x81e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e04f      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
 8007548:	40021000 	.word	0x40021000
 800754c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007550:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d144      	bne.n	80075e6 <HAL_RCC_OscConfig+0x81e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800755c:	4b24      	ldr	r3, [pc, #144]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a23      	ldr	r2, [pc, #140]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 8007562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007566:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007568:	4b21      	ldr	r3, [pc, #132]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4a20      	ldr	r2, [pc, #128]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 800756e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007572:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007574:	f7fc facc 	bl	8003b10 <HAL_GetTick>
 8007578:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800757a:	e008      	b.n	800758e <HAL_RCC_OscConfig+0x7c6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800757c:	f7fc fac8 	bl	8003b10 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x7c6>
            {
              return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e02c      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800758e:	4b18      	ldr	r3, [pc, #96]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0f0      	beq.n	800757c <HAL_RCC_OscConfig+0x7b4>
 800759a:	e024      	b.n	80075e6 <HAL_RCC_OscConfig+0x81e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b0c      	cmp	r3, #12
 80075a0:	d01f      	beq.n	80075e2 <HAL_RCC_OscConfig+0x81a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a2:	4b13      	ldr	r3, [pc, #76]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a12      	ldr	r2, [pc, #72]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 80075a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ae:	f7fc faaf 	bl	8003b10 <HAL_GetTick>
 80075b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x800>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b6:	f7fc faab 	bl	8003b10 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x800>
          {
            return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e00f      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075c8:	4b09      	ldr	r3, [pc, #36]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1f0      	bne.n	80075b6 <HAL_RCC_OscConfig+0x7ee>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80075d4:	4b06      	ldr	r3, [pc, #24]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	4905      	ldr	r1, [pc, #20]	@ (80075f0 <HAL_RCC_OscConfig+0x828>)
 80075da:	4b06      	ldr	r3, [pc, #24]	@ (80075f4 <HAL_RCC_OscConfig+0x82c>)
 80075dc:	4013      	ands	r3, r2
 80075de:	60cb      	str	r3, [r1, #12]
 80075e0:	e001      	b.n	80075e6 <HAL_RCC_OscConfig+0x81e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <HAL_RCC_OscConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3720      	adds	r7, #32
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40021000 	.word	0x40021000
 80075f4:	feeefffc 	.word	0xfeeefffc

080075f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e0e7      	b.n	80077dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800760c:	4b75      	ldr	r3, [pc, #468]	@ (80077e4 <HAL_RCC_ClockConfig+0x1ec>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d910      	bls.n	800763c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761a:	4b72      	ldr	r3, [pc, #456]	@ (80077e4 <HAL_RCC_ClockConfig+0x1ec>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f023 0207 	bic.w	r2, r3, #7
 8007622:	4970      	ldr	r1, [pc, #448]	@ (80077e4 <HAL_RCC_ClockConfig+0x1ec>)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	4313      	orrs	r3, r2
 8007628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800762a:	4b6e      	ldr	r3, [pc, #440]	@ (80077e4 <HAL_RCC_ClockConfig+0x1ec>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e0cf      	b.n	80077dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d010      	beq.n	800766a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	4b66      	ldr	r3, [pc, #408]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007654:	429a      	cmp	r2, r3
 8007656:	d908      	bls.n	800766a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007658:	4b63      	ldr	r3, [pc, #396]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	4960      	ldr	r1, [pc, #384]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007666:	4313      	orrs	r3, r2
 8007668:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d04c      	beq.n	8007710 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b03      	cmp	r3, #3
 800767c:	d107      	bne.n	800768e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800767e:	4b5a      	ldr	r3, [pc, #360]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d121      	bne.n	80076ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e0a6      	b.n	80077dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d107      	bne.n	80076a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007696:	4b54      	ldr	r3, [pc, #336]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d115      	bne.n	80076ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e09a      	b.n	80077dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d107      	bne.n	80076be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076ae:	4b4e      	ldr	r3, [pc, #312]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e08e      	b.n	80077dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076be:	4b4a      	ldr	r3, [pc, #296]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e086      	b.n	80077dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076ce:	4b46      	ldr	r3, [pc, #280]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f023 0203 	bic.w	r2, r3, #3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	4943      	ldr	r1, [pc, #268]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076e0:	f7fc fa16 	bl	8003b10 <HAL_GetTick>
 80076e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076e6:	e00a      	b.n	80076fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076e8:	f7fc fa12 	bl	8003b10 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e06e      	b.n	80077dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076fe:	4b3a      	ldr	r3, [pc, #232]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f003 020c 	and.w	r2, r3, #12
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	429a      	cmp	r2, r3
 800770e:	d1eb      	bne.n	80076e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d010      	beq.n	800773e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	4b31      	ldr	r3, [pc, #196]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007728:	429a      	cmp	r2, r3
 800772a:	d208      	bcs.n	800773e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800772c:	4b2e      	ldr	r3, [pc, #184]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	492b      	ldr	r1, [pc, #172]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 800773a:	4313      	orrs	r3, r2
 800773c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800773e:	4b29      	ldr	r3, [pc, #164]	@ (80077e4 <HAL_RCC_ClockConfig+0x1ec>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d210      	bcs.n	800776e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800774c:	4b25      	ldr	r3, [pc, #148]	@ (80077e4 <HAL_RCC_ClockConfig+0x1ec>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f023 0207 	bic.w	r2, r3, #7
 8007754:	4923      	ldr	r1, [pc, #140]	@ (80077e4 <HAL_RCC_ClockConfig+0x1ec>)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	4313      	orrs	r3, r2
 800775a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800775c:	4b21      	ldr	r3, [pc, #132]	@ (80077e4 <HAL_RCC_ClockConfig+0x1ec>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d001      	beq.n	800776e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e036      	b.n	80077dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0304 	and.w	r3, r3, #4
 8007776:	2b00      	cmp	r3, #0
 8007778:	d008      	beq.n	800778c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800777a:	4b1b      	ldr	r3, [pc, #108]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	4918      	ldr	r1, [pc, #96]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007788:	4313      	orrs	r3, r2
 800778a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d009      	beq.n	80077ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007798:	4b13      	ldr	r3, [pc, #76]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	4910      	ldr	r1, [pc, #64]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077ac:	f000 f824 	bl	80077f8 <HAL_RCC_GetSysClockFreq>
 80077b0:	4602      	mov	r2, r0
 80077b2:	4b0d      	ldr	r3, [pc, #52]	@ (80077e8 <HAL_RCC_ClockConfig+0x1f0>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	091b      	lsrs	r3, r3, #4
 80077b8:	f003 030f 	and.w	r3, r3, #15
 80077bc:	490b      	ldr	r1, [pc, #44]	@ (80077ec <HAL_RCC_ClockConfig+0x1f4>)
 80077be:	5ccb      	ldrb	r3, [r1, r3]
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	fa22 f303 	lsr.w	r3, r2, r3
 80077c8:	4a09      	ldr	r2, [pc, #36]	@ (80077f0 <HAL_RCC_ClockConfig+0x1f8>)
 80077ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80077cc:	4b09      	ldr	r3, [pc, #36]	@ (80077f4 <HAL_RCC_ClockConfig+0x1fc>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fc f94d 	bl	8003a70 <HAL_InitTick>
 80077d6:	4603      	mov	r3, r0
 80077d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80077da:	7afb      	ldrb	r3, [r7, #11]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40022000 	.word	0x40022000
 80077e8:	40021000 	.word	0x40021000
 80077ec:	0801c02c 	.word	0x0801c02c
 80077f0:	20000004 	.word	0x20000004
 80077f4:	20000008 	.word	0x20000008

080077f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b089      	sub	sp, #36	@ 0x24
 80077fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	2300      	movs	r3, #0
 8007804:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007806:	4b3f      	ldr	r3, [pc, #252]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007810:	4b3c      	ldr	r3, [pc, #240]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <HAL_RCC_GetSysClockFreq+0x34>
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	2b0c      	cmp	r3, #12
 8007824:	d121      	bne.n	800786a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d11e      	bne.n	800786a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800782c:	4b35      	ldr	r3, [pc, #212]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x10c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d107      	bne.n	8007848 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007838:	4b32      	ldr	r3, [pc, #200]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x10c>)
 800783a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800783e:	0a1b      	lsrs	r3, r3, #8
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	e005      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007848:	4b2e      	ldr	r3, [pc, #184]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x10c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	091b      	lsrs	r3, r3, #4
 800784e:	f003 030f 	and.w	r3, r3, #15
 8007852:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007854:	4a2c      	ldr	r2, [pc, #176]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x110>)
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800785c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10e      	bne.n	8007882 <HAL_RCC_GetSysClockFreq+0x8a>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007868:	e00b      	b.n	8007882 <HAL_RCC_GetSysClockFreq+0x8a>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b04      	cmp	r3, #4
 800786e:	d102      	bne.n	8007876 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007870:	4b26      	ldr	r3, [pc, #152]	@ (800790c <HAL_RCC_GetSysClockFreq+0x114>)
 8007872:	61bb      	str	r3, [r7, #24]
 8007874:	e005      	b.n	8007882 <HAL_RCC_GetSysClockFreq+0x8a>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b08      	cmp	r3, #8
 800787a:	d102      	bne.n	8007882 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800787c:	f44f 037a 	mov.w	r3, #16384000	@ 0xfa0000
 8007880:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b0c      	cmp	r3, #12
 8007886:	d135      	bne.n	80078f4 <HAL_RCC_GetSysClockFreq+0xfc>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007888:	4b1e      	ldr	r3, [pc, #120]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x10c>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d003      	beq.n	80078a0 <HAL_RCC_GetSysClockFreq+0xa8>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b03      	cmp	r3, #3
 800789c:	d003      	beq.n	80078a6 <HAL_RCC_GetSysClockFreq+0xae>
 800789e:	e006      	b.n	80078ae <HAL_RCC_GetSysClockFreq+0xb6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80078a0:	4b1a      	ldr	r3, [pc, #104]	@ (800790c <HAL_RCC_GetSysClockFreq+0x114>)
 80078a2:	617b      	str	r3, [r7, #20]
      break;
 80078a4:	e006      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80078a6:	f44f 037a 	mov.w	r3, #16384000	@ 0xfa0000
 80078aa:	617b      	str	r3, [r7, #20]
      break;
 80078ac:	e002      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	617b      	str	r3, [r7, #20]
      break;
 80078b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078b4:	4b13      	ldr	r3, [pc, #76]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	091b      	lsrs	r3, r3, #4
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	3301      	adds	r3, #1
 80078c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80078c2:	4b10      	ldr	r3, [pc, #64]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	0a1b      	lsrs	r3, r3, #8
 80078c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	fb03 f202 	mul.w	r2, r3, r2
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078da:	4b0a      	ldr	r3, [pc, #40]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	0e5b      	lsrs	r3, r3, #25
 80078e0:	f003 0303 	and.w	r3, r3, #3
 80078e4:	3301      	adds	r3, #1
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80078f4:	69bb      	ldr	r3, [r7, #24]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3724      	adds	r7, #36	@ 0x24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	40021000 	.word	0x40021000
 8007908:	0801c044 	.word	0x0801c044
 800790c:	00f42400 	.word	0x00f42400

08007910 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007910:	b480      	push	{r7}
 8007912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007914:	4b03      	ldr	r3, [pc, #12]	@ (8007924 <HAL_RCC_GetHCLKFreq+0x14>)
 8007916:	681b      	ldr	r3, [r3, #0]
}
 8007918:	4618      	mov	r0, r3
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000004 	.word	0x20000004

08007928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800792c:	f7ff fff0 	bl	8007910 <HAL_RCC_GetHCLKFreq>
 8007930:	4602      	mov	r2, r0
 8007932:	4b06      	ldr	r3, [pc, #24]	@ (800794c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	0a1b      	lsrs	r3, r3, #8
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	4904      	ldr	r1, [pc, #16]	@ (8007950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800793e:	5ccb      	ldrb	r3, [r1, r3]
 8007940:	f003 031f 	and.w	r3, r3, #31
 8007944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007948:	4618      	mov	r0, r3
 800794a:	bd80      	pop	{r7, pc}
 800794c:	40021000 	.word	0x40021000
 8007950:	0801c03c 	.word	0x0801c03c

08007954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007958:	f7ff ffda 	bl	8007910 <HAL_RCC_GetHCLKFreq>
 800795c:	4602      	mov	r2, r0
 800795e:	4b06      	ldr	r3, [pc, #24]	@ (8007978 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	0adb      	lsrs	r3, r3, #11
 8007964:	f003 0307 	and.w	r3, r3, #7
 8007968:	4904      	ldr	r1, [pc, #16]	@ (800797c <HAL_RCC_GetPCLK2Freq+0x28>)
 800796a:	5ccb      	ldrb	r3, [r1, r3]
 800796c:	f003 031f 	and.w	r3, r3, #31
 8007970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007974:	4618      	mov	r0, r3
 8007976:	bd80      	pop	{r7, pc}
 8007978:	40021000 	.word	0x40021000
 800797c:	0801c03c 	.word	0x0801c03c

08007980 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8007984:	4b05      	ldr	r3, [pc, #20]	@ (800799c <HAL_RCC_EnableCSS+0x1c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a04      	ldr	r2, [pc, #16]	@ (800799c <HAL_RCC_EnableCSS+0x1c>)
 800798a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800798e:	6013      	str	r3, [r2, #0]
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40021000 	.word	0x40021000

080079a0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80079a4:	4b07      	ldr	r3, [pc, #28]	@ (80079c4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079b0:	d105      	bne.n	80079be <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80079b2:	f000 f809 	bl	80079c8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80079b6:	4b03      	ldr	r3, [pc, #12]	@ (80079c4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80079b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079bc:	621a      	str	r2, [r3, #32]
  }
}
 80079be:	bf00      	nop
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	40021000 	.word	0x40021000

080079c8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
	...

080079d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80079e0:	2300      	movs	r3, #0
 80079e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80079e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80079f0:	f7ff f94a 	bl	8006c88 <HAL_PWREx_GetVoltageRange>
 80079f4:	6178      	str	r0, [r7, #20]
 80079f6:	e014      	b.n	8007a22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80079f8:	4b25      	ldr	r3, [pc, #148]	@ (8007a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fc:	4a24      	ldr	r2, [pc, #144]	@ (8007a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a02:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a04:	4b22      	ldr	r3, [pc, #136]	@ (8007a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a10:	f7ff f93a 	bl	8006c88 <HAL_PWREx_GetVoltageRange>
 8007a14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a16:	4b1e      	ldr	r3, [pc, #120]	@ (8007a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8007a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a28:	d10b      	bne.n	8007a42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b80      	cmp	r3, #128	@ 0x80
 8007a2e:	d919      	bls.n	8007a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2ba0      	cmp	r3, #160	@ 0xa0
 8007a34:	d902      	bls.n	8007a3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a36:	2302      	movs	r3, #2
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	e013      	b.n	8007a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	613b      	str	r3, [r7, #16]
 8007a40:	e010      	b.n	8007a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b80      	cmp	r3, #128	@ 0x80
 8007a46:	d902      	bls.n	8007a4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a48:	2303      	movs	r3, #3
 8007a4a:	613b      	str	r3, [r7, #16]
 8007a4c:	e00a      	b.n	8007a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b80      	cmp	r3, #128	@ 0x80
 8007a52:	d102      	bne.n	8007a5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a54:	2302      	movs	r3, #2
 8007a56:	613b      	str	r3, [r7, #16]
 8007a58:	e004      	b.n	8007a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b70      	cmp	r3, #112	@ 0x70
 8007a5e:	d101      	bne.n	8007a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a60:	2301      	movs	r3, #1
 8007a62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a64:	4b0b      	ldr	r3, [pc, #44]	@ (8007a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f023 0207 	bic.w	r2, r3, #7
 8007a6c:	4909      	ldr	r1, [pc, #36]	@ (8007a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a74:	4b07      	ldr	r3, [pc, #28]	@ (8007a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d001      	beq.n	8007a86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40021000 	.word	0x40021000
 8007a94:	40022000 	.word	0x40022000

08007a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d031      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007abc:	d01a      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007abe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ac2:	d814      	bhi.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d009      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ac8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007acc:	d10f      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007ace:	4b5d      	ldr	r3, [pc, #372]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ad8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ada:	e00c      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fa44 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007aec:	e003      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	74fb      	strb	r3, [r7, #19]
      break;
 8007af2:	e000      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007af6:	7cfb      	ldrb	r3, [r7, #19]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10b      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007afc:	4b51      	ldr	r3, [pc, #324]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b0a:	494e      	ldr	r1, [pc, #312]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007b12:	e001      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b14:	7cfb      	ldrb	r3, [r7, #19]
 8007b16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 809e 	beq.w	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b26:	2300      	movs	r3, #0
 8007b28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b2a:	4b46      	ldr	r3, [pc, #280]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e000      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00d      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b40:	4b40      	ldr	r3, [pc, #256]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b44:	4a3f      	ldr	r2, [pc, #252]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b54:	60bb      	str	r3, [r7, #8]
 8007b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a39      	ldr	r2, [pc, #228]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b68:	f7fb ffd2 	bl	8003b10 <HAL_GetTick>
 8007b6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b6e:	e009      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b70:	f7fb ffce 	bl	8003b10 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d902      	bls.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	74fb      	strb	r3, [r7, #19]
        break;
 8007b82:	e005      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b84:	4b30      	ldr	r3, [pc, #192]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0ef      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007b90:	7cfb      	ldrb	r3, [r7, #19]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d15a      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b96:	4b2b      	ldr	r3, [pc, #172]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ba0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01e      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d019      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bb2:	4b24      	ldr	r3, [pc, #144]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bbe:	4b21      	ldr	r3, [pc, #132]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bce:	4b1d      	ldr	r3, [pc, #116]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bde:	4a19      	ldr	r2, [pc, #100]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d016      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf0:	f7fb ff8e 	bl	8003b10 <HAL_GetTick>
 8007bf4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bf6:	e00b      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bf8:	f7fb ff8a 	bl	8003b10 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d902      	bls.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	74fb      	strb	r3, [r7, #19]
            break;
 8007c0e:	e006      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c10:	4b0c      	ldr	r3, [pc, #48]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0ec      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007c1e:	7cfb      	ldrb	r3, [r7, #19]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c24:	4b07      	ldr	r3, [pc, #28]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c32:	4904      	ldr	r1, [pc, #16]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007c3a:	e009      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c3c:	7cfb      	ldrb	r3, [r7, #19]
 8007c3e:	74bb      	strb	r3, [r7, #18]
 8007c40:	e006      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007c42:	bf00      	nop
 8007c44:	40021000 	.word	0x40021000
 8007c48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4c:	7cfb      	ldrb	r3, [r7, #19]
 8007c4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c50:	7c7b      	ldrb	r3, [r7, #17]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d105      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c56:	4b9e      	ldr	r3, [pc, #632]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c5a:	4a9d      	ldr	r2, [pc, #628]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c6e:	4b98      	ldr	r3, [pc, #608]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c74:	f023 0203 	bic.w	r2, r3, #3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	4994      	ldr	r1, [pc, #592]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c90:	4b8f      	ldr	r3, [pc, #572]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c96:	f023 020c 	bic.w	r2, r3, #12
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9e:	498c      	ldr	r1, [pc, #560]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0304 	and.w	r3, r3, #4
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cb2:	4b87      	ldr	r3, [pc, #540]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc0:	4983      	ldr	r1, [pc, #524]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cd4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce2:	497b      	ldr	r1, [pc, #492]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cf6:	4b76      	ldr	r3, [pc, #472]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d04:	4972      	ldr	r1, [pc, #456]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d18:	4b6d      	ldr	r3, [pc, #436]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d1e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d26:	496a      	ldr	r1, [pc, #424]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d3a:	4b65      	ldr	r3, [pc, #404]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d48:	4961      	ldr	r1, [pc, #388]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d5c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d62:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d6a:	4959      	ldr	r1, [pc, #356]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d7e:	4b54      	ldr	r3, [pc, #336]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8c:	4950      	ldr	r1, [pc, #320]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007da0:	4b4b      	ldr	r3, [pc, #300]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dae:	4948      	ldr	r1, [pc, #288]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dc2:	4b43      	ldr	r3, [pc, #268]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dc8:	f023 0203 	bic.w	r2, r3, #3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd0:	493f      	ldr	r1, [pc, #252]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d028      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007de4:	4b3a      	ldr	r3, [pc, #232]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007df2:	4937      	ldr	r1, [pc, #220]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e02:	d106      	bne.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e04:	4b32      	ldr	r3, [pc, #200]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	4a31      	ldr	r2, [pc, #196]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e0e:	60d3      	str	r3, [r2, #12]
 8007e10:	e011      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e1a:	d10c      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	2101      	movs	r1, #1
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 f8a4 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007e2c:	7cfb      	ldrb	r3, [r7, #19]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8007e32:	7cfb      	ldrb	r3, [r7, #19]
 8007e34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d028      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e42:	4b23      	ldr	r3, [pc, #140]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e50:	491f      	ldr	r1, [pc, #124]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e60:	d106      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e62:	4b1b      	ldr	r3, [pc, #108]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	4a1a      	ldr	r2, [pc, #104]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e6c:	60d3      	str	r3, [r2, #12]
 8007e6e:	e011      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e78:	d10c      	bne.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	2101      	movs	r1, #1
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 f875 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 8007e86:	4603      	mov	r3, r0
 8007e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e8a:	7cfb      	ldrb	r3, [r7, #19]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8007e90:	7cfb      	ldrb	r3, [r7, #19]
 8007e92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d02b      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eae:	4908      	ldr	r1, [pc, #32]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ebe:	d109      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ec0:	4b03      	ldr	r3, [pc, #12]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	4a02      	ldr	r2, [pc, #8]	@ (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eca:	60d3      	str	r3, [r2, #12]
 8007ecc:	e014      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8007ece:	bf00      	nop
 8007ed0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007edc:	d10c      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 f843 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 8007eea:	4603      	mov	r3, r0
 8007eec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007eee:	7cfb      	ldrb	r3, [r7, #19]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8007ef4:	7cfb      	ldrb	r3, [r7, #19]
 8007ef6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01c      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f04:	4b19      	ldr	r3, [pc, #100]	@ (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f12:	4916      	ldr	r1, [pc, #88]	@ (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f22:	d10c      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3304      	adds	r3, #4
 8007f28:	2102      	movs	r1, #2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f820 	bl	8007f70 <RCCEx_PLLSAI1_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f34:	7cfb      	ldrb	r3, [r7, #19]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8007f3a:	7cfb      	ldrb	r3, [r7, #19]
 8007f3c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f4a:	4b08      	ldr	r3, [pc, #32]	@ (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f58:	4904      	ldr	r1, [pc, #16]	@ (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f60:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40021000 	.word	0x40021000

08007f70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f7e:	4b74      	ldr	r3, [pc, #464]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007f8a:	4b71      	ldr	r3, [pc, #452]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f003 0203 	and.w	r2, r3, #3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d10d      	bne.n	8007fb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
       ||
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007fa2:	4b6b      	ldr	r3, [pc, #428]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	091b      	lsrs	r3, r3, #4
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
       ||
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d047      	beq.n	8008046 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	73fb      	strb	r3, [r7, #15]
 8007fba:	e044      	b.n	8008046 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d018      	beq.n	8007ff6 <RCCEx_PLLSAI1_Config+0x86>
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d825      	bhi.n	8008014 <RCCEx_PLLSAI1_Config+0xa4>
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d002      	beq.n	8007fd2 <RCCEx_PLLSAI1_Config+0x62>
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d009      	beq.n	8007fe4 <RCCEx_PLLSAI1_Config+0x74>
 8007fd0:	e020      	b.n	8008014 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d11d      	bne.n	800801a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fe2:	e01a      	b.n	800801a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d116      	bne.n	800801e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ff4:	e013      	b.n	800801e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ff6:	4b56      	ldr	r3, [pc, #344]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10f      	bne.n	8008022 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008002:	4b53      	ldr	r3, [pc, #332]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d109      	bne.n	8008022 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008012:	e006      	b.n	8008022 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
      break;
 8008018:	e004      	b.n	8008024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800801a:	bf00      	nop
 800801c:	e002      	b.n	8008024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800801e:	bf00      	nop
 8008020:	e000      	b.n	8008024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008022:	bf00      	nop
    }

    if(status == HAL_OK)
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10d      	bne.n	8008046 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800802a:	4b49      	ldr	r3, [pc, #292]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6819      	ldr	r1, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	3b01      	subs	r3, #1
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	430b      	orrs	r3, r1
 8008040:	4943      	ldr	r1, [pc, #268]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008042:	4313      	orrs	r3, r2
 8008044:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d17c      	bne.n	8008146 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800804c:	4b40      	ldr	r3, [pc, #256]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a3f      	ldr	r2, [pc, #252]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008052:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008058:	f7fb fd5a 	bl	8003b10 <HAL_GetTick>
 800805c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800805e:	e009      	b.n	8008074 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008060:	f7fb fd56 	bl	8003b10 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d902      	bls.n	8008074 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	73fb      	strb	r3, [r7, #15]
        break;
 8008072:	e005      	b.n	8008080 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008074:	4b36      	ldr	r3, [pc, #216]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1ef      	bne.n	8008060 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d15f      	bne.n	8008146 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d110      	bne.n	80080ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800808c:	4b30      	ldr	r3, [pc, #192]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8008094:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6892      	ldr	r2, [r2, #8]
 800809c:	0211      	lsls	r1, r2, #8
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	68d2      	ldr	r2, [r2, #12]
 80080a2:	06d2      	lsls	r2, r2, #27
 80080a4:	430a      	orrs	r2, r1
 80080a6:	492a      	ldr	r1, [pc, #168]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	610b      	str	r3, [r1, #16]
 80080ac:	e027      	b.n	80080fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d112      	bne.n	80080da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080b4:	4b26      	ldr	r3, [pc, #152]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80080bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6892      	ldr	r2, [r2, #8]
 80080c4:	0211      	lsls	r1, r2, #8
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	6912      	ldr	r2, [r2, #16]
 80080ca:	0852      	lsrs	r2, r2, #1
 80080cc:	3a01      	subs	r2, #1
 80080ce:	0552      	lsls	r2, r2, #21
 80080d0:	430a      	orrs	r2, r1
 80080d2:	491f      	ldr	r1, [pc, #124]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	610b      	str	r3, [r1, #16]
 80080d8:	e011      	b.n	80080fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080da:	4b1d      	ldr	r3, [pc, #116]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80080e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	6892      	ldr	r2, [r2, #8]
 80080ea:	0211      	lsls	r1, r2, #8
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	6952      	ldr	r2, [r2, #20]
 80080f0:	0852      	lsrs	r2, r2, #1
 80080f2:	3a01      	subs	r2, #1
 80080f4:	0652      	lsls	r2, r2, #25
 80080f6:	430a      	orrs	r2, r1
 80080f8:	4915      	ldr	r1, [pc, #84]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80080fe:	4b14      	ldr	r3, [pc, #80]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a13      	ldr	r2, [pc, #76]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008104:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008108:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800810a:	f7fb fd01 	bl	8003b10 <HAL_GetTick>
 800810e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008110:	e009      	b.n	8008126 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008112:	f7fb fcfd 	bl	8003b10 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d902      	bls.n	8008126 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	73fb      	strb	r3, [r7, #15]
          break;
 8008124:	e005      	b.n	8008132 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008126:	4b0a      	ldr	r3, [pc, #40]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0ef      	beq.n	8008112 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008138:	4b05      	ldr	r3, [pc, #20]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	4903      	ldr	r1, [pc, #12]	@ (8008150 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008142:	4313      	orrs	r3, r2
 8008144:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008146:	7bfb      	ldrb	r3, [r7, #15]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	40021000 	.word	0x40021000

08008154 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d079      	beq.n	800825a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7fb f8d8 	bl	8003330 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f003 0310 	and.w	r3, r3, #16
 8008192:	2b10      	cmp	r3, #16
 8008194:	d058      	beq.n	8008248 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	22ca      	movs	r2, #202	@ 0xca
 800819c:	625a      	str	r2, [r3, #36]	@ 0x24
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2253      	movs	r2, #83	@ 0x53
 80081a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa94 	bl	80086d4 <RTC_EnterInitMode>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d127      	bne.n	8008206 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6812      	ldr	r2, [r2, #0]
 80081c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80081c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6899      	ldr	r1, [r3, #8]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	431a      	orrs	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	430a      	orrs	r2, r1
 80081e6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	68d2      	ldr	r2, [r2, #12]
 80081f0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6919      	ldr	r1, [r3, #16]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	041a      	lsls	r2, r3, #16
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa98 	bl	800873c <RTC_ExitInitMode>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d113      	bne.n	800823e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 0203 	bic.w	r2, r2, #3
 8008224:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	22ff      	movs	r2, #255	@ 0xff
 8008244:	625a      	str	r2, [r3, #36]	@ 0x24
 8008246:	e001      	b.n	800824c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d103      	bne.n	800825a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008264:	b590      	push	{r4, r7, lr}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d101      	bne.n	800827e <HAL_RTC_SetTime+0x1a>
 800827a:	2302      	movs	r3, #2
 800827c:	e08b      	b.n	8008396 <HAL_RTC_SetTime+0x132>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	22ca      	movs	r2, #202	@ 0xca
 8008294:	625a      	str	r2, [r3, #36]	@ 0x24
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2253      	movs	r2, #83	@ 0x53
 800829c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 fa18 	bl	80086d4 <RTC_EnterInitMode>
 80082a4:	4603      	mov	r3, r0
 80082a6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80082a8:	7cfb      	ldrb	r3, [r7, #19]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d163      	bne.n	8008376 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d126      	bne.n	8008302 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d102      	bne.n	80082c8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 fa73 	bl	80087b8 <RTC_ByteToBcd2>
 80082d2:	4603      	mov	r3, r0
 80082d4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	785b      	ldrb	r3, [r3, #1]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fa6c 	bl	80087b8 <RTC_ByteToBcd2>
 80082e0:	4603      	mov	r3, r0
 80082e2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80082e4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	789b      	ldrb	r3, [r3, #2]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fa64 	bl	80087b8 <RTC_ByteToBcd2>
 80082f0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80082f2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	78db      	ldrb	r3, [r3, #3]
 80082fa:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]
 8008300:	e018      	b.n	8008334 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d102      	bne.n	8008316 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2200      	movs	r2, #0
 8008314:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008322:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008328:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	78db      	ldrb	r3, [r3, #3]
 800832e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800833e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008342:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689a      	ldr	r2, [r3, #8]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008352:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6899      	ldr	r1, [r3, #8]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	68da      	ldr	r2, [r3, #12]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	431a      	orrs	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	430a      	orrs	r2, r1
 800836a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f9e5 	bl	800873c <RTC_ExitInitMode>
 8008372:	4603      	mov	r3, r0
 8008374:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	22ff      	movs	r2, #255	@ 0xff
 800837c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800837e:	7cfb      	ldrb	r3, [r7, #19]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d103      	bne.n	800838c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008394:	7cfb      	ldrb	r3, [r7, #19]
}
 8008396:	4618      	mov	r0, r3
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	bd90      	pop	{r4, r7, pc}

0800839e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b086      	sub	sp, #24
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	60f8      	str	r0, [r7, #12]
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80083cc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80083d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	0c1b      	lsrs	r3, r3, #16
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	0a1b      	lsrs	r3, r3, #8
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	0d9b      	lsrs	r3, r3, #22
 8008404:	b2db      	uxtb	r3, r3
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	b2da      	uxtb	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d11a      	bne.n	800844c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f9ec 	bl	80087f8 <RTC_Bcd2ToByte>
 8008420:	4603      	mov	r3, r0
 8008422:	461a      	mov	r2, r3
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	785b      	ldrb	r3, [r3, #1]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 f9e3 	bl	80087f8 <RTC_Bcd2ToByte>
 8008432:	4603      	mov	r3, r0
 8008434:	461a      	mov	r2, r3
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	789b      	ldrb	r3, [r3, #2]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f9da 	bl	80087f8 <RTC_Bcd2ToByte>
 8008444:	4603      	mov	r3, r0
 8008446:	461a      	mov	r2, r3
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008456:	b590      	push	{r4, r7, lr}
 8008458:	b087      	sub	sp, #28
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_RTC_SetDate+0x1a>
 800846c:	2302      	movs	r3, #2
 800846e:	e075      	b.n	800855c <HAL_RTC_SetDate+0x106>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10e      	bne.n	80084a4 <HAL_RTC_SetDate+0x4e>
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	785b      	ldrb	r3, [r3, #1]
 800848a:	f003 0310 	and.w	r3, r3, #16
 800848e:	2b00      	cmp	r3, #0
 8008490:	d008      	beq.n	80084a4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	f023 0310 	bic.w	r3, r3, #16
 800849a:	b2db      	uxtb	r3, r3
 800849c:	330a      	adds	r3, #10
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d11c      	bne.n	80084e4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	78db      	ldrb	r3, [r3, #3]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 f982 	bl	80087b8 <RTC_ByteToBcd2>
 80084b4:	4603      	mov	r3, r0
 80084b6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f97b 	bl	80087b8 <RTC_ByteToBcd2>
 80084c2:	4603      	mov	r3, r0
 80084c4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80084c6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	789b      	ldrb	r3, [r3, #2]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 f973 	bl	80087b8 <RTC_ByteToBcd2>
 80084d2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80084d4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	e00e      	b.n	8008502 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	78db      	ldrb	r3, [r3, #3]
 80084e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80084f0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80084f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	22ca      	movs	r2, #202	@ 0xca
 8008508:	625a      	str	r2, [r3, #36]	@ 0x24
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2253      	movs	r2, #83	@ 0x53
 8008510:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 f8de 	bl	80086d4 <RTC_EnterInitMode>
 8008518:	4603      	mov	r3, r0
 800851a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800851c:	7cfb      	ldrb	r3, [r7, #19]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10c      	bne.n	800853c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800852c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008530:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 f902 	bl	800873c <RTC_ExitInitMode>
 8008538:	4603      	mov	r3, r0
 800853a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	22ff      	movs	r2, #255	@ 0xff
 8008542:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008544:	7cfb      	ldrb	r3, [r7, #19]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d103      	bne.n	8008552 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800855a:	7cfb      	ldrb	r3, [r7, #19]
}
 800855c:	4618      	mov	r0, r3
 800855e:	371c      	adds	r7, #28
 8008560:	46bd      	mov	sp, r7
 8008562:	bd90      	pop	{r4, r7, pc}

08008564 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800857a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800857e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	0c1b      	lsrs	r3, r3, #16
 8008584:	b2da      	uxtb	r2, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	0a1b      	lsrs	r3, r3, #8
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f003 031f 	and.w	r3, r3, #31
 8008594:	b2da      	uxtb	r2, r3
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	0b5b      	lsrs	r3, r3, #13
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d11a      	bne.n	80085f4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	78db      	ldrb	r3, [r3, #3]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 f918 	bl	80087f8 <RTC_Bcd2ToByte>
 80085c8:	4603      	mov	r3, r0
 80085ca:	461a      	mov	r2, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 f90f 	bl	80087f8 <RTC_Bcd2ToByte>
 80085da:	4603      	mov	r3, r0
 80085dc:	461a      	mov	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	789b      	ldrb	r3, [r3, #2]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 f906 	bl	80087f8 <RTC_Bcd2ToByte>
 80085ec:	4603      	mov	r3, r0
 80085ee:	461a      	mov	r2, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008608:	4b1f      	ldr	r3, [pc, #124]	@ (8008688 <HAL_RTC_AlarmIRQHandler+0x88>)
 800860a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800860e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d012      	beq.n	8008644 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	b2da      	uxtb	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800863c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7f9 fac0 	bl	8001bc4 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d012      	beq.n	8008678 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	b2da      	uxtb	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008670:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f95e 	bl	8008934 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	40010400 	.word	0x40010400

0800868c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a0d      	ldr	r2, [pc, #52]	@ (80086d0 <HAL_RTC_WaitForSynchro+0x44>)
 800869a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800869c:	f7fb fa38 	bl	8003b10 <HAL_GetTick>
 80086a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086a2:	e009      	b.n	80086b8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80086a4:	f7fb fa34 	bl	8003b10 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086b2:	d901      	bls.n	80086b8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e007      	b.n	80086c8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0ee      	beq.n	80086a4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	0003ff5f 	.word	0x0003ff5f

080086d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d120      	bne.n	8008730 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80086f8:	f7fb fa0a 	bl	8003b10 <HAL_GetTick>
 80086fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80086fe:	e00d      	b.n	800871c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008700:	f7fb fa06 	bl	8003b10 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800870e:	d905      	bls.n	800871c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2203      	movs	r2, #3
 8008718:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008726:	2b00      	cmp	r3, #0
 8008728:	d102      	bne.n	8008730 <RTC_EnterInitMode+0x5c>
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	2b03      	cmp	r3, #3
 800872e:	d1e7      	bne.n	8008700 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008748:	4b1a      	ldr	r3, [pc, #104]	@ (80087b4 <RTC_ExitInitMode+0x78>)
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	4a19      	ldr	r2, [pc, #100]	@ (80087b4 <RTC_ExitInitMode+0x78>)
 800874e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008752:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008754:	4b17      	ldr	r3, [pc, #92]	@ (80087b4 <RTC_ExitInitMode+0x78>)
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10c      	bne.n	800877a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff ff93 	bl	800868c <HAL_RTC_WaitForSynchro>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d01e      	beq.n	80087aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2203      	movs	r2, #3
 8008770:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	73fb      	strb	r3, [r7, #15]
 8008778:	e017      	b.n	80087aa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800877a:	4b0e      	ldr	r3, [pc, #56]	@ (80087b4 <RTC_ExitInitMode+0x78>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	4a0d      	ldr	r2, [pc, #52]	@ (80087b4 <RTC_ExitInitMode+0x78>)
 8008780:	f023 0320 	bic.w	r3, r3, #32
 8008784:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7ff ff80 	bl	800868c <HAL_RTC_WaitForSynchro>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2203      	movs	r2, #3
 8008796:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800879e:	4b05      	ldr	r3, [pc, #20]	@ (80087b4 <RTC_ExitInitMode+0x78>)
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	4a04      	ldr	r2, [pc, #16]	@ (80087b4 <RTC_ExitInitMode+0x78>)
 80087a4:	f043 0320 	orr.w	r3, r3, #32
 80087a8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	40002800 	.word	0x40002800

080087b8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80087ca:	e005      	b.n	80087d8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80087d2:	7afb      	ldrb	r3, [r7, #11]
 80087d4:	3b0a      	subs	r3, #10
 80087d6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	2b09      	cmp	r3, #9
 80087dc:	d8f6      	bhi.n	80087cc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	011b      	lsls	r3, r3, #4
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	7afb      	ldrb	r3, [r7, #11]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	b2db      	uxtb	r3, r3
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	091b      	lsrs	r3, r3, #4
 8008806:	b2db      	uxtb	r3, r3
 8008808:	461a      	mov	r2, r3
 800880a:	0092      	lsls	r2, r2, #2
 800880c:	4413      	add	r3, r2
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	f003 030f 	and.w	r3, r3, #15
 8008818:	b2da      	uxtb	r2, r3
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	4413      	add	r3, r2
 800881e:	b2db      	uxtb	r3, r3
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800883e:	2302      	movs	r3, #2
 8008840:	e04d      	b.n	80088de <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2202      	movs	r2, #2
 800884e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	22ca      	movs	r2, #202	@ 0xca
 8008858:	625a      	str	r2, [r3, #36]	@ 0x24
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2253      	movs	r2, #83	@ 0x53
 8008860:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008870:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008880:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8008882:	f7fb f945 	bl	8003b10 <HAL_GetTick>
 8008886:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008888:	e015      	b.n	80088b6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800888a:	f7fb f941 	bl	8003b10 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008898:	d90d      	bls.n	80088b6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	22ff      	movs	r2, #255	@ 0xff
 80088a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2203      	movs	r2, #3
 80088a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e013      	b.n	80088de <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0304 	and.w	r3, r3, #4
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0e2      	beq.n	800888a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	22ff      	movs	r2, #255	@ 0xff
 80088ca:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80088f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008930 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80088f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80088f6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00b      	beq.n	800891e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	b2da      	uxtb	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8008916:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7f9 fca3 	bl	8002264 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	40010400 	.word	0x40010400

08008934 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e095      	b.n	8008a86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895e:	2b00      	cmp	r3, #0
 8008960:	d108      	bne.n	8008974 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800896a:	d009      	beq.n	8008980 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	61da      	str	r2, [r3, #28]
 8008972:	e005      	b.n	8008980 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d106      	bne.n	80089a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7fa fd00 	bl	80033a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80089c0:	d902      	bls.n	80089c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	e002      	b.n	80089ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80089c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80089d6:	d007      	beq.n	80089e8 <HAL_SPI_Init+0xa0>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80089e0:	d002      	beq.n	80089e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80089f8:	431a      	orrs	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	431a      	orrs	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a16:	431a      	orrs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a2a:	ea42 0103 	orr.w	r1, r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	0c1b      	lsrs	r3, r3, #16
 8008a44:	f003 0204 	and.w	r2, r3, #4
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a4c:	f003 0310 	and.w	r3, r3, #16
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008a64:	ea42 0103 	orr.w	r1, r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b088      	sub	sp, #32
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	603b      	str	r3, [r7, #0]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d101      	bne.n	8008ab0 <HAL_SPI_Transmit+0x22>
 8008aac:	2302      	movs	r3, #2
 8008aae:	e15f      	b.n	8008d70 <HAL_SPI_Transmit+0x2e2>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ab8:	f7fb f82a 	bl	8003b10 <HAL_GetTick>
 8008abc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d002      	beq.n	8008ad4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ace:	2302      	movs	r3, #2
 8008ad0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ad2:	e148      	b.n	8008d66 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <HAL_SPI_Transmit+0x52>
 8008ada:	88fb      	ldrh	r3, [r7, #6]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d102      	bne.n	8008ae6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ae4:	e13f      	b.n	8008d66 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2203      	movs	r2, #3
 8008aea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	88fa      	ldrh	r2, [r7, #6]
 8008afe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	88fa      	ldrh	r2, [r7, #6]
 8008b04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b30:	d10f      	bne.n	8008b52 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b5c:	2b40      	cmp	r3, #64	@ 0x40
 8008b5e:	d007      	beq.n	8008b70 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b78:	d94f      	bls.n	8008c1a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <HAL_SPI_Transmit+0xfa>
 8008b82:	8afb      	ldrh	r3, [r7, #22]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d142      	bne.n	8008c0e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8c:	881a      	ldrh	r2, [r3, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b98:	1c9a      	adds	r2, r3, #2
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008bac:	e02f      	b.n	8008c0e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d112      	bne.n	8008be2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc0:	881a      	ldrh	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bcc:	1c9a      	adds	r2, r3, #2
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008be0:	e015      	b.n	8008c0e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008be2:	f7fa ff95 	bl	8003b10 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d803      	bhi.n	8008bfa <HAL_SPI_Transmit+0x16c>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bf8:	d102      	bne.n	8008c00 <HAL_SPI_Transmit+0x172>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d106      	bne.n	8008c0e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008c0c:	e0ab      	b.n	8008d66 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1ca      	bne.n	8008bae <HAL_SPI_Transmit+0x120>
 8008c18:	e080      	b.n	8008d1c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <HAL_SPI_Transmit+0x19a>
 8008c22:	8afb      	ldrh	r3, [r7, #22]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d174      	bne.n	8008d12 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d912      	bls.n	8008c58 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c36:	881a      	ldrh	r2, [r3, #0]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c42:	1c9a      	adds	r2, r3, #2
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	3b02      	subs	r3, #2
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c56:	e05c      	b.n	8008d12 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	330c      	adds	r3, #12
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c7e:	e048      	b.n	8008d12 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d12b      	bne.n	8008ce6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d912      	bls.n	8008cbe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9c:	881a      	ldrh	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca8:	1c9a      	adds	r2, r3, #2
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	3b02      	subs	r3, #2
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cbc:	e029      	b.n	8008d12 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	330c      	adds	r3, #12
 8008cc8:	7812      	ldrb	r2, [r2, #0]
 8008cca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ce4:	e015      	b.n	8008d12 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ce6:	f7fa ff13 	bl	8003b10 <HAL_GetTick>
 8008cea:	4602      	mov	r2, r0
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d803      	bhi.n	8008cfe <HAL_SPI_Transmit+0x270>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cfc:	d102      	bne.n	8008d04 <HAL_SPI_Transmit+0x276>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d106      	bne.n	8008d12 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008d10:	e029      	b.n	8008d66 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1b1      	bne.n	8008c80 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f001 f9f9 	bl	800a118 <SPI_EndRxTxTransaction>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	613b      	str	r3, [r7, #16]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	613b      	str	r3, [r7, #16]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	613b      	str	r3, [r7, #16]
 8008d4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	77fb      	strb	r3, [r7, #31]
 8008d5c:	e003      	b.n	8008d66 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3720      	adds	r7, #32
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af02      	add	r7, sp, #8
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	4613      	mov	r3, r2
 8008d86:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d002      	beq.n	8008d9e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8008d98:	2302      	movs	r3, #2
 8008d9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d9c:	e11a      	b.n	8008fd4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008da6:	d112      	bne.n	8008dce <HAL_SPI_Receive+0x56>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10e      	bne.n	8008dce <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2204      	movs	r2, #4
 8008db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008db8:	88fa      	ldrh	r2, [r7, #6]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	68b9      	ldr	r1, [r7, #8]
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 f90e 	bl	8008fe6 <HAL_SPI_TransmitReceive>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	e107      	b.n	8008fde <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d101      	bne.n	8008ddc <HAL_SPI_Receive+0x64>
 8008dd8:	2302      	movs	r3, #2
 8008dda:	e100      	b.n	8008fde <HAL_SPI_Receive+0x266>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008de4:	f7fa fe94 	bl	8003b10 <HAL_GetTick>
 8008de8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <HAL_SPI_Receive+0x7e>
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d102      	bne.n	8008dfc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008dfa:	e0eb      	b.n	8008fd4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2204      	movs	r2, #4
 8008e00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	88fa      	ldrh	r2, [r7, #6]
 8008e14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	88fa      	ldrh	r2, [r7, #6]
 8008e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e46:	d908      	bls.n	8008e5a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e56:	605a      	str	r2, [r3, #4]
 8008e58:	e007      	b.n	8008e6a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e68:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e72:	d10f      	bne.n	8008e94 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e92:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e9e:	2b40      	cmp	r3, #64	@ 0x40
 8008ea0:	d007      	beq.n	8008eb2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008eb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008eba:	d86f      	bhi.n	8008f9c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ebc:	e034      	b.n	8008f28 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d117      	bne.n	8008efc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f103 020c 	add.w	r2, r3, #12
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	7812      	ldrb	r2, [r2, #0]
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008efa:	e015      	b.n	8008f28 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008efc:	f7fa fe08 	bl	8003b10 <HAL_GetTick>
 8008f00:	4602      	mov	r2, r0
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d803      	bhi.n	8008f14 <HAL_SPI_Receive+0x19c>
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f12:	d102      	bne.n	8008f1a <HAL_SPI_Receive+0x1a2>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d106      	bne.n	8008f28 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008f26:	e055      	b.n	8008fd4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1c4      	bne.n	8008ebe <HAL_SPI_Receive+0x146>
 8008f34:	e038      	b.n	8008fa8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d115      	bne.n	8008f70 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4e:	b292      	uxth	r2, r2
 8008f50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f56:	1c9a      	adds	r2, r3, #2
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008f6e:	e015      	b.n	8008f9c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f70:	f7fa fdce 	bl	8003b10 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d803      	bhi.n	8008f88 <HAL_SPI_Receive+0x210>
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f86:	d102      	bne.n	8008f8e <HAL_SPI_Receive+0x216>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008f9a:	e01b      	b.n	8008fd4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1c6      	bne.n	8008f36 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f001 f85b 	bl	800a068 <SPI_EndRxTransaction>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	75fb      	strb	r3, [r7, #23]
 8008fca:	e003      	b.n	8008fd4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b08a      	sub	sp, #40	@ 0x28
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
 8008ff2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <HAL_SPI_TransmitReceive+0x26>
 8009008:	2302      	movs	r3, #2
 800900a:	e20a      	b.n	8009422 <HAL_SPI_TransmitReceive+0x43c>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009014:	f7fa fd7c 	bl	8003b10 <HAL_GetTick>
 8009018:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009020:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009028:	887b      	ldrh	r3, [r7, #2]
 800902a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800902c:	887b      	ldrh	r3, [r7, #2]
 800902e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009030:	7efb      	ldrb	r3, [r7, #27]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d00e      	beq.n	8009054 <HAL_SPI_TransmitReceive+0x6e>
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800903c:	d106      	bne.n	800904c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d102      	bne.n	800904c <HAL_SPI_TransmitReceive+0x66>
 8009046:	7efb      	ldrb	r3, [r7, #27]
 8009048:	2b04      	cmp	r3, #4
 800904a:	d003      	beq.n	8009054 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800904c:	2302      	movs	r3, #2
 800904e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009052:	e1e0      	b.n	8009416 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <HAL_SPI_TransmitReceive+0x80>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <HAL_SPI_TransmitReceive+0x80>
 8009060:	887b      	ldrh	r3, [r7, #2]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d103      	bne.n	800906e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800906c:	e1d3      	b.n	8009416 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b04      	cmp	r3, #4
 8009078:	d003      	beq.n	8009082 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2205      	movs	r2, #5
 800907e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	887a      	ldrh	r2, [r7, #2]
 8009092:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	887a      	ldrh	r2, [r7, #2]
 800909a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	887a      	ldrh	r2, [r7, #2]
 80090a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	887a      	ldrh	r2, [r7, #2]
 80090ae:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090c4:	d802      	bhi.n	80090cc <HAL_SPI_TransmitReceive+0xe6>
 80090c6:	8a3b      	ldrh	r3, [r7, #16]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d908      	bls.n	80090de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80090da:	605a      	str	r2, [r3, #4]
 80090dc:	e007      	b.n	80090ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f8:	2b40      	cmp	r3, #64	@ 0x40
 80090fa:	d007      	beq.n	800910c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800910a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009114:	f240 8081 	bls.w	800921a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <HAL_SPI_TransmitReceive+0x140>
 8009120:	8a7b      	ldrh	r3, [r7, #18]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d16d      	bne.n	8009202 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912a:	881a      	ldrh	r2, [r3, #0]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009136:	1c9a      	adds	r2, r3, #2
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009140:	b29b      	uxth	r3, r3
 8009142:	3b01      	subs	r3, #1
 8009144:	b29a      	uxth	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800914a:	e05a      	b.n	8009202 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b02      	cmp	r3, #2
 8009158:	d11b      	bne.n	8009192 <HAL_SPI_TransmitReceive+0x1ac>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800915e:	b29b      	uxth	r3, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	d016      	beq.n	8009192 <HAL_SPI_TransmitReceive+0x1ac>
 8009164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009166:	2b01      	cmp	r3, #1
 8009168:	d113      	bne.n	8009192 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916e:	881a      	ldrh	r2, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917a:	1c9a      	adds	r2, r3, #2
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009184:	b29b      	uxth	r3, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b01      	cmp	r3, #1
 800919e:	d11c      	bne.n	80091da <HAL_SPI_TransmitReceive+0x1f4>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d016      	beq.n	80091da <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68da      	ldr	r2, [r3, #12]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b6:	b292      	uxth	r2, r2
 80091b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091be:	1c9a      	adds	r2, r3, #2
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091d6:	2301      	movs	r3, #1
 80091d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80091da:	f7fa fc99 	bl	8003b10 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d80b      	bhi.n	8009202 <HAL_SPI_TransmitReceive+0x21c>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091f0:	d007      	beq.n	8009202 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009200:	e109      	b.n	8009416 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009206:	b29b      	uxth	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	d19f      	bne.n	800914c <HAL_SPI_TransmitReceive+0x166>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009212:	b29b      	uxth	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d199      	bne.n	800914c <HAL_SPI_TransmitReceive+0x166>
 8009218:	e0e3      	b.n	80093e2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_SPI_TransmitReceive+0x244>
 8009222:	8a7b      	ldrh	r3, [r7, #18]
 8009224:	2b01      	cmp	r3, #1
 8009226:	f040 80cf 	bne.w	80093c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800922e:	b29b      	uxth	r3, r3
 8009230:	2b01      	cmp	r3, #1
 8009232:	d912      	bls.n	800925a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009238:	881a      	ldrh	r2, [r3, #0]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009244:	1c9a      	adds	r2, r3, #2
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800924e:	b29b      	uxth	r3, r3
 8009250:	3b02      	subs	r3, #2
 8009252:	b29a      	uxth	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009258:	e0b6      	b.n	80093c8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	330c      	adds	r3, #12
 8009264:	7812      	ldrb	r2, [r2, #0]
 8009266:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009276:	b29b      	uxth	r3, r3
 8009278:	3b01      	subs	r3, #1
 800927a:	b29a      	uxth	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009280:	e0a2      	b.n	80093c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b02      	cmp	r3, #2
 800928e:	d134      	bne.n	80092fa <HAL_SPI_TransmitReceive+0x314>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009294:	b29b      	uxth	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d02f      	beq.n	80092fa <HAL_SPI_TransmitReceive+0x314>
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929c:	2b01      	cmp	r3, #1
 800929e:	d12c      	bne.n	80092fa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d912      	bls.n	80092d0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ae:	881a      	ldrh	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ba:	1c9a      	adds	r2, r3, #2
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	3b02      	subs	r3, #2
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092ce:	e012      	b.n	80092f6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	330c      	adds	r3, #12
 80092da:	7812      	ldrb	r2, [r2, #0]
 80092dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b01      	cmp	r3, #1
 8009306:	d148      	bne.n	800939a <HAL_SPI_TransmitReceive+0x3b4>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800930e:	b29b      	uxth	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d042      	beq.n	800939a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800931a:	b29b      	uxth	r3, r3
 800931c:	2b01      	cmp	r3, #1
 800931e:	d923      	bls.n	8009368 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932a:	b292      	uxth	r2, r2
 800932c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009332:	1c9a      	adds	r2, r3, #2
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800933e:	b29b      	uxth	r3, r3
 8009340:	3b02      	subs	r3, #2
 8009342:	b29a      	uxth	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009350:	b29b      	uxth	r3, r3
 8009352:	2b01      	cmp	r3, #1
 8009354:	d81f      	bhi.n	8009396 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009364:	605a      	str	r2, [r3, #4]
 8009366:	e016      	b.n	8009396 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f103 020c 	add.w	r2, r3, #12
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009374:	7812      	ldrb	r2, [r2, #0]
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800938a:	b29b      	uxth	r3, r3
 800938c:	3b01      	subs	r3, #1
 800938e:	b29a      	uxth	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009396:	2301      	movs	r3, #1
 8009398:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800939a:	f7fa fbb9 	bl	8003b10 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d803      	bhi.n	80093b2 <HAL_SPI_TransmitReceive+0x3cc>
 80093aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093b0:	d102      	bne.n	80093b8 <HAL_SPI_TransmitReceive+0x3d2>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d107      	bne.n	80093c8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80093c6:	e026      	b.n	8009416 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f47f af57 	bne.w	8009282 <HAL_SPI_TransmitReceive+0x29c>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f47f af50 	bne.w	8009282 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093e2:	69fa      	ldr	r2, [r7, #28]
 80093e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 fe96 	bl	800a118 <SPI_EndRxTxTransaction>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800940c:	e003      	b.n	8009416 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800941e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009422:	4618      	mov	r0, r3
 8009424:	3728      	adds	r7, #40	@ 0x28
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009444:	2b01      	cmp	r3, #1
 8009446:	d101      	bne.n	800944c <HAL_SPI_Transmit_DMA+0x20>
 8009448:	2302      	movs	r3, #2
 800944a:	e0d4      	b.n	80095f6 <HAL_SPI_Transmit_DMA+0x1ca>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b01      	cmp	r3, #1
 800945e:	d002      	beq.n	8009466 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009460:	2302      	movs	r3, #2
 8009462:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009464:	e0c2      	b.n	80095ec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d002      	beq.n	8009472 <HAL_SPI_Transmit_DMA+0x46>
 800946c:	88fb      	ldrh	r3, [r7, #6]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d102      	bne.n	8009478 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009476:	e0b9      	b.n	80095ec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2203      	movs	r2, #3
 800947c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	88fa      	ldrh	r2, [r7, #6]
 8009490:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	88fa      	ldrh	r2, [r7, #6]
 8009496:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094c2:	d10f      	bne.n	80094e4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e8:	4a45      	ldr	r2, [pc, #276]	@ (8009600 <HAL_SPI_Transmit_DMA+0x1d4>)
 80094ea:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f0:	4a44      	ldr	r2, [pc, #272]	@ (8009604 <HAL_SPI_Transmit_DMA+0x1d8>)
 80094f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f8:	4a43      	ldr	r2, [pc, #268]	@ (8009608 <HAL_SPI_Transmit_DMA+0x1dc>)
 80094fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009500:	2200      	movs	r2, #0
 8009502:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009512:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800951c:	d82d      	bhi.n	800957a <HAL_SPI_Transmit_DMA+0x14e>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009528:	d127      	bne.n	800957a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800952e:	b29b      	uxth	r3, r3
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10f      	bne.n	8009558 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009546:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800954c:	b29b      	uxth	r3, r3
 800954e:	085b      	lsrs	r3, r3, #1
 8009550:	b29a      	uxth	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009556:	e010      	b.n	800957a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009566:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800956c:	b29b      	uxth	r3, r3
 800956e:	085b      	lsrs	r3, r3, #1
 8009570:	b29b      	uxth	r3, r3
 8009572:	3301      	adds	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009582:	4619      	mov	r1, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	330c      	adds	r3, #12
 800958a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009590:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009592:	f7fa fcf9 	bl	8003f88 <HAL_DMA_Start_IT>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d008      	beq.n	80095ae <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095a0:	f043 0210 	orr.w	r2, r3, #16
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	75fb      	strb	r3, [r7, #23]

    goto error;
 80095ac:	e01e      	b.n	80095ec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b8:	2b40      	cmp	r3, #64	@ 0x40
 80095ba:	d007      	beq.n	80095cc <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095ca:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0220 	orr.w	r2, r2, #32
 80095da:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0202 	orr.w	r2, r2, #2
 80095ea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3718      	adds	r7, #24
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	08009d97 	.word	0x08009d97
 8009604:	08009bb9 	.word	0x08009bb9
 8009608:	08009deb 	.word	0x08009deb

0800960c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b01      	cmp	r3, #1
 8009628:	d002      	beq.n	8009630 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800962a:	2302      	movs	r3, #2
 800962c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800962e:	e0fe      	b.n	800982e <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d110      	bne.n	800965a <HAL_SPI_Receive_DMA+0x4e>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009640:	d10b      	bne.n	800965a <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2204      	movs	r2, #4
 8009646:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800964a:	88fb      	ldrh	r3, [r7, #6]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	68b9      	ldr	r1, [r7, #8]
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 f8fb 	bl	800984c <HAL_SPI_TransmitReceive_DMA>
 8009656:	4603      	mov	r3, r0
 8009658:	e0ee      	b.n	8009838 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_SPI_Receive_DMA+0x5c>
 8009664:	2302      	movs	r3, #2
 8009666:	e0e7      	b.n	8009838 <HAL_SPI_Receive_DMA+0x22c>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <HAL_SPI_Receive_DMA+0x70>
 8009676:	88fb      	ldrh	r3, [r7, #6]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d102      	bne.n	8009682 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009680:	e0d5      	b.n	800982e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2204      	movs	r2, #4
 8009686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	88fa      	ldrh	r2, [r7, #6]
 800969a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	88fa      	ldrh	r2, [r7, #6]
 80096a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096c6:	d10f      	bne.n	80096e8 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80096e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80096f6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009700:	d908      	bls.n	8009714 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009710:	605a      	str	r2, [r3, #4]
 8009712:	e042      	b.n	800979a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009722:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800972e:	d134      	bne.n	800979a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800973e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009746:	b29b      	uxth	r3, r3
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d111      	bne.n	8009774 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800975e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009766:	b29b      	uxth	r3, r3
 8009768:	085b      	lsrs	r3, r3, #1
 800976a:	b29a      	uxth	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009772:	e012      	b.n	800979a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009782:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800978a:	b29b      	uxth	r3, r3
 800978c:	085b      	lsrs	r3, r3, #1
 800978e:	b29b      	uxth	r3, r3
 8009790:	3301      	adds	r3, #1
 8009792:	b29a      	uxth	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800979e:	4a28      	ldr	r2, [pc, #160]	@ (8009840 <HAL_SPI_Receive_DMA+0x234>)
 80097a0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097a6:	4a27      	ldr	r2, [pc, #156]	@ (8009844 <HAL_SPI_Receive_DMA+0x238>)
 80097a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ae:	4a26      	ldr	r2, [pc, #152]	@ (8009848 <HAL_SPI_Receive_DMA+0x23c>)
 80097b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b6:	2200      	movs	r2, #0
 80097b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	330c      	adds	r3, #12
 80097c4:	4619      	mov	r1, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ca:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80097d4:	f7fa fbd8 	bl	8003f88 <HAL_DMA_Start_IT>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d008      	beq.n	80097f0 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097e2:	f043 0210 	orr.w	r2, r3, #16
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	75fb      	strb	r3, [r7, #23]

    goto error;
 80097ee:	e01e      	b.n	800982e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097fa:	2b40      	cmp	r3, #64	@ 0x40
 80097fc:	d007      	beq.n	800980e <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800980c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f042 0220 	orr.w	r2, r2, #32
 800981c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f042 0201 	orr.w	r2, r2, #1
 800982c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009836:	7dfb      	ldrb	r3, [r7, #23]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	08009db3 	.word	0x08009db3
 8009844:	08009c5f 	.word	0x08009c5f
 8009848:	08009deb 	.word	0x08009deb

0800984c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009864:	2b01      	cmp	r3, #1
 8009866:	d101      	bne.n	800986c <HAL_SPI_TransmitReceive_DMA+0x20>
 8009868:	2302      	movs	r3, #2
 800986a:	e164      	b.n	8009b36 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800987a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009882:	7dbb      	ldrb	r3, [r7, #22]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d00d      	beq.n	80098a4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800988e:	d106      	bne.n	800989e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <HAL_SPI_TransmitReceive_DMA+0x52>
 8009898:	7dbb      	ldrb	r3, [r7, #22]
 800989a:	2b04      	cmp	r3, #4
 800989c:	d002      	beq.n	80098a4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800989e:	2302      	movs	r3, #2
 80098a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098a2:	e143      	b.n	8009b2c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d005      	beq.n	80098b6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80098b0:	887b      	ldrh	r3, [r7, #2]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d102      	bne.n	80098bc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098ba:	e137      	b.n	8009b2c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d003      	beq.n	80098d0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2205      	movs	r2, #5
 80098cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	887a      	ldrh	r2, [r7, #2]
 80098e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	887a      	ldrh	r2, [r7, #2]
 80098e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	887a      	ldrh	r2, [r7, #2]
 80098f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	887a      	ldrh	r2, [r7, #2]
 80098fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8009918:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009922:	d908      	bls.n	8009936 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009932:	605a      	str	r2, [r3, #4]
 8009934:	e06f      	b.n	8009a16 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009944:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009950:	d126      	bne.n	80099a0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10f      	bne.n	800997e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800996c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009972:	b29b      	uxth	r3, r3
 8009974:	085b      	lsrs	r3, r3, #1
 8009976:	b29a      	uxth	r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800997c:	e010      	b.n	80099a0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800998c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009992:	b29b      	uxth	r3, r3
 8009994:	085b      	lsrs	r3, r3, #1
 8009996:	b29b      	uxth	r3, r3
 8009998:	3301      	adds	r3, #1
 800999a:	b29a      	uxth	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099aa:	d134      	bne.n	8009a16 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80099ba:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d111      	bne.n	80099f0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	085b      	lsrs	r3, r3, #1
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80099ee:	e012      	b.n	8009a16 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099fe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	085b      	lsrs	r3, r3, #1
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	d108      	bne.n	8009a34 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a26:	4a46      	ldr	r2, [pc, #280]	@ (8009b40 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8009a28:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a2e:	4a45      	ldr	r2, [pc, #276]	@ (8009b44 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8009a30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009a32:	e007      	b.n	8009a44 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a38:	4a43      	ldr	r2, [pc, #268]	@ (8009b48 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8009a3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a40:	4a42      	ldr	r2, [pc, #264]	@ (8009b4c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8009a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a48:	4a41      	ldr	r2, [pc, #260]	@ (8009b50 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8009a4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a50:	2200      	movs	r2, #0
 8009a52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	330c      	adds	r3, #12
 8009a5e:	4619      	mov	r1, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a64:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009a6e:	f7fa fa8b 	bl	8003f88 <HAL_DMA_Start_IT>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d008      	beq.n	8009a8a <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a7c:	f043 0210 	orr.w	r2, r3, #16
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	75fb      	strb	r3, [r7, #23]

    goto error;
 8009a88:	e050      	b.n	8009b2c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0201 	orr.w	r2, r2, #1
 8009a98:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aae:	2200      	movs	r2, #0
 8009ab0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	330c      	adds	r3, #12
 8009aca:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ad0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009ad2:	f7fa fa59 	bl	8003f88 <HAL_DMA_Start_IT>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d008      	beq.n	8009aee <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ae0:	f043 0210 	orr.w	r2, r3, #16
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	75fb      	strb	r3, [r7, #23]

    goto error;
 8009aec:	e01e      	b.n	8009b2c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af8:	2b40      	cmp	r3, #64	@ 0x40
 8009afa:	d007      	beq.n	8009b0c <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b0a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f042 0220 	orr.w	r2, r2, #32
 8009b1a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f042 0202 	orr.w	r2, r2, #2
 8009b2a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	08009db3 	.word	0x08009db3
 8009b44:	08009c5f 	.word	0x08009c5f
 8009b48:	08009dcf 	.word	0x08009dcf
 8009b4c:	08009d07 	.word	0x08009d07
 8009b50:	08009deb 	.word	0x08009deb

08009b54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bc6:	f7f9 ffa3 	bl	8003b10 <HAL_GetTick>
 8009bca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	d03b      	beq.n	8009c52 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0220 	bic.w	r2, r2, #32
 8009be8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 0202 	bic.w	r2, r2, #2
 8009bf8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	2164      	movs	r1, #100	@ 0x64
 8009bfe:	6978      	ldr	r0, [r7, #20]
 8009c00:	f000 fa8a 	bl	800a118 <SPI_EndRxTxTransaction>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d005      	beq.n	8009c16 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c0e:	f043 0220 	orr.w	r2, r3, #32
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	60fb      	str	r3, [r7, #12]
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	2200      	movs	r2, #0
 8009c38:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009c4a:	6978      	ldr	r0, [r7, #20]
 8009c4c:	f7ff ffaa 	bl	8009ba4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009c50:	e002      	b.n	8009c58 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009c52:	6978      	ldr	r0, [r7, #20]
 8009c54:	f7f8 fb7a 	bl	800234c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c6c:	f7f9 ff50 	bl	8003b10 <HAL_GetTick>
 8009c70:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b20      	cmp	r3, #32
 8009c7e:	d03c      	beq.n	8009cfa <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f022 0220 	bic.w	r2, r2, #32
 8009c8e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10d      	bne.n	8009cb4 <SPI_DMAReceiveCplt+0x56>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ca0:	d108      	bne.n	8009cb4 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0203 	bic.w	r2, r2, #3
 8009cb0:	605a      	str	r2, [r3, #4]
 8009cb2:	e007      	b.n	8009cc4 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f022 0201 	bic.w	r2, r2, #1
 8009cc2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	2164      	movs	r1, #100	@ 0x64
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 f9cd 	bl	800a068 <SPI_EndRxTransaction>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f7ff ff56 	bl	8009ba4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009cf8:	e002      	b.n	8009d00 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7f8 fb4a 	bl	8002394 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d12:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d14:	f7f9 fefc 	bl	8003b10 <HAL_GetTick>
 8009d18:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0320 	and.w	r3, r3, #32
 8009d24:	2b20      	cmp	r3, #32
 8009d26:	d030      	beq.n	8009d8a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0220 	bic.w	r2, r2, #32
 8009d36:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	2164      	movs	r1, #100	@ 0x64
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 f9eb 	bl	800a118 <SPI_EndRxTxTransaction>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d4c:	f043 0220 	orr.w	r2, r3, #32
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 0203 	bic.w	r2, r2, #3
 8009d62:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff ff0e 	bl	8009ba4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009d88:	e002      	b.n	8009d90 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f7ff fee2 	bl	8009b54 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f7ff fedf 	bl	8009b68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009daa:	bf00      	nop
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f7ff fedb 	bl	8009b7c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f7ff fed7 	bl	8009b90 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009de2:	bf00      	nop
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685a      	ldr	r2, [r3, #4]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 0203 	bic.w	r2, r2, #3
 8009e06:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e0c:	f043 0210 	orr.w	r2, r3, #16
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7ff fec1 	bl	8009ba4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e22:	bf00      	nop
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	603b      	str	r3, [r7, #0]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e3c:	f7f9 fe68 	bl	8003b10 <HAL_GetTick>
 8009e40:	4602      	mov	r2, r0
 8009e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e44:	1a9b      	subs	r3, r3, r2
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	4413      	add	r3, r2
 8009e4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e4c:	f7f9 fe60 	bl	8003b10 <HAL_GetTick>
 8009e50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e52:	4b39      	ldr	r3, [pc, #228]	@ (8009f38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	015b      	lsls	r3, r3, #5
 8009e58:	0d1b      	lsrs	r3, r3, #20
 8009e5a:	69fa      	ldr	r2, [r7, #28]
 8009e5c:	fb02 f303 	mul.w	r3, r2, r3
 8009e60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e62:	e054      	b.n	8009f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e6a:	d050      	beq.n	8009f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e6c:	f7f9 fe50 	bl	8003b10 <HAL_GetTick>
 8009e70:	4602      	mov	r2, r0
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	69fa      	ldr	r2, [r7, #28]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d902      	bls.n	8009e82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d13d      	bne.n	8009efe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009e90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e9a:	d111      	bne.n	8009ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ea4:	d004      	beq.n	8009eb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eae:	d107      	bne.n	8009ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ec8:	d10f      	bne.n	8009eea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009efa:	2303      	movs	r3, #3
 8009efc:	e017      	b.n	8009f2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	4013      	ands	r3, r2
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	bf0c      	ite	eq
 8009f1e:	2301      	moveq	r3, #1
 8009f20:	2300      	movne	r3, #0
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	461a      	mov	r2, r3
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d19b      	bne.n	8009e64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3720      	adds	r7, #32
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20000004 	.word	0x20000004

08009f3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	@ 0x28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009f4e:	f7f9 fddf 	bl	8003b10 <HAL_GetTick>
 8009f52:	4602      	mov	r2, r0
 8009f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f56:	1a9b      	subs	r3, r3, r2
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009f5e:	f7f9 fdd7 	bl	8003b10 <HAL_GetTick>
 8009f62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	330c      	adds	r3, #12
 8009f6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009f6c:	4b3d      	ldr	r3, [pc, #244]	@ (800a064 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	4613      	mov	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	00da      	lsls	r2, r3, #3
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	0d1b      	lsrs	r3, r3, #20
 8009f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f7e:	fb02 f303 	mul.w	r3, r2, r3
 8009f82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009f84:	e060      	b.n	800a048 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009f8c:	d107      	bne.n	8009f9e <SPI_WaitFifoStateUntilTimeout+0x62>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d104      	bne.n	8009f9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009f9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fa4:	d050      	beq.n	800a048 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fa6:	f7f9 fdb3 	bl	8003b10 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d902      	bls.n	8009fbc <SPI_WaitFifoStateUntilTimeout+0x80>
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d13d      	bne.n	800a038 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009fca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009fd4:	d111      	bne.n	8009ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fde:	d004      	beq.n	8009fea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fe8:	d107      	bne.n	8009ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ff8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a002:	d10f      	bne.n	800a024 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a022:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e010      	b.n	800a05a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	3b01      	subs	r3, #1
 800a046:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	689a      	ldr	r2, [r3, #8]
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	4013      	ands	r3, r2
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	429a      	cmp	r2, r3
 800a056:	d196      	bne.n	8009f86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3728      	adds	r7, #40	@ 0x28
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000004 	.word	0x20000004

0800a068 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af02      	add	r7, sp, #8
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a07c:	d111      	bne.n	800a0a2 <SPI_EndRxTransaction+0x3a>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a086:	d004      	beq.n	800a092 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a090:	d107      	bne.n	800a0a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2180      	movs	r1, #128	@ 0x80
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f7ff febd 	bl	8009e2c <SPI_WaitFlagStateUntilTimeout>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d007      	beq.n	800a0c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0bc:	f043 0220 	orr.w	r2, r3, #32
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e023      	b.n	800a110 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0d0:	d11d      	bne.n	800a10e <SPI_EndRxTransaction+0xa6>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0da:	d004      	beq.n	800a0e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0e4:	d113      	bne.n	800a10e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f7ff ff22 	bl	8009f3c <SPI_WaitFifoStateUntilTimeout>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d007      	beq.n	800a10e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a102:	f043 0220 	orr.w	r2, r3, #32
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e000      	b.n	800a110 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af02      	add	r7, sp, #8
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f7ff ff03 	bl	8009f3c <SPI_WaitFifoStateUntilTimeout>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d007      	beq.n	800a14c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a140:	f043 0220 	orr.w	r2, r3, #32
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e027      	b.n	800a19c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2200      	movs	r2, #0
 800a154:	2180      	movs	r1, #128	@ 0x80
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f7ff fe68 	bl	8009e2c <SPI_WaitFlagStateUntilTimeout>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d007      	beq.n	800a172 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a166:	f043 0220 	orr.w	r2, r3, #32
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e014      	b.n	800a19c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2200      	movs	r2, #0
 800a17a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff fedc 	bl	8009f3c <SPI_WaitFifoStateUntilTimeout>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d007      	beq.n	800a19a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a18e:	f043 0220 	orr.w	r2, r3, #32
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e000      	b.n	800a19c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e040      	b.n	800a238 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d106      	bne.n	800a1cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7f9 fa14 	bl	80035f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2224      	movs	r2, #36	@ 0x24
 800a1d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 0201 	bic.w	r2, r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d002      	beq.n	800a1f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fb38 	bl	800a860 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f8af 	bl	800a354 <UART_SetConfig>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e01b      	b.n	800a238 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a20e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a21e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f042 0201 	orr.w	r2, r2, #1
 800a22e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fbb7 	bl	800a9a4 <UART_CheckIdleState>
 800a236:	4603      	mov	r3, r0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	@ 0x28
 800a244:	af02      	add	r7, sp, #8
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	4613      	mov	r3, r2
 800a24e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a254:	2b20      	cmp	r3, #32
 800a256:	d177      	bne.n	800a348 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <HAL_UART_Transmit+0x24>
 800a25e:	88fb      	ldrh	r3, [r7, #6]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e070      	b.n	800a34a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2221      	movs	r2, #33	@ 0x21
 800a274:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a276:	f7f9 fc4b 	bl	8003b10 <HAL_GetTick>
 800a27a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	88fa      	ldrh	r2, [r7, #6]
 800a280:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	88fa      	ldrh	r2, [r7, #6]
 800a288:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a294:	d108      	bne.n	800a2a8 <HAL_UART_Transmit+0x68>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	e003      	b.n	800a2b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2b0:	e02f      	b.n	800a312 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2180      	movs	r1, #128	@ 0x80
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 fc19 	bl	800aaf4 <UART_WaitOnFlagUntilTimeout>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d004      	beq.n	800a2d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e03b      	b.n	800a34a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10b      	bne.n	800a2f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	881a      	ldrh	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2e4:	b292      	uxth	r2, r2
 800a2e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	3302      	adds	r3, #2
 800a2ec:	61bb      	str	r3, [r7, #24]
 800a2ee:	e007      	b.n	800a300 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	781a      	ldrb	r2, [r3, #0]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a306:	b29b      	uxth	r3, r3
 800a308:	3b01      	subs	r3, #1
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a318:	b29b      	uxth	r3, r3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1c9      	bne.n	800a2b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	2200      	movs	r2, #0
 800a326:	2140      	movs	r1, #64	@ 0x40
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 fbe3 	bl	800aaf4 <UART_WaitOnFlagUntilTimeout>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2220      	movs	r2, #32
 800a338:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e005      	b.n	800a34a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2220      	movs	r2, #32
 800a342:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	e000      	b.n	800a34a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a348:	2302      	movs	r3, #2
  }
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3720      	adds	r7, #32
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a358:	b08a      	sub	sp, #40	@ 0x28
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	431a      	orrs	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	431a      	orrs	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	4313      	orrs	r3, r2
 800a37a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	4ba5      	ldr	r3, [pc, #660]	@ (800a618 <UART_SetConfig+0x2c4>)
 800a384:	4013      	ands	r3, r2
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	6812      	ldr	r2, [r2, #0]
 800a38a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a38c:	430b      	orrs	r3, r1
 800a38e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a9a      	ldr	r2, [pc, #616]	@ (800a61c <UART_SetConfig+0x2c8>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d004      	beq.n	800a3c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3d0:	430a      	orrs	r2, r1
 800a3d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a91      	ldr	r2, [pc, #580]	@ (800a620 <UART_SetConfig+0x2cc>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d126      	bne.n	800a42c <UART_SetConfig+0xd8>
 800a3de:	4b91      	ldr	r3, [pc, #580]	@ (800a624 <UART_SetConfig+0x2d0>)
 800a3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3e4:	f003 0303 	and.w	r3, r3, #3
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d81b      	bhi.n	800a424 <UART_SetConfig+0xd0>
 800a3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f4 <UART_SetConfig+0xa0>)
 800a3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f2:	bf00      	nop
 800a3f4:	0800a405 	.word	0x0800a405
 800a3f8:	0800a415 	.word	0x0800a415
 800a3fc:	0800a40d 	.word	0x0800a40d
 800a400:	0800a41d 	.word	0x0800a41d
 800a404:	2301      	movs	r3, #1
 800a406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a40a:	e0d6      	b.n	800a5ba <UART_SetConfig+0x266>
 800a40c:	2302      	movs	r3, #2
 800a40e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a412:	e0d2      	b.n	800a5ba <UART_SetConfig+0x266>
 800a414:	2304      	movs	r3, #4
 800a416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a41a:	e0ce      	b.n	800a5ba <UART_SetConfig+0x266>
 800a41c:	2308      	movs	r3, #8
 800a41e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a422:	e0ca      	b.n	800a5ba <UART_SetConfig+0x266>
 800a424:	2310      	movs	r3, #16
 800a426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a42a:	e0c6      	b.n	800a5ba <UART_SetConfig+0x266>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a7d      	ldr	r2, [pc, #500]	@ (800a628 <UART_SetConfig+0x2d4>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d138      	bne.n	800a4a8 <UART_SetConfig+0x154>
 800a436:	4b7b      	ldr	r3, [pc, #492]	@ (800a624 <UART_SetConfig+0x2d0>)
 800a438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a43c:	f003 030c 	and.w	r3, r3, #12
 800a440:	2b0c      	cmp	r3, #12
 800a442:	d82d      	bhi.n	800a4a0 <UART_SetConfig+0x14c>
 800a444:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <UART_SetConfig+0xf8>)
 800a446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44a:	bf00      	nop
 800a44c:	0800a481 	.word	0x0800a481
 800a450:	0800a4a1 	.word	0x0800a4a1
 800a454:	0800a4a1 	.word	0x0800a4a1
 800a458:	0800a4a1 	.word	0x0800a4a1
 800a45c:	0800a491 	.word	0x0800a491
 800a460:	0800a4a1 	.word	0x0800a4a1
 800a464:	0800a4a1 	.word	0x0800a4a1
 800a468:	0800a4a1 	.word	0x0800a4a1
 800a46c:	0800a489 	.word	0x0800a489
 800a470:	0800a4a1 	.word	0x0800a4a1
 800a474:	0800a4a1 	.word	0x0800a4a1
 800a478:	0800a4a1 	.word	0x0800a4a1
 800a47c:	0800a499 	.word	0x0800a499
 800a480:	2300      	movs	r3, #0
 800a482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a486:	e098      	b.n	800a5ba <UART_SetConfig+0x266>
 800a488:	2302      	movs	r3, #2
 800a48a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a48e:	e094      	b.n	800a5ba <UART_SetConfig+0x266>
 800a490:	2304      	movs	r3, #4
 800a492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a496:	e090      	b.n	800a5ba <UART_SetConfig+0x266>
 800a498:	2308      	movs	r3, #8
 800a49a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a49e:	e08c      	b.n	800a5ba <UART_SetConfig+0x266>
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4a6:	e088      	b.n	800a5ba <UART_SetConfig+0x266>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a5f      	ldr	r2, [pc, #380]	@ (800a62c <UART_SetConfig+0x2d8>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d125      	bne.n	800a4fe <UART_SetConfig+0x1aa>
 800a4b2:	4b5c      	ldr	r3, [pc, #368]	@ (800a624 <UART_SetConfig+0x2d0>)
 800a4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a4bc:	2b30      	cmp	r3, #48	@ 0x30
 800a4be:	d016      	beq.n	800a4ee <UART_SetConfig+0x19a>
 800a4c0:	2b30      	cmp	r3, #48	@ 0x30
 800a4c2:	d818      	bhi.n	800a4f6 <UART_SetConfig+0x1a2>
 800a4c4:	2b20      	cmp	r3, #32
 800a4c6:	d00a      	beq.n	800a4de <UART_SetConfig+0x18a>
 800a4c8:	2b20      	cmp	r3, #32
 800a4ca:	d814      	bhi.n	800a4f6 <UART_SetConfig+0x1a2>
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <UART_SetConfig+0x182>
 800a4d0:	2b10      	cmp	r3, #16
 800a4d2:	d008      	beq.n	800a4e6 <UART_SetConfig+0x192>
 800a4d4:	e00f      	b.n	800a4f6 <UART_SetConfig+0x1a2>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4dc:	e06d      	b.n	800a5ba <UART_SetConfig+0x266>
 800a4de:	2302      	movs	r3, #2
 800a4e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4e4:	e069      	b.n	800a5ba <UART_SetConfig+0x266>
 800a4e6:	2304      	movs	r3, #4
 800a4e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4ec:	e065      	b.n	800a5ba <UART_SetConfig+0x266>
 800a4ee:	2308      	movs	r3, #8
 800a4f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4f4:	e061      	b.n	800a5ba <UART_SetConfig+0x266>
 800a4f6:	2310      	movs	r3, #16
 800a4f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4fc:	e05d      	b.n	800a5ba <UART_SetConfig+0x266>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a4b      	ldr	r2, [pc, #300]	@ (800a630 <UART_SetConfig+0x2dc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d125      	bne.n	800a554 <UART_SetConfig+0x200>
 800a508:	4b46      	ldr	r3, [pc, #280]	@ (800a624 <UART_SetConfig+0x2d0>)
 800a50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a50e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a512:	2bc0      	cmp	r3, #192	@ 0xc0
 800a514:	d016      	beq.n	800a544 <UART_SetConfig+0x1f0>
 800a516:	2bc0      	cmp	r3, #192	@ 0xc0
 800a518:	d818      	bhi.n	800a54c <UART_SetConfig+0x1f8>
 800a51a:	2b80      	cmp	r3, #128	@ 0x80
 800a51c:	d00a      	beq.n	800a534 <UART_SetConfig+0x1e0>
 800a51e:	2b80      	cmp	r3, #128	@ 0x80
 800a520:	d814      	bhi.n	800a54c <UART_SetConfig+0x1f8>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <UART_SetConfig+0x1d8>
 800a526:	2b40      	cmp	r3, #64	@ 0x40
 800a528:	d008      	beq.n	800a53c <UART_SetConfig+0x1e8>
 800a52a:	e00f      	b.n	800a54c <UART_SetConfig+0x1f8>
 800a52c:	2300      	movs	r3, #0
 800a52e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a532:	e042      	b.n	800a5ba <UART_SetConfig+0x266>
 800a534:	2302      	movs	r3, #2
 800a536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a53a:	e03e      	b.n	800a5ba <UART_SetConfig+0x266>
 800a53c:	2304      	movs	r3, #4
 800a53e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a542:	e03a      	b.n	800a5ba <UART_SetConfig+0x266>
 800a544:	2308      	movs	r3, #8
 800a546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a54a:	e036      	b.n	800a5ba <UART_SetConfig+0x266>
 800a54c:	2310      	movs	r3, #16
 800a54e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a552:	e032      	b.n	800a5ba <UART_SetConfig+0x266>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a30      	ldr	r2, [pc, #192]	@ (800a61c <UART_SetConfig+0x2c8>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d12a      	bne.n	800a5b4 <UART_SetConfig+0x260>
 800a55e:	4b31      	ldr	r3, [pc, #196]	@ (800a624 <UART_SetConfig+0x2d0>)
 800a560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a564:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a568:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a56c:	d01a      	beq.n	800a5a4 <UART_SetConfig+0x250>
 800a56e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a572:	d81b      	bhi.n	800a5ac <UART_SetConfig+0x258>
 800a574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a578:	d00c      	beq.n	800a594 <UART_SetConfig+0x240>
 800a57a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a57e:	d815      	bhi.n	800a5ac <UART_SetConfig+0x258>
 800a580:	2b00      	cmp	r3, #0
 800a582:	d003      	beq.n	800a58c <UART_SetConfig+0x238>
 800a584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a588:	d008      	beq.n	800a59c <UART_SetConfig+0x248>
 800a58a:	e00f      	b.n	800a5ac <UART_SetConfig+0x258>
 800a58c:	2300      	movs	r3, #0
 800a58e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a592:	e012      	b.n	800a5ba <UART_SetConfig+0x266>
 800a594:	2302      	movs	r3, #2
 800a596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a59a:	e00e      	b.n	800a5ba <UART_SetConfig+0x266>
 800a59c:	2304      	movs	r3, #4
 800a59e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a5a2:	e00a      	b.n	800a5ba <UART_SetConfig+0x266>
 800a5a4:	2308      	movs	r3, #8
 800a5a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a5aa:	e006      	b.n	800a5ba <UART_SetConfig+0x266>
 800a5ac:	2310      	movs	r3, #16
 800a5ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a5b2:	e002      	b.n	800a5ba <UART_SetConfig+0x266>
 800a5b4:	2310      	movs	r3, #16
 800a5b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a17      	ldr	r2, [pc, #92]	@ (800a61c <UART_SetConfig+0x2c8>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	f040 808b 	bne.w	800a6dc <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a5c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a5ca:	2b08      	cmp	r3, #8
 800a5cc:	d834      	bhi.n	800a638 <UART_SetConfig+0x2e4>
 800a5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d4 <UART_SetConfig+0x280>)
 800a5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d4:	0800a5f9 	.word	0x0800a5f9
 800a5d8:	0800a639 	.word	0x0800a639
 800a5dc:	0800a601 	.word	0x0800a601
 800a5e0:	0800a639 	.word	0x0800a639
 800a5e4:	0800a607 	.word	0x0800a607
 800a5e8:	0800a639 	.word	0x0800a639
 800a5ec:	0800a639 	.word	0x0800a639
 800a5f0:	0800a639 	.word	0x0800a639
 800a5f4:	0800a60f 	.word	0x0800a60f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5f8:	f7fd f996 	bl	8007928 <HAL_RCC_GetPCLK1Freq>
 800a5fc:	61f8      	str	r0, [r7, #28]
        break;
 800a5fe:	e021      	b.n	800a644 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a600:	4b0c      	ldr	r3, [pc, #48]	@ (800a634 <UART_SetConfig+0x2e0>)
 800a602:	61fb      	str	r3, [r7, #28]
        break;
 800a604:	e01e      	b.n	800a644 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a606:	f7fd f8f7 	bl	80077f8 <HAL_RCC_GetSysClockFreq>
 800a60a:	61f8      	str	r0, [r7, #28]
        break;
 800a60c:	e01a      	b.n	800a644 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a60e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a612:	61fb      	str	r3, [r7, #28]
        break;
 800a614:	e016      	b.n	800a644 <UART_SetConfig+0x2f0>
 800a616:	bf00      	nop
 800a618:	efff69f3 	.word	0xefff69f3
 800a61c:	40008000 	.word	0x40008000
 800a620:	40013800 	.word	0x40013800
 800a624:	40021000 	.word	0x40021000
 800a628:	40004400 	.word	0x40004400
 800a62c:	40004800 	.word	0x40004800
 800a630:	40004c00 	.word	0x40004c00
 800a634:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a642:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 80fa 	beq.w	800a840 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	4613      	mov	r3, r2
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	4413      	add	r3, r2
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d305      	bcc.n	800a668 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	429a      	cmp	r2, r3
 800a666:	d903      	bls.n	800a670 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a66e:	e0e7      	b.n	800a840 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	2200      	movs	r2, #0
 800a674:	461c      	mov	r4, r3
 800a676:	4615      	mov	r5, r2
 800a678:	f04f 0200 	mov.w	r2, #0
 800a67c:	f04f 0300 	mov.w	r3, #0
 800a680:	022b      	lsls	r3, r5, #8
 800a682:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a686:	0222      	lsls	r2, r4, #8
 800a688:	68f9      	ldr	r1, [r7, #12]
 800a68a:	6849      	ldr	r1, [r1, #4]
 800a68c:	0849      	lsrs	r1, r1, #1
 800a68e:	2000      	movs	r0, #0
 800a690:	4688      	mov	r8, r1
 800a692:	4681      	mov	r9, r0
 800a694:	eb12 0a08 	adds.w	sl, r2, r8
 800a698:	eb43 0b09 	adc.w	fp, r3, r9
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	607a      	str	r2, [r7, #4]
 800a6a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6aa:	4650      	mov	r0, sl
 800a6ac:	4659      	mov	r1, fp
 800a6ae:	f7f6 faf3 	bl	8000c98 <__aeabi_uldivmod>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6c0:	d308      	bcc.n	800a6d4 <UART_SetConfig+0x380>
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6c8:	d204      	bcs.n	800a6d4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	60da      	str	r2, [r3, #12]
 800a6d2:	e0b5      	b.n	800a840 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a6da:	e0b1      	b.n	800a840 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6e4:	d15d      	bne.n	800a7a2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800a6e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a6ea:	2b08      	cmp	r3, #8
 800a6ec:	d827      	bhi.n	800a73e <UART_SetConfig+0x3ea>
 800a6ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f4 <UART_SetConfig+0x3a0>)
 800a6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f4:	0800a719 	.word	0x0800a719
 800a6f8:	0800a721 	.word	0x0800a721
 800a6fc:	0800a729 	.word	0x0800a729
 800a700:	0800a73f 	.word	0x0800a73f
 800a704:	0800a72f 	.word	0x0800a72f
 800a708:	0800a73f 	.word	0x0800a73f
 800a70c:	0800a73f 	.word	0x0800a73f
 800a710:	0800a73f 	.word	0x0800a73f
 800a714:	0800a737 	.word	0x0800a737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a718:	f7fd f906 	bl	8007928 <HAL_RCC_GetPCLK1Freq>
 800a71c:	61f8      	str	r0, [r7, #28]
        break;
 800a71e:	e014      	b.n	800a74a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a720:	f7fd f918 	bl	8007954 <HAL_RCC_GetPCLK2Freq>
 800a724:	61f8      	str	r0, [r7, #28]
        break;
 800a726:	e010      	b.n	800a74a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a728:	4b4c      	ldr	r3, [pc, #304]	@ (800a85c <UART_SetConfig+0x508>)
 800a72a:	61fb      	str	r3, [r7, #28]
        break;
 800a72c:	e00d      	b.n	800a74a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a72e:	f7fd f863 	bl	80077f8 <HAL_RCC_GetSysClockFreq>
 800a732:	61f8      	str	r0, [r7, #28]
        break;
 800a734:	e009      	b.n	800a74a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a73a:	61fb      	str	r3, [r7, #28]
        break;
 800a73c:	e005      	b.n	800a74a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d077      	beq.n	800a840 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	005a      	lsls	r2, r3, #1
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	085b      	lsrs	r3, r3, #1
 800a75a:	441a      	add	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	fbb2 f3f3 	udiv	r3, r2, r3
 800a764:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	2b0f      	cmp	r3, #15
 800a76a:	d916      	bls.n	800a79a <UART_SetConfig+0x446>
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a772:	d212      	bcs.n	800a79a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	b29b      	uxth	r3, r3
 800a778:	f023 030f 	bic.w	r3, r3, #15
 800a77c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	085b      	lsrs	r3, r3, #1
 800a782:	b29b      	uxth	r3, r3
 800a784:	f003 0307 	and.w	r3, r3, #7
 800a788:	b29a      	uxth	r2, r3
 800a78a:	8afb      	ldrh	r3, [r7, #22]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	8afa      	ldrh	r2, [r7, #22]
 800a796:	60da      	str	r2, [r3, #12]
 800a798:	e052      	b.n	800a840 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a7a0:	e04e      	b.n	800a840 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a7a6:	2b08      	cmp	r3, #8
 800a7a8:	d827      	bhi.n	800a7fa <UART_SetConfig+0x4a6>
 800a7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b0 <UART_SetConfig+0x45c>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a7d5 	.word	0x0800a7d5
 800a7b4:	0800a7dd 	.word	0x0800a7dd
 800a7b8:	0800a7e5 	.word	0x0800a7e5
 800a7bc:	0800a7fb 	.word	0x0800a7fb
 800a7c0:	0800a7eb 	.word	0x0800a7eb
 800a7c4:	0800a7fb 	.word	0x0800a7fb
 800a7c8:	0800a7fb 	.word	0x0800a7fb
 800a7cc:	0800a7fb 	.word	0x0800a7fb
 800a7d0:	0800a7f3 	.word	0x0800a7f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7d4:	f7fd f8a8 	bl	8007928 <HAL_RCC_GetPCLK1Freq>
 800a7d8:	61f8      	str	r0, [r7, #28]
        break;
 800a7da:	e014      	b.n	800a806 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7dc:	f7fd f8ba 	bl	8007954 <HAL_RCC_GetPCLK2Freq>
 800a7e0:	61f8      	str	r0, [r7, #28]
        break;
 800a7e2:	e010      	b.n	800a806 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7e4:	4b1d      	ldr	r3, [pc, #116]	@ (800a85c <UART_SetConfig+0x508>)
 800a7e6:	61fb      	str	r3, [r7, #28]
        break;
 800a7e8:	e00d      	b.n	800a806 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7ea:	f7fd f805 	bl	80077f8 <HAL_RCC_GetSysClockFreq>
 800a7ee:	61f8      	str	r0, [r7, #28]
        break;
 800a7f0:	e009      	b.n	800a806 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7f6:	61fb      	str	r3, [r7, #28]
        break;
 800a7f8:	e005      	b.n	800a806 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a804:	bf00      	nop
    }

    if (pclk != 0U)
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d019      	beq.n	800a840 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	085a      	lsrs	r2, r3, #1
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	441a      	add	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a81e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	2b0f      	cmp	r3, #15
 800a824:	d909      	bls.n	800a83a <UART_SetConfig+0x4e6>
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a82c:	d205      	bcs.n	800a83a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	b29a      	uxth	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	60da      	str	r2, [r3, #12]
 800a838:	e002      	b.n	800a840 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a84c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a850:	4618      	mov	r0, r3
 800a852:	3728      	adds	r7, #40	@ 0x28
 800a854:	46bd      	mov	sp, r7
 800a856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a85a:	bf00      	nop
 800a85c:	00f42400 	.word	0x00f42400

0800a860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86c:	f003 0308 	and.w	r3, r3, #8
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00a      	beq.n	800a88a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	430a      	orrs	r2, r1
 800a888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00a      	beq.n	800a8ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00a      	beq.n	800a8ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d2:	f003 0304 	and.w	r3, r3, #4
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	430a      	orrs	r2, r1
 800a8ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f4:	f003 0310 	and.w	r3, r3, #16
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00a      	beq.n	800a912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	430a      	orrs	r2, r1
 800a910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a916:	f003 0320 	and.w	r3, r3, #32
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00a      	beq.n	800a934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d01a      	beq.n	800a976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	430a      	orrs	r2, r1
 800a954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a95e:	d10a      	bne.n	800a976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	430a      	orrs	r2, r1
 800a974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00a      	beq.n	800a998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	430a      	orrs	r2, r1
 800a996:	605a      	str	r2, [r3, #4]
  }
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b098      	sub	sp, #96	@ 0x60
 800a9a8:	af02      	add	r7, sp, #8
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9b4:	f7f9 f8ac 	bl	8003b10 <HAL_GetTick>
 800a9b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0308 	and.w	r3, r3, #8
 800a9c4:	2b08      	cmp	r3, #8
 800a9c6:	d12e      	bne.n	800aa26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f88c 	bl	800aaf4 <UART_WaitOnFlagUntilTimeout>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d021      	beq.n	800aa26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ea:	e853 3f00 	ldrex	r3, [r3]
 800a9ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa00:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa08:	e841 2300 	strex	r3, r2, [r1]
 800aa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e6      	bne.n	800a9e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2220      	movs	r2, #32
 800aa18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e062      	b.n	800aaec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0304 	and.w	r3, r3, #4
 800aa30:	2b04      	cmp	r3, #4
 800aa32:	d149      	bne.n	800aac8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f856 	bl	800aaf4 <UART_WaitOnFlagUntilTimeout>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d03c      	beq.n	800aac8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	623b      	str	r3, [r7, #32]
   return(result);
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e6      	bne.n	800aa4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	3308      	adds	r3, #8
 800aa86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f023 0301 	bic.w	r3, r3, #1
 800aa96:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3308      	adds	r3, #8
 800aa9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aaa0:	61fa      	str	r2, [r7, #28]
 800aaa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	69b9      	ldr	r1, [r7, #24]
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	617b      	str	r3, [r7, #20]
   return(result);
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e5      	bne.n	800aa80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2220      	movs	r2, #32
 800aab8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e011      	b.n	800aaec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2220      	movs	r2, #32
 800aacc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2220      	movs	r2, #32
 800aad2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3758      	adds	r7, #88	@ 0x58
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	603b      	str	r3, [r7, #0]
 800ab00:	4613      	mov	r3, r2
 800ab02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab04:	e049      	b.n	800ab9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab0c:	d045      	beq.n	800ab9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab0e:	f7f8 ffff 	bl	8003b10 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	69ba      	ldr	r2, [r7, #24]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d302      	bcc.n	800ab24 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d101      	bne.n	800ab28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab24:	2303      	movs	r3, #3
 800ab26:	e048      	b.n	800abba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 0304 	and.w	r3, r3, #4
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d031      	beq.n	800ab9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	69db      	ldr	r3, [r3, #28]
 800ab3c:	f003 0308 	and.w	r3, r3, #8
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d110      	bne.n	800ab66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2208      	movs	r2, #8
 800ab4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f000 f838 	bl	800abc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2208      	movs	r2, #8
 800ab56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e029      	b.n	800abba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	69db      	ldr	r3, [r3, #28]
 800ab6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab74:	d111      	bne.n	800ab9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 f81e 	bl	800abc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2220      	movs	r2, #32
 800ab8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e00f      	b.n	800abba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	69da      	ldr	r2, [r3, #28]
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	4013      	ands	r3, r2
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	bf0c      	ite	eq
 800abaa:	2301      	moveq	r3, #1
 800abac:	2300      	movne	r3, #0
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	461a      	mov	r2, r3
 800abb2:	79fb      	ldrb	r3, [r7, #7]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d0a6      	beq.n	800ab06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b095      	sub	sp, #84	@ 0x54
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd2:	e853 3f00 	ldrex	r3, [r3]
 800abd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	461a      	mov	r2, r3
 800abe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abe8:	643b      	str	r3, [r7, #64]	@ 0x40
 800abea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e6      	bne.n	800abca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3308      	adds	r3, #8
 800ac02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	f023 0301 	bic.w	r3, r3, #1
 800ac12:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac24:	e841 2300 	strex	r3, r2, [r1]
 800ac28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1e5      	bne.n	800abfc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d118      	bne.n	800ac6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	e853 3f00 	ldrex	r3, [r3]
 800ac44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	f023 0310 	bic.w	r3, r3, #16
 800ac4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac56:	61bb      	str	r3, [r7, #24]
 800ac58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5a:	6979      	ldr	r1, [r7, #20]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	e841 2300 	strex	r3, r2, [r1]
 800ac62:	613b      	str	r3, [r7, #16]
   return(result);
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e6      	bne.n	800ac38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ac7e:	bf00      	nop
 800ac80:	3754      	adds	r7, #84	@ 0x54
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	f107 0014 	add.w	r0, r7, #20
 800ac98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	b004      	add	sp, #16
 800acaa:	4770      	bx	lr

0800acac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800acbc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800acc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800acda:	b480      	push	{r7}
 800acdc:	b085      	sub	sp, #20
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ace2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ace6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800acee:	b29a      	uxth	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	43db      	mvns	r3, r3
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	4013      	ands	r3, r2
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	f107 0014 	add.w	r0, r7, #20
 800ad38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	370c      	adds	r7, #12
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	b004      	add	sp, #16
 800ad6a:	4770      	bx	lr

0800ad6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b09d      	sub	sp, #116	@ 0x74
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800ad8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad92:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	78db      	ldrb	r3, [r3, #3]
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d81f      	bhi.n	800adde <USB_ActivateEndpoint+0x72>
 800ad9e:	a201      	add	r2, pc, #4	@ (adr r2, 800ada4 <USB_ActivateEndpoint+0x38>)
 800ada0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada4:	0800adb5 	.word	0x0800adb5
 800ada8:	0800add1 	.word	0x0800add1
 800adac:	0800ade7 	.word	0x0800ade7
 800adb0:	0800adc3 	.word	0x0800adc3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800adb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800adb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800adbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800adc0:	e012      	b.n	800ade8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800adc2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800adc6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800adca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800adce:	e00b      	b.n	800ade8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800add0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800add4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800add8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800addc:	e004      	b.n	800ade8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800ade4:	e000      	b.n	800ade8 <USB_ActivateEndpoint+0x7c>
      break;
 800ade6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	441a      	add	r2, r3
 800adf2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800adf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4413      	add	r3, r2
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	b21b      	sxth	r3, r3
 800ae1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae22:	b21a      	sxth	r2, r3
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	b21b      	sxth	r3, r3
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	b21b      	sxth	r3, r3
 800ae2e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	441a      	add	r2, r3
 800ae3c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800ae40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	7b1b      	ldrb	r3, [r3, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f040 8178 	bne.w	800b14e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	785b      	ldrb	r3, [r3, #1]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f000 8084 	beq.w	800af70 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	61bb      	str	r3, [r7, #24]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	461a      	mov	r2, r3
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	4413      	add	r3, r2
 800ae7a:	61bb      	str	r3, [r7, #24]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	00da      	lsls	r2, r3, #3
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae8a:	617b      	str	r3, [r7, #20]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	88db      	ldrh	r3, [r3, #6]
 800ae90:	085b      	lsrs	r3, r3, #1
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	827b      	strh	r3, [r7, #18]
 800aeaa:	8a7b      	ldrh	r3, [r7, #18]
 800aeac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d01b      	beq.n	800aeec <USB_ActivateEndpoint+0x180>
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeca:	823b      	strh	r3, [r7, #16]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	441a      	add	r2, r3
 800aed6:	8a3b      	ldrh	r3, [r7, #16]
 800aed8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aedc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aee0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aee4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	78db      	ldrb	r3, [r3, #3]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d020      	beq.n	800af36 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	881b      	ldrh	r3, [r3, #0]
 800af00:	b29b      	uxth	r3, r3
 800af02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af0a:	81bb      	strh	r3, [r7, #12]
 800af0c:	89bb      	ldrh	r3, [r7, #12]
 800af0e:	f083 0320 	eor.w	r3, r3, #32
 800af12:	81bb      	strh	r3, [r7, #12]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	441a      	add	r2, r3
 800af1e:	89bb      	ldrh	r3, [r7, #12]
 800af20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af30:	b29b      	uxth	r3, r3
 800af32:	8013      	strh	r3, [r2, #0]
 800af34:	e2d5      	b.n	800b4e2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	881b      	ldrh	r3, [r3, #0]
 800af42:	b29b      	uxth	r3, r3
 800af44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af4c:	81fb      	strh	r3, [r7, #14]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	441a      	add	r2, r3
 800af58:	89fb      	ldrh	r3, [r7, #14]
 800af5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	8013      	strh	r3, [r2, #0]
 800af6e:	e2b8      	b.n	800b4e2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	633b      	str	r3, [r7, #48]	@ 0x30
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	461a      	mov	r2, r3
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	4413      	add	r3, r2
 800af82:	633b      	str	r3, [r7, #48]	@ 0x30
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	00da      	lsls	r2, r3, #3
 800af8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8c:	4413      	add	r3, r2
 800af8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800af92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	88db      	ldrh	r3, [r3, #6]
 800af98:	085b      	lsrs	r3, r3, #1
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afae:	b29b      	uxth	r3, r3
 800afb0:	461a      	mov	r2, r3
 800afb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb4:	4413      	add	r3, r2
 800afb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	00da      	lsls	r2, r3, #3
 800afbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc0:	4413      	add	r3, r2
 800afc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800afc6:	627b      	str	r3, [r7, #36]	@ 0x24
 800afc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd6:	801a      	strh	r2, [r3, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	2b3e      	cmp	r3, #62	@ 0x3e
 800afde:	d91d      	bls.n	800b01c <USB_ActivateEndpoint+0x2b0>
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	095b      	lsrs	r3, r3, #5
 800afe6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	f003 031f 	and.w	r3, r3, #31
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d102      	bne.n	800affa <USB_ActivateEndpoint+0x28e>
 800aff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aff6:	3b01      	subs	r3, #1
 800aff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800affa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	b29a      	uxth	r2, r3
 800b000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b002:	b29b      	uxth	r3, r3
 800b004:	029b      	lsls	r3, r3, #10
 800b006:	b29b      	uxth	r3, r3
 800b008:	4313      	orrs	r3, r2
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b014:	b29a      	uxth	r2, r3
 800b016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b018:	801a      	strh	r2, [r3, #0]
 800b01a:	e026      	b.n	800b06a <USB_ActivateEndpoint+0x2fe>
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10a      	bne.n	800b03a <USB_ActivateEndpoint+0x2ce>
 800b024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b02e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b032:	b29a      	uxth	r2, r3
 800b034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b036:	801a      	strh	r2, [r3, #0]
 800b038:	e017      	b.n	800b06a <USB_ActivateEndpoint+0x2fe>
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	085b      	lsrs	r3, r3, #1
 800b040:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f003 0301 	and.w	r3, r3, #1
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <USB_ActivateEndpoint+0x2e8>
 800b04e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b050:	3301      	adds	r3, #1
 800b052:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	b29a      	uxth	r2, r3
 800b05a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	029b      	lsls	r3, r3, #10
 800b060:	b29b      	uxth	r3, r3
 800b062:	4313      	orrs	r3, r2
 800b064:	b29a      	uxth	r2, r3
 800b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b068:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	4413      	add	r3, r2
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b078:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b07a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d01b      	beq.n	800b0ba <USB_ActivateEndpoint+0x34e>
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	881b      	ldrh	r3, [r3, #0]
 800b08e:	b29b      	uxth	r3, r3
 800b090:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b098:	843b      	strh	r3, [r7, #32]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	441a      	add	r2, r3
 800b0a4:	8c3b      	ldrh	r3, [r7, #32]
 800b0a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d124      	bne.n	800b10c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0d8:	83bb      	strh	r3, [r7, #28]
 800b0da:	8bbb      	ldrh	r3, [r7, #28]
 800b0dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b0e0:	83bb      	strh	r3, [r7, #28]
 800b0e2:	8bbb      	ldrh	r3, [r7, #28]
 800b0e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b0e8:	83bb      	strh	r3, [r7, #28]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	441a      	add	r2, r3
 800b0f4:	8bbb      	ldrh	r3, [r7, #28]
 800b0f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b106:	b29b      	uxth	r3, r3
 800b108:	8013      	strh	r3, [r2, #0]
 800b10a:	e1ea      	b.n	800b4e2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4413      	add	r3, r2
 800b116:	881b      	ldrh	r3, [r3, #0]
 800b118:	b29b      	uxth	r3, r3
 800b11a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b11e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b122:	83fb      	strh	r3, [r7, #30]
 800b124:	8bfb      	ldrh	r3, [r7, #30]
 800b126:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b12a:	83fb      	strh	r3, [r7, #30]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	441a      	add	r2, r3
 800b136:	8bfb      	ldrh	r3, [r7, #30]
 800b138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b13c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b148:	b29b      	uxth	r3, r3
 800b14a:	8013      	strh	r3, [r2, #0]
 800b14c:	e1c9      	b.n	800b4e2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	78db      	ldrb	r3, [r3, #3]
 800b152:	2b02      	cmp	r3, #2
 800b154:	d11e      	bne.n	800b194 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	b29b      	uxth	r3, r3
 800b164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b16c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	441a      	add	r2, r3
 800b17a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b17e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b182:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b186:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b18e:	b29b      	uxth	r3, r3
 800b190:	8013      	strh	r3, [r2, #0]
 800b192:	e01d      	b.n	800b1d0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	881b      	ldrh	r3, [r3, #0]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b1a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1aa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	441a      	add	r2, r3
 800b1b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b1bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	461a      	mov	r2, r3
 800b1de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1e0:	4413      	add	r3, r2
 800b1e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	00da      	lsls	r2, r3, #3
 800b1ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	891b      	ldrh	r3, [r3, #8]
 800b1f8:	085b      	lsrs	r3, r3, #1
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	005b      	lsls	r3, r3, #1
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b202:	801a      	strh	r2, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	657b      	str	r3, [r7, #84]	@ 0x54
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b20e:	b29b      	uxth	r3, r3
 800b210:	461a      	mov	r2, r3
 800b212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b214:	4413      	add	r3, r2
 800b216:	657b      	str	r3, [r7, #84]	@ 0x54
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	00da      	lsls	r2, r3, #3
 800b21e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b220:	4413      	add	r3, r2
 800b222:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b226:	653b      	str	r3, [r7, #80]	@ 0x50
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	895b      	ldrh	r3, [r3, #10]
 800b22c:	085b      	lsrs	r3, r3, #1
 800b22e:	b29b      	uxth	r3, r3
 800b230:	005b      	lsls	r3, r3, #1
 800b232:	b29a      	uxth	r2, r3
 800b234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b236:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	785b      	ldrb	r3, [r3, #1]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f040 8093 	bne.w	800b368 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4413      	add	r3, r2
 800b24c:	881b      	ldrh	r3, [r3, #0]
 800b24e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800b252:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d01b      	beq.n	800b296 <USB_ActivateEndpoint+0x52a>
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b274:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	441a      	add	r2, r3
 800b280:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b28a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b292:	b29b      	uxth	r3, r3
 800b294:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	881b      	ldrh	r3, [r3, #0]
 800b2a2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800b2a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b2a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d01b      	beq.n	800b2e6 <USB_ActivateEndpoint+0x57a>
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	881b      	ldrh	r3, [r3, #0]
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	441a      	add	r2, r3
 800b2d0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b2d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	881b      	ldrh	r3, [r3, #0]
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b2f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2fc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b2fe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b300:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b304:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b306:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b308:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b30c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	441a      	add	r2, r3
 800b318:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b31a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b31e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	881b      	ldrh	r3, [r3, #0]
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b344:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	441a      	add	r2, r3
 800b350:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b35a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b35e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b362:	b29b      	uxth	r3, r3
 800b364:	8013      	strh	r3, [r2, #0]
 800b366:	e0bc      	b.n	800b4e2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b378:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b37c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d01d      	beq.n	800b3c0 <USB_ActivateEndpoint+0x654>
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	881b      	ldrh	r3, [r3, #0]
 800b390:	b29b      	uxth	r3, r3
 800b392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b39a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	441a      	add	r2, r3
 800b3a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b3ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b3b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b3d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b3d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d01d      	beq.n	800b418 <USB_ActivateEndpoint+0x6ac>
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3f2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	441a      	add	r2, r3
 800b400:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800b404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b40c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b410:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b414:	b29b      	uxth	r3, r3
 800b416:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	78db      	ldrb	r3, [r3, #3]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d024      	beq.n	800b46a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	881b      	ldrh	r3, [r3, #0]
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b436:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b43a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b43e:	f083 0320 	eor.w	r3, r3, #32
 800b442:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	441a      	add	r2, r3
 800b450:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b45c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b464:	b29b      	uxth	r3, r3
 800b466:	8013      	strh	r3, [r2, #0]
 800b468:	e01d      	b.n	800b4a6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	881b      	ldrh	r3, [r3, #0]
 800b476:	b29b      	uxth	r3, r3
 800b478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b47c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b480:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	441a      	add	r2, r3
 800b48e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b49a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b49e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	4413      	add	r3, r2
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b4b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	441a      	add	r2, r3
 800b4ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b4ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b4e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3774      	adds	r7, #116	@ 0x74
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop

0800b4f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b08d      	sub	sp, #52	@ 0x34
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	7b1b      	ldrb	r3, [r3, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	f040 808e 	bne.w	800b624 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	785b      	ldrb	r3, [r3, #1]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d044      	beq.n	800b59a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	81bb      	strh	r3, [r7, #12]
 800b51e:	89bb      	ldrh	r3, [r7, #12]
 800b520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b524:	2b00      	cmp	r3, #0
 800b526:	d01b      	beq.n	800b560 <USB_DeactivateEndpoint+0x6c>
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	4413      	add	r3, r2
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	b29b      	uxth	r3, r3
 800b536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b53a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b53e:	817b      	strh	r3, [r7, #10]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	441a      	add	r2, r3
 800b54a:	897b      	ldrh	r3, [r7, #10]
 800b54c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b558:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	4413      	add	r3, r2
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b576:	813b      	strh	r3, [r7, #8]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	441a      	add	r2, r3
 800b582:	893b      	ldrh	r3, [r7, #8]
 800b584:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b588:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b58c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b594:	b29b      	uxth	r3, r3
 800b596:	8013      	strh	r3, [r2, #0]
 800b598:	e192      	b.n	800b8c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	881b      	ldrh	r3, [r3, #0]
 800b5a6:	827b      	strh	r3, [r7, #18]
 800b5a8:	8a7b      	ldrh	r3, [r7, #18]
 800b5aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d01b      	beq.n	800b5ea <USB_DeactivateEndpoint+0xf6>
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	881b      	ldrh	r3, [r3, #0]
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5c8:	823b      	strh	r3, [r7, #16]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	441a      	add	r2, r3
 800b5d4:	8a3b      	ldrh	r3, [r7, #16]
 800b5d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b5e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b5fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b600:	81fb      	strh	r3, [r7, #14]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	441a      	add	r2, r3
 800b60c:	89fb      	ldrh	r3, [r7, #14]
 800b60e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b61e:	b29b      	uxth	r3, r3
 800b620:	8013      	strh	r3, [r2, #0]
 800b622:	e14d      	b.n	800b8c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	785b      	ldrb	r3, [r3, #1]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f040 80a5 	bne.w	800b778 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	4413      	add	r3, r2
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	843b      	strh	r3, [r7, #32]
 800b63c:	8c3b      	ldrh	r3, [r7, #32]
 800b63e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b642:	2b00      	cmp	r3, #0
 800b644:	d01b      	beq.n	800b67e <USB_DeactivateEndpoint+0x18a>
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	881b      	ldrh	r3, [r3, #0]
 800b652:	b29b      	uxth	r3, r3
 800b654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b65c:	83fb      	strh	r3, [r7, #30]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	441a      	add	r2, r3
 800b668:	8bfb      	ldrh	r3, [r7, #30]
 800b66a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b66e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	83bb      	strh	r3, [r7, #28]
 800b68c:	8bbb      	ldrh	r3, [r7, #28]
 800b68e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b692:	2b00      	cmp	r3, #0
 800b694:	d01b      	beq.n	800b6ce <USB_DeactivateEndpoint+0x1da>
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6ac:	837b      	strh	r3, [r7, #26]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	441a      	add	r2, r3
 800b6b8:	8b7b      	ldrh	r3, [r7, #26]
 800b6ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	881b      	ldrh	r3, [r3, #0]
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6e4:	833b      	strh	r3, [r7, #24]
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	441a      	add	r2, r3
 800b6f0:	8b3b      	ldrh	r3, [r7, #24]
 800b6f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b702:	b29b      	uxth	r3, r3
 800b704:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	4413      	add	r3, r2
 800b710:	881b      	ldrh	r3, [r3, #0]
 800b712:	b29b      	uxth	r3, r3
 800b714:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b71c:	82fb      	strh	r3, [r7, #22]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	441a      	add	r2, r3
 800b728:	8afb      	ldrh	r3, [r7, #22]
 800b72a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b72e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b754:	82bb      	strh	r3, [r7, #20]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	441a      	add	r2, r3
 800b760:	8abb      	ldrh	r3, [r7, #20]
 800b762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b76a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b76e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b772:	b29b      	uxth	r3, r3
 800b774:	8013      	strh	r3, [r2, #0]
 800b776:	e0a3      	b.n	800b8c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b786:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d01b      	beq.n	800b7c8 <USB_DeactivateEndpoint+0x2d4>
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4413      	add	r3, r2
 800b79a:	881b      	ldrh	r3, [r3, #0]
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	441a      	add	r2, r3
 800b7b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b7b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b7c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4413      	add	r3, r2
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b7d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b7d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d01b      	beq.n	800b818 <USB_DeactivateEndpoint+0x324>
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	881b      	ldrh	r3, [r3, #0]
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	441a      	add	r2, r3
 800b802:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b80c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b810:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b814:	b29b      	uxth	r3, r3
 800b816:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	b29b      	uxth	r3, r3
 800b826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b82a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b82e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	441a      	add	r2, r3
 800b83a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b83c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4413      	add	r3, r2
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b866:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	441a      	add	r2, r3
 800b872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b87c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b884:	b29b      	uxth	r3, r3
 800b886:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4413      	add	r3, r2
 800b892:	881b      	ldrh	r3, [r3, #0]
 800b894:	b29b      	uxth	r3, r3
 800b896:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b89a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b89e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	441a      	add	r2, r3
 800b8aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b8ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3734      	adds	r7, #52	@ 0x34
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b0c2      	sub	sp, #264	@ 0x108
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8dc:	6018      	str	r0, [r3, #0]
 800b8de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8e6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b8e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	785b      	ldrb	r3, [r3, #1]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	f040 86b7 	bne.w	800c668 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	699a      	ldr	r2, [r3, #24]
 800b906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b90a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	429a      	cmp	r2, r3
 800b914:	d908      	bls.n	800b928 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b91a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b926:	e007      	b.n	800b938 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b92c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b93c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	7b1b      	ldrb	r3, [r3, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d13a      	bne.n	800b9be <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b94c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6959      	ldr	r1, [r3, #20]
 800b954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	88da      	ldrh	r2, [r3, #6]
 800b960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b964:	b29b      	uxth	r3, r3
 800b966:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b96a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b96e:	6800      	ldr	r0, [r0, #0]
 800b970:	f001 fcb9 	bl	800d2e6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b978:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	613b      	str	r3, [r7, #16]
 800b980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b984:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b98e:	b29b      	uxth	r3, r3
 800b990:	461a      	mov	r2, r3
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	4413      	add	r3, r2
 800b996:	613b      	str	r3, [r7, #16]
 800b998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b99c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	00da      	lsls	r2, r3, #3
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b9ae:	60fb      	str	r3, [r7, #12]
 800b9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	801a      	strh	r2, [r3, #0]
 800b9ba:	f000 be1f 	b.w	800c5fc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b9be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	78db      	ldrb	r3, [r3, #3]
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	f040 8462 	bne.w	800c294 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b9d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	6a1a      	ldr	r2, [r3, #32]
 800b9dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	f240 83df 	bls.w	800c1ac <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4413      	add	r3, r2
 800ba08:	881b      	ldrh	r3, [r3, #0]
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba14:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ba18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	441a      	add	r2, r3
 800ba32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ba36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba3e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ba42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ba4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6a1a      	ldr	r2, [r3, #32]
 800ba56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba5a:	1ad2      	subs	r2, r2, r3
 800ba5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ba68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	881b      	ldrh	r3, [r3, #0]
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 81c7 	beq.w	800be1e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	785b      	ldrb	r3, [r3, #1]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d177      	bne.n	800bb9c <USB_EPStartXfer+0x2ce>
 800baac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800babc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	461a      	mov	r2, r3
 800baca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bacc:	4413      	add	r3, r2
 800bace:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	00da      	lsls	r2, r3, #3
 800bade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae0:	4413      	add	r3, r2
 800bae2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bae6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	b29b      	uxth	r3, r3
 800baee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf6:	801a      	strh	r2, [r3, #0]
 800baf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bafc:	2b3e      	cmp	r3, #62	@ 0x3e
 800bafe:	d921      	bls.n	800bb44 <USB_EPStartXfer+0x276>
 800bb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb04:	095b      	lsrs	r3, r3, #5
 800bb06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb0e:	f003 031f 	and.w	r3, r3, #31
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d104      	bne.n	800bb20 <USB_EPStartXfer+0x252>
 800bb16:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	029b      	lsls	r3, r3, #10
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	4313      	orrs	r3, r2
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb40:	801a      	strh	r2, [r3, #0]
 800bb42:	e050      	b.n	800bbe6 <USB_EPStartXfer+0x318>
 800bb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10a      	bne.n	800bb62 <USB_EPStartXfer+0x294>
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4e:	881b      	ldrh	r3, [r3, #0]
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5e:	801a      	strh	r2, [r3, #0]
 800bb60:	e041      	b.n	800bbe6 <USB_EPStartXfer+0x318>
 800bb62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb66:	085b      	lsrs	r3, r3, #1
 800bb68:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d004      	beq.n	800bb82 <USB_EPStartXfer+0x2b4>
 800bb78:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	029b      	lsls	r3, r3, #10
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	4313      	orrs	r3, r2
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb98:	801a      	strh	r2, [r3, #0]
 800bb9a:	e024      	b.n	800bbe6 <USB_EPStartXfer+0x318>
 800bb9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	785b      	ldrb	r3, [r3, #1]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d11c      	bne.n	800bbe6 <USB_EPStartXfer+0x318>
 800bbac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc0:	4413      	add	r3, r2
 800bbc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	00da      	lsls	r2, r3, #3
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bbda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bbe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	895b      	ldrh	r3, [r3, #10]
 800bbf2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	6959      	ldr	r1, [r3, #20]
 800bc02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bc0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bc10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bc14:	6800      	ldr	r0, [r0, #0]
 800bc16:	f001 fb66 	bl	800d2e6 <USB_WritePMA>
            ep->xfer_buff += len;
 800bc1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	695a      	ldr	r2, [r3, #20]
 800bc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc2a:	441a      	add	r2, r3
 800bc2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bc38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	6a1a      	ldr	r2, [r3, #32]
 800bc44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d90f      	bls.n	800bc74 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800bc54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6a1a      	ldr	r2, [r3, #32]
 800bc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc64:	1ad2      	subs	r2, r2, r3
 800bc66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	621a      	str	r2, [r3, #32]
 800bc72:	e00e      	b.n	800bc92 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800bc74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	6a1b      	ldr	r3, [r3, #32]
 800bc80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800bc84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	785b      	ldrb	r3, [r3, #1]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d177      	bne.n	800bd92 <USB_EPStartXfer+0x4c4>
 800bca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	61bb      	str	r3, [r7, #24]
 800bcae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	61bb      	str	r3, [r7, #24]
 800bcc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	00da      	lsls	r2, r3, #3
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bcdc:	617b      	str	r3, [r7, #20]
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	881b      	ldrh	r3, [r3, #0]
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	801a      	strh	r2, [r3, #0]
 800bcee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bcf4:	d921      	bls.n	800bd3a <USB_EPStartXfer+0x46c>
 800bcf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcfa:	095b      	lsrs	r3, r3, #5
 800bcfc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd04:	f003 031f 	and.w	r3, r3, #31
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d104      	bne.n	800bd16 <USB_EPStartXfer+0x448>
 800bd0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd10:	3b01      	subs	r3, #1
 800bd12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	881b      	ldrh	r3, [r3, #0]
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	029b      	lsls	r3, r3, #10
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	4313      	orrs	r3, r2
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	801a      	strh	r2, [r3, #0]
 800bd38:	e056      	b.n	800bde8 <USB_EPStartXfer+0x51a>
 800bd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10a      	bne.n	800bd58 <USB_EPStartXfer+0x48a>
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	801a      	strh	r2, [r3, #0]
 800bd56:	e047      	b.n	800bde8 <USB_EPStartXfer+0x51a>
 800bd58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd5c:	085b      	lsrs	r3, r3, #1
 800bd5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd66:	f003 0301 	and.w	r3, r3, #1
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d004      	beq.n	800bd78 <USB_EPStartXfer+0x4aa>
 800bd6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd72:	3301      	adds	r3, #1
 800bd74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	881b      	ldrh	r3, [r3, #0]
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	029b      	lsls	r3, r3, #10
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	801a      	strh	r2, [r3, #0]
 800bd90:	e02a      	b.n	800bde8 <USB_EPStartXfer+0x51a>
 800bd92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	785b      	ldrb	r3, [r3, #1]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d122      	bne.n	800bde8 <USB_EPStartXfer+0x51a>
 800bda2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	623b      	str	r3, [r7, #32]
 800bdae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	623b      	str	r3, [r7, #32]
 800bdc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	00da      	lsls	r2, r3, #3
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bddc:	61fb      	str	r3, [r7, #28]
 800bdde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bde8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	891b      	ldrh	r3, [r3, #8]
 800bdf4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bdf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6959      	ldr	r1, [r3, #20]
 800be04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be08:	b29b      	uxth	r3, r3
 800be0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800be0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800be12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800be16:	6800      	ldr	r0, [r0, #0]
 800be18:	f001 fa65 	bl	800d2e6 <USB_WritePMA>
 800be1c:	e3ee      	b.n	800c5fc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	785b      	ldrb	r3, [r3, #1]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d177      	bne.n	800bf1e <USB_EPStartXfer+0x650>
 800be2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be48:	b29b      	uxth	r3, r3
 800be4a:	461a      	mov	r2, r3
 800be4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be4e:	4413      	add	r3, r2
 800be50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	00da      	lsls	r2, r3, #3
 800be60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be62:	4413      	add	r3, r2
 800be64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800be68:	647b      	str	r3, [r7, #68]	@ 0x44
 800be6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	b29b      	uxth	r3, r3
 800be70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be74:	b29a      	uxth	r2, r3
 800be76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be78:	801a      	strh	r2, [r3, #0]
 800be7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be7e:	2b3e      	cmp	r3, #62	@ 0x3e
 800be80:	d921      	bls.n	800bec6 <USB_EPStartXfer+0x5f8>
 800be82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be86:	095b      	lsrs	r3, r3, #5
 800be88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800be8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be90:	f003 031f 	and.w	r3, r3, #31
 800be94:	2b00      	cmp	r3, #0
 800be96:	d104      	bne.n	800bea2 <USB_EPStartXfer+0x5d4>
 800be98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800be9c:	3b01      	subs	r3, #1
 800be9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bea4:	881b      	ldrh	r3, [r3, #0]
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800beac:	b29b      	uxth	r3, r3
 800beae:	029b      	lsls	r3, r3, #10
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	4313      	orrs	r3, r2
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bec2:	801a      	strh	r2, [r3, #0]
 800bec4:	e056      	b.n	800bf74 <USB_EPStartXfer+0x6a6>
 800bec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10a      	bne.n	800bee4 <USB_EPStartXfer+0x616>
 800bece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bed0:	881b      	ldrh	r3, [r3, #0]
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bedc:	b29a      	uxth	r2, r3
 800bede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bee0:	801a      	strh	r2, [r3, #0]
 800bee2:	e047      	b.n	800bf74 <USB_EPStartXfer+0x6a6>
 800bee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee8:	085b      	lsrs	r3, r3, #1
 800beea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800beee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bef2:	f003 0301 	and.w	r3, r3, #1
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d004      	beq.n	800bf04 <USB_EPStartXfer+0x636>
 800befa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800befe:	3301      	adds	r3, #1
 800bf00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bf04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	029b      	lsls	r3, r3, #10
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	4313      	orrs	r3, r2
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf1a:	801a      	strh	r2, [r3, #0]
 800bf1c:	e02a      	b.n	800bf74 <USB_EPStartXfer+0x6a6>
 800bf1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	785b      	ldrb	r3, [r3, #1]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d122      	bne.n	800bf74 <USB_EPStartXfer+0x6a6>
 800bf2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf4e:	4413      	add	r3, r2
 800bf50:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	00da      	lsls	r2, r3, #3
 800bf60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf62:	4413      	add	r3, r2
 800bf64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bf74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	891b      	ldrh	r3, [r3, #8]
 800bf80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6959      	ldr	r1, [r3, #20]
 800bf90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bf9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bf9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bfa2:	6800      	ldr	r0, [r0, #0]
 800bfa4:	f001 f99f 	bl	800d2e6 <USB_WritePMA>
            ep->xfer_buff += len;
 800bfa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	695a      	ldr	r2, [r3, #20]
 800bfb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb8:	441a      	add	r2, r3
 800bfba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bfc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6a1a      	ldr	r2, [r3, #32]
 800bfd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d90f      	bls.n	800c002 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bfe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	6a1a      	ldr	r2, [r3, #32]
 800bfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff2:	1ad2      	subs	r2, r2, r3
 800bff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	621a      	str	r2, [r3, #32]
 800c000:	e00e      	b.n	800c020 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800c002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2200      	movs	r2, #0
 800c01e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c02c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	785b      	ldrb	r3, [r3, #1]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d177      	bne.n	800c12c <USB_EPStartXfer+0x85e>
 800c03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c040:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c04c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c056:	b29b      	uxth	r3, r3
 800c058:	461a      	mov	r2, r3
 800c05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c05c:	4413      	add	r3, r2
 800c05e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	00da      	lsls	r2, r3, #3
 800c06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c070:	4413      	add	r3, r2
 800c072:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c076:	637b      	str	r3, [r7, #52]	@ 0x34
 800c078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c082:	b29a      	uxth	r2, r3
 800c084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c086:	801a      	strh	r2, [r3, #0]
 800c088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c08c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c08e:	d921      	bls.n	800c0d4 <USB_EPStartXfer+0x806>
 800c090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c094:	095b      	lsrs	r3, r3, #5
 800c096:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c09e:	f003 031f 	and.w	r3, r3, #31
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d104      	bne.n	800c0b0 <USB_EPStartXfer+0x7e2>
 800c0a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	029b      	lsls	r3, r3, #10
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d0:	801a      	strh	r2, [r3, #0]
 800c0d2:	e050      	b.n	800c176 <USB_EPStartXfer+0x8a8>
 800c0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10a      	bne.n	800c0f2 <USB_EPStartXfer+0x824>
 800c0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ee:	801a      	strh	r2, [r3, #0]
 800c0f0:	e041      	b.n	800c176 <USB_EPStartXfer+0x8a8>
 800c0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0f6:	085b      	lsrs	r3, r3, #1
 800c0f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c100:	f003 0301 	and.w	r3, r3, #1
 800c104:	2b00      	cmp	r3, #0
 800c106:	d004      	beq.n	800c112 <USB_EPStartXfer+0x844>
 800c108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c10c:	3301      	adds	r3, #1
 800c10e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	b29a      	uxth	r2, r3
 800c118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	029b      	lsls	r3, r3, #10
 800c120:	b29b      	uxth	r3, r3
 800c122:	4313      	orrs	r3, r2
 800c124:	b29a      	uxth	r2, r3
 800c126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c128:	801a      	strh	r2, [r3, #0]
 800c12a:	e024      	b.n	800c176 <USB_EPStartXfer+0x8a8>
 800c12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	785b      	ldrb	r3, [r3, #1]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d11c      	bne.n	800c176 <USB_EPStartXfer+0x8a8>
 800c13c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	461a      	mov	r2, r3
 800c14e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c150:	4413      	add	r3, r2
 800c152:	643b      	str	r3, [r7, #64]	@ 0x40
 800c154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	00da      	lsls	r2, r3, #3
 800c162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c164:	4413      	add	r3, r2
 800c166:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c170:	b29a      	uxth	r2, r3
 800c172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c174:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c17a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	895b      	ldrh	r3, [r3, #10]
 800c182:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c18a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	6959      	ldr	r1, [r3, #20]
 800c192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c196:	b29b      	uxth	r3, r3
 800c198:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c19c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c1a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c1a4:	6800      	ldr	r0, [r0, #0]
 800c1a6:	f001 f89e 	bl	800d2e6 <USB_WritePMA>
 800c1aa:	e227      	b.n	800c5fc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c1ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6a1b      	ldr	r3, [r3, #32]
 800c1b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c1bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4413      	add	r3, r2
 800c1d6:	881b      	ldrh	r3, [r3, #0]
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c1de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1e2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	441a      	add	r2, r3
 800c200:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c20c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c214:	b29b      	uxth	r3, r3
 800c216:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c21c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c232:	b29b      	uxth	r3, r3
 800c234:	461a      	mov	r2, r3
 800c236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c238:	4413      	add	r3, r2
 800c23a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	00da      	lsls	r2, r3, #3
 800c24a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c24c:	4413      	add	r3, r2
 800c24e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c252:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c258:	b29a      	uxth	r2, r3
 800c25a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c25c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c25e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	891b      	ldrh	r3, [r3, #8]
 800c26a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c26e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6959      	ldr	r1, [r3, #20]
 800c27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c27e:	b29b      	uxth	r3, r3
 800c280:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c284:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c288:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c28c:	6800      	ldr	r0, [r0, #0]
 800c28e:	f001 f82a 	bl	800d2e6 <USB_WritePMA>
 800c292:	e1b3      	b.n	800c5fc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6a1a      	ldr	r2, [r3, #32]
 800c2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a4:	1ad2      	subs	r2, r2, r3
 800c2a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c2b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	881b      	ldrh	r3, [r3, #0]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 80c6 	beq.w	800c466 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	673b      	str	r3, [r7, #112]	@ 0x70
 800c2e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	785b      	ldrb	r3, [r3, #1]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d177      	bne.n	800c3e6 <USB_EPStartXfer+0xb18>
 800c2f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c310:	b29b      	uxth	r3, r3
 800c312:	461a      	mov	r2, r3
 800c314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c316:	4413      	add	r3, r2
 800c318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c31a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c31e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	00da      	lsls	r2, r3, #3
 800c328:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c32a:	4413      	add	r3, r2
 800c32c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c330:	667b      	str	r3, [r7, #100]	@ 0x64
 800c332:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	b29b      	uxth	r3, r3
 800c338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c340:	801a      	strh	r2, [r3, #0]
 800c342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c346:	2b3e      	cmp	r3, #62	@ 0x3e
 800c348:	d921      	bls.n	800c38e <USB_EPStartXfer+0xac0>
 800c34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c34e:	095b      	lsrs	r3, r3, #5
 800c350:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c358:	f003 031f 	and.w	r3, r3, #31
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d104      	bne.n	800c36a <USB_EPStartXfer+0xa9c>
 800c360:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c364:	3b01      	subs	r3, #1
 800c366:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c36a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c36c:	881b      	ldrh	r3, [r3, #0]
 800c36e:	b29a      	uxth	r2, r3
 800c370:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c374:	b29b      	uxth	r3, r3
 800c376:	029b      	lsls	r3, r3, #10
 800c378:	b29b      	uxth	r3, r3
 800c37a:	4313      	orrs	r3, r2
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c386:	b29a      	uxth	r2, r3
 800c388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c38a:	801a      	strh	r2, [r3, #0]
 800c38c:	e050      	b.n	800c430 <USB_EPStartXfer+0xb62>
 800c38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10a      	bne.n	800c3ac <USB_EPStartXfer+0xade>
 800c396:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3a8:	801a      	strh	r2, [r3, #0]
 800c3aa:	e041      	b.n	800c430 <USB_EPStartXfer+0xb62>
 800c3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b0:	085b      	lsrs	r3, r3, #1
 800c3b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d004      	beq.n	800c3cc <USB_EPStartXfer+0xafe>
 800c3c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c3cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	029b      	lsls	r3, r3, #10
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3e2:	801a      	strh	r2, [r3, #0]
 800c3e4:	e024      	b.n	800c430 <USB_EPStartXfer+0xb62>
 800c3e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	785b      	ldrb	r3, [r3, #1]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d11c      	bne.n	800c430 <USB_EPStartXfer+0xb62>
 800c3f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c404:	b29b      	uxth	r3, r3
 800c406:	461a      	mov	r2, r3
 800c408:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c40a:	4413      	add	r3, r2
 800c40c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	00da      	lsls	r2, r3, #3
 800c41c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c41e:	4413      	add	r3, r2
 800c420:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c424:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c42e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	895b      	ldrh	r3, [r3, #10]
 800c43c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	6959      	ldr	r1, [r3, #20]
 800c44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c450:	b29b      	uxth	r3, r3
 800c452:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c456:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c45a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c45e:	6800      	ldr	r0, [r0, #0]
 800c460:	f000 ff41 	bl	800d2e6 <USB_WritePMA>
 800c464:	e0ca      	b.n	800c5fc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c46a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	785b      	ldrb	r3, [r3, #1]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d177      	bne.n	800c566 <USB_EPStartXfer+0xc98>
 800c476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c47a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c486:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c490:	b29b      	uxth	r3, r3
 800c492:	461a      	mov	r2, r3
 800c494:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c496:	4413      	add	r3, r2
 800c498:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c49a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c49e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	00da      	lsls	r2, r3, #3
 800c4a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4c0:	801a      	strh	r2, [r3, #0]
 800c4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4c8:	d921      	bls.n	800c50e <USB_EPStartXfer+0xc40>
 800c4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ce:	095b      	lsrs	r3, r3, #5
 800c4d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4d8:	f003 031f 	and.w	r3, r3, #31
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d104      	bne.n	800c4ea <USB_EPStartXfer+0xc1c>
 800c4e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c4ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4ec:	881b      	ldrh	r3, [r3, #0]
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	029b      	lsls	r3, r3, #10
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c506:	b29a      	uxth	r2, r3
 800c508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c50a:	801a      	strh	r2, [r3, #0]
 800c50c:	e05c      	b.n	800c5c8 <USB_EPStartXfer+0xcfa>
 800c50e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10a      	bne.n	800c52c <USB_EPStartXfer+0xc5e>
 800c516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c524:	b29a      	uxth	r2, r3
 800c526:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c528:	801a      	strh	r2, [r3, #0]
 800c52a:	e04d      	b.n	800c5c8 <USB_EPStartXfer+0xcfa>
 800c52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c530:	085b      	lsrs	r3, r3, #1
 800c532:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c53a:	f003 0301 	and.w	r3, r3, #1
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d004      	beq.n	800c54c <USB_EPStartXfer+0xc7e>
 800c542:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c546:	3301      	adds	r3, #1
 800c548:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c54c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	b29a      	uxth	r2, r3
 800c552:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c556:	b29b      	uxth	r3, r3
 800c558:	029b      	lsls	r3, r3, #10
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	4313      	orrs	r3, r2
 800c55e:	b29a      	uxth	r2, r3
 800c560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c562:	801a      	strh	r2, [r3, #0]
 800c564:	e030      	b.n	800c5c8 <USB_EPStartXfer+0xcfa>
 800c566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c56a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	785b      	ldrb	r3, [r3, #1]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d128      	bne.n	800c5c8 <USB_EPStartXfer+0xcfa>
 800c576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c57a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c592:	b29b      	uxth	r3, r3
 800c594:	461a      	mov	r2, r3
 800c596:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c59a:	4413      	add	r3, r2
 800c59c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c5a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	00da      	lsls	r2, r3, #3
 800c5ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c5b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c5c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c5c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	891b      	ldrh	r3, [r3, #8]
 800c5d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c5d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	6959      	ldr	r1, [r3, #20]
 800c5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c5ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c5f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c5f6:	6800      	ldr	r0, [r0, #0]
 800c5f8:	f000 fe75 	bl	800d2e6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c5fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c60a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	4413      	add	r3, r2
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c61e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c622:	817b      	strh	r3, [r7, #10]
 800c624:	897b      	ldrh	r3, [r7, #10]
 800c626:	f083 0310 	eor.w	r3, r3, #16
 800c62a:	817b      	strh	r3, [r7, #10]
 800c62c:	897b      	ldrh	r3, [r7, #10]
 800c62e:	f083 0320 	eor.w	r3, r3, #32
 800c632:	817b      	strh	r3, [r7, #10]
 800c634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c638:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	441a      	add	r2, r3
 800c64e:	897b      	ldrh	r3, [r7, #10]
 800c650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c65c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c660:	b29b      	uxth	r3, r3
 800c662:	8013      	strh	r3, [r2, #0]
 800c664:	f000 bcde 	b.w	800d024 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c66c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	7b1b      	ldrb	r3, [r3, #12]
 800c674:	2b00      	cmp	r3, #0
 800c676:	f040 80bb 	bne.w	800c7f0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c67a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c67e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	699a      	ldr	r2, [r3, #24]
 800c686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c68a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	691b      	ldr	r3, [r3, #16]
 800c692:	429a      	cmp	r2, r3
 800c694:	d917      	bls.n	800c6c6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c69a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800c6a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	699a      	ldr	r2, [r3, #24]
 800c6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b6:	1ad2      	subs	r2, r2, r3
 800c6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	619a      	str	r2, [r3, #24]
 800c6c4:	e00e      	b.n	800c6e4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c6c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	699b      	ldr	r3, [r3, #24]
 800c6d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800c6d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c6e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c6f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c700:	b29b      	uxth	r3, r3
 800c702:	461a      	mov	r2, r3
 800c704:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c708:	4413      	add	r3, r2
 800c70a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c70e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	00da      	lsls	r2, r3, #3
 800c71c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c720:	4413      	add	r3, r2
 800c722:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c72a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	b29b      	uxth	r3, r3
 800c732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c736:	b29a      	uxth	r2, r3
 800c738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c73c:	801a      	strh	r2, [r3, #0]
 800c73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c742:	2b3e      	cmp	r3, #62	@ 0x3e
 800c744:	d924      	bls.n	800c790 <USB_EPStartXfer+0xec2>
 800c746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74a:	095b      	lsrs	r3, r3, #5
 800c74c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c754:	f003 031f 	and.w	r3, r3, #31
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d104      	bne.n	800c766 <USB_EPStartXfer+0xe98>
 800c75c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c760:	3b01      	subs	r3, #1
 800c762:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c766:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c772:	b29b      	uxth	r3, r3
 800c774:	029b      	lsls	r3, r3, #10
 800c776:	b29b      	uxth	r3, r3
 800c778:	4313      	orrs	r3, r2
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c784:	b29a      	uxth	r2, r3
 800c786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c78a:	801a      	strh	r2, [r3, #0]
 800c78c:	f000 bc10 	b.w	800cfb0 <USB_EPStartXfer+0x16e2>
 800c790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10c      	bne.n	800c7b2 <USB_EPStartXfer+0xee4>
 800c798:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7ae:	801a      	strh	r2, [r3, #0]
 800c7b0:	e3fe      	b.n	800cfb0 <USB_EPStartXfer+0x16e2>
 800c7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b6:	085b      	lsrs	r3, r3, #1
 800c7b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c0:	f003 0301 	and.w	r3, r3, #1
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d004      	beq.n	800c7d2 <USB_EPStartXfer+0xf04>
 800c7c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c7d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7d6:	881b      	ldrh	r3, [r3, #0]
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	029b      	lsls	r3, r3, #10
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7ec:	801a      	strh	r2, [r3, #0]
 800c7ee:	e3df      	b.n	800cfb0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c7f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	78db      	ldrb	r3, [r3, #3]
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	f040 8218 	bne.w	800cc32 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	785b      	ldrb	r3, [r3, #1]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f040 809d 	bne.w	800c94e <USB_EPStartXfer+0x1080>
 800c814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c830:	b29b      	uxth	r3, r3
 800c832:	461a      	mov	r2, r3
 800c834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c838:	4413      	add	r3, r2
 800c83a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c83e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	00da      	lsls	r2, r3, #3
 800c84c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c850:	4413      	add	r3, r2
 800c852:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c856:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c85a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c85e:	881b      	ldrh	r3, [r3, #0]
 800c860:	b29b      	uxth	r3, r3
 800c862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c866:	b29a      	uxth	r2, r3
 800c868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c86c:	801a      	strh	r2, [r3, #0]
 800c86e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c87c:	d92b      	bls.n	800c8d6 <USB_EPStartXfer+0x1008>
 800c87e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	095b      	lsrs	r3, r3, #5
 800c88c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	f003 031f 	and.w	r3, r3, #31
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d104      	bne.n	800c8ae <USB_EPStartXfer+0xfe0>
 800c8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c8ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	029b      	lsls	r3, r3, #10
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c8d2:	801a      	strh	r2, [r3, #0]
 800c8d4:	e070      	b.n	800c9b8 <USB_EPStartXfer+0x10ea>
 800c8d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10c      	bne.n	800c900 <USB_EPStartXfer+0x1032>
 800c8e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c8fc:	801a      	strh	r2, [r3, #0]
 800c8fe:	e05b      	b.n	800c9b8 <USB_EPStartXfer+0x10ea>
 800c900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	085b      	lsrs	r3, r3, #1
 800c90e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	f003 0301 	and.w	r3, r3, #1
 800c922:	2b00      	cmp	r3, #0
 800c924:	d004      	beq.n	800c930 <USB_EPStartXfer+0x1062>
 800c926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c92a:	3301      	adds	r3, #1
 800c92c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c930:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c934:	881b      	ldrh	r3, [r3, #0]
 800c936:	b29a      	uxth	r2, r3
 800c938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	029b      	lsls	r3, r3, #10
 800c940:	b29b      	uxth	r3, r3
 800c942:	4313      	orrs	r3, r2
 800c944:	b29a      	uxth	r2, r3
 800c946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c94a:	801a      	strh	r2, [r3, #0]
 800c94c:	e034      	b.n	800c9b8 <USB_EPStartXfer+0x10ea>
 800c94e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	785b      	ldrb	r3, [r3, #1]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d12c      	bne.n	800c9b8 <USB_EPStartXfer+0x10ea>
 800c95e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c96c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	461a      	mov	r2, r3
 800c97e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c982:	4413      	add	r3, r2
 800c984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c98c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	00da      	lsls	r2, r3, #3
 800c996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c99a:	4413      	add	r3, r2
 800c99c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c9a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c9a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	691b      	ldr	r3, [r3, #16]
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c9b6:	801a      	strh	r2, [r3, #0]
 800c9b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	785b      	ldrb	r3, [r3, #1]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f040 809d 	bne.w	800cb12 <USB_EPStartXfer+0x1244>
 800c9d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c9e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9fc:	4413      	add	r3, r2
 800c9fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ca02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	00da      	lsls	r2, r3, #3
 800ca10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ca14:	4413      	add	r3, r2
 800ca16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ca1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca30:	801a      	strh	r2, [r3, #0]
 800ca32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca40:	d92b      	bls.n	800ca9a <USB_EPStartXfer+0x11cc>
 800ca42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	095b      	lsrs	r3, r3, #5
 800ca50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ca54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	f003 031f 	and.w	r3, r3, #31
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d104      	bne.n	800ca72 <USB_EPStartXfer+0x11a4>
 800ca68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ca72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca76:	881b      	ldrh	r3, [r3, #0]
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	029b      	lsls	r3, r3, #10
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	4313      	orrs	r3, r2
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca90:	b29a      	uxth	r2, r3
 800ca92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca96:	801a      	strh	r2, [r3, #0]
 800ca98:	e069      	b.n	800cb6e <USB_EPStartXfer+0x12a0>
 800ca9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10c      	bne.n	800cac4 <USB_EPStartXfer+0x11f6>
 800caaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800caae:	881b      	ldrh	r3, [r3, #0]
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caba:	b29a      	uxth	r2, r3
 800cabc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cac0:	801a      	strh	r2, [r3, #0]
 800cac2:	e054      	b.n	800cb6e <USB_EPStartXfer+0x12a0>
 800cac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	085b      	lsrs	r3, r3, #1
 800cad2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	f003 0301 	and.w	r3, r3, #1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d004      	beq.n	800caf4 <USB_EPStartXfer+0x1226>
 800caea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800caee:	3301      	adds	r3, #1
 800caf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800caf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800caf8:	881b      	ldrh	r3, [r3, #0]
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	029b      	lsls	r3, r3, #10
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	4313      	orrs	r3, r2
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb0e:	801a      	strh	r2, [r3, #0]
 800cb10:	e02d      	b.n	800cb6e <USB_EPStartXfer+0x12a0>
 800cb12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	785b      	ldrb	r3, [r3, #1]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d125      	bne.n	800cb6e <USB_EPStartXfer+0x12a0>
 800cb22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	461a      	mov	r2, r3
 800cb34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb38:	4413      	add	r3, r2
 800cb3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cb3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	00da      	lsls	r2, r3, #3
 800cb4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb50:	4413      	add	r3, r2
 800cb52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cb5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb6c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cb6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f000 8218 	beq.w	800cfb0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800cb80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	4413      	add	r3, r2
 800cb9a:	881b      	ldrh	r3, [r3, #0]
 800cb9c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cba0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d005      	beq.n	800cbb8 <USB_EPStartXfer+0x12ea>
 800cbac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cbb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d10d      	bne.n	800cbd4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cbb8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cbbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f040 81f5 	bne.w	800cfb0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cbc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cbca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f040 81ee 	bne.w	800cfb0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cbd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4413      	add	r3, r2
 800cbee:	881b      	ldrh	r3, [r3, #0]
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbfa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800cbfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	441a      	add	r2, r3
 800cc18:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cc1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	8013      	strh	r3, [r2, #0]
 800cc30:	e1be      	b.n	800cfb0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cc32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	78db      	ldrb	r3, [r3, #3]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	f040 81b4 	bne.w	800cfac <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cc44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	699a      	ldr	r2, [r3, #24]
 800cc50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d917      	bls.n	800cc90 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800cc60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800cc70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	699a      	ldr	r2, [r3, #24]
 800cc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc80:	1ad2      	subs	r2, r2, r3
 800cc82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	619a      	str	r2, [r3, #24]
 800cc8e:	e00e      	b.n	800ccae <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800cc90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	699b      	ldr	r3, [r3, #24]
 800cc9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800cca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ccae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	785b      	ldrb	r3, [r3, #1]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f040 8085 	bne.w	800cdca <USB_EPStartXfer+0x14fc>
 800ccc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ccce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	461a      	mov	r2, r3
 800cce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cce4:	4413      	add	r3, r2
 800cce6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ccea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	00da      	lsls	r2, r3, #3
 800ccf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ccfc:	4413      	add	r3, r2
 800ccfe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd0a:	881b      	ldrh	r3, [r3, #0]
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd18:	801a      	strh	r2, [r3, #0]
 800cd1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd1e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd20:	d923      	bls.n	800cd6a <USB_EPStartXfer+0x149c>
 800cd22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd26:	095b      	lsrs	r3, r3, #5
 800cd28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd30:	f003 031f 	and.w	r3, r3, #31
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d104      	bne.n	800cd42 <USB_EPStartXfer+0x1474>
 800cd38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cd42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd46:	881b      	ldrh	r3, [r3, #0]
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	029b      	lsls	r3, r3, #10
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	4313      	orrs	r3, r2
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd66:	801a      	strh	r2, [r3, #0]
 800cd68:	e060      	b.n	800ce2c <USB_EPStartXfer+0x155e>
 800cd6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10c      	bne.n	800cd8c <USB_EPStartXfer+0x14be>
 800cd72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd88:	801a      	strh	r2, [r3, #0]
 800cd8a:	e04f      	b.n	800ce2c <USB_EPStartXfer+0x155e>
 800cd8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd90:	085b      	lsrs	r3, r3, #1
 800cd92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d004      	beq.n	800cdac <USB_EPStartXfer+0x14de>
 800cda2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cda6:	3301      	adds	r3, #1
 800cda8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cdac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cdb0:	881b      	ldrh	r3, [r3, #0]
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	029b      	lsls	r3, r3, #10
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cdc6:	801a      	strh	r2, [r3, #0]
 800cdc8:	e030      	b.n	800ce2c <USB_EPStartXfer+0x155e>
 800cdca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	785b      	ldrb	r3, [r3, #1]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d128      	bne.n	800ce2c <USB_EPStartXfer+0x155e>
 800cdda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cde8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdfe:	4413      	add	r3, r2
 800ce00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ce04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	00da      	lsls	r2, r3, #3
 800ce12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce16:	4413      	add	r3, r2
 800ce18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ce20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ce2a:	801a      	strh	r2, [r3, #0]
 800ce2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	785b      	ldrb	r3, [r3, #1]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f040 8085 	bne.w	800cf56 <USB_EPStartXfer+0x1688>
 800ce4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ce5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ce70:	4413      	add	r3, r2
 800ce72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ce76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	00da      	lsls	r2, r3, #3
 800ce84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ce88:	4413      	add	r3, r2
 800ce8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ce8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ce92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cea4:	801a      	strh	r2, [r3, #0]
 800cea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800ceac:	d923      	bls.n	800cef6 <USB_EPStartXfer+0x1628>
 800ceae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceb2:	095b      	lsrs	r3, r3, #5
 800ceb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ceb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cebc:	f003 031f 	and.w	r3, r3, #31
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d104      	bne.n	800cece <USB_EPStartXfer+0x1600>
 800cec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cec8:	3b01      	subs	r3, #1
 800ceca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cece:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ced2:	881b      	ldrh	r3, [r3, #0]
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	029b      	lsls	r3, r3, #10
 800cede:	b29b      	uxth	r3, r3
 800cee0:	4313      	orrs	r3, r2
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cef2:	801a      	strh	r2, [r3, #0]
 800cef4:	e05c      	b.n	800cfb0 <USB_EPStartXfer+0x16e2>
 800cef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d10c      	bne.n	800cf18 <USB_EPStartXfer+0x164a>
 800cefe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf02:	881b      	ldrh	r3, [r3, #0]
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf14:	801a      	strh	r2, [r3, #0]
 800cf16:	e04b      	b.n	800cfb0 <USB_EPStartXfer+0x16e2>
 800cf18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf1c:	085b      	lsrs	r3, r3, #1
 800cf1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d004      	beq.n	800cf38 <USB_EPStartXfer+0x166a>
 800cf2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf32:	3301      	adds	r3, #1
 800cf34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	029b      	lsls	r3, r3, #10
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf52:	801a      	strh	r2, [r3, #0]
 800cf54:	e02c      	b.n	800cfb0 <USB_EPStartXfer+0x16e2>
 800cf56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	785b      	ldrb	r3, [r3, #1]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d124      	bne.n	800cfb0 <USB_EPStartXfer+0x16e2>
 800cf66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	461a      	mov	r2, r3
 800cf78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf7c:	4413      	add	r3, r2
 800cf7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cf82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	00da      	lsls	r2, r3, #3
 800cf90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf94:	4413      	add	r3, r2
 800cf96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cf9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cf9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cfa8:	801a      	strh	r2, [r3, #0]
 800cfaa:	e001      	b.n	800cfb0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cfac:	2301      	movs	r3, #1
 800cfae:	e03a      	b.n	800d026 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cfb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cfd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfd6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cfda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cfde:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cfe2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cfe6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cfea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cfee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	441a      	add	r2, r3
 800d00c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d01c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d020:	b29b      	uxth	r3, r3
 800d022:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	785b      	ldrb	r3, [r3, #1]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d020      	beq.n	800d084 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d058:	81bb      	strh	r3, [r7, #12]
 800d05a:	89bb      	ldrh	r3, [r7, #12]
 800d05c:	f083 0310 	eor.w	r3, r3, #16
 800d060:	81bb      	strh	r3, [r7, #12]
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	441a      	add	r2, r3
 800d06c:	89bb      	ldrh	r3, [r7, #12]
 800d06e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d07a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d07e:	b29b      	uxth	r3, r3
 800d080:	8013      	strh	r3, [r2, #0]
 800d082:	e01f      	b.n	800d0c4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4413      	add	r3, r2
 800d08e:	881b      	ldrh	r3, [r3, #0]
 800d090:	b29b      	uxth	r3, r3
 800d092:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d09a:	81fb      	strh	r3, [r7, #14]
 800d09c:	89fb      	ldrh	r3, [r7, #14]
 800d09e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d0a2:	81fb      	strh	r3, [r7, #14]
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	441a      	add	r2, r3
 800d0ae:	89fb      	ldrh	r3, [r7, #14]
 800d0b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d0d2:	b480      	push	{r7}
 800d0d4:	b087      	sub	sp, #28
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	7b1b      	ldrb	r3, [r3, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f040 809d 	bne.w	800d220 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	785b      	ldrb	r3, [r3, #1]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d04c      	beq.n	800d188 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	4413      	add	r3, r2
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	823b      	strh	r3, [r7, #16]
 800d0fc:	8a3b      	ldrh	r3, [r7, #16]
 800d0fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d102:	2b00      	cmp	r3, #0
 800d104:	d01b      	beq.n	800d13e <USB_EPClearStall+0x6c>
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	4413      	add	r3, r2
 800d110:	881b      	ldrh	r3, [r3, #0]
 800d112:	b29b      	uxth	r3, r3
 800d114:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d11c:	81fb      	strh	r3, [r7, #14]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	441a      	add	r2, r3
 800d128:	89fb      	ldrh	r3, [r7, #14]
 800d12a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d12e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d136:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	78db      	ldrb	r3, [r3, #3]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d06c      	beq.n	800d220 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4413      	add	r3, r2
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	b29b      	uxth	r3, r3
 800d154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d15c:	81bb      	strh	r3, [r7, #12]
 800d15e:	89bb      	ldrh	r3, [r7, #12]
 800d160:	f083 0320 	eor.w	r3, r3, #32
 800d164:	81bb      	strh	r3, [r7, #12]
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	441a      	add	r2, r3
 800d170:	89bb      	ldrh	r3, [r7, #12]
 800d172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d17a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d17e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d182:	b29b      	uxth	r3, r3
 800d184:	8013      	strh	r3, [r2, #0]
 800d186:	e04b      	b.n	800d220 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4413      	add	r3, r2
 800d192:	881b      	ldrh	r3, [r3, #0]
 800d194:	82fb      	strh	r3, [r7, #22]
 800d196:	8afb      	ldrh	r3, [r7, #22]
 800d198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d01b      	beq.n	800d1d8 <USB_EPClearStall+0x106>
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1b6:	82bb      	strh	r3, [r7, #20]
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	441a      	add	r2, r3
 800d1c2:	8abb      	ldrh	r3, [r7, #20]
 800d1c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d1d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	881b      	ldrh	r3, [r3, #0]
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1ee:	827b      	strh	r3, [r7, #18]
 800d1f0:	8a7b      	ldrh	r3, [r7, #18]
 800d1f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d1f6:	827b      	strh	r3, [r7, #18]
 800d1f8:	8a7b      	ldrh	r3, [r7, #18]
 800d1fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d1fe:	827b      	strh	r3, [r7, #18]
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	441a      	add	r2, r3
 800d20a:	8a7b      	ldrh	r3, [r7, #18]
 800d20c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	371c      	adds	r7, #28
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d22e:	b480      	push	{r7}
 800d230:	b083      	sub	sp, #12
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	460b      	mov	r3, r1
 800d238:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d23a:	78fb      	ldrb	r3, [r7, #3]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d103      	bne.n	800d248 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2280      	movs	r2, #128	@ 0x80
 800d244:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	370c      	adds	r7, #12
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d256:	b480      	push	{r7}
 800d258:	b083      	sub	sp, #12
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d264:	b29b      	uxth	r3, r3
 800d266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d26a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d26e:	b29a      	uxth	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800d284:	b480      	push	{r7}
 800d286:	b083      	sub	sp, #12
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d292:	b29b      	uxth	r3, r3
 800d294:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d298:	b29a      	uxth	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	b085      	sub	sp, #20
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3714      	adds	r7, #20
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b083      	sub	sp, #12
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	370c      	adds	r7, #12
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr

0800d2e6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d2e6:	b480      	push	{r7}
 800d2e8:	b08b      	sub	sp, #44	@ 0x2c
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	60f8      	str	r0, [r7, #12]
 800d2ee:	60b9      	str	r1, [r7, #8]
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	80fb      	strh	r3, [r7, #6]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d2fc:	88bb      	ldrh	r3, [r7, #4]
 800d2fe:	3301      	adds	r3, #1
 800d300:	085b      	lsrs	r3, r3, #1
 800d302:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d30c:	88fa      	ldrh	r2, [r7, #6]
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	4413      	add	r3, r2
 800d312:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d316:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d31c:	e01b      	b.n	800d356 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	3301      	adds	r3, #1
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	021b      	lsls	r3, r3, #8
 800d32c:	b21a      	sxth	r2, r3
 800d32e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d332:	4313      	orrs	r3, r2
 800d334:	b21b      	sxth	r3, r3
 800d336:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d338:	6a3b      	ldr	r3, [r7, #32]
 800d33a:	8a7a      	ldrh	r2, [r7, #18]
 800d33c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d33e:	6a3b      	ldr	r3, [r7, #32]
 800d340:	3302      	adds	r3, #2
 800d342:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	3301      	adds	r3, #1
 800d348:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	3301      	adds	r3, #1
 800d34e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d352:	3b01      	subs	r3, #1
 800d354:	627b      	str	r3, [r7, #36]	@ 0x24
 800d356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1e0      	bne.n	800d31e <USB_WritePMA+0x38>
  }
}
 800d35c:	bf00      	nop
 800d35e:	bf00      	nop
 800d360:	372c      	adds	r7, #44	@ 0x2c
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d36a:	b480      	push	{r7}
 800d36c:	b08b      	sub	sp, #44	@ 0x2c
 800d36e:	af00      	add	r7, sp, #0
 800d370:	60f8      	str	r0, [r7, #12]
 800d372:	60b9      	str	r1, [r7, #8]
 800d374:	4611      	mov	r1, r2
 800d376:	461a      	mov	r2, r3
 800d378:	460b      	mov	r3, r1
 800d37a:	80fb      	strh	r3, [r7, #6]
 800d37c:	4613      	mov	r3, r2
 800d37e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d380:	88bb      	ldrh	r3, [r7, #4]
 800d382:	085b      	lsrs	r3, r3, #1
 800d384:	b29b      	uxth	r3, r3
 800d386:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d390:	88fa      	ldrh	r2, [r7, #6]
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	4413      	add	r3, r2
 800d396:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d39a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3a0:	e018      	b.n	800d3d4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d3a2:	6a3b      	ldr	r3, [r7, #32]
 800d3a4:	881b      	ldrh	r3, [r3, #0]
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d3aa:	6a3b      	ldr	r3, [r7, #32]
 800d3ac:	3302      	adds	r3, #2
 800d3ae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	0a1b      	lsrs	r3, r3, #8
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1e3      	bne.n	800d3a2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d3da:	88bb      	ldrh	r3, [r7, #4]
 800d3dc:	f003 0301 	and.w	r3, r3, #1
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d007      	beq.n	800d3f6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d3e6:	6a3b      	ldr	r3, [r7, #32]
 800d3e8:	881b      	ldrh	r3, [r3, #0]
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	701a      	strb	r2, [r3, #0]
  }
}
 800d3f6:	bf00      	nop
 800d3f8:	372c      	adds	r7, #44	@ 0x2c
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
	...

0800d404 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	460b      	mov	r3, r1
 800d40e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d410:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d414:	f006 fa28 	bl	8013868 <USBD_static_malloc>
 800d418:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d109      	bne.n	800d434 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	32b0      	adds	r2, #176	@ 0xb0
 800d42a:	2100      	movs	r1, #0
 800d42c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d430:	2302      	movs	r3, #2
 800d432:	e0d4      	b.n	800d5de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d434:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d438:	2100      	movs	r1, #0
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f008 fcc8 	bl	8015dd0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	32b0      	adds	r2, #176	@ 0xb0
 800d44a:	68f9      	ldr	r1, [r7, #12]
 800d44c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	32b0      	adds	r2, #176	@ 0xb0
 800d45a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	7c1b      	ldrb	r3, [r3, #16]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d138      	bne.n	800d4de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d46c:	4b5e      	ldr	r3, [pc, #376]	@ (800d5e8 <USBD_CDC_Init+0x1e4>)
 800d46e:	7819      	ldrb	r1, [r3, #0]
 800d470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d474:	2202      	movs	r2, #2
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f005 fff8 	bl	801346c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d47c:	4b5a      	ldr	r3, [pc, #360]	@ (800d5e8 <USBD_CDC_Init+0x1e4>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	f003 020f 	and.w	r2, r3, #15
 800d484:	6879      	ldr	r1, [r7, #4]
 800d486:	4613      	mov	r3, r2
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	4413      	add	r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	440b      	add	r3, r1
 800d490:	3324      	adds	r3, #36	@ 0x24
 800d492:	2201      	movs	r2, #1
 800d494:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d496:	4b55      	ldr	r3, [pc, #340]	@ (800d5ec <USBD_CDC_Init+0x1e8>)
 800d498:	7819      	ldrb	r1, [r3, #0]
 800d49a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d49e:	2202      	movs	r2, #2
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f005 ffe3 	bl	801346c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d4a6:	4b51      	ldr	r3, [pc, #324]	@ (800d5ec <USBD_CDC_Init+0x1e8>)
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	f003 020f 	and.w	r2, r3, #15
 800d4ae:	6879      	ldr	r1, [r7, #4]
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	4413      	add	r3, r2
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	440b      	add	r3, r1
 800d4ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d4be:	2201      	movs	r2, #1
 800d4c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d4c2:	4b4b      	ldr	r3, [pc, #300]	@ (800d5f0 <USBD_CDC_Init+0x1ec>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	f003 020f 	and.w	r2, r3, #15
 800d4ca:	6879      	ldr	r1, [r7, #4]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	440b      	add	r3, r1
 800d4d6:	3326      	adds	r3, #38	@ 0x26
 800d4d8:	2210      	movs	r2, #16
 800d4da:	801a      	strh	r2, [r3, #0]
 800d4dc:	e035      	b.n	800d54a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d4de:	4b42      	ldr	r3, [pc, #264]	@ (800d5e8 <USBD_CDC_Init+0x1e4>)
 800d4e0:	7819      	ldrb	r1, [r3, #0]
 800d4e2:	2340      	movs	r3, #64	@ 0x40
 800d4e4:	2202      	movs	r2, #2
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f005 ffc0 	bl	801346c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d4ec:	4b3e      	ldr	r3, [pc, #248]	@ (800d5e8 <USBD_CDC_Init+0x1e4>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	f003 020f 	and.w	r2, r3, #15
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	4413      	add	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	440b      	add	r3, r1
 800d500:	3324      	adds	r3, #36	@ 0x24
 800d502:	2201      	movs	r2, #1
 800d504:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d506:	4b39      	ldr	r3, [pc, #228]	@ (800d5ec <USBD_CDC_Init+0x1e8>)
 800d508:	7819      	ldrb	r1, [r3, #0]
 800d50a:	2340      	movs	r3, #64	@ 0x40
 800d50c:	2202      	movs	r2, #2
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f005 ffac 	bl	801346c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d514:	4b35      	ldr	r3, [pc, #212]	@ (800d5ec <USBD_CDC_Init+0x1e8>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	f003 020f 	and.w	r2, r3, #15
 800d51c:	6879      	ldr	r1, [r7, #4]
 800d51e:	4613      	mov	r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4413      	add	r3, r2
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	440b      	add	r3, r1
 800d528:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d52c:	2201      	movs	r2, #1
 800d52e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d530:	4b2f      	ldr	r3, [pc, #188]	@ (800d5f0 <USBD_CDC_Init+0x1ec>)
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	f003 020f 	and.w	r2, r3, #15
 800d538:	6879      	ldr	r1, [r7, #4]
 800d53a:	4613      	mov	r3, r2
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	4413      	add	r3, r2
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	440b      	add	r3, r1
 800d544:	3326      	adds	r3, #38	@ 0x26
 800d546:	2210      	movs	r2, #16
 800d548:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d54a:	4b29      	ldr	r3, [pc, #164]	@ (800d5f0 <USBD_CDC_Init+0x1ec>)
 800d54c:	7819      	ldrb	r1, [r3, #0]
 800d54e:	2308      	movs	r3, #8
 800d550:	2203      	movs	r2, #3
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f005 ff8a 	bl	801346c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d558:	4b25      	ldr	r3, [pc, #148]	@ (800d5f0 <USBD_CDC_Init+0x1ec>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	f003 020f 	and.w	r2, r3, #15
 800d560:	6879      	ldr	r1, [r7, #4]
 800d562:	4613      	mov	r3, r2
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	4413      	add	r3, r2
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	440b      	add	r3, r1
 800d56c:	3324      	adds	r3, #36	@ 0x24
 800d56e:	2201      	movs	r2, #1
 800d570:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2200      	movs	r2, #0
 800d576:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	33b0      	adds	r3, #176	@ 0xb0
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	4413      	add	r3, r2
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2200      	movs	r2, #0
 800d592:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2200      	movs	r2, #0
 800d59a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d101      	bne.n	800d5ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	e018      	b.n	800d5de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	7c1b      	ldrb	r3, [r3, #16]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10a      	bne.n	800d5ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d5ec <USBD_CDC_Init+0x1e8>)
 800d5b6:	7819      	ldrb	r1, [r3, #0]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f006 f8ce 	bl	8013764 <USBD_LL_PrepareReceive>
 800d5c8:	e008      	b.n	800d5dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5ca:	4b08      	ldr	r3, [pc, #32]	@ (800d5ec <USBD_CDC_Init+0x1e8>)
 800d5cc:	7819      	ldrb	r1, [r3, #0]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5d4:	2340      	movs	r3, #64	@ 0x40
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f006 f8c4 	bl	8013764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	200000b7 	.word	0x200000b7
 800d5ec:	200000b8 	.word	0x200000b8
 800d5f0:	200000b9 	.word	0x200000b9

0800d5f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d600:	4b3a      	ldr	r3, [pc, #232]	@ (800d6ec <USBD_CDC_DeInit+0xf8>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	4619      	mov	r1, r3
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f005 ff6e 	bl	80134e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d60c:	4b37      	ldr	r3, [pc, #220]	@ (800d6ec <USBD_CDC_DeInit+0xf8>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	f003 020f 	and.w	r2, r3, #15
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	4613      	mov	r3, r2
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	4413      	add	r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	440b      	add	r3, r1
 800d620:	3324      	adds	r3, #36	@ 0x24
 800d622:	2200      	movs	r2, #0
 800d624:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d626:	4b32      	ldr	r3, [pc, #200]	@ (800d6f0 <USBD_CDC_DeInit+0xfc>)
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f005 ff5b 	bl	80134e8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d632:	4b2f      	ldr	r3, [pc, #188]	@ (800d6f0 <USBD_CDC_DeInit+0xfc>)
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	f003 020f 	and.w	r2, r3, #15
 800d63a:	6879      	ldr	r1, [r7, #4]
 800d63c:	4613      	mov	r3, r2
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	4413      	add	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	440b      	add	r3, r1
 800d646:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d64a:	2200      	movs	r2, #0
 800d64c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d64e:	4b29      	ldr	r3, [pc, #164]	@ (800d6f4 <USBD_CDC_DeInit+0x100>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	4619      	mov	r1, r3
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f005 ff47 	bl	80134e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d65a:	4b26      	ldr	r3, [pc, #152]	@ (800d6f4 <USBD_CDC_DeInit+0x100>)
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	f003 020f 	and.w	r2, r3, #15
 800d662:	6879      	ldr	r1, [r7, #4]
 800d664:	4613      	mov	r3, r2
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	4413      	add	r3, r2
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	440b      	add	r3, r1
 800d66e:	3324      	adds	r3, #36	@ 0x24
 800d670:	2200      	movs	r2, #0
 800d672:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d674:	4b1f      	ldr	r3, [pc, #124]	@ (800d6f4 <USBD_CDC_DeInit+0x100>)
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	f003 020f 	and.w	r2, r3, #15
 800d67c:	6879      	ldr	r1, [r7, #4]
 800d67e:	4613      	mov	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4413      	add	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	440b      	add	r3, r1
 800d688:	3326      	adds	r3, #38	@ 0x26
 800d68a:	2200      	movs	r2, #0
 800d68c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	32b0      	adds	r2, #176	@ 0xb0
 800d698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d01f      	beq.n	800d6e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	33b0      	adds	r3, #176	@ 0xb0
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4413      	add	r3, r2
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	32b0      	adds	r2, #176	@ 0xb0
 800d6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f006 f8de 	bl	8013884 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	32b0      	adds	r2, #176	@ 0xb0
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	200000b7 	.word	0x200000b7
 800d6f0:	200000b8 	.word	0x200000b8
 800d6f4:	200000b9 	.word	0x200000b9

0800d6f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	32b0      	adds	r2, #176	@ 0xb0
 800d70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d710:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d712:	2300      	movs	r3, #0
 800d714:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d716:	2300      	movs	r3, #0
 800d718:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d71a:	2300      	movs	r3, #0
 800d71c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d101      	bne.n	800d728 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d724:	2303      	movs	r3, #3
 800d726:	e0bf      	b.n	800d8a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d730:	2b00      	cmp	r3, #0
 800d732:	d050      	beq.n	800d7d6 <USBD_CDC_Setup+0xde>
 800d734:	2b20      	cmp	r3, #32
 800d736:	f040 80af 	bne.w	800d898 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	88db      	ldrh	r3, [r3, #6]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d03a      	beq.n	800d7b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	b25b      	sxtb	r3, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	da1b      	bge.n	800d784 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	33b0      	adds	r3, #176	@ 0xb0
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d762:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	88d2      	ldrh	r2, [r2, #6]
 800d768:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	88db      	ldrh	r3, [r3, #6]
 800d76e:	2b07      	cmp	r3, #7
 800d770:	bf28      	it	cs
 800d772:	2307      	movcs	r3, #7
 800d774:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	89fa      	ldrh	r2, [r7, #14]
 800d77a:	4619      	mov	r1, r3
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f001 fd1f 	bl	800f1c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d782:	e090      	b.n	800d8a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	785a      	ldrb	r2, [r3, #1]
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	88db      	ldrh	r3, [r3, #6]
 800d792:	2b3f      	cmp	r3, #63	@ 0x3f
 800d794:	d803      	bhi.n	800d79e <USBD_CDC_Setup+0xa6>
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	88db      	ldrh	r3, [r3, #6]
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	e000      	b.n	800d7a0 <USBD_CDC_Setup+0xa8>
 800d79e:	2240      	movs	r2, #64	@ 0x40
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d7a6:	6939      	ldr	r1, [r7, #16]
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f001 fd31 	bl	800f218 <USBD_CtlPrepareRx>
      break;
 800d7b6:	e076      	b.n	800d8a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	33b0      	adds	r3, #176	@ 0xb0
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4413      	add	r3, r2
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	683a      	ldr	r2, [r7, #0]
 800d7cc:	7850      	ldrb	r0, [r2, #1]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	6839      	ldr	r1, [r7, #0]
 800d7d2:	4798      	blx	r3
      break;
 800d7d4:	e067      	b.n	800d8a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	785b      	ldrb	r3, [r3, #1]
 800d7da:	2b0b      	cmp	r3, #11
 800d7dc:	d851      	bhi.n	800d882 <USBD_CDC_Setup+0x18a>
 800d7de:	a201      	add	r2, pc, #4	@ (adr r2, 800d7e4 <USBD_CDC_Setup+0xec>)
 800d7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e4:	0800d815 	.word	0x0800d815
 800d7e8:	0800d891 	.word	0x0800d891
 800d7ec:	0800d883 	.word	0x0800d883
 800d7f0:	0800d883 	.word	0x0800d883
 800d7f4:	0800d883 	.word	0x0800d883
 800d7f8:	0800d883 	.word	0x0800d883
 800d7fc:	0800d883 	.word	0x0800d883
 800d800:	0800d883 	.word	0x0800d883
 800d804:	0800d883 	.word	0x0800d883
 800d808:	0800d883 	.word	0x0800d883
 800d80c:	0800d83f 	.word	0x0800d83f
 800d810:	0800d869 	.word	0x0800d869
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b03      	cmp	r3, #3
 800d81e:	d107      	bne.n	800d830 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d820:	f107 030a 	add.w	r3, r7, #10
 800d824:	2202      	movs	r2, #2
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f001 fcc9 	bl	800f1c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d82e:	e032      	b.n	800d896 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d830:	6839      	ldr	r1, [r7, #0]
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f001 fc53 	bl	800f0de <USBD_CtlError>
            ret = USBD_FAIL;
 800d838:	2303      	movs	r3, #3
 800d83a:	75fb      	strb	r3, [r7, #23]
          break;
 800d83c:	e02b      	b.n	800d896 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d844:	b2db      	uxtb	r3, r3
 800d846:	2b03      	cmp	r3, #3
 800d848:	d107      	bne.n	800d85a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d84a:	f107 030d 	add.w	r3, r7, #13
 800d84e:	2201      	movs	r2, #1
 800d850:	4619      	mov	r1, r3
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f001 fcb4 	bl	800f1c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d858:	e01d      	b.n	800d896 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d85a:	6839      	ldr	r1, [r7, #0]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f001 fc3e 	bl	800f0de <USBD_CtlError>
            ret = USBD_FAIL;
 800d862:	2303      	movs	r3, #3
 800d864:	75fb      	strb	r3, [r7, #23]
          break;
 800d866:	e016      	b.n	800d896 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	2b03      	cmp	r3, #3
 800d872:	d00f      	beq.n	800d894 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d874:	6839      	ldr	r1, [r7, #0]
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f001 fc31 	bl	800f0de <USBD_CtlError>
            ret = USBD_FAIL;
 800d87c:	2303      	movs	r3, #3
 800d87e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d880:	e008      	b.n	800d894 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f001 fc2a 	bl	800f0de <USBD_CtlError>
          ret = USBD_FAIL;
 800d88a:	2303      	movs	r3, #3
 800d88c:	75fb      	strb	r3, [r7, #23]
          break;
 800d88e:	e002      	b.n	800d896 <USBD_CDC_Setup+0x19e>
          break;
 800d890:	bf00      	nop
 800d892:	e008      	b.n	800d8a6 <USBD_CDC_Setup+0x1ae>
          break;
 800d894:	bf00      	nop
      }
      break;
 800d896:	e006      	b.n	800d8a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d898:	6839      	ldr	r1, [r7, #0]
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f001 fc1f 	bl	800f0de <USBD_CtlError>
      ret = USBD_FAIL;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	75fb      	strb	r3, [r7, #23]
      break;
 800d8a4:	bf00      	nop
  }

  return (uint8_t)ret;
 800d8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3718      	adds	r7, #24
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	32b0      	adds	r2, #176	@ 0xb0
 800d8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d101      	bne.n	800d8da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d8d6:	2303      	movs	r3, #3
 800d8d8:	e065      	b.n	800d9a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	32b0      	adds	r2, #176	@ 0xb0
 800d8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d8ea:	78fb      	ldrb	r3, [r7, #3]
 800d8ec:	f003 020f 	and.w	r2, r3, #15
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4413      	add	r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	440b      	add	r3, r1
 800d8fc:	3318      	adds	r3, #24
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d02f      	beq.n	800d964 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d904:	78fb      	ldrb	r3, [r7, #3]
 800d906:	f003 020f 	and.w	r2, r3, #15
 800d90a:	6879      	ldr	r1, [r7, #4]
 800d90c:	4613      	mov	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	4413      	add	r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	440b      	add	r3, r1
 800d916:	3318      	adds	r3, #24
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	78fb      	ldrb	r3, [r7, #3]
 800d91c:	f003 010f 	and.w	r1, r3, #15
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	460b      	mov	r3, r1
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	440b      	add	r3, r1
 800d928:	00db      	lsls	r3, r3, #3
 800d92a:	4403      	add	r3, r0
 800d92c:	3338      	adds	r3, #56	@ 0x38
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	fbb2 f1f3 	udiv	r1, r2, r3
 800d934:	fb01 f303 	mul.w	r3, r1, r3
 800d938:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d112      	bne.n	800d964 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d93e:	78fb      	ldrb	r3, [r7, #3]
 800d940:	f003 020f 	and.w	r2, r3, #15
 800d944:	6879      	ldr	r1, [r7, #4]
 800d946:	4613      	mov	r3, r2
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	4413      	add	r3, r2
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	440b      	add	r3, r1
 800d950:	3318      	adds	r3, #24
 800d952:	2200      	movs	r2, #0
 800d954:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d956:	78f9      	ldrb	r1, [r7, #3]
 800d958:	2300      	movs	r3, #0
 800d95a:	2200      	movs	r2, #0
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f005 fec9 	bl	80136f4 <USBD_LL_Transmit>
 800d962:	e01f      	b.n	800d9a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	2200      	movs	r2, #0
 800d968:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	33b0      	adds	r3, #176	@ 0xb0
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d010      	beq.n	800d9a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	33b0      	adds	r3, #176	@ 0xb0
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	4413      	add	r3, r2
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d99a:	68ba      	ldr	r2, [r7, #8]
 800d99c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d9a0:	78fa      	ldrb	r2, [r7, #3]
 800d9a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b084      	sub	sp, #16
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	32b0      	adds	r2, #176	@ 0xb0
 800d9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	32b0      	adds	r2, #176	@ 0xb0
 800d9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d101      	bne.n	800d9e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d9dc:	2303      	movs	r3, #3
 800d9de:	e01a      	b.n	800da16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d9e0:	78fb      	ldrb	r3, [r7, #3]
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f005 fef5 	bl	80137d4 <USBD_LL_GetRxDataSize>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	33b0      	adds	r3, #176	@ 0xb0
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800da10:	4611      	mov	r1, r2
 800da12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800da14:	2300      	movs	r3, #0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b084      	sub	sp, #16
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	32b0      	adds	r2, #176	@ 0xb0
 800da30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d101      	bne.n	800da40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da3c:	2303      	movs	r3, #3
 800da3e:	e024      	b.n	800da8a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	33b0      	adds	r3, #176	@ 0xb0
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d019      	beq.n	800da88 <USBD_CDC_EP0_RxReady+0x6a>
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800da5a:	2bff      	cmp	r3, #255	@ 0xff
 800da5c:	d014      	beq.n	800da88 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	33b0      	adds	r3, #176	@ 0xb0
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4413      	add	r3, r2
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800da76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800da7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	22ff      	movs	r2, #255	@ 0xff
 800da84:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
	...

0800da94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800da9c:	2182      	movs	r1, #130	@ 0x82
 800da9e:	4818      	ldr	r0, [pc, #96]	@ (800db00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800daa0:	f000 fcbd 	bl	800e41e <USBD_GetEpDesc>
 800daa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800daa6:	2101      	movs	r1, #1
 800daa8:	4815      	ldr	r0, [pc, #84]	@ (800db00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800daaa:	f000 fcb8 	bl	800e41e <USBD_GetEpDesc>
 800daae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dab0:	2181      	movs	r1, #129	@ 0x81
 800dab2:	4813      	ldr	r0, [pc, #76]	@ (800db00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dab4:	f000 fcb3 	bl	800e41e <USBD_GetEpDesc>
 800dab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d002      	beq.n	800dac6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	2210      	movs	r2, #16
 800dac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d006      	beq.n	800dada <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	2200      	movs	r2, #0
 800dad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dad4:	711a      	strb	r2, [r3, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d006      	beq.n	800daee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dae8:	711a      	strb	r2, [r3, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2243      	movs	r2, #67	@ 0x43
 800daf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800daf4:	4b02      	ldr	r3, [pc, #8]	@ (800db00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3718      	adds	r7, #24
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	20000074 	.word	0x20000074

0800db04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800db0c:	2182      	movs	r1, #130	@ 0x82
 800db0e:	4818      	ldr	r0, [pc, #96]	@ (800db70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db10:	f000 fc85 	bl	800e41e <USBD_GetEpDesc>
 800db14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800db16:	2101      	movs	r1, #1
 800db18:	4815      	ldr	r0, [pc, #84]	@ (800db70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db1a:	f000 fc80 	bl	800e41e <USBD_GetEpDesc>
 800db1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800db20:	2181      	movs	r1, #129	@ 0x81
 800db22:	4813      	ldr	r0, [pc, #76]	@ (800db70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db24:	f000 fc7b 	bl	800e41e <USBD_GetEpDesc>
 800db28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	2210      	movs	r2, #16
 800db34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d006      	beq.n	800db4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	2200      	movs	r2, #0
 800db40:	711a      	strb	r2, [r3, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f042 0202 	orr.w	r2, r2, #2
 800db48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d006      	beq.n	800db5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2200      	movs	r2, #0
 800db54:	711a      	strb	r2, [r3, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	f042 0202 	orr.w	r2, r2, #2
 800db5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2243      	movs	r2, #67	@ 0x43
 800db62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800db64:	4b02      	ldr	r3, [pc, #8]	@ (800db70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800db66:	4618      	mov	r0, r3
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	20000074 	.word	0x20000074

0800db74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800db7c:	2182      	movs	r1, #130	@ 0x82
 800db7e:	4818      	ldr	r0, [pc, #96]	@ (800dbe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800db80:	f000 fc4d 	bl	800e41e <USBD_GetEpDesc>
 800db84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800db86:	2101      	movs	r1, #1
 800db88:	4815      	ldr	r0, [pc, #84]	@ (800dbe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800db8a:	f000 fc48 	bl	800e41e <USBD_GetEpDesc>
 800db8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800db90:	2181      	movs	r1, #129	@ 0x81
 800db92:	4813      	ldr	r0, [pc, #76]	@ (800dbe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800db94:	f000 fc43 	bl	800e41e <USBD_GetEpDesc>
 800db98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d002      	beq.n	800dba6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	2210      	movs	r2, #16
 800dba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d006      	beq.n	800dbba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dbb4:	711a      	strb	r2, [r3, #4]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d006      	beq.n	800dbce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dbc8:	711a      	strb	r2, [r3, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2243      	movs	r2, #67	@ 0x43
 800dbd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dbd4:	4b02      	ldr	r3, [pc, #8]	@ (800dbe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3718      	adds	r7, #24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	20000074 	.word	0x20000074

0800dbe4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	220a      	movs	r2, #10
 800dbf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dbf2:	4b03      	ldr	r3, [pc, #12]	@ (800dc00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr
 800dc00:	20000030 	.word	0x20000030

0800dc04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d101      	bne.n	800dc18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dc14:	2303      	movs	r3, #3
 800dc16:	e009      	b.n	800dc2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	33b0      	adds	r3, #176	@ 0xb0
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	683a      	ldr	r2, [r7, #0]
 800dc28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b087      	sub	sp, #28
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	32b0      	adds	r2, #176	@ 0xb0
 800dc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc52:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d101      	bne.n	800dc5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	e008      	b.n	800dc70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800dc6e:	2300      	movs	r3, #0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	371c      	adds	r7, #28
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	32b0      	adds	r2, #176	@ 0xb0
 800dc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d101      	bne.n	800dca0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dc9c:	2303      	movs	r3, #3
 800dc9e:	e004      	b.n	800dcaa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	683a      	ldr	r2, [r7, #0]
 800dca4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	32b0      	adds	r2, #176	@ 0xb0
 800dcca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d101      	bne.n	800dcde <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dcda:	2303      	movs	r3, #3
 800dcdc:	e025      	b.n	800dd2a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d11f      	bne.n	800dd28 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	2201      	movs	r2, #1
 800dcec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800dcf0:	4b10      	ldr	r3, [pc, #64]	@ (800dd34 <USBD_CDC_TransmitPacket+0x7c>)
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	f003 020f 	and.w	r2, r3, #15
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	4613      	mov	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4413      	add	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	4403      	add	r3, r0
 800dd0a:	3318      	adds	r3, #24
 800dd0c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800dd0e:	4b09      	ldr	r3, [pc, #36]	@ (800dd34 <USBD_CDC_TransmitPacket+0x7c>)
 800dd10:	7819      	ldrb	r1, [r3, #0]
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f005 fce8 	bl	80136f4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	200000b7 	.word	0x200000b7

0800dd38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	32b0      	adds	r2, #176	@ 0xb0
 800dd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	32b0      	adds	r2, #176	@ 0xb0
 800dd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d101      	bne.n	800dd66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dd62:	2303      	movs	r3, #3
 800dd64:	e018      	b.n	800dd98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	7c1b      	ldrb	r3, [r3, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10a      	bne.n	800dd84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd6e:	4b0c      	ldr	r3, [pc, #48]	@ (800dda0 <USBD_CDC_ReceivePacket+0x68>)
 800dd70:	7819      	ldrb	r1, [r3, #0]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f005 fcf1 	bl	8013764 <USBD_LL_PrepareReceive>
 800dd82:	e008      	b.n	800dd96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd84:	4b06      	ldr	r3, [pc, #24]	@ (800dda0 <USBD_CDC_ReceivePacket+0x68>)
 800dd86:	7819      	ldrb	r1, [r3, #0]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd8e:	2340      	movs	r3, #64	@ 0x40
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f005 fce7 	bl	8013764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	200000b8 	.word	0x200000b8

0800dda4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b086      	sub	sp, #24
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ddb8:	2303      	movs	r3, #3
 800ddba:	e01f      	b.n	800ddfc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d003      	beq.n	800dde2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2201      	movs	r2, #1
 800dde6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	79fa      	ldrb	r2, [r7, #7]
 800ddee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f005 faa7 	bl	8013344 <USBD_LL_Init>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ddfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3718      	adds	r7, #24
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de0e:	2300      	movs	r3, #0
 800de10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d101      	bne.n	800de1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800de18:	2303      	movs	r3, #3
 800de1a:	e025      	b.n	800de68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	683a      	ldr	r2, [r7, #0]
 800de20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	32ae      	adds	r2, #174	@ 0xae
 800de2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00f      	beq.n	800de58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	32ae      	adds	r2, #174	@ 0xae
 800de42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de48:	f107 020e 	add.w	r2, r7, #14
 800de4c:	4610      	mov	r0, r2
 800de4e:	4798      	blx	r3
 800de50:	4602      	mov	r2, r0
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800de5e:	1c5a      	adds	r2, r3, #1
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f005 fac5 	bl	8013408 <USBD_LL_Start>
 800de7e:	4603      	mov	r3, r0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800de90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800de92:	4618      	mov	r0, r3
 800de94:	370c      	adds	r7, #12
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr

0800de9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
 800dea6:	460b      	mov	r3, r1
 800dea8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800deaa:	2300      	movs	r3, #0
 800deac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d009      	beq.n	800decc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	78fa      	ldrb	r2, [r7, #3]
 800dec2:	4611      	mov	r1, r2
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	4798      	blx	r3
 800dec8:	4603      	mov	r3, r0
 800deca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800decc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b084      	sub	sp, #16
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
 800dede:	460b      	mov	r3, r1
 800dee0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dee2:	2300      	movs	r3, #0
 800dee4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	78fa      	ldrb	r2, [r7, #3]
 800def0:	4611      	mov	r1, r2
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	4798      	blx	r3
 800def6:	4603      	mov	r3, r0
 800def8:	2b00      	cmp	r3, #0
 800defa:	d001      	beq.n	800df00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800defc:	2303      	movs	r3, #3
 800defe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800df00:	7bfb      	ldrb	r3, [r7, #15]
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b084      	sub	sp, #16
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	4618      	mov	r0, r3
 800df1e:	f001 f8a4 	bl	800f06a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2201      	movs	r2, #1
 800df26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800df30:	461a      	mov	r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800df3e:	f003 031f 	and.w	r3, r3, #31
 800df42:	2b02      	cmp	r3, #2
 800df44:	d01a      	beq.n	800df7c <USBD_LL_SetupStage+0x72>
 800df46:	2b02      	cmp	r3, #2
 800df48:	d822      	bhi.n	800df90 <USBD_LL_SetupStage+0x86>
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d002      	beq.n	800df54 <USBD_LL_SetupStage+0x4a>
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d00a      	beq.n	800df68 <USBD_LL_SetupStage+0x5e>
 800df52:	e01d      	b.n	800df90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800df5a:	4619      	mov	r1, r3
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fad1 	bl	800e504 <USBD_StdDevReq>
 800df62:	4603      	mov	r3, r0
 800df64:	73fb      	strb	r3, [r7, #15]
      break;
 800df66:	e020      	b.n	800dfaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800df6e:	4619      	mov	r1, r3
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fb39 	bl	800e5e8 <USBD_StdItfReq>
 800df76:	4603      	mov	r3, r0
 800df78:	73fb      	strb	r3, [r7, #15]
      break;
 800df7a:	e016      	b.n	800dfaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800df82:	4619      	mov	r1, r3
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fb9b 	bl	800e6c0 <USBD_StdEPReq>
 800df8a:	4603      	mov	r3, r0
 800df8c:	73fb      	strb	r3, [r7, #15]
      break;
 800df8e:	e00c      	b.n	800dfaa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800df96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	4619      	mov	r1, r3
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f005 fad8 	bl	8013554 <USBD_LL_StallEP>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	73fb      	strb	r3, [r7, #15]
      break;
 800dfa8:	bf00      	nop
  }

  return ret;
 800dfaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3710      	adds	r7, #16
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b086      	sub	sp, #24
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	607a      	str	r2, [r7, #4]
 800dfc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dfc6:	7afb      	ldrb	r3, [r7, #11]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d16e      	bne.n	800e0aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800dfd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dfda:	2b03      	cmp	r3, #3
 800dfdc:	f040 8098 	bne.w	800e110 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	689a      	ldr	r2, [r3, #8]
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d913      	bls.n	800e014 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	689a      	ldr	r2, [r3, #8]
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	1ad2      	subs	r2, r2, r3
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	68da      	ldr	r2, [r3, #12]
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	4293      	cmp	r3, r2
 800e004:	bf28      	it	cs
 800e006:	4613      	movcs	r3, r2
 800e008:	461a      	mov	r2, r3
 800e00a:	6879      	ldr	r1, [r7, #4]
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f001 f920 	bl	800f252 <USBD_CtlContinueRx>
 800e012:	e07d      	b.n	800e110 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e01a:	f003 031f 	and.w	r3, r3, #31
 800e01e:	2b02      	cmp	r3, #2
 800e020:	d014      	beq.n	800e04c <USBD_LL_DataOutStage+0x98>
 800e022:	2b02      	cmp	r3, #2
 800e024:	d81d      	bhi.n	800e062 <USBD_LL_DataOutStage+0xae>
 800e026:	2b00      	cmp	r3, #0
 800e028:	d002      	beq.n	800e030 <USBD_LL_DataOutStage+0x7c>
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d003      	beq.n	800e036 <USBD_LL_DataOutStage+0x82>
 800e02e:	e018      	b.n	800e062 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e030:	2300      	movs	r3, #0
 800e032:	75bb      	strb	r3, [r7, #22]
            break;
 800e034:	e018      	b.n	800e068 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	4619      	mov	r1, r3
 800e040:	68f8      	ldr	r0, [r7, #12]
 800e042:	f000 f9d2 	bl	800e3ea <USBD_CoreFindIF>
 800e046:	4603      	mov	r3, r0
 800e048:	75bb      	strb	r3, [r7, #22]
            break;
 800e04a:	e00d      	b.n	800e068 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e052:	b2db      	uxtb	r3, r3
 800e054:	4619      	mov	r1, r3
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f000 f9d4 	bl	800e404 <USBD_CoreFindEP>
 800e05c:	4603      	mov	r3, r0
 800e05e:	75bb      	strb	r3, [r7, #22]
            break;
 800e060:	e002      	b.n	800e068 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e062:	2300      	movs	r3, #0
 800e064:	75bb      	strb	r3, [r7, #22]
            break;
 800e066:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e068:	7dbb      	ldrb	r3, [r7, #22]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d119      	bne.n	800e0a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e074:	b2db      	uxtb	r3, r3
 800e076:	2b03      	cmp	r3, #3
 800e078:	d113      	bne.n	800e0a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e07a:	7dba      	ldrb	r2, [r7, #22]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	32ae      	adds	r2, #174	@ 0xae
 800e080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00b      	beq.n	800e0a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e08a:	7dba      	ldrb	r2, [r7, #22]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e092:	7dba      	ldrb	r2, [r7, #22]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	32ae      	adds	r2, #174	@ 0xae
 800e098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f001 f8e6 	bl	800f274 <USBD_CtlSendStatus>
 800e0a8:	e032      	b.n	800e110 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e0aa:	7afb      	ldrb	r3, [r7, #11]
 800e0ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f000 f9a5 	bl	800e404 <USBD_CoreFindEP>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e0be:	7dbb      	ldrb	r3, [r7, #22]
 800e0c0:	2bff      	cmp	r3, #255	@ 0xff
 800e0c2:	d025      	beq.n	800e110 <USBD_LL_DataOutStage+0x15c>
 800e0c4:	7dbb      	ldrb	r3, [r7, #22]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d122      	bne.n	800e110 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	2b03      	cmp	r3, #3
 800e0d4:	d117      	bne.n	800e106 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e0d6:	7dba      	ldrb	r2, [r7, #22]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	32ae      	adds	r2, #174	@ 0xae
 800e0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0e0:	699b      	ldr	r3, [r3, #24]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00f      	beq.n	800e106 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e0e6:	7dba      	ldrb	r2, [r7, #22]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e0ee:	7dba      	ldrb	r2, [r7, #22]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	32ae      	adds	r2, #174	@ 0xae
 800e0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	7afa      	ldrb	r2, [r7, #11]
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	4798      	blx	r3
 800e102:	4603      	mov	r3, r0
 800e104:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e106:	7dfb      	ldrb	r3, [r7, #23]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d001      	beq.n	800e110 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e10c:	7dfb      	ldrb	r3, [r7, #23]
 800e10e:	e000      	b.n	800e112 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3718      	adds	r7, #24
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b086      	sub	sp, #24
 800e11e:	af00      	add	r7, sp, #0
 800e120:	60f8      	str	r0, [r7, #12]
 800e122:	460b      	mov	r3, r1
 800e124:	607a      	str	r2, [r7, #4]
 800e126:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e128:	7afb      	ldrb	r3, [r7, #11]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d16f      	bne.n	800e20e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	3314      	adds	r3, #20
 800e132:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d15a      	bne.n	800e1f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	689a      	ldr	r2, [r3, #8]
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	429a      	cmp	r2, r3
 800e148:	d914      	bls.n	800e174 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	689a      	ldr	r2, [r3, #8]
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	1ad2      	subs	r2, r2, r3
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	461a      	mov	r2, r3
 800e15e:	6879      	ldr	r1, [r7, #4]
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f001 f848 	bl	800f1f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e166:	2300      	movs	r3, #0
 800e168:	2200      	movs	r2, #0
 800e16a:	2100      	movs	r1, #0
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f005 faf9 	bl	8013764 <USBD_LL_PrepareReceive>
 800e172:	e03f      	b.n	800e1f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	68da      	ldr	r2, [r3, #12]
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d11c      	bne.n	800e1ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	685a      	ldr	r2, [r3, #4]
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e188:	429a      	cmp	r2, r3
 800e18a:	d316      	bcc.n	800e1ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	685a      	ldr	r2, [r3, #4]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e196:	429a      	cmp	r2, r3
 800e198:	d20f      	bcs.n	800e1ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e19a:	2200      	movs	r2, #0
 800e19c:	2100      	movs	r1, #0
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f001 f829 	bl	800f1f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f005 fad6 	bl	8013764 <USBD_LL_PrepareReceive>
 800e1b8:	e01c      	b.n	800e1f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	2b03      	cmp	r3, #3
 800e1c4:	d10f      	bne.n	800e1e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d009      	beq.n	800e1e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1e6:	2180      	movs	r1, #128	@ 0x80
 800e1e8:	68f8      	ldr	r0, [r7, #12]
 800e1ea:	f005 f9b3 	bl	8013554 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e1ee:	68f8      	ldr	r0, [r7, #12]
 800e1f0:	f001 f853 	bl	800f29a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d03a      	beq.n	800e274 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f7ff fe42 	bl	800de88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2200      	movs	r2, #0
 800e208:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e20c:	e032      	b.n	800e274 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e20e:	7afb      	ldrb	r3, [r7, #11]
 800e210:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e214:	b2db      	uxtb	r3, r3
 800e216:	4619      	mov	r1, r3
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f000 f8f3 	bl	800e404 <USBD_CoreFindEP>
 800e21e:	4603      	mov	r3, r0
 800e220:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e222:	7dfb      	ldrb	r3, [r7, #23]
 800e224:	2bff      	cmp	r3, #255	@ 0xff
 800e226:	d025      	beq.n	800e274 <USBD_LL_DataInStage+0x15a>
 800e228:	7dfb      	ldrb	r3, [r7, #23]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d122      	bne.n	800e274 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e234:	b2db      	uxtb	r3, r3
 800e236:	2b03      	cmp	r3, #3
 800e238:	d11c      	bne.n	800e274 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e23a:	7dfa      	ldrb	r2, [r7, #23]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	32ae      	adds	r2, #174	@ 0xae
 800e240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e244:	695b      	ldr	r3, [r3, #20]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d014      	beq.n	800e274 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e24a:	7dfa      	ldrb	r2, [r7, #23]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e252:	7dfa      	ldrb	r2, [r7, #23]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	32ae      	adds	r2, #174	@ 0xae
 800e258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e25c:	695b      	ldr	r3, [r3, #20]
 800e25e:	7afa      	ldrb	r2, [r7, #11]
 800e260:	4611      	mov	r1, r2
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	4798      	blx	r3
 800e266:	4603      	mov	r3, r0
 800e268:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e26a:	7dbb      	ldrb	r3, [r7, #22]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d001      	beq.n	800e274 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e270:	7dbb      	ldrb	r3, [r7, #22]
 800e272:	e000      	b.n	800e276 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3718      	adds	r7, #24
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b084      	sub	sp, #16
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2201      	movs	r2, #1
 800e28e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2200      	movs	r2, #0
 800e29e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d014      	beq.n	800e2e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00e      	beq.n	800e2e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	6852      	ldr	r2, [r2, #4]
 800e2d2:	b2d2      	uxtb	r2, r2
 800e2d4:	4611      	mov	r1, r2
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	4798      	blx	r3
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d001      	beq.n	800e2e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e2e0:	2303      	movs	r3, #3
 800e2e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e2e4:	2340      	movs	r3, #64	@ 0x40
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f005 f8be 	bl	801346c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2240      	movs	r2, #64	@ 0x40
 800e2fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e300:	2340      	movs	r3, #64	@ 0x40
 800e302:	2200      	movs	r2, #0
 800e304:	2180      	movs	r1, #128	@ 0x80
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f005 f8b0 	bl	801346c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2201      	movs	r2, #1
 800e310:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2240      	movs	r2, #64	@ 0x40
 800e316:	621a      	str	r2, [r3, #32]

  return ret;
 800e318:	7bfb      	ldrb	r3, [r7, #15]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e322:	b480      	push	{r7}
 800e324:	b083      	sub	sp, #12
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
 800e32a:	460b      	mov	r3, r1
 800e32c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	78fa      	ldrb	r2, [r7, #3]
 800e332:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e334:	2300      	movs	r3, #0
}
 800e336:	4618      	mov	r0, r3
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr

0800e342 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e342:	b480      	push	{r7}
 800e344:	b083      	sub	sp, #12
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e350:	b2db      	uxtb	r3, r3
 800e352:	2b04      	cmp	r3, #4
 800e354:	d006      	beq.n	800e364 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2204      	movs	r2, #4
 800e368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e37a:	b480      	push	{r7}
 800e37c:	b083      	sub	sp, #12
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	2b04      	cmp	r3, #4
 800e38c:	d106      	bne.n	800e39c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e394:	b2da      	uxtb	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e39c:	2300      	movs	r3, #0
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	370c      	adds	r7, #12
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr

0800e3aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b082      	sub	sp, #8
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	2b03      	cmp	r3, #3
 800e3bc:	d110      	bne.n	800e3e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00b      	beq.n	800e3e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3ce:	69db      	ldr	r3, [r3, #28]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d005      	beq.n	800e3e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3da:	69db      	ldr	r3, [r3, #28]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e3e0:	2300      	movs	r3, #0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e3ea:	b480      	push	{r7}
 800e3ec:	b083      	sub	sp, #12
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e3f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	460b      	mov	r3, r1
 800e40e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e410:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e412:	4618      	mov	r0, r3
 800e414:	370c      	adds	r7, #12
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr

0800e41e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b086      	sub	sp, #24
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
 800e426:	460b      	mov	r3, r1
 800e428:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e432:	2300      	movs	r3, #0
 800e434:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	885b      	ldrh	r3, [r3, #2]
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	7812      	ldrb	r2, [r2, #0]
 800e440:	4293      	cmp	r3, r2
 800e442:	d91f      	bls.n	800e484 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e44a:	e013      	b.n	800e474 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e44c:	f107 030a 	add.w	r3, r7, #10
 800e450:	4619      	mov	r1, r3
 800e452:	6978      	ldr	r0, [r7, #20]
 800e454:	f000 f81b 	bl	800e48e <USBD_GetNextDesc>
 800e458:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	785b      	ldrb	r3, [r3, #1]
 800e45e:	2b05      	cmp	r3, #5
 800e460:	d108      	bne.n	800e474 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	789b      	ldrb	r3, [r3, #2]
 800e46a:	78fa      	ldrb	r2, [r7, #3]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d008      	beq.n	800e482 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e470:	2300      	movs	r3, #0
 800e472:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	885b      	ldrh	r3, [r3, #2]
 800e478:	b29a      	uxth	r2, r3
 800e47a:	897b      	ldrh	r3, [r7, #10]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d8e5      	bhi.n	800e44c <USBD_GetEpDesc+0x2e>
 800e480:	e000      	b.n	800e484 <USBD_GetEpDesc+0x66>
          break;
 800e482:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e484:	693b      	ldr	r3, [r7, #16]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3718      	adds	r7, #24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e48e:	b480      	push	{r7}
 800e490:	b085      	sub	sp, #20
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	881b      	ldrh	r3, [r3, #0]
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	7812      	ldrb	r2, [r2, #0]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr

0800e4c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e4c6:	b480      	push	{r7}
 800e4c8:	b087      	sub	sp, #28
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e4e4:	8a3b      	ldrh	r3, [r7, #16]
 800e4e6:	021b      	lsls	r3, r3, #8
 800e4e8:	b21a      	sxth	r2, r3
 800e4ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	b21b      	sxth	r3, r3
 800e4f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e4f4:	89fb      	ldrh	r3, [r7, #14]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	371c      	adds	r7, #28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
	...

0800e504 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e51a:	2b40      	cmp	r3, #64	@ 0x40
 800e51c:	d005      	beq.n	800e52a <USBD_StdDevReq+0x26>
 800e51e:	2b40      	cmp	r3, #64	@ 0x40
 800e520:	d857      	bhi.n	800e5d2 <USBD_StdDevReq+0xce>
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00f      	beq.n	800e546 <USBD_StdDevReq+0x42>
 800e526:	2b20      	cmp	r3, #32
 800e528:	d153      	bne.n	800e5d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	32ae      	adds	r2, #174	@ 0xae
 800e534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	6839      	ldr	r1, [r7, #0]
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	4798      	blx	r3
 800e540:	4603      	mov	r3, r0
 800e542:	73fb      	strb	r3, [r7, #15]
      break;
 800e544:	e04a      	b.n	800e5dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	785b      	ldrb	r3, [r3, #1]
 800e54a:	2b09      	cmp	r3, #9
 800e54c:	d83b      	bhi.n	800e5c6 <USBD_StdDevReq+0xc2>
 800e54e:	a201      	add	r2, pc, #4	@ (adr r2, 800e554 <USBD_StdDevReq+0x50>)
 800e550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e554:	0800e5a9 	.word	0x0800e5a9
 800e558:	0800e5bd 	.word	0x0800e5bd
 800e55c:	0800e5c7 	.word	0x0800e5c7
 800e560:	0800e5b3 	.word	0x0800e5b3
 800e564:	0800e5c7 	.word	0x0800e5c7
 800e568:	0800e587 	.word	0x0800e587
 800e56c:	0800e57d 	.word	0x0800e57d
 800e570:	0800e5c7 	.word	0x0800e5c7
 800e574:	0800e59f 	.word	0x0800e59f
 800e578:	0800e591 	.word	0x0800e591
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 fa3c 	bl	800e9fc <USBD_GetDescriptor>
          break;
 800e584:	e024      	b.n	800e5d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e586:	6839      	ldr	r1, [r7, #0]
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 fbcb 	bl	800ed24 <USBD_SetAddress>
          break;
 800e58e:	e01f      	b.n	800e5d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e590:	6839      	ldr	r1, [r7, #0]
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 fc0a 	bl	800edac <USBD_SetConfig>
 800e598:	4603      	mov	r3, r0
 800e59a:	73fb      	strb	r3, [r7, #15]
          break;
 800e59c:	e018      	b.n	800e5d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e59e:	6839      	ldr	r1, [r7, #0]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 fcad 	bl	800ef00 <USBD_GetConfig>
          break;
 800e5a6:	e013      	b.n	800e5d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e5a8:	6839      	ldr	r1, [r7, #0]
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 fcde 	bl	800ef6c <USBD_GetStatus>
          break;
 800e5b0:	e00e      	b.n	800e5d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e5b2:	6839      	ldr	r1, [r7, #0]
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 fd0d 	bl	800efd4 <USBD_SetFeature>
          break;
 800e5ba:	e009      	b.n	800e5d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e5bc:	6839      	ldr	r1, [r7, #0]
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 fd31 	bl	800f026 <USBD_ClrFeature>
          break;
 800e5c4:	e004      	b.n	800e5d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e5c6:	6839      	ldr	r1, [r7, #0]
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 fd88 	bl	800f0de <USBD_CtlError>
          break;
 800e5ce:	bf00      	nop
      }
      break;
 800e5d0:	e004      	b.n	800e5dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 fd82 	bl	800f0de <USBD_CtlError>
      break;
 800e5da:	bf00      	nop
  }

  return ret;
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop

0800e5e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e5fe:	2b40      	cmp	r3, #64	@ 0x40
 800e600:	d005      	beq.n	800e60e <USBD_StdItfReq+0x26>
 800e602:	2b40      	cmp	r3, #64	@ 0x40
 800e604:	d852      	bhi.n	800e6ac <USBD_StdItfReq+0xc4>
 800e606:	2b00      	cmp	r3, #0
 800e608:	d001      	beq.n	800e60e <USBD_StdItfReq+0x26>
 800e60a:	2b20      	cmp	r3, #32
 800e60c:	d14e      	bne.n	800e6ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e614:	b2db      	uxtb	r3, r3
 800e616:	3b01      	subs	r3, #1
 800e618:	2b02      	cmp	r3, #2
 800e61a:	d840      	bhi.n	800e69e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	889b      	ldrh	r3, [r3, #4]
 800e620:	b2db      	uxtb	r3, r3
 800e622:	2b01      	cmp	r3, #1
 800e624:	d836      	bhi.n	800e694 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	889b      	ldrh	r3, [r3, #4]
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	4619      	mov	r1, r3
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7ff fedb 	bl	800e3ea <USBD_CoreFindIF>
 800e634:	4603      	mov	r3, r0
 800e636:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e638:	7bbb      	ldrb	r3, [r7, #14]
 800e63a:	2bff      	cmp	r3, #255	@ 0xff
 800e63c:	d01d      	beq.n	800e67a <USBD_StdItfReq+0x92>
 800e63e:	7bbb      	ldrb	r3, [r7, #14]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d11a      	bne.n	800e67a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e644:	7bba      	ldrb	r2, [r7, #14]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	32ae      	adds	r2, #174	@ 0xae
 800e64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00f      	beq.n	800e674 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e654:	7bba      	ldrb	r2, [r7, #14]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e65c:	7bba      	ldrb	r2, [r7, #14]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	32ae      	adds	r2, #174	@ 0xae
 800e662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	6839      	ldr	r1, [r7, #0]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	4798      	blx	r3
 800e66e:	4603      	mov	r3, r0
 800e670:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e672:	e004      	b.n	800e67e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e674:	2303      	movs	r3, #3
 800e676:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e678:	e001      	b.n	800e67e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e67a:	2303      	movs	r3, #3
 800e67c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	88db      	ldrh	r3, [r3, #6]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d110      	bne.n	800e6a8 <USBD_StdItfReq+0xc0>
 800e686:	7bfb      	ldrb	r3, [r7, #15]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d10d      	bne.n	800e6a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fdf1 	bl	800f274 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e692:	e009      	b.n	800e6a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e694:	6839      	ldr	r1, [r7, #0]
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 fd21 	bl	800f0de <USBD_CtlError>
          break;
 800e69c:	e004      	b.n	800e6a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e69e:	6839      	ldr	r1, [r7, #0]
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 fd1c 	bl	800f0de <USBD_CtlError>
          break;
 800e6a6:	e000      	b.n	800e6aa <USBD_StdItfReq+0xc2>
          break;
 800e6a8:	bf00      	nop
      }
      break;
 800e6aa:	e004      	b.n	800e6b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e6ac:	6839      	ldr	r1, [r7, #0]
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 fd15 	bl	800f0de <USBD_CtlError>
      break;
 800e6b4:	bf00      	nop
  }

  return ret;
 800e6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3710      	adds	r7, #16
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	889b      	ldrh	r3, [r3, #4]
 800e6d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6dc:	2b40      	cmp	r3, #64	@ 0x40
 800e6de:	d007      	beq.n	800e6f0 <USBD_StdEPReq+0x30>
 800e6e0:	2b40      	cmp	r3, #64	@ 0x40
 800e6e2:	f200 817f 	bhi.w	800e9e4 <USBD_StdEPReq+0x324>
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d02a      	beq.n	800e740 <USBD_StdEPReq+0x80>
 800e6ea:	2b20      	cmp	r3, #32
 800e6ec:	f040 817a 	bne.w	800e9e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e6f0:	7bbb      	ldrb	r3, [r7, #14]
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f7ff fe85 	bl	800e404 <USBD_CoreFindEP>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e6fe:	7b7b      	ldrb	r3, [r7, #13]
 800e700:	2bff      	cmp	r3, #255	@ 0xff
 800e702:	f000 8174 	beq.w	800e9ee <USBD_StdEPReq+0x32e>
 800e706:	7b7b      	ldrb	r3, [r7, #13]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f040 8170 	bne.w	800e9ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e70e:	7b7a      	ldrb	r2, [r7, #13]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e716:	7b7a      	ldrb	r2, [r7, #13]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	32ae      	adds	r2, #174	@ 0xae
 800e71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e720:	689b      	ldr	r3, [r3, #8]
 800e722:	2b00      	cmp	r3, #0
 800e724:	f000 8163 	beq.w	800e9ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e728:	7b7a      	ldrb	r2, [r7, #13]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	32ae      	adds	r2, #174	@ 0xae
 800e72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e732:	689b      	ldr	r3, [r3, #8]
 800e734:	6839      	ldr	r1, [r7, #0]
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	4798      	blx	r3
 800e73a:	4603      	mov	r3, r0
 800e73c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e73e:	e156      	b.n	800e9ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	785b      	ldrb	r3, [r3, #1]
 800e744:	2b03      	cmp	r3, #3
 800e746:	d008      	beq.n	800e75a <USBD_StdEPReq+0x9a>
 800e748:	2b03      	cmp	r3, #3
 800e74a:	f300 8145 	bgt.w	800e9d8 <USBD_StdEPReq+0x318>
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f000 809b 	beq.w	800e88a <USBD_StdEPReq+0x1ca>
 800e754:	2b01      	cmp	r3, #1
 800e756:	d03c      	beq.n	800e7d2 <USBD_StdEPReq+0x112>
 800e758:	e13e      	b.n	800e9d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e760:	b2db      	uxtb	r3, r3
 800e762:	2b02      	cmp	r3, #2
 800e764:	d002      	beq.n	800e76c <USBD_StdEPReq+0xac>
 800e766:	2b03      	cmp	r3, #3
 800e768:	d016      	beq.n	800e798 <USBD_StdEPReq+0xd8>
 800e76a:	e02c      	b.n	800e7c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e76c:	7bbb      	ldrb	r3, [r7, #14]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00d      	beq.n	800e78e <USBD_StdEPReq+0xce>
 800e772:	7bbb      	ldrb	r3, [r7, #14]
 800e774:	2b80      	cmp	r3, #128	@ 0x80
 800e776:	d00a      	beq.n	800e78e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e778:	7bbb      	ldrb	r3, [r7, #14]
 800e77a:	4619      	mov	r1, r3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f004 fee9 	bl	8013554 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e782:	2180      	movs	r1, #128	@ 0x80
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f004 fee5 	bl	8013554 <USBD_LL_StallEP>
 800e78a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e78c:	e020      	b.n	800e7d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e78e:	6839      	ldr	r1, [r7, #0]
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 fca4 	bl	800f0de <USBD_CtlError>
              break;
 800e796:	e01b      	b.n	800e7d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	885b      	ldrh	r3, [r3, #2]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10e      	bne.n	800e7be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e7a0:	7bbb      	ldrb	r3, [r7, #14]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d00b      	beq.n	800e7be <USBD_StdEPReq+0xfe>
 800e7a6:	7bbb      	ldrb	r3, [r7, #14]
 800e7a8:	2b80      	cmp	r3, #128	@ 0x80
 800e7aa:	d008      	beq.n	800e7be <USBD_StdEPReq+0xfe>
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	88db      	ldrh	r3, [r3, #6]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d104      	bne.n	800e7be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7b4:	7bbb      	ldrb	r3, [r7, #14]
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f004 fecb 	bl	8013554 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fd58 	bl	800f274 <USBD_CtlSendStatus>

              break;
 800e7c4:	e004      	b.n	800e7d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e7c6:	6839      	ldr	r1, [r7, #0]
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 fc88 	bl	800f0de <USBD_CtlError>
              break;
 800e7ce:	bf00      	nop
          }
          break;
 800e7d0:	e107      	b.n	800e9e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d002      	beq.n	800e7e4 <USBD_StdEPReq+0x124>
 800e7de:	2b03      	cmp	r3, #3
 800e7e0:	d016      	beq.n	800e810 <USBD_StdEPReq+0x150>
 800e7e2:	e04b      	b.n	800e87c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7e4:	7bbb      	ldrb	r3, [r7, #14]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00d      	beq.n	800e806 <USBD_StdEPReq+0x146>
 800e7ea:	7bbb      	ldrb	r3, [r7, #14]
 800e7ec:	2b80      	cmp	r3, #128	@ 0x80
 800e7ee:	d00a      	beq.n	800e806 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7f0:	7bbb      	ldrb	r3, [r7, #14]
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f004 fead 	bl	8013554 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7fa:	2180      	movs	r1, #128	@ 0x80
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f004 fea9 	bl	8013554 <USBD_LL_StallEP>
 800e802:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e804:	e040      	b.n	800e888 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e806:	6839      	ldr	r1, [r7, #0]
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 fc68 	bl	800f0de <USBD_CtlError>
              break;
 800e80e:	e03b      	b.n	800e888 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	885b      	ldrh	r3, [r3, #2]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d136      	bne.n	800e886 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e818:	7bbb      	ldrb	r3, [r7, #14]
 800e81a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d004      	beq.n	800e82c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e822:	7bbb      	ldrb	r3, [r7, #14]
 800e824:	4619      	mov	r1, r3
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f004 feca 	bl	80135c0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 fd21 	bl	800f274 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e832:	7bbb      	ldrb	r3, [r7, #14]
 800e834:	4619      	mov	r1, r3
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7ff fde4 	bl	800e404 <USBD_CoreFindEP>
 800e83c:	4603      	mov	r3, r0
 800e83e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e840:	7b7b      	ldrb	r3, [r7, #13]
 800e842:	2bff      	cmp	r3, #255	@ 0xff
 800e844:	d01f      	beq.n	800e886 <USBD_StdEPReq+0x1c6>
 800e846:	7b7b      	ldrb	r3, [r7, #13]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d11c      	bne.n	800e886 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e84c:	7b7a      	ldrb	r2, [r7, #13]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e854:	7b7a      	ldrb	r2, [r7, #13]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	32ae      	adds	r2, #174	@ 0xae
 800e85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d010      	beq.n	800e886 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e864:	7b7a      	ldrb	r2, [r7, #13]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	32ae      	adds	r2, #174	@ 0xae
 800e86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	6839      	ldr	r1, [r7, #0]
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	4798      	blx	r3
 800e876:	4603      	mov	r3, r0
 800e878:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e87a:	e004      	b.n	800e886 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e87c:	6839      	ldr	r1, [r7, #0]
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 fc2d 	bl	800f0de <USBD_CtlError>
              break;
 800e884:	e000      	b.n	800e888 <USBD_StdEPReq+0x1c8>
              break;
 800e886:	bf00      	nop
          }
          break;
 800e888:	e0ab      	b.n	800e9e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b02      	cmp	r3, #2
 800e894:	d002      	beq.n	800e89c <USBD_StdEPReq+0x1dc>
 800e896:	2b03      	cmp	r3, #3
 800e898:	d032      	beq.n	800e900 <USBD_StdEPReq+0x240>
 800e89a:	e097      	b.n	800e9cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e89c:	7bbb      	ldrb	r3, [r7, #14]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d007      	beq.n	800e8b2 <USBD_StdEPReq+0x1f2>
 800e8a2:	7bbb      	ldrb	r3, [r7, #14]
 800e8a4:	2b80      	cmp	r3, #128	@ 0x80
 800e8a6:	d004      	beq.n	800e8b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e8a8:	6839      	ldr	r1, [r7, #0]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 fc17 	bl	800f0de <USBD_CtlError>
                break;
 800e8b0:	e091      	b.n	800e9d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	da0b      	bge.n	800e8d2 <USBD_StdEPReq+0x212>
 800e8ba:	7bbb      	ldrb	r3, [r7, #14]
 800e8bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	4413      	add	r3, r2
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	3310      	adds	r3, #16
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	e00b      	b.n	800e8ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e8d2:	7bbb      	ldrb	r3, [r7, #14]
 800e8d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8d8:	4613      	mov	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	4413      	add	r3, r2
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	2202      	movs	r2, #2
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 fc61 	bl	800f1c0 <USBD_CtlSendData>
              break;
 800e8fe:	e06a      	b.n	800e9d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e904:	2b00      	cmp	r3, #0
 800e906:	da11      	bge.n	800e92c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e908:	7bbb      	ldrb	r3, [r7, #14]
 800e90a:	f003 020f 	and.w	r2, r3, #15
 800e90e:	6879      	ldr	r1, [r7, #4]
 800e910:	4613      	mov	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4413      	add	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	440b      	add	r3, r1
 800e91a:	3324      	adds	r3, #36	@ 0x24
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d117      	bne.n	800e952 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e922:	6839      	ldr	r1, [r7, #0]
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 fbda 	bl	800f0de <USBD_CtlError>
                  break;
 800e92a:	e054      	b.n	800e9d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e92c:	7bbb      	ldrb	r3, [r7, #14]
 800e92e:	f003 020f 	and.w	r2, r3, #15
 800e932:	6879      	ldr	r1, [r7, #4]
 800e934:	4613      	mov	r3, r2
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4413      	add	r3, r2
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	440b      	add	r3, r1
 800e93e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d104      	bne.n	800e952 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e948:	6839      	ldr	r1, [r7, #0]
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 fbc7 	bl	800f0de <USBD_CtlError>
                  break;
 800e950:	e041      	b.n	800e9d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e956:	2b00      	cmp	r3, #0
 800e958:	da0b      	bge.n	800e972 <USBD_StdEPReq+0x2b2>
 800e95a:	7bbb      	ldrb	r3, [r7, #14]
 800e95c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e960:	4613      	mov	r3, r2
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	4413      	add	r3, r2
 800e966:	009b      	lsls	r3, r3, #2
 800e968:	3310      	adds	r3, #16
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	4413      	add	r3, r2
 800e96e:	3304      	adds	r3, #4
 800e970:	e00b      	b.n	800e98a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e972:	7bbb      	ldrb	r3, [r7, #14]
 800e974:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e978:	4613      	mov	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4413      	add	r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	4413      	add	r3, r2
 800e988:	3304      	adds	r3, #4
 800e98a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e98c:	7bbb      	ldrb	r3, [r7, #14]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d002      	beq.n	800e998 <USBD_StdEPReq+0x2d8>
 800e992:	7bbb      	ldrb	r3, [r7, #14]
 800e994:	2b80      	cmp	r3, #128	@ 0x80
 800e996:	d103      	bne.n	800e9a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	2200      	movs	r2, #0
 800e99c:	601a      	str	r2, [r3, #0]
 800e99e:	e00e      	b.n	800e9be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e9a0:	7bbb      	ldrb	r3, [r7, #14]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f004 fe41 	bl	801362c <USBD_LL_IsStallEP>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d003      	beq.n	800e9b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	601a      	str	r2, [r3, #0]
 800e9b6:	e002      	b.n	800e9be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 fbfb 	bl	800f1c0 <USBD_CtlSendData>
              break;
 800e9ca:	e004      	b.n	800e9d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e9cc:	6839      	ldr	r1, [r7, #0]
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 fb85 	bl	800f0de <USBD_CtlError>
              break;
 800e9d4:	bf00      	nop
          }
          break;
 800e9d6:	e004      	b.n	800e9e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e9d8:	6839      	ldr	r1, [r7, #0]
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 fb7f 	bl	800f0de <USBD_CtlError>
          break;
 800e9e0:	bf00      	nop
      }
      break;
 800e9e2:	e005      	b.n	800e9f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e9e4:	6839      	ldr	r1, [r7, #0]
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 fb79 	bl	800f0de <USBD_CtlError>
      break;
 800e9ec:	e000      	b.n	800e9f0 <USBD_StdEPReq+0x330>
      break;
 800e9ee:	bf00      	nop
  }

  return ret;
 800e9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
	...

0800e9fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea06:	2300      	movs	r3, #0
 800ea08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	885b      	ldrh	r3, [r3, #2]
 800ea16:	0a1b      	lsrs	r3, r3, #8
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	2b0e      	cmp	r3, #14
 800ea1e:	f200 8152 	bhi.w	800ecc6 <USBD_GetDescriptor+0x2ca>
 800ea22:	a201      	add	r2, pc, #4	@ (adr r2, 800ea28 <USBD_GetDescriptor+0x2c>)
 800ea24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea28:	0800ea99 	.word	0x0800ea99
 800ea2c:	0800eab1 	.word	0x0800eab1
 800ea30:	0800eaf1 	.word	0x0800eaf1
 800ea34:	0800ecc7 	.word	0x0800ecc7
 800ea38:	0800ecc7 	.word	0x0800ecc7
 800ea3c:	0800ec67 	.word	0x0800ec67
 800ea40:	0800ec93 	.word	0x0800ec93
 800ea44:	0800ecc7 	.word	0x0800ecc7
 800ea48:	0800ecc7 	.word	0x0800ecc7
 800ea4c:	0800ecc7 	.word	0x0800ecc7
 800ea50:	0800ecc7 	.word	0x0800ecc7
 800ea54:	0800ecc7 	.word	0x0800ecc7
 800ea58:	0800ecc7 	.word	0x0800ecc7
 800ea5c:	0800ecc7 	.word	0x0800ecc7
 800ea60:	0800ea65 	.word	0x0800ea65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea6a:	69db      	ldr	r3, [r3, #28]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00b      	beq.n	800ea88 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea76:	69db      	ldr	r3, [r3, #28]
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	7c12      	ldrb	r2, [r2, #16]
 800ea7c:	f107 0108 	add.w	r1, r7, #8
 800ea80:	4610      	mov	r0, r2
 800ea82:	4798      	blx	r3
 800ea84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea86:	e126      	b.n	800ecd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea88:	6839      	ldr	r1, [r7, #0]
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 fb27 	bl	800f0de <USBD_CtlError>
        err++;
 800ea90:	7afb      	ldrb	r3, [r7, #11]
 800ea92:	3301      	adds	r3, #1
 800ea94:	72fb      	strb	r3, [r7, #11]
      break;
 800ea96:	e11e      	b.n	800ecd6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	7c12      	ldrb	r2, [r2, #16]
 800eaa4:	f107 0108 	add.w	r1, r7, #8
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	4798      	blx	r3
 800eaac:	60f8      	str	r0, [r7, #12]
      break;
 800eaae:	e112      	b.n	800ecd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	7c1b      	ldrb	r3, [r3, #16]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d10d      	bne.n	800ead4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eac0:	f107 0208 	add.w	r2, r7, #8
 800eac4:	4610      	mov	r0, r2
 800eac6:	4798      	blx	r3
 800eac8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	3301      	adds	r3, #1
 800eace:	2202      	movs	r2, #2
 800ead0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ead2:	e100      	b.n	800ecd6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eadc:	f107 0208 	add.w	r2, r7, #8
 800eae0:	4610      	mov	r0, r2
 800eae2:	4798      	blx	r3
 800eae4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	3301      	adds	r3, #1
 800eaea:	2202      	movs	r2, #2
 800eaec:	701a      	strb	r2, [r3, #0]
      break;
 800eaee:	e0f2      	b.n	800ecd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	885b      	ldrh	r3, [r3, #2]
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	2b05      	cmp	r3, #5
 800eaf8:	f200 80ac 	bhi.w	800ec54 <USBD_GetDescriptor+0x258>
 800eafc:	a201      	add	r2, pc, #4	@ (adr r2, 800eb04 <USBD_GetDescriptor+0x108>)
 800eafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb02:	bf00      	nop
 800eb04:	0800eb1d 	.word	0x0800eb1d
 800eb08:	0800eb51 	.word	0x0800eb51
 800eb0c:	0800eb85 	.word	0x0800eb85
 800eb10:	0800ebb9 	.word	0x0800ebb9
 800eb14:	0800ebed 	.word	0x0800ebed
 800eb18:	0800ec21 	.word	0x0800ec21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00b      	beq.n	800eb40 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	7c12      	ldrb	r2, [r2, #16]
 800eb34:	f107 0108 	add.w	r1, r7, #8
 800eb38:	4610      	mov	r0, r2
 800eb3a:	4798      	blx	r3
 800eb3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb3e:	e091      	b.n	800ec64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 facb 	bl	800f0de <USBD_CtlError>
            err++;
 800eb48:	7afb      	ldrb	r3, [r7, #11]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb4e:	e089      	b.n	800ec64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00b      	beq.n	800eb74 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	7c12      	ldrb	r2, [r2, #16]
 800eb68:	f107 0108 	add.w	r1, r7, #8
 800eb6c:	4610      	mov	r0, r2
 800eb6e:	4798      	blx	r3
 800eb70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb72:	e077      	b.n	800ec64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb74:	6839      	ldr	r1, [r7, #0]
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 fab1 	bl	800f0de <USBD_CtlError>
            err++;
 800eb7c:	7afb      	ldrb	r3, [r7, #11]
 800eb7e:	3301      	adds	r3, #1
 800eb80:	72fb      	strb	r3, [r7, #11]
          break;
 800eb82:	e06f      	b.n	800ec64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00b      	beq.n	800eba8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	7c12      	ldrb	r2, [r2, #16]
 800eb9c:	f107 0108 	add.w	r1, r7, #8
 800eba0:	4610      	mov	r0, r2
 800eba2:	4798      	blx	r3
 800eba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eba6:	e05d      	b.n	800ec64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eba8:	6839      	ldr	r1, [r7, #0]
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 fa97 	bl	800f0de <USBD_CtlError>
            err++;
 800ebb0:	7afb      	ldrb	r3, [r7, #11]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	72fb      	strb	r3, [r7, #11]
          break;
 800ebb6:	e055      	b.n	800ec64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebbe:	691b      	ldr	r3, [r3, #16]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d00b      	beq.n	800ebdc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebca:	691b      	ldr	r3, [r3, #16]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	7c12      	ldrb	r2, [r2, #16]
 800ebd0:	f107 0108 	add.w	r1, r7, #8
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	4798      	blx	r3
 800ebd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebda:	e043      	b.n	800ec64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebdc:	6839      	ldr	r1, [r7, #0]
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 fa7d 	bl	800f0de <USBD_CtlError>
            err++;
 800ebe4:	7afb      	ldrb	r3, [r7, #11]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	72fb      	strb	r3, [r7, #11]
          break;
 800ebea:	e03b      	b.n	800ec64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebf2:	695b      	ldr	r3, [r3, #20]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d00b      	beq.n	800ec10 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebfe:	695b      	ldr	r3, [r3, #20]
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	7c12      	ldrb	r2, [r2, #16]
 800ec04:	f107 0108 	add.w	r1, r7, #8
 800ec08:	4610      	mov	r0, r2
 800ec0a:	4798      	blx	r3
 800ec0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ec0e:	e029      	b.n	800ec64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ec10:	6839      	ldr	r1, [r7, #0]
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 fa63 	bl	800f0de <USBD_CtlError>
            err++;
 800ec18:	7afb      	ldrb	r3, [r7, #11]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ec1e:	e021      	b.n	800ec64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec26:	699b      	ldr	r3, [r3, #24]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00b      	beq.n	800ec44 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec32:	699b      	ldr	r3, [r3, #24]
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	7c12      	ldrb	r2, [r2, #16]
 800ec38:	f107 0108 	add.w	r1, r7, #8
 800ec3c:	4610      	mov	r0, r2
 800ec3e:	4798      	blx	r3
 800ec40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ec42:	e00f      	b.n	800ec64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ec44:	6839      	ldr	r1, [r7, #0]
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 fa49 	bl	800f0de <USBD_CtlError>
            err++;
 800ec4c:	7afb      	ldrb	r3, [r7, #11]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	72fb      	strb	r3, [r7, #11]
          break;
 800ec52:	e007      	b.n	800ec64 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ec54:	6839      	ldr	r1, [r7, #0]
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f000 fa41 	bl	800f0de <USBD_CtlError>
          err++;
 800ec5c:	7afb      	ldrb	r3, [r7, #11]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ec62:	bf00      	nop
      }
      break;
 800ec64:	e037      	b.n	800ecd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	7c1b      	ldrb	r3, [r3, #16]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d109      	bne.n	800ec82 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec76:	f107 0208 	add.w	r2, r7, #8
 800ec7a:	4610      	mov	r0, r2
 800ec7c:	4798      	blx	r3
 800ec7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec80:	e029      	b.n	800ecd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec82:	6839      	ldr	r1, [r7, #0]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 fa2a 	bl	800f0de <USBD_CtlError>
        err++;
 800ec8a:	7afb      	ldrb	r3, [r7, #11]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ec90:	e021      	b.n	800ecd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	7c1b      	ldrb	r3, [r3, #16]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d10d      	bne.n	800ecb6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eca2:	f107 0208 	add.w	r2, r7, #8
 800eca6:	4610      	mov	r0, r2
 800eca8:	4798      	blx	r3
 800ecaa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	2207      	movs	r2, #7
 800ecb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ecb4:	e00f      	b.n	800ecd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f000 fa10 	bl	800f0de <USBD_CtlError>
        err++;
 800ecbe:	7afb      	ldrb	r3, [r7, #11]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	72fb      	strb	r3, [r7, #11]
      break;
 800ecc4:	e007      	b.n	800ecd6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ecc6:	6839      	ldr	r1, [r7, #0]
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 fa08 	bl	800f0de <USBD_CtlError>
      err++;
 800ecce:	7afb      	ldrb	r3, [r7, #11]
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	72fb      	strb	r3, [r7, #11]
      break;
 800ecd4:	bf00      	nop
  }

  if (err != 0U)
 800ecd6:	7afb      	ldrb	r3, [r7, #11]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d11e      	bne.n	800ed1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	88db      	ldrh	r3, [r3, #6]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d016      	beq.n	800ed12 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ece4:	893b      	ldrh	r3, [r7, #8]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d00e      	beq.n	800ed08 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	88da      	ldrh	r2, [r3, #6]
 800ecee:	893b      	ldrh	r3, [r7, #8]
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	bf28      	it	cs
 800ecf4:	4613      	movcs	r3, r2
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ecfa:	893b      	ldrh	r3, [r7, #8]
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	68f9      	ldr	r1, [r7, #12]
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 fa5d 	bl	800f1c0 <USBD_CtlSendData>
 800ed06:	e009      	b.n	800ed1c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 f9e7 	bl	800f0de <USBD_CtlError>
 800ed10:	e004      	b.n	800ed1c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 faae 	bl	800f274 <USBD_CtlSendStatus>
 800ed18:	e000      	b.n	800ed1c <USBD_GetDescriptor+0x320>
    return;
 800ed1a:	bf00      	nop
  }
}
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop

0800ed24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	889b      	ldrh	r3, [r3, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d131      	bne.n	800ed9a <USBD_SetAddress+0x76>
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	88db      	ldrh	r3, [r3, #6]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d12d      	bne.n	800ed9a <USBD_SetAddress+0x76>
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	885b      	ldrh	r3, [r3, #2]
 800ed42:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed44:	d829      	bhi.n	800ed9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	885b      	ldrh	r3, [r3, #2]
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d104      	bne.n	800ed68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ed5e:	6839      	ldr	r1, [r7, #0]
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 f9bc 	bl	800f0de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed66:	e01d      	b.n	800eda4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	7bfa      	ldrb	r2, [r7, #15]
 800ed6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
 800ed72:	4619      	mov	r1, r3
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f004 fc87 	bl	8013688 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fa7a 	bl	800f274 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ed80:	7bfb      	ldrb	r3, [r7, #15]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d004      	beq.n	800ed90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2202      	movs	r2, #2
 800ed8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed8e:	e009      	b.n	800eda4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed98:	e004      	b.n	800eda4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 f99e 	bl	800f0de <USBD_CtlError>
  }
}
 800eda2:	bf00      	nop
 800eda4:	bf00      	nop
 800eda6:	3710      	adds	r7, #16
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	885b      	ldrh	r3, [r3, #2]
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	4b4e      	ldr	r3, [pc, #312]	@ (800eefc <USBD_SetConfig+0x150>)
 800edc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800edc4:	4b4d      	ldr	r3, [pc, #308]	@ (800eefc <USBD_SetConfig+0x150>)
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d905      	bls.n	800edd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800edcc:	6839      	ldr	r1, [r7, #0]
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 f985 	bl	800f0de <USBD_CtlError>
    return USBD_FAIL;
 800edd4:	2303      	movs	r3, #3
 800edd6:	e08c      	b.n	800eef2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	d002      	beq.n	800edea <USBD_SetConfig+0x3e>
 800ede4:	2b03      	cmp	r3, #3
 800ede6:	d029      	beq.n	800ee3c <USBD_SetConfig+0x90>
 800ede8:	e075      	b.n	800eed6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800edea:	4b44      	ldr	r3, [pc, #272]	@ (800eefc <USBD_SetConfig+0x150>)
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d020      	beq.n	800ee34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800edf2:	4b42      	ldr	r3, [pc, #264]	@ (800eefc <USBD_SetConfig+0x150>)
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	461a      	mov	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edfc:	4b3f      	ldr	r3, [pc, #252]	@ (800eefc <USBD_SetConfig+0x150>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	4619      	mov	r1, r3
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f7ff f84b 	bl	800de9e <USBD_SetClassConfig>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ee0c:	7bfb      	ldrb	r3, [r7, #15]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d008      	beq.n	800ee24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 f962 	bl	800f0de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2202      	movs	r2, #2
 800ee1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee22:	e065      	b.n	800eef0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 fa25 	bl	800f274 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2203      	movs	r2, #3
 800ee2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ee32:	e05d      	b.n	800eef0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 fa1d 	bl	800f274 <USBD_CtlSendStatus>
      break;
 800ee3a:	e059      	b.n	800eef0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ee3c:	4b2f      	ldr	r3, [pc, #188]	@ (800eefc <USBD_SetConfig+0x150>)
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d112      	bne.n	800ee6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2202      	movs	r2, #2
 800ee48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ee4c:	4b2b      	ldr	r3, [pc, #172]	@ (800eefc <USBD_SetConfig+0x150>)
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	461a      	mov	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee56:	4b29      	ldr	r3, [pc, #164]	@ (800eefc <USBD_SetConfig+0x150>)
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f7ff f83a 	bl	800ded6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 fa06 	bl	800f274 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee68:	e042      	b.n	800eef0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ee6a:	4b24      	ldr	r3, [pc, #144]	@ (800eefc <USBD_SetConfig+0x150>)
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	461a      	mov	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d02a      	beq.n	800eece <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	4619      	mov	r1, r3
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7ff f828 	bl	800ded6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ee86:	4b1d      	ldr	r3, [pc, #116]	@ (800eefc <USBD_SetConfig+0x150>)
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee90:	4b1a      	ldr	r3, [pc, #104]	@ (800eefc <USBD_SetConfig+0x150>)
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	4619      	mov	r1, r3
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7ff f801 	bl	800de9e <USBD_SetClassConfig>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eea0:	7bfb      	ldrb	r3, [r7, #15]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00f      	beq.n	800eec6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800eea6:	6839      	ldr	r1, [r7, #0]
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f000 f918 	bl	800f0de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f7ff f80d 	bl	800ded6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2202      	movs	r2, #2
 800eec0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800eec4:	e014      	b.n	800eef0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f9d4 	bl	800f274 <USBD_CtlSendStatus>
      break;
 800eecc:	e010      	b.n	800eef0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f000 f9d0 	bl	800f274 <USBD_CtlSendStatus>
      break;
 800eed4:	e00c      	b.n	800eef0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800eed6:	6839      	ldr	r1, [r7, #0]
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 f900 	bl	800f0de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eede:	4b07      	ldr	r3, [pc, #28]	@ (800eefc <USBD_SetConfig+0x150>)
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	4619      	mov	r1, r3
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7fe fff6 	bl	800ded6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eeea:	2303      	movs	r3, #3
 800eeec:	73fb      	strb	r3, [r7, #15]
      break;
 800eeee:	bf00      	nop
  }

  return ret;
 800eef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	2001a2a0 	.word	0x2001a2a0

0800ef00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	88db      	ldrh	r3, [r3, #6]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d004      	beq.n	800ef1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ef12:	6839      	ldr	r1, [r7, #0]
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 f8e2 	bl	800f0de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ef1a:	e023      	b.n	800ef64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	2b02      	cmp	r3, #2
 800ef26:	dc02      	bgt.n	800ef2e <USBD_GetConfig+0x2e>
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	dc03      	bgt.n	800ef34 <USBD_GetConfig+0x34>
 800ef2c:	e015      	b.n	800ef5a <USBD_GetConfig+0x5a>
 800ef2e:	2b03      	cmp	r3, #3
 800ef30:	d00b      	beq.n	800ef4a <USBD_GetConfig+0x4a>
 800ef32:	e012      	b.n	800ef5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	3308      	adds	r3, #8
 800ef3e:	2201      	movs	r2, #1
 800ef40:	4619      	mov	r1, r3
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 f93c 	bl	800f1c0 <USBD_CtlSendData>
        break;
 800ef48:	e00c      	b.n	800ef64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	3304      	adds	r3, #4
 800ef4e:	2201      	movs	r2, #1
 800ef50:	4619      	mov	r1, r3
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 f934 	bl	800f1c0 <USBD_CtlSendData>
        break;
 800ef58:	e004      	b.n	800ef64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ef5a:	6839      	ldr	r1, [r7, #0]
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 f8be 	bl	800f0de <USBD_CtlError>
        break;
 800ef62:	bf00      	nop
}
 800ef64:	bf00      	nop
 800ef66:	3708      	adds	r7, #8
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d81e      	bhi.n	800efc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	88db      	ldrh	r3, [r3, #6]
 800ef88:	2b02      	cmp	r3, #2
 800ef8a:	d004      	beq.n	800ef96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ef8c:	6839      	ldr	r1, [r7, #0]
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f8a5 	bl	800f0de <USBD_CtlError>
        break;
 800ef94:	e01a      	b.n	800efcc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2201      	movs	r2, #1
 800ef9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d005      	beq.n	800efb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	f043 0202 	orr.w	r2, r3, #2
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	330c      	adds	r3, #12
 800efb6:	2202      	movs	r2, #2
 800efb8:	4619      	mov	r1, r3
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 f900 	bl	800f1c0 <USBD_CtlSendData>
      break;
 800efc0:	e004      	b.n	800efcc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800efc2:	6839      	ldr	r1, [r7, #0]
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 f88a 	bl	800f0de <USBD_CtlError>
      break;
 800efca:	bf00      	nop
  }
}
 800efcc:	bf00      	nop
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	885b      	ldrh	r3, [r3, #2]
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d107      	bne.n	800eff6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2201      	movs	r2, #1
 800efea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 f940 	bl	800f274 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800eff4:	e013      	b.n	800f01e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	885b      	ldrh	r3, [r3, #2]
 800effa:	2b02      	cmp	r3, #2
 800effc:	d10b      	bne.n	800f016 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	889b      	ldrh	r3, [r3, #4]
 800f002:	0a1b      	lsrs	r3, r3, #8
 800f004:	b29b      	uxth	r3, r3
 800f006:	b2da      	uxtb	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 f930 	bl	800f274 <USBD_CtlSendStatus>
}
 800f014:	e003      	b.n	800f01e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f016:	6839      	ldr	r1, [r7, #0]
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 f860 	bl	800f0de <USBD_CtlError>
}
 800f01e:	bf00      	nop
 800f020:	3708      	adds	r7, #8
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}

0800f026 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f026:	b580      	push	{r7, lr}
 800f028:	b082      	sub	sp, #8
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
 800f02e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f036:	b2db      	uxtb	r3, r3
 800f038:	3b01      	subs	r3, #1
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	d80b      	bhi.n	800f056 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	885b      	ldrh	r3, [r3, #2]
 800f042:	2b01      	cmp	r3, #1
 800f044:	d10c      	bne.n	800f060 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2200      	movs	r2, #0
 800f04a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f910 	bl	800f274 <USBD_CtlSendStatus>
      }
      break;
 800f054:	e004      	b.n	800f060 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f056:	6839      	ldr	r1, [r7, #0]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 f840 	bl	800f0de <USBD_CtlError>
      break;
 800f05e:	e000      	b.n	800f062 <USBD_ClrFeature+0x3c>
      break;
 800f060:	bf00      	nop
  }
}
 800f062:	bf00      	nop
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b084      	sub	sp, #16
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
 800f072:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	781a      	ldrb	r2, [r3, #0]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	3301      	adds	r3, #1
 800f084:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	781a      	ldrb	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3301      	adds	r3, #1
 800f092:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f094:	68f8      	ldr	r0, [r7, #12]
 800f096:	f7ff fa16 	bl	800e4c6 <SWAPBYTE>
 800f09a:	4603      	mov	r3, r0
 800f09c:	461a      	mov	r2, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	f7ff fa09 	bl	800e4c6 <SWAPBYTE>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	3301      	adds	r3, #1
 800f0c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f7ff f9fc 	bl	800e4c6 <SWAPBYTE>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	80da      	strh	r2, [r3, #6]
}
 800f0d6:	bf00      	nop
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}

0800f0de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b082      	sub	sp, #8
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
 800f0e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0e8:	2180      	movs	r1, #128	@ 0x80
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f004 fa32 	bl	8013554 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f004 fa2e 	bl	8013554 <USBD_LL_StallEP>
}
 800f0f8:	bf00      	nop
 800f0fa:	3708      	adds	r7, #8
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f10c:	2300      	movs	r3, #0
 800f10e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d036      	beq.n	800f184 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f11a:	6938      	ldr	r0, [r7, #16]
 800f11c:	f000 f836 	bl	800f18c <USBD_GetLen>
 800f120:	4603      	mov	r3, r0
 800f122:	3301      	adds	r3, #1
 800f124:	b29b      	uxth	r3, r3
 800f126:	005b      	lsls	r3, r3, #1
 800f128:	b29a      	uxth	r2, r3
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f12e:	7dfb      	ldrb	r3, [r7, #23]
 800f130:	68ba      	ldr	r2, [r7, #8]
 800f132:	4413      	add	r3, r2
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	7812      	ldrb	r2, [r2, #0]
 800f138:	701a      	strb	r2, [r3, #0]
  idx++;
 800f13a:	7dfb      	ldrb	r3, [r7, #23]
 800f13c:	3301      	adds	r3, #1
 800f13e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f140:	7dfb      	ldrb	r3, [r7, #23]
 800f142:	68ba      	ldr	r2, [r7, #8]
 800f144:	4413      	add	r3, r2
 800f146:	2203      	movs	r2, #3
 800f148:	701a      	strb	r2, [r3, #0]
  idx++;
 800f14a:	7dfb      	ldrb	r3, [r7, #23]
 800f14c:	3301      	adds	r3, #1
 800f14e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f150:	e013      	b.n	800f17a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f152:	7dfb      	ldrb	r3, [r7, #23]
 800f154:	68ba      	ldr	r2, [r7, #8]
 800f156:	4413      	add	r3, r2
 800f158:	693a      	ldr	r2, [r7, #16]
 800f15a:	7812      	ldrb	r2, [r2, #0]
 800f15c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	3301      	adds	r3, #1
 800f162:	613b      	str	r3, [r7, #16]
    idx++;
 800f164:	7dfb      	ldrb	r3, [r7, #23]
 800f166:	3301      	adds	r3, #1
 800f168:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f16a:	7dfb      	ldrb	r3, [r7, #23]
 800f16c:	68ba      	ldr	r2, [r7, #8]
 800f16e:	4413      	add	r3, r2
 800f170:	2200      	movs	r2, #0
 800f172:	701a      	strb	r2, [r3, #0]
    idx++;
 800f174:	7dfb      	ldrb	r3, [r7, #23]
 800f176:	3301      	adds	r3, #1
 800f178:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d1e7      	bne.n	800f152 <USBD_GetString+0x52>
 800f182:	e000      	b.n	800f186 <USBD_GetString+0x86>
    return;
 800f184:	bf00      	nop
  }
}
 800f186:	3718      	adds	r7, #24
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b085      	sub	sp, #20
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f194:	2300      	movs	r3, #0
 800f196:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f19c:	e005      	b.n	800f1aa <USBD_GetLen+0x1e>
  {
    len++;
 800f19e:	7bfb      	ldrb	r3, [r7, #15]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1f5      	bne.n	800f19e <USBD_GetLen+0x12>
  }

  return len;
 800f1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3714      	adds	r7, #20
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2202      	movs	r2, #2
 800f1d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	68ba      	ldr	r2, [r7, #8]
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	68f8      	ldr	r0, [r7, #12]
 800f1e8:	f004 fa84 	bl	80136f4 <USBD_LL_Transmit>

  return USBD_OK;
 800f1ec:	2300      	movs	r3, #0
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b084      	sub	sp, #16
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	60f8      	str	r0, [r7, #12]
 800f1fe:	60b9      	str	r1, [r7, #8]
 800f200:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	68ba      	ldr	r2, [r7, #8]
 800f206:	2100      	movs	r1, #0
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f004 fa73 	bl	80136f4 <USBD_LL_Transmit>

  return USBD_OK;
 800f20e:	2300      	movs	r3, #0
}
 800f210:	4618      	mov	r0, r3
 800f212:	3710      	adds	r7, #16
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2203      	movs	r2, #3
 800f228:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	68ba      	ldr	r2, [r7, #8]
 800f240:	2100      	movs	r1, #0
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f004 fa8e 	bl	8013764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f248:	2300      	movs	r3, #0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3710      	adds	r7, #16
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}

0800f252 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f252:	b580      	push	{r7, lr}
 800f254:	b084      	sub	sp, #16
 800f256:	af00      	add	r7, sp, #0
 800f258:	60f8      	str	r0, [r7, #12]
 800f25a:	60b9      	str	r1, [r7, #8]
 800f25c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	2100      	movs	r1, #0
 800f264:	68f8      	ldr	r0, [r7, #12]
 800f266:	f004 fa7d 	bl	8013764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2204      	movs	r2, #4
 800f280:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f284:	2300      	movs	r3, #0
 800f286:	2200      	movs	r2, #0
 800f288:	2100      	movs	r1, #0
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f004 fa32 	bl	80136f4 <USBD_LL_Transmit>

  return USBD_OK;
 800f290:	2300      	movs	r3, #0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b082      	sub	sp, #8
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2205      	movs	r2, #5
 800f2a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	2100      	movs	r1, #0
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f004 fa57 	bl	8013764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f2b6:	2300      	movs	r3, #0
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3708      	adds	r7, #8
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <__NVIC_SetPriority>:
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	6039      	str	r1, [r7, #0]
 800f2ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f2cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	db0a      	blt.n	800f2ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	b2da      	uxtb	r2, r3
 800f2d8:	490c      	ldr	r1, [pc, #48]	@ (800f30c <__NVIC_SetPriority+0x4c>)
 800f2da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2de:	0112      	lsls	r2, r2, #4
 800f2e0:	b2d2      	uxtb	r2, r2
 800f2e2:	440b      	add	r3, r1
 800f2e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800f2e8:	e00a      	b.n	800f300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	b2da      	uxtb	r2, r3
 800f2ee:	4908      	ldr	r1, [pc, #32]	@ (800f310 <__NVIC_SetPriority+0x50>)
 800f2f0:	79fb      	ldrb	r3, [r7, #7]
 800f2f2:	f003 030f 	and.w	r3, r3, #15
 800f2f6:	3b04      	subs	r3, #4
 800f2f8:	0112      	lsls	r2, r2, #4
 800f2fa:	b2d2      	uxtb	r2, r2
 800f2fc:	440b      	add	r3, r1
 800f2fe:	761a      	strb	r2, [r3, #24]
}
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr
 800f30c:	e000e100 	.word	0xe000e100
 800f310:	e000ed00 	.word	0xe000ed00

0800f314 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f314:	b580      	push	{r7, lr}
 800f316:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f318:	2100      	movs	r1, #0
 800f31a:	f06f 0004 	mvn.w	r0, #4
 800f31e:	f7ff ffcf 	bl	800f2c0 <__NVIC_SetPriority>
#endif
}
 800f322:	bf00      	nop
 800f324:	bd80      	pop	{r7, pc}
	...

0800f328 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f32e:	f3ef 8305 	mrs	r3, IPSR
 800f332:	603b      	str	r3, [r7, #0]
  return(result);
 800f334:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f336:	2b00      	cmp	r3, #0
 800f338:	d003      	beq.n	800f342 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f33a:	f06f 0305 	mvn.w	r3, #5
 800f33e:	607b      	str	r3, [r7, #4]
 800f340:	e00c      	b.n	800f35c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f342:	4b0a      	ldr	r3, [pc, #40]	@ (800f36c <osKernelInitialize+0x44>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d105      	bne.n	800f356 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f34a:	4b08      	ldr	r3, [pc, #32]	@ (800f36c <osKernelInitialize+0x44>)
 800f34c:	2201      	movs	r2, #1
 800f34e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f350:	2300      	movs	r3, #0
 800f352:	607b      	str	r3, [r7, #4]
 800f354:	e002      	b.n	800f35c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f35a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f35c:	687b      	ldr	r3, [r7, #4]
}
 800f35e:	4618      	mov	r0, r3
 800f360:	370c      	adds	r7, #12
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	2001a2a4 	.word	0x2001a2a4

0800f370 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f376:	f3ef 8305 	mrs	r3, IPSR
 800f37a:	603b      	str	r3, [r7, #0]
  return(result);
 800f37c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d003      	beq.n	800f38a <osKernelStart+0x1a>
    stat = osErrorISR;
 800f382:	f06f 0305 	mvn.w	r3, #5
 800f386:	607b      	str	r3, [r7, #4]
 800f388:	e010      	b.n	800f3ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f38a:	4b0b      	ldr	r3, [pc, #44]	@ (800f3b8 <osKernelStart+0x48>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d109      	bne.n	800f3a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f392:	f7ff ffbf 	bl	800f314 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f396:	4b08      	ldr	r3, [pc, #32]	@ (800f3b8 <osKernelStart+0x48>)
 800f398:	2202      	movs	r2, #2
 800f39a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f39c:	f001 fe0e 	bl	8010fbc <vTaskStartScheduler>
      stat = osOK;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	607b      	str	r3, [r7, #4]
 800f3a4:	e002      	b.n	800f3ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f3a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f3ac:	687b      	ldr	r3, [r7, #4]
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3708      	adds	r7, #8
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	2001a2a4 	.word	0x2001a2a4

0800f3bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b08e      	sub	sp, #56	@ 0x38
 800f3c0:	af04      	add	r7, sp, #16
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3cc:	f3ef 8305 	mrs	r3, IPSR
 800f3d0:	617b      	str	r3, [r7, #20]
  return(result);
 800f3d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d17e      	bne.n	800f4d6 <osThreadNew+0x11a>
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d07b      	beq.n	800f4d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f3de:	2380      	movs	r3, #128	@ 0x80
 800f3e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f3e2:	2318      	movs	r3, #24
 800f3e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f3ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d045      	beq.n	800f482 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d002      	beq.n	800f404 <osThreadNew+0x48>
        name = attr->name;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	699b      	ldr	r3, [r3, #24]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d002      	beq.n	800f412 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	699b      	ldr	r3, [r3, #24]
 800f410:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d008      	beq.n	800f42a <osThreadNew+0x6e>
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	2b38      	cmp	r3, #56	@ 0x38
 800f41c:	d805      	bhi.n	800f42a <osThreadNew+0x6e>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	f003 0301 	and.w	r3, r3, #1
 800f426:	2b00      	cmp	r3, #0
 800f428:	d001      	beq.n	800f42e <osThreadNew+0x72>
        return (NULL);
 800f42a:	2300      	movs	r3, #0
 800f42c:	e054      	b.n	800f4d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	695b      	ldr	r3, [r3, #20]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d003      	beq.n	800f43e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	695b      	ldr	r3, [r3, #20]
 800f43a:	089b      	lsrs	r3, r3, #2
 800f43c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	689b      	ldr	r3, [r3, #8]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d00e      	beq.n	800f464 <osThreadNew+0xa8>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	68db      	ldr	r3, [r3, #12]
 800f44a:	2ba7      	cmp	r3, #167	@ 0xa7
 800f44c:	d90a      	bls.n	800f464 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f452:	2b00      	cmp	r3, #0
 800f454:	d006      	beq.n	800f464 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	695b      	ldr	r3, [r3, #20]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d002      	beq.n	800f464 <osThreadNew+0xa8>
        mem = 1;
 800f45e:	2301      	movs	r3, #1
 800f460:	61bb      	str	r3, [r7, #24]
 800f462:	e010      	b.n	800f486 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	689b      	ldr	r3, [r3, #8]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d10c      	bne.n	800f486 <osThreadNew+0xca>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d108      	bne.n	800f486 <osThreadNew+0xca>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d104      	bne.n	800f486 <osThreadNew+0xca>
          mem = 0;
 800f47c:	2300      	movs	r3, #0
 800f47e:	61bb      	str	r3, [r7, #24]
 800f480:	e001      	b.n	800f486 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f482:	2300      	movs	r3, #0
 800f484:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d110      	bne.n	800f4ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f494:	9202      	str	r2, [sp, #8]
 800f496:	9301      	str	r3, [sp, #4]
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	9300      	str	r3, [sp, #0]
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	6a3a      	ldr	r2, [r7, #32]
 800f4a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	f001 fb96 	bl	8010bd4 <xTaskCreateStatic>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	613b      	str	r3, [r7, #16]
 800f4ac:	e013      	b.n	800f4d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d110      	bne.n	800f4d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f4b4:	6a3b      	ldr	r3, [r7, #32]
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	f107 0310 	add.w	r3, r7, #16
 800f4bc:	9301      	str	r3, [sp, #4]
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f001 fbe4 	bl	8010c94 <xTaskCreate>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d001      	beq.n	800f4d6 <osThreadNew+0x11a>
            hTask = NULL;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f4d6:	693b      	ldr	r3, [r7, #16]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3728      	adds	r7, #40	@ 0x28
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b088      	sub	sp, #32
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4ec:	f3ef 8305 	mrs	r3, IPSR
 800f4f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800f4f2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d174      	bne.n	800f5e2 <osMutexNew+0x102>
    if (attr != NULL) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d003      	beq.n	800f506 <osMutexNew+0x26>
      type = attr->attr_bits;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	61bb      	str	r3, [r7, #24]
 800f504:	e001      	b.n	800f50a <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f506:	2300      	movs	r3, #0
 800f508:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	f003 0301 	and.w	r3, r3, #1
 800f510:	2b00      	cmp	r3, #0
 800f512:	d002      	beq.n	800f51a <osMutexNew+0x3a>
      rmtx = 1U;
 800f514:	2301      	movs	r3, #1
 800f516:	617b      	str	r3, [r7, #20]
 800f518:	e001      	b.n	800f51e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f51a:	2300      	movs	r3, #0
 800f51c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	f003 0308 	and.w	r3, r3, #8
 800f524:	2b00      	cmp	r3, #0
 800f526:	d15c      	bne.n	800f5e2 <osMutexNew+0x102>
      mem = -1;
 800f528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f52c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d015      	beq.n	800f560 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d006      	beq.n	800f54a <osMutexNew+0x6a>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	2b4f      	cmp	r3, #79	@ 0x4f
 800f542:	d902      	bls.n	800f54a <osMutexNew+0x6a>
          mem = 1;
 800f544:	2301      	movs	r3, #1
 800f546:	613b      	str	r3, [r7, #16]
 800f548:	e00c      	b.n	800f564 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d108      	bne.n	800f564 <osMutexNew+0x84>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d104      	bne.n	800f564 <osMutexNew+0x84>
            mem = 0;
 800f55a:	2300      	movs	r3, #0
 800f55c:	613b      	str	r3, [r7, #16]
 800f55e:	e001      	b.n	800f564 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f560:	2300      	movs	r3, #0
 800f562:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	2b01      	cmp	r3, #1
 800f568:	d112      	bne.n	800f590 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d007      	beq.n	800f580 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	689b      	ldr	r3, [r3, #8]
 800f574:	4619      	mov	r1, r3
 800f576:	2004      	movs	r0, #4
 800f578:	f000 fc2b 	bl	800fdd2 <xQueueCreateMutexStatic>
 800f57c:	61f8      	str	r0, [r7, #28]
 800f57e:	e016      	b.n	800f5ae <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	4619      	mov	r1, r3
 800f586:	2001      	movs	r0, #1
 800f588:	f000 fc23 	bl	800fdd2 <xQueueCreateMutexStatic>
 800f58c:	61f8      	str	r0, [r7, #28]
 800f58e:	e00e      	b.n	800f5ae <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d10b      	bne.n	800f5ae <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d004      	beq.n	800f5a6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f59c:	2004      	movs	r0, #4
 800f59e:	f000 fc00 	bl	800fda2 <xQueueCreateMutex>
 800f5a2:	61f8      	str	r0, [r7, #28]
 800f5a4:	e003      	b.n	800f5ae <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f5a6:	2001      	movs	r0, #1
 800f5a8:	f000 fbfb 	bl	800fda2 <xQueueCreateMutex>
 800f5ac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00c      	beq.n	800f5ce <osMutexNew+0xee>
        if (attr != NULL) {
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d003      	beq.n	800f5c2 <osMutexNew+0xe2>
          name = attr->name;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	60fb      	str	r3, [r7, #12]
 800f5c0:	e001      	b.n	800f5c6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f5c6:	68f9      	ldr	r1, [r7, #12]
 800f5c8:	69f8      	ldr	r0, [r7, #28]
 800f5ca:	f001 fa7b 	bl	8010ac4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d006      	beq.n	800f5e2 <osMutexNew+0x102>
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d003      	beq.n	800f5e2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	f043 0301 	orr.w	r3, r3, #1
 800f5e0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f5e2:	69fb      	ldr	r3, [r7, #28]
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3720      	adds	r7, #32
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b08a      	sub	sp, #40	@ 0x28
 800f5f0:	af02      	add	r7, sp, #8
 800f5f2:	60f8      	str	r0, [r7, #12]
 800f5f4:	60b9      	str	r1, [r7, #8]
 800f5f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5fc:	f3ef 8305 	mrs	r3, IPSR
 800f600:	613b      	str	r3, [r7, #16]
  return(result);
 800f602:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f604:	2b00      	cmp	r3, #0
 800f606:	d175      	bne.n	800f6f4 <osSemaphoreNew+0x108>
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d072      	beq.n	800f6f4 <osSemaphoreNew+0x108>
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	429a      	cmp	r2, r3
 800f614:	d86e      	bhi.n	800f6f4 <osSemaphoreNew+0x108>
    mem = -1;
 800f616:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f61a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d015      	beq.n	800f64e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d006      	beq.n	800f638 <osSemaphoreNew+0x4c>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	2b4f      	cmp	r3, #79	@ 0x4f
 800f630:	d902      	bls.n	800f638 <osSemaphoreNew+0x4c>
        mem = 1;
 800f632:	2301      	movs	r3, #1
 800f634:	61bb      	str	r3, [r7, #24]
 800f636:	e00c      	b.n	800f652 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d108      	bne.n	800f652 <osSemaphoreNew+0x66>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d104      	bne.n	800f652 <osSemaphoreNew+0x66>
          mem = 0;
 800f648:	2300      	movs	r3, #0
 800f64a:	61bb      	str	r3, [r7, #24]
 800f64c:	e001      	b.n	800f652 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f64e:	2300      	movs	r3, #0
 800f650:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f658:	d04c      	beq.n	800f6f4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d128      	bne.n	800f6b2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	2b01      	cmp	r3, #1
 800f664:	d10a      	bne.n	800f67c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	2203      	movs	r2, #3
 800f66c:	9200      	str	r2, [sp, #0]
 800f66e:	2200      	movs	r2, #0
 800f670:	2100      	movs	r1, #0
 800f672:	2001      	movs	r0, #1
 800f674:	f000 faa0 	bl	800fbb8 <xQueueGenericCreateStatic>
 800f678:	61f8      	str	r0, [r7, #28]
 800f67a:	e005      	b.n	800f688 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f67c:	2203      	movs	r2, #3
 800f67e:	2100      	movs	r1, #0
 800f680:	2001      	movs	r0, #1
 800f682:	f000 fb16 	bl	800fcb2 <xQueueGenericCreate>
 800f686:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d022      	beq.n	800f6d4 <osSemaphoreNew+0xe8>
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d01f      	beq.n	800f6d4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f694:	2300      	movs	r3, #0
 800f696:	2200      	movs	r2, #0
 800f698:	2100      	movs	r1, #0
 800f69a:	69f8      	ldr	r0, [r7, #28]
 800f69c:	f000 fc22 	bl	800fee4 <xQueueGenericSend>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d016      	beq.n	800f6d4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f6a6:	69f8      	ldr	r0, [r7, #28]
 800f6a8:	f001 f8c0 	bl	801082c <vQueueDelete>
            hSemaphore = NULL;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	61fb      	str	r3, [r7, #28]
 800f6b0:	e010      	b.n	800f6d4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d108      	bne.n	800f6ca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	461a      	mov	r2, r3
 800f6be:	68b9      	ldr	r1, [r7, #8]
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f000 fba1 	bl	800fe08 <xQueueCreateCountingSemaphoreStatic>
 800f6c6:	61f8      	str	r0, [r7, #28]
 800f6c8:	e004      	b.n	800f6d4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f6ca:	68b9      	ldr	r1, [r7, #8]
 800f6cc:	68f8      	ldr	r0, [r7, #12]
 800f6ce:	f000 fbd4 	bl	800fe7a <xQueueCreateCountingSemaphore>
 800f6d2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00c      	beq.n	800f6f4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d003      	beq.n	800f6e8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	617b      	str	r3, [r7, #20]
 800f6e6:	e001      	b.n	800f6ec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f6ec:	6979      	ldr	r1, [r7, #20]
 800f6ee:	69f8      	ldr	r0, [r7, #28]
 800f6f0:	f001 f9e8 	bl	8010ac4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f6f4:	69fb      	ldr	r3, [r7, #28]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3720      	adds	r7, #32
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
	...

0800f700 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f700:	b580      	push	{r7, lr}
 800f702:	b086      	sub	sp, #24
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f70e:	2300      	movs	r3, #0
 800f710:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d103      	bne.n	800f720 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f718:	f06f 0303 	mvn.w	r3, #3
 800f71c:	617b      	str	r3, [r7, #20]
 800f71e:	e039      	b.n	800f794 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f720:	f3ef 8305 	mrs	r3, IPSR
 800f724:	60fb      	str	r3, [r7, #12]
  return(result);
 800f726:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d022      	beq.n	800f772 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d003      	beq.n	800f73a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f732:	f06f 0303 	mvn.w	r3, #3
 800f736:	617b      	str	r3, [r7, #20]
 800f738:	e02c      	b.n	800f794 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f73a:	2300      	movs	r3, #0
 800f73c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f73e:	f107 0308 	add.w	r3, r7, #8
 800f742:	461a      	mov	r2, r3
 800f744:	2100      	movs	r1, #0
 800f746:	6938      	ldr	r0, [r7, #16]
 800f748:	f000 ffee 	bl	8010728 <xQueueReceiveFromISR>
 800f74c:	4603      	mov	r3, r0
 800f74e:	2b01      	cmp	r3, #1
 800f750:	d003      	beq.n	800f75a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f752:	f06f 0302 	mvn.w	r3, #2
 800f756:	617b      	str	r3, [r7, #20]
 800f758:	e01c      	b.n	800f794 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d019      	beq.n	800f794 <osSemaphoreAcquire+0x94>
 800f760:	4b0f      	ldr	r3, [pc, #60]	@ (800f7a0 <osSemaphoreAcquire+0xa0>)
 800f762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f766:	601a      	str	r2, [r3, #0]
 800f768:	f3bf 8f4f 	dsb	sy
 800f76c:	f3bf 8f6f 	isb	sy
 800f770:	e010      	b.n	800f794 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f772:	6839      	ldr	r1, [r7, #0]
 800f774:	6938      	ldr	r0, [r7, #16]
 800f776:	f000 fec7 	bl	8010508 <xQueueSemaphoreTake>
 800f77a:	4603      	mov	r3, r0
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d009      	beq.n	800f794 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d003      	beq.n	800f78e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f786:	f06f 0301 	mvn.w	r3, #1
 800f78a:	617b      	str	r3, [r7, #20]
 800f78c:	e002      	b.n	800f794 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f78e:	f06f 0302 	mvn.w	r3, #2
 800f792:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f794:	697b      	ldr	r3, [r7, #20]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3718      	adds	r7, #24
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	e000ed04 	.word	0xe000ed04

0800f7a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d103      	bne.n	800f7c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f7ba:	f06f 0303 	mvn.w	r3, #3
 800f7be:	617b      	str	r3, [r7, #20]
 800f7c0:	e02c      	b.n	800f81c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7c2:	f3ef 8305 	mrs	r3, IPSR
 800f7c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d01a      	beq.n	800f804 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f7d2:	f107 0308 	add.w	r3, r7, #8
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6938      	ldr	r0, [r7, #16]
 800f7da:	f000 fd23 	bl	8010224 <xQueueGiveFromISR>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d003      	beq.n	800f7ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f7e4:	f06f 0302 	mvn.w	r3, #2
 800f7e8:	617b      	str	r3, [r7, #20]
 800f7ea:	e017      	b.n	800f81c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d014      	beq.n	800f81c <osSemaphoreRelease+0x78>
 800f7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f828 <osSemaphoreRelease+0x84>)
 800f7f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7f8:	601a      	str	r2, [r3, #0]
 800f7fa:	f3bf 8f4f 	dsb	sy
 800f7fe:	f3bf 8f6f 	isb	sy
 800f802:	e00b      	b.n	800f81c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f804:	2300      	movs	r3, #0
 800f806:	2200      	movs	r2, #0
 800f808:	2100      	movs	r1, #0
 800f80a:	6938      	ldr	r0, [r7, #16]
 800f80c:	f000 fb6a 	bl	800fee4 <xQueueGenericSend>
 800f810:	4603      	mov	r3, r0
 800f812:	2b01      	cmp	r3, #1
 800f814:	d002      	beq.n	800f81c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f816:	f06f 0302 	mvn.w	r3, #2
 800f81a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f81c:	697b      	ldr	r3, [r7, #20]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	e000ed04 	.word	0xe000ed04

0800f82c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b08a      	sub	sp, #40	@ 0x28
 800f830:	af02      	add	r7, sp, #8
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f838:	2300      	movs	r3, #0
 800f83a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f83c:	f3ef 8305 	mrs	r3, IPSR
 800f840:	613b      	str	r3, [r7, #16]
  return(result);
 800f842:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f844:	2b00      	cmp	r3, #0
 800f846:	d15f      	bne.n	800f908 <osMessageQueueNew+0xdc>
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d05c      	beq.n	800f908 <osMessageQueueNew+0xdc>
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d059      	beq.n	800f908 <osMessageQueueNew+0xdc>
    mem = -1;
 800f854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f858:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d029      	beq.n	800f8b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d012      	beq.n	800f88e <osMessageQueueNew+0x62>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	2b4f      	cmp	r3, #79	@ 0x4f
 800f86e:	d90e      	bls.n	800f88e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f874:	2b00      	cmp	r3, #0
 800f876:	d00a      	beq.n	800f88e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	695a      	ldr	r2, [r3, #20]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	68b9      	ldr	r1, [r7, #8]
 800f880:	fb01 f303 	mul.w	r3, r1, r3
 800f884:	429a      	cmp	r2, r3
 800f886:	d302      	bcc.n	800f88e <osMessageQueueNew+0x62>
        mem = 1;
 800f888:	2301      	movs	r3, #1
 800f88a:	61bb      	str	r3, [r7, #24]
 800f88c:	e014      	b.n	800f8b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d110      	bne.n	800f8b8 <osMessageQueueNew+0x8c>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d10c      	bne.n	800f8b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d108      	bne.n	800f8b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	695b      	ldr	r3, [r3, #20]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d104      	bne.n	800f8b8 <osMessageQueueNew+0x8c>
          mem = 0;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	61bb      	str	r3, [r7, #24]
 800f8b2:	e001      	b.n	800f8b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d10b      	bne.n	800f8d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	691a      	ldr	r2, [r3, #16]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	9100      	str	r1, [sp, #0]
 800f8ca:	68b9      	ldr	r1, [r7, #8]
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	f000 f973 	bl	800fbb8 <xQueueGenericCreateStatic>
 800f8d2:	61f8      	str	r0, [r7, #28]
 800f8d4:	e008      	b.n	800f8e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d105      	bne.n	800f8e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f8dc:	2200      	movs	r2, #0
 800f8de:	68b9      	ldr	r1, [r7, #8]
 800f8e0:	68f8      	ldr	r0, [r7, #12]
 800f8e2:	f000 f9e6 	bl	800fcb2 <xQueueGenericCreate>
 800f8e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00c      	beq.n	800f908 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d003      	beq.n	800f8fc <osMessageQueueNew+0xd0>
        name = attr->name;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	617b      	str	r3, [r7, #20]
 800f8fa:	e001      	b.n	800f900 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f900:	6979      	ldr	r1, [r7, #20]
 800f902:	69f8      	ldr	r0, [r7, #28]
 800f904:	f001 f8de 	bl	8010ac4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f908:	69fb      	ldr	r3, [r7, #28]
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3720      	adds	r7, #32
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
	...

0800f914 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f914:	b480      	push	{r7}
 800f916:	b085      	sub	sp, #20
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	4a07      	ldr	r2, [pc, #28]	@ (800f940 <vApplicationGetIdleTaskMemory+0x2c>)
 800f924:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	4a06      	ldr	r2, [pc, #24]	@ (800f944 <vApplicationGetIdleTaskMemory+0x30>)
 800f92a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2280      	movs	r2, #128	@ 0x80
 800f930:	601a      	str	r2, [r3, #0]
}
 800f932:	bf00      	nop
 800f934:	3714      	adds	r7, #20
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	2001a2a8 	.word	0x2001a2a8
 800f944:	2001a350 	.word	0x2001a350

0800f948 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f948:	b480      	push	{r7}
 800f94a:	b085      	sub	sp, #20
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	4a07      	ldr	r2, [pc, #28]	@ (800f974 <vApplicationGetTimerTaskMemory+0x2c>)
 800f958:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	4a06      	ldr	r2, [pc, #24]	@ (800f978 <vApplicationGetTimerTaskMemory+0x30>)
 800f95e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f966:	601a      	str	r2, [r3, #0]
}
 800f968:	bf00      	nop
 800f96a:	3714      	adds	r7, #20
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr
 800f974:	2001a550 	.word	0x2001a550
 800f978:	2001a5f8 	.word	0x2001a5f8

0800f97c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f103 0208 	add.w	r2, r3, #8
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f994:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f103 0208 	add.w	r2, r3, #8
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f103 0208 	add.w	r2, r3, #8
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f9b0:	bf00      	nop
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f9ca:	bf00      	nop
 800f9cc:	370c      	adds	r7, #12
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr

0800f9d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f9d6:	b480      	push	{r7}
 800f9d8:	b085      	sub	sp, #20
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	68fa      	ldr	r2, [r7, #12]
 800f9ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	689a      	ldr	r2, [r3, #8]
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	683a      	ldr	r2, [r7, #0]
 800fa00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	1c5a      	adds	r2, r3, #1
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	601a      	str	r2, [r3, #0]
}
 800fa12:	bf00      	nop
 800fa14:	3714      	adds	r7, #20
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr

0800fa1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa1e:	b480      	push	{r7}
 800fa20:	b085      	sub	sp, #20
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa34:	d103      	bne.n	800fa3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	691b      	ldr	r3, [r3, #16]
 800fa3a:	60fb      	str	r3, [r7, #12]
 800fa3c:	e00c      	b.n	800fa58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	3308      	adds	r3, #8
 800fa42:	60fb      	str	r3, [r7, #12]
 800fa44:	e002      	b.n	800fa4c <vListInsert+0x2e>
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	60fb      	str	r3, [r7, #12]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	68ba      	ldr	r2, [r7, #8]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d2f6      	bcs.n	800fa46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	685a      	ldr	r2, [r3, #4]
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	683a      	ldr	r2, [r7, #0]
 800fa66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	683a      	ldr	r2, [r7, #0]
 800fa72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	1c5a      	adds	r2, r3, #1
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	601a      	str	r2, [r3, #0]
}
 800fa84:	bf00      	nop
 800fa86:	3714      	adds	r7, #20
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fa90:	b480      	push	{r7}
 800fa92:	b085      	sub	sp, #20
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	691b      	ldr	r3, [r3, #16]
 800fa9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	6892      	ldr	r2, [r2, #8]
 800faa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	687a      	ldr	r2, [r7, #4]
 800faae:	6852      	ldr	r2, [r2, #4]
 800fab0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d103      	bne.n	800fac4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	689a      	ldr	r2, [r3, #8]
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	1e5a      	subs	r2, r3, #1
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3714      	adds	r7, #20
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d10b      	bne.n	800fb10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800faf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fafc:	f383 8811 	msr	BASEPRI, r3
 800fb00:	f3bf 8f6f 	isb	sy
 800fb04:	f3bf 8f4f 	dsb	sy
 800fb08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fb0a:	bf00      	nop
 800fb0c:	bf00      	nop
 800fb0e:	e7fd      	b.n	800fb0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fb10:	f002 fd8a 	bl	8012628 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681a      	ldr	r2, [r3, #0]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb1c:	68f9      	ldr	r1, [r7, #12]
 800fb1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fb20:	fb01 f303 	mul.w	r3, r1, r3
 800fb24:	441a      	add	r2, r3
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb40:	3b01      	subs	r3, #1
 800fb42:	68f9      	ldr	r1, [r7, #12]
 800fb44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fb46:	fb01 f303 	mul.w	r3, r1, r3
 800fb4a:	441a      	add	r2, r3
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	22ff      	movs	r2, #255	@ 0xff
 800fb54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	22ff      	movs	r2, #255	@ 0xff
 800fb5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d114      	bne.n	800fb90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	691b      	ldr	r3, [r3, #16]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d01a      	beq.n	800fba4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	3310      	adds	r3, #16
 800fb72:	4618      	mov	r0, r3
 800fb74:	f001 fcf8 	bl	8011568 <xTaskRemoveFromEventList>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d012      	beq.n	800fba4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fb7e:	4b0d      	ldr	r3, [pc, #52]	@ (800fbb4 <xQueueGenericReset+0xd0>)
 800fb80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb84:	601a      	str	r2, [r3, #0]
 800fb86:	f3bf 8f4f 	dsb	sy
 800fb8a:	f3bf 8f6f 	isb	sy
 800fb8e:	e009      	b.n	800fba4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	3310      	adds	r3, #16
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7ff fef1 	bl	800f97c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	3324      	adds	r3, #36	@ 0x24
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7ff feec 	bl	800f97c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fba4:	f002 fd72 	bl	801268c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fba8:	2301      	movs	r3, #1
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	e000ed04 	.word	0xe000ed04

0800fbb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b08e      	sub	sp, #56	@ 0x38
 800fbbc:	af02      	add	r7, sp, #8
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	607a      	str	r2, [r7, #4]
 800fbc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d10b      	bne.n	800fbe4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800fbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbd0:	f383 8811 	msr	BASEPRI, r3
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	f3bf 8f4f 	dsb	sy
 800fbdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fbde:	bf00      	nop
 800fbe0:	bf00      	nop
 800fbe2:	e7fd      	b.n	800fbe0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d10b      	bne.n	800fc02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800fbea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbee:	f383 8811 	msr	BASEPRI, r3
 800fbf2:	f3bf 8f6f 	isb	sy
 800fbf6:	f3bf 8f4f 	dsb	sy
 800fbfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fbfc:	bf00      	nop
 800fbfe:	bf00      	nop
 800fc00:	e7fd      	b.n	800fbfe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d002      	beq.n	800fc0e <xQueueGenericCreateStatic+0x56>
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d001      	beq.n	800fc12 <xQueueGenericCreateStatic+0x5a>
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e000      	b.n	800fc14 <xQueueGenericCreateStatic+0x5c>
 800fc12:	2300      	movs	r3, #0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d10b      	bne.n	800fc30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800fc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc1c:	f383 8811 	msr	BASEPRI, r3
 800fc20:	f3bf 8f6f 	isb	sy
 800fc24:	f3bf 8f4f 	dsb	sy
 800fc28:	623b      	str	r3, [r7, #32]
}
 800fc2a:	bf00      	nop
 800fc2c:	bf00      	nop
 800fc2e:	e7fd      	b.n	800fc2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d102      	bne.n	800fc3c <xQueueGenericCreateStatic+0x84>
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d101      	bne.n	800fc40 <xQueueGenericCreateStatic+0x88>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e000      	b.n	800fc42 <xQueueGenericCreateStatic+0x8a>
 800fc40:	2300      	movs	r3, #0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d10b      	bne.n	800fc5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800fc46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
 800fc56:	61fb      	str	r3, [r7, #28]
}
 800fc58:	bf00      	nop
 800fc5a:	bf00      	nop
 800fc5c:	e7fd      	b.n	800fc5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fc5e:	2350      	movs	r3, #80	@ 0x50
 800fc60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	2b50      	cmp	r3, #80	@ 0x50
 800fc66:	d00b      	beq.n	800fc80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800fc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc6c:	f383 8811 	msr	BASEPRI, r3
 800fc70:	f3bf 8f6f 	isb	sy
 800fc74:	f3bf 8f4f 	dsb	sy
 800fc78:	61bb      	str	r3, [r7, #24]
}
 800fc7a:	bf00      	nop
 800fc7c:	bf00      	nop
 800fc7e:	e7fd      	b.n	800fc7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fc80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800fc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00d      	beq.n	800fca8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc8e:	2201      	movs	r2, #1
 800fc90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fc94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800fc98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc9a:	9300      	str	r3, [sp, #0]
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	687a      	ldr	r2, [r7, #4]
 800fca0:	68b9      	ldr	r1, [r7, #8]
 800fca2:	68f8      	ldr	r0, [r7, #12]
 800fca4:	f000 f840 	bl	800fd28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3730      	adds	r7, #48	@ 0x30
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b08a      	sub	sp, #40	@ 0x28
 800fcb6:	af02      	add	r7, sp, #8
 800fcb8:	60f8      	str	r0, [r7, #12]
 800fcba:	60b9      	str	r1, [r7, #8]
 800fcbc:	4613      	mov	r3, r2
 800fcbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d10b      	bne.n	800fcde <xQueueGenericCreate+0x2c>
	__asm volatile
 800fcc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcca:	f383 8811 	msr	BASEPRI, r3
 800fcce:	f3bf 8f6f 	isb	sy
 800fcd2:	f3bf 8f4f 	dsb	sy
 800fcd6:	613b      	str	r3, [r7, #16]
}
 800fcd8:	bf00      	nop
 800fcda:	bf00      	nop
 800fcdc:	e7fd      	b.n	800fcda <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	68ba      	ldr	r2, [r7, #8]
 800fce2:	fb02 f303 	mul.w	r3, r2, r3
 800fce6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fce8:	69fb      	ldr	r3, [r7, #28]
 800fcea:	3350      	adds	r3, #80	@ 0x50
 800fcec:	4618      	mov	r0, r3
 800fcee:	f002 fdbd 	bl	801286c <pvPortMalloc>
 800fcf2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fcf4:	69bb      	ldr	r3, [r7, #24]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d011      	beq.n	800fd1e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	3350      	adds	r3, #80	@ 0x50
 800fd02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fd04:	69bb      	ldr	r3, [r7, #24]
 800fd06:	2200      	movs	r2, #0
 800fd08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fd0c:	79fa      	ldrb	r2, [r7, #7]
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	4613      	mov	r3, r2
 800fd14:	697a      	ldr	r2, [r7, #20]
 800fd16:	68b9      	ldr	r1, [r7, #8]
 800fd18:	68f8      	ldr	r0, [r7, #12]
 800fd1a:	f000 f805 	bl	800fd28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fd1e:	69bb      	ldr	r3, [r7, #24]
	}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3720      	adds	r7, #32
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d103      	bne.n	800fd44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fd3c:	69bb      	ldr	r3, [r7, #24]
 800fd3e:	69ba      	ldr	r2, [r7, #24]
 800fd40:	601a      	str	r2, [r3, #0]
 800fd42:	e002      	b.n	800fd4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fd44:	69bb      	ldr	r3, [r7, #24]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fd4a:	69bb      	ldr	r3, [r7, #24]
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	68ba      	ldr	r2, [r7, #8]
 800fd54:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fd56:	2101      	movs	r1, #1
 800fd58:	69b8      	ldr	r0, [r7, #24]
 800fd5a:	f7ff fec3 	bl	800fae4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fd5e:	69bb      	ldr	r3, [r7, #24]
 800fd60:	78fa      	ldrb	r2, [r7, #3]
 800fd62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fd66:	bf00      	nop
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b082      	sub	sp, #8
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00e      	beq.n	800fd9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fd8e:	2300      	movs	r3, #0
 800fd90:	2200      	movs	r2, #0
 800fd92:	2100      	movs	r1, #0
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 f8a5 	bl	800fee4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fd9a:	bf00      	nop
 800fd9c:	3708      	adds	r7, #8
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}

0800fda2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fda2:	b580      	push	{r7, lr}
 800fda4:	b086      	sub	sp, #24
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	4603      	mov	r3, r0
 800fdaa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fdac:	2301      	movs	r3, #1
 800fdae:	617b      	str	r3, [r7, #20]
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fdb4:	79fb      	ldrb	r3, [r7, #7]
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	6939      	ldr	r1, [r7, #16]
 800fdba:	6978      	ldr	r0, [r7, #20]
 800fdbc:	f7ff ff79 	bl	800fcb2 <xQueueGenericCreate>
 800fdc0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f7ff ffd3 	bl	800fd6e <prvInitialiseMutex>

		return xNewQueue;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
	}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3718      	adds	r7, #24
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fdd2:	b580      	push	{r7, lr}
 800fdd4:	b088      	sub	sp, #32
 800fdd6:	af02      	add	r7, sp, #8
 800fdd8:	4603      	mov	r3, r0
 800fdda:	6039      	str	r1, [r7, #0]
 800fddc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fdde:	2301      	movs	r3, #1
 800fde0:	617b      	str	r3, [r7, #20]
 800fde2:	2300      	movs	r3, #0
 800fde4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fde6:	79fb      	ldrb	r3, [r7, #7]
 800fde8:	9300      	str	r3, [sp, #0]
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	2200      	movs	r2, #0
 800fdee:	6939      	ldr	r1, [r7, #16]
 800fdf0:	6978      	ldr	r0, [r7, #20]
 800fdf2:	f7ff fee1 	bl	800fbb8 <xQueueGenericCreateStatic>
 800fdf6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	f7ff ffb8 	bl	800fd6e <prvInitialiseMutex>

		return xNewQueue;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
	}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3718      	adds	r7, #24
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b08a      	sub	sp, #40	@ 0x28
 800fe0c:	af02      	add	r7, sp, #8
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d10b      	bne.n	800fe32 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800fe1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe1e:	f383 8811 	msr	BASEPRI, r3
 800fe22:	f3bf 8f6f 	isb	sy
 800fe26:	f3bf 8f4f 	dsb	sy
 800fe2a:	61bb      	str	r3, [r7, #24]
}
 800fe2c:	bf00      	nop
 800fe2e:	bf00      	nop
 800fe30:	e7fd      	b.n	800fe2e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d90b      	bls.n	800fe52 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800fe3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe3e:	f383 8811 	msr	BASEPRI, r3
 800fe42:	f3bf 8f6f 	isb	sy
 800fe46:	f3bf 8f4f 	dsb	sy
 800fe4a:	617b      	str	r3, [r7, #20]
}
 800fe4c:	bf00      	nop
 800fe4e:	bf00      	nop
 800fe50:	e7fd      	b.n	800fe4e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fe52:	2302      	movs	r3, #2
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	2100      	movs	r1, #0
 800fe5c:	68f8      	ldr	r0, [r7, #12]
 800fe5e:	f7ff feab 	bl	800fbb8 <xQueueGenericCreateStatic>
 800fe62:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d002      	beq.n	800fe70 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	68ba      	ldr	r2, [r7, #8]
 800fe6e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fe70:	69fb      	ldr	r3, [r7, #28]
	}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3720      	adds	r7, #32
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}

0800fe7a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fe7a:	b580      	push	{r7, lr}
 800fe7c:	b086      	sub	sp, #24
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
 800fe82:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d10b      	bne.n	800fea2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800fe8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe8e:	f383 8811 	msr	BASEPRI, r3
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	613b      	str	r3, [r7, #16]
}
 800fe9c:	bf00      	nop
 800fe9e:	bf00      	nop
 800fea0:	e7fd      	b.n	800fe9e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fea2:	683a      	ldr	r2, [r7, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d90b      	bls.n	800fec2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800feaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feae:	f383 8811 	msr	BASEPRI, r3
 800feb2:	f3bf 8f6f 	isb	sy
 800feb6:	f3bf 8f4f 	dsb	sy
 800feba:	60fb      	str	r3, [r7, #12]
}
 800febc:	bf00      	nop
 800febe:	bf00      	nop
 800fec0:	e7fd      	b.n	800febe <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fec2:	2202      	movs	r2, #2
 800fec4:	2100      	movs	r1, #0
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff fef3 	bl	800fcb2 <xQueueGenericCreate>
 800fecc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d002      	beq.n	800feda <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	683a      	ldr	r2, [r7, #0]
 800fed8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800feda:	697b      	ldr	r3, [r7, #20]
	}
 800fedc:	4618      	mov	r0, r3
 800fede:	3718      	adds	r7, #24
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b08e      	sub	sp, #56	@ 0x38
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	607a      	str	r2, [r7, #4]
 800fef0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fef2:	2300      	movs	r3, #0
 800fef4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d10b      	bne.n	800ff18 <xQueueGenericSend+0x34>
	__asm volatile
 800ff00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff04:	f383 8811 	msr	BASEPRI, r3
 800ff08:	f3bf 8f6f 	isb	sy
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ff12:	bf00      	nop
 800ff14:	bf00      	nop
 800ff16:	e7fd      	b.n	800ff14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d103      	bne.n	800ff26 <xQueueGenericSend+0x42>
 800ff1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d101      	bne.n	800ff2a <xQueueGenericSend+0x46>
 800ff26:	2301      	movs	r3, #1
 800ff28:	e000      	b.n	800ff2c <xQueueGenericSend+0x48>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d10b      	bne.n	800ff48 <xQueueGenericSend+0x64>
	__asm volatile
 800ff30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff34:	f383 8811 	msr	BASEPRI, r3
 800ff38:	f3bf 8f6f 	isb	sy
 800ff3c:	f3bf 8f4f 	dsb	sy
 800ff40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ff42:	bf00      	nop
 800ff44:	bf00      	nop
 800ff46:	e7fd      	b.n	800ff44 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	2b02      	cmp	r3, #2
 800ff4c:	d103      	bne.n	800ff56 <xQueueGenericSend+0x72>
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d101      	bne.n	800ff5a <xQueueGenericSend+0x76>
 800ff56:	2301      	movs	r3, #1
 800ff58:	e000      	b.n	800ff5c <xQueueGenericSend+0x78>
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d10b      	bne.n	800ff78 <xQueueGenericSend+0x94>
	__asm volatile
 800ff60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff64:	f383 8811 	msr	BASEPRI, r3
 800ff68:	f3bf 8f6f 	isb	sy
 800ff6c:	f3bf 8f4f 	dsb	sy
 800ff70:	623b      	str	r3, [r7, #32]
}
 800ff72:	bf00      	nop
 800ff74:	bf00      	nop
 800ff76:	e7fd      	b.n	800ff74 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff78:	f001 fce6 	bl	8011948 <xTaskGetSchedulerState>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d102      	bne.n	800ff88 <xQueueGenericSend+0xa4>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d101      	bne.n	800ff8c <xQueueGenericSend+0xa8>
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e000      	b.n	800ff8e <xQueueGenericSend+0xaa>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d10b      	bne.n	800ffaa <xQueueGenericSend+0xc6>
	__asm volatile
 800ff92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff96:	f383 8811 	msr	BASEPRI, r3
 800ff9a:	f3bf 8f6f 	isb	sy
 800ff9e:	f3bf 8f4f 	dsb	sy
 800ffa2:	61fb      	str	r3, [r7, #28]
}
 800ffa4:	bf00      	nop
 800ffa6:	bf00      	nop
 800ffa8:	e7fd      	b.n	800ffa6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffaa:	f002 fb3d 	bl	8012628 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ffae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d302      	bcc.n	800ffc0 <xQueueGenericSend+0xdc>
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	2b02      	cmp	r3, #2
 800ffbe:	d129      	bne.n	8010014 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffc0:	683a      	ldr	r2, [r7, #0]
 800ffc2:	68b9      	ldr	r1, [r7, #8]
 800ffc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ffc6:	f000 fc6d 	bl	80108a4 <prvCopyDataToQueue>
 800ffca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d010      	beq.n	800fff6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd6:	3324      	adds	r3, #36	@ 0x24
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f001 fac5 	bl	8011568 <xTaskRemoveFromEventList>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d013      	beq.n	801000c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ffe4:	4b3f      	ldr	r3, [pc, #252]	@ (80100e4 <xQueueGenericSend+0x200>)
 800ffe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffea:	601a      	str	r2, [r3, #0]
 800ffec:	f3bf 8f4f 	dsb	sy
 800fff0:	f3bf 8f6f 	isb	sy
 800fff4:	e00a      	b.n	801000c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d007      	beq.n	801000c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fffc:	4b39      	ldr	r3, [pc, #228]	@ (80100e4 <xQueueGenericSend+0x200>)
 800fffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010002:	601a      	str	r2, [r3, #0]
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801000c:	f002 fb3e 	bl	801268c <vPortExitCritical>
				return pdPASS;
 8010010:	2301      	movs	r3, #1
 8010012:	e063      	b.n	80100dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d103      	bne.n	8010022 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801001a:	f002 fb37 	bl	801268c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801001e:	2300      	movs	r3, #0
 8010020:	e05c      	b.n	80100dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010024:	2b00      	cmp	r3, #0
 8010026:	d106      	bne.n	8010036 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010028:	f107 0314 	add.w	r3, r7, #20
 801002c:	4618      	mov	r0, r3
 801002e:	f001 fb01 	bl	8011634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010032:	2301      	movs	r3, #1
 8010034:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010036:	f002 fb29 	bl	801268c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801003a:	f001 f82f 	bl	801109c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801003e:	f002 faf3 	bl	8012628 <vPortEnterCritical>
 8010042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010044:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010048:	b25b      	sxtb	r3, r3
 801004a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801004e:	d103      	bne.n	8010058 <xQueueGenericSend+0x174>
 8010050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010052:	2200      	movs	r2, #0
 8010054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801005a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801005e:	b25b      	sxtb	r3, r3
 8010060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010064:	d103      	bne.n	801006e <xQueueGenericSend+0x18a>
 8010066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010068:	2200      	movs	r2, #0
 801006a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801006e:	f002 fb0d 	bl	801268c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010072:	1d3a      	adds	r2, r7, #4
 8010074:	f107 0314 	add.w	r3, r7, #20
 8010078:	4611      	mov	r1, r2
 801007a:	4618      	mov	r0, r3
 801007c:	f001 faf0 	bl	8011660 <xTaskCheckForTimeOut>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d124      	bne.n	80100d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010086:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010088:	f000 fd04 	bl	8010a94 <prvIsQueueFull>
 801008c:	4603      	mov	r3, r0
 801008e:	2b00      	cmp	r3, #0
 8010090:	d018      	beq.n	80100c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010094:	3310      	adds	r3, #16
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	4611      	mov	r1, r2
 801009a:	4618      	mov	r0, r3
 801009c:	f001 fa12 	bl	80114c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80100a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100a2:	f000 fc8f 	bl	80109c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80100a6:	f001 f83f 	bl	8011128 <xTaskResumeAll>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f47f af7c 	bne.w	800ffaa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80100b2:	4b0c      	ldr	r3, [pc, #48]	@ (80100e4 <xQueueGenericSend+0x200>)
 80100b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100b8:	601a      	str	r2, [r3, #0]
 80100ba:	f3bf 8f4f 	dsb	sy
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	e772      	b.n	800ffaa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80100c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100c6:	f000 fc7d 	bl	80109c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100ca:	f001 f82d 	bl	8011128 <xTaskResumeAll>
 80100ce:	e76c      	b.n	800ffaa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80100d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100d2:	f000 fc77 	bl	80109c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100d6:	f001 f827 	bl	8011128 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80100da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3738      	adds	r7, #56	@ 0x38
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	e000ed04 	.word	0xe000ed04

080100e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b090      	sub	sp, #64	@ 0x40
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	607a      	str	r2, [r7, #4]
 80100f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80100fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10b      	bne.n	8010118 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010104:	f383 8811 	msr	BASEPRI, r3
 8010108:	f3bf 8f6f 	isb	sy
 801010c:	f3bf 8f4f 	dsb	sy
 8010110:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010112:	bf00      	nop
 8010114:	bf00      	nop
 8010116:	e7fd      	b.n	8010114 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d103      	bne.n	8010126 <xQueueGenericSendFromISR+0x3e>
 801011e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010122:	2b00      	cmp	r3, #0
 8010124:	d101      	bne.n	801012a <xQueueGenericSendFromISR+0x42>
 8010126:	2301      	movs	r3, #1
 8010128:	e000      	b.n	801012c <xQueueGenericSendFromISR+0x44>
 801012a:	2300      	movs	r3, #0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d10b      	bne.n	8010148 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8010130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010134:	f383 8811 	msr	BASEPRI, r3
 8010138:	f3bf 8f6f 	isb	sy
 801013c:	f3bf 8f4f 	dsb	sy
 8010140:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010142:	bf00      	nop
 8010144:	bf00      	nop
 8010146:	e7fd      	b.n	8010144 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	2b02      	cmp	r3, #2
 801014c:	d103      	bne.n	8010156 <xQueueGenericSendFromISR+0x6e>
 801014e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010152:	2b01      	cmp	r3, #1
 8010154:	d101      	bne.n	801015a <xQueueGenericSendFromISR+0x72>
 8010156:	2301      	movs	r3, #1
 8010158:	e000      	b.n	801015c <xQueueGenericSendFromISR+0x74>
 801015a:	2300      	movs	r3, #0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d10b      	bne.n	8010178 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	623b      	str	r3, [r7, #32]
}
 8010172:	bf00      	nop
 8010174:	bf00      	nop
 8010176:	e7fd      	b.n	8010174 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010178:	f002 fb36 	bl	80127e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801017c:	f3ef 8211 	mrs	r2, BASEPRI
 8010180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010184:	f383 8811 	msr	BASEPRI, r3
 8010188:	f3bf 8f6f 	isb	sy
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	61fa      	str	r2, [r7, #28]
 8010192:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010194:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010196:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801019a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801019c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801019e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d302      	bcc.n	80101aa <xQueueGenericSendFromISR+0xc2>
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	2b02      	cmp	r3, #2
 80101a8:	d12f      	bne.n	801020a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80101aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80101b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101ba:	683a      	ldr	r2, [r7, #0]
 80101bc:	68b9      	ldr	r1, [r7, #8]
 80101be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80101c0:	f000 fb70 	bl	80108a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80101c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80101cc:	d112      	bne.n	80101f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d016      	beq.n	8010204 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d8:	3324      	adds	r3, #36	@ 0x24
 80101da:	4618      	mov	r0, r3
 80101dc:	f001 f9c4 	bl	8011568 <xTaskRemoveFromEventList>
 80101e0:	4603      	mov	r3, r0
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00e      	beq.n	8010204 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00b      	beq.n	8010204 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2201      	movs	r2, #1
 80101f0:	601a      	str	r2, [r3, #0]
 80101f2:	e007      	b.n	8010204 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80101f8:	3301      	adds	r3, #1
 80101fa:	b2db      	uxtb	r3, r3
 80101fc:	b25a      	sxtb	r2, r3
 80101fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010204:	2301      	movs	r3, #1
 8010206:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010208:	e001      	b.n	801020e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801020a:	2300      	movs	r3, #0
 801020c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801020e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010210:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010218:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801021a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801021c:	4618      	mov	r0, r3
 801021e:	3740      	adds	r7, #64	@ 0x40
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b08e      	sub	sp, #56	@ 0x38
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010234:	2b00      	cmp	r3, #0
 8010236:	d10b      	bne.n	8010250 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801023c:	f383 8811 	msr	BASEPRI, r3
 8010240:	f3bf 8f6f 	isb	sy
 8010244:	f3bf 8f4f 	dsb	sy
 8010248:	623b      	str	r3, [r7, #32]
}
 801024a:	bf00      	nop
 801024c:	bf00      	nop
 801024e:	e7fd      	b.n	801024c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010254:	2b00      	cmp	r3, #0
 8010256:	d00b      	beq.n	8010270 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801025c:	f383 8811 	msr	BASEPRI, r3
 8010260:	f3bf 8f6f 	isb	sy
 8010264:	f3bf 8f4f 	dsb	sy
 8010268:	61fb      	str	r3, [r7, #28]
}
 801026a:	bf00      	nop
 801026c:	bf00      	nop
 801026e:	e7fd      	b.n	801026c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d103      	bne.n	8010280 <xQueueGiveFromISR+0x5c>
 8010278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801027a:	689b      	ldr	r3, [r3, #8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <xQueueGiveFromISR+0x60>
 8010280:	2301      	movs	r3, #1
 8010282:	e000      	b.n	8010286 <xQueueGiveFromISR+0x62>
 8010284:	2300      	movs	r3, #0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d10b      	bne.n	80102a2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801028a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801028e:	f383 8811 	msr	BASEPRI, r3
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	f3bf 8f4f 	dsb	sy
 801029a:	61bb      	str	r3, [r7, #24]
}
 801029c:	bf00      	nop
 801029e:	bf00      	nop
 80102a0:	e7fd      	b.n	801029e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102a2:	f002 faa1 	bl	80127e8 <vPortValidateInterruptPriority>
	__asm volatile
 80102a6:	f3ef 8211 	mrs	r2, BASEPRI
 80102aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ae:	f383 8811 	msr	BASEPRI, r3
 80102b2:	f3bf 8f6f 	isb	sy
 80102b6:	f3bf 8f4f 	dsb	sy
 80102ba:	617a      	str	r2, [r7, #20]
 80102bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80102be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80102c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d22b      	bcs.n	801032a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80102d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80102d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102de:	1c5a      	adds	r2, r3, #1
 80102e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80102e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80102e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80102ec:	d112      	bne.n	8010314 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d016      	beq.n	8010324 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102f8:	3324      	adds	r3, #36	@ 0x24
 80102fa:	4618      	mov	r0, r3
 80102fc:	f001 f934 	bl	8011568 <xTaskRemoveFromEventList>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d00e      	beq.n	8010324 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d00b      	beq.n	8010324 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	2201      	movs	r2, #1
 8010310:	601a      	str	r2, [r3, #0]
 8010312:	e007      	b.n	8010324 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010318:	3301      	adds	r3, #1
 801031a:	b2db      	uxtb	r3, r3
 801031c:	b25a      	sxtb	r2, r3
 801031e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010324:	2301      	movs	r3, #1
 8010326:	637b      	str	r3, [r7, #52]	@ 0x34
 8010328:	e001      	b.n	801032e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801032a:	2300      	movs	r3, #0
 801032c:	637b      	str	r3, [r7, #52]	@ 0x34
 801032e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010330:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f383 8811 	msr	BASEPRI, r3
}
 8010338:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801033a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801033c:	4618      	mov	r0, r3
 801033e:	3738      	adds	r7, #56	@ 0x38
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b08c      	sub	sp, #48	@ 0x30
 8010348:	af00      	add	r7, sp, #0
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010350:	2300      	movs	r3, #0
 8010352:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801035a:	2b00      	cmp	r3, #0
 801035c:	d10b      	bne.n	8010376 <xQueueReceive+0x32>
	__asm volatile
 801035e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010362:	f383 8811 	msr	BASEPRI, r3
 8010366:	f3bf 8f6f 	isb	sy
 801036a:	f3bf 8f4f 	dsb	sy
 801036e:	623b      	str	r3, [r7, #32]
}
 8010370:	bf00      	nop
 8010372:	bf00      	nop
 8010374:	e7fd      	b.n	8010372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d103      	bne.n	8010384 <xQueueReceive+0x40>
 801037c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801037e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010380:	2b00      	cmp	r3, #0
 8010382:	d101      	bne.n	8010388 <xQueueReceive+0x44>
 8010384:	2301      	movs	r3, #1
 8010386:	e000      	b.n	801038a <xQueueReceive+0x46>
 8010388:	2300      	movs	r3, #0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d10b      	bne.n	80103a6 <xQueueReceive+0x62>
	__asm volatile
 801038e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	61fb      	str	r3, [r7, #28]
}
 80103a0:	bf00      	nop
 80103a2:	bf00      	nop
 80103a4:	e7fd      	b.n	80103a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80103a6:	f001 facf 	bl	8011948 <xTaskGetSchedulerState>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d102      	bne.n	80103b6 <xQueueReceive+0x72>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d101      	bne.n	80103ba <xQueueReceive+0x76>
 80103b6:	2301      	movs	r3, #1
 80103b8:	e000      	b.n	80103bc <xQueueReceive+0x78>
 80103ba:	2300      	movs	r3, #0
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d10b      	bne.n	80103d8 <xQueueReceive+0x94>
	__asm volatile
 80103c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103c4:	f383 8811 	msr	BASEPRI, r3
 80103c8:	f3bf 8f6f 	isb	sy
 80103cc:	f3bf 8f4f 	dsb	sy
 80103d0:	61bb      	str	r3, [r7, #24]
}
 80103d2:	bf00      	nop
 80103d4:	bf00      	nop
 80103d6:	e7fd      	b.n	80103d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103d8:	f002 f926 	bl	8012628 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d01f      	beq.n	8010428 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80103e8:	68b9      	ldr	r1, [r7, #8]
 80103ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103ec:	f000 fac4 	bl	8010978 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80103f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f2:	1e5a      	subs	r2, r3, #1
 80103f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103fa:	691b      	ldr	r3, [r3, #16]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d00f      	beq.n	8010420 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010402:	3310      	adds	r3, #16
 8010404:	4618      	mov	r0, r3
 8010406:	f001 f8af 	bl	8011568 <xTaskRemoveFromEventList>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d007      	beq.n	8010420 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010410:	4b3c      	ldr	r3, [pc, #240]	@ (8010504 <xQueueReceive+0x1c0>)
 8010412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010416:	601a      	str	r2, [r3, #0]
 8010418:	f3bf 8f4f 	dsb	sy
 801041c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010420:	f002 f934 	bl	801268c <vPortExitCritical>
				return pdPASS;
 8010424:	2301      	movs	r3, #1
 8010426:	e069      	b.n	80104fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d103      	bne.n	8010436 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801042e:	f002 f92d 	bl	801268c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010432:	2300      	movs	r3, #0
 8010434:	e062      	b.n	80104fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010438:	2b00      	cmp	r3, #0
 801043a:	d106      	bne.n	801044a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801043c:	f107 0310 	add.w	r3, r7, #16
 8010440:	4618      	mov	r0, r3
 8010442:	f001 f8f7 	bl	8011634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010446:	2301      	movs	r3, #1
 8010448:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801044a:	f002 f91f 	bl	801268c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801044e:	f000 fe25 	bl	801109c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010452:	f002 f8e9 	bl	8012628 <vPortEnterCritical>
 8010456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801045c:	b25b      	sxtb	r3, r3
 801045e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010462:	d103      	bne.n	801046c <xQueueReceive+0x128>
 8010464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010466:	2200      	movs	r2, #0
 8010468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801046c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801046e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010472:	b25b      	sxtb	r3, r3
 8010474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010478:	d103      	bne.n	8010482 <xQueueReceive+0x13e>
 801047a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801047c:	2200      	movs	r2, #0
 801047e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010482:	f002 f903 	bl	801268c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010486:	1d3a      	adds	r2, r7, #4
 8010488:	f107 0310 	add.w	r3, r7, #16
 801048c:	4611      	mov	r1, r2
 801048e:	4618      	mov	r0, r3
 8010490:	f001 f8e6 	bl	8011660 <xTaskCheckForTimeOut>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d123      	bne.n	80104e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801049a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801049c:	f000 fae4 	bl	8010a68 <prvIsQueueEmpty>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d017      	beq.n	80104d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80104a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104a8:	3324      	adds	r3, #36	@ 0x24
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	4611      	mov	r1, r2
 80104ae:	4618      	mov	r0, r3
 80104b0:	f001 f808 	bl	80114c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80104b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104b6:	f000 fa85 	bl	80109c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80104ba:	f000 fe35 	bl	8011128 <xTaskResumeAll>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d189      	bne.n	80103d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80104c4:	4b0f      	ldr	r3, [pc, #60]	@ (8010504 <xQueueReceive+0x1c0>)
 80104c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104ca:	601a      	str	r2, [r3, #0]
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	f3bf 8f6f 	isb	sy
 80104d4:	e780      	b.n	80103d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80104d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104d8:	f000 fa74 	bl	80109c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104dc:	f000 fe24 	bl	8011128 <xTaskResumeAll>
 80104e0:	e77a      	b.n	80103d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80104e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104e4:	f000 fa6e 	bl	80109c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104e8:	f000 fe1e 	bl	8011128 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104ee:	f000 fabb 	bl	8010a68 <prvIsQueueEmpty>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f43f af6f 	beq.w	80103d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80104fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3730      	adds	r7, #48	@ 0x30
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	e000ed04 	.word	0xe000ed04

08010508 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b08e      	sub	sp, #56	@ 0x38
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010512:	2300      	movs	r3, #0
 8010514:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801051a:	2300      	movs	r3, #0
 801051c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801051e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10b      	bne.n	801053c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010528:	f383 8811 	msr	BASEPRI, r3
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	623b      	str	r3, [r7, #32]
}
 8010536:	bf00      	nop
 8010538:	bf00      	nop
 801053a:	e7fd      	b.n	8010538 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801053c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010540:	2b00      	cmp	r3, #0
 8010542:	d00b      	beq.n	801055c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010548:	f383 8811 	msr	BASEPRI, r3
 801054c:	f3bf 8f6f 	isb	sy
 8010550:	f3bf 8f4f 	dsb	sy
 8010554:	61fb      	str	r3, [r7, #28]
}
 8010556:	bf00      	nop
 8010558:	bf00      	nop
 801055a:	e7fd      	b.n	8010558 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801055c:	f001 f9f4 	bl	8011948 <xTaskGetSchedulerState>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	d102      	bne.n	801056c <xQueueSemaphoreTake+0x64>
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d101      	bne.n	8010570 <xQueueSemaphoreTake+0x68>
 801056c:	2301      	movs	r3, #1
 801056e:	e000      	b.n	8010572 <xQueueSemaphoreTake+0x6a>
 8010570:	2300      	movs	r3, #0
 8010572:	2b00      	cmp	r3, #0
 8010574:	d10b      	bne.n	801058e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801057a:	f383 8811 	msr	BASEPRI, r3
 801057e:	f3bf 8f6f 	isb	sy
 8010582:	f3bf 8f4f 	dsb	sy
 8010586:	61bb      	str	r3, [r7, #24]
}
 8010588:	bf00      	nop
 801058a:	bf00      	nop
 801058c:	e7fd      	b.n	801058a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801058e:	f002 f84b 	bl	8012628 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010596:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801059a:	2b00      	cmp	r3, #0
 801059c:	d024      	beq.n	80105e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801059e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a0:	1e5a      	subs	r2, r3, #1
 80105a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80105a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d104      	bne.n	80105b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80105ae:	f001 fb45 	bl	8011c3c <pvTaskIncrementMutexHeldCount>
 80105b2:	4602      	mov	r2, r0
 80105b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d00f      	beq.n	80105e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c2:	3310      	adds	r3, #16
 80105c4:	4618      	mov	r0, r3
 80105c6:	f000 ffcf 	bl	8011568 <xTaskRemoveFromEventList>
 80105ca:	4603      	mov	r3, r0
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d007      	beq.n	80105e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80105d0:	4b54      	ldr	r3, [pc, #336]	@ (8010724 <xQueueSemaphoreTake+0x21c>)
 80105d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105d6:	601a      	str	r2, [r3, #0]
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80105e0:	f002 f854 	bl	801268c <vPortExitCritical>
				return pdPASS;
 80105e4:	2301      	movs	r3, #1
 80105e6:	e098      	b.n	801071a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d112      	bne.n	8010614 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80105ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d00b      	beq.n	801060c <xQueueSemaphoreTake+0x104>
	__asm volatile
 80105f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105f8:	f383 8811 	msr	BASEPRI, r3
 80105fc:	f3bf 8f6f 	isb	sy
 8010600:	f3bf 8f4f 	dsb	sy
 8010604:	617b      	str	r3, [r7, #20]
}
 8010606:	bf00      	nop
 8010608:	bf00      	nop
 801060a:	e7fd      	b.n	8010608 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801060c:	f002 f83e 	bl	801268c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010610:	2300      	movs	r3, #0
 8010612:	e082      	b.n	801071a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010616:	2b00      	cmp	r3, #0
 8010618:	d106      	bne.n	8010628 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801061a:	f107 030c 	add.w	r3, r7, #12
 801061e:	4618      	mov	r0, r3
 8010620:	f001 f808 	bl	8011634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010624:	2301      	movs	r3, #1
 8010626:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010628:	f002 f830 	bl	801268c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801062c:	f000 fd36 	bl	801109c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010630:	f001 fffa 	bl	8012628 <vPortEnterCritical>
 8010634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010636:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801063a:	b25b      	sxtb	r3, r3
 801063c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010640:	d103      	bne.n	801064a <xQueueSemaphoreTake+0x142>
 8010642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010644:	2200      	movs	r2, #0
 8010646:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801064a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801064c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010650:	b25b      	sxtb	r3, r3
 8010652:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010656:	d103      	bne.n	8010660 <xQueueSemaphoreTake+0x158>
 8010658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801065a:	2200      	movs	r2, #0
 801065c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010660:	f002 f814 	bl	801268c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010664:	463a      	mov	r2, r7
 8010666:	f107 030c 	add.w	r3, r7, #12
 801066a:	4611      	mov	r1, r2
 801066c:	4618      	mov	r0, r3
 801066e:	f000 fff7 	bl	8011660 <xTaskCheckForTimeOut>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d132      	bne.n	80106de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010678:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801067a:	f000 f9f5 	bl	8010a68 <prvIsQueueEmpty>
 801067e:	4603      	mov	r3, r0
 8010680:	2b00      	cmp	r3, #0
 8010682:	d026      	beq.n	80106d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d109      	bne.n	80106a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801068c:	f001 ffcc 	bl	8012628 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010692:	689b      	ldr	r3, [r3, #8]
 8010694:	4618      	mov	r0, r3
 8010696:	f001 f975 	bl	8011984 <xTaskPriorityInherit>
 801069a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801069c:	f001 fff6 	bl	801268c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106a2:	3324      	adds	r3, #36	@ 0x24
 80106a4:	683a      	ldr	r2, [r7, #0]
 80106a6:	4611      	mov	r1, r2
 80106a8:	4618      	mov	r0, r3
 80106aa:	f000 ff0b 	bl	80114c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80106ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106b0:	f000 f988 	bl	80109c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106b4:	f000 fd38 	bl	8011128 <xTaskResumeAll>
 80106b8:	4603      	mov	r3, r0
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	f47f af67 	bne.w	801058e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80106c0:	4b18      	ldr	r3, [pc, #96]	@ (8010724 <xQueueSemaphoreTake+0x21c>)
 80106c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106c6:	601a      	str	r2, [r3, #0]
 80106c8:	f3bf 8f4f 	dsb	sy
 80106cc:	f3bf 8f6f 	isb	sy
 80106d0:	e75d      	b.n	801058e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80106d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106d4:	f000 f976 	bl	80109c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106d8:	f000 fd26 	bl	8011128 <xTaskResumeAll>
 80106dc:	e757      	b.n	801058e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80106de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106e0:	f000 f970 	bl	80109c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106e4:	f000 fd20 	bl	8011128 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106ea:	f000 f9bd 	bl	8010a68 <prvIsQueueEmpty>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	f43f af4c 	beq.w	801058e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80106f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00d      	beq.n	8010718 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80106fc:	f001 ff94 	bl	8012628 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010700:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010702:	f000 f8b7 	bl	8010874 <prvGetDisinheritPriorityAfterTimeout>
 8010706:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801070a:	689b      	ldr	r3, [r3, #8]
 801070c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801070e:	4618      	mov	r0, r3
 8010710:	f001 fa10 	bl	8011b34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010714:	f001 ffba 	bl	801268c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010718:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801071a:	4618      	mov	r0, r3
 801071c:	3738      	adds	r7, #56	@ 0x38
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	e000ed04 	.word	0xe000ed04

08010728 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08e      	sub	sp, #56	@ 0x38
 801072c:	af00      	add	r7, sp, #0
 801072e:	60f8      	str	r0, [r7, #12]
 8010730:	60b9      	str	r1, [r7, #8]
 8010732:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801073a:	2b00      	cmp	r3, #0
 801073c:	d10b      	bne.n	8010756 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801073e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010742:	f383 8811 	msr	BASEPRI, r3
 8010746:	f3bf 8f6f 	isb	sy
 801074a:	f3bf 8f4f 	dsb	sy
 801074e:	623b      	str	r3, [r7, #32]
}
 8010750:	bf00      	nop
 8010752:	bf00      	nop
 8010754:	e7fd      	b.n	8010752 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d103      	bne.n	8010764 <xQueueReceiveFromISR+0x3c>
 801075c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010760:	2b00      	cmp	r3, #0
 8010762:	d101      	bne.n	8010768 <xQueueReceiveFromISR+0x40>
 8010764:	2301      	movs	r3, #1
 8010766:	e000      	b.n	801076a <xQueueReceiveFromISR+0x42>
 8010768:	2300      	movs	r3, #0
 801076a:	2b00      	cmp	r3, #0
 801076c:	d10b      	bne.n	8010786 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801076e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010772:	f383 8811 	msr	BASEPRI, r3
 8010776:	f3bf 8f6f 	isb	sy
 801077a:	f3bf 8f4f 	dsb	sy
 801077e:	61fb      	str	r3, [r7, #28]
}
 8010780:	bf00      	nop
 8010782:	bf00      	nop
 8010784:	e7fd      	b.n	8010782 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010786:	f002 f82f 	bl	80127e8 <vPortValidateInterruptPriority>
	__asm volatile
 801078a:	f3ef 8211 	mrs	r2, BASEPRI
 801078e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010792:	f383 8811 	msr	BASEPRI, r3
 8010796:	f3bf 8f6f 	isb	sy
 801079a:	f3bf 8f4f 	dsb	sy
 801079e:	61ba      	str	r2, [r7, #24]
 80107a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80107a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80107a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d02f      	beq.n	8010812 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80107b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80107b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107bc:	68b9      	ldr	r1, [r7, #8]
 80107be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80107c0:	f000 f8da 	bl	8010978 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c6:	1e5a      	subs	r2, r3, #1
 80107c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80107cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80107d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80107d4:	d112      	bne.n	80107fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d8:	691b      	ldr	r3, [r3, #16]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d016      	beq.n	801080c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107e0:	3310      	adds	r3, #16
 80107e2:	4618      	mov	r0, r3
 80107e4:	f000 fec0 	bl	8011568 <xTaskRemoveFromEventList>
 80107e8:	4603      	mov	r3, r0
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00e      	beq.n	801080c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00b      	beq.n	801080c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2201      	movs	r2, #1
 80107f8:	601a      	str	r2, [r3, #0]
 80107fa:	e007      	b.n	801080c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80107fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010800:	3301      	adds	r3, #1
 8010802:	b2db      	uxtb	r3, r3
 8010804:	b25a      	sxtb	r2, r3
 8010806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801080c:	2301      	movs	r3, #1
 801080e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010810:	e001      	b.n	8010816 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8010812:	2300      	movs	r3, #0
 8010814:	637b      	str	r3, [r7, #52]	@ 0x34
 8010816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010818:	613b      	str	r3, [r7, #16]
	__asm volatile
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	f383 8811 	msr	BASEPRI, r3
}
 8010820:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010824:	4618      	mov	r0, r3
 8010826:	3738      	adds	r7, #56	@ 0x38
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d10b      	bne.n	8010856 <vQueueDelete+0x2a>
	__asm volatile
 801083e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010842:	f383 8811 	msr	BASEPRI, r3
 8010846:	f3bf 8f6f 	isb	sy
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	60bb      	str	r3, [r7, #8]
}
 8010850:	bf00      	nop
 8010852:	bf00      	nop
 8010854:	e7fd      	b.n	8010852 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	f000 f95e 	bl	8010b18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010862:	2b00      	cmp	r3, #0
 8010864:	d102      	bne.n	801086c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8010866:	68f8      	ldr	r0, [r7, #12]
 8010868:	f002 f8ce 	bl	8012a08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801086c:	bf00      	nop
 801086e:	3710      	adds	r7, #16
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010880:	2b00      	cmp	r3, #0
 8010882:	d006      	beq.n	8010892 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801088e:	60fb      	str	r3, [r7, #12]
 8010890:	e001      	b.n	8010896 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010892:	2300      	movs	r3, #0
 8010894:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010896:	68fb      	ldr	r3, [r7, #12]
	}
 8010898:	4618      	mov	r0, r3
 801089a:	3714      	adds	r7, #20
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80108b0:	2300      	movs	r3, #0
 80108b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d10d      	bne.n	80108de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d14d      	bne.n	8010966 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	689b      	ldr	r3, [r3, #8]
 80108ce:	4618      	mov	r0, r3
 80108d0:	f001 f8c0 	bl	8011a54 <xTaskPriorityDisinherit>
 80108d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2200      	movs	r2, #0
 80108da:	609a      	str	r2, [r3, #8]
 80108dc:	e043      	b.n	8010966 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d119      	bne.n	8010918 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6858      	ldr	r0, [r3, #4]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108ec:	461a      	mov	r2, r3
 80108ee:	68b9      	ldr	r1, [r7, #8]
 80108f0:	f005 fb43 	bl	8015f7a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	685a      	ldr	r2, [r3, #4]
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108fc:	441a      	add	r2, r3
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	685a      	ldr	r2, [r3, #4]
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	689b      	ldr	r3, [r3, #8]
 801090a:	429a      	cmp	r2, r3
 801090c:	d32b      	bcc.n	8010966 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681a      	ldr	r2, [r3, #0]
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	605a      	str	r2, [r3, #4]
 8010916:	e026      	b.n	8010966 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	68d8      	ldr	r0, [r3, #12]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010920:	461a      	mov	r2, r3
 8010922:	68b9      	ldr	r1, [r7, #8]
 8010924:	f005 fb29 	bl	8015f7a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	68da      	ldr	r2, [r3, #12]
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010930:	425b      	negs	r3, r3
 8010932:	441a      	add	r2, r3
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	68da      	ldr	r2, [r3, #12]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	429a      	cmp	r2, r3
 8010942:	d207      	bcs.n	8010954 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	689a      	ldr	r2, [r3, #8]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801094c:	425b      	negs	r3, r3
 801094e:	441a      	add	r2, r3
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2b02      	cmp	r3, #2
 8010958:	d105      	bne.n	8010966 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	3b01      	subs	r3, #1
 8010964:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	1c5a      	adds	r2, r3, #1
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801096e:	697b      	ldr	r3, [r7, #20]
}
 8010970:	4618      	mov	r0, r3
 8010972:	3718      	adds	r7, #24
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010986:	2b00      	cmp	r3, #0
 8010988:	d018      	beq.n	80109bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	68da      	ldr	r2, [r3, #12]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010992:	441a      	add	r2, r3
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	68da      	ldr	r2, [r3, #12]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	689b      	ldr	r3, [r3, #8]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d303      	bcc.n	80109ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681a      	ldr	r2, [r3, #0]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	68d9      	ldr	r1, [r3, #12]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109b4:	461a      	mov	r2, r3
 80109b6:	6838      	ldr	r0, [r7, #0]
 80109b8:	f005 fadf 	bl	8015f7a <memcpy>
	}
}
 80109bc:	bf00      	nop
 80109be:	3708      	adds	r7, #8
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80109cc:	f001 fe2c 	bl	8012628 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80109d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109d8:	e011      	b.n	80109fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d012      	beq.n	8010a08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	3324      	adds	r3, #36	@ 0x24
 80109e6:	4618      	mov	r0, r3
 80109e8:	f000 fdbe 	bl	8011568 <xTaskRemoveFromEventList>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d001      	beq.n	80109f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80109f2:	f000 fe99 	bl	8011728 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80109f6:	7bfb      	ldrb	r3, [r7, #15]
 80109f8:	3b01      	subs	r3, #1
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	dce9      	bgt.n	80109da <prvUnlockQueue+0x16>
 8010a06:	e000      	b.n	8010a0a <prvUnlockQueue+0x46>
					break;
 8010a08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	22ff      	movs	r2, #255	@ 0xff
 8010a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010a12:	f001 fe3b 	bl	801268c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010a16:	f001 fe07 	bl	8012628 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010a20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a22:	e011      	b.n	8010a48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	691b      	ldr	r3, [r3, #16]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d012      	beq.n	8010a52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	3310      	adds	r3, #16
 8010a30:	4618      	mov	r0, r3
 8010a32:	f000 fd99 	bl	8011568 <xTaskRemoveFromEventList>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d001      	beq.n	8010a40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010a3c:	f000 fe74 	bl	8011728 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010a40:	7bbb      	ldrb	r3, [r7, #14]
 8010a42:	3b01      	subs	r3, #1
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	dce9      	bgt.n	8010a24 <prvUnlockQueue+0x60>
 8010a50:	e000      	b.n	8010a54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010a52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	22ff      	movs	r2, #255	@ 0xff
 8010a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010a5c:	f001 fe16 	bl	801268c <vPortExitCritical>
}
 8010a60:	bf00      	nop
 8010a62:	3710      	adds	r7, #16
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010a70:	f001 fdda 	bl	8012628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d102      	bne.n	8010a82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	60fb      	str	r3, [r7, #12]
 8010a80:	e001      	b.n	8010a86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010a82:	2300      	movs	r3, #0
 8010a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010a86:	f001 fe01 	bl	801268c <vPortExitCritical>

	return xReturn;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3710      	adds	r7, #16
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010a9c:	f001 fdc4 	bl	8012628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d102      	bne.n	8010ab2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010aac:	2301      	movs	r3, #1
 8010aae:	60fb      	str	r3, [r7, #12]
 8010ab0:	e001      	b.n	8010ab6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010ab6:	f001 fde9 	bl	801268c <vPortExitCritical>

	return xReturn;
 8010aba:	68fb      	ldr	r3, [r7, #12]
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3710      	adds	r7, #16
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ace:	2300      	movs	r3, #0
 8010ad0:	60fb      	str	r3, [r7, #12]
 8010ad2:	e014      	b.n	8010afe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8010b14 <vQueueAddToRegistry+0x50>)
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d10b      	bne.n	8010af8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010ae0:	490c      	ldr	r1, [pc, #48]	@ (8010b14 <vQueueAddToRegistry+0x50>)
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	683a      	ldr	r2, [r7, #0]
 8010ae6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010aea:	4a0a      	ldr	r2, [pc, #40]	@ (8010b14 <vQueueAddToRegistry+0x50>)
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	00db      	lsls	r3, r3, #3
 8010af0:	4413      	add	r3, r2
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010af6:	e006      	b.n	8010b06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	3301      	adds	r3, #1
 8010afc:	60fb      	str	r3, [r7, #12]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2b07      	cmp	r3, #7
 8010b02:	d9e7      	bls.n	8010ad4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010b04:	bf00      	nop
 8010b06:	bf00      	nop
 8010b08:	3714      	adds	r7, #20
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
 8010b12:	bf00      	nop
 8010b14:	2001a9f8 	.word	0x2001a9f8

08010b18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b20:	2300      	movs	r3, #0
 8010b22:	60fb      	str	r3, [r7, #12]
 8010b24:	e016      	b.n	8010b54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010b26:	4a10      	ldr	r2, [pc, #64]	@ (8010b68 <vQueueUnregisterQueue+0x50>)
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	00db      	lsls	r3, r3, #3
 8010b2c:	4413      	add	r3, r2
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d10b      	bne.n	8010b4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010b36:	4a0c      	ldr	r2, [pc, #48]	@ (8010b68 <vQueueUnregisterQueue+0x50>)
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2100      	movs	r1, #0
 8010b3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010b40:	4a09      	ldr	r2, [pc, #36]	@ (8010b68 <vQueueUnregisterQueue+0x50>)
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	00db      	lsls	r3, r3, #3
 8010b46:	4413      	add	r3, r2
 8010b48:	2200      	movs	r2, #0
 8010b4a:	605a      	str	r2, [r3, #4]
				break;
 8010b4c:	e006      	b.n	8010b5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	3301      	adds	r3, #1
 8010b52:	60fb      	str	r3, [r7, #12]
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2b07      	cmp	r3, #7
 8010b58:	d9e5      	bls.n	8010b26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010b5a:	bf00      	nop
 8010b5c:	bf00      	nop
 8010b5e:	3714      	adds	r7, #20
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr
 8010b68:	2001a9f8 	.word	0x2001a9f8

08010b6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b086      	sub	sp, #24
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010b7c:	f001 fd54 	bl	8012628 <vPortEnterCritical>
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010b86:	b25b      	sxtb	r3, r3
 8010b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010b8c:	d103      	bne.n	8010b96 <vQueueWaitForMessageRestricted+0x2a>
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010b9c:	b25b      	sxtb	r3, r3
 8010b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010ba2:	d103      	bne.n	8010bac <vQueueWaitForMessageRestricted+0x40>
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010bac:	f001 fd6e 	bl	801268c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d106      	bne.n	8010bc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	3324      	adds	r3, #36	@ 0x24
 8010bbc:	687a      	ldr	r2, [r7, #4]
 8010bbe:	68b9      	ldr	r1, [r7, #8]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f000 fca5 	bl	8011510 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010bc6:	6978      	ldr	r0, [r7, #20]
 8010bc8:	f7ff fefc 	bl	80109c4 <prvUnlockQueue>
	}
 8010bcc:	bf00      	nop
 8010bce:	3718      	adds	r7, #24
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b08e      	sub	sp, #56	@ 0x38
 8010bd8:	af04      	add	r7, sp, #16
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
 8010be0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d10b      	bne.n	8010c00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bec:	f383 8811 	msr	BASEPRI, r3
 8010bf0:	f3bf 8f6f 	isb	sy
 8010bf4:	f3bf 8f4f 	dsb	sy
 8010bf8:	623b      	str	r3, [r7, #32]
}
 8010bfa:	bf00      	nop
 8010bfc:	bf00      	nop
 8010bfe:	e7fd      	b.n	8010bfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d10b      	bne.n	8010c1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8010c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c0a:	f383 8811 	msr	BASEPRI, r3
 8010c0e:	f3bf 8f6f 	isb	sy
 8010c12:	f3bf 8f4f 	dsb	sy
 8010c16:	61fb      	str	r3, [r7, #28]
}
 8010c18:	bf00      	nop
 8010c1a:	bf00      	nop
 8010c1c:	e7fd      	b.n	8010c1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c1e:	23a8      	movs	r3, #168	@ 0xa8
 8010c20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c22:	693b      	ldr	r3, [r7, #16]
 8010c24:	2ba8      	cmp	r3, #168	@ 0xa8
 8010c26:	d00b      	beq.n	8010c40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c2c:	f383 8811 	msr	BASEPRI, r3
 8010c30:	f3bf 8f6f 	isb	sy
 8010c34:	f3bf 8f4f 	dsb	sy
 8010c38:	61bb      	str	r3, [r7, #24]
}
 8010c3a:	bf00      	nop
 8010c3c:	bf00      	nop
 8010c3e:	e7fd      	b.n	8010c3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010c40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d01e      	beq.n	8010c86 <xTaskCreateStatic+0xb2>
 8010c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d01b      	beq.n	8010c86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c5a:	2202      	movs	r2, #2
 8010c5c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010c60:	2300      	movs	r3, #0
 8010c62:	9303      	str	r3, [sp, #12]
 8010c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c66:	9302      	str	r3, [sp, #8]
 8010c68:	f107 0314 	add.w	r3, r7, #20
 8010c6c:	9301      	str	r3, [sp, #4]
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c70:	9300      	str	r3, [sp, #0]
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	68b9      	ldr	r1, [r7, #8]
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f000 f851 	bl	8010d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010c7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010c80:	f000 f8f6 	bl	8010e70 <prvAddNewTaskToReadyList>
 8010c84:	e001      	b.n	8010c8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010c86:	2300      	movs	r3, #0
 8010c88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010c8a:	697b      	ldr	r3, [r7, #20]
	}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3728      	adds	r7, #40	@ 0x28
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b08c      	sub	sp, #48	@ 0x30
 8010c98:	af04      	add	r7, sp, #16
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	60b9      	str	r1, [r7, #8]
 8010c9e:	603b      	str	r3, [r7, #0]
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010ca4:	88fb      	ldrh	r3, [r7, #6]
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f001 fddf 	bl	801286c <pvPortMalloc>
 8010cae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00e      	beq.n	8010cd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010cb6:	20a8      	movs	r0, #168	@ 0xa8
 8010cb8:	f001 fdd8 	bl	801286c <pvPortMalloc>
 8010cbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d003      	beq.n	8010ccc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	697a      	ldr	r2, [r7, #20]
 8010cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8010cca:	e005      	b.n	8010cd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010ccc:	6978      	ldr	r0, [r7, #20]
 8010cce:	f001 fe9b 	bl	8012a08 <vPortFree>
 8010cd2:	e001      	b.n	8010cd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d017      	beq.n	8010d0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010ce6:	88fa      	ldrh	r2, [r7, #6]
 8010ce8:	2300      	movs	r3, #0
 8010cea:	9303      	str	r3, [sp, #12]
 8010cec:	69fb      	ldr	r3, [r7, #28]
 8010cee:	9302      	str	r3, [sp, #8]
 8010cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cf2:	9301      	str	r3, [sp, #4]
 8010cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cf6:	9300      	str	r3, [sp, #0]
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	68b9      	ldr	r1, [r7, #8]
 8010cfc:	68f8      	ldr	r0, [r7, #12]
 8010cfe:	f000 f80f 	bl	8010d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d02:	69f8      	ldr	r0, [r7, #28]
 8010d04:	f000 f8b4 	bl	8010e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d08:	2301      	movs	r3, #1
 8010d0a:	61bb      	str	r3, [r7, #24]
 8010d0c:	e002      	b.n	8010d14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010d12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d14:	69bb      	ldr	r3, [r7, #24]
	}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3720      	adds	r7, #32
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
	...

08010d20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b088      	sub	sp, #32
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	607a      	str	r2, [r7, #4]
 8010d2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	461a      	mov	r2, r3
 8010d38:	21a5      	movs	r1, #165	@ 0xa5
 8010d3a:	f005 f849 	bl	8015dd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	4413      	add	r3, r2
 8010d4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010d50:	69bb      	ldr	r3, [r7, #24]
 8010d52:	f023 0307 	bic.w	r3, r3, #7
 8010d56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	f003 0307 	and.w	r3, r3, #7
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d00b      	beq.n	8010d7a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d66:	f383 8811 	msr	BASEPRI, r3
 8010d6a:	f3bf 8f6f 	isb	sy
 8010d6e:	f3bf 8f4f 	dsb	sy
 8010d72:	617b      	str	r3, [r7, #20]
}
 8010d74:	bf00      	nop
 8010d76:	bf00      	nop
 8010d78:	e7fd      	b.n	8010d76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d01f      	beq.n	8010dc0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010d80:	2300      	movs	r3, #0
 8010d82:	61fb      	str	r3, [r7, #28]
 8010d84:	e012      	b.n	8010dac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010d86:	68ba      	ldr	r2, [r7, #8]
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	4413      	add	r3, r2
 8010d8c:	7819      	ldrb	r1, [r3, #0]
 8010d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	4413      	add	r3, r2
 8010d94:	3334      	adds	r3, #52	@ 0x34
 8010d96:	460a      	mov	r2, r1
 8010d98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010d9a:	68ba      	ldr	r2, [r7, #8]
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	4413      	add	r3, r2
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d006      	beq.n	8010db4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010da6:	69fb      	ldr	r3, [r7, #28]
 8010da8:	3301      	adds	r3, #1
 8010daa:	61fb      	str	r3, [r7, #28]
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	2b0f      	cmp	r3, #15
 8010db0:	d9e9      	bls.n	8010d86 <prvInitialiseNewTask+0x66>
 8010db2:	e000      	b.n	8010db6 <prvInitialiseNewTask+0x96>
			{
				break;
 8010db4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010db8:	2200      	movs	r2, #0
 8010dba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010dbe:	e003      	b.n	8010dc8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dca:	2b37      	cmp	r3, #55	@ 0x37
 8010dcc:	d901      	bls.n	8010dd2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010dce:	2337      	movs	r3, #55	@ 0x37
 8010dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ddc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010de0:	2200      	movs	r2, #0
 8010de2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010de6:	3304      	adds	r3, #4
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7fe fde7 	bl	800f9bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df0:	3318      	adds	r3, #24
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7fe fde2 	bl	800f9bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010dfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e10:	2200      	movs	r2, #0
 8010e12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e20:	3354      	adds	r3, #84	@ 0x54
 8010e22:	224c      	movs	r2, #76	@ 0x4c
 8010e24:	2100      	movs	r1, #0
 8010e26:	4618      	mov	r0, r3
 8010e28:	f004 ffd2 	bl	8015dd0 <memset>
 8010e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8010e64 <prvInitialiseNewTask+0x144>)
 8010e30:	659a      	str	r2, [r3, #88]	@ 0x58
 8010e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e34:	4a0c      	ldr	r2, [pc, #48]	@ (8010e68 <prvInitialiseNewTask+0x148>)
 8010e36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8010e6c <prvInitialiseNewTask+0x14c>)
 8010e3c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e3e:	683a      	ldr	r2, [r7, #0]
 8010e40:	68f9      	ldr	r1, [r7, #12]
 8010e42:	69b8      	ldr	r0, [r7, #24]
 8010e44:	f001 fabc 	bl	80123c0 <pxPortInitialiseStack>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d002      	beq.n	8010e5a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e5a:	bf00      	nop
 8010e5c:	3720      	adds	r7, #32
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	20024a80 	.word	0x20024a80
 8010e68:	20024ae8 	.word	0x20024ae8
 8010e6c:	20024b50 	.word	0x20024b50

08010e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010e78:	f001 fbd6 	bl	8012628 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8010f34 <prvAddNewTaskToReadyList+0xc4>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	3301      	adds	r3, #1
 8010e82:	4a2c      	ldr	r2, [pc, #176]	@ (8010f34 <prvAddNewTaskToReadyList+0xc4>)
 8010e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010e86:	4b2c      	ldr	r3, [pc, #176]	@ (8010f38 <prvAddNewTaskToReadyList+0xc8>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d109      	bne.n	8010ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8010f38 <prvAddNewTaskToReadyList+0xc8>)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010e94:	4b27      	ldr	r3, [pc, #156]	@ (8010f34 <prvAddNewTaskToReadyList+0xc4>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d110      	bne.n	8010ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010e9c:	f000 fc90 	bl	80117c0 <prvInitialiseTaskLists>
 8010ea0:	e00d      	b.n	8010ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ea2:	4b26      	ldr	r3, [pc, #152]	@ (8010f3c <prvAddNewTaskToReadyList+0xcc>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d109      	bne.n	8010ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010eaa:	4b23      	ldr	r3, [pc, #140]	@ (8010f38 <prvAddNewTaskToReadyList+0xc8>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d802      	bhi.n	8010ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8010f38 <prvAddNewTaskToReadyList+0xc8>)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010ebe:	4b20      	ldr	r3, [pc, #128]	@ (8010f40 <prvAddNewTaskToReadyList+0xd0>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8010f40 <prvAddNewTaskToReadyList+0xd0>)
 8010ec6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8010f40 <prvAddNewTaskToReadyList+0xd0>)
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8010f44 <prvAddNewTaskToReadyList+0xd4>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d903      	bls.n	8010ee4 <prvAddNewTaskToReadyList+0x74>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ee0:	4a18      	ldr	r2, [pc, #96]	@ (8010f44 <prvAddNewTaskToReadyList+0xd4>)
 8010ee2:	6013      	str	r3, [r2, #0]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ee8:	4613      	mov	r3, r2
 8010eea:	009b      	lsls	r3, r3, #2
 8010eec:	4413      	add	r3, r2
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	4a15      	ldr	r2, [pc, #84]	@ (8010f48 <prvAddNewTaskToReadyList+0xd8>)
 8010ef2:	441a      	add	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	3304      	adds	r3, #4
 8010ef8:	4619      	mov	r1, r3
 8010efa:	4610      	mov	r0, r2
 8010efc:	f7fe fd6b 	bl	800f9d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f00:	f001 fbc4 	bl	801268c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f04:	4b0d      	ldr	r3, [pc, #52]	@ (8010f3c <prvAddNewTaskToReadyList+0xcc>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d00e      	beq.n	8010f2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f38 <prvAddNewTaskToReadyList+0xc8>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d207      	bcs.n	8010f2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010f4c <prvAddNewTaskToReadyList+0xdc>)
 8010f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f20:	601a      	str	r2, [r3, #0]
 8010f22:	f3bf 8f4f 	dsb	sy
 8010f26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f2a:	bf00      	nop
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	2001af0c 	.word	0x2001af0c
 8010f38:	2001aa38 	.word	0x2001aa38
 8010f3c:	2001af18 	.word	0x2001af18
 8010f40:	2001af28 	.word	0x2001af28
 8010f44:	2001af14 	.word	0x2001af14
 8010f48:	2001aa3c 	.word	0x2001aa3c
 8010f4c:	e000ed04 	.word	0xe000ed04

08010f50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b084      	sub	sp, #16
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d018      	beq.n	8010f94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010f62:	4b14      	ldr	r3, [pc, #80]	@ (8010fb4 <vTaskDelay+0x64>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00b      	beq.n	8010f82 <vTaskDelay+0x32>
	__asm volatile
 8010f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f6e:	f383 8811 	msr	BASEPRI, r3
 8010f72:	f3bf 8f6f 	isb	sy
 8010f76:	f3bf 8f4f 	dsb	sy
 8010f7a:	60bb      	str	r3, [r7, #8]
}
 8010f7c:	bf00      	nop
 8010f7e:	bf00      	nop
 8010f80:	e7fd      	b.n	8010f7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010f82:	f000 f88b 	bl	801109c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010f86:	2100      	movs	r1, #0
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 fe6b 	bl	8011c64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010f8e:	f000 f8cb 	bl	8011128 <xTaskResumeAll>
 8010f92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d107      	bne.n	8010faa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010f9a:	4b07      	ldr	r3, [pc, #28]	@ (8010fb8 <vTaskDelay+0x68>)
 8010f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010fa0:	601a      	str	r2, [r3, #0]
 8010fa2:	f3bf 8f4f 	dsb	sy
 8010fa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010faa:	bf00      	nop
 8010fac:	3710      	adds	r7, #16
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	2001af34 	.word	0x2001af34
 8010fb8:	e000ed04 	.word	0xe000ed04

08010fbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b08a      	sub	sp, #40	@ 0x28
 8010fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010fca:	463a      	mov	r2, r7
 8010fcc:	1d39      	adds	r1, r7, #4
 8010fce:	f107 0308 	add.w	r3, r7, #8
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fe fc9e 	bl	800f914 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010fd8:	6839      	ldr	r1, [r7, #0]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	68ba      	ldr	r2, [r7, #8]
 8010fde:	9202      	str	r2, [sp, #8]
 8010fe0:	9301      	str	r3, [sp, #4]
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	460a      	mov	r2, r1
 8010fea:	4924      	ldr	r1, [pc, #144]	@ (801107c <vTaskStartScheduler+0xc0>)
 8010fec:	4824      	ldr	r0, [pc, #144]	@ (8011080 <vTaskStartScheduler+0xc4>)
 8010fee:	f7ff fdf1 	bl	8010bd4 <xTaskCreateStatic>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	4a23      	ldr	r2, [pc, #140]	@ (8011084 <vTaskStartScheduler+0xc8>)
 8010ff6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ff8:	4b22      	ldr	r3, [pc, #136]	@ (8011084 <vTaskStartScheduler+0xc8>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d002      	beq.n	8011006 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011000:	2301      	movs	r3, #1
 8011002:	617b      	str	r3, [r7, #20]
 8011004:	e001      	b.n	801100a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011006:	2300      	movs	r3, #0
 8011008:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	2b01      	cmp	r3, #1
 801100e:	d102      	bne.n	8011016 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011010:	f000 fe7c 	bl	8011d0c <xTimerCreateTimerTask>
 8011014:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	2b01      	cmp	r3, #1
 801101a:	d11b      	bne.n	8011054 <vTaskStartScheduler+0x98>
	__asm volatile
 801101c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011020:	f383 8811 	msr	BASEPRI, r3
 8011024:	f3bf 8f6f 	isb	sy
 8011028:	f3bf 8f4f 	dsb	sy
 801102c:	613b      	str	r3, [r7, #16]
}
 801102e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011030:	4b15      	ldr	r3, [pc, #84]	@ (8011088 <vTaskStartScheduler+0xcc>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	3354      	adds	r3, #84	@ 0x54
 8011036:	4a15      	ldr	r2, [pc, #84]	@ (801108c <vTaskStartScheduler+0xd0>)
 8011038:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801103a:	4b15      	ldr	r3, [pc, #84]	@ (8011090 <vTaskStartScheduler+0xd4>)
 801103c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011040:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011042:	4b14      	ldr	r3, [pc, #80]	@ (8011094 <vTaskStartScheduler+0xd8>)
 8011044:	2201      	movs	r2, #1
 8011046:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011048:	4b13      	ldr	r3, [pc, #76]	@ (8011098 <vTaskStartScheduler+0xdc>)
 801104a:	2200      	movs	r2, #0
 801104c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801104e:	f001 fa47 	bl	80124e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011052:	e00f      	b.n	8011074 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801105a:	d10b      	bne.n	8011074 <vTaskStartScheduler+0xb8>
	__asm volatile
 801105c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011060:	f383 8811 	msr	BASEPRI, r3
 8011064:	f3bf 8f6f 	isb	sy
 8011068:	f3bf 8f4f 	dsb	sy
 801106c:	60fb      	str	r3, [r7, #12]
}
 801106e:	bf00      	nop
 8011070:	bf00      	nop
 8011072:	e7fd      	b.n	8011070 <vTaskStartScheduler+0xb4>
}
 8011074:	bf00      	nop
 8011076:	3718      	adds	r7, #24
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	0801bdf4 	.word	0x0801bdf4
 8011080:	08011741 	.word	0x08011741
 8011084:	2001af30 	.word	0x2001af30
 8011088:	2001aa38 	.word	0x2001aa38
 801108c:	20000140 	.word	0x20000140
 8011090:	2001af2c 	.word	0x2001af2c
 8011094:	2001af18 	.word	0x2001af18
 8011098:	2001af10 	.word	0x2001af10

0801109c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801109c:	b480      	push	{r7}
 801109e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80110a0:	4b04      	ldr	r3, [pc, #16]	@ (80110b4 <vTaskSuspendAll+0x18>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	3301      	adds	r3, #1
 80110a6:	4a03      	ldr	r2, [pc, #12]	@ (80110b4 <vTaskSuspendAll+0x18>)
 80110a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80110aa:	bf00      	nop
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr
 80110b4:	2001af34 	.word	0x2001af34

080110b8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80110b8:	b480      	push	{r7}
 80110ba:	b083      	sub	sp, #12
 80110bc:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80110be:	2300      	movs	r3, #0
 80110c0:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80110c2:	4b14      	ldr	r3, [pc, #80]	@ (8011114 <prvGetExpectedIdleTime+0x5c>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d001      	beq.n	80110ce <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80110ca:	2301      	movs	r3, #1
 80110cc:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80110ce:	4b12      	ldr	r3, [pc, #72]	@ (8011118 <prvGetExpectedIdleTime+0x60>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 80110d8:	2300      	movs	r3, #0
 80110da:	607b      	str	r3, [r7, #4]
 80110dc:	e012      	b.n	8011104 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80110de:	4b0f      	ldr	r3, [pc, #60]	@ (801111c <prvGetExpectedIdleTime+0x64>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	2b01      	cmp	r3, #1
 80110e4:	d902      	bls.n	80110ec <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80110e6:	2300      	movs	r3, #0
 80110e8:	607b      	str	r3, [r7, #4]
 80110ea:	e00b      	b.n	8011104 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d002      	beq.n	80110f8 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80110f2:	2300      	movs	r3, #0
 80110f4:	607b      	str	r3, [r7, #4]
 80110f6:	e005      	b.n	8011104 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80110f8:	4b09      	ldr	r3, [pc, #36]	@ (8011120 <prvGetExpectedIdleTime+0x68>)
 80110fa:	681a      	ldr	r2, [r3, #0]
 80110fc:	4b09      	ldr	r3, [pc, #36]	@ (8011124 <prvGetExpectedIdleTime+0x6c>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8011104:	687b      	ldr	r3, [r7, #4]
	}
 8011106:	4618      	mov	r0, r3
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop
 8011114:	2001af14 	.word	0x2001af14
 8011118:	2001aa38 	.word	0x2001aa38
 801111c:	2001aa3c 	.word	0x2001aa3c
 8011120:	2001af2c 	.word	0x2001af2c
 8011124:	2001af10 	.word	0x2001af10

08011128 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801112e:	2300      	movs	r3, #0
 8011130:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011132:	2300      	movs	r3, #0
 8011134:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011136:	4b42      	ldr	r3, [pc, #264]	@ (8011240 <xTaskResumeAll+0x118>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d10b      	bne.n	8011156 <xTaskResumeAll+0x2e>
	__asm volatile
 801113e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	603b      	str	r3, [r7, #0]
}
 8011150:	bf00      	nop
 8011152:	bf00      	nop
 8011154:	e7fd      	b.n	8011152 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011156:	f001 fa67 	bl	8012628 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801115a:	4b39      	ldr	r3, [pc, #228]	@ (8011240 <xTaskResumeAll+0x118>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	3b01      	subs	r3, #1
 8011160:	4a37      	ldr	r2, [pc, #220]	@ (8011240 <xTaskResumeAll+0x118>)
 8011162:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011164:	4b36      	ldr	r3, [pc, #216]	@ (8011240 <xTaskResumeAll+0x118>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d162      	bne.n	8011232 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801116c:	4b35      	ldr	r3, [pc, #212]	@ (8011244 <xTaskResumeAll+0x11c>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d05e      	beq.n	8011232 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011174:	e02f      	b.n	80111d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011176:	4b34      	ldr	r3, [pc, #208]	@ (8011248 <xTaskResumeAll+0x120>)
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	68db      	ldr	r3, [r3, #12]
 801117c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	3318      	adds	r3, #24
 8011182:	4618      	mov	r0, r3
 8011184:	f7fe fc84 	bl	800fa90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	3304      	adds	r3, #4
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe fc7f 	bl	800fa90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011196:	4b2d      	ldr	r3, [pc, #180]	@ (801124c <xTaskResumeAll+0x124>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	429a      	cmp	r2, r3
 801119c:	d903      	bls.n	80111a6 <xTaskResumeAll+0x7e>
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111a2:	4a2a      	ldr	r2, [pc, #168]	@ (801124c <xTaskResumeAll+0x124>)
 80111a4:	6013      	str	r3, [r2, #0]
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111aa:	4613      	mov	r3, r2
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4413      	add	r3, r2
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	4a27      	ldr	r2, [pc, #156]	@ (8011250 <xTaskResumeAll+0x128>)
 80111b4:	441a      	add	r2, r3
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	3304      	adds	r3, #4
 80111ba:	4619      	mov	r1, r3
 80111bc:	4610      	mov	r0, r2
 80111be:	f7fe fc0a 	bl	800f9d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111c6:	4b23      	ldr	r3, [pc, #140]	@ (8011254 <xTaskResumeAll+0x12c>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d302      	bcc.n	80111d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80111d0:	4b21      	ldr	r3, [pc, #132]	@ (8011258 <xTaskResumeAll+0x130>)
 80111d2:	2201      	movs	r2, #1
 80111d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111d6:	4b1c      	ldr	r3, [pc, #112]	@ (8011248 <xTaskResumeAll+0x120>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d1cb      	bne.n	8011176 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d001      	beq.n	80111e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111e4:	f000 fb90 	bl	8011908 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80111e8:	4b1c      	ldr	r3, [pc, #112]	@ (801125c <xTaskResumeAll+0x134>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d010      	beq.n	8011216 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111f4:	f000 f846 	bl	8011284 <xTaskIncrementTick>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d002      	beq.n	8011204 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80111fe:	4b16      	ldr	r3, [pc, #88]	@ (8011258 <xTaskResumeAll+0x130>)
 8011200:	2201      	movs	r2, #1
 8011202:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	3b01      	subs	r3, #1
 8011208:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d1f1      	bne.n	80111f4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8011210:	4b12      	ldr	r3, [pc, #72]	@ (801125c <xTaskResumeAll+0x134>)
 8011212:	2200      	movs	r2, #0
 8011214:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011216:	4b10      	ldr	r3, [pc, #64]	@ (8011258 <xTaskResumeAll+0x130>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d009      	beq.n	8011232 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801121e:	2301      	movs	r3, #1
 8011220:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011222:	4b0f      	ldr	r3, [pc, #60]	@ (8011260 <xTaskResumeAll+0x138>)
 8011224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011228:	601a      	str	r2, [r3, #0]
 801122a:	f3bf 8f4f 	dsb	sy
 801122e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011232:	f001 fa2b 	bl	801268c <vPortExitCritical>

	return xAlreadyYielded;
 8011236:	68bb      	ldr	r3, [r7, #8]
}
 8011238:	4618      	mov	r0, r3
 801123a:	3710      	adds	r7, #16
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	2001af34 	.word	0x2001af34
 8011244:	2001af0c 	.word	0x2001af0c
 8011248:	2001aecc 	.word	0x2001aecc
 801124c:	2001af14 	.word	0x2001af14
 8011250:	2001aa3c 	.word	0x2001aa3c
 8011254:	2001aa38 	.word	0x2001aa38
 8011258:	2001af20 	.word	0x2001af20
 801125c:	2001af1c 	.word	0x2001af1c
 8011260:	e000ed04 	.word	0xe000ed04

08011264 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801126a:	4b05      	ldr	r3, [pc, #20]	@ (8011280 <xTaskGetTickCount+0x1c>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011270:	687b      	ldr	r3, [r7, #4]
}
 8011272:	4618      	mov	r0, r3
 8011274:	370c      	adds	r7, #12
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop
 8011280:	2001af10 	.word	0x2001af10

08011284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b086      	sub	sp, #24
 8011288:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801128a:	2300      	movs	r3, #0
 801128c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801128e:	4b4f      	ldr	r3, [pc, #316]	@ (80113cc <xTaskIncrementTick+0x148>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	f040 8090 	bne.w	80113b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011298:	4b4d      	ldr	r3, [pc, #308]	@ (80113d0 <xTaskIncrementTick+0x14c>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	3301      	adds	r3, #1
 801129e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80112a0:	4a4b      	ldr	r2, [pc, #300]	@ (80113d0 <xTaskIncrementTick+0x14c>)
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d121      	bne.n	80112f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80112ac:	4b49      	ldr	r3, [pc, #292]	@ (80113d4 <xTaskIncrementTick+0x150>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d00b      	beq.n	80112ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80112b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112ba:	f383 8811 	msr	BASEPRI, r3
 80112be:	f3bf 8f6f 	isb	sy
 80112c2:	f3bf 8f4f 	dsb	sy
 80112c6:	603b      	str	r3, [r7, #0]
}
 80112c8:	bf00      	nop
 80112ca:	bf00      	nop
 80112cc:	e7fd      	b.n	80112ca <xTaskIncrementTick+0x46>
 80112ce:	4b41      	ldr	r3, [pc, #260]	@ (80113d4 <xTaskIncrementTick+0x150>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	60fb      	str	r3, [r7, #12]
 80112d4:	4b40      	ldr	r3, [pc, #256]	@ (80113d8 <xTaskIncrementTick+0x154>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a3e      	ldr	r2, [pc, #248]	@ (80113d4 <xTaskIncrementTick+0x150>)
 80112da:	6013      	str	r3, [r2, #0]
 80112dc:	4a3e      	ldr	r2, [pc, #248]	@ (80113d8 <xTaskIncrementTick+0x154>)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6013      	str	r3, [r2, #0]
 80112e2:	4b3e      	ldr	r3, [pc, #248]	@ (80113dc <xTaskIncrementTick+0x158>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	3301      	adds	r3, #1
 80112e8:	4a3c      	ldr	r2, [pc, #240]	@ (80113dc <xTaskIncrementTick+0x158>)
 80112ea:	6013      	str	r3, [r2, #0]
 80112ec:	f000 fb0c 	bl	8011908 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112f0:	4b3b      	ldr	r3, [pc, #236]	@ (80113e0 <xTaskIncrementTick+0x15c>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	693a      	ldr	r2, [r7, #16]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d349      	bcc.n	801138e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112fa:	4b36      	ldr	r3, [pc, #216]	@ (80113d4 <xTaskIncrementTick+0x150>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d104      	bne.n	801130e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011304:	4b36      	ldr	r3, [pc, #216]	@ (80113e0 <xTaskIncrementTick+0x15c>)
 8011306:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801130a:	601a      	str	r2, [r3, #0]
					break;
 801130c:	e03f      	b.n	801138e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801130e:	4b31      	ldr	r3, [pc, #196]	@ (80113d4 <xTaskIncrementTick+0x150>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801131e:	693a      	ldr	r2, [r7, #16]
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	429a      	cmp	r2, r3
 8011324:	d203      	bcs.n	801132e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011326:	4a2e      	ldr	r2, [pc, #184]	@ (80113e0 <xTaskIncrementTick+0x15c>)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801132c:	e02f      	b.n	801138e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	3304      	adds	r3, #4
 8011332:	4618      	mov	r0, r3
 8011334:	f7fe fbac 	bl	800fa90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801133c:	2b00      	cmp	r3, #0
 801133e:	d004      	beq.n	801134a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	3318      	adds	r3, #24
 8011344:	4618      	mov	r0, r3
 8011346:	f7fe fba3 	bl	800fa90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801134e:	4b25      	ldr	r3, [pc, #148]	@ (80113e4 <xTaskIncrementTick+0x160>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	429a      	cmp	r2, r3
 8011354:	d903      	bls.n	801135e <xTaskIncrementTick+0xda>
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801135a:	4a22      	ldr	r2, [pc, #136]	@ (80113e4 <xTaskIncrementTick+0x160>)
 801135c:	6013      	str	r3, [r2, #0]
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011362:	4613      	mov	r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	4413      	add	r3, r2
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4a1f      	ldr	r2, [pc, #124]	@ (80113e8 <xTaskIncrementTick+0x164>)
 801136c:	441a      	add	r2, r3
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	3304      	adds	r3, #4
 8011372:	4619      	mov	r1, r3
 8011374:	4610      	mov	r0, r2
 8011376:	f7fe fb2e 	bl	800f9d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801137e:	4b1b      	ldr	r3, [pc, #108]	@ (80113ec <xTaskIncrementTick+0x168>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011384:	429a      	cmp	r2, r3
 8011386:	d3b8      	bcc.n	80112fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011388:	2301      	movs	r3, #1
 801138a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801138c:	e7b5      	b.n	80112fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801138e:	4b17      	ldr	r3, [pc, #92]	@ (80113ec <xTaskIncrementTick+0x168>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011394:	4914      	ldr	r1, [pc, #80]	@ (80113e8 <xTaskIncrementTick+0x164>)
 8011396:	4613      	mov	r3, r2
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	4413      	add	r3, r2
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	440b      	add	r3, r1
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d901      	bls.n	80113aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80113a6:	2301      	movs	r3, #1
 80113a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80113aa:	4b11      	ldr	r3, [pc, #68]	@ (80113f0 <xTaskIncrementTick+0x16c>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d007      	beq.n	80113c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80113b2:	2301      	movs	r3, #1
 80113b4:	617b      	str	r3, [r7, #20]
 80113b6:	e004      	b.n	80113c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80113b8:	4b0e      	ldr	r3, [pc, #56]	@ (80113f4 <xTaskIncrementTick+0x170>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	3301      	adds	r3, #1
 80113be:	4a0d      	ldr	r2, [pc, #52]	@ (80113f4 <xTaskIncrementTick+0x170>)
 80113c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80113c2:	697b      	ldr	r3, [r7, #20]
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3718      	adds	r7, #24
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	2001af34 	.word	0x2001af34
 80113d0:	2001af10 	.word	0x2001af10
 80113d4:	2001aec4 	.word	0x2001aec4
 80113d8:	2001aec8 	.word	0x2001aec8
 80113dc:	2001af24 	.word	0x2001af24
 80113e0:	2001af2c 	.word	0x2001af2c
 80113e4:	2001af14 	.word	0x2001af14
 80113e8:	2001aa3c 	.word	0x2001aa3c
 80113ec:	2001aa38 	.word	0x2001aa38
 80113f0:	2001af20 	.word	0x2001af20
 80113f4:	2001af1c 	.word	0x2001af1c

080113f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113f8:	b480      	push	{r7}
 80113fa:	b085      	sub	sp, #20
 80113fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113fe:	4b2b      	ldr	r3, [pc, #172]	@ (80114ac <vTaskSwitchContext+0xb4>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d003      	beq.n	801140e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011406:	4b2a      	ldr	r3, [pc, #168]	@ (80114b0 <vTaskSwitchContext+0xb8>)
 8011408:	2201      	movs	r2, #1
 801140a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801140c:	e047      	b.n	801149e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801140e:	4b28      	ldr	r3, [pc, #160]	@ (80114b0 <vTaskSwitchContext+0xb8>)
 8011410:	2200      	movs	r2, #0
 8011412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011414:	4b27      	ldr	r3, [pc, #156]	@ (80114b4 <vTaskSwitchContext+0xbc>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	60fb      	str	r3, [r7, #12]
 801141a:	e011      	b.n	8011440 <vTaskSwitchContext+0x48>
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d10b      	bne.n	801143a <vTaskSwitchContext+0x42>
	__asm volatile
 8011422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011426:	f383 8811 	msr	BASEPRI, r3
 801142a:	f3bf 8f6f 	isb	sy
 801142e:	f3bf 8f4f 	dsb	sy
 8011432:	607b      	str	r3, [r7, #4]
}
 8011434:	bf00      	nop
 8011436:	bf00      	nop
 8011438:	e7fd      	b.n	8011436 <vTaskSwitchContext+0x3e>
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	3b01      	subs	r3, #1
 801143e:	60fb      	str	r3, [r7, #12]
 8011440:	491d      	ldr	r1, [pc, #116]	@ (80114b8 <vTaskSwitchContext+0xc0>)
 8011442:	68fa      	ldr	r2, [r7, #12]
 8011444:	4613      	mov	r3, r2
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	4413      	add	r3, r2
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	440b      	add	r3, r1
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d0e3      	beq.n	801141c <vTaskSwitchContext+0x24>
 8011454:	68fa      	ldr	r2, [r7, #12]
 8011456:	4613      	mov	r3, r2
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	4413      	add	r3, r2
 801145c:	009b      	lsls	r3, r3, #2
 801145e:	4a16      	ldr	r2, [pc, #88]	@ (80114b8 <vTaskSwitchContext+0xc0>)
 8011460:	4413      	add	r3, r2
 8011462:	60bb      	str	r3, [r7, #8]
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	685a      	ldr	r2, [r3, #4]
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	605a      	str	r2, [r3, #4]
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	685a      	ldr	r2, [r3, #4]
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	3308      	adds	r3, #8
 8011476:	429a      	cmp	r2, r3
 8011478:	d104      	bne.n	8011484 <vTaskSwitchContext+0x8c>
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	685a      	ldr	r2, [r3, #4]
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	605a      	str	r2, [r3, #4]
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	68db      	ldr	r3, [r3, #12]
 801148a:	4a0c      	ldr	r2, [pc, #48]	@ (80114bc <vTaskSwitchContext+0xc4>)
 801148c:	6013      	str	r3, [r2, #0]
 801148e:	4a09      	ldr	r2, [pc, #36]	@ (80114b4 <vTaskSwitchContext+0xbc>)
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011494:	4b09      	ldr	r3, [pc, #36]	@ (80114bc <vTaskSwitchContext+0xc4>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	3354      	adds	r3, #84	@ 0x54
 801149a:	4a09      	ldr	r2, [pc, #36]	@ (80114c0 <vTaskSwitchContext+0xc8>)
 801149c:	6013      	str	r3, [r2, #0]
}
 801149e:	bf00      	nop
 80114a0:	3714      	adds	r7, #20
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	2001af34 	.word	0x2001af34
 80114b0:	2001af20 	.word	0x2001af20
 80114b4:	2001af14 	.word	0x2001af14
 80114b8:	2001aa3c 	.word	0x2001aa3c
 80114bc:	2001aa38 	.word	0x2001aa38
 80114c0:	20000140 	.word	0x20000140

080114c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d10b      	bne.n	80114ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80114d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114d8:	f383 8811 	msr	BASEPRI, r3
 80114dc:	f3bf 8f6f 	isb	sy
 80114e0:	f3bf 8f4f 	dsb	sy
 80114e4:	60fb      	str	r3, [r7, #12]
}
 80114e6:	bf00      	nop
 80114e8:	bf00      	nop
 80114ea:	e7fd      	b.n	80114e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114ec:	4b07      	ldr	r3, [pc, #28]	@ (801150c <vTaskPlaceOnEventList+0x48>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	3318      	adds	r3, #24
 80114f2:	4619      	mov	r1, r3
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f7fe fa92 	bl	800fa1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114fa:	2101      	movs	r1, #1
 80114fc:	6838      	ldr	r0, [r7, #0]
 80114fe:	f000 fbb1 	bl	8011c64 <prvAddCurrentTaskToDelayedList>
}
 8011502:	bf00      	nop
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	2001aa38 	.word	0x2001aa38

08011510 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011510:	b580      	push	{r7, lr}
 8011512:	b086      	sub	sp, #24
 8011514:	af00      	add	r7, sp, #0
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d10b      	bne.n	801153a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8011522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011526:	f383 8811 	msr	BASEPRI, r3
 801152a:	f3bf 8f6f 	isb	sy
 801152e:	f3bf 8f4f 	dsb	sy
 8011532:	617b      	str	r3, [r7, #20]
}
 8011534:	bf00      	nop
 8011536:	bf00      	nop
 8011538:	e7fd      	b.n	8011536 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801153a:	4b0a      	ldr	r3, [pc, #40]	@ (8011564 <vTaskPlaceOnEventListRestricted+0x54>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	3318      	adds	r3, #24
 8011540:	4619      	mov	r1, r3
 8011542:	68f8      	ldr	r0, [r7, #12]
 8011544:	f7fe fa47 	bl	800f9d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d002      	beq.n	8011554 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801154e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011552:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011554:	6879      	ldr	r1, [r7, #4]
 8011556:	68b8      	ldr	r0, [r7, #8]
 8011558:	f000 fb84 	bl	8011c64 <prvAddCurrentTaskToDelayedList>
	}
 801155c:	bf00      	nop
 801155e:	3718      	adds	r7, #24
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}
 8011564:	2001aa38 	.word	0x2001aa38

08011568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b086      	sub	sp, #24
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d10b      	bne.n	8011596 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801157e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011582:	f383 8811 	msr	BASEPRI, r3
 8011586:	f3bf 8f6f 	isb	sy
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	60fb      	str	r3, [r7, #12]
}
 8011590:	bf00      	nop
 8011592:	bf00      	nop
 8011594:	e7fd      	b.n	8011592 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	3318      	adds	r3, #24
 801159a:	4618      	mov	r0, r3
 801159c:	f7fe fa78 	bl	800fa90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115a0:	4b1e      	ldr	r3, [pc, #120]	@ (801161c <xTaskRemoveFromEventList+0xb4>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d11f      	bne.n	80115e8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	3304      	adds	r3, #4
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7fe fa6f 	bl	800fa90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115b6:	4b1a      	ldr	r3, [pc, #104]	@ (8011620 <xTaskRemoveFromEventList+0xb8>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d903      	bls.n	80115c6 <xTaskRemoveFromEventList+0x5e>
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115c2:	4a17      	ldr	r2, [pc, #92]	@ (8011620 <xTaskRemoveFromEventList+0xb8>)
 80115c4:	6013      	str	r3, [r2, #0]
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115ca:	4613      	mov	r3, r2
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	4413      	add	r3, r2
 80115d0:	009b      	lsls	r3, r3, #2
 80115d2:	4a14      	ldr	r2, [pc, #80]	@ (8011624 <xTaskRemoveFromEventList+0xbc>)
 80115d4:	441a      	add	r2, r3
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	3304      	adds	r3, #4
 80115da:	4619      	mov	r1, r3
 80115dc:	4610      	mov	r0, r2
 80115de:	f7fe f9fa 	bl	800f9d6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80115e2:	f000 f991 	bl	8011908 <prvResetNextTaskUnblockTime>
 80115e6:	e005      	b.n	80115f4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	3318      	adds	r3, #24
 80115ec:	4619      	mov	r1, r3
 80115ee:	480e      	ldr	r0, [pc, #56]	@ (8011628 <xTaskRemoveFromEventList+0xc0>)
 80115f0:	f7fe f9f1 	bl	800f9d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115f8:	4b0c      	ldr	r3, [pc, #48]	@ (801162c <xTaskRemoveFromEventList+0xc4>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115fe:	429a      	cmp	r2, r3
 8011600:	d905      	bls.n	801160e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011602:	2301      	movs	r3, #1
 8011604:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011606:	4b0a      	ldr	r3, [pc, #40]	@ (8011630 <xTaskRemoveFromEventList+0xc8>)
 8011608:	2201      	movs	r2, #1
 801160a:	601a      	str	r2, [r3, #0]
 801160c:	e001      	b.n	8011612 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 801160e:	2300      	movs	r3, #0
 8011610:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011612:	697b      	ldr	r3, [r7, #20]
}
 8011614:	4618      	mov	r0, r3
 8011616:	3718      	adds	r7, #24
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	2001af34 	.word	0x2001af34
 8011620:	2001af14 	.word	0x2001af14
 8011624:	2001aa3c 	.word	0x2001aa3c
 8011628:	2001aecc 	.word	0x2001aecc
 801162c:	2001aa38 	.word	0x2001aa38
 8011630:	2001af20 	.word	0x2001af20

08011634 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801163c:	4b06      	ldr	r3, [pc, #24]	@ (8011658 <vTaskInternalSetTimeOutState+0x24>)
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011644:	4b05      	ldr	r3, [pc, #20]	@ (801165c <vTaskInternalSetTimeOutState+0x28>)
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	605a      	str	r2, [r3, #4]
}
 801164c:	bf00      	nop
 801164e:	370c      	adds	r7, #12
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr
 8011658:	2001af24 	.word	0x2001af24
 801165c:	2001af10 	.word	0x2001af10

08011660 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b088      	sub	sp, #32
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d10b      	bne.n	8011688 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011674:	f383 8811 	msr	BASEPRI, r3
 8011678:	f3bf 8f6f 	isb	sy
 801167c:	f3bf 8f4f 	dsb	sy
 8011680:	613b      	str	r3, [r7, #16]
}
 8011682:	bf00      	nop
 8011684:	bf00      	nop
 8011686:	e7fd      	b.n	8011684 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d10b      	bne.n	80116a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801168e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011692:	f383 8811 	msr	BASEPRI, r3
 8011696:	f3bf 8f6f 	isb	sy
 801169a:	f3bf 8f4f 	dsb	sy
 801169e:	60fb      	str	r3, [r7, #12]
}
 80116a0:	bf00      	nop
 80116a2:	bf00      	nop
 80116a4:	e7fd      	b.n	80116a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80116a6:	f000 ffbf 	bl	8012628 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80116aa:	4b1d      	ldr	r3, [pc, #116]	@ (8011720 <xTaskCheckForTimeOut+0xc0>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	69ba      	ldr	r2, [r7, #24]
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80116c2:	d102      	bne.n	80116ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80116c4:	2300      	movs	r3, #0
 80116c6:	61fb      	str	r3, [r7, #28]
 80116c8:	e023      	b.n	8011712 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	4b15      	ldr	r3, [pc, #84]	@ (8011724 <xTaskCheckForTimeOut+0xc4>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d007      	beq.n	80116e6 <xTaskCheckForTimeOut+0x86>
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	69ba      	ldr	r2, [r7, #24]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d302      	bcc.n	80116e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80116e0:	2301      	movs	r3, #1
 80116e2:	61fb      	str	r3, [r7, #28]
 80116e4:	e015      	b.n	8011712 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	697a      	ldr	r2, [r7, #20]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d20b      	bcs.n	8011708 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	1ad2      	subs	r2, r2, r3
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f7ff ff99 	bl	8011634 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011702:	2300      	movs	r3, #0
 8011704:	61fb      	str	r3, [r7, #28]
 8011706:	e004      	b.n	8011712 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	2200      	movs	r2, #0
 801170c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801170e:	2301      	movs	r3, #1
 8011710:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011712:	f000 ffbb 	bl	801268c <vPortExitCritical>

	return xReturn;
 8011716:	69fb      	ldr	r3, [r7, #28]
}
 8011718:	4618      	mov	r0, r3
 801171a:	3720      	adds	r7, #32
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	2001af10 	.word	0x2001af10
 8011724:	2001af24 	.word	0x2001af24

08011728 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011728:	b480      	push	{r7}
 801172a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801172c:	4b03      	ldr	r3, [pc, #12]	@ (801173c <vTaskMissedYield+0x14>)
 801172e:	2201      	movs	r2, #1
 8011730:	601a      	str	r2, [r3, #0]
}
 8011732:	bf00      	nop
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr
 801173c:	2001af20 	.word	0x2001af20

08011740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011748:	f000 f87a 	bl	8011840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801174c:	4b18      	ldr	r3, [pc, #96]	@ (80117b0 <prvIdleTask+0x70>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d907      	bls.n	8011764 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011754:	4b17      	ldr	r3, [pc, #92]	@ (80117b4 <prvIdleTask+0x74>)
 8011756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801175a:	601a      	str	r2, [r3, #0]
 801175c:	f3bf 8f4f 	dsb	sy
 8011760:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8011764:	f7ff fca8 	bl	80110b8 <prvGetExpectedIdleTime>
 8011768:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2b01      	cmp	r3, #1
 801176e:	d9eb      	bls.n	8011748 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8011770:	f7ff fc94 	bl	801109c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8011774:	4b10      	ldr	r3, [pc, #64]	@ (80117b8 <prvIdleTask+0x78>)
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	4b10      	ldr	r3, [pc, #64]	@ (80117bc <prvIdleTask+0x7c>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	429a      	cmp	r2, r3
 801177e:	d20b      	bcs.n	8011798 <prvIdleTask+0x58>
	__asm volatile
 8011780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011784:	f383 8811 	msr	BASEPRI, r3
 8011788:	f3bf 8f6f 	isb	sy
 801178c:	f3bf 8f4f 	dsb	sy
 8011790:	60bb      	str	r3, [r7, #8]
}
 8011792:	bf00      	nop
 8011794:	bf00      	nop
 8011796:	e7fd      	b.n	8011794 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8011798:	f7ff fc8e 	bl	80110b8 <prvGetExpectedIdleTime>
 801179c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	d902      	bls.n	80117aa <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f7ef fccd 	bl	8001144 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80117aa:	f7ff fcbd 	bl	8011128 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80117ae:	e7cb      	b.n	8011748 <prvIdleTask+0x8>
 80117b0:	2001aa3c 	.word	0x2001aa3c
 80117b4:	e000ed04 	.word	0xe000ed04
 80117b8:	2001af2c 	.word	0x2001af2c
 80117bc:	2001af10 	.word	0x2001af10

080117c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b082      	sub	sp, #8
 80117c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117c6:	2300      	movs	r3, #0
 80117c8:	607b      	str	r3, [r7, #4]
 80117ca:	e00c      	b.n	80117e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	4613      	mov	r3, r2
 80117d0:	009b      	lsls	r3, r3, #2
 80117d2:	4413      	add	r3, r2
 80117d4:	009b      	lsls	r3, r3, #2
 80117d6:	4a12      	ldr	r2, [pc, #72]	@ (8011820 <prvInitialiseTaskLists+0x60>)
 80117d8:	4413      	add	r3, r2
 80117da:	4618      	mov	r0, r3
 80117dc:	f7fe f8ce 	bl	800f97c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	3301      	adds	r3, #1
 80117e4:	607b      	str	r3, [r7, #4]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2b37      	cmp	r3, #55	@ 0x37
 80117ea:	d9ef      	bls.n	80117cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80117ec:	480d      	ldr	r0, [pc, #52]	@ (8011824 <prvInitialiseTaskLists+0x64>)
 80117ee:	f7fe f8c5 	bl	800f97c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80117f2:	480d      	ldr	r0, [pc, #52]	@ (8011828 <prvInitialiseTaskLists+0x68>)
 80117f4:	f7fe f8c2 	bl	800f97c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80117f8:	480c      	ldr	r0, [pc, #48]	@ (801182c <prvInitialiseTaskLists+0x6c>)
 80117fa:	f7fe f8bf 	bl	800f97c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80117fe:	480c      	ldr	r0, [pc, #48]	@ (8011830 <prvInitialiseTaskLists+0x70>)
 8011800:	f7fe f8bc 	bl	800f97c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011804:	480b      	ldr	r0, [pc, #44]	@ (8011834 <prvInitialiseTaskLists+0x74>)
 8011806:	f7fe f8b9 	bl	800f97c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801180a:	4b0b      	ldr	r3, [pc, #44]	@ (8011838 <prvInitialiseTaskLists+0x78>)
 801180c:	4a05      	ldr	r2, [pc, #20]	@ (8011824 <prvInitialiseTaskLists+0x64>)
 801180e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011810:	4b0a      	ldr	r3, [pc, #40]	@ (801183c <prvInitialiseTaskLists+0x7c>)
 8011812:	4a05      	ldr	r2, [pc, #20]	@ (8011828 <prvInitialiseTaskLists+0x68>)
 8011814:	601a      	str	r2, [r3, #0]
}
 8011816:	bf00      	nop
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	2001aa3c 	.word	0x2001aa3c
 8011824:	2001ae9c 	.word	0x2001ae9c
 8011828:	2001aeb0 	.word	0x2001aeb0
 801182c:	2001aecc 	.word	0x2001aecc
 8011830:	2001aee0 	.word	0x2001aee0
 8011834:	2001aef8 	.word	0x2001aef8
 8011838:	2001aec4 	.word	0x2001aec4
 801183c:	2001aec8 	.word	0x2001aec8

08011840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011846:	e019      	b.n	801187c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011848:	f000 feee 	bl	8012628 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801184c:	4b10      	ldr	r3, [pc, #64]	@ (8011890 <prvCheckTasksWaitingTermination+0x50>)
 801184e:	68db      	ldr	r3, [r3, #12]
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	3304      	adds	r3, #4
 8011858:	4618      	mov	r0, r3
 801185a:	f7fe f919 	bl	800fa90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801185e:	4b0d      	ldr	r3, [pc, #52]	@ (8011894 <prvCheckTasksWaitingTermination+0x54>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	3b01      	subs	r3, #1
 8011864:	4a0b      	ldr	r2, [pc, #44]	@ (8011894 <prvCheckTasksWaitingTermination+0x54>)
 8011866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011868:	4b0b      	ldr	r3, [pc, #44]	@ (8011898 <prvCheckTasksWaitingTermination+0x58>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	3b01      	subs	r3, #1
 801186e:	4a0a      	ldr	r2, [pc, #40]	@ (8011898 <prvCheckTasksWaitingTermination+0x58>)
 8011870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011872:	f000 ff0b 	bl	801268c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f000 f810 	bl	801189c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801187c:	4b06      	ldr	r3, [pc, #24]	@ (8011898 <prvCheckTasksWaitingTermination+0x58>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d1e1      	bne.n	8011848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011884:	bf00      	nop
 8011886:	bf00      	nop
 8011888:	3708      	adds	r7, #8
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}
 801188e:	bf00      	nop
 8011890:	2001aee0 	.word	0x2001aee0
 8011894:	2001af0c 	.word	0x2001af0c
 8011898:	2001aef4 	.word	0x2001aef4

0801189c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801189c:	b580      	push	{r7, lr}
 801189e:	b084      	sub	sp, #16
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3354      	adds	r3, #84	@ 0x54
 80118a8:	4618      	mov	r0, r3
 80118aa:	f004 faad 	bl	8015e08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d108      	bne.n	80118ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118bc:	4618      	mov	r0, r3
 80118be:	f001 f8a3 	bl	8012a08 <vPortFree>
				vPortFree( pxTCB );
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f001 f8a0 	bl	8012a08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80118c8:	e019      	b.n	80118fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d103      	bne.n	80118dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f001 f897 	bl	8012a08 <vPortFree>
	}
 80118da:	e010      	b.n	80118fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80118e2:	2b02      	cmp	r3, #2
 80118e4:	d00b      	beq.n	80118fe <prvDeleteTCB+0x62>
	__asm volatile
 80118e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118ea:	f383 8811 	msr	BASEPRI, r3
 80118ee:	f3bf 8f6f 	isb	sy
 80118f2:	f3bf 8f4f 	dsb	sy
 80118f6:	60fb      	str	r3, [r7, #12]
}
 80118f8:	bf00      	nop
 80118fa:	bf00      	nop
 80118fc:	e7fd      	b.n	80118fa <prvDeleteTCB+0x5e>
	}
 80118fe:	bf00      	nop
 8011900:	3710      	adds	r7, #16
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
	...

08011908 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011908:	b480      	push	{r7}
 801190a:	b083      	sub	sp, #12
 801190c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801190e:	4b0c      	ldr	r3, [pc, #48]	@ (8011940 <prvResetNextTaskUnblockTime+0x38>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d104      	bne.n	8011922 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011918:	4b0a      	ldr	r3, [pc, #40]	@ (8011944 <prvResetNextTaskUnblockTime+0x3c>)
 801191a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801191e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011920:	e008      	b.n	8011934 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011922:	4b07      	ldr	r3, [pc, #28]	@ (8011940 <prvResetNextTaskUnblockTime+0x38>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	68db      	ldr	r3, [r3, #12]
 801192a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	4a04      	ldr	r2, [pc, #16]	@ (8011944 <prvResetNextTaskUnblockTime+0x3c>)
 8011932:	6013      	str	r3, [r2, #0]
}
 8011934:	bf00      	nop
 8011936:	370c      	adds	r7, #12
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr
 8011940:	2001aec4 	.word	0x2001aec4
 8011944:	2001af2c 	.word	0x2001af2c

08011948 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801194e:	4b0b      	ldr	r3, [pc, #44]	@ (801197c <xTaskGetSchedulerState+0x34>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d102      	bne.n	801195c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011956:	2301      	movs	r3, #1
 8011958:	607b      	str	r3, [r7, #4]
 801195a:	e008      	b.n	801196e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801195c:	4b08      	ldr	r3, [pc, #32]	@ (8011980 <xTaskGetSchedulerState+0x38>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d102      	bne.n	801196a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011964:	2302      	movs	r3, #2
 8011966:	607b      	str	r3, [r7, #4]
 8011968:	e001      	b.n	801196e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801196a:	2300      	movs	r3, #0
 801196c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801196e:	687b      	ldr	r3, [r7, #4]
	}
 8011970:	4618      	mov	r0, r3
 8011972:	370c      	adds	r7, #12
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr
 801197c:	2001af18 	.word	0x2001af18
 8011980:	2001af34 	.word	0x2001af34

08011984 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011990:	2300      	movs	r3, #0
 8011992:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d051      	beq.n	8011a3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801199e:	4b2a      	ldr	r3, [pc, #168]	@ (8011a48 <xTaskPriorityInherit+0xc4>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d241      	bcs.n	8011a2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	699b      	ldr	r3, [r3, #24]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	db06      	blt.n	80119be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119b0:	4b25      	ldr	r3, [pc, #148]	@ (8011a48 <xTaskPriorityInherit+0xc4>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	6959      	ldr	r1, [r3, #20]
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119c6:	4613      	mov	r3, r2
 80119c8:	009b      	lsls	r3, r3, #2
 80119ca:	4413      	add	r3, r2
 80119cc:	009b      	lsls	r3, r3, #2
 80119ce:	4a1f      	ldr	r2, [pc, #124]	@ (8011a4c <xTaskPriorityInherit+0xc8>)
 80119d0:	4413      	add	r3, r2
 80119d2:	4299      	cmp	r1, r3
 80119d4:	d122      	bne.n	8011a1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	3304      	adds	r3, #4
 80119da:	4618      	mov	r0, r3
 80119dc:	f7fe f858 	bl	800fa90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80119e0:	4b19      	ldr	r3, [pc, #100]	@ (8011a48 <xTaskPriorityInherit+0xc4>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119ee:	4b18      	ldr	r3, [pc, #96]	@ (8011a50 <xTaskPriorityInherit+0xcc>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d903      	bls.n	80119fe <xTaskPriorityInherit+0x7a>
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119fa:	4a15      	ldr	r2, [pc, #84]	@ (8011a50 <xTaskPriorityInherit+0xcc>)
 80119fc:	6013      	str	r3, [r2, #0]
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a02:	4613      	mov	r3, r2
 8011a04:	009b      	lsls	r3, r3, #2
 8011a06:	4413      	add	r3, r2
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	4a10      	ldr	r2, [pc, #64]	@ (8011a4c <xTaskPriorityInherit+0xc8>)
 8011a0c:	441a      	add	r2, r3
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	3304      	adds	r3, #4
 8011a12:	4619      	mov	r1, r3
 8011a14:	4610      	mov	r0, r2
 8011a16:	f7fd ffde 	bl	800f9d6 <vListInsertEnd>
 8011a1a:	e004      	b.n	8011a26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8011a48 <xTaskPriorityInherit+0xc4>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011a26:	2301      	movs	r3, #1
 8011a28:	60fb      	str	r3, [r7, #12]
 8011a2a:	e008      	b.n	8011a3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011a30:	4b05      	ldr	r3, [pc, #20]	@ (8011a48 <xTaskPriorityInherit+0xc4>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d201      	bcs.n	8011a3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
	}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3710      	adds	r7, #16
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	2001aa38 	.word	0x2001aa38
 8011a4c:	2001aa3c 	.word	0x2001aa3c
 8011a50:	2001af14 	.word	0x2001af14

08011a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b086      	sub	sp, #24
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011a60:	2300      	movs	r3, #0
 8011a62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d058      	beq.n	8011b1c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8011b28 <xTaskPriorityDisinherit+0xd4>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	693a      	ldr	r2, [r7, #16]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d00b      	beq.n	8011a8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a78:	f383 8811 	msr	BASEPRI, r3
 8011a7c:	f3bf 8f6f 	isb	sy
 8011a80:	f3bf 8f4f 	dsb	sy
 8011a84:	60fb      	str	r3, [r7, #12]
}
 8011a86:	bf00      	nop
 8011a88:	bf00      	nop
 8011a8a:	e7fd      	b.n	8011a88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d10b      	bne.n	8011aac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a98:	f383 8811 	msr	BASEPRI, r3
 8011a9c:	f3bf 8f6f 	isb	sy
 8011aa0:	f3bf 8f4f 	dsb	sy
 8011aa4:	60bb      	str	r3, [r7, #8]
}
 8011aa6:	bf00      	nop
 8011aa8:	bf00      	nop
 8011aaa:	e7fd      	b.n	8011aa8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ab0:	1e5a      	subs	r2, r3, #1
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d02c      	beq.n	8011b1c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d128      	bne.n	8011b1c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	3304      	adds	r3, #4
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fd ffde 	bl	800fa90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ae0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011aec:	4b0f      	ldr	r3, [pc, #60]	@ (8011b2c <xTaskPriorityDisinherit+0xd8>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d903      	bls.n	8011afc <xTaskPriorityDisinherit+0xa8>
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011af8:	4a0c      	ldr	r2, [pc, #48]	@ (8011b2c <xTaskPriorityDisinherit+0xd8>)
 8011afa:	6013      	str	r3, [r2, #0]
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b00:	4613      	mov	r3, r2
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	4413      	add	r3, r2
 8011b06:	009b      	lsls	r3, r3, #2
 8011b08:	4a09      	ldr	r2, [pc, #36]	@ (8011b30 <xTaskPriorityDisinherit+0xdc>)
 8011b0a:	441a      	add	r2, r3
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	3304      	adds	r3, #4
 8011b10:	4619      	mov	r1, r3
 8011b12:	4610      	mov	r0, r2
 8011b14:	f7fd ff5f 	bl	800f9d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b18:	2301      	movs	r3, #1
 8011b1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b1c:	697b      	ldr	r3, [r7, #20]
	}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3718      	adds	r7, #24
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	2001aa38 	.word	0x2001aa38
 8011b2c:	2001af14 	.word	0x2001af14
 8011b30:	2001aa3c 	.word	0x2001aa3c

08011b34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b088      	sub	sp, #32
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011b42:	2301      	movs	r3, #1
 8011b44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d06c      	beq.n	8011c26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011b4c:	69bb      	ldr	r3, [r7, #24]
 8011b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d10b      	bne.n	8011b6c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b58:	f383 8811 	msr	BASEPRI, r3
 8011b5c:	f3bf 8f6f 	isb	sy
 8011b60:	f3bf 8f4f 	dsb	sy
 8011b64:	60fb      	str	r3, [r7, #12]
}
 8011b66:	bf00      	nop
 8011b68:	bf00      	nop
 8011b6a:	e7fd      	b.n	8011b68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b70:	683a      	ldr	r2, [r7, #0]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d902      	bls.n	8011b7c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	61fb      	str	r3, [r7, #28]
 8011b7a:	e002      	b.n	8011b82 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b80:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011b82:	69bb      	ldr	r3, [r7, #24]
 8011b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b86:	69fa      	ldr	r2, [r7, #28]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d04c      	beq.n	8011c26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b8c:	69bb      	ldr	r3, [r7, #24]
 8011b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b90:	697a      	ldr	r2, [r7, #20]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d147      	bne.n	8011c26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b96:	4b26      	ldr	r3, [pc, #152]	@ (8011c30 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	69ba      	ldr	r2, [r7, #24]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d10b      	bne.n	8011bb8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ba4:	f383 8811 	msr	BASEPRI, r3
 8011ba8:	f3bf 8f6f 	isb	sy
 8011bac:	f3bf 8f4f 	dsb	sy
 8011bb0:	60bb      	str	r3, [r7, #8]
}
 8011bb2:	bf00      	nop
 8011bb4:	bf00      	nop
 8011bb6:	e7fd      	b.n	8011bb4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011bbe:	69bb      	ldr	r3, [r7, #24]
 8011bc0:	69fa      	ldr	r2, [r7, #28]
 8011bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011bc4:	69bb      	ldr	r3, [r7, #24]
 8011bc6:	699b      	ldr	r3, [r3, #24]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	db04      	blt.n	8011bd6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011bd6:	69bb      	ldr	r3, [r7, #24]
 8011bd8:	6959      	ldr	r1, [r3, #20]
 8011bda:	693a      	ldr	r2, [r7, #16]
 8011bdc:	4613      	mov	r3, r2
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	4413      	add	r3, r2
 8011be2:	009b      	lsls	r3, r3, #2
 8011be4:	4a13      	ldr	r2, [pc, #76]	@ (8011c34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011be6:	4413      	add	r3, r2
 8011be8:	4299      	cmp	r1, r3
 8011bea:	d11c      	bne.n	8011c26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	3304      	adds	r3, #4
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7fd ff4d 	bl	800fa90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8011c38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d903      	bls.n	8011c0a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8011c02:	69bb      	ldr	r3, [r7, #24]
 8011c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c06:	4a0c      	ldr	r2, [pc, #48]	@ (8011c38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011c08:	6013      	str	r3, [r2, #0]
 8011c0a:	69bb      	ldr	r3, [r7, #24]
 8011c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c0e:	4613      	mov	r3, r2
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	4413      	add	r3, r2
 8011c14:	009b      	lsls	r3, r3, #2
 8011c16:	4a07      	ldr	r2, [pc, #28]	@ (8011c34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011c18:	441a      	add	r2, r3
 8011c1a:	69bb      	ldr	r3, [r7, #24]
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	4619      	mov	r1, r3
 8011c20:	4610      	mov	r0, r2
 8011c22:	f7fd fed8 	bl	800f9d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011c26:	bf00      	nop
 8011c28:	3720      	adds	r7, #32
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	2001aa38 	.word	0x2001aa38
 8011c34:	2001aa3c 	.word	0x2001aa3c
 8011c38:	2001af14 	.word	0x2001af14

08011c3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011c3c:	b480      	push	{r7}
 8011c3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011c40:	4b07      	ldr	r3, [pc, #28]	@ (8011c60 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d004      	beq.n	8011c52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011c48:	4b05      	ldr	r3, [pc, #20]	@ (8011c60 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011c4e:	3201      	adds	r2, #1
 8011c50:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8011c52:	4b03      	ldr	r3, [pc, #12]	@ (8011c60 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c54:	681b      	ldr	r3, [r3, #0]
	}
 8011c56:	4618      	mov	r0, r3
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr
 8011c60:	2001aa38 	.word	0x2001aa38

08011c64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b084      	sub	sp, #16
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c6e:	4b21      	ldr	r3, [pc, #132]	@ (8011cf4 <prvAddCurrentTaskToDelayedList+0x90>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c74:	4b20      	ldr	r3, [pc, #128]	@ (8011cf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	3304      	adds	r3, #4
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7fd ff08 	bl	800fa90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011c86:	d10a      	bne.n	8011c9e <prvAddCurrentTaskToDelayedList+0x3a>
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d007      	beq.n	8011c9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8011cf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	3304      	adds	r3, #4
 8011c94:	4619      	mov	r1, r3
 8011c96:	4819      	ldr	r0, [pc, #100]	@ (8011cfc <prvAddCurrentTaskToDelayedList+0x98>)
 8011c98:	f7fd fe9d 	bl	800f9d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011c9c:	e026      	b.n	8011cec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011c9e:	68fa      	ldr	r2, [r7, #12]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011ca6:	4b14      	ldr	r3, [pc, #80]	@ (8011cf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	68ba      	ldr	r2, [r7, #8]
 8011cac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011cae:	68ba      	ldr	r2, [r7, #8]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d209      	bcs.n	8011cca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cb6:	4b12      	ldr	r3, [pc, #72]	@ (8011d00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	4b0f      	ldr	r3, [pc, #60]	@ (8011cf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	3304      	adds	r3, #4
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	4610      	mov	r0, r2
 8011cc4:	f7fd feab 	bl	800fa1e <vListInsert>
}
 8011cc8:	e010      	b.n	8011cec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cca:	4b0e      	ldr	r3, [pc, #56]	@ (8011d04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	4b0a      	ldr	r3, [pc, #40]	@ (8011cf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	3304      	adds	r3, #4
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	4610      	mov	r0, r2
 8011cd8:	f7fd fea1 	bl	800fa1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8011d08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	68ba      	ldr	r2, [r7, #8]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d202      	bcs.n	8011cec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011ce6:	4a08      	ldr	r2, [pc, #32]	@ (8011d08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	6013      	str	r3, [r2, #0]
}
 8011cec:	bf00      	nop
 8011cee:	3710      	adds	r7, #16
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}
 8011cf4:	2001af10 	.word	0x2001af10
 8011cf8:	2001aa38 	.word	0x2001aa38
 8011cfc:	2001aef8 	.word	0x2001aef8
 8011d00:	2001aec8 	.word	0x2001aec8
 8011d04:	2001aec4 	.word	0x2001aec4
 8011d08:	2001af2c 	.word	0x2001af2c

08011d0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b08a      	sub	sp, #40	@ 0x28
 8011d10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011d12:	2300      	movs	r3, #0
 8011d14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011d16:	f000 fb13 	bl	8012340 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8011d90 <xTimerCreateTimerTask+0x84>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d021      	beq.n	8011d66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011d22:	2300      	movs	r3, #0
 8011d24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011d26:	2300      	movs	r3, #0
 8011d28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011d2a:	1d3a      	adds	r2, r7, #4
 8011d2c:	f107 0108 	add.w	r1, r7, #8
 8011d30:	f107 030c 	add.w	r3, r7, #12
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fd fe07 	bl	800f948 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011d3a:	6879      	ldr	r1, [r7, #4]
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	68fa      	ldr	r2, [r7, #12]
 8011d40:	9202      	str	r2, [sp, #8]
 8011d42:	9301      	str	r3, [sp, #4]
 8011d44:	2302      	movs	r3, #2
 8011d46:	9300      	str	r3, [sp, #0]
 8011d48:	2300      	movs	r3, #0
 8011d4a:	460a      	mov	r2, r1
 8011d4c:	4911      	ldr	r1, [pc, #68]	@ (8011d94 <xTimerCreateTimerTask+0x88>)
 8011d4e:	4812      	ldr	r0, [pc, #72]	@ (8011d98 <xTimerCreateTimerTask+0x8c>)
 8011d50:	f7fe ff40 	bl	8010bd4 <xTaskCreateStatic>
 8011d54:	4603      	mov	r3, r0
 8011d56:	4a11      	ldr	r2, [pc, #68]	@ (8011d9c <xTimerCreateTimerTask+0x90>)
 8011d58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011d5a:	4b10      	ldr	r3, [pc, #64]	@ (8011d9c <xTimerCreateTimerTask+0x90>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d001      	beq.n	8011d66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011d62:	2301      	movs	r3, #1
 8011d64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d10b      	bne.n	8011d84 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d70:	f383 8811 	msr	BASEPRI, r3
 8011d74:	f3bf 8f6f 	isb	sy
 8011d78:	f3bf 8f4f 	dsb	sy
 8011d7c:	613b      	str	r3, [r7, #16]
}
 8011d7e:	bf00      	nop
 8011d80:	bf00      	nop
 8011d82:	e7fd      	b.n	8011d80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011d84:	697b      	ldr	r3, [r7, #20]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3718      	adds	r7, #24
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	2001af68 	.word	0x2001af68
 8011d94:	0801bdfc 	.word	0x0801bdfc
 8011d98:	08011ed9 	.word	0x08011ed9
 8011d9c:	2001af6c 	.word	0x2001af6c

08011da0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b08a      	sub	sp, #40	@ 0x28
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	607a      	str	r2, [r7, #4]
 8011dac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011dae:	2300      	movs	r3, #0
 8011db0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d10b      	bne.n	8011dd0 <xTimerGenericCommand+0x30>
	__asm volatile
 8011db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dbc:	f383 8811 	msr	BASEPRI, r3
 8011dc0:	f3bf 8f6f 	isb	sy
 8011dc4:	f3bf 8f4f 	dsb	sy
 8011dc8:	623b      	str	r3, [r7, #32]
}
 8011dca:	bf00      	nop
 8011dcc:	bf00      	nop
 8011dce:	e7fd      	b.n	8011dcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011dd0:	4b19      	ldr	r3, [pc, #100]	@ (8011e38 <xTimerGenericCommand+0x98>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d02a      	beq.n	8011e2e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	2b05      	cmp	r3, #5
 8011de8:	dc18      	bgt.n	8011e1c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011dea:	f7ff fdad 	bl	8011948 <xTaskGetSchedulerState>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b02      	cmp	r3, #2
 8011df2:	d109      	bne.n	8011e08 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011df4:	4b10      	ldr	r3, [pc, #64]	@ (8011e38 <xTimerGenericCommand+0x98>)
 8011df6:	6818      	ldr	r0, [r3, #0]
 8011df8:	f107 0110 	add.w	r1, r7, #16
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e00:	f7fe f870 	bl	800fee4 <xQueueGenericSend>
 8011e04:	6278      	str	r0, [r7, #36]	@ 0x24
 8011e06:	e012      	b.n	8011e2e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011e08:	4b0b      	ldr	r3, [pc, #44]	@ (8011e38 <xTimerGenericCommand+0x98>)
 8011e0a:	6818      	ldr	r0, [r3, #0]
 8011e0c:	f107 0110 	add.w	r1, r7, #16
 8011e10:	2300      	movs	r3, #0
 8011e12:	2200      	movs	r2, #0
 8011e14:	f7fe f866 	bl	800fee4 <xQueueGenericSend>
 8011e18:	6278      	str	r0, [r7, #36]	@ 0x24
 8011e1a:	e008      	b.n	8011e2e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011e1c:	4b06      	ldr	r3, [pc, #24]	@ (8011e38 <xTimerGenericCommand+0x98>)
 8011e1e:	6818      	ldr	r0, [r3, #0]
 8011e20:	f107 0110 	add.w	r1, r7, #16
 8011e24:	2300      	movs	r3, #0
 8011e26:	683a      	ldr	r2, [r7, #0]
 8011e28:	f7fe f95e 	bl	80100e8 <xQueueGenericSendFromISR>
 8011e2c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3728      	adds	r7, #40	@ 0x28
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	2001af68 	.word	0x2001af68

08011e3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b088      	sub	sp, #32
 8011e40:	af02      	add	r7, sp, #8
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e46:	4b23      	ldr	r3, [pc, #140]	@ (8011ed4 <prvProcessExpiredTimer+0x98>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	3304      	adds	r3, #4
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7fd fe1b 	bl	800fa90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e60:	f003 0304 	and.w	r3, r3, #4
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d023      	beq.n	8011eb0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	699a      	ldr	r2, [r3, #24]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	18d1      	adds	r1, r2, r3
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	683a      	ldr	r2, [r7, #0]
 8011e74:	6978      	ldr	r0, [r7, #20]
 8011e76:	f000 f8d5 	bl	8012024 <prvInsertTimerInActiveList>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d020      	beq.n	8011ec2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e80:	2300      	movs	r3, #0
 8011e82:	9300      	str	r3, [sp, #0]
 8011e84:	2300      	movs	r3, #0
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	2100      	movs	r1, #0
 8011e8a:	6978      	ldr	r0, [r7, #20]
 8011e8c:	f7ff ff88 	bl	8011da0 <xTimerGenericCommand>
 8011e90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d114      	bne.n	8011ec2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e9c:	f383 8811 	msr	BASEPRI, r3
 8011ea0:	f3bf 8f6f 	isb	sy
 8011ea4:	f3bf 8f4f 	dsb	sy
 8011ea8:	60fb      	str	r3, [r7, #12]
}
 8011eaa:	bf00      	nop
 8011eac:	bf00      	nop
 8011eae:	e7fd      	b.n	8011eac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011eb6:	f023 0301 	bic.w	r3, r3, #1
 8011eba:	b2da      	uxtb	r2, r3
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	6a1b      	ldr	r3, [r3, #32]
 8011ec6:	6978      	ldr	r0, [r7, #20]
 8011ec8:	4798      	blx	r3
}
 8011eca:	bf00      	nop
 8011ecc:	3718      	adds	r7, #24
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	2001af60 	.word	0x2001af60

08011ed8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011ee0:	f107 0308 	add.w	r3, r7, #8
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f000 f859 	bl	8011f9c <prvGetNextExpireTime>
 8011eea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	4619      	mov	r1, r3
 8011ef0:	68f8      	ldr	r0, [r7, #12]
 8011ef2:	f000 f805 	bl	8011f00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011ef6:	f000 f8d7 	bl	80120a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011efa:	bf00      	nop
 8011efc:	e7f0      	b.n	8011ee0 <prvTimerTask+0x8>
	...

08011f00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011f0a:	f7ff f8c7 	bl	801109c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011f0e:	f107 0308 	add.w	r3, r7, #8
 8011f12:	4618      	mov	r0, r3
 8011f14:	f000 f866 	bl	8011fe4 <prvSampleTimeNow>
 8011f18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d130      	bne.n	8011f82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d10a      	bne.n	8011f3c <prvProcessTimerOrBlockTask+0x3c>
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d806      	bhi.n	8011f3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011f2e:	f7ff f8fb 	bl	8011128 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011f32:	68f9      	ldr	r1, [r7, #12]
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7ff ff81 	bl	8011e3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011f3a:	e024      	b.n	8011f86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d008      	beq.n	8011f54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011f42:	4b13      	ldr	r3, [pc, #76]	@ (8011f90 <prvProcessTimerOrBlockTask+0x90>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d101      	bne.n	8011f50 <prvProcessTimerOrBlockTask+0x50>
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	e000      	b.n	8011f52 <prvProcessTimerOrBlockTask+0x52>
 8011f50:	2300      	movs	r3, #0
 8011f52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011f54:	4b0f      	ldr	r3, [pc, #60]	@ (8011f94 <prvProcessTimerOrBlockTask+0x94>)
 8011f56:	6818      	ldr	r0, [r3, #0]
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	683a      	ldr	r2, [r7, #0]
 8011f60:	4619      	mov	r1, r3
 8011f62:	f7fe fe03 	bl	8010b6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011f66:	f7ff f8df 	bl	8011128 <xTaskResumeAll>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d10a      	bne.n	8011f86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011f70:	4b09      	ldr	r3, [pc, #36]	@ (8011f98 <prvProcessTimerOrBlockTask+0x98>)
 8011f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f76:	601a      	str	r2, [r3, #0]
 8011f78:	f3bf 8f4f 	dsb	sy
 8011f7c:	f3bf 8f6f 	isb	sy
}
 8011f80:	e001      	b.n	8011f86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011f82:	f7ff f8d1 	bl	8011128 <xTaskResumeAll>
}
 8011f86:	bf00      	nop
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	2001af64 	.word	0x2001af64
 8011f94:	2001af68 	.word	0x2001af68
 8011f98:	e000ed04 	.word	0xe000ed04

08011f9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b085      	sub	sp, #20
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8011fe0 <prvGetNextExpireTime+0x44>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d101      	bne.n	8011fb2 <prvGetNextExpireTime+0x16>
 8011fae:	2201      	movs	r2, #1
 8011fb0:	e000      	b.n	8011fb4 <prvGetNextExpireTime+0x18>
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d105      	bne.n	8011fcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011fc0:	4b07      	ldr	r3, [pc, #28]	@ (8011fe0 <prvGetNextExpireTime+0x44>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	60fb      	str	r3, [r7, #12]
 8011fca:	e001      	b.n	8011fd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3714      	adds	r7, #20
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fdc:	4770      	bx	lr
 8011fde:	bf00      	nop
 8011fe0:	2001af60 	.word	0x2001af60

08011fe4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b084      	sub	sp, #16
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011fec:	f7ff f93a 	bl	8011264 <xTaskGetTickCount>
 8011ff0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8012020 <prvSampleTimeNow+0x3c>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	68fa      	ldr	r2, [r7, #12]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d205      	bcs.n	8012008 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011ffc:	f000 f93a 	bl	8012274 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2201      	movs	r2, #1
 8012004:	601a      	str	r2, [r3, #0]
 8012006:	e002      	b.n	801200e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2200      	movs	r2, #0
 801200c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801200e:	4a04      	ldr	r2, [pc, #16]	@ (8012020 <prvSampleTimeNow+0x3c>)
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012014:	68fb      	ldr	r3, [r7, #12]
}
 8012016:	4618      	mov	r0, r3
 8012018:	3710      	adds	r7, #16
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	2001af70 	.word	0x2001af70

08012024 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b086      	sub	sp, #24
 8012028:	af00      	add	r7, sp, #0
 801202a:	60f8      	str	r0, [r7, #12]
 801202c:	60b9      	str	r1, [r7, #8]
 801202e:	607a      	str	r2, [r7, #4]
 8012030:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012032:	2300      	movs	r3, #0
 8012034:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	68ba      	ldr	r2, [r7, #8]
 801203a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	68fa      	ldr	r2, [r7, #12]
 8012040:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012042:	68ba      	ldr	r2, [r7, #8]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	429a      	cmp	r2, r3
 8012048:	d812      	bhi.n	8012070 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801204a:	687a      	ldr	r2, [r7, #4]
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	1ad2      	subs	r2, r2, r3
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	699b      	ldr	r3, [r3, #24]
 8012054:	429a      	cmp	r2, r3
 8012056:	d302      	bcc.n	801205e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012058:	2301      	movs	r3, #1
 801205a:	617b      	str	r3, [r7, #20]
 801205c:	e01b      	b.n	8012096 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801205e:	4b10      	ldr	r3, [pc, #64]	@ (80120a0 <prvInsertTimerInActiveList+0x7c>)
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	3304      	adds	r3, #4
 8012066:	4619      	mov	r1, r3
 8012068:	4610      	mov	r0, r2
 801206a:	f7fd fcd8 	bl	800fa1e <vListInsert>
 801206e:	e012      	b.n	8012096 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	429a      	cmp	r2, r3
 8012076:	d206      	bcs.n	8012086 <prvInsertTimerInActiveList+0x62>
 8012078:	68ba      	ldr	r2, [r7, #8]
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	429a      	cmp	r2, r3
 801207e:	d302      	bcc.n	8012086 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012080:	2301      	movs	r3, #1
 8012082:	617b      	str	r3, [r7, #20]
 8012084:	e007      	b.n	8012096 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012086:	4b07      	ldr	r3, [pc, #28]	@ (80120a4 <prvInsertTimerInActiveList+0x80>)
 8012088:	681a      	ldr	r2, [r3, #0]
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	3304      	adds	r3, #4
 801208e:	4619      	mov	r1, r3
 8012090:	4610      	mov	r0, r2
 8012092:	f7fd fcc4 	bl	800fa1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012096:	697b      	ldr	r3, [r7, #20]
}
 8012098:	4618      	mov	r0, r3
 801209a:	3718      	adds	r7, #24
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	2001af64 	.word	0x2001af64
 80120a4:	2001af60 	.word	0x2001af60

080120a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b08e      	sub	sp, #56	@ 0x38
 80120ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80120ae:	e0ce      	b.n	801224e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	da19      	bge.n	80120ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80120b6:	1d3b      	adds	r3, r7, #4
 80120b8:	3304      	adds	r3, #4
 80120ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80120bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d10b      	bne.n	80120da <prvProcessReceivedCommands+0x32>
	__asm volatile
 80120c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120c6:	f383 8811 	msr	BASEPRI, r3
 80120ca:	f3bf 8f6f 	isb	sy
 80120ce:	f3bf 8f4f 	dsb	sy
 80120d2:	61fb      	str	r3, [r7, #28]
}
 80120d4:	bf00      	nop
 80120d6:	bf00      	nop
 80120d8:	e7fd      	b.n	80120d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80120da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80120e0:	6850      	ldr	r0, [r2, #4]
 80120e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80120e4:	6892      	ldr	r2, [r2, #8]
 80120e6:	4611      	mov	r1, r2
 80120e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	f2c0 80ae 	blt.w	801224e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80120f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120f8:	695b      	ldr	r3, [r3, #20]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d004      	beq.n	8012108 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80120fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012100:	3304      	adds	r3, #4
 8012102:	4618      	mov	r0, r3
 8012104:	f7fd fcc4 	bl	800fa90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012108:	463b      	mov	r3, r7
 801210a:	4618      	mov	r0, r3
 801210c:	f7ff ff6a 	bl	8011fe4 <prvSampleTimeNow>
 8012110:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2b09      	cmp	r3, #9
 8012116:	f200 8097 	bhi.w	8012248 <prvProcessReceivedCommands+0x1a0>
 801211a:	a201      	add	r2, pc, #4	@ (adr r2, 8012120 <prvProcessReceivedCommands+0x78>)
 801211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012120:	08012149 	.word	0x08012149
 8012124:	08012149 	.word	0x08012149
 8012128:	08012149 	.word	0x08012149
 801212c:	080121bf 	.word	0x080121bf
 8012130:	080121d3 	.word	0x080121d3
 8012134:	0801221f 	.word	0x0801221f
 8012138:	08012149 	.word	0x08012149
 801213c:	08012149 	.word	0x08012149
 8012140:	080121bf 	.word	0x080121bf
 8012144:	080121d3 	.word	0x080121d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801214a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801214e:	f043 0301 	orr.w	r3, r3, #1
 8012152:	b2da      	uxtb	r2, r3
 8012154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012156:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801215a:	68ba      	ldr	r2, [r7, #8]
 801215c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801215e:	699b      	ldr	r3, [r3, #24]
 8012160:	18d1      	adds	r1, r2, r3
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012168:	f7ff ff5c 	bl	8012024 <prvInsertTimerInActiveList>
 801216c:	4603      	mov	r3, r0
 801216e:	2b00      	cmp	r3, #0
 8012170:	d06c      	beq.n	801224c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012174:	6a1b      	ldr	r3, [r3, #32]
 8012176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012178:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801217a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801217c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012180:	f003 0304 	and.w	r3, r3, #4
 8012184:	2b00      	cmp	r3, #0
 8012186:	d061      	beq.n	801224c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801218c:	699b      	ldr	r3, [r3, #24]
 801218e:	441a      	add	r2, r3
 8012190:	2300      	movs	r3, #0
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	2300      	movs	r3, #0
 8012196:	2100      	movs	r1, #0
 8012198:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801219a:	f7ff fe01 	bl	8011da0 <xTimerGenericCommand>
 801219e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80121a0:	6a3b      	ldr	r3, [r7, #32]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d152      	bne.n	801224c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80121a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121aa:	f383 8811 	msr	BASEPRI, r3
 80121ae:	f3bf 8f6f 	isb	sy
 80121b2:	f3bf 8f4f 	dsb	sy
 80121b6:	61bb      	str	r3, [r7, #24]
}
 80121b8:	bf00      	nop
 80121ba:	bf00      	nop
 80121bc:	e7fd      	b.n	80121ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80121be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80121c4:	f023 0301 	bic.w	r3, r3, #1
 80121c8:	b2da      	uxtb	r2, r3
 80121ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80121d0:	e03d      	b.n	801224e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80121d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80121d8:	f043 0301 	orr.w	r3, r3, #1
 80121dc:	b2da      	uxtb	r2, r3
 80121de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80121ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ec:	699b      	ldr	r3, [r3, #24]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d10b      	bne.n	801220a <prvProcessReceivedCommands+0x162>
	__asm volatile
 80121f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121f6:	f383 8811 	msr	BASEPRI, r3
 80121fa:	f3bf 8f6f 	isb	sy
 80121fe:	f3bf 8f4f 	dsb	sy
 8012202:	617b      	str	r3, [r7, #20]
}
 8012204:	bf00      	nop
 8012206:	bf00      	nop
 8012208:	e7fd      	b.n	8012206 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801220c:	699a      	ldr	r2, [r3, #24]
 801220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012210:	18d1      	adds	r1, r2, r3
 8012212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012218:	f7ff ff04 	bl	8012024 <prvInsertTimerInActiveList>
					break;
 801221c:	e017      	b.n	801224e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801221e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012224:	f003 0302 	and.w	r3, r3, #2
 8012228:	2b00      	cmp	r3, #0
 801222a:	d103      	bne.n	8012234 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801222c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801222e:	f000 fbeb 	bl	8012a08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012232:	e00c      	b.n	801224e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012236:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801223a:	f023 0301 	bic.w	r3, r3, #1
 801223e:	b2da      	uxtb	r2, r3
 8012240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012242:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012246:	e002      	b.n	801224e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8012248:	bf00      	nop
 801224a:	e000      	b.n	801224e <prvProcessReceivedCommands+0x1a6>
					break;
 801224c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801224e:	4b08      	ldr	r3, [pc, #32]	@ (8012270 <prvProcessReceivedCommands+0x1c8>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	1d39      	adds	r1, r7, #4
 8012254:	2200      	movs	r2, #0
 8012256:	4618      	mov	r0, r3
 8012258:	f7fe f874 	bl	8010344 <xQueueReceive>
 801225c:	4603      	mov	r3, r0
 801225e:	2b00      	cmp	r3, #0
 8012260:	f47f af26 	bne.w	80120b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012264:	bf00      	nop
 8012266:	bf00      	nop
 8012268:	3730      	adds	r7, #48	@ 0x30
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	2001af68 	.word	0x2001af68

08012274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b088      	sub	sp, #32
 8012278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801227a:	e049      	b.n	8012310 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801227c:	4b2e      	ldr	r3, [pc, #184]	@ (8012338 <prvSwitchTimerLists+0xc4>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	68db      	ldr	r3, [r3, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012286:	4b2c      	ldr	r3, [pc, #176]	@ (8012338 <prvSwitchTimerLists+0xc4>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	68db      	ldr	r3, [r3, #12]
 801228c:	68db      	ldr	r3, [r3, #12]
 801228e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	3304      	adds	r3, #4
 8012294:	4618      	mov	r0, r3
 8012296:	f7fd fbfb 	bl	800fa90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	6a1b      	ldr	r3, [r3, #32]
 801229e:	68f8      	ldr	r0, [r7, #12]
 80122a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80122a8:	f003 0304 	and.w	r3, r3, #4
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d02f      	beq.n	8012310 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	699b      	ldr	r3, [r3, #24]
 80122b4:	693a      	ldr	r2, [r7, #16]
 80122b6:	4413      	add	r3, r2
 80122b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80122ba:	68ba      	ldr	r2, [r7, #8]
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d90e      	bls.n	80122e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	68ba      	ldr	r2, [r7, #8]
 80122c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	68fa      	ldr	r2, [r7, #12]
 80122cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80122ce:	4b1a      	ldr	r3, [pc, #104]	@ (8012338 <prvSwitchTimerLists+0xc4>)
 80122d0:	681a      	ldr	r2, [r3, #0]
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	3304      	adds	r3, #4
 80122d6:	4619      	mov	r1, r3
 80122d8:	4610      	mov	r0, r2
 80122da:	f7fd fba0 	bl	800fa1e <vListInsert>
 80122de:	e017      	b.n	8012310 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80122e0:	2300      	movs	r3, #0
 80122e2:	9300      	str	r3, [sp, #0]
 80122e4:	2300      	movs	r3, #0
 80122e6:	693a      	ldr	r2, [r7, #16]
 80122e8:	2100      	movs	r1, #0
 80122ea:	68f8      	ldr	r0, [r7, #12]
 80122ec:	f7ff fd58 	bl	8011da0 <xTimerGenericCommand>
 80122f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d10b      	bne.n	8012310 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80122f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122fc:	f383 8811 	msr	BASEPRI, r3
 8012300:	f3bf 8f6f 	isb	sy
 8012304:	f3bf 8f4f 	dsb	sy
 8012308:	603b      	str	r3, [r7, #0]
}
 801230a:	bf00      	nop
 801230c:	bf00      	nop
 801230e:	e7fd      	b.n	801230c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012310:	4b09      	ldr	r3, [pc, #36]	@ (8012338 <prvSwitchTimerLists+0xc4>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d1b0      	bne.n	801227c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801231a:	4b07      	ldr	r3, [pc, #28]	@ (8012338 <prvSwitchTimerLists+0xc4>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012320:	4b06      	ldr	r3, [pc, #24]	@ (801233c <prvSwitchTimerLists+0xc8>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	4a04      	ldr	r2, [pc, #16]	@ (8012338 <prvSwitchTimerLists+0xc4>)
 8012326:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012328:	4a04      	ldr	r2, [pc, #16]	@ (801233c <prvSwitchTimerLists+0xc8>)
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	6013      	str	r3, [r2, #0]
}
 801232e:	bf00      	nop
 8012330:	3718      	adds	r7, #24
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	2001af60 	.word	0x2001af60
 801233c:	2001af64 	.word	0x2001af64

08012340 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012346:	f000 f96f 	bl	8012628 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801234a:	4b15      	ldr	r3, [pc, #84]	@ (80123a0 <prvCheckForValidListAndQueue+0x60>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d120      	bne.n	8012394 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012352:	4814      	ldr	r0, [pc, #80]	@ (80123a4 <prvCheckForValidListAndQueue+0x64>)
 8012354:	f7fd fb12 	bl	800f97c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012358:	4813      	ldr	r0, [pc, #76]	@ (80123a8 <prvCheckForValidListAndQueue+0x68>)
 801235a:	f7fd fb0f 	bl	800f97c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801235e:	4b13      	ldr	r3, [pc, #76]	@ (80123ac <prvCheckForValidListAndQueue+0x6c>)
 8012360:	4a10      	ldr	r2, [pc, #64]	@ (80123a4 <prvCheckForValidListAndQueue+0x64>)
 8012362:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012364:	4b12      	ldr	r3, [pc, #72]	@ (80123b0 <prvCheckForValidListAndQueue+0x70>)
 8012366:	4a10      	ldr	r2, [pc, #64]	@ (80123a8 <prvCheckForValidListAndQueue+0x68>)
 8012368:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801236a:	2300      	movs	r3, #0
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	4b11      	ldr	r3, [pc, #68]	@ (80123b4 <prvCheckForValidListAndQueue+0x74>)
 8012370:	4a11      	ldr	r2, [pc, #68]	@ (80123b8 <prvCheckForValidListAndQueue+0x78>)
 8012372:	2110      	movs	r1, #16
 8012374:	200a      	movs	r0, #10
 8012376:	f7fd fc1f 	bl	800fbb8 <xQueueGenericCreateStatic>
 801237a:	4603      	mov	r3, r0
 801237c:	4a08      	ldr	r2, [pc, #32]	@ (80123a0 <prvCheckForValidListAndQueue+0x60>)
 801237e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012380:	4b07      	ldr	r3, [pc, #28]	@ (80123a0 <prvCheckForValidListAndQueue+0x60>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d005      	beq.n	8012394 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012388:	4b05      	ldr	r3, [pc, #20]	@ (80123a0 <prvCheckForValidListAndQueue+0x60>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	490b      	ldr	r1, [pc, #44]	@ (80123bc <prvCheckForValidListAndQueue+0x7c>)
 801238e:	4618      	mov	r0, r3
 8012390:	f7fe fb98 	bl	8010ac4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012394:	f000 f97a 	bl	801268c <vPortExitCritical>
}
 8012398:	bf00      	nop
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	2001af68 	.word	0x2001af68
 80123a4:	2001af38 	.word	0x2001af38
 80123a8:	2001af4c 	.word	0x2001af4c
 80123ac:	2001af60 	.word	0x2001af60
 80123b0:	2001af64 	.word	0x2001af64
 80123b4:	2001b014 	.word	0x2001b014
 80123b8:	2001af74 	.word	0x2001af74
 80123bc:	0801be04 	.word	0x0801be04

080123c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80123c0:	b480      	push	{r7}
 80123c2:	b085      	sub	sp, #20
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	60b9      	str	r1, [r7, #8]
 80123ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	3b04      	subs	r3, #4
 80123d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80123d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	3b04      	subs	r3, #4
 80123de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	f023 0201 	bic.w	r2, r3, #1
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	3b04      	subs	r3, #4
 80123ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80123f0:	4a0c      	ldr	r2, [pc, #48]	@ (8012424 <pxPortInitialiseStack+0x64>)
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	3b14      	subs	r3, #20
 80123fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	3b04      	subs	r3, #4
 8012406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	f06f 0202 	mvn.w	r2, #2
 801240e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	3b20      	subs	r3, #32
 8012414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012416:	68fb      	ldr	r3, [r7, #12]
}
 8012418:	4618      	mov	r0, r3
 801241a:	3714      	adds	r7, #20
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr
 8012424:	08012429 	.word	0x08012429

08012428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012428:	b480      	push	{r7}
 801242a:	b085      	sub	sp, #20
 801242c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801242e:	2300      	movs	r3, #0
 8012430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012432:	4b13      	ldr	r3, [pc, #76]	@ (8012480 <prvTaskExitError+0x58>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801243a:	d00b      	beq.n	8012454 <prvTaskExitError+0x2c>
	__asm volatile
 801243c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012440:	f383 8811 	msr	BASEPRI, r3
 8012444:	f3bf 8f6f 	isb	sy
 8012448:	f3bf 8f4f 	dsb	sy
 801244c:	60fb      	str	r3, [r7, #12]
}
 801244e:	bf00      	nop
 8012450:	bf00      	nop
 8012452:	e7fd      	b.n	8012450 <prvTaskExitError+0x28>
	__asm volatile
 8012454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012458:	f383 8811 	msr	BASEPRI, r3
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	f3bf 8f4f 	dsb	sy
 8012464:	60bb      	str	r3, [r7, #8]
}
 8012466:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012468:	bf00      	nop
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d0fc      	beq.n	801246a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012470:	bf00      	nop
 8012472:	bf00      	nop
 8012474:	3714      	adds	r7, #20
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr
 801247e:	bf00      	nop
 8012480:	200000bc 	.word	0x200000bc
	...

08012490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012490:	4b07      	ldr	r3, [pc, #28]	@ (80124b0 <pxCurrentTCBConst2>)
 8012492:	6819      	ldr	r1, [r3, #0]
 8012494:	6808      	ldr	r0, [r1, #0]
 8012496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801249a:	f380 8809 	msr	PSP, r0
 801249e:	f3bf 8f6f 	isb	sy
 80124a2:	f04f 0000 	mov.w	r0, #0
 80124a6:	f380 8811 	msr	BASEPRI, r0
 80124aa:	4770      	bx	lr
 80124ac:	f3af 8000 	nop.w

080124b0 <pxCurrentTCBConst2>:
 80124b0:	2001aa38 	.word	0x2001aa38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80124b4:	bf00      	nop
 80124b6:	bf00      	nop

080124b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80124b8:	4808      	ldr	r0, [pc, #32]	@ (80124dc <prvPortStartFirstTask+0x24>)
 80124ba:	6800      	ldr	r0, [r0, #0]
 80124bc:	6800      	ldr	r0, [r0, #0]
 80124be:	f380 8808 	msr	MSP, r0
 80124c2:	f04f 0000 	mov.w	r0, #0
 80124c6:	f380 8814 	msr	CONTROL, r0
 80124ca:	b662      	cpsie	i
 80124cc:	b661      	cpsie	f
 80124ce:	f3bf 8f4f 	dsb	sy
 80124d2:	f3bf 8f6f 	isb	sy
 80124d6:	df00      	svc	0
 80124d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80124da:	bf00      	nop
 80124dc:	e000ed08 	.word	0xe000ed08

080124e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b086      	sub	sp, #24
 80124e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80124e6:	4b47      	ldr	r3, [pc, #284]	@ (8012604 <xPortStartScheduler+0x124>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4a47      	ldr	r2, [pc, #284]	@ (8012608 <xPortStartScheduler+0x128>)
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d10b      	bne.n	8012508 <xPortStartScheduler+0x28>
	__asm volatile
 80124f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124f4:	f383 8811 	msr	BASEPRI, r3
 80124f8:	f3bf 8f6f 	isb	sy
 80124fc:	f3bf 8f4f 	dsb	sy
 8012500:	613b      	str	r3, [r7, #16]
}
 8012502:	bf00      	nop
 8012504:	bf00      	nop
 8012506:	e7fd      	b.n	8012504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012508:	4b3e      	ldr	r3, [pc, #248]	@ (8012604 <xPortStartScheduler+0x124>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	4a3f      	ldr	r2, [pc, #252]	@ (801260c <xPortStartScheduler+0x12c>)
 801250e:	4293      	cmp	r3, r2
 8012510:	d10b      	bne.n	801252a <xPortStartScheduler+0x4a>
	__asm volatile
 8012512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012516:	f383 8811 	msr	BASEPRI, r3
 801251a:	f3bf 8f6f 	isb	sy
 801251e:	f3bf 8f4f 	dsb	sy
 8012522:	60fb      	str	r3, [r7, #12]
}
 8012524:	bf00      	nop
 8012526:	bf00      	nop
 8012528:	e7fd      	b.n	8012526 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801252a:	4b39      	ldr	r3, [pc, #228]	@ (8012610 <xPortStartScheduler+0x130>)
 801252c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	b2db      	uxtb	r3, r3
 8012534:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	22ff      	movs	r2, #255	@ 0xff
 801253a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	b2db      	uxtb	r3, r3
 8012542:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012544:	78fb      	ldrb	r3, [r7, #3]
 8012546:	b2db      	uxtb	r3, r3
 8012548:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801254c:	b2da      	uxtb	r2, r3
 801254e:	4b31      	ldr	r3, [pc, #196]	@ (8012614 <xPortStartScheduler+0x134>)
 8012550:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012552:	4b31      	ldr	r3, [pc, #196]	@ (8012618 <xPortStartScheduler+0x138>)
 8012554:	2207      	movs	r2, #7
 8012556:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012558:	e009      	b.n	801256e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801255a:	4b2f      	ldr	r3, [pc, #188]	@ (8012618 <xPortStartScheduler+0x138>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	3b01      	subs	r3, #1
 8012560:	4a2d      	ldr	r2, [pc, #180]	@ (8012618 <xPortStartScheduler+0x138>)
 8012562:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012564:	78fb      	ldrb	r3, [r7, #3]
 8012566:	b2db      	uxtb	r3, r3
 8012568:	005b      	lsls	r3, r3, #1
 801256a:	b2db      	uxtb	r3, r3
 801256c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801256e:	78fb      	ldrb	r3, [r7, #3]
 8012570:	b2db      	uxtb	r3, r3
 8012572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012576:	2b80      	cmp	r3, #128	@ 0x80
 8012578:	d0ef      	beq.n	801255a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801257a:	4b27      	ldr	r3, [pc, #156]	@ (8012618 <xPortStartScheduler+0x138>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f1c3 0307 	rsb	r3, r3, #7
 8012582:	2b04      	cmp	r3, #4
 8012584:	d00b      	beq.n	801259e <xPortStartScheduler+0xbe>
	__asm volatile
 8012586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801258a:	f383 8811 	msr	BASEPRI, r3
 801258e:	f3bf 8f6f 	isb	sy
 8012592:	f3bf 8f4f 	dsb	sy
 8012596:	60bb      	str	r3, [r7, #8]
}
 8012598:	bf00      	nop
 801259a:	bf00      	nop
 801259c:	e7fd      	b.n	801259a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801259e:	4b1e      	ldr	r3, [pc, #120]	@ (8012618 <xPortStartScheduler+0x138>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	021b      	lsls	r3, r3, #8
 80125a4:	4a1c      	ldr	r2, [pc, #112]	@ (8012618 <xPortStartScheduler+0x138>)
 80125a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80125a8:	4b1b      	ldr	r3, [pc, #108]	@ (8012618 <xPortStartScheduler+0x138>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80125b0:	4a19      	ldr	r2, [pc, #100]	@ (8012618 <xPortStartScheduler+0x138>)
 80125b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	b2da      	uxtb	r2, r3
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80125bc:	4b17      	ldr	r3, [pc, #92]	@ (801261c <xPortStartScheduler+0x13c>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	4a16      	ldr	r2, [pc, #88]	@ (801261c <xPortStartScheduler+0x13c>)
 80125c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80125c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80125c8:	4b14      	ldr	r3, [pc, #80]	@ (801261c <xPortStartScheduler+0x13c>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	4a13      	ldr	r2, [pc, #76]	@ (801261c <xPortStartScheduler+0x13c>)
 80125ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80125d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80125d4:	f000 f8da 	bl	801278c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80125d8:	4b11      	ldr	r3, [pc, #68]	@ (8012620 <xPortStartScheduler+0x140>)
 80125da:	2200      	movs	r2, #0
 80125dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80125de:	f000 f8f9 	bl	80127d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80125e2:	4b10      	ldr	r3, [pc, #64]	@ (8012624 <xPortStartScheduler+0x144>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	4a0f      	ldr	r2, [pc, #60]	@ (8012624 <xPortStartScheduler+0x144>)
 80125e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80125ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80125ee:	f7ff ff63 	bl	80124b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80125f2:	f7fe ff01 	bl	80113f8 <vTaskSwitchContext>
	prvTaskExitError();
 80125f6:	f7ff ff17 	bl	8012428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80125fa:	2300      	movs	r3, #0
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3718      	adds	r7, #24
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}
 8012604:	e000ed00 	.word	0xe000ed00
 8012608:	410fc271 	.word	0x410fc271
 801260c:	410fc270 	.word	0x410fc270
 8012610:	e000e400 	.word	0xe000e400
 8012614:	2001b064 	.word	0x2001b064
 8012618:	2001b068 	.word	0x2001b068
 801261c:	e000ed20 	.word	0xe000ed20
 8012620:	200000bc 	.word	0x200000bc
 8012624:	e000ef34 	.word	0xe000ef34

08012628 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012628:	b480      	push	{r7}
 801262a:	b083      	sub	sp, #12
 801262c:	af00      	add	r7, sp, #0
	__asm volatile
 801262e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012632:	f383 8811 	msr	BASEPRI, r3
 8012636:	f3bf 8f6f 	isb	sy
 801263a:	f3bf 8f4f 	dsb	sy
 801263e:	607b      	str	r3, [r7, #4]
}
 8012640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012642:	4b10      	ldr	r3, [pc, #64]	@ (8012684 <vPortEnterCritical+0x5c>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	3301      	adds	r3, #1
 8012648:	4a0e      	ldr	r2, [pc, #56]	@ (8012684 <vPortEnterCritical+0x5c>)
 801264a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801264c:	4b0d      	ldr	r3, [pc, #52]	@ (8012684 <vPortEnterCritical+0x5c>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d110      	bne.n	8012676 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012654:	4b0c      	ldr	r3, [pc, #48]	@ (8012688 <vPortEnterCritical+0x60>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	b2db      	uxtb	r3, r3
 801265a:	2b00      	cmp	r3, #0
 801265c:	d00b      	beq.n	8012676 <vPortEnterCritical+0x4e>
	__asm volatile
 801265e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012662:	f383 8811 	msr	BASEPRI, r3
 8012666:	f3bf 8f6f 	isb	sy
 801266a:	f3bf 8f4f 	dsb	sy
 801266e:	603b      	str	r3, [r7, #0]
}
 8012670:	bf00      	nop
 8012672:	bf00      	nop
 8012674:	e7fd      	b.n	8012672 <vPortEnterCritical+0x4a>
	}
}
 8012676:	bf00      	nop
 8012678:	370c      	adds	r7, #12
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr
 8012682:	bf00      	nop
 8012684:	200000bc 	.word	0x200000bc
 8012688:	e000ed04 	.word	0xe000ed04

0801268c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801268c:	b480      	push	{r7}
 801268e:	b083      	sub	sp, #12
 8012690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012692:	4b12      	ldr	r3, [pc, #72]	@ (80126dc <vPortExitCritical+0x50>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d10b      	bne.n	80126b2 <vPortExitCritical+0x26>
	__asm volatile
 801269a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801269e:	f383 8811 	msr	BASEPRI, r3
 80126a2:	f3bf 8f6f 	isb	sy
 80126a6:	f3bf 8f4f 	dsb	sy
 80126aa:	607b      	str	r3, [r7, #4]
}
 80126ac:	bf00      	nop
 80126ae:	bf00      	nop
 80126b0:	e7fd      	b.n	80126ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80126b2:	4b0a      	ldr	r3, [pc, #40]	@ (80126dc <vPortExitCritical+0x50>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	3b01      	subs	r3, #1
 80126b8:	4a08      	ldr	r2, [pc, #32]	@ (80126dc <vPortExitCritical+0x50>)
 80126ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80126bc:	4b07      	ldr	r3, [pc, #28]	@ (80126dc <vPortExitCritical+0x50>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d105      	bne.n	80126d0 <vPortExitCritical+0x44>
 80126c4:	2300      	movs	r3, #0
 80126c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	f383 8811 	msr	BASEPRI, r3
}
 80126ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80126d0:	bf00      	nop
 80126d2:	370c      	adds	r7, #12
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr
 80126dc:	200000bc 	.word	0x200000bc

080126e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80126e0:	f3ef 8009 	mrs	r0, PSP
 80126e4:	f3bf 8f6f 	isb	sy
 80126e8:	4b15      	ldr	r3, [pc, #84]	@ (8012740 <pxCurrentTCBConst>)
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	f01e 0f10 	tst.w	lr, #16
 80126f0:	bf08      	it	eq
 80126f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80126f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fa:	6010      	str	r0, [r2, #0]
 80126fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012700:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012704:	f380 8811 	msr	BASEPRI, r0
 8012708:	f3bf 8f4f 	dsb	sy
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f7fe fe72 	bl	80113f8 <vTaskSwitchContext>
 8012714:	f04f 0000 	mov.w	r0, #0
 8012718:	f380 8811 	msr	BASEPRI, r0
 801271c:	bc09      	pop	{r0, r3}
 801271e:	6819      	ldr	r1, [r3, #0]
 8012720:	6808      	ldr	r0, [r1, #0]
 8012722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012726:	f01e 0f10 	tst.w	lr, #16
 801272a:	bf08      	it	eq
 801272c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012730:	f380 8809 	msr	PSP, r0
 8012734:	f3bf 8f6f 	isb	sy
 8012738:	4770      	bx	lr
 801273a:	bf00      	nop
 801273c:	f3af 8000 	nop.w

08012740 <pxCurrentTCBConst>:
 8012740:	2001aa38 	.word	0x2001aa38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012744:	bf00      	nop
 8012746:	bf00      	nop

08012748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
	__asm volatile
 801274e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012752:	f383 8811 	msr	BASEPRI, r3
 8012756:	f3bf 8f6f 	isb	sy
 801275a:	f3bf 8f4f 	dsb	sy
 801275e:	607b      	str	r3, [r7, #4]
}
 8012760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012762:	f7fe fd8f 	bl	8011284 <xTaskIncrementTick>
 8012766:	4603      	mov	r3, r0
 8012768:	2b00      	cmp	r3, #0
 801276a:	d003      	beq.n	8012774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801276c:	4b06      	ldr	r3, [pc, #24]	@ (8012788 <xPortSysTickHandler+0x40>)
 801276e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012772:	601a      	str	r2, [r3, #0]
 8012774:	2300      	movs	r3, #0
 8012776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	f383 8811 	msr	BASEPRI, r3
}
 801277e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012780:	bf00      	nop
 8012782:	3708      	adds	r7, #8
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}
 8012788:	e000ed04 	.word	0xe000ed04

0801278c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801278c:	b480      	push	{r7}
 801278e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012790:	4b0b      	ldr	r3, [pc, #44]	@ (80127c0 <vPortSetupTimerInterrupt+0x34>)
 8012792:	2200      	movs	r2, #0
 8012794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012796:	4b0b      	ldr	r3, [pc, #44]	@ (80127c4 <vPortSetupTimerInterrupt+0x38>)
 8012798:	2200      	movs	r2, #0
 801279a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801279c:	4b0a      	ldr	r3, [pc, #40]	@ (80127c8 <vPortSetupTimerInterrupt+0x3c>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4a0a      	ldr	r2, [pc, #40]	@ (80127cc <vPortSetupTimerInterrupt+0x40>)
 80127a2:	fba2 2303 	umull	r2, r3, r2, r3
 80127a6:	099b      	lsrs	r3, r3, #6
 80127a8:	4a09      	ldr	r2, [pc, #36]	@ (80127d0 <vPortSetupTimerInterrupt+0x44>)
 80127aa:	3b01      	subs	r3, #1
 80127ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80127ae:	4b04      	ldr	r3, [pc, #16]	@ (80127c0 <vPortSetupTimerInterrupt+0x34>)
 80127b0:	2207      	movs	r2, #7
 80127b2:	601a      	str	r2, [r3, #0]
}
 80127b4:	bf00      	nop
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop
 80127c0:	e000e010 	.word	0xe000e010
 80127c4:	e000e018 	.word	0xe000e018
 80127c8:	20000004 	.word	0x20000004
 80127cc:	10624dd3 	.word	0x10624dd3
 80127d0:	e000e014 	.word	0xe000e014

080127d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80127d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80127e4 <vPortEnableVFP+0x10>
 80127d8:	6801      	ldr	r1, [r0, #0]
 80127da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80127de:	6001      	str	r1, [r0, #0]
 80127e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80127e2:	bf00      	nop
 80127e4:	e000ed88 	.word	0xe000ed88

080127e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80127e8:	b480      	push	{r7}
 80127ea:	b085      	sub	sp, #20
 80127ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80127ee:	f3ef 8305 	mrs	r3, IPSR
 80127f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	2b0f      	cmp	r3, #15
 80127f8:	d915      	bls.n	8012826 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80127fa:	4a18      	ldr	r2, [pc, #96]	@ (801285c <vPortValidateInterruptPriority+0x74>)
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	4413      	add	r3, r2
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012804:	4b16      	ldr	r3, [pc, #88]	@ (8012860 <vPortValidateInterruptPriority+0x78>)
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	7afa      	ldrb	r2, [r7, #11]
 801280a:	429a      	cmp	r2, r3
 801280c:	d20b      	bcs.n	8012826 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801280e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012812:	f383 8811 	msr	BASEPRI, r3
 8012816:	f3bf 8f6f 	isb	sy
 801281a:	f3bf 8f4f 	dsb	sy
 801281e:	607b      	str	r3, [r7, #4]
}
 8012820:	bf00      	nop
 8012822:	bf00      	nop
 8012824:	e7fd      	b.n	8012822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012826:	4b0f      	ldr	r3, [pc, #60]	@ (8012864 <vPortValidateInterruptPriority+0x7c>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801282e:	4b0e      	ldr	r3, [pc, #56]	@ (8012868 <vPortValidateInterruptPriority+0x80>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	429a      	cmp	r2, r3
 8012834:	d90b      	bls.n	801284e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801283a:	f383 8811 	msr	BASEPRI, r3
 801283e:	f3bf 8f6f 	isb	sy
 8012842:	f3bf 8f4f 	dsb	sy
 8012846:	603b      	str	r3, [r7, #0]
}
 8012848:	bf00      	nop
 801284a:	bf00      	nop
 801284c:	e7fd      	b.n	801284a <vPortValidateInterruptPriority+0x62>
	}
 801284e:	bf00      	nop
 8012850:	3714      	adds	r7, #20
 8012852:	46bd      	mov	sp, r7
 8012854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012858:	4770      	bx	lr
 801285a:	bf00      	nop
 801285c:	e000e3f0 	.word	0xe000e3f0
 8012860:	2001b064 	.word	0x2001b064
 8012864:	e000ed0c 	.word	0xe000ed0c
 8012868:	2001b068 	.word	0x2001b068

0801286c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b08a      	sub	sp, #40	@ 0x28
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012874:	2300      	movs	r3, #0
 8012876:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012878:	f7fe fc10 	bl	801109c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801287c:	4b5c      	ldr	r3, [pc, #368]	@ (80129f0 <pvPortMalloc+0x184>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d101      	bne.n	8012888 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012884:	f000 f924 	bl	8012ad0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012888:	4b5a      	ldr	r3, [pc, #360]	@ (80129f4 <pvPortMalloc+0x188>)
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	4013      	ands	r3, r2
 8012890:	2b00      	cmp	r3, #0
 8012892:	f040 8095 	bne.w	80129c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d01e      	beq.n	80128da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801289c:	2208      	movs	r2, #8
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	4413      	add	r3, r2
 80128a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f003 0307 	and.w	r3, r3, #7
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d015      	beq.n	80128da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f023 0307 	bic.w	r3, r3, #7
 80128b4:	3308      	adds	r3, #8
 80128b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f003 0307 	and.w	r3, r3, #7
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d00b      	beq.n	80128da <pvPortMalloc+0x6e>
	__asm volatile
 80128c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128c6:	f383 8811 	msr	BASEPRI, r3
 80128ca:	f3bf 8f6f 	isb	sy
 80128ce:	f3bf 8f4f 	dsb	sy
 80128d2:	617b      	str	r3, [r7, #20]
}
 80128d4:	bf00      	nop
 80128d6:	bf00      	nop
 80128d8:	e7fd      	b.n	80128d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d06f      	beq.n	80129c0 <pvPortMalloc+0x154>
 80128e0:	4b45      	ldr	r3, [pc, #276]	@ (80129f8 <pvPortMalloc+0x18c>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d86a      	bhi.n	80129c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80128ea:	4b44      	ldr	r3, [pc, #272]	@ (80129fc <pvPortMalloc+0x190>)
 80128ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80128ee:	4b43      	ldr	r3, [pc, #268]	@ (80129fc <pvPortMalloc+0x190>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80128f4:	e004      	b.n	8012900 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80128f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80128fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	687a      	ldr	r2, [r7, #4]
 8012906:	429a      	cmp	r2, r3
 8012908:	d903      	bls.n	8012912 <pvPortMalloc+0xa6>
 801290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d1f1      	bne.n	80128f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012912:	4b37      	ldr	r3, [pc, #220]	@ (80129f0 <pvPortMalloc+0x184>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012918:	429a      	cmp	r2, r3
 801291a:	d051      	beq.n	80129c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801291c:	6a3b      	ldr	r3, [r7, #32]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	2208      	movs	r2, #8
 8012922:	4413      	add	r3, r2
 8012924:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012928:	681a      	ldr	r2, [r3, #0]
 801292a:	6a3b      	ldr	r3, [r7, #32]
 801292c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012930:	685a      	ldr	r2, [r3, #4]
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	1ad2      	subs	r2, r2, r3
 8012936:	2308      	movs	r3, #8
 8012938:	005b      	lsls	r3, r3, #1
 801293a:	429a      	cmp	r2, r3
 801293c:	d920      	bls.n	8012980 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801293e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	4413      	add	r3, r2
 8012944:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012946:	69bb      	ldr	r3, [r7, #24]
 8012948:	f003 0307 	and.w	r3, r3, #7
 801294c:	2b00      	cmp	r3, #0
 801294e:	d00b      	beq.n	8012968 <pvPortMalloc+0xfc>
	__asm volatile
 8012950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012954:	f383 8811 	msr	BASEPRI, r3
 8012958:	f3bf 8f6f 	isb	sy
 801295c:	f3bf 8f4f 	dsb	sy
 8012960:	613b      	str	r3, [r7, #16]
}
 8012962:	bf00      	nop
 8012964:	bf00      	nop
 8012966:	e7fd      	b.n	8012964 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801296a:	685a      	ldr	r2, [r3, #4]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	1ad2      	subs	r2, r2, r3
 8012970:	69bb      	ldr	r3, [r7, #24]
 8012972:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012976:	687a      	ldr	r2, [r7, #4]
 8012978:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801297a:	69b8      	ldr	r0, [r7, #24]
 801297c:	f000 f90a 	bl	8012b94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012980:	4b1d      	ldr	r3, [pc, #116]	@ (80129f8 <pvPortMalloc+0x18c>)
 8012982:	681a      	ldr	r2, [r3, #0]
 8012984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	1ad3      	subs	r3, r2, r3
 801298a:	4a1b      	ldr	r2, [pc, #108]	@ (80129f8 <pvPortMalloc+0x18c>)
 801298c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801298e:	4b1a      	ldr	r3, [pc, #104]	@ (80129f8 <pvPortMalloc+0x18c>)
 8012990:	681a      	ldr	r2, [r3, #0]
 8012992:	4b1b      	ldr	r3, [pc, #108]	@ (8012a00 <pvPortMalloc+0x194>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	429a      	cmp	r2, r3
 8012998:	d203      	bcs.n	80129a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801299a:	4b17      	ldr	r3, [pc, #92]	@ (80129f8 <pvPortMalloc+0x18c>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4a18      	ldr	r2, [pc, #96]	@ (8012a00 <pvPortMalloc+0x194>)
 80129a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80129a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129a4:	685a      	ldr	r2, [r3, #4]
 80129a6:	4b13      	ldr	r3, [pc, #76]	@ (80129f4 <pvPortMalloc+0x188>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	431a      	orrs	r2, r3
 80129ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80129b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129b2:	2200      	movs	r2, #0
 80129b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80129b6:	4b13      	ldr	r3, [pc, #76]	@ (8012a04 <pvPortMalloc+0x198>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	3301      	adds	r3, #1
 80129bc:	4a11      	ldr	r2, [pc, #68]	@ (8012a04 <pvPortMalloc+0x198>)
 80129be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80129c0:	f7fe fbb2 	bl	8011128 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	f003 0307 	and.w	r3, r3, #7
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d00b      	beq.n	80129e6 <pvPortMalloc+0x17a>
	__asm volatile
 80129ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129d2:	f383 8811 	msr	BASEPRI, r3
 80129d6:	f3bf 8f6f 	isb	sy
 80129da:	f3bf 8f4f 	dsb	sy
 80129de:	60fb      	str	r3, [r7, #12]
}
 80129e0:	bf00      	nop
 80129e2:	bf00      	nop
 80129e4:	e7fd      	b.n	80129e2 <pvPortMalloc+0x176>
	return pvReturn;
 80129e6:	69fb      	ldr	r3, [r7, #28]
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3728      	adds	r7, #40	@ 0x28
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	20023074 	.word	0x20023074
 80129f4:	20023088 	.word	0x20023088
 80129f8:	20023078 	.word	0x20023078
 80129fc:	2002306c 	.word	0x2002306c
 8012a00:	2002307c 	.word	0x2002307c
 8012a04:	20023080 	.word	0x20023080

08012a08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b086      	sub	sp, #24
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d04f      	beq.n	8012aba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012a1a:	2308      	movs	r3, #8
 8012a1c:	425b      	negs	r3, r3
 8012a1e:	697a      	ldr	r2, [r7, #20]
 8012a20:	4413      	add	r3, r2
 8012a22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	685a      	ldr	r2, [r3, #4]
 8012a2c:	4b25      	ldr	r3, [pc, #148]	@ (8012ac4 <vPortFree+0xbc>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4013      	ands	r3, r2
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d10b      	bne.n	8012a4e <vPortFree+0x46>
	__asm volatile
 8012a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a3a:	f383 8811 	msr	BASEPRI, r3
 8012a3e:	f3bf 8f6f 	isb	sy
 8012a42:	f3bf 8f4f 	dsb	sy
 8012a46:	60fb      	str	r3, [r7, #12]
}
 8012a48:	bf00      	nop
 8012a4a:	bf00      	nop
 8012a4c:	e7fd      	b.n	8012a4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d00b      	beq.n	8012a6e <vPortFree+0x66>
	__asm volatile
 8012a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a5a:	f383 8811 	msr	BASEPRI, r3
 8012a5e:	f3bf 8f6f 	isb	sy
 8012a62:	f3bf 8f4f 	dsb	sy
 8012a66:	60bb      	str	r3, [r7, #8]
}
 8012a68:	bf00      	nop
 8012a6a:	bf00      	nop
 8012a6c:	e7fd      	b.n	8012a6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	685a      	ldr	r2, [r3, #4]
 8012a72:	4b14      	ldr	r3, [pc, #80]	@ (8012ac4 <vPortFree+0xbc>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	4013      	ands	r3, r2
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d01e      	beq.n	8012aba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d11a      	bne.n	8012aba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	685a      	ldr	r2, [r3, #4]
 8012a88:	4b0e      	ldr	r3, [pc, #56]	@ (8012ac4 <vPortFree+0xbc>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	43db      	mvns	r3, r3
 8012a8e:	401a      	ands	r2, r3
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012a94:	f7fe fb02 	bl	801109c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	685a      	ldr	r2, [r3, #4]
 8012a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8012ac8 <vPortFree+0xc0>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	4a09      	ldr	r2, [pc, #36]	@ (8012ac8 <vPortFree+0xc0>)
 8012aa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012aa6:	6938      	ldr	r0, [r7, #16]
 8012aa8:	f000 f874 	bl	8012b94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012aac:	4b07      	ldr	r3, [pc, #28]	@ (8012acc <vPortFree+0xc4>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	4a06      	ldr	r2, [pc, #24]	@ (8012acc <vPortFree+0xc4>)
 8012ab4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012ab6:	f7fe fb37 	bl	8011128 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012aba:	bf00      	nop
 8012abc:	3718      	adds	r7, #24
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	20023088 	.word	0x20023088
 8012ac8:	20023078 	.word	0x20023078
 8012acc:	20023084 	.word	0x20023084

08012ad0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	b085      	sub	sp, #20
 8012ad4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012ada:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012adc:	4b27      	ldr	r3, [pc, #156]	@ (8012b7c <prvHeapInit+0xac>)
 8012ade:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	f003 0307 	and.w	r3, r3, #7
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d00c      	beq.n	8012b04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	3307      	adds	r3, #7
 8012aee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	f023 0307 	bic.w	r3, r3, #7
 8012af6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012af8:	68ba      	ldr	r2, [r7, #8]
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	1ad3      	subs	r3, r2, r3
 8012afe:	4a1f      	ldr	r2, [pc, #124]	@ (8012b7c <prvHeapInit+0xac>)
 8012b00:	4413      	add	r3, r2
 8012b02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012b08:	4a1d      	ldr	r2, [pc, #116]	@ (8012b80 <prvHeapInit+0xb0>)
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8012b80 <prvHeapInit+0xb0>)
 8012b10:	2200      	movs	r2, #0
 8012b12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	68ba      	ldr	r2, [r7, #8]
 8012b18:	4413      	add	r3, r2
 8012b1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012b1c:	2208      	movs	r2, #8
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	1a9b      	subs	r3, r3, r2
 8012b22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f023 0307 	bic.w	r3, r3, #7
 8012b2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	4a15      	ldr	r2, [pc, #84]	@ (8012b84 <prvHeapInit+0xb4>)
 8012b30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012b32:	4b14      	ldr	r3, [pc, #80]	@ (8012b84 <prvHeapInit+0xb4>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	2200      	movs	r2, #0
 8012b38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012b3a:	4b12      	ldr	r3, [pc, #72]	@ (8012b84 <prvHeapInit+0xb4>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	68fa      	ldr	r2, [r7, #12]
 8012b4a:	1ad2      	subs	r2, r2, r3
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012b50:	4b0c      	ldr	r3, [pc, #48]	@ (8012b84 <prvHeapInit+0xb4>)
 8012b52:	681a      	ldr	r2, [r3, #0]
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8012b88 <prvHeapInit+0xb8>)
 8012b5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	4a09      	ldr	r2, [pc, #36]	@ (8012b8c <prvHeapInit+0xbc>)
 8012b66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012b68:	4b09      	ldr	r3, [pc, #36]	@ (8012b90 <prvHeapInit+0xc0>)
 8012b6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012b6e:	601a      	str	r2, [r3, #0]
}
 8012b70:	bf00      	nop
 8012b72:	3714      	adds	r7, #20
 8012b74:	46bd      	mov	sp, r7
 8012b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7a:	4770      	bx	lr
 8012b7c:	2001b06c 	.word	0x2001b06c
 8012b80:	2002306c 	.word	0x2002306c
 8012b84:	20023074 	.word	0x20023074
 8012b88:	2002307c 	.word	0x2002307c
 8012b8c:	20023078 	.word	0x20023078
 8012b90:	20023088 	.word	0x20023088

08012b94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012b94:	b480      	push	{r7}
 8012b96:	b085      	sub	sp, #20
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012b9c:	4b28      	ldr	r3, [pc, #160]	@ (8012c40 <prvInsertBlockIntoFreeList+0xac>)
 8012b9e:	60fb      	str	r3, [r7, #12]
 8012ba0:	e002      	b.n	8012ba8 <prvInsertBlockIntoFreeList+0x14>
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	60fb      	str	r3, [r7, #12]
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d8f7      	bhi.n	8012ba2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	68ba      	ldr	r2, [r7, #8]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d108      	bne.n	8012bd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	685a      	ldr	r2, [r3, #4]
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	441a      	add	r2, r3
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	68ba      	ldr	r2, [r7, #8]
 8012be0:	441a      	add	r2, r3
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d118      	bne.n	8012c1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	681a      	ldr	r2, [r3, #0]
 8012bee:	4b15      	ldr	r3, [pc, #84]	@ (8012c44 <prvInsertBlockIntoFreeList+0xb0>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d00d      	beq.n	8012c12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	685a      	ldr	r2, [r3, #4]
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	441a      	add	r2, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	681a      	ldr	r2, [r3, #0]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	601a      	str	r2, [r3, #0]
 8012c10:	e008      	b.n	8012c24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012c12:	4b0c      	ldr	r3, [pc, #48]	@ (8012c44 <prvInsertBlockIntoFreeList+0xb0>)
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	601a      	str	r2, [r3, #0]
 8012c1a:	e003      	b.n	8012c24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012c24:	68fa      	ldr	r2, [r7, #12]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d002      	beq.n	8012c32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c32:	bf00      	nop
 8012c34:	3714      	adds	r7, #20
 8012c36:	46bd      	mov	sp, r7
 8012c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3c:	4770      	bx	lr
 8012c3e:	bf00      	nop
 8012c40:	2002306c 	.word	0x2002306c
 8012c44:	20023074 	.word	0x20023074

08012c48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	SET_BIT(PWR->CR2, PWR_PVM_1);
 8012c4c:	4b20      	ldr	r3, [pc, #128]	@ (8012cd0 <MX_USB_DEVICE_Init+0x88>)
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	4a1f      	ldr	r2, [pc, #124]	@ (8012cd0 <MX_USB_DEVICE_Init+0x88>)
 8012c52:	f043 0310 	orr.w	r3, r3, #16
 8012c56:	6053      	str	r3, [r2, #4]
	vTaskDelay(100);
 8012c58:	2064      	movs	r0, #100	@ 0x64
 8012c5a:	f7fe f979 	bl	8010f50 <vTaskDelay>

	if (!HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_PVMO1)) //Detect USBVDD
 8012c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8012cd0 <MX_USB_DEVICE_Init+0x88>)
 8012c60:	695b      	ldr	r3, [r3, #20]
 8012c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012c6a:	d024      	beq.n	8012cb6 <MX_USB_DEVICE_Init+0x6e>
	{
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	4919      	ldr	r1, [pc, #100]	@ (8012cd4 <MX_USB_DEVICE_Init+0x8c>)
 8012c70:	4819      	ldr	r0, [pc, #100]	@ (8012cd8 <MX_USB_DEVICE_Init+0x90>)
 8012c72:	f7fb f897 	bl	800dda4 <USBD_Init>
 8012c76:	4603      	mov	r3, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d001      	beq.n	8012c80 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
 8012c7c:	f7f0 faee 	bl	800325c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012c80:	4916      	ldr	r1, [pc, #88]	@ (8012cdc <MX_USB_DEVICE_Init+0x94>)
 8012c82:	4815      	ldr	r0, [pc, #84]	@ (8012cd8 <MX_USB_DEVICE_Init+0x90>)
 8012c84:	f7fb f8be 	bl	800de04 <USBD_RegisterClass>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d001      	beq.n	8012c92 <MX_USB_DEVICE_Init+0x4a>
  {
    Error_Handler();
 8012c8e:	f7f0 fae5 	bl	800325c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012c92:	4913      	ldr	r1, [pc, #76]	@ (8012ce0 <MX_USB_DEVICE_Init+0x98>)
 8012c94:	4810      	ldr	r0, [pc, #64]	@ (8012cd8 <MX_USB_DEVICE_Init+0x90>)
 8012c96:	f7fa ffb5 	bl	800dc04 <USBD_CDC_RegisterInterface>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d001      	beq.n	8012ca4 <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
 8012ca0:	f7f0 fadc 	bl	800325c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012ca4:	480c      	ldr	r0, [pc, #48]	@ (8012cd8 <MX_USB_DEVICE_Init+0x90>)
 8012ca6:	f7fb f8e3 	bl	800de70 <USBD_Start>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d008      	beq.n	8012cc2 <MX_USB_DEVICE_Init+0x7a>
  {
    Error_Handler();
 8012cb0:	f7f0 fad4 	bl	800325c <Error_Handler>
 8012cb4:	e005      	b.n	8012cc2 <MX_USB_DEVICE_Init+0x7a>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	} else
			CLEAR_BIT(PWR->CR2, PWR_PVM_1);
 8012cb6:	4b06      	ldr	r3, [pc, #24]	@ (8012cd0 <MX_USB_DEVICE_Init+0x88>)
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	4a05      	ldr	r2, [pc, #20]	@ (8012cd0 <MX_USB_DEVICE_Init+0x88>)
 8012cbc:	f023 0310 	bic.w	r3, r3, #16
 8012cc0:	6053      	str	r3, [r2, #4]
		vTaskDelay(300);
 8012cc2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8012cc6:	f7fe f943 	bl	8010f50 <vTaskDelay>
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012cca:	bf00      	nop
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	40007000 	.word	0x40007000
 8012cd4:	200000d4 	.word	0x200000d4
 8012cd8:	2002308c 	.word	0x2002308c
 8012cdc:	2000003c 	.word	0x2000003c
 8012ce0:	200000c0 	.word	0x200000c0

08012ce4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012ce8:	2200      	movs	r2, #0
 8012cea:	4905      	ldr	r1, [pc, #20]	@ (8012d00 <CDC_Init_FS+0x1c>)
 8012cec:	4805      	ldr	r0, [pc, #20]	@ (8012d04 <CDC_Init_FS+0x20>)
 8012cee:	f7fa ffa3 	bl	800dc38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012cf2:	4905      	ldr	r1, [pc, #20]	@ (8012d08 <CDC_Init_FS+0x24>)
 8012cf4:	4803      	ldr	r0, [pc, #12]	@ (8012d04 <CDC_Init_FS+0x20>)
 8012cf6:	f7fa ffc1 	bl	800dc7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012cfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	bd80      	pop	{r7, pc}
 8012d00:	20023b68 	.word	0x20023b68
 8012d04:	2002308c 	.word	0x2002308c
 8012d08:	20023368 	.word	0x20023368

08012d0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012d10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	46bd      	mov	sp, r7
 8012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1a:	4770      	bx	lr

08012d1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	4603      	mov	r3, r0
 8012d24:	6039      	str	r1, [r7, #0]
 8012d26:	71fb      	strb	r3, [r7, #7]
 8012d28:	4613      	mov	r3, r2
 8012d2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012d2c:	79fb      	ldrb	r3, [r7, #7]
 8012d2e:	2b23      	cmp	r3, #35	@ 0x23
 8012d30:	d84a      	bhi.n	8012dc8 <CDC_Control_FS+0xac>
 8012d32:	a201      	add	r2, pc, #4	@ (adr r2, 8012d38 <CDC_Control_FS+0x1c>)
 8012d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d38:	08012dc9 	.word	0x08012dc9
 8012d3c:	08012dc9 	.word	0x08012dc9
 8012d40:	08012dc9 	.word	0x08012dc9
 8012d44:	08012dc9 	.word	0x08012dc9
 8012d48:	08012dc9 	.word	0x08012dc9
 8012d4c:	08012dc9 	.word	0x08012dc9
 8012d50:	08012dc9 	.word	0x08012dc9
 8012d54:	08012dc9 	.word	0x08012dc9
 8012d58:	08012dc9 	.word	0x08012dc9
 8012d5c:	08012dc9 	.word	0x08012dc9
 8012d60:	08012dc9 	.word	0x08012dc9
 8012d64:	08012dc9 	.word	0x08012dc9
 8012d68:	08012dc9 	.word	0x08012dc9
 8012d6c:	08012dc9 	.word	0x08012dc9
 8012d70:	08012dc9 	.word	0x08012dc9
 8012d74:	08012dc9 	.word	0x08012dc9
 8012d78:	08012dc9 	.word	0x08012dc9
 8012d7c:	08012dc9 	.word	0x08012dc9
 8012d80:	08012dc9 	.word	0x08012dc9
 8012d84:	08012dc9 	.word	0x08012dc9
 8012d88:	08012dc9 	.word	0x08012dc9
 8012d8c:	08012dc9 	.word	0x08012dc9
 8012d90:	08012dc9 	.word	0x08012dc9
 8012d94:	08012dc9 	.word	0x08012dc9
 8012d98:	08012dc9 	.word	0x08012dc9
 8012d9c:	08012dc9 	.word	0x08012dc9
 8012da0:	08012dc9 	.word	0x08012dc9
 8012da4:	08012dc9 	.word	0x08012dc9
 8012da8:	08012dc9 	.word	0x08012dc9
 8012dac:	08012dc9 	.word	0x08012dc9
 8012db0:	08012dc9 	.word	0x08012dc9
 8012db4:	08012dc9 	.word	0x08012dc9
 8012db8:	08012dc9 	.word	0x08012dc9
 8012dbc:	08012dc9 	.word	0x08012dc9
 8012dc0:	08012dc9 	.word	0x08012dc9
 8012dc4:	08012dc9 	.word	0x08012dc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012dc8:	bf00      	nop
  }

  return (USBD_OK);
 8012dca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	370c      	adds	r7, #12
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr

08012dd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b086      	sub	sp, #24
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	osStatus_t res1 = osOK, res2 = osOK;
 8012de2:	2300      	movs	r3, #0
 8012de4:	613b      	str	r3, [r7, #16]
 8012de6:	2300      	movs	r3, #0
 8012de8:	60fb      	str	r3, [r7, #12]
		#ifdef debug_USB
			kappa("\r\nLen: %d - [", (*Len));
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	4619      	mov	r1, r3
 8012df0:	4819      	ldr	r0, [pc, #100]	@ (8012e58 <CDC_Receive_FS+0x80>)
 8012df2:	f7ee fb8b 	bl	800150c <kappa>
			for(int ii =0;ii<(*Len);ii++)
 8012df6:	2300      	movs	r3, #0
 8012df8:	617b      	str	r3, [r7, #20]
 8012dfa:	e00a      	b.n	8012e12 <CDC_Receive_FS+0x3a>
				kappa("%02x", Buf[ii]);
 8012dfc:	697b      	ldr	r3, [r7, #20]
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	4413      	add	r3, r2
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	4619      	mov	r1, r3
 8012e06:	4815      	ldr	r0, [pc, #84]	@ (8012e5c <CDC_Receive_FS+0x84>)
 8012e08:	f7ee fb80 	bl	800150c <kappa>
			for(int ii =0;ii<(*Len);ii++)
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	3301      	adds	r3, #1
 8012e10:	617b      	str	r3, [r7, #20]
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	681a      	ldr	r2, [r3, #0]
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d8ef      	bhi.n	8012dfc <CDC_Receive_FS+0x24>
			kappa("]\r\n");
 8012e1c:	4810      	ldr	r0, [pc, #64]	@ (8012e60 <CDC_Receive_FS+0x88>)
 8012e1e:	f7ee fb75 	bl	800150c <kappa>
		#endif

		res1 = Queue_put(&USB_msgs, Buf, (*Len));
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	461a      	mov	r2, r3
 8012e28:	6879      	ldr	r1, [r7, #4]
 8012e2a:	480e      	ldr	r0, [pc, #56]	@ (8012e64 <CDC_Receive_FS+0x8c>)
 8012e2c:	f7ee fed8 	bl	8001be0 <Queue_put>
 8012e30:	6138      	str	r0, [r7, #16]
		res2 = osSemaphoreRelease(sem_usbHandle);
 8012e32:	4b0d      	ldr	r3, [pc, #52]	@ (8012e68 <CDC_Receive_FS+0x90>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7fc fcb4 	bl	800f7a4 <osSemaphoreRelease>
 8012e3c:	60f8      	str	r0, [r7, #12]

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012e3e:	6879      	ldr	r1, [r7, #4]
 8012e40:	480a      	ldr	r0, [pc, #40]	@ (8012e6c <CDC_Receive_FS+0x94>)
 8012e42:	f7fa ff1b 	bl	800dc7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012e46:	4809      	ldr	r0, [pc, #36]	@ (8012e6c <CDC_Receive_FS+0x94>)
 8012e48:	f7fa ff76 	bl	800dd38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012e4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3718      	adds	r7, #24
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	0801be0c 	.word	0x0801be0c
 8012e5c:	0801be1c 	.word	0x0801be1c
 8012e60:	0801be24 	.word	0x0801be24
 8012e64:	20000b94 	.word	0x20000b94
 8012e68:	20000abc 	.word	0x20000abc
 8012e6c:	2002308c 	.word	0x2002308c

08012e70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b084      	sub	sp, #16
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	460b      	mov	r3, r1
 8012e7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012e80:	4b0d      	ldr	r3, [pc, #52]	@ (8012eb8 <CDC_Transmit_FS+0x48>)
 8012e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012e86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d001      	beq.n	8012e96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012e92:	2301      	movs	r3, #1
 8012e94:	e00b      	b.n	8012eae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012e96:	887b      	ldrh	r3, [r7, #2]
 8012e98:	461a      	mov	r2, r3
 8012e9a:	6879      	ldr	r1, [r7, #4]
 8012e9c:	4806      	ldr	r0, [pc, #24]	@ (8012eb8 <CDC_Transmit_FS+0x48>)
 8012e9e:	f7fa fecb 	bl	800dc38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012ea2:	4805      	ldr	r0, [pc, #20]	@ (8012eb8 <CDC_Transmit_FS+0x48>)
 8012ea4:	f7fa ff08 	bl	800dcb8 <USBD_CDC_TransmitPacket>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	2002308c 	.word	0x2002308c

08012ebc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b087      	sub	sp, #28
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	60f8      	str	r0, [r7, #12]
 8012ec4:	60b9      	str	r1, [r7, #8]
 8012ec6:	4613      	mov	r3, r2
 8012ec8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	371c      	adds	r7, #28
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr
	...

08012ee0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b083      	sub	sp, #12
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	6039      	str	r1, [r7, #0]
 8012eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	2212      	movs	r2, #18
 8012ef0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012ef2:	4b03      	ldr	r3, [pc, #12]	@ (8012f00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	370c      	adds	r7, #12
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efe:	4770      	bx	lr
 8012f00:	200000f4 	.word	0x200000f4

08012f04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f04:	b480      	push	{r7}
 8012f06:	b083      	sub	sp, #12
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	6039      	str	r1, [r7, #0]
 8012f0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	2204      	movs	r2, #4
 8012f14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012f16:	4b03      	ldr	r3, [pc, #12]	@ (8012f24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	370c      	adds	r7, #12
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f22:	4770      	bx	lr
 8012f24:	20000114 	.word	0x20000114

08012f28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	4603      	mov	r3, r0
 8012f30:	6039      	str	r1, [r7, #0]
 8012f32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012f34:	79fb      	ldrb	r3, [r7, #7]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d105      	bne.n	8012f46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012f3a:	683a      	ldr	r2, [r7, #0]
 8012f3c:	4907      	ldr	r1, [pc, #28]	@ (8012f5c <USBD_FS_ProductStrDescriptor+0x34>)
 8012f3e:	4808      	ldr	r0, [pc, #32]	@ (8012f60 <USBD_FS_ProductStrDescriptor+0x38>)
 8012f40:	f7fc f8de 	bl	800f100 <USBD_GetString>
 8012f44:	e004      	b.n	8012f50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012f46:	683a      	ldr	r2, [r7, #0]
 8012f48:	4904      	ldr	r1, [pc, #16]	@ (8012f5c <USBD_FS_ProductStrDescriptor+0x34>)
 8012f4a:	4805      	ldr	r0, [pc, #20]	@ (8012f60 <USBD_FS_ProductStrDescriptor+0x38>)
 8012f4c:	f7fc f8d8 	bl	800f100 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012f50:	4b02      	ldr	r3, [pc, #8]	@ (8012f5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3708      	adds	r7, #8
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	20024368 	.word	0x20024368
 8012f60:	0801be28 	.word	0x0801be28

08012f64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b082      	sub	sp, #8
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	6039      	str	r1, [r7, #0]
 8012f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012f70:	683a      	ldr	r2, [r7, #0]
 8012f72:	4904      	ldr	r1, [pc, #16]	@ (8012f84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012f74:	4804      	ldr	r0, [pc, #16]	@ (8012f88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012f76:	f7fc f8c3 	bl	800f100 <USBD_GetString>
  return USBD_StrDesc;
 8012f7a:	4b02      	ldr	r3, [pc, #8]	@ (8012f84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3708      	adds	r7, #8
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	20024368 	.word	0x20024368
 8012f88:	0801be40 	.word	0x0801be40

08012f8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	4603      	mov	r3, r0
 8012f94:	6039      	str	r1, [r7, #0]
 8012f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	221a      	movs	r2, #26
 8012f9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012f9e:	f000 f855 	bl	801304c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012fa2:	4b02      	ldr	r3, [pc, #8]	@ (8012fac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3708      	adds	r7, #8
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}
 8012fac:	20000118 	.word	0x20000118

08012fb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	6039      	str	r1, [r7, #0]
 8012fba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012fbc:	79fb      	ldrb	r3, [r7, #7]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d105      	bne.n	8012fce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012fc2:	683a      	ldr	r2, [r7, #0]
 8012fc4:	4907      	ldr	r1, [pc, #28]	@ (8012fe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012fc6:	4808      	ldr	r0, [pc, #32]	@ (8012fe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012fc8:	f7fc f89a 	bl	800f100 <USBD_GetString>
 8012fcc:	e004      	b.n	8012fd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012fce:	683a      	ldr	r2, [r7, #0]
 8012fd0:	4904      	ldr	r1, [pc, #16]	@ (8012fe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012fd2:	4805      	ldr	r0, [pc, #20]	@ (8012fe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012fd4:	f7fc f894 	bl	800f100 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012fd8:	4b02      	ldr	r3, [pc, #8]	@ (8012fe4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3708      	adds	r7, #8
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	20024368 	.word	0x20024368
 8012fe8:	0801be54 	.word	0x0801be54

08012fec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	6039      	str	r1, [r7, #0]
 8012ff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ff8:	79fb      	ldrb	r3, [r7, #7]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d105      	bne.n	801300a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012ffe:	683a      	ldr	r2, [r7, #0]
 8013000:	4907      	ldr	r1, [pc, #28]	@ (8013020 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013002:	4808      	ldr	r0, [pc, #32]	@ (8013024 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013004:	f7fc f87c 	bl	800f100 <USBD_GetString>
 8013008:	e004      	b.n	8013014 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801300a:	683a      	ldr	r2, [r7, #0]
 801300c:	4904      	ldr	r1, [pc, #16]	@ (8013020 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801300e:	4805      	ldr	r0, [pc, #20]	@ (8013024 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013010:	f7fc f876 	bl	800f100 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013014:	4b02      	ldr	r3, [pc, #8]	@ (8013020 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013016:	4618      	mov	r0, r3
 8013018:	3708      	adds	r7, #8
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	20024368 	.word	0x20024368
 8013024:	0801be60 	.word	0x0801be60

08013028 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	4603      	mov	r3, r0
 8013030:	6039      	str	r1, [r7, #0]
 8013032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	220c      	movs	r2, #12
 8013038:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801303a:	4b03      	ldr	r3, [pc, #12]	@ (8013048 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801303c:	4618      	mov	r0, r3
 801303e:	370c      	adds	r7, #12
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr
 8013048:	20000108 	.word	0x20000108

0801304c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013052:	4b0f      	ldr	r3, [pc, #60]	@ (8013090 <Get_SerialNum+0x44>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013058:	4b0e      	ldr	r3, [pc, #56]	@ (8013094 <Get_SerialNum+0x48>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801305e:	4b0e      	ldr	r3, [pc, #56]	@ (8013098 <Get_SerialNum+0x4c>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013064:	68fa      	ldr	r2, [r7, #12]
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	4413      	add	r3, r2
 801306a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d009      	beq.n	8013086 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013072:	2208      	movs	r2, #8
 8013074:	4909      	ldr	r1, [pc, #36]	@ (801309c <Get_SerialNum+0x50>)
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	f000 f814 	bl	80130a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801307c:	2204      	movs	r2, #4
 801307e:	4908      	ldr	r1, [pc, #32]	@ (80130a0 <Get_SerialNum+0x54>)
 8013080:	68b8      	ldr	r0, [r7, #8]
 8013082:	f000 f80f 	bl	80130a4 <IntToUnicode>
  }
}
 8013086:	bf00      	nop
 8013088:	3710      	adds	r7, #16
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
 801308e:	bf00      	nop
 8013090:	1fff7590 	.word	0x1fff7590
 8013094:	1fff7594 	.word	0x1fff7594
 8013098:	1fff7598 	.word	0x1fff7598
 801309c:	2000011a 	.word	0x2000011a
 80130a0:	2000012a 	.word	0x2000012a

080130a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80130a4:	b480      	push	{r7}
 80130a6:	b087      	sub	sp, #28
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	60f8      	str	r0, [r7, #12]
 80130ac:	60b9      	str	r1, [r7, #8]
 80130ae:	4613      	mov	r3, r2
 80130b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80130b2:	2300      	movs	r3, #0
 80130b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80130b6:	2300      	movs	r3, #0
 80130b8:	75fb      	strb	r3, [r7, #23]
 80130ba:	e027      	b.n	801310c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	0f1b      	lsrs	r3, r3, #28
 80130c0:	2b09      	cmp	r3, #9
 80130c2:	d80b      	bhi.n	80130dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	0f1b      	lsrs	r3, r3, #28
 80130c8:	b2da      	uxtb	r2, r3
 80130ca:	7dfb      	ldrb	r3, [r7, #23]
 80130cc:	005b      	lsls	r3, r3, #1
 80130ce:	4619      	mov	r1, r3
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	440b      	add	r3, r1
 80130d4:	3230      	adds	r2, #48	@ 0x30
 80130d6:	b2d2      	uxtb	r2, r2
 80130d8:	701a      	strb	r2, [r3, #0]
 80130da:	e00a      	b.n	80130f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	0f1b      	lsrs	r3, r3, #28
 80130e0:	b2da      	uxtb	r2, r3
 80130e2:	7dfb      	ldrb	r3, [r7, #23]
 80130e4:	005b      	lsls	r3, r3, #1
 80130e6:	4619      	mov	r1, r3
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	440b      	add	r3, r1
 80130ec:	3237      	adds	r2, #55	@ 0x37
 80130ee:	b2d2      	uxtb	r2, r2
 80130f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	011b      	lsls	r3, r3, #4
 80130f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80130f8:	7dfb      	ldrb	r3, [r7, #23]
 80130fa:	005b      	lsls	r3, r3, #1
 80130fc:	3301      	adds	r3, #1
 80130fe:	68ba      	ldr	r2, [r7, #8]
 8013100:	4413      	add	r3, r2
 8013102:	2200      	movs	r2, #0
 8013104:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013106:	7dfb      	ldrb	r3, [r7, #23]
 8013108:	3301      	adds	r3, #1
 801310a:	75fb      	strb	r3, [r7, #23]
 801310c:	7dfa      	ldrb	r2, [r7, #23]
 801310e:	79fb      	ldrb	r3, [r7, #7]
 8013110:	429a      	cmp	r2, r3
 8013112:	d3d3      	bcc.n	80130bc <IntToUnicode+0x18>
  }
}
 8013114:	bf00      	nop
 8013116:	bf00      	nop
 8013118:	371c      	adds	r7, #28
 801311a:	46bd      	mov	sp, r7
 801311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013120:	4770      	bx	lr
	...

08013124 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b0a4      	sub	sp, #144	@ 0x90
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801312c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8013130:	2200      	movs	r2, #0
 8013132:	601a      	str	r2, [r3, #0]
 8013134:	605a      	str	r2, [r3, #4]
 8013136:	609a      	str	r2, [r3, #8]
 8013138:	60da      	str	r2, [r3, #12]
 801313a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801313c:	f107 0314 	add.w	r3, r7, #20
 8013140:	2268      	movs	r2, #104	@ 0x68
 8013142:	2100      	movs	r1, #0
 8013144:	4618      	mov	r0, r3
 8013146:	f002 fe43 	bl	8015dd0 <memset>
  if(pcdHandle->Instance==USB)
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	4a26      	ldr	r2, [pc, #152]	@ (80131e8 <HAL_PCD_MspInit+0xc4>)
 8013150:	4293      	cmp	r3, r2
 8013152:	d144      	bne.n	80131de <HAL_PCD_MspInit+0xba>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013154:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013158:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801315a:	2300      	movs	r3, #0
 801315c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801315e:	f107 0314 	add.w	r3, r7, #20
 8013162:	4618      	mov	r0, r3
 8013164:	f7f4 fc98 	bl	8007a98 <HAL_RCCEx_PeriphCLKConfig>
 8013168:	4603      	mov	r3, r0
 801316a:	2b00      	cmp	r3, #0
 801316c:	d001      	beq.n	8013172 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 801316e:	f7f0 f875 	bl	800325c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013172:	4b1e      	ldr	r3, [pc, #120]	@ (80131ec <HAL_PCD_MspInit+0xc8>)
 8013174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013176:	4a1d      	ldr	r2, [pc, #116]	@ (80131ec <HAL_PCD_MspInit+0xc8>)
 8013178:	f043 0301 	orr.w	r3, r3, #1
 801317c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801317e:	4b1b      	ldr	r3, [pc, #108]	@ (80131ec <HAL_PCD_MspInit+0xc8>)
 8013180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013182:	f003 0301 	and.w	r3, r3, #1
 8013186:	613b      	str	r3, [r7, #16]
 8013188:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801318a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801318e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013190:	2302      	movs	r3, #2
 8013192:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013196:	2300      	movs	r3, #0
 8013198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801319c:	2303      	movs	r3, #3
 801319e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 80131a2:	230a      	movs	r3, #10
 80131a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80131a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80131ac:	4619      	mov	r1, r3
 80131ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80131b2:	f7f1 fa9f 	bl	80046f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80131b6:	4b0d      	ldr	r3, [pc, #52]	@ (80131ec <HAL_PCD_MspInit+0xc8>)
 80131b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131ba:	4a0c      	ldr	r2, [pc, #48]	@ (80131ec <HAL_PCD_MspInit+0xc8>)
 80131bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80131c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80131c2:	4b0a      	ldr	r3, [pc, #40]	@ (80131ec <HAL_PCD_MspInit+0xc8>)
 80131c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80131ca:	60fb      	str	r3, [r7, #12]
 80131cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 80131ce:	2200      	movs	r2, #0
 80131d0:	2105      	movs	r1, #5
 80131d2:	2043      	movs	r0, #67	@ 0x43
 80131d4:	f7f0 fddb 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80131d8:	2043      	movs	r0, #67	@ 0x43
 80131da:	f7f0 fdf4 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80131de:	bf00      	nop
 80131e0:	3790      	adds	r7, #144	@ 0x90
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	40006800 	.word	0x40006800
 80131ec:	40021000 	.word	0x40021000

080131f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f8d3 22f4 	ldr.w	r2, [r3, #756]	@ 0x2f4
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8013204:	4619      	mov	r1, r3
 8013206:	4610      	mov	r0, r2
 8013208:	f7fa fe7f 	bl	800df0a <USBD_LL_SetupStage>
}
 801320c:	bf00      	nop
 801320e:	3708      	adds	r7, #8
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	460b      	mov	r3, r1
 801321e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f8d3 02f4 	ldr.w	r0, [r3, #756]	@ 0x2f4
 8013226:	78fa      	ldrb	r2, [r7, #3]
 8013228:	6879      	ldr	r1, [r7, #4]
 801322a:	4613      	mov	r3, r2
 801322c:	009b      	lsls	r3, r3, #2
 801322e:	4413      	add	r3, r2
 8013230:	00db      	lsls	r3, r3, #3
 8013232:	440b      	add	r3, r1
 8013234:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8013238:	681a      	ldr	r2, [r3, #0]
 801323a:	78fb      	ldrb	r3, [r7, #3]
 801323c:	4619      	mov	r1, r3
 801323e:	f7fa feb9 	bl	800dfb4 <USBD_LL_DataOutStage>
}
 8013242:	bf00      	nop
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}

0801324a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801324a:	b580      	push	{r7, lr}
 801324c:	b082      	sub	sp, #8
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
 8013252:	460b      	mov	r3, r1
 8013254:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f8d3 02f4 	ldr.w	r0, [r3, #756]	@ 0x2f4
 801325c:	78fa      	ldrb	r2, [r7, #3]
 801325e:	6879      	ldr	r1, [r7, #4]
 8013260:	4613      	mov	r3, r2
 8013262:	009b      	lsls	r3, r3, #2
 8013264:	4413      	add	r3, r2
 8013266:	00db      	lsls	r3, r3, #3
 8013268:	440b      	add	r3, r1
 801326a:	333c      	adds	r3, #60	@ 0x3c
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	78fb      	ldrb	r3, [r7, #3]
 8013270:	4619      	mov	r1, r3
 8013272:	f7fa ff52 	bl	800e11a <USBD_LL_DataInStage>
}
 8013276:	bf00      	nop
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}

0801327e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801327e:	b580      	push	{r7, lr}
 8013280:	b082      	sub	sp, #8
 8013282:	af00      	add	r7, sp, #0
 8013284:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 801328c:	4618      	mov	r0, r3
 801328e:	f7fb f88c 	bl	800e3aa <USBD_LL_SOF>
}
 8013292:	bf00      	nop
 8013294:	3708      	adds	r7, #8
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}

0801329a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801329a:	b580      	push	{r7, lr}
 801329c:	b084      	sub	sp, #16
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80132a2:	2301      	movs	r3, #1
 80132a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	689b      	ldr	r3, [r3, #8]
 80132aa:	2b02      	cmp	r3, #2
 80132ac:	d001      	beq.n	80132b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80132ae:	f7ef ffd5 	bl	800325c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 80132b8:	7bfa      	ldrb	r2, [r7, #15]
 80132ba:	4611      	mov	r1, r2
 80132bc:	4618      	mov	r0, r3
 80132be:	f7fb f830 	bl	800e322 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7fa ffd8 	bl	800e27e <USBD_LL_Reset>
}
 80132ce:	bf00      	nop
 80132d0:	3710      	adds	r7, #16
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
	...

080132d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b082      	sub	sp, #8
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fb f82b 	bl	800e342 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	699b      	ldr	r3, [r3, #24]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d005      	beq.n	8013300 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80132f4:	4b04      	ldr	r3, [pc, #16]	@ (8013308 <HAL_PCD_SuspendCallback+0x30>)
 80132f6:	691b      	ldr	r3, [r3, #16]
 80132f8:	4a03      	ldr	r2, [pc, #12]	@ (8013308 <HAL_PCD_SuspendCallback+0x30>)
 80132fa:	f043 0306 	orr.w	r3, r3, #6
 80132fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013300:	bf00      	nop
 8013302:	3708      	adds	r7, #8
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}
 8013308:	e000ed00 	.word	0xe000ed00

0801330c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	699b      	ldr	r3, [r3, #24]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d007      	beq.n	801332c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801331c:	4b08      	ldr	r3, [pc, #32]	@ (8013340 <HAL_PCD_ResumeCallback+0x34>)
 801331e:	691b      	ldr	r3, [r3, #16]
 8013320:	4a07      	ldr	r2, [pc, #28]	@ (8013340 <HAL_PCD_ResumeCallback+0x34>)
 8013322:	f023 0306 	bic.w	r3, r3, #6
 8013326:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013328:	f000 fab6 	bl	8013898 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8013332:	4618      	mov	r0, r3
 8013334:	f7fb f821 	bl	800e37a <USBD_LL_Resume>
}
 8013338:	bf00      	nop
 801333a:	3708      	adds	r7, #8
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	e000ed00 	.word	0xe000ed00

08013344 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 801334c:	f7f3 fd00 	bl	8006d50 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8013350:	4a2b      	ldr	r2, [pc, #172]	@ (8013400 <USBD_LL_Init+0xbc>)
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f8c2 32f4 	str.w	r3, [r2, #756]	@ 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	4a29      	ldr	r2, [pc, #164]	@ (8013400 <USBD_LL_Init+0xbc>)
 801335c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_FS.Instance = USB;
 8013360:	4b27      	ldr	r3, [pc, #156]	@ (8013400 <USBD_LL_Init+0xbc>)
 8013362:	4a28      	ldr	r2, [pc, #160]	@ (8013404 <USBD_LL_Init+0xc0>)
 8013364:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013366:	4b26      	ldr	r3, [pc, #152]	@ (8013400 <USBD_LL_Init+0xbc>)
 8013368:	2208      	movs	r2, #8
 801336a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801336c:	4b24      	ldr	r3, [pc, #144]	@ (8013400 <USBD_LL_Init+0xbc>)
 801336e:	2202      	movs	r2, #2
 8013370:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013372:	4b23      	ldr	r3, [pc, #140]	@ (8013400 <USBD_LL_Init+0xbc>)
 8013374:	2202      	movs	r2, #2
 8013376:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013378:	4b21      	ldr	r3, [pc, #132]	@ (8013400 <USBD_LL_Init+0xbc>)
 801337a:	2200      	movs	r2, #0
 801337c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801337e:	4b20      	ldr	r3, [pc, #128]	@ (8013400 <USBD_LL_Init+0xbc>)
 8013380:	2200      	movs	r2, #0
 8013382:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013384:	4b1e      	ldr	r3, [pc, #120]	@ (8013400 <USBD_LL_Init+0xbc>)
 8013386:	2200      	movs	r2, #0
 8013388:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801338a:	4b1d      	ldr	r3, [pc, #116]	@ (8013400 <USBD_LL_Init+0xbc>)
 801338c:	2200      	movs	r2, #0
 801338e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013390:	481b      	ldr	r0, [pc, #108]	@ (8013400 <USBD_LL_Init+0xbc>)
 8013392:	f7f1 feeb 	bl	800516c <HAL_PCD_Init>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d001      	beq.n	80133a0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 801339c:	f7ef ff5e 	bl	800325c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80133a6:	2318      	movs	r3, #24
 80133a8:	2200      	movs	r2, #0
 80133aa:	2100      	movs	r1, #0
 80133ac:	f7f3 fbee 	bl	8006b8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80133b6:	2358      	movs	r3, #88	@ 0x58
 80133b8:	2200      	movs	r2, #0
 80133ba:	2180      	movs	r1, #128	@ 0x80
 80133bc:	f7f3 fbe6 	bl	8006b8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80133c6:	23c0      	movs	r3, #192	@ 0xc0
 80133c8:	2200      	movs	r2, #0
 80133ca:	2181      	movs	r1, #129	@ 0x81
 80133cc:	f7f3 fbde 	bl	8006b8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80133d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80133da:	2200      	movs	r2, #0
 80133dc:	2101      	movs	r1, #1
 80133de:	f7f3 fbd5 	bl	8006b8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80133e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80133ec:	2200      	movs	r2, #0
 80133ee:	2182      	movs	r1, #130	@ 0x82
 80133f0:	f7f3 fbcc 	bl	8006b8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80133f4:	2300      	movs	r3, #0
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3708      	adds	r7, #8
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}
 80133fe:	bf00      	nop
 8013400:	20024568 	.word	0x20024568
 8013404:	40006800 	.word	0x40006800

08013408 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013410:	2300      	movs	r3, #0
 8013412:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013414:	2300      	movs	r3, #0
 8013416:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801341e:	4618      	mov	r0, r3
 8013420:	f7f1 ffaa 	bl	8005378 <HAL_PCD_Start>
 8013424:	4603      	mov	r3, r0
 8013426:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013428:	7bbb      	ldrb	r3, [r7, #14]
 801342a:	2b03      	cmp	r3, #3
 801342c:	d816      	bhi.n	801345c <USBD_LL_Start+0x54>
 801342e:	a201      	add	r2, pc, #4	@ (adr r2, 8013434 <USBD_LL_Start+0x2c>)
 8013430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013434:	08013445 	.word	0x08013445
 8013438:	0801344b 	.word	0x0801344b
 801343c:	08013451 	.word	0x08013451
 8013440:	08013457 	.word	0x08013457
    case HAL_OK :
      usb_status = USBD_OK;
 8013444:	2300      	movs	r3, #0
 8013446:	73fb      	strb	r3, [r7, #15]
    break;
 8013448:	e00b      	b.n	8013462 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801344a:	2303      	movs	r3, #3
 801344c:	73fb      	strb	r3, [r7, #15]
    break;
 801344e:	e008      	b.n	8013462 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013450:	2301      	movs	r3, #1
 8013452:	73fb      	strb	r3, [r7, #15]
    break;
 8013454:	e005      	b.n	8013462 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013456:	2303      	movs	r3, #3
 8013458:	73fb      	strb	r3, [r7, #15]
    break;
 801345a:	e002      	b.n	8013462 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801345c:	2303      	movs	r3, #3
 801345e:	73fb      	strb	r3, [r7, #15]
    break;
 8013460:	bf00      	nop
  }
  return usb_status;
 8013462:	7bfb      	ldrb	r3, [r7, #15]
}
 8013464:	4618      	mov	r0, r3
 8013466:	3710      	adds	r7, #16
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}

0801346c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b084      	sub	sp, #16
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	4608      	mov	r0, r1
 8013476:	4611      	mov	r1, r2
 8013478:	461a      	mov	r2, r3
 801347a:	4603      	mov	r3, r0
 801347c:	70fb      	strb	r3, [r7, #3]
 801347e:	460b      	mov	r3, r1
 8013480:	70bb      	strb	r3, [r7, #2]
 8013482:	4613      	mov	r3, r2
 8013484:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013486:	2300      	movs	r3, #0
 8013488:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801348a:	2300      	movs	r3, #0
 801348c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013494:	78bb      	ldrb	r3, [r7, #2]
 8013496:	883a      	ldrh	r2, [r7, #0]
 8013498:	78f9      	ldrb	r1, [r7, #3]
 801349a:	f7f2 f8db 	bl	8005654 <HAL_PCD_EP_Open>
 801349e:	4603      	mov	r3, r0
 80134a0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80134a2:	7bbb      	ldrb	r3, [r7, #14]
 80134a4:	2b03      	cmp	r3, #3
 80134a6:	d817      	bhi.n	80134d8 <USBD_LL_OpenEP+0x6c>
 80134a8:	a201      	add	r2, pc, #4	@ (adr r2, 80134b0 <USBD_LL_OpenEP+0x44>)
 80134aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134ae:	bf00      	nop
 80134b0:	080134c1 	.word	0x080134c1
 80134b4:	080134c7 	.word	0x080134c7
 80134b8:	080134cd 	.word	0x080134cd
 80134bc:	080134d3 	.word	0x080134d3
    case HAL_OK :
      usb_status = USBD_OK;
 80134c0:	2300      	movs	r3, #0
 80134c2:	73fb      	strb	r3, [r7, #15]
    break;
 80134c4:	e00b      	b.n	80134de <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80134c6:	2303      	movs	r3, #3
 80134c8:	73fb      	strb	r3, [r7, #15]
    break;
 80134ca:	e008      	b.n	80134de <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134cc:	2301      	movs	r3, #1
 80134ce:	73fb      	strb	r3, [r7, #15]
    break;
 80134d0:	e005      	b.n	80134de <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80134d2:	2303      	movs	r3, #3
 80134d4:	73fb      	strb	r3, [r7, #15]
    break;
 80134d6:	e002      	b.n	80134de <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80134d8:	2303      	movs	r3, #3
 80134da:	73fb      	strb	r3, [r7, #15]
    break;
 80134dc:	bf00      	nop
  }
  return usb_status;
 80134de:	7bfb      	ldrb	r3, [r7, #15]
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3710      	adds	r7, #16
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b084      	sub	sp, #16
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	460b      	mov	r3, r1
 80134f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134f4:	2300      	movs	r3, #0
 80134f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134f8:	2300      	movs	r3, #0
 80134fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013502:	78fa      	ldrb	r2, [r7, #3]
 8013504:	4611      	mov	r1, r2
 8013506:	4618      	mov	r0, r3
 8013508:	f7f2 f901 	bl	800570e <HAL_PCD_EP_Close>
 801350c:	4603      	mov	r3, r0
 801350e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013510:	7bbb      	ldrb	r3, [r7, #14]
 8013512:	2b03      	cmp	r3, #3
 8013514:	d816      	bhi.n	8013544 <USBD_LL_CloseEP+0x5c>
 8013516:	a201      	add	r2, pc, #4	@ (adr r2, 801351c <USBD_LL_CloseEP+0x34>)
 8013518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801351c:	0801352d 	.word	0x0801352d
 8013520:	08013533 	.word	0x08013533
 8013524:	08013539 	.word	0x08013539
 8013528:	0801353f 	.word	0x0801353f
    case HAL_OK :
      usb_status = USBD_OK;
 801352c:	2300      	movs	r3, #0
 801352e:	73fb      	strb	r3, [r7, #15]
    break;
 8013530:	e00b      	b.n	801354a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013532:	2303      	movs	r3, #3
 8013534:	73fb      	strb	r3, [r7, #15]
    break;
 8013536:	e008      	b.n	801354a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013538:	2301      	movs	r3, #1
 801353a:	73fb      	strb	r3, [r7, #15]
    break;
 801353c:	e005      	b.n	801354a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801353e:	2303      	movs	r3, #3
 8013540:	73fb      	strb	r3, [r7, #15]
    break;
 8013542:	e002      	b.n	801354a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013544:	2303      	movs	r3, #3
 8013546:	73fb      	strb	r3, [r7, #15]
    break;
 8013548:	bf00      	nop
  }
  return usb_status;
 801354a:	7bfb      	ldrb	r3, [r7, #15]
}
 801354c:	4618      	mov	r0, r3
 801354e:	3710      	adds	r7, #16
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	460b      	mov	r3, r1
 801355e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013560:	2300      	movs	r3, #0
 8013562:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013564:	2300      	movs	r3, #0
 8013566:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801356e:	78fa      	ldrb	r2, [r7, #3]
 8013570:	4611      	mov	r1, r2
 8013572:	4618      	mov	r0, r3
 8013574:	f7f2 f993 	bl	800589e <HAL_PCD_EP_SetStall>
 8013578:	4603      	mov	r3, r0
 801357a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801357c:	7bbb      	ldrb	r3, [r7, #14]
 801357e:	2b03      	cmp	r3, #3
 8013580:	d816      	bhi.n	80135b0 <USBD_LL_StallEP+0x5c>
 8013582:	a201      	add	r2, pc, #4	@ (adr r2, 8013588 <USBD_LL_StallEP+0x34>)
 8013584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013588:	08013599 	.word	0x08013599
 801358c:	0801359f 	.word	0x0801359f
 8013590:	080135a5 	.word	0x080135a5
 8013594:	080135ab 	.word	0x080135ab
    case HAL_OK :
      usb_status = USBD_OK;
 8013598:	2300      	movs	r3, #0
 801359a:	73fb      	strb	r3, [r7, #15]
    break;
 801359c:	e00b      	b.n	80135b6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801359e:	2303      	movs	r3, #3
 80135a0:	73fb      	strb	r3, [r7, #15]
    break;
 80135a2:	e008      	b.n	80135b6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80135a4:	2301      	movs	r3, #1
 80135a6:	73fb      	strb	r3, [r7, #15]
    break;
 80135a8:	e005      	b.n	80135b6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80135aa:	2303      	movs	r3, #3
 80135ac:	73fb      	strb	r3, [r7, #15]
    break;
 80135ae:	e002      	b.n	80135b6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80135b0:	2303      	movs	r3, #3
 80135b2:	73fb      	strb	r3, [r7, #15]
    break;
 80135b4:	bf00      	nop
  }
  return usb_status;
 80135b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3710      	adds	r7, #16
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	460b      	mov	r3, r1
 80135ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135cc:	2300      	movs	r3, #0
 80135ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135d0:	2300      	movs	r3, #0
 80135d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80135da:	78fa      	ldrb	r2, [r7, #3]
 80135dc:	4611      	mov	r1, r2
 80135de:	4618      	mov	r0, r3
 80135e0:	f7f2 f9bd 	bl	800595e <HAL_PCD_EP_ClrStall>
 80135e4:	4603      	mov	r3, r0
 80135e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80135e8:	7bbb      	ldrb	r3, [r7, #14]
 80135ea:	2b03      	cmp	r3, #3
 80135ec:	d816      	bhi.n	801361c <USBD_LL_ClearStallEP+0x5c>
 80135ee:	a201      	add	r2, pc, #4	@ (adr r2, 80135f4 <USBD_LL_ClearStallEP+0x34>)
 80135f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135f4:	08013605 	.word	0x08013605
 80135f8:	0801360b 	.word	0x0801360b
 80135fc:	08013611 	.word	0x08013611
 8013600:	08013617 	.word	0x08013617
    case HAL_OK :
      usb_status = USBD_OK;
 8013604:	2300      	movs	r3, #0
 8013606:	73fb      	strb	r3, [r7, #15]
    break;
 8013608:	e00b      	b.n	8013622 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801360a:	2303      	movs	r3, #3
 801360c:	73fb      	strb	r3, [r7, #15]
    break;
 801360e:	e008      	b.n	8013622 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013610:	2301      	movs	r3, #1
 8013612:	73fb      	strb	r3, [r7, #15]
    break;
 8013614:	e005      	b.n	8013622 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013616:	2303      	movs	r3, #3
 8013618:	73fb      	strb	r3, [r7, #15]
    break;
 801361a:	e002      	b.n	8013622 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801361c:	2303      	movs	r3, #3
 801361e:	73fb      	strb	r3, [r7, #15]
    break;
 8013620:	bf00      	nop
  }
  return usb_status;
 8013622:	7bfb      	ldrb	r3, [r7, #15]
}
 8013624:	4618      	mov	r0, r3
 8013626:	3710      	adds	r7, #16
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}

0801362c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801362c:	b480      	push	{r7}
 801362e:	b085      	sub	sp, #20
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	460b      	mov	r3, r1
 8013636:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801363e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013644:	2b00      	cmp	r3, #0
 8013646:	da0c      	bge.n	8013662 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013648:	78fb      	ldrb	r3, [r7, #3]
 801364a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801364e:	68f9      	ldr	r1, [r7, #12]
 8013650:	1c5a      	adds	r2, r3, #1
 8013652:	4613      	mov	r3, r2
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	4413      	add	r3, r2
 8013658:	00db      	lsls	r3, r3, #3
 801365a:	440b      	add	r3, r1
 801365c:	3302      	adds	r3, #2
 801365e:	781b      	ldrb	r3, [r3, #0]
 8013660:	e00b      	b.n	801367a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013662:	78fb      	ldrb	r3, [r7, #3]
 8013664:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013668:	68f9      	ldr	r1, [r7, #12]
 801366a:	4613      	mov	r3, r2
 801366c:	009b      	lsls	r3, r3, #2
 801366e:	4413      	add	r3, r2
 8013670:	00db      	lsls	r3, r3, #3
 8013672:	440b      	add	r3, r1
 8013674:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8013678:	781b      	ldrb	r3, [r3, #0]
  }
}
 801367a:	4618      	mov	r0, r3
 801367c:	3714      	adds	r7, #20
 801367e:	46bd      	mov	sp, r7
 8013680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013684:	4770      	bx	lr
	...

08013688 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b084      	sub	sp, #16
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
 8013690:	460b      	mov	r3, r1
 8013692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013694:	2300      	movs	r3, #0
 8013696:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013698:	2300      	movs	r3, #0
 801369a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80136a2:	78fa      	ldrb	r2, [r7, #3]
 80136a4:	4611      	mov	r1, r2
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7f1 ffaf 	bl	800560a <HAL_PCD_SetAddress>
 80136ac:	4603      	mov	r3, r0
 80136ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80136b0:	7bbb      	ldrb	r3, [r7, #14]
 80136b2:	2b03      	cmp	r3, #3
 80136b4:	d816      	bhi.n	80136e4 <USBD_LL_SetUSBAddress+0x5c>
 80136b6:	a201      	add	r2, pc, #4	@ (adr r2, 80136bc <USBD_LL_SetUSBAddress+0x34>)
 80136b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136bc:	080136cd 	.word	0x080136cd
 80136c0:	080136d3 	.word	0x080136d3
 80136c4:	080136d9 	.word	0x080136d9
 80136c8:	080136df 	.word	0x080136df
    case HAL_OK :
      usb_status = USBD_OK;
 80136cc:	2300      	movs	r3, #0
 80136ce:	73fb      	strb	r3, [r7, #15]
    break;
 80136d0:	e00b      	b.n	80136ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80136d2:	2303      	movs	r3, #3
 80136d4:	73fb      	strb	r3, [r7, #15]
    break;
 80136d6:	e008      	b.n	80136ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80136d8:	2301      	movs	r3, #1
 80136da:	73fb      	strb	r3, [r7, #15]
    break;
 80136dc:	e005      	b.n	80136ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80136de:	2303      	movs	r3, #3
 80136e0:	73fb      	strb	r3, [r7, #15]
    break;
 80136e2:	e002      	b.n	80136ea <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80136e4:	2303      	movs	r3, #3
 80136e6:	73fb      	strb	r3, [r7, #15]
    break;
 80136e8:	bf00      	nop
  }
  return usb_status;
 80136ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3710      	adds	r7, #16
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b086      	sub	sp, #24
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	607a      	str	r2, [r7, #4]
 80136fe:	603b      	str	r3, [r7, #0]
 8013700:	460b      	mov	r3, r1
 8013702:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013704:	2300      	movs	r3, #0
 8013706:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013708:	2300      	movs	r3, #0
 801370a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013712:	7af9      	ldrb	r1, [r7, #11]
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	687a      	ldr	r2, [r7, #4]
 8013718:	f7f2 f88a 	bl	8005830 <HAL_PCD_EP_Transmit>
 801371c:	4603      	mov	r3, r0
 801371e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013720:	7dbb      	ldrb	r3, [r7, #22]
 8013722:	2b03      	cmp	r3, #3
 8013724:	d816      	bhi.n	8013754 <USBD_LL_Transmit+0x60>
 8013726:	a201      	add	r2, pc, #4	@ (adr r2, 801372c <USBD_LL_Transmit+0x38>)
 8013728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801372c:	0801373d 	.word	0x0801373d
 8013730:	08013743 	.word	0x08013743
 8013734:	08013749 	.word	0x08013749
 8013738:	0801374f 	.word	0x0801374f
    case HAL_OK :
      usb_status = USBD_OK;
 801373c:	2300      	movs	r3, #0
 801373e:	75fb      	strb	r3, [r7, #23]
    break;
 8013740:	e00b      	b.n	801375a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013742:	2303      	movs	r3, #3
 8013744:	75fb      	strb	r3, [r7, #23]
    break;
 8013746:	e008      	b.n	801375a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013748:	2301      	movs	r3, #1
 801374a:	75fb      	strb	r3, [r7, #23]
    break;
 801374c:	e005      	b.n	801375a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801374e:	2303      	movs	r3, #3
 8013750:	75fb      	strb	r3, [r7, #23]
    break;
 8013752:	e002      	b.n	801375a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8013754:	2303      	movs	r3, #3
 8013756:	75fb      	strb	r3, [r7, #23]
    break;
 8013758:	bf00      	nop
  }
  return usb_status;
 801375a:	7dfb      	ldrb	r3, [r7, #23]
}
 801375c:	4618      	mov	r0, r3
 801375e:	3718      	adds	r7, #24
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b086      	sub	sp, #24
 8013768:	af00      	add	r7, sp, #0
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	607a      	str	r2, [r7, #4]
 801376e:	603b      	str	r3, [r7, #0]
 8013770:	460b      	mov	r3, r1
 8013772:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013774:	2300      	movs	r3, #0
 8013776:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013778:	2300      	movs	r3, #0
 801377a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013782:	7af9      	ldrb	r1, [r7, #11]
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	687a      	ldr	r2, [r7, #4]
 8013788:	f7f2 f809 	bl	800579e <HAL_PCD_EP_Receive>
 801378c:	4603      	mov	r3, r0
 801378e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013790:	7dbb      	ldrb	r3, [r7, #22]
 8013792:	2b03      	cmp	r3, #3
 8013794:	d816      	bhi.n	80137c4 <USBD_LL_PrepareReceive+0x60>
 8013796:	a201      	add	r2, pc, #4	@ (adr r2, 801379c <USBD_LL_PrepareReceive+0x38>)
 8013798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801379c:	080137ad 	.word	0x080137ad
 80137a0:	080137b3 	.word	0x080137b3
 80137a4:	080137b9 	.word	0x080137b9
 80137a8:	080137bf 	.word	0x080137bf
    case HAL_OK :
      usb_status = USBD_OK;
 80137ac:	2300      	movs	r3, #0
 80137ae:	75fb      	strb	r3, [r7, #23]
    break;
 80137b0:	e00b      	b.n	80137ca <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80137b2:	2303      	movs	r3, #3
 80137b4:	75fb      	strb	r3, [r7, #23]
    break;
 80137b6:	e008      	b.n	80137ca <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80137b8:	2301      	movs	r3, #1
 80137ba:	75fb      	strb	r3, [r7, #23]
    break;
 80137bc:	e005      	b.n	80137ca <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80137be:	2303      	movs	r3, #3
 80137c0:	75fb      	strb	r3, [r7, #23]
    break;
 80137c2:	e002      	b.n	80137ca <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80137c4:	2303      	movs	r3, #3
 80137c6:	75fb      	strb	r3, [r7, #23]
    break;
 80137c8:	bf00      	nop
  }
  return usb_status;
 80137ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3718      	adds	r7, #24
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	460b      	mov	r3, r1
 80137de:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80137e6:	78fa      	ldrb	r2, [r7, #3]
 80137e8:	4611      	mov	r1, r2
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7f2 f808 	bl	8005800 <HAL_PCD_EP_GetRxCount>
 80137f0:	4603      	mov	r3, r0
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	3708      	adds	r7, #8
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}
	...

080137fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
 8013804:	460b      	mov	r3, r1
 8013806:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013808:	78fb      	ldrb	r3, [r7, #3]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d002      	beq.n	8013814 <HAL_PCDEx_LPM_Callback+0x18>
 801380e:	2b01      	cmp	r3, #1
 8013810:	d013      	beq.n	801383a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013812:	e023      	b.n	801385c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	699b      	ldr	r3, [r3, #24]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d007      	beq.n	801382c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801381c:	f000 f83c 	bl	8013898 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013820:	4b10      	ldr	r3, [pc, #64]	@ (8013864 <HAL_PCDEx_LPM_Callback+0x68>)
 8013822:	691b      	ldr	r3, [r3, #16]
 8013824:	4a0f      	ldr	r2, [pc, #60]	@ (8013864 <HAL_PCDEx_LPM_Callback+0x68>)
 8013826:	f023 0306 	bic.w	r3, r3, #6
 801382a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8013832:	4618      	mov	r0, r3
 8013834:	f7fa fda1 	bl	800e37a <USBD_LL_Resume>
    break;
 8013838:	e010      	b.n	801385c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
 8013840:	4618      	mov	r0, r3
 8013842:	f7fa fd7e 	bl	800e342 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	699b      	ldr	r3, [r3, #24]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d005      	beq.n	801385a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801384e:	4b05      	ldr	r3, [pc, #20]	@ (8013864 <HAL_PCDEx_LPM_Callback+0x68>)
 8013850:	691b      	ldr	r3, [r3, #16]
 8013852:	4a04      	ldr	r2, [pc, #16]	@ (8013864 <HAL_PCDEx_LPM_Callback+0x68>)
 8013854:	f043 0306 	orr.w	r3, r3, #6
 8013858:	6113      	str	r3, [r2, #16]
    break;
 801385a:	bf00      	nop
}
 801385c:	bf00      	nop
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	e000ed00 	.word	0xe000ed00

08013868 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013868:	b480      	push	{r7}
 801386a:	b083      	sub	sp, #12
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013870:	4b03      	ldr	r3, [pc, #12]	@ (8013880 <USBD_static_malloc+0x18>)
}
 8013872:	4618      	mov	r0, r3
 8013874:	370c      	adds	r7, #12
 8013876:	46bd      	mov	sp, r7
 8013878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop
 8013880:	20024860 	.word	0x20024860

08013884 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013884:	b480      	push	{r7}
 8013886:	b083      	sub	sp, #12
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]

}
 801388c:	bf00      	nop
 801388e:	370c      	adds	r7, #12
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr

08013898 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801389c:	f7ed ff16 	bl	80016cc <SystemClock_Config>
}
 80138a0:	bf00      	nop
 80138a2:	bd80      	pop	{r7, pc}

080138a4 <arm_max_f32>:
 80138a4:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 80138a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138aa:	4607      	mov	r7, r0
 80138ac:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80138b0:	ecf7 7a01 	vldmia	r7!, {s15}
 80138b4:	d060      	beq.n	8013978 <arm_max_f32+0xd4>
 80138b6:	2400      	movs	r4, #0
 80138b8:	3014      	adds	r0, #20
 80138ba:	4625      	mov	r5, r4
 80138bc:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80138c0:	ed10 7a04 	vldr	s14, [r0, #-16]
 80138c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80138c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138cc:	bf48      	it	mi
 80138ce:	eef0 7a47 	vmovmi.f32	s15, s14
 80138d2:	ed10 7a03 	vldr	s14, [r0, #-12]
 80138d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80138da:	bf48      	it	mi
 80138dc:	1c65      	addmi	r5, r4, #1
 80138de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e2:	bf48      	it	mi
 80138e4:	eef0 7a47 	vmovmi.f32	s15, s14
 80138e8:	ed10 7a02 	vldr	s14, [r0, #-8]
 80138ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80138f0:	bf48      	it	mi
 80138f2:	1ca5      	addmi	r5, r4, #2
 80138f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f8:	bf48      	it	mi
 80138fa:	eef0 7a47 	vmovmi.f32	s15, s14
 80138fe:	ed10 7a01 	vldr	s14, [r0, #-4]
 8013902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013906:	bf48      	it	mi
 8013908:	1ce5      	addmi	r5, r4, #3
 801390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801390e:	f104 0404 	add.w	r4, r4, #4
 8013912:	bf44      	itt	mi
 8013914:	eef0 7a47 	vmovmi.f32	s15, s14
 8013918:	4625      	movmi	r5, r4
 801391a:	42a6      	cmp	r6, r4
 801391c:	f100 0010 	add.w	r0, r0, #16
 8013920:	d1ce      	bne.n	80138c0 <arm_max_f32+0x1c>
 8013922:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8013926:	f01c 0003 	ands.w	r0, ip, #3
 801392a:	d021      	beq.n	8013970 <arm_max_f32+0xcc>
 801392c:	ed97 7a00 	vldr	s14, [r7]
 8013930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013938:	bfc4      	itt	gt
 801393a:	eef0 7a47 	vmovgt.f32	s15, s14
 801393e:	1a0d      	subgt	r5, r1, r0
 8013940:	3801      	subs	r0, #1
 8013942:	d015      	beq.n	8013970 <arm_max_f32+0xcc>
 8013944:	ed97 7a01 	vldr	s14, [r7, #4]
 8013948:	eef4 7ac7 	vcmpe.f32	s15, s14
 801394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013950:	bf44      	itt	mi
 8013952:	eef0 7a47 	vmovmi.f32	s15, s14
 8013956:	1a0d      	submi	r5, r1, r0
 8013958:	2801      	cmp	r0, #1
 801395a:	d009      	beq.n	8013970 <arm_max_f32+0xcc>
 801395c:	ed97 7a02 	vldr	s14, [r7, #8]
 8013960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013968:	bfc4      	itt	gt
 801396a:	eef0 7a47 	vmovgt.f32	s15, s14
 801396e:	4665      	movgt	r5, ip
 8013970:	edc2 7a00 	vstr	s15, [r2]
 8013974:	601d      	str	r5, [r3, #0]
 8013976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013978:	4675      	mov	r5, lr
 801397a:	e7d4      	b.n	8013926 <arm_max_f32+0x82>

0801397c <arm_rfft_32_fast_init_f32>:
 801397c:	b178      	cbz	r0, 801399e <arm_rfft_32_fast_init_f32+0x22>
 801397e:	b430      	push	{r4, r5}
 8013980:	4908      	ldr	r1, [pc, #32]	@ (80139a4 <arm_rfft_32_fast_init_f32+0x28>)
 8013982:	4a09      	ldr	r2, [pc, #36]	@ (80139a8 <arm_rfft_32_fast_init_f32+0x2c>)
 8013984:	2310      	movs	r3, #16
 8013986:	e9c0 2101 	strd	r2, r1, [r0, #4]
 801398a:	8003      	strh	r3, [r0, #0]
 801398c:	2520      	movs	r5, #32
 801398e:	2414      	movs	r4, #20
 8013990:	4b06      	ldr	r3, [pc, #24]	@ (80139ac <arm_rfft_32_fast_init_f32+0x30>)
 8013992:	8205      	strh	r5, [r0, #16]
 8013994:	8184      	strh	r4, [r0, #12]
 8013996:	6143      	str	r3, [r0, #20]
 8013998:	bc30      	pop	{r4, r5}
 801399a:	2000      	movs	r0, #0
 801399c:	4770      	bx	lr
 801399e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80139a2:	4770      	bx	lr
 80139a4:	0801d024 	.word	0x0801d024
 80139a8:	0802195c 	.word	0x0802195c
 80139ac:	0802a6dc 	.word	0x0802a6dc

080139b0 <arm_rfft_64_fast_init_f32>:
 80139b0:	b178      	cbz	r0, 80139d2 <arm_rfft_64_fast_init_f32+0x22>
 80139b2:	b430      	push	{r4, r5}
 80139b4:	4908      	ldr	r1, [pc, #32]	@ (80139d8 <arm_rfft_64_fast_init_f32+0x28>)
 80139b6:	4a09      	ldr	r2, [pc, #36]	@ (80139dc <arm_rfft_64_fast_init_f32+0x2c>)
 80139b8:	2320      	movs	r3, #32
 80139ba:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80139be:	8003      	strh	r3, [r0, #0]
 80139c0:	2540      	movs	r5, #64	@ 0x40
 80139c2:	2430      	movs	r4, #48	@ 0x30
 80139c4:	4b06      	ldr	r3, [pc, #24]	@ (80139e0 <arm_rfft_64_fast_init_f32+0x30>)
 80139c6:	8205      	strh	r5, [r0, #16]
 80139c8:	8184      	strh	r4, [r0, #12]
 80139ca:	6143      	str	r3, [r0, #20]
 80139cc:	bc30      	pop	{r4, r5}
 80139ce:	2000      	movs	r0, #0
 80139d0:	4770      	bx	lr
 80139d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80139d6:	4770      	bx	lr
 80139d8:	0801f17c 	.word	0x0801f17c
 80139dc:	080261dc 	.word	0x080261dc
 80139e0:	0802ef5c 	.word	0x0802ef5c

080139e4 <arm_rfft_256_fast_init_f32>:
 80139e4:	b180      	cbz	r0, 8013a08 <arm_rfft_256_fast_init_f32+0x24>
 80139e6:	b430      	push	{r4, r5}
 80139e8:	4909      	ldr	r1, [pc, #36]	@ (8013a10 <arm_rfft_256_fast_init_f32+0x2c>)
 80139ea:	4a0a      	ldr	r2, [pc, #40]	@ (8013a14 <arm_rfft_256_fast_init_f32+0x30>)
 80139ec:	2380      	movs	r3, #128	@ 0x80
 80139ee:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80139f2:	8003      	strh	r3, [r0, #0]
 80139f4:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80139f8:	24d0      	movs	r4, #208	@ 0xd0
 80139fa:	4b07      	ldr	r3, [pc, #28]	@ (8013a18 <arm_rfft_256_fast_init_f32+0x34>)
 80139fc:	8205      	strh	r5, [r0, #16]
 80139fe:	8184      	strh	r4, [r0, #12]
 8013a00:	6143      	str	r3, [r0, #20]
 8013a02:	bc30      	pop	{r4, r5}
 8013a04:	2000      	movs	r0, #0
 8013a06:	4770      	bx	lr
 8013a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a0c:	4770      	bx	lr
 8013a0e:	bf00      	nop
 8013a10:	0801ce84 	.word	0x0801ce84
 8013a14:	0802155c 	.word	0x0802155c
 8013a18:	0802a2dc 	.word	0x0802a2dc

08013a1c <arm_rfft_512_fast_init_f32>:
 8013a1c:	b190      	cbz	r0, 8013a44 <arm_rfft_512_fast_init_f32+0x28>
 8013a1e:	b430      	push	{r4, r5}
 8013a20:	490a      	ldr	r1, [pc, #40]	@ (8013a4c <arm_rfft_512_fast_init_f32+0x30>)
 8013a22:	4a0b      	ldr	r2, [pc, #44]	@ (8013a50 <arm_rfft_512_fast_init_f32+0x34>)
 8013a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013a28:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8013a2c:	8003      	strh	r3, [r0, #0]
 8013a2e:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013a32:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8013a36:	4b07      	ldr	r3, [pc, #28]	@ (8013a54 <arm_rfft_512_fast_init_f32+0x38>)
 8013a38:	8205      	strh	r5, [r0, #16]
 8013a3a:	8184      	strh	r4, [r0, #12]
 8013a3c:	6143      	str	r3, [r0, #20]
 8013a3e:	bc30      	pop	{r4, r5}
 8013a40:	2000      	movs	r0, #0
 8013a42:	4770      	bx	lr
 8013a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a48:	4770      	bx	lr
 8013a4a:	bf00      	nop
 8013a4c:	0801ee0c 	.word	0x0801ee0c
 8013a50:	080259dc 	.word	0x080259dc
 8013a54:	0802e75c 	.word	0x0802e75c

08013a58 <arm_rfft_1024_fast_init_f32>:
 8013a58:	b190      	cbz	r0, 8013a80 <arm_rfft_1024_fast_init_f32+0x28>
 8013a5a:	b430      	push	{r4, r5}
 8013a5c:	490a      	ldr	r1, [pc, #40]	@ (8013a88 <arm_rfft_1024_fast_init_f32+0x30>)
 8013a5e:	4a0b      	ldr	r2, [pc, #44]	@ (8013a8c <arm_rfft_1024_fast_init_f32+0x34>)
 8013a60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013a64:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8013a68:	8003      	strh	r3, [r0, #0]
 8013a6a:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8013a6e:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8013a72:	4b07      	ldr	r3, [pc, #28]	@ (8013a90 <arm_rfft_1024_fast_init_f32+0x38>)
 8013a74:	8205      	strh	r5, [r0, #16]
 8013a76:	8184      	strh	r4, [r0, #12]
 8013a78:	6143      	str	r3, [r0, #20]
 8013a7a:	bc30      	pop	{r4, r5}
 8013a7c:	2000      	movs	r0, #0
 8013a7e:	4770      	bx	lr
 8013a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a84:	4770      	bx	lr
 8013a86:	bf00      	nop
 8013a88:	0801f1dc 	.word	0x0801f1dc
 8013a8c:	080262dc 	.word	0x080262dc
 8013a90:	080272dc 	.word	0x080272dc

08013a94 <arm_rfft_2048_fast_init_f32>:
 8013a94:	b190      	cbz	r0, 8013abc <arm_rfft_2048_fast_init_f32+0x28>
 8013a96:	b430      	push	{r4, r5}
 8013a98:	490a      	ldr	r1, [pc, #40]	@ (8013ac4 <arm_rfft_2048_fast_init_f32+0x30>)
 8013a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8013ac8 <arm_rfft_2048_fast_init_f32+0x34>)
 8013a9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013aa0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8013aa4:	8003      	strh	r3, [r0, #0]
 8013aa6:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8013aaa:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8013aae:	4b07      	ldr	r3, [pc, #28]	@ (8013acc <arm_rfft_2048_fast_init_f32+0x38>)
 8013ab0:	8205      	strh	r5, [r0, #16]
 8013ab2:	8184      	strh	r4, [r0, #12]
 8013ab4:	6143      	str	r3, [r0, #20]
 8013ab6:	bc30      	pop	{r4, r5}
 8013ab8:	2000      	movs	r0, #0
 8013aba:	4770      	bx	lr
 8013abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ac0:	4770      	bx	lr
 8013ac2:	bf00      	nop
 8013ac4:	0801c074 	.word	0x0801c074
 8013ac8:	0801f55c 	.word	0x0801f55c
 8013acc:	080282dc 	.word	0x080282dc

08013ad0 <arm_rfft_4096_fast_init_f32>:
 8013ad0:	b190      	cbz	r0, 8013af8 <arm_rfft_4096_fast_init_f32+0x28>
 8013ad2:	b430      	push	{r4, r5}
 8013ad4:	490a      	ldr	r1, [pc, #40]	@ (8013b00 <arm_rfft_4096_fast_init_f32+0x30>)
 8013ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8013b04 <arm_rfft_4096_fast_init_f32+0x34>)
 8013ad8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013adc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8013ae0:	8003      	strh	r3, [r0, #0]
 8013ae2:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8013ae6:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8013aea:	4b07      	ldr	r3, [pc, #28]	@ (8013b08 <arm_rfft_4096_fast_init_f32+0x38>)
 8013aec:	8205      	strh	r5, [r0, #16]
 8013aee:	8184      	strh	r4, [r0, #12]
 8013af0:	6143      	str	r3, [r0, #20]
 8013af2:	bc30      	pop	{r4, r5}
 8013af4:	2000      	movs	r0, #0
 8013af6:	4770      	bx	lr
 8013af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013afc:	4770      	bx	lr
 8013afe:	bf00      	nop
 8013b00:	0801d04c 	.word	0x0801d04c
 8013b04:	080219dc 	.word	0x080219dc
 8013b08:	0802a75c 	.word	0x0802a75c

08013b0c <arm_rfft_fast_init_f32>:
 8013b0c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8013b10:	d01f      	beq.n	8013b52 <arm_rfft_fast_init_f32+0x46>
 8013b12:	d90b      	bls.n	8013b2c <arm_rfft_fast_init_f32+0x20>
 8013b14:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8013b18:	d019      	beq.n	8013b4e <arm_rfft_fast_init_f32+0x42>
 8013b1a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8013b1e:	d012      	beq.n	8013b46 <arm_rfft_fast_init_f32+0x3a>
 8013b20:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013b24:	d00d      	beq.n	8013b42 <arm_rfft_fast_init_f32+0x36>
 8013b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b2a:	4770      	bx	lr
 8013b2c:	2940      	cmp	r1, #64	@ 0x40
 8013b2e:	d00c      	beq.n	8013b4a <arm_rfft_fast_init_f32+0x3e>
 8013b30:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8013b34:	d003      	beq.n	8013b3e <arm_rfft_fast_init_f32+0x32>
 8013b36:	2920      	cmp	r1, #32
 8013b38:	d1f5      	bne.n	8013b26 <arm_rfft_fast_init_f32+0x1a>
 8013b3a:	4b07      	ldr	r3, [pc, #28]	@ (8013b58 <arm_rfft_fast_init_f32+0x4c>)
 8013b3c:	4718      	bx	r3
 8013b3e:	4b07      	ldr	r3, [pc, #28]	@ (8013b5c <arm_rfft_fast_init_f32+0x50>)
 8013b40:	4718      	bx	r3
 8013b42:	4b07      	ldr	r3, [pc, #28]	@ (8013b60 <arm_rfft_fast_init_f32+0x54>)
 8013b44:	4718      	bx	r3
 8013b46:	4b07      	ldr	r3, [pc, #28]	@ (8013b64 <arm_rfft_fast_init_f32+0x58>)
 8013b48:	4718      	bx	r3
 8013b4a:	4b07      	ldr	r3, [pc, #28]	@ (8013b68 <arm_rfft_fast_init_f32+0x5c>)
 8013b4c:	e7f6      	b.n	8013b3c <arm_rfft_fast_init_f32+0x30>
 8013b4e:	4b07      	ldr	r3, [pc, #28]	@ (8013b6c <arm_rfft_fast_init_f32+0x60>)
 8013b50:	e7f4      	b.n	8013b3c <arm_rfft_fast_init_f32+0x30>
 8013b52:	4b07      	ldr	r3, [pc, #28]	@ (8013b70 <arm_rfft_fast_init_f32+0x64>)
 8013b54:	e7f2      	b.n	8013b3c <arm_rfft_fast_init_f32+0x30>
 8013b56:	bf00      	nop
 8013b58:	0801397d 	.word	0x0801397d
 8013b5c:	080139e5 	.word	0x080139e5
 8013b60:	08013a59 	.word	0x08013a59
 8013b64:	08013ad1 	.word	0x08013ad1
 8013b68:	080139b1 	.word	0x080139b1
 8013b6c:	08013a95 	.word	0x08013a95
 8013b70:	08013a1d 	.word	0x08013a1d

08013b74 <stage_rfft_f32>:
 8013b74:	b410      	push	{r4}
 8013b76:	edd1 7a00 	vldr	s15, [r1]
 8013b7a:	ed91 7a01 	vldr	s14, [r1, #4]
 8013b7e:	8804      	ldrh	r4, [r0, #0]
 8013b80:	6940      	ldr	r0, [r0, #20]
 8013b82:	ee37 7a07 	vadd.f32	s14, s14, s14
 8013b86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013b8a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8013b8e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b96:	3c01      	subs	r4, #1
 8013b98:	ee26 7a84 	vmul.f32	s14, s13, s8
 8013b9c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013ba0:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8013ba4:	ed82 7a00 	vstr	s14, [r2]
 8013ba8:	edc2 7a01 	vstr	s15, [r2, #4]
 8013bac:	3010      	adds	r0, #16
 8013bae:	3210      	adds	r2, #16
 8013bb0:	3b08      	subs	r3, #8
 8013bb2:	3110      	adds	r1, #16
 8013bb4:	ed11 5a02 	vldr	s10, [r1, #-8]
 8013bb8:	ed93 7a02 	vldr	s14, [r3, #8]
 8013bbc:	ed50 6a02 	vldr	s13, [r0, #-8]
 8013bc0:	edd3 4a03 	vldr	s9, [r3, #12]
 8013bc4:	ed51 7a01 	vldr	s15, [r1, #-4]
 8013bc8:	ed10 6a01 	vldr	s12, [r0, #-4]
 8013bcc:	ee77 5a45 	vsub.f32	s11, s14, s10
 8013bd0:	ee37 7a05 	vadd.f32	s14, s14, s10
 8013bd4:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8013bd8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8013bdc:	ee66 5a25 	vmul.f32	s11, s12, s11
 8013be0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8013be4:	ee37 7a23 	vadd.f32	s14, s14, s7
 8013be8:	ee66 6a85 	vmul.f32	s13, s13, s10
 8013bec:	ee26 6a05 	vmul.f32	s12, s12, s10
 8013bf0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8013bf4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013bf8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013bfc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013c00:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013c04:	3c01      	subs	r4, #1
 8013c06:	ed02 7a02 	vstr	s14, [r2, #-8]
 8013c0a:	ed42 7a01 	vstr	s15, [r2, #-4]
 8013c0e:	f1a3 0308 	sub.w	r3, r3, #8
 8013c12:	f101 0108 	add.w	r1, r1, #8
 8013c16:	f100 0008 	add.w	r0, r0, #8
 8013c1a:	f102 0208 	add.w	r2, r2, #8
 8013c1e:	d1c9      	bne.n	8013bb4 <stage_rfft_f32+0x40>
 8013c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c24:	4770      	bx	lr
 8013c26:	bf00      	nop

08013c28 <merge_rfft_f32>:
 8013c28:	b410      	push	{r4}
 8013c2a:	edd1 7a00 	vldr	s15, [r1]
 8013c2e:	edd1 6a01 	vldr	s13, [r1, #4]
 8013c32:	8804      	ldrh	r4, [r0, #0]
 8013c34:	6940      	ldr	r0, [r0, #20]
 8013c36:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013c3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013c3e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8013c42:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013c46:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013c4a:	3c01      	subs	r4, #1
 8013c4c:	ed82 7a00 	vstr	s14, [r2]
 8013c50:	edc2 7a01 	vstr	s15, [r2, #4]
 8013c54:	b3dc      	cbz	r4, 8013cce <merge_rfft_f32+0xa6>
 8013c56:	00e3      	lsls	r3, r4, #3
 8013c58:	3b08      	subs	r3, #8
 8013c5a:	440b      	add	r3, r1
 8013c5c:	3010      	adds	r0, #16
 8013c5e:	3210      	adds	r2, #16
 8013c60:	3110      	adds	r1, #16
 8013c62:	ed11 5a02 	vldr	s10, [r1, #-8]
 8013c66:	ed93 7a02 	vldr	s14, [r3, #8]
 8013c6a:	ed50 6a02 	vldr	s13, [r0, #-8]
 8013c6e:	edd3 4a03 	vldr	s9, [r3, #12]
 8013c72:	ed51 7a01 	vldr	s15, [r1, #-4]
 8013c76:	ed10 6a01 	vldr	s12, [r0, #-4]
 8013c7a:	ee75 5a47 	vsub.f32	s11, s10, s14
 8013c7e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8013c82:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8013c86:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8013c8a:	ee66 5a25 	vmul.f32	s11, s12, s11
 8013c8e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8013c92:	ee37 7a63 	vsub.f32	s14, s14, s7
 8013c96:	ee66 6a85 	vmul.f32	s13, s13, s10
 8013c9a:	ee26 6a05 	vmul.f32	s12, s12, s10
 8013c9e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8013ca2:	ee37 7a46 	vsub.f32	s14, s14, s12
 8013ca6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013caa:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013cae:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013cb2:	3c01      	subs	r4, #1
 8013cb4:	ed02 7a02 	vstr	s14, [r2, #-8]
 8013cb8:	ed42 7a01 	vstr	s15, [r2, #-4]
 8013cbc:	f1a3 0308 	sub.w	r3, r3, #8
 8013cc0:	f101 0108 	add.w	r1, r1, #8
 8013cc4:	f100 0008 	add.w	r0, r0, #8
 8013cc8:	f102 0208 	add.w	r2, r2, #8
 8013ccc:	d1c9      	bne.n	8013c62 <merge_rfft_f32+0x3a>
 8013cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cd2:	4770      	bx	lr

08013cd4 <arm_rfft_fast_f32>:
 8013cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cd8:	8a05      	ldrh	r5, [r0, #16]
 8013cda:	086d      	lsrs	r5, r5, #1
 8013cdc:	8005      	strh	r5, [r0, #0]
 8013cde:	4604      	mov	r4, r0
 8013ce0:	4616      	mov	r6, r2
 8013ce2:	461d      	mov	r5, r3
 8013ce4:	b14b      	cbz	r3, 8013cfa <arm_rfft_fast_f32+0x26>
 8013ce6:	f7ff ff9f 	bl	8013c28 <merge_rfft_f32>
 8013cea:	462a      	mov	r2, r5
 8013cec:	4631      	mov	r1, r6
 8013cee:	4620      	mov	r0, r4
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf6:	f000 bb33 	b.w	8014360 <arm_cfft_f32>
 8013cfa:	460f      	mov	r7, r1
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	2301      	movs	r3, #1
 8013d00:	f000 fb2e 	bl	8014360 <arm_cfft_f32>
 8013d04:	4632      	mov	r2, r6
 8013d06:	4639      	mov	r1, r7
 8013d08:	4620      	mov	r0, r4
 8013d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d0e:	f7ff bf31 	b.w	8013b74 <stage_rfft_f32>
 8013d12:	bf00      	nop

08013d14 <arm_cfft_radix8by2_f32>:
 8013d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d18:	ed2d 8b08 	vpush	{d8-d11}
 8013d1c:	4607      	mov	r7, r0
 8013d1e:	4608      	mov	r0, r1
 8013d20:	f8b7 c000 	ldrh.w	ip, [r7]
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8013d2a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8013d2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8013d32:	f000 80b0 	beq.w	8013e96 <arm_cfft_radix8by2_f32+0x182>
 8013d36:	008c      	lsls	r4, r1, #2
 8013d38:	3410      	adds	r4, #16
 8013d3a:	f100 0310 	add.w	r3, r0, #16
 8013d3e:	1906      	adds	r6, r0, r4
 8013d40:	3210      	adds	r2, #16
 8013d42:	4444      	add	r4, r8
 8013d44:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8013d48:	f108 0510 	add.w	r5, r8, #16
 8013d4c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8013d50:	ed55 2a03 	vldr	s5, [r5, #-12]
 8013d54:	ed54 4a04 	vldr	s9, [r4, #-16]
 8013d58:	ed14 4a03 	vldr	s8, [r4, #-12]
 8013d5c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8013d60:	ed54 5a01 	vldr	s11, [r4, #-4]
 8013d64:	ed53 3a04 	vldr	s7, [r3, #-16]
 8013d68:	ed15 0a02 	vldr	s0, [r5, #-8]
 8013d6c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8013d70:	ed56 6a04 	vldr	s13, [r6, #-16]
 8013d74:	ed16 3a03 	vldr	s6, [r6, #-12]
 8013d78:	ed13 7a03 	vldr	s14, [r3, #-12]
 8013d7c:	ed13 5a02 	vldr	s10, [r3, #-8]
 8013d80:	ed53 7a01 	vldr	s15, [r3, #-4]
 8013d84:	ed16 1a02 	vldr	s2, [r6, #-8]
 8013d88:	ed56 1a01 	vldr	s3, [r6, #-4]
 8013d8c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8013d90:	ee37 ba22 	vadd.f32	s22, s14, s5
 8013d94:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8013d98:	ee33 9a04 	vadd.f32	s18, s6, s8
 8013d9c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8013da0:	ee75 aa00 	vadd.f32	s21, s10, s0
 8013da4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8013da8:	ee71 8a06 	vadd.f32	s17, s2, s12
 8013dac:	ed43 ba04 	vstr	s23, [r3, #-16]
 8013db0:	ed03 ba03 	vstr	s22, [r3, #-12]
 8013db4:	ed43 aa02 	vstr	s21, [r3, #-8]
 8013db8:	ed03 aa01 	vstr	s20, [r3, #-4]
 8013dbc:	ed06 8a01 	vstr	s16, [r6, #-4]
 8013dc0:	ed46 9a04 	vstr	s19, [r6, #-16]
 8013dc4:	ed06 9a03 	vstr	s18, [r6, #-12]
 8013dc8:	ed46 8a02 	vstr	s17, [r6, #-8]
 8013dcc:	ee37 7a62 	vsub.f32	s14, s14, s5
 8013dd0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8013dd4:	ee34 4a43 	vsub.f32	s8, s8, s6
 8013dd8:	ed52 6a03 	vldr	s13, [r2, #-12]
 8013ddc:	ed12 3a04 	vldr	s6, [r2, #-16]
 8013de0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8013de4:	ee27 8a26 	vmul.f32	s16, s14, s13
 8013de8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8013dec:	ee23 2a83 	vmul.f32	s4, s7, s6
 8013df0:	ee64 4a83 	vmul.f32	s9, s9, s6
 8013df4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8013df8:	ee27 7a03 	vmul.f32	s14, s14, s6
 8013dfc:	ee64 6a26 	vmul.f32	s13, s8, s13
 8013e00:	ee24 4a03 	vmul.f32	s8, s8, s6
 8013e04:	ee37 7a63 	vsub.f32	s14, s14, s7
 8013e08:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013e0c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8013e10:	ee32 3a08 	vadd.f32	s6, s4, s16
 8013e14:	ed05 7a03 	vstr	s14, [r5, #-12]
 8013e18:	ed05 3a04 	vstr	s6, [r5, #-16]
 8013e1c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8013e20:	ed44 6a03 	vstr	s13, [r4, #-12]
 8013e24:	ed12 7a01 	vldr	s14, [r2, #-4]
 8013e28:	ee76 6a41 	vsub.f32	s13, s12, s2
 8013e2c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8013e30:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8013e34:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013e38:	ed52 5a02 	vldr	s11, [r2, #-8]
 8013e3c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8013e40:	ee66 4a87 	vmul.f32	s9, s13, s14
 8013e44:	ee25 4a25 	vmul.f32	s8, s10, s11
 8013e48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013e4c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8013e50:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8013e54:	ee26 7a07 	vmul.f32	s14, s12, s14
 8013e58:	ee26 6a25 	vmul.f32	s12, s12, s11
 8013e5c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013e60:	ee74 5a23 	vadd.f32	s11, s8, s7
 8013e64:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8013e68:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013e6c:	3310      	adds	r3, #16
 8013e6e:	4563      	cmp	r3, ip
 8013e70:	ed45 5a02 	vstr	s11, [r5, #-8]
 8013e74:	f106 0610 	add.w	r6, r6, #16
 8013e78:	ed45 7a01 	vstr	s15, [r5, #-4]
 8013e7c:	f102 0210 	add.w	r2, r2, #16
 8013e80:	ed04 6a02 	vstr	s12, [r4, #-8]
 8013e84:	ed04 7a01 	vstr	s14, [r4, #-4]
 8013e88:	f105 0510 	add.w	r5, r5, #16
 8013e8c:	f104 0410 	add.w	r4, r4, #16
 8013e90:	f47f af5c 	bne.w	8013d4c <arm_cfft_radix8by2_f32+0x38>
 8013e94:	687a      	ldr	r2, [r7, #4]
 8013e96:	b28c      	uxth	r4, r1
 8013e98:	4621      	mov	r1, r4
 8013e9a:	2302      	movs	r3, #2
 8013e9c:	f000 fc1c 	bl	80146d8 <arm_radix8_butterfly_f32>
 8013ea0:	ecbd 8b08 	vpop	{d8-d11}
 8013ea4:	4621      	mov	r1, r4
 8013ea6:	687a      	ldr	r2, [r7, #4]
 8013ea8:	4640      	mov	r0, r8
 8013eaa:	2302      	movs	r3, #2
 8013eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb0:	f000 bc12 	b.w	80146d8 <arm_radix8_butterfly_f32>

08013eb4 <arm_cfft_radix8by4_f32>:
 8013eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eb8:	ed2d 8b0a 	vpush	{d8-d12}
 8013ebc:	b08d      	sub	sp, #52	@ 0x34
 8013ebe:	460d      	mov	r5, r1
 8013ec0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013ec2:	8801      	ldrh	r1, [r0, #0]
 8013ec4:	6842      	ldr	r2, [r0, #4]
 8013ec6:	900a      	str	r0, [sp, #40]	@ 0x28
 8013ec8:	0849      	lsrs	r1, r1, #1
 8013eca:	008b      	lsls	r3, r1, #2
 8013ecc:	18ee      	adds	r6, r5, r3
 8013ece:	18f0      	adds	r0, r6, r3
 8013ed0:	edd0 5a00 	vldr	s11, [r0]
 8013ed4:	edd5 7a00 	vldr	s15, [r5]
 8013ed8:	ed96 7a00 	vldr	s14, [r6]
 8013edc:	edd0 3a01 	vldr	s7, [r0, #4]
 8013ee0:	ed96 4a01 	vldr	s8, [r6, #4]
 8013ee4:	ed95 5a01 	vldr	s10, [r5, #4]
 8013ee8:	9008      	str	r0, [sp, #32]
 8013eea:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8013eee:	18c7      	adds	r7, r0, r3
 8013ef0:	edd7 4a00 	vldr	s9, [r7]
 8013ef4:	ed97 3a01 	vldr	s6, [r7, #4]
 8013ef8:	9701      	str	r7, [sp, #4]
 8013efa:	ee77 6a06 	vadd.f32	s13, s14, s12
 8013efe:	462c      	mov	r4, r5
 8013f00:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013f04:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013f08:	ee16 ca90 	vmov	ip, s13
 8013f0c:	f844 cb08 	str.w	ip, [r4], #8
 8013f10:	ee75 6a23 	vadd.f32	s13, s10, s7
 8013f14:	edd6 5a01 	vldr	s11, [r6, #4]
 8013f18:	edd7 2a01 	vldr	s5, [r7, #4]
 8013f1c:	9404      	str	r4, [sp, #16]
 8013f1e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8013f22:	ee74 3a27 	vadd.f32	s7, s8, s15
 8013f26:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013f2a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8013f2e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8013f32:	0849      	lsrs	r1, r1, #1
 8013f34:	f102 0e08 	add.w	lr, r2, #8
 8013f38:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8013f3c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8013f40:	9109      	str	r1, [sp, #36]	@ 0x24
 8013f42:	ee35 4a47 	vsub.f32	s8, s10, s14
 8013f46:	f1a1 0902 	sub.w	r9, r1, #2
 8013f4a:	f8cd e00c 	str.w	lr, [sp, #12]
 8013f4e:	4631      	mov	r1, r6
 8013f50:	ee13 ea90 	vmov	lr, s7
 8013f54:	ee36 6a64 	vsub.f32	s12, s12, s9
 8013f58:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8013f5c:	4604      	mov	r4, r0
 8013f5e:	edc5 5a01 	vstr	s11, [r5, #4]
 8013f62:	ee37 7a05 	vadd.f32	s14, s14, s10
 8013f66:	f841 eb08 	str.w	lr, [r1], #8
 8013f6a:	ee34 5a24 	vadd.f32	s10, s8, s9
 8013f6e:	ee16 ea10 	vmov	lr, s12
 8013f72:	ed86 5a01 	vstr	s10, [r6, #4]
 8013f76:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8013f7a:	f844 eb08 	str.w	lr, [r4], #8
 8013f7e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8013f82:	edc0 6a01 	vstr	s13, [r0, #4]
 8013f86:	9405      	str	r4, [sp, #20]
 8013f88:	4604      	mov	r4, r0
 8013f8a:	ee17 0a90 	vmov	r0, s15
 8013f8e:	9106      	str	r1, [sp, #24]
 8013f90:	ee37 7a64 	vsub.f32	s14, s14, s9
 8013f94:	f102 0110 	add.w	r1, r2, #16
 8013f98:	46bc      	mov	ip, r7
 8013f9a:	9100      	str	r1, [sp, #0]
 8013f9c:	f847 0b08 	str.w	r0, [r7], #8
 8013fa0:	f102 0118 	add.w	r1, r2, #24
 8013fa4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8013fa8:	9102      	str	r1, [sp, #8]
 8013faa:	ed8c 7a01 	vstr	s14, [ip, #4]
 8013fae:	9007      	str	r0, [sp, #28]
 8013fb0:	f000 8134 	beq.w	801421c <arm_cfft_radix8by4_f32+0x368>
 8013fb4:	f102 0920 	add.w	r9, r2, #32
 8013fb8:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8013fbc:	9a01      	ldr	r2, [sp, #4]
 8013fbe:	f8dd a000 	ldr.w	sl, [sp]
 8013fc2:	3b0c      	subs	r3, #12
 8013fc4:	4683      	mov	fp, r0
 8013fc6:	4463      	add	r3, ip
 8013fc8:	f105 0e10 	add.w	lr, r5, #16
 8013fcc:	f1a4 010c 	sub.w	r1, r4, #12
 8013fd0:	f104 0510 	add.w	r5, r4, #16
 8013fd4:	f1a6 0c0c 	sub.w	ip, r6, #12
 8013fd8:	f1a2 040c 	sub.w	r4, r2, #12
 8013fdc:	f106 0010 	add.w	r0, r6, #16
 8013fe0:	3210      	adds	r2, #16
 8013fe2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8013fe6:	ed55 5a02 	vldr	s11, [r5, #-8]
 8013fea:	ed50 7a02 	vldr	s15, [r0, #-8]
 8013fee:	ed52 1a02 	vldr	s3, [r2, #-8]
 8013ff2:	ed55 6a01 	vldr	s13, [r5, #-4]
 8013ff6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8013ffa:	ed12 1a01 	vldr	s2, [r2, #-4]
 8013ffe:	ed10 8a01 	vldr	s16, [r0, #-4]
 8014002:	ee35 4a25 	vadd.f32	s8, s10, s11
 8014006:	ee30 6a26 	vadd.f32	s12, s0, s13
 801400a:	ee37 7a84 	vadd.f32	s14, s15, s8
 801400e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8014012:	ee37 7a21 	vadd.f32	s14, s14, s3
 8014016:	ee75 5a65 	vsub.f32	s11, s10, s11
 801401a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 801401e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8014022:	ed52 6a01 	vldr	s13, [r2, #-4]
 8014026:	ee36 7a07 	vadd.f32	s14, s12, s14
 801402a:	ee78 aa25 	vadd.f32	s21, s16, s11
 801402e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014032:	ee70 3a67 	vsub.f32	s7, s0, s15
 8014036:	ed0e 7a01 	vstr	s14, [lr, #-4]
 801403a:	ed94 7a02 	vldr	s14, [r4, #8]
 801403e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8014042:	ed91 ba02 	vldr	s22, [r1, #8]
 8014046:	edd3 9a02 	vldr	s19, [r3, #8]
 801404a:	edd4 2a01 	vldr	s5, [r4, #4]
 801404e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8014052:	ed93 5a01 	vldr	s10, [r3, #4]
 8014056:	edd1 0a01 	vldr	s1, [r1, #4]
 801405a:	ee72 6a07 	vadd.f32	s13, s4, s14
 801405e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8014062:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8014066:	ee79 4a22 	vadd.f32	s9, s18, s5
 801406a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 801406e:	ee79 2a62 	vsub.f32	s5, s18, s5
 8014072:	ed8c 7a02 	vstr	s14, [ip, #8]
 8014076:	ed91 7a01 	vldr	s14, [r1, #4]
 801407a:	edd3 8a01 	vldr	s17, [r3, #4]
 801407e:	ee34 7a87 	vadd.f32	s14, s9, s14
 8014082:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8014086:	ee37 7a28 	vadd.f32	s14, s14, s17
 801408a:	ee32 9a60 	vsub.f32	s18, s4, s1
 801408e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8014092:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8014096:	ed1a aa02 	vldr	s20, [sl, #-8]
 801409a:	ee73 8a22 	vadd.f32	s17, s6, s5
 801409e:	ee39 9a05 	vadd.f32	s18, s18, s10
 80140a2:	ee7a aac1 	vsub.f32	s21, s21, s2
 80140a6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80140aa:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80140ae:	ee69 ba07 	vmul.f32	s23, s18, s14
 80140b2:	ee6a aa87 	vmul.f32	s21, s21, s14
 80140b6:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80140ba:	ee63 ca87 	vmul.f32	s25, s7, s14
 80140be:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80140c2:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80140c6:	ee68 8a87 	vmul.f32	s17, s17, s14
 80140ca:	ee73 3aea 	vsub.f32	s7, s7, s21
 80140ce:	ee78 8a89 	vadd.f32	s17, s17, s18
 80140d2:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80140d6:	ee3b aaca 	vsub.f32	s20, s23, s20
 80140da:	ee34 4a67 	vsub.f32	s8, s8, s15
 80140de:	ee76 6acb 	vsub.f32	s13, s13, s22
 80140e2:	ee36 6a48 	vsub.f32	s12, s12, s16
 80140e6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80140ea:	ed00 7a02 	vstr	s14, [r0, #-8]
 80140ee:	ed40 3a01 	vstr	s7, [r0, #-4]
 80140f2:	edc1 8a01 	vstr	s17, [r1, #4]
 80140f6:	ed81 aa02 	vstr	s20, [r1, #8]
 80140fa:	ed59 3a04 	vldr	s7, [r9, #-16]
 80140fe:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8014102:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8014106:	ed59 6a03 	vldr	s13, [r9, #-12]
 801410a:	ee34 4a61 	vsub.f32	s8, s8, s3
 801410e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8014112:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8014116:	ee66 9a26 	vmul.f32	s19, s12, s13
 801411a:	ee24 9a23 	vmul.f32	s18, s8, s7
 801411e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8014122:	ee24 4a26 	vmul.f32	s8, s8, s13
 8014126:	ee27 7a26 	vmul.f32	s14, s14, s13
 801412a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 801412e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8014132:	ee36 6a44 	vsub.f32	s12, s12, s8
 8014136:	ee37 7a64 	vsub.f32	s14, s14, s9
 801413a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 801413e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8014142:	ee75 6a60 	vsub.f32	s13, s10, s1
 8014146:	ee75 5ac8 	vsub.f32	s11, s11, s16
 801414a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801414e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8014152:	ed05 6a01 	vstr	s12, [r5, #-4]
 8014156:	ed84 7a01 	vstr	s14, [r4, #4]
 801415a:	ed84 4a02 	vstr	s8, [r4, #8]
 801415e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8014162:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8014166:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 801416a:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 801416e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8014172:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8014176:	ee67 2a26 	vmul.f32	s5, s14, s13
 801417a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801417e:	ee26 5a25 	vmul.f32	s10, s12, s11
 8014182:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014186:	ee26 6a26 	vmul.f32	s12, s12, s13
 801418a:	ee27 7a25 	vmul.f32	s14, s14, s11
 801418e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8014192:	ee23 3a25 	vmul.f32	s6, s6, s11
 8014196:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801419a:	ee75 5a24 	vadd.f32	s11, s10, s9
 801419e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80141a2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80141a6:	f1bb 0b01 	subs.w	fp, fp, #1
 80141aa:	ed42 5a02 	vstr	s11, [r2, #-8]
 80141ae:	ed42 7a01 	vstr	s15, [r2, #-4]
 80141b2:	f10e 0e08 	add.w	lr, lr, #8
 80141b6:	ed83 3a02 	vstr	s6, [r3, #8]
 80141ba:	ed83 7a01 	vstr	s14, [r3, #4]
 80141be:	f1ac 0c08 	sub.w	ip, ip, #8
 80141c2:	f10a 0a08 	add.w	sl, sl, #8
 80141c6:	f100 0008 	add.w	r0, r0, #8
 80141ca:	f1a1 0108 	sub.w	r1, r1, #8
 80141ce:	f109 0910 	add.w	r9, r9, #16
 80141d2:	f105 0508 	add.w	r5, r5, #8
 80141d6:	f1a4 0408 	sub.w	r4, r4, #8
 80141da:	f108 0818 	add.w	r8, r8, #24
 80141de:	f102 0208 	add.w	r2, r2, #8
 80141e2:	f1a3 0308 	sub.w	r3, r3, #8
 80141e6:	f47f aefc 	bne.w	8013fe2 <arm_cfft_radix8by4_f32+0x12e>
 80141ea:	9907      	ldr	r1, [sp, #28]
 80141ec:	9800      	ldr	r0, [sp, #0]
 80141ee:	00cb      	lsls	r3, r1, #3
 80141f0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80141f4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80141f8:	9100      	str	r1, [sp, #0]
 80141fa:	9904      	ldr	r1, [sp, #16]
 80141fc:	4419      	add	r1, r3
 80141fe:	9104      	str	r1, [sp, #16]
 8014200:	9903      	ldr	r1, [sp, #12]
 8014202:	4419      	add	r1, r3
 8014204:	9103      	str	r1, [sp, #12]
 8014206:	9906      	ldr	r1, [sp, #24]
 8014208:	4419      	add	r1, r3
 801420a:	9106      	str	r1, [sp, #24]
 801420c:	9905      	ldr	r1, [sp, #20]
 801420e:	441f      	add	r7, r3
 8014210:	4419      	add	r1, r3
 8014212:	9b02      	ldr	r3, [sp, #8]
 8014214:	9105      	str	r1, [sp, #20]
 8014216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801421a:	9302      	str	r3, [sp, #8]
 801421c:	9904      	ldr	r1, [sp, #16]
 801421e:	9805      	ldr	r0, [sp, #20]
 8014220:	ed91 4a00 	vldr	s8, [r1]
 8014224:	edd0 6a00 	vldr	s13, [r0]
 8014228:	9b06      	ldr	r3, [sp, #24]
 801422a:	ed97 3a00 	vldr	s6, [r7]
 801422e:	edd3 7a00 	vldr	s15, [r3]
 8014232:	edd0 4a01 	vldr	s9, [r0, #4]
 8014236:	edd1 3a01 	vldr	s7, [r1, #4]
 801423a:	ed97 2a01 	vldr	s4, [r7, #4]
 801423e:	ed93 7a01 	vldr	s14, [r3, #4]
 8014242:	9a03      	ldr	r2, [sp, #12]
 8014244:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8014248:	ee34 6a26 	vadd.f32	s12, s8, s13
 801424c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8014250:	ee37 5a86 	vadd.f32	s10, s15, s12
 8014254:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8014258:	ee35 5a03 	vadd.f32	s10, s10, s6
 801425c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8014260:	ed81 5a00 	vstr	s10, [r1]
 8014264:	ed93 5a01 	vldr	s10, [r3, #4]
 8014268:	edd7 4a01 	vldr	s9, [r7, #4]
 801426c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8014270:	ee37 4a26 	vadd.f32	s8, s14, s13
 8014274:	ee35 5a24 	vadd.f32	s10, s10, s9
 8014278:	ee73 4ae7 	vsub.f32	s9, s7, s15
 801427c:	ed81 5a01 	vstr	s10, [r1, #4]
 8014280:	edd2 1a00 	vldr	s3, [r2]
 8014284:	edd2 2a01 	vldr	s5, [r2, #4]
 8014288:	ee34 5a83 	vadd.f32	s10, s9, s6
 801428c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8014290:	ee36 6a67 	vsub.f32	s12, s12, s15
 8014294:	ee64 4a21 	vmul.f32	s9, s8, s3
 8014298:	ee24 4a22 	vmul.f32	s8, s8, s5
 801429c:	ee65 2a22 	vmul.f32	s5, s10, s5
 80142a0:	ee25 5a21 	vmul.f32	s10, s10, s3
 80142a4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80142a8:	ee35 5a44 	vsub.f32	s10, s10, s8
 80142ac:	edc3 2a00 	vstr	s5, [r3]
 80142b0:	ed83 5a01 	vstr	s10, [r3, #4]
 80142b4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80142b8:	9b00      	ldr	r3, [sp, #0]
 80142ba:	ee36 6a43 	vsub.f32	s12, s12, s6
 80142be:	ed93 4a01 	vldr	s8, [r3, #4]
 80142c2:	ed93 5a00 	vldr	s10, [r3]
 80142c6:	9b02      	ldr	r3, [sp, #8]
 80142c8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80142cc:	ee66 4a05 	vmul.f32	s9, s12, s10
 80142d0:	ee25 5a85 	vmul.f32	s10, s11, s10
 80142d4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80142d8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80142dc:	ee35 6a46 	vsub.f32	s12, s10, s12
 80142e0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80142e4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80142e8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80142ec:	ed80 6a01 	vstr	s12, [r0, #4]
 80142f0:	edc0 5a00 	vstr	s11, [r0]
 80142f4:	edd3 5a01 	vldr	s11, [r3, #4]
 80142f8:	edd3 6a00 	vldr	s13, [r3]
 80142fc:	ee37 7a02 	vadd.f32	s14, s14, s4
 8014300:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8014304:	ee27 6a26 	vmul.f32	s12, s14, s13
 8014308:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801430c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8014310:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014314:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014318:	ee76 7a27 	vadd.f32	s15, s12, s15
 801431c:	ed87 7a01 	vstr	s14, [r7, #4]
 8014320:	edc7 7a00 	vstr	s15, [r7]
 8014324:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8014328:	4621      	mov	r1, r4
 801432a:	686a      	ldr	r2, [r5, #4]
 801432c:	2304      	movs	r3, #4
 801432e:	f000 f9d3 	bl	80146d8 <arm_radix8_butterfly_f32>
 8014332:	4630      	mov	r0, r6
 8014334:	4621      	mov	r1, r4
 8014336:	686a      	ldr	r2, [r5, #4]
 8014338:	2304      	movs	r3, #4
 801433a:	f000 f9cd 	bl	80146d8 <arm_radix8_butterfly_f32>
 801433e:	9808      	ldr	r0, [sp, #32]
 8014340:	686a      	ldr	r2, [r5, #4]
 8014342:	4621      	mov	r1, r4
 8014344:	2304      	movs	r3, #4
 8014346:	f000 f9c7 	bl	80146d8 <arm_radix8_butterfly_f32>
 801434a:	686a      	ldr	r2, [r5, #4]
 801434c:	9801      	ldr	r0, [sp, #4]
 801434e:	4621      	mov	r1, r4
 8014350:	2304      	movs	r3, #4
 8014352:	b00d      	add	sp, #52	@ 0x34
 8014354:	ecbd 8b0a 	vpop	{d8-d12}
 8014358:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801435c:	f000 b9bc 	b.w	80146d8 <arm_radix8_butterfly_f32>

08014360 <arm_cfft_f32>:
 8014360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014364:	2a01      	cmp	r2, #1
 8014366:	4606      	mov	r6, r0
 8014368:	4617      	mov	r7, r2
 801436a:	460c      	mov	r4, r1
 801436c:	4698      	mov	r8, r3
 801436e:	8805      	ldrh	r5, [r0, #0]
 8014370:	d056      	beq.n	8014420 <arm_cfft_f32+0xc0>
 8014372:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8014376:	d063      	beq.n	8014440 <arm_cfft_f32+0xe0>
 8014378:	d916      	bls.n	80143a8 <arm_cfft_f32+0x48>
 801437a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 801437e:	d01a      	beq.n	80143b6 <arm_cfft_f32+0x56>
 8014380:	d947      	bls.n	8014412 <arm_cfft_f32+0xb2>
 8014382:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8014386:	d05b      	beq.n	8014440 <arm_cfft_f32+0xe0>
 8014388:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 801438c:	d105      	bne.n	801439a <arm_cfft_f32+0x3a>
 801438e:	2301      	movs	r3, #1
 8014390:	6872      	ldr	r2, [r6, #4]
 8014392:	4629      	mov	r1, r5
 8014394:	4620      	mov	r0, r4
 8014396:	f000 f99f 	bl	80146d8 <arm_radix8_butterfly_f32>
 801439a:	f1b8 0f00 	cmp.w	r8, #0
 801439e:	d111      	bne.n	80143c4 <arm_cfft_f32+0x64>
 80143a0:	2f01      	cmp	r7, #1
 80143a2:	d016      	beq.n	80143d2 <arm_cfft_f32+0x72>
 80143a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143a8:	2d20      	cmp	r5, #32
 80143aa:	d049      	beq.n	8014440 <arm_cfft_f32+0xe0>
 80143ac:	d935      	bls.n	801441a <arm_cfft_f32+0xba>
 80143ae:	2d40      	cmp	r5, #64	@ 0x40
 80143b0:	d0ed      	beq.n	801438e <arm_cfft_f32+0x2e>
 80143b2:	2d80      	cmp	r5, #128	@ 0x80
 80143b4:	d1f1      	bne.n	801439a <arm_cfft_f32+0x3a>
 80143b6:	4621      	mov	r1, r4
 80143b8:	4630      	mov	r0, r6
 80143ba:	f7ff fcab 	bl	8013d14 <arm_cfft_radix8by2_f32>
 80143be:	f1b8 0f00 	cmp.w	r8, #0
 80143c2:	d0ed      	beq.n	80143a0 <arm_cfft_f32+0x40>
 80143c4:	68b2      	ldr	r2, [r6, #8]
 80143c6:	89b1      	ldrh	r1, [r6, #12]
 80143c8:	4620      	mov	r0, r4
 80143ca:	f000 f841 	bl	8014450 <arm_bitreversal_32>
 80143ce:	2f01      	cmp	r7, #1
 80143d0:	d1e8      	bne.n	80143a4 <arm_cfft_f32+0x44>
 80143d2:	ee07 5a90 	vmov	s15, r5
 80143d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80143de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80143e2:	2d00      	cmp	r5, #0
 80143e4:	d0de      	beq.n	80143a4 <arm_cfft_f32+0x44>
 80143e6:	f104 0108 	add.w	r1, r4, #8
 80143ea:	2300      	movs	r3, #0
 80143ec:	3301      	adds	r3, #1
 80143ee:	429d      	cmp	r5, r3
 80143f0:	f101 0108 	add.w	r1, r1, #8
 80143f4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80143f8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80143fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014400:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014404:	ed01 7a04 	vstr	s14, [r1, #-16]
 8014408:	ed41 7a03 	vstr	s15, [r1, #-12]
 801440c:	d1ee      	bne.n	80143ec <arm_cfft_f32+0x8c>
 801440e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014412:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8014416:	d0ba      	beq.n	801438e <arm_cfft_f32+0x2e>
 8014418:	e7bf      	b.n	801439a <arm_cfft_f32+0x3a>
 801441a:	2d10      	cmp	r5, #16
 801441c:	d0cb      	beq.n	80143b6 <arm_cfft_f32+0x56>
 801441e:	e7bc      	b.n	801439a <arm_cfft_f32+0x3a>
 8014420:	b19d      	cbz	r5, 801444a <arm_cfft_f32+0xea>
 8014422:	f101 030c 	add.w	r3, r1, #12
 8014426:	2200      	movs	r2, #0
 8014428:	ed53 7a02 	vldr	s15, [r3, #-8]
 801442c:	3201      	adds	r2, #1
 801442e:	eef1 7a67 	vneg.f32	s15, s15
 8014432:	4295      	cmp	r5, r2
 8014434:	ed43 7a02 	vstr	s15, [r3, #-8]
 8014438:	f103 0308 	add.w	r3, r3, #8
 801443c:	d1f4      	bne.n	8014428 <arm_cfft_f32+0xc8>
 801443e:	e798      	b.n	8014372 <arm_cfft_f32+0x12>
 8014440:	4621      	mov	r1, r4
 8014442:	4630      	mov	r0, r6
 8014444:	f7ff fd36 	bl	8013eb4 <arm_cfft_radix8by4_f32>
 8014448:	e7a7      	b.n	801439a <arm_cfft_f32+0x3a>
 801444a:	2b00      	cmp	r3, #0
 801444c:	d0aa      	beq.n	80143a4 <arm_cfft_f32+0x44>
 801444e:	e7b9      	b.n	80143c4 <arm_cfft_f32+0x64>

08014450 <arm_bitreversal_32>:
 8014450:	b1e9      	cbz	r1, 801448e <arm_bitreversal_32+0x3e>
 8014452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014454:	2500      	movs	r5, #0
 8014456:	f102 0e02 	add.w	lr, r2, #2
 801445a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 801445e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8014462:	08a4      	lsrs	r4, r4, #2
 8014464:	089b      	lsrs	r3, r3, #2
 8014466:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 801446a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 801446e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8014472:	00a6      	lsls	r6, r4, #2
 8014474:	009b      	lsls	r3, r3, #2
 8014476:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 801447a:	3304      	adds	r3, #4
 801447c:	1d34      	adds	r4, r6, #4
 801447e:	3502      	adds	r5, #2
 8014480:	58c6      	ldr	r6, [r0, r3]
 8014482:	5907      	ldr	r7, [r0, r4]
 8014484:	50c7      	str	r7, [r0, r3]
 8014486:	428d      	cmp	r5, r1
 8014488:	5106      	str	r6, [r0, r4]
 801448a:	d3e6      	bcc.n	801445a <arm_bitreversal_32+0xa>
 801448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801448e:	4770      	bx	lr

08014490 <arm_cmplx_mag_f32>:
 8014490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014494:	ed2d 8b02 	vpush	{d8}
 8014498:	0897      	lsrs	r7, r2, #2
 801449a:	b084      	sub	sp, #16
 801449c:	d077      	beq.n	801458e <arm_cmplx_mag_f32+0xfe>
 801449e:	f04f 0800 	mov.w	r8, #0
 80144a2:	f100 0420 	add.w	r4, r0, #32
 80144a6:	f101 0510 	add.w	r5, r1, #16
 80144aa:	463e      	mov	r6, r7
 80144ac:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 80144b0:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 80144b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80144b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80144bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80144c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80144c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c8:	f2c0 80c5 	blt.w	8014656 <arm_cmplx_mag_f32+0x1c6>
 80144cc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80144d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80144d8:	f100 80cb 	bmi.w	8014672 <arm_cmplx_mag_f32+0x1e2>
 80144dc:	ed05 8a04 	vstr	s16, [r5, #-16]
 80144e0:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 80144e4:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 80144e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80144ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80144f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80144f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80144f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144fc:	f2c0 80a8 	blt.w	8014650 <arm_cmplx_mag_f32+0x1c0>
 8014500:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014508:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801450c:	f100 80a8 	bmi.w	8014660 <arm_cmplx_mag_f32+0x1d0>
 8014510:	ed05 8a03 	vstr	s16, [r5, #-12]
 8014514:	ed14 0a04 	vldr	s0, [r4, #-16]
 8014518:	ed54 7a03 	vldr	s15, [r4, #-12]
 801451c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014520:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014524:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014528:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801452c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014530:	f2c0 808b 	blt.w	801464a <arm_cmplx_mag_f32+0x1ba>
 8014534:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801453c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014540:	f100 80a9 	bmi.w	8014696 <arm_cmplx_mag_f32+0x206>
 8014544:	ed05 8a02 	vstr	s16, [r5, #-8]
 8014548:	ed14 0a02 	vldr	s0, [r4, #-8]
 801454c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8014550:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014554:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014558:	ee30 0a27 	vadd.f32	s0, s0, s15
 801455c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014564:	db6e      	blt.n	8014644 <arm_cmplx_mag_f32+0x1b4>
 8014566:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801456a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014572:	f100 8087 	bmi.w	8014684 <arm_cmplx_mag_f32+0x1f4>
 8014576:	ed05 8a01 	vstr	s16, [r5, #-4]
 801457a:	3e01      	subs	r6, #1
 801457c:	f104 0420 	add.w	r4, r4, #32
 8014580:	f105 0510 	add.w	r5, r5, #16
 8014584:	d192      	bne.n	80144ac <arm_cmplx_mag_f32+0x1c>
 8014586:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 801458a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 801458e:	f012 0203 	ands.w	r2, r2, #3
 8014592:	d052      	beq.n	801463a <arm_cmplx_mag_f32+0x1aa>
 8014594:	ed90 0a00 	vldr	s0, [r0]
 8014598:	edd0 7a01 	vldr	s15, [r0, #4]
 801459c:	ee20 0a00 	vmul.f32	s0, s0, s0
 80145a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145a4:	2300      	movs	r3, #0
 80145a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80145aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80145ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b2:	bfb8      	it	lt
 80145b4:	600b      	strlt	r3, [r1, #0]
 80145b6:	db08      	blt.n	80145ca <arm_cmplx_mag_f32+0x13a>
 80145b8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80145bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145c0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80145c4:	d479      	bmi.n	80146ba <arm_cmplx_mag_f32+0x22a>
 80145c6:	ed81 8a00 	vstr	s16, [r1]
 80145ca:	3a01      	subs	r2, #1
 80145cc:	d035      	beq.n	801463a <arm_cmplx_mag_f32+0x1aa>
 80145ce:	ed90 0a02 	vldr	s0, [r0, #8]
 80145d2:	edd0 7a03 	vldr	s15, [r0, #12]
 80145d6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80145da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145de:	2300      	movs	r3, #0
 80145e0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80145e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80145e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ec:	bfb8      	it	lt
 80145ee:	604b      	strlt	r3, [r1, #4]
 80145f0:	db08      	blt.n	8014604 <arm_cmplx_mag_f32+0x174>
 80145f2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80145f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145fa:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80145fe:	d453      	bmi.n	80146a8 <arm_cmplx_mag_f32+0x218>
 8014600:	ed81 8a01 	vstr	s16, [r1, #4]
 8014604:	2a01      	cmp	r2, #1
 8014606:	d018      	beq.n	801463a <arm_cmplx_mag_f32+0x1aa>
 8014608:	ed90 0a04 	vldr	s0, [r0, #16]
 801460c:	edd0 7a05 	vldr	s15, [r0, #20]
 8014610:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014614:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014618:	2300      	movs	r3, #0
 801461a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801461e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014626:	db19      	blt.n	801465c <arm_cmplx_mag_f32+0x1cc>
 8014628:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014630:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014634:	d44a      	bmi.n	80146cc <arm_cmplx_mag_f32+0x23c>
 8014636:	ed81 8a02 	vstr	s16, [r1, #8]
 801463a:	b004      	add	sp, #16
 801463c:	ecbd 8b02 	vpop	{d8}
 8014640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014644:	f845 8c04 	str.w	r8, [r5, #-4]
 8014648:	e797      	b.n	801457a <arm_cmplx_mag_f32+0xea>
 801464a:	f845 8c08 	str.w	r8, [r5, #-8]
 801464e:	e77b      	b.n	8014548 <arm_cmplx_mag_f32+0xb8>
 8014650:	f845 8c0c 	str.w	r8, [r5, #-12]
 8014654:	e75e      	b.n	8014514 <arm_cmplx_mag_f32+0x84>
 8014656:	f845 8c10 	str.w	r8, [r5, #-16]
 801465a:	e741      	b.n	80144e0 <arm_cmplx_mag_f32+0x50>
 801465c:	608b      	str	r3, [r1, #8]
 801465e:	e7ec      	b.n	801463a <arm_cmplx_mag_f32+0x1aa>
 8014660:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014664:	9001      	str	r0, [sp, #4]
 8014666:	f005 fa53 	bl	8019b10 <sqrtf>
 801466a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801466e:	9801      	ldr	r0, [sp, #4]
 8014670:	e74e      	b.n	8014510 <arm_cmplx_mag_f32+0x80>
 8014672:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014676:	9001      	str	r0, [sp, #4]
 8014678:	f005 fa4a 	bl	8019b10 <sqrtf>
 801467c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014680:	9801      	ldr	r0, [sp, #4]
 8014682:	e72b      	b.n	80144dc <arm_cmplx_mag_f32+0x4c>
 8014684:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014688:	9001      	str	r0, [sp, #4]
 801468a:	f005 fa41 	bl	8019b10 <sqrtf>
 801468e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014692:	9801      	ldr	r0, [sp, #4]
 8014694:	e76f      	b.n	8014576 <arm_cmplx_mag_f32+0xe6>
 8014696:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801469a:	9001      	str	r0, [sp, #4]
 801469c:	f005 fa38 	bl	8019b10 <sqrtf>
 80146a0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80146a4:	9801      	ldr	r0, [sp, #4]
 80146a6:	e74d      	b.n	8014544 <arm_cmplx_mag_f32+0xb4>
 80146a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80146ac:	9201      	str	r2, [sp, #4]
 80146ae:	f005 fa2f 	bl	8019b10 <sqrtf>
 80146b2:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80146b6:	9903      	ldr	r1, [sp, #12]
 80146b8:	e7a2      	b.n	8014600 <arm_cmplx_mag_f32+0x170>
 80146ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80146be:	9201      	str	r2, [sp, #4]
 80146c0:	f005 fa26 	bl	8019b10 <sqrtf>
 80146c4:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80146c8:	9903      	ldr	r1, [sp, #12]
 80146ca:	e77c      	b.n	80145c6 <arm_cmplx_mag_f32+0x136>
 80146cc:	9101      	str	r1, [sp, #4]
 80146ce:	f005 fa1f 	bl	8019b10 <sqrtf>
 80146d2:	9901      	ldr	r1, [sp, #4]
 80146d4:	e7af      	b.n	8014636 <arm_cmplx_mag_f32+0x1a6>
 80146d6:	bf00      	nop

080146d8 <arm_radix8_butterfly_f32>:
 80146d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146dc:	ed2d 8b10 	vpush	{d8-d15}
 80146e0:	b095      	sub	sp, #84	@ 0x54
 80146e2:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 80146e6:	4603      	mov	r3, r0
 80146e8:	3304      	adds	r3, #4
 80146ea:	ed9f bab9 	vldr	s22, [pc, #740]	@ 80149d0 <arm_radix8_butterfly_f32+0x2f8>
 80146ee:	9012      	str	r0, [sp, #72]	@ 0x48
 80146f0:	468b      	mov	fp, r1
 80146f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80146f4:	4689      	mov	r9, r1
 80146f6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 80146fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80146fc:	960f      	str	r6, [sp, #60]	@ 0x3c
 80146fe:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8014702:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8014706:	eb03 0508 	add.w	r5, r3, r8
 801470a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 801470e:	eb05 040e 	add.w	r4, r5, lr
 8014712:	0137      	lsls	r7, r6, #4
 8014714:	eba6 030a 	sub.w	r3, r6, sl
 8014718:	eb04 000e 	add.w	r0, r4, lr
 801471c:	44b2      	add	sl, r6
 801471e:	1d3a      	adds	r2, r7, #4
 8014720:	9702      	str	r7, [sp, #8]
 8014722:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8014726:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 801472a:	ebae 0c06 	sub.w	ip, lr, r6
 801472e:	9703      	str	r7, [sp, #12]
 8014730:	eb03 0708 	add.w	r7, r3, r8
 8014734:	9701      	str	r7, [sp, #4]
 8014736:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 801473a:	9706      	str	r7, [sp, #24]
 801473c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801473e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014742:	f10e 0104 	add.w	r1, lr, #4
 8014746:	4439      	add	r1, r7
 8014748:	443a      	add	r2, r7
 801474a:	0137      	lsls	r7, r6, #4
 801474c:	00f6      	lsls	r6, r6, #3
 801474e:	9704      	str	r7, [sp, #16]
 8014750:	9605      	str	r6, [sp, #20]
 8014752:	9f01      	ldr	r7, [sp, #4]
 8014754:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8014756:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 801475a:	f04f 0c00 	mov.w	ip, #0
 801475e:	edd4 6a00 	vldr	s13, [r4]
 8014762:	edd7 1a00 	vldr	s3, [r7]
 8014766:	ed16 aa01 	vldr	s20, [r6, #-4]
 801476a:	edd5 5a00 	vldr	s11, [r5]
 801476e:	ed52 9a01 	vldr	s19, [r2, #-4]
 8014772:	ed90 6a00 	vldr	s12, [r0]
 8014776:	ed51 7a01 	vldr	s15, [r1, #-4]
 801477a:	ed93 3a00 	vldr	s6, [r3]
 801477e:	ee39 0a86 	vadd.f32	s0, s19, s12
 8014782:	ee33 2a21 	vadd.f32	s4, s6, s3
 8014786:	ee37 5aa6 	vadd.f32	s10, s15, s13
 801478a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 801478e:	ee35 7a02 	vadd.f32	s14, s10, s4
 8014792:	ee34 4a80 	vadd.f32	s8, s9, s0
 8014796:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801479a:	ee74 6a07 	vadd.f32	s13, s8, s14
 801479e:	ee34 4a47 	vsub.f32	s8, s8, s14
 80147a2:	ed46 6a01 	vstr	s13, [r6, #-4]
 80147a6:	ed85 4a00 	vstr	s8, [r5]
 80147aa:	edd1 6a00 	vldr	s13, [r1]
 80147ae:	ed94 9a01 	vldr	s18, [r4, #4]
 80147b2:	edd3 2a01 	vldr	s5, [r3, #4]
 80147b6:	edd7 8a01 	vldr	s17, [r7, #4]
 80147ba:	edd6 0a00 	vldr	s1, [r6]
 80147be:	edd5 3a01 	vldr	s7, [r5, #4]
 80147c2:	ed90 8a01 	vldr	s16, [r0, #4]
 80147c6:	ed92 7a00 	vldr	s14, [r2]
 80147ca:	ee33 3a61 	vsub.f32	s6, s6, s3
 80147ce:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80147d2:	ee72 aae8 	vsub.f32	s21, s5, s17
 80147d6:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80147da:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80147de:	ee77 7a83 	vadd.f32	s15, s15, s6
 80147e2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80147e6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80147ea:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80147ee:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80147f2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80147f6:	ee77 0a08 	vadd.f32	s1, s14, s16
 80147fa:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80147fe:	ee37 7a48 	vsub.f32	s14, s14, s16
 8014802:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8014806:	ee7a 5a65 	vsub.f32	s11, s20, s11
 801480a:	ee76 6a89 	vadd.f32	s13, s13, s18
 801480e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8014812:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8014816:	ee74 4ac0 	vsub.f32	s9, s9, s0
 801481a:	ee35 5a42 	vsub.f32	s10, s10, s4
 801481e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8014822:	ee33 2a20 	vadd.f32	s4, s6, s1
 8014826:	ee76 6ae2 	vsub.f32	s13, s13, s5
 801482a:	ee33 3a60 	vsub.f32	s6, s6, s1
 801482e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8014832:	ee77 0a01 	vadd.f32	s1, s14, s2
 8014836:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801483a:	ee37 7a41 	vsub.f32	s14, s14, s2
 801483e:	ee73 1a84 	vadd.f32	s3, s7, s8
 8014842:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8014846:	ee76 3a27 	vadd.f32	s7, s12, s15
 801484a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801484e:	ee32 8a00 	vadd.f32	s16, s4, s0
 8014852:	ee33 1a45 	vsub.f32	s2, s6, s10
 8014856:	ee32 2a40 	vsub.f32	s4, s4, s0
 801485a:	ee35 5a03 	vadd.f32	s10, s10, s6
 801485e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8014862:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8014866:	ee74 6ae6 	vsub.f32	s13, s9, s13
 801486a:	ee34 6a67 	vsub.f32	s12, s8, s15
 801486e:	ee75 4a87 	vadd.f32	s9, s11, s14
 8014872:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8014876:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801487a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801487e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8014882:	44dc      	add	ip, fp
 8014884:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8014888:	45e1      	cmp	r9, ip
 801488a:	ed86 8a00 	vstr	s16, [r6]
 801488e:	ed85 2a01 	vstr	s4, [r5, #4]
 8014892:	4456      	add	r6, sl
 8014894:	ed02 0a01 	vstr	s0, [r2, #-4]
 8014898:	4455      	add	r5, sl
 801489a:	edc0 6a00 	vstr	s13, [r0]
 801489e:	ed82 1a00 	vstr	s2, [r2]
 80148a2:	ed80 5a01 	vstr	s10, [r0, #4]
 80148a6:	4452      	add	r2, sl
 80148a8:	ed01 3a01 	vstr	s6, [r1, #-4]
 80148ac:	4450      	add	r0, sl
 80148ae:	edc7 2a00 	vstr	s5, [r7]
 80148b2:	edc4 4a00 	vstr	s9, [r4]
 80148b6:	ed83 7a00 	vstr	s14, [r3]
 80148ba:	edc1 5a00 	vstr	s11, [r1]
 80148be:	edc7 3a01 	vstr	s7, [r7, #4]
 80148c2:	4451      	add	r1, sl
 80148c4:	ed84 6a01 	vstr	s12, [r4, #4]
 80148c8:	4457      	add	r7, sl
 80148ca:	edc3 7a01 	vstr	s15, [r3, #4]
 80148ce:	4454      	add	r4, sl
 80148d0:	4453      	add	r3, sl
 80148d2:	f63f af44 	bhi.w	801475e <arm_radix8_butterfly_f32+0x86>
 80148d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80148d8:	2b07      	cmp	r3, #7
 80148da:	f240 81b7 	bls.w	8014c4c <arm_radix8_butterfly_f32+0x574>
 80148de:	9b06      	ldr	r3, [sp, #24]
 80148e0:	9903      	ldr	r1, [sp, #12]
 80148e2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80148e4:	9e05      	ldr	r6, [sp, #20]
 80148e6:	9a04      	ldr	r2, [sp, #16]
 80148e8:	f103 0c08 	add.w	ip, r3, #8
 80148ec:	9b02      	ldr	r3, [sp, #8]
 80148ee:	3108      	adds	r1, #8
 80148f0:	f108 0808 	add.w	r8, r8, #8
 80148f4:	1841      	adds	r1, r0, r1
 80148f6:	3608      	adds	r6, #8
 80148f8:	330c      	adds	r3, #12
 80148fa:	4604      	mov	r4, r0
 80148fc:	4444      	add	r4, r8
 80148fe:	18c3      	adds	r3, r0, r3
 8014900:	9109      	str	r1, [sp, #36]	@ 0x24
 8014902:	1981      	adds	r1, r0, r6
 8014904:	f10e 0e08 	add.w	lr, lr, #8
 8014908:	3208      	adds	r2, #8
 801490a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801490c:	9107      	str	r1, [sp, #28]
 801490e:	4604      	mov	r4, r0
 8014910:	4601      	mov	r1, r0
 8014912:	9304      	str	r3, [sp, #16]
 8014914:	f100 030c 	add.w	r3, r0, #12
 8014918:	4474      	add	r4, lr
 801491a:	f04f 0801 	mov.w	r8, #1
 801491e:	1882      	adds	r2, r0, r2
 8014920:	4461      	add	r1, ip
 8014922:	9305      	str	r3, [sp, #20]
 8014924:	464b      	mov	r3, r9
 8014926:	940a      	str	r4, [sp, #40]	@ 0x28
 8014928:	46c1      	mov	r9, r8
 801492a:	9208      	str	r2, [sp, #32]
 801492c:	46d8      	mov	r8, fp
 801492e:	9106      	str	r1, [sp, #24]
 8014930:	f04f 0e00 	mov.w	lr, #0
 8014934:	469b      	mov	fp, r3
 8014936:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014938:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801493a:	449e      	add	lr, r3
 801493c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8014940:	441a      	add	r2, r3
 8014942:	920e      	str	r2, [sp, #56]	@ 0x38
 8014944:	441a      	add	r2, r3
 8014946:	18d4      	adds	r4, r2, r3
 8014948:	18e5      	adds	r5, r4, r3
 801494a:	18ee      	adds	r6, r5, r3
 801494c:	18f7      	adds	r7, r6, r3
 801494e:	eb07 0c03 	add.w	ip, r7, r3
 8014952:	920d      	str	r2, [sp, #52]	@ 0x34
 8014954:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8014958:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 801495c:	910c      	str	r1, [sp, #48]	@ 0x30
 801495e:	4419      	add	r1, r3
 8014960:	9103      	str	r1, [sp, #12]
 8014962:	4419      	add	r1, r3
 8014964:	18ca      	adds	r2, r1, r3
 8014966:	9202      	str	r2, [sp, #8]
 8014968:	441a      	add	r2, r3
 801496a:	18d0      	adds	r0, r2, r3
 801496c:	ed92 ea01 	vldr	s28, [r2, #4]
 8014970:	9a02      	ldr	r2, [sp, #8]
 8014972:	edd4 7a00 	vldr	s15, [r4]
 8014976:	edd2 da01 	vldr	s27, [r2, #4]
 801497a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801497c:	ed91 da01 	vldr	s26, [r1, #4]
 8014980:	ed92 ca01 	vldr	s24, [r2, #4]
 8014984:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014986:	9903      	ldr	r1, [sp, #12]
 8014988:	edcd 7a03 	vstr	s15, [sp, #12]
 801498c:	edd2 7a00 	vldr	s15, [r2]
 8014990:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014992:	edcd 7a02 	vstr	s15, [sp, #8]
 8014996:	edd2 7a00 	vldr	s15, [r2]
 801499a:	edd0 ea01 	vldr	s29, [r0, #4]
 801499e:	edd1 ca01 	vldr	s25, [r1, #4]
 80149a2:	eddc ba00 	vldr	s23, [ip]
 80149a6:	edd7 aa00 	vldr	s21, [r7]
 80149aa:	ed96 aa00 	vldr	s20, [r6]
 80149ae:	edd5 9a00 	vldr	s19, [r5]
 80149b2:	edcd 7a01 	vstr	s15, [sp, #4]
 80149b6:	4403      	add	r3, r0
 80149b8:	ed93 fa01 	vldr	s30, [r3, #4]
 80149bc:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80149c0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80149c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80149c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80149cc:	46cc      	mov	ip, r9
 80149ce:	e001      	b.n	80149d4 <arm_radix8_butterfly_f32+0x2fc>
 80149d0:	3f3504f3 	.word	0x3f3504f3
 80149d4:	ed91 6a00 	vldr	s12, [r1]
 80149d8:	ed93 5a00 	vldr	s10, [r3]
 80149dc:	edd0 fa00 	vldr	s31, [r0]
 80149e0:	edd4 7a00 	vldr	s15, [r4]
 80149e4:	ed95 7a00 	vldr	s14, [r5]
 80149e8:	ed56 3a01 	vldr	s7, [r6, #-4]
 80149ec:	ed17 3a01 	vldr	s6, [r7, #-4]
 80149f0:	ed92 2a00 	vldr	s4, [r2]
 80149f4:	ed96 0a00 	vldr	s0, [r6]
 80149f8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80149fc:	ee32 1a06 	vadd.f32	s2, s4, s12
 8014a00:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8014a04:	ee77 4a87 	vadd.f32	s9, s15, s14
 8014a08:	ee78 1a04 	vadd.f32	s3, s16, s8
 8014a0c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8014a10:	ee32 2a46 	vsub.f32	s4, s4, s12
 8014a14:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8014a18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a1c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8014a20:	edd4 8a01 	vldr	s17, [r4, #4]
 8014a24:	ed92 9a01 	vldr	s18, [r2, #4]
 8014a28:	edd7 0a00 	vldr	s1, [r7]
 8014a2c:	edd1 2a01 	vldr	s5, [r1, #4]
 8014a30:	ed95 7a01 	vldr	s14, [r5, #4]
 8014a34:	ed93 6a01 	vldr	s12, [r3, #4]
 8014a38:	edd0 5a01 	vldr	s11, [r0, #4]
 8014a3c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8014a40:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8014a44:	ee39 5a62 	vsub.f32	s10, s18, s5
 8014a48:	ee78 fac7 	vsub.f32	s31, s17, s14
 8014a4c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8014a50:	ee38 7a87 	vadd.f32	s14, s17, s14
 8014a54:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8014a58:	ee79 2a22 	vadd.f32	s5, s18, s5
 8014a5c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8014a60:	ee72 7a67 	vsub.f32	s15, s4, s15
 8014a64:	ee30 2a06 	vadd.f32	s4, s0, s12
 8014a68:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8014a6c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8014a70:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8014a74:	ee32 1a08 	vadd.f32	s2, s4, s16
 8014a78:	ee72 fa87 	vadd.f32	s31, s5, s14
 8014a7c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8014a80:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8014a84:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8014a88:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8014a8c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8014a90:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8014a94:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8014a98:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8014a9c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8014aa0:	ee30 6a46 	vsub.f32	s12, s0, s12
 8014aa4:	ee74 0a22 	vadd.f32	s1, s8, s5
 8014aa8:	ee36 0a28 	vadd.f32	s0, s12, s17
 8014aac:	ee74 2a62 	vsub.f32	s5, s8, s5
 8014ab0:	ee36 6a68 	vsub.f32	s12, s12, s17
 8014ab4:	ee32 4a64 	vsub.f32	s8, s4, s9
 8014ab8:	ee73 8a09 	vadd.f32	s17, s6, s18
 8014abc:	ee74 4a82 	vadd.f32	s9, s9, s4
 8014ac0:	ee33 9a49 	vsub.f32	s18, s6, s18
 8014ac4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8014ac8:	ee35 3a85 	vadd.f32	s6, s11, s10
 8014acc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014ad0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8014ad4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8014ad8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8014adc:	ee30 7a68 	vsub.f32	s14, s0, s17
 8014ae0:	ee35 8a03 	vadd.f32	s16, s10, s6
 8014ae4:	ee38 0a80 	vadd.f32	s0, s17, s0
 8014ae8:	ee73 3a82 	vadd.f32	s7, s7, s4
 8014aec:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8014af0:	ed9d 2a01 	vldr	s4, [sp, #4]
 8014af4:	eddd 1a02 	vldr	s3, [sp, #8]
 8014af8:	ee35 5a43 	vsub.f32	s10, s10, s6
 8014afc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8014b00:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8014b04:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8014b08:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014b0c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8014b10:	ee76 5a49 	vsub.f32	s11, s12, s18
 8014b14:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8014b18:	ee39 6a06 	vadd.f32	s12, s18, s12
 8014b1c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8014b20:	ee21 4a84 	vmul.f32	s8, s3, s8
 8014b24:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8014b28:	ee22 7a07 	vmul.f32	s14, s4, s14
 8014b2c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8014b30:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8014b34:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8014b38:	ee31 1a09 	vadd.f32	s2, s2, s18
 8014b3c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8014b40:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8014b44:	ee74 0a60 	vsub.f32	s1, s8, s1
 8014b48:	ee37 7a48 	vsub.f32	s14, s14, s16
 8014b4c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8014b50:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8014b54:	ee72 1a21 	vadd.f32	s3, s4, s3
 8014b58:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8014b5c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8014b60:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8014b64:	ee38 8a04 	vadd.f32	s16, s16, s8
 8014b68:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8014b6c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8014b70:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8014b74:	eddd 5a03 	vldr	s11, [sp, #12]
 8014b78:	edc6 fa00 	vstr	s31, [r6]
 8014b7c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8014b80:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8014b84:	ee30 0a45 	vsub.f32	s0, s0, s10
 8014b88:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8014b8c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8014b90:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8014b94:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8014b98:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8014b9c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014ba0:	ee74 4a89 	vadd.f32	s9, s9, s18
 8014ba4:	ee34 3a43 	vsub.f32	s6, s8, s6
 8014ba8:	ee78 8a85 	vadd.f32	s17, s17, s10
 8014bac:	ee36 6a67 	vsub.f32	s12, s12, s15
 8014bb0:	44c4      	add	ip, r8
 8014bb2:	45e3      	cmp	fp, ip
 8014bb4:	edc3 3a00 	vstr	s7, [r3]
 8014bb8:	edc3 6a01 	vstr	s13, [r3, #4]
 8014bbc:	4456      	add	r6, sl
 8014bbe:	ed07 1a01 	vstr	s2, [r7, #-4]
 8014bc2:	edc7 0a00 	vstr	s1, [r7]
 8014bc6:	4453      	add	r3, sl
 8014bc8:	ed80 2a00 	vstr	s4, [r0]
 8014bcc:	edc0 2a01 	vstr	s5, [r0, #4]
 8014bd0:	4457      	add	r7, sl
 8014bd2:	edc2 1a00 	vstr	s3, [r2]
 8014bd6:	ed82 7a01 	vstr	s14, [r2, #4]
 8014bda:	4450      	add	r0, sl
 8014bdc:	ed85 8a00 	vstr	s16, [r5]
 8014be0:	ed85 0a01 	vstr	s0, [r5, #4]
 8014be4:	4452      	add	r2, sl
 8014be6:	edc1 4a00 	vstr	s9, [r1]
 8014bea:	4455      	add	r5, sl
 8014bec:	ed81 3a01 	vstr	s6, [r1, #4]
 8014bf0:	edc4 8a00 	vstr	s17, [r4]
 8014bf4:	ed84 6a01 	vstr	s12, [r4, #4]
 8014bf8:	4451      	add	r1, sl
 8014bfa:	4454      	add	r4, sl
 8014bfc:	f63f aeea 	bhi.w	80149d4 <arm_radix8_butterfly_f32+0x2fc>
 8014c00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c02:	3308      	adds	r3, #8
 8014c04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014c06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c08:	3308      	adds	r3, #8
 8014c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8014c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c0e:	3308      	adds	r3, #8
 8014c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c12:	9b08      	ldr	r3, [sp, #32]
 8014c14:	3308      	adds	r3, #8
 8014c16:	9308      	str	r3, [sp, #32]
 8014c18:	9b07      	ldr	r3, [sp, #28]
 8014c1a:	3308      	adds	r3, #8
 8014c1c:	9307      	str	r3, [sp, #28]
 8014c1e:	9b06      	ldr	r3, [sp, #24]
 8014c20:	3308      	adds	r3, #8
 8014c22:	9306      	str	r3, [sp, #24]
 8014c24:	9b05      	ldr	r3, [sp, #20]
 8014c26:	3308      	adds	r3, #8
 8014c28:	9305      	str	r3, [sp, #20]
 8014c2a:	9b04      	ldr	r3, [sp, #16]
 8014c2c:	3308      	adds	r3, #8
 8014c2e:	9304      	str	r3, [sp, #16]
 8014c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c32:	f109 0901 	add.w	r9, r9, #1
 8014c36:	454b      	cmp	r3, r9
 8014c38:	f47f ae7d 	bne.w	8014936 <arm_radix8_butterfly_f32+0x25e>
 8014c3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014c3e:	00db      	lsls	r3, r3, #3
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	46d9      	mov	r9, fp
 8014c44:	9310      	str	r3, [sp, #64]	@ 0x40
 8014c46:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8014c4a:	e554      	b.n	80146f6 <arm_radix8_butterfly_f32+0x1e>
 8014c4c:	b015      	add	sp, #84	@ 0x54
 8014c4e:	ecbd 8b10 	vpop	{d8-d15}
 8014c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c56:	bf00      	nop

08014c58 <__cvt>:
 8014c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c5c:	ec57 6b10 	vmov	r6, r7, d0
 8014c60:	2f00      	cmp	r7, #0
 8014c62:	460c      	mov	r4, r1
 8014c64:	4619      	mov	r1, r3
 8014c66:	463b      	mov	r3, r7
 8014c68:	bfbb      	ittet	lt
 8014c6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8014c6e:	461f      	movlt	r7, r3
 8014c70:	2300      	movge	r3, #0
 8014c72:	232d      	movlt	r3, #45	@ 0x2d
 8014c74:	700b      	strb	r3, [r1, #0]
 8014c76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8014c7c:	4691      	mov	r9, r2
 8014c7e:	f023 0820 	bic.w	r8, r3, #32
 8014c82:	bfbc      	itt	lt
 8014c84:	4632      	movlt	r2, r6
 8014c86:	4616      	movlt	r6, r2
 8014c88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014c8c:	d005      	beq.n	8014c9a <__cvt+0x42>
 8014c8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014c92:	d100      	bne.n	8014c96 <__cvt+0x3e>
 8014c94:	3401      	adds	r4, #1
 8014c96:	2102      	movs	r1, #2
 8014c98:	e000      	b.n	8014c9c <__cvt+0x44>
 8014c9a:	2103      	movs	r1, #3
 8014c9c:	ab03      	add	r3, sp, #12
 8014c9e:	9301      	str	r3, [sp, #4]
 8014ca0:	ab02      	add	r3, sp, #8
 8014ca2:	9300      	str	r3, [sp, #0]
 8014ca4:	ec47 6b10 	vmov	d0, r6, r7
 8014ca8:	4653      	mov	r3, sl
 8014caa:	4622      	mov	r2, r4
 8014cac:	f001 fa04 	bl	80160b8 <_dtoa_r>
 8014cb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014cb4:	4605      	mov	r5, r0
 8014cb6:	d119      	bne.n	8014cec <__cvt+0x94>
 8014cb8:	f019 0f01 	tst.w	r9, #1
 8014cbc:	d00e      	beq.n	8014cdc <__cvt+0x84>
 8014cbe:	eb00 0904 	add.w	r9, r0, r4
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	4639      	mov	r1, r7
 8014cca:	f7eb ff05 	bl	8000ad8 <__aeabi_dcmpeq>
 8014cce:	b108      	cbz	r0, 8014cd4 <__cvt+0x7c>
 8014cd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8014cd4:	2230      	movs	r2, #48	@ 0x30
 8014cd6:	9b03      	ldr	r3, [sp, #12]
 8014cd8:	454b      	cmp	r3, r9
 8014cda:	d31e      	bcc.n	8014d1a <__cvt+0xc2>
 8014cdc:	9b03      	ldr	r3, [sp, #12]
 8014cde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014ce0:	1b5b      	subs	r3, r3, r5
 8014ce2:	4628      	mov	r0, r5
 8014ce4:	6013      	str	r3, [r2, #0]
 8014ce6:	b004      	add	sp, #16
 8014ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014cf0:	eb00 0904 	add.w	r9, r0, r4
 8014cf4:	d1e5      	bne.n	8014cc2 <__cvt+0x6a>
 8014cf6:	7803      	ldrb	r3, [r0, #0]
 8014cf8:	2b30      	cmp	r3, #48	@ 0x30
 8014cfa:	d10a      	bne.n	8014d12 <__cvt+0xba>
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	2300      	movs	r3, #0
 8014d00:	4630      	mov	r0, r6
 8014d02:	4639      	mov	r1, r7
 8014d04:	f7eb fee8 	bl	8000ad8 <__aeabi_dcmpeq>
 8014d08:	b918      	cbnz	r0, 8014d12 <__cvt+0xba>
 8014d0a:	f1c4 0401 	rsb	r4, r4, #1
 8014d0e:	f8ca 4000 	str.w	r4, [sl]
 8014d12:	f8da 3000 	ldr.w	r3, [sl]
 8014d16:	4499      	add	r9, r3
 8014d18:	e7d3      	b.n	8014cc2 <__cvt+0x6a>
 8014d1a:	1c59      	adds	r1, r3, #1
 8014d1c:	9103      	str	r1, [sp, #12]
 8014d1e:	701a      	strb	r2, [r3, #0]
 8014d20:	e7d9      	b.n	8014cd6 <__cvt+0x7e>

08014d22 <__exponent>:
 8014d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d24:	2900      	cmp	r1, #0
 8014d26:	bfba      	itte	lt
 8014d28:	4249      	neglt	r1, r1
 8014d2a:	232d      	movlt	r3, #45	@ 0x2d
 8014d2c:	232b      	movge	r3, #43	@ 0x2b
 8014d2e:	2909      	cmp	r1, #9
 8014d30:	7002      	strb	r2, [r0, #0]
 8014d32:	7043      	strb	r3, [r0, #1]
 8014d34:	dd29      	ble.n	8014d8a <__exponent+0x68>
 8014d36:	f10d 0307 	add.w	r3, sp, #7
 8014d3a:	461d      	mov	r5, r3
 8014d3c:	270a      	movs	r7, #10
 8014d3e:	461a      	mov	r2, r3
 8014d40:	fbb1 f6f7 	udiv	r6, r1, r7
 8014d44:	fb07 1416 	mls	r4, r7, r6, r1
 8014d48:	3430      	adds	r4, #48	@ 0x30
 8014d4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014d4e:	460c      	mov	r4, r1
 8014d50:	2c63      	cmp	r4, #99	@ 0x63
 8014d52:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8014d56:	4631      	mov	r1, r6
 8014d58:	dcf1      	bgt.n	8014d3e <__exponent+0x1c>
 8014d5a:	3130      	adds	r1, #48	@ 0x30
 8014d5c:	1e94      	subs	r4, r2, #2
 8014d5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014d62:	1c41      	adds	r1, r0, #1
 8014d64:	4623      	mov	r3, r4
 8014d66:	42ab      	cmp	r3, r5
 8014d68:	d30a      	bcc.n	8014d80 <__exponent+0x5e>
 8014d6a:	f10d 0309 	add.w	r3, sp, #9
 8014d6e:	1a9b      	subs	r3, r3, r2
 8014d70:	42ac      	cmp	r4, r5
 8014d72:	bf88      	it	hi
 8014d74:	2300      	movhi	r3, #0
 8014d76:	3302      	adds	r3, #2
 8014d78:	4403      	add	r3, r0
 8014d7a:	1a18      	subs	r0, r3, r0
 8014d7c:	b003      	add	sp, #12
 8014d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014d84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014d88:	e7ed      	b.n	8014d66 <__exponent+0x44>
 8014d8a:	2330      	movs	r3, #48	@ 0x30
 8014d8c:	3130      	adds	r1, #48	@ 0x30
 8014d8e:	7083      	strb	r3, [r0, #2]
 8014d90:	70c1      	strb	r1, [r0, #3]
 8014d92:	1d03      	adds	r3, r0, #4
 8014d94:	e7f1      	b.n	8014d7a <__exponent+0x58>
	...

08014d98 <_printf_float>:
 8014d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d9c:	b08d      	sub	sp, #52	@ 0x34
 8014d9e:	460c      	mov	r4, r1
 8014da0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014da4:	4616      	mov	r6, r2
 8014da6:	461f      	mov	r7, r3
 8014da8:	4605      	mov	r5, r0
 8014daa:	f001 f819 	bl	8015de0 <_localeconv_r>
 8014dae:	6803      	ldr	r3, [r0, #0]
 8014db0:	9304      	str	r3, [sp, #16]
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7eb fa64 	bl	8000280 <strlen>
 8014db8:	2300      	movs	r3, #0
 8014dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8014dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8014dc0:	9005      	str	r0, [sp, #20]
 8014dc2:	3307      	adds	r3, #7
 8014dc4:	f023 0307 	bic.w	r3, r3, #7
 8014dc8:	f103 0208 	add.w	r2, r3, #8
 8014dcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014dd0:	f8d4 b000 	ldr.w	fp, [r4]
 8014dd4:	f8c8 2000 	str.w	r2, [r8]
 8014dd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014ddc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014de0:	9307      	str	r3, [sp, #28]
 8014de2:	f8cd 8018 	str.w	r8, [sp, #24]
 8014de6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014dea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014dee:	4b9c      	ldr	r3, [pc, #624]	@ (8015060 <_printf_float+0x2c8>)
 8014df0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014df4:	f7eb fea2 	bl	8000b3c <__aeabi_dcmpun>
 8014df8:	bb70      	cbnz	r0, 8014e58 <_printf_float+0xc0>
 8014dfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014dfe:	4b98      	ldr	r3, [pc, #608]	@ (8015060 <_printf_float+0x2c8>)
 8014e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014e04:	f7eb fe7c 	bl	8000b00 <__aeabi_dcmple>
 8014e08:	bb30      	cbnz	r0, 8014e58 <_printf_float+0xc0>
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	4640      	mov	r0, r8
 8014e10:	4649      	mov	r1, r9
 8014e12:	f7eb fe6b 	bl	8000aec <__aeabi_dcmplt>
 8014e16:	b110      	cbz	r0, 8014e1e <_printf_float+0x86>
 8014e18:	232d      	movs	r3, #45	@ 0x2d
 8014e1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014e1e:	4a91      	ldr	r2, [pc, #580]	@ (8015064 <_printf_float+0x2cc>)
 8014e20:	4b91      	ldr	r3, [pc, #580]	@ (8015068 <_printf_float+0x2d0>)
 8014e22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014e26:	bf94      	ite	ls
 8014e28:	4690      	movls	r8, r2
 8014e2a:	4698      	movhi	r8, r3
 8014e2c:	2303      	movs	r3, #3
 8014e2e:	6123      	str	r3, [r4, #16]
 8014e30:	f02b 0304 	bic.w	r3, fp, #4
 8014e34:	6023      	str	r3, [r4, #0]
 8014e36:	f04f 0900 	mov.w	r9, #0
 8014e3a:	9700      	str	r7, [sp, #0]
 8014e3c:	4633      	mov	r3, r6
 8014e3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014e40:	4621      	mov	r1, r4
 8014e42:	4628      	mov	r0, r5
 8014e44:	f000 f9d2 	bl	80151ec <_printf_common>
 8014e48:	3001      	adds	r0, #1
 8014e4a:	f040 808d 	bne.w	8014f68 <_printf_float+0x1d0>
 8014e4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e52:	b00d      	add	sp, #52	@ 0x34
 8014e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e58:	4642      	mov	r2, r8
 8014e5a:	464b      	mov	r3, r9
 8014e5c:	4640      	mov	r0, r8
 8014e5e:	4649      	mov	r1, r9
 8014e60:	f7eb fe6c 	bl	8000b3c <__aeabi_dcmpun>
 8014e64:	b140      	cbz	r0, 8014e78 <_printf_float+0xe0>
 8014e66:	464b      	mov	r3, r9
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	bfbc      	itt	lt
 8014e6c:	232d      	movlt	r3, #45	@ 0x2d
 8014e6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014e72:	4a7e      	ldr	r2, [pc, #504]	@ (801506c <_printf_float+0x2d4>)
 8014e74:	4b7e      	ldr	r3, [pc, #504]	@ (8015070 <_printf_float+0x2d8>)
 8014e76:	e7d4      	b.n	8014e22 <_printf_float+0x8a>
 8014e78:	6863      	ldr	r3, [r4, #4]
 8014e7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014e7e:	9206      	str	r2, [sp, #24]
 8014e80:	1c5a      	adds	r2, r3, #1
 8014e82:	d13b      	bne.n	8014efc <_printf_float+0x164>
 8014e84:	2306      	movs	r3, #6
 8014e86:	6063      	str	r3, [r4, #4]
 8014e88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	6022      	str	r2, [r4, #0]
 8014e90:	9303      	str	r3, [sp, #12]
 8014e92:	ab0a      	add	r3, sp, #40	@ 0x28
 8014e94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014e98:	ab09      	add	r3, sp, #36	@ 0x24
 8014e9a:	9300      	str	r3, [sp, #0]
 8014e9c:	6861      	ldr	r1, [r4, #4]
 8014e9e:	ec49 8b10 	vmov	d0, r8, r9
 8014ea2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f7ff fed6 	bl	8014c58 <__cvt>
 8014eac:	9b06      	ldr	r3, [sp, #24]
 8014eae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014eb0:	2b47      	cmp	r3, #71	@ 0x47
 8014eb2:	4680      	mov	r8, r0
 8014eb4:	d129      	bne.n	8014f0a <_printf_float+0x172>
 8014eb6:	1cc8      	adds	r0, r1, #3
 8014eb8:	db02      	blt.n	8014ec0 <_printf_float+0x128>
 8014eba:	6863      	ldr	r3, [r4, #4]
 8014ebc:	4299      	cmp	r1, r3
 8014ebe:	dd41      	ble.n	8014f44 <_printf_float+0x1ac>
 8014ec0:	f1aa 0a02 	sub.w	sl, sl, #2
 8014ec4:	fa5f fa8a 	uxtb.w	sl, sl
 8014ec8:	3901      	subs	r1, #1
 8014eca:	4652      	mov	r2, sl
 8014ecc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014ed0:	9109      	str	r1, [sp, #36]	@ 0x24
 8014ed2:	f7ff ff26 	bl	8014d22 <__exponent>
 8014ed6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014ed8:	1813      	adds	r3, r2, r0
 8014eda:	2a01      	cmp	r2, #1
 8014edc:	4681      	mov	r9, r0
 8014ede:	6123      	str	r3, [r4, #16]
 8014ee0:	dc02      	bgt.n	8014ee8 <_printf_float+0x150>
 8014ee2:	6822      	ldr	r2, [r4, #0]
 8014ee4:	07d2      	lsls	r2, r2, #31
 8014ee6:	d501      	bpl.n	8014eec <_printf_float+0x154>
 8014ee8:	3301      	adds	r3, #1
 8014eea:	6123      	str	r3, [r4, #16]
 8014eec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d0a2      	beq.n	8014e3a <_printf_float+0xa2>
 8014ef4:	232d      	movs	r3, #45	@ 0x2d
 8014ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014efa:	e79e      	b.n	8014e3a <_printf_float+0xa2>
 8014efc:	9a06      	ldr	r2, [sp, #24]
 8014efe:	2a47      	cmp	r2, #71	@ 0x47
 8014f00:	d1c2      	bne.n	8014e88 <_printf_float+0xf0>
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d1c0      	bne.n	8014e88 <_printf_float+0xf0>
 8014f06:	2301      	movs	r3, #1
 8014f08:	e7bd      	b.n	8014e86 <_printf_float+0xee>
 8014f0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014f0e:	d9db      	bls.n	8014ec8 <_printf_float+0x130>
 8014f10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014f14:	d118      	bne.n	8014f48 <_printf_float+0x1b0>
 8014f16:	2900      	cmp	r1, #0
 8014f18:	6863      	ldr	r3, [r4, #4]
 8014f1a:	dd0b      	ble.n	8014f34 <_printf_float+0x19c>
 8014f1c:	6121      	str	r1, [r4, #16]
 8014f1e:	b913      	cbnz	r3, 8014f26 <_printf_float+0x18e>
 8014f20:	6822      	ldr	r2, [r4, #0]
 8014f22:	07d0      	lsls	r0, r2, #31
 8014f24:	d502      	bpl.n	8014f2c <_printf_float+0x194>
 8014f26:	3301      	adds	r3, #1
 8014f28:	440b      	add	r3, r1
 8014f2a:	6123      	str	r3, [r4, #16]
 8014f2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014f2e:	f04f 0900 	mov.w	r9, #0
 8014f32:	e7db      	b.n	8014eec <_printf_float+0x154>
 8014f34:	b913      	cbnz	r3, 8014f3c <_printf_float+0x1a4>
 8014f36:	6822      	ldr	r2, [r4, #0]
 8014f38:	07d2      	lsls	r2, r2, #31
 8014f3a:	d501      	bpl.n	8014f40 <_printf_float+0x1a8>
 8014f3c:	3302      	adds	r3, #2
 8014f3e:	e7f4      	b.n	8014f2a <_printf_float+0x192>
 8014f40:	2301      	movs	r3, #1
 8014f42:	e7f2      	b.n	8014f2a <_printf_float+0x192>
 8014f44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f4a:	4299      	cmp	r1, r3
 8014f4c:	db05      	blt.n	8014f5a <_printf_float+0x1c2>
 8014f4e:	6823      	ldr	r3, [r4, #0]
 8014f50:	6121      	str	r1, [r4, #16]
 8014f52:	07d8      	lsls	r0, r3, #31
 8014f54:	d5ea      	bpl.n	8014f2c <_printf_float+0x194>
 8014f56:	1c4b      	adds	r3, r1, #1
 8014f58:	e7e7      	b.n	8014f2a <_printf_float+0x192>
 8014f5a:	2900      	cmp	r1, #0
 8014f5c:	bfd4      	ite	le
 8014f5e:	f1c1 0202 	rsble	r2, r1, #2
 8014f62:	2201      	movgt	r2, #1
 8014f64:	4413      	add	r3, r2
 8014f66:	e7e0      	b.n	8014f2a <_printf_float+0x192>
 8014f68:	6823      	ldr	r3, [r4, #0]
 8014f6a:	055a      	lsls	r2, r3, #21
 8014f6c:	d407      	bmi.n	8014f7e <_printf_float+0x1e6>
 8014f6e:	6923      	ldr	r3, [r4, #16]
 8014f70:	4642      	mov	r2, r8
 8014f72:	4631      	mov	r1, r6
 8014f74:	4628      	mov	r0, r5
 8014f76:	47b8      	blx	r7
 8014f78:	3001      	adds	r0, #1
 8014f7a:	d12b      	bne.n	8014fd4 <_printf_float+0x23c>
 8014f7c:	e767      	b.n	8014e4e <_printf_float+0xb6>
 8014f7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014f82:	f240 80dd 	bls.w	8015140 <_printf_float+0x3a8>
 8014f86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	f7eb fda3 	bl	8000ad8 <__aeabi_dcmpeq>
 8014f92:	2800      	cmp	r0, #0
 8014f94:	d033      	beq.n	8014ffe <_printf_float+0x266>
 8014f96:	4a37      	ldr	r2, [pc, #220]	@ (8015074 <_printf_float+0x2dc>)
 8014f98:	2301      	movs	r3, #1
 8014f9a:	4631      	mov	r1, r6
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	47b8      	blx	r7
 8014fa0:	3001      	adds	r0, #1
 8014fa2:	f43f af54 	beq.w	8014e4e <_printf_float+0xb6>
 8014fa6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014faa:	4543      	cmp	r3, r8
 8014fac:	db02      	blt.n	8014fb4 <_printf_float+0x21c>
 8014fae:	6823      	ldr	r3, [r4, #0]
 8014fb0:	07d8      	lsls	r0, r3, #31
 8014fb2:	d50f      	bpl.n	8014fd4 <_printf_float+0x23c>
 8014fb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014fb8:	4631      	mov	r1, r6
 8014fba:	4628      	mov	r0, r5
 8014fbc:	47b8      	blx	r7
 8014fbe:	3001      	adds	r0, #1
 8014fc0:	f43f af45 	beq.w	8014e4e <_printf_float+0xb6>
 8014fc4:	f04f 0900 	mov.w	r9, #0
 8014fc8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8014fcc:	f104 0a1a 	add.w	sl, r4, #26
 8014fd0:	45c8      	cmp	r8, r9
 8014fd2:	dc09      	bgt.n	8014fe8 <_printf_float+0x250>
 8014fd4:	6823      	ldr	r3, [r4, #0]
 8014fd6:	079b      	lsls	r3, r3, #30
 8014fd8:	f100 8103 	bmi.w	80151e2 <_printf_float+0x44a>
 8014fdc:	68e0      	ldr	r0, [r4, #12]
 8014fde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014fe0:	4298      	cmp	r0, r3
 8014fe2:	bfb8      	it	lt
 8014fe4:	4618      	movlt	r0, r3
 8014fe6:	e734      	b.n	8014e52 <_printf_float+0xba>
 8014fe8:	2301      	movs	r3, #1
 8014fea:	4652      	mov	r2, sl
 8014fec:	4631      	mov	r1, r6
 8014fee:	4628      	mov	r0, r5
 8014ff0:	47b8      	blx	r7
 8014ff2:	3001      	adds	r0, #1
 8014ff4:	f43f af2b 	beq.w	8014e4e <_printf_float+0xb6>
 8014ff8:	f109 0901 	add.w	r9, r9, #1
 8014ffc:	e7e8      	b.n	8014fd0 <_printf_float+0x238>
 8014ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015000:	2b00      	cmp	r3, #0
 8015002:	dc39      	bgt.n	8015078 <_printf_float+0x2e0>
 8015004:	4a1b      	ldr	r2, [pc, #108]	@ (8015074 <_printf_float+0x2dc>)
 8015006:	2301      	movs	r3, #1
 8015008:	4631      	mov	r1, r6
 801500a:	4628      	mov	r0, r5
 801500c:	47b8      	blx	r7
 801500e:	3001      	adds	r0, #1
 8015010:	f43f af1d 	beq.w	8014e4e <_printf_float+0xb6>
 8015014:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015018:	ea59 0303 	orrs.w	r3, r9, r3
 801501c:	d102      	bne.n	8015024 <_printf_float+0x28c>
 801501e:	6823      	ldr	r3, [r4, #0]
 8015020:	07d9      	lsls	r1, r3, #31
 8015022:	d5d7      	bpl.n	8014fd4 <_printf_float+0x23c>
 8015024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015028:	4631      	mov	r1, r6
 801502a:	4628      	mov	r0, r5
 801502c:	47b8      	blx	r7
 801502e:	3001      	adds	r0, #1
 8015030:	f43f af0d 	beq.w	8014e4e <_printf_float+0xb6>
 8015034:	f04f 0a00 	mov.w	sl, #0
 8015038:	f104 0b1a 	add.w	fp, r4, #26
 801503c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801503e:	425b      	negs	r3, r3
 8015040:	4553      	cmp	r3, sl
 8015042:	dc01      	bgt.n	8015048 <_printf_float+0x2b0>
 8015044:	464b      	mov	r3, r9
 8015046:	e793      	b.n	8014f70 <_printf_float+0x1d8>
 8015048:	2301      	movs	r3, #1
 801504a:	465a      	mov	r2, fp
 801504c:	4631      	mov	r1, r6
 801504e:	4628      	mov	r0, r5
 8015050:	47b8      	blx	r7
 8015052:	3001      	adds	r0, #1
 8015054:	f43f aefb 	beq.w	8014e4e <_printf_float+0xb6>
 8015058:	f10a 0a01 	add.w	sl, sl, #1
 801505c:	e7ee      	b.n	801503c <_printf_float+0x2a4>
 801505e:	bf00      	nop
 8015060:	7fefffff 	.word	0x7fefffff
 8015064:	0802f05c 	.word	0x0802f05c
 8015068:	0802f060 	.word	0x0802f060
 801506c:	0802f064 	.word	0x0802f064
 8015070:	0802f068 	.word	0x0802f068
 8015074:	0802f06c 	.word	0x0802f06c
 8015078:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801507a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801507e:	4553      	cmp	r3, sl
 8015080:	bfa8      	it	ge
 8015082:	4653      	movge	r3, sl
 8015084:	2b00      	cmp	r3, #0
 8015086:	4699      	mov	r9, r3
 8015088:	dc36      	bgt.n	80150f8 <_printf_float+0x360>
 801508a:	f04f 0b00 	mov.w	fp, #0
 801508e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015092:	f104 021a 	add.w	r2, r4, #26
 8015096:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015098:	9306      	str	r3, [sp, #24]
 801509a:	eba3 0309 	sub.w	r3, r3, r9
 801509e:	455b      	cmp	r3, fp
 80150a0:	dc31      	bgt.n	8015106 <_printf_float+0x36e>
 80150a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150a4:	459a      	cmp	sl, r3
 80150a6:	dc3a      	bgt.n	801511e <_printf_float+0x386>
 80150a8:	6823      	ldr	r3, [r4, #0]
 80150aa:	07da      	lsls	r2, r3, #31
 80150ac:	d437      	bmi.n	801511e <_printf_float+0x386>
 80150ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150b0:	ebaa 0903 	sub.w	r9, sl, r3
 80150b4:	9b06      	ldr	r3, [sp, #24]
 80150b6:	ebaa 0303 	sub.w	r3, sl, r3
 80150ba:	4599      	cmp	r9, r3
 80150bc:	bfa8      	it	ge
 80150be:	4699      	movge	r9, r3
 80150c0:	f1b9 0f00 	cmp.w	r9, #0
 80150c4:	dc33      	bgt.n	801512e <_printf_float+0x396>
 80150c6:	f04f 0800 	mov.w	r8, #0
 80150ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150ce:	f104 0b1a 	add.w	fp, r4, #26
 80150d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150d4:	ebaa 0303 	sub.w	r3, sl, r3
 80150d8:	eba3 0309 	sub.w	r3, r3, r9
 80150dc:	4543      	cmp	r3, r8
 80150de:	f77f af79 	ble.w	8014fd4 <_printf_float+0x23c>
 80150e2:	2301      	movs	r3, #1
 80150e4:	465a      	mov	r2, fp
 80150e6:	4631      	mov	r1, r6
 80150e8:	4628      	mov	r0, r5
 80150ea:	47b8      	blx	r7
 80150ec:	3001      	adds	r0, #1
 80150ee:	f43f aeae 	beq.w	8014e4e <_printf_float+0xb6>
 80150f2:	f108 0801 	add.w	r8, r8, #1
 80150f6:	e7ec      	b.n	80150d2 <_printf_float+0x33a>
 80150f8:	4642      	mov	r2, r8
 80150fa:	4631      	mov	r1, r6
 80150fc:	4628      	mov	r0, r5
 80150fe:	47b8      	blx	r7
 8015100:	3001      	adds	r0, #1
 8015102:	d1c2      	bne.n	801508a <_printf_float+0x2f2>
 8015104:	e6a3      	b.n	8014e4e <_printf_float+0xb6>
 8015106:	2301      	movs	r3, #1
 8015108:	4631      	mov	r1, r6
 801510a:	4628      	mov	r0, r5
 801510c:	9206      	str	r2, [sp, #24]
 801510e:	47b8      	blx	r7
 8015110:	3001      	adds	r0, #1
 8015112:	f43f ae9c 	beq.w	8014e4e <_printf_float+0xb6>
 8015116:	9a06      	ldr	r2, [sp, #24]
 8015118:	f10b 0b01 	add.w	fp, fp, #1
 801511c:	e7bb      	b.n	8015096 <_printf_float+0x2fe>
 801511e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015122:	4631      	mov	r1, r6
 8015124:	4628      	mov	r0, r5
 8015126:	47b8      	blx	r7
 8015128:	3001      	adds	r0, #1
 801512a:	d1c0      	bne.n	80150ae <_printf_float+0x316>
 801512c:	e68f      	b.n	8014e4e <_printf_float+0xb6>
 801512e:	9a06      	ldr	r2, [sp, #24]
 8015130:	464b      	mov	r3, r9
 8015132:	4442      	add	r2, r8
 8015134:	4631      	mov	r1, r6
 8015136:	4628      	mov	r0, r5
 8015138:	47b8      	blx	r7
 801513a:	3001      	adds	r0, #1
 801513c:	d1c3      	bne.n	80150c6 <_printf_float+0x32e>
 801513e:	e686      	b.n	8014e4e <_printf_float+0xb6>
 8015140:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015144:	f1ba 0f01 	cmp.w	sl, #1
 8015148:	dc01      	bgt.n	801514e <_printf_float+0x3b6>
 801514a:	07db      	lsls	r3, r3, #31
 801514c:	d536      	bpl.n	80151bc <_printf_float+0x424>
 801514e:	2301      	movs	r3, #1
 8015150:	4642      	mov	r2, r8
 8015152:	4631      	mov	r1, r6
 8015154:	4628      	mov	r0, r5
 8015156:	47b8      	blx	r7
 8015158:	3001      	adds	r0, #1
 801515a:	f43f ae78 	beq.w	8014e4e <_printf_float+0xb6>
 801515e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015162:	4631      	mov	r1, r6
 8015164:	4628      	mov	r0, r5
 8015166:	47b8      	blx	r7
 8015168:	3001      	adds	r0, #1
 801516a:	f43f ae70 	beq.w	8014e4e <_printf_float+0xb6>
 801516e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8015172:	2200      	movs	r2, #0
 8015174:	2300      	movs	r3, #0
 8015176:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801517a:	f7eb fcad 	bl	8000ad8 <__aeabi_dcmpeq>
 801517e:	b9c0      	cbnz	r0, 80151b2 <_printf_float+0x41a>
 8015180:	4653      	mov	r3, sl
 8015182:	f108 0201 	add.w	r2, r8, #1
 8015186:	4631      	mov	r1, r6
 8015188:	4628      	mov	r0, r5
 801518a:	47b8      	blx	r7
 801518c:	3001      	adds	r0, #1
 801518e:	d10c      	bne.n	80151aa <_printf_float+0x412>
 8015190:	e65d      	b.n	8014e4e <_printf_float+0xb6>
 8015192:	2301      	movs	r3, #1
 8015194:	465a      	mov	r2, fp
 8015196:	4631      	mov	r1, r6
 8015198:	4628      	mov	r0, r5
 801519a:	47b8      	blx	r7
 801519c:	3001      	adds	r0, #1
 801519e:	f43f ae56 	beq.w	8014e4e <_printf_float+0xb6>
 80151a2:	f108 0801 	add.w	r8, r8, #1
 80151a6:	45d0      	cmp	r8, sl
 80151a8:	dbf3      	blt.n	8015192 <_printf_float+0x3fa>
 80151aa:	464b      	mov	r3, r9
 80151ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80151b0:	e6df      	b.n	8014f72 <_printf_float+0x1da>
 80151b2:	f04f 0800 	mov.w	r8, #0
 80151b6:	f104 0b1a 	add.w	fp, r4, #26
 80151ba:	e7f4      	b.n	80151a6 <_printf_float+0x40e>
 80151bc:	2301      	movs	r3, #1
 80151be:	4642      	mov	r2, r8
 80151c0:	e7e1      	b.n	8015186 <_printf_float+0x3ee>
 80151c2:	2301      	movs	r3, #1
 80151c4:	464a      	mov	r2, r9
 80151c6:	4631      	mov	r1, r6
 80151c8:	4628      	mov	r0, r5
 80151ca:	47b8      	blx	r7
 80151cc:	3001      	adds	r0, #1
 80151ce:	f43f ae3e 	beq.w	8014e4e <_printf_float+0xb6>
 80151d2:	f108 0801 	add.w	r8, r8, #1
 80151d6:	68e3      	ldr	r3, [r4, #12]
 80151d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80151da:	1a5b      	subs	r3, r3, r1
 80151dc:	4543      	cmp	r3, r8
 80151de:	dcf0      	bgt.n	80151c2 <_printf_float+0x42a>
 80151e0:	e6fc      	b.n	8014fdc <_printf_float+0x244>
 80151e2:	f04f 0800 	mov.w	r8, #0
 80151e6:	f104 0919 	add.w	r9, r4, #25
 80151ea:	e7f4      	b.n	80151d6 <_printf_float+0x43e>

080151ec <_printf_common>:
 80151ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151f0:	4616      	mov	r6, r2
 80151f2:	4698      	mov	r8, r3
 80151f4:	688a      	ldr	r2, [r1, #8]
 80151f6:	690b      	ldr	r3, [r1, #16]
 80151f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80151fc:	4293      	cmp	r3, r2
 80151fe:	bfb8      	it	lt
 8015200:	4613      	movlt	r3, r2
 8015202:	6033      	str	r3, [r6, #0]
 8015204:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015208:	4607      	mov	r7, r0
 801520a:	460c      	mov	r4, r1
 801520c:	b10a      	cbz	r2, 8015212 <_printf_common+0x26>
 801520e:	3301      	adds	r3, #1
 8015210:	6033      	str	r3, [r6, #0]
 8015212:	6823      	ldr	r3, [r4, #0]
 8015214:	0699      	lsls	r1, r3, #26
 8015216:	bf42      	ittt	mi
 8015218:	6833      	ldrmi	r3, [r6, #0]
 801521a:	3302      	addmi	r3, #2
 801521c:	6033      	strmi	r3, [r6, #0]
 801521e:	6825      	ldr	r5, [r4, #0]
 8015220:	f015 0506 	ands.w	r5, r5, #6
 8015224:	d106      	bne.n	8015234 <_printf_common+0x48>
 8015226:	f104 0a19 	add.w	sl, r4, #25
 801522a:	68e3      	ldr	r3, [r4, #12]
 801522c:	6832      	ldr	r2, [r6, #0]
 801522e:	1a9b      	subs	r3, r3, r2
 8015230:	42ab      	cmp	r3, r5
 8015232:	dc26      	bgt.n	8015282 <_printf_common+0x96>
 8015234:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015238:	6822      	ldr	r2, [r4, #0]
 801523a:	3b00      	subs	r3, #0
 801523c:	bf18      	it	ne
 801523e:	2301      	movne	r3, #1
 8015240:	0692      	lsls	r2, r2, #26
 8015242:	d42b      	bmi.n	801529c <_printf_common+0xb0>
 8015244:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015248:	4641      	mov	r1, r8
 801524a:	4638      	mov	r0, r7
 801524c:	47c8      	blx	r9
 801524e:	3001      	adds	r0, #1
 8015250:	d01e      	beq.n	8015290 <_printf_common+0xa4>
 8015252:	6823      	ldr	r3, [r4, #0]
 8015254:	6922      	ldr	r2, [r4, #16]
 8015256:	f003 0306 	and.w	r3, r3, #6
 801525a:	2b04      	cmp	r3, #4
 801525c:	bf02      	ittt	eq
 801525e:	68e5      	ldreq	r5, [r4, #12]
 8015260:	6833      	ldreq	r3, [r6, #0]
 8015262:	1aed      	subeq	r5, r5, r3
 8015264:	68a3      	ldr	r3, [r4, #8]
 8015266:	bf0c      	ite	eq
 8015268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801526c:	2500      	movne	r5, #0
 801526e:	4293      	cmp	r3, r2
 8015270:	bfc4      	itt	gt
 8015272:	1a9b      	subgt	r3, r3, r2
 8015274:	18ed      	addgt	r5, r5, r3
 8015276:	2600      	movs	r6, #0
 8015278:	341a      	adds	r4, #26
 801527a:	42b5      	cmp	r5, r6
 801527c:	d11a      	bne.n	80152b4 <_printf_common+0xc8>
 801527e:	2000      	movs	r0, #0
 8015280:	e008      	b.n	8015294 <_printf_common+0xa8>
 8015282:	2301      	movs	r3, #1
 8015284:	4652      	mov	r2, sl
 8015286:	4641      	mov	r1, r8
 8015288:	4638      	mov	r0, r7
 801528a:	47c8      	blx	r9
 801528c:	3001      	adds	r0, #1
 801528e:	d103      	bne.n	8015298 <_printf_common+0xac>
 8015290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015298:	3501      	adds	r5, #1
 801529a:	e7c6      	b.n	801522a <_printf_common+0x3e>
 801529c:	18e1      	adds	r1, r4, r3
 801529e:	1c5a      	adds	r2, r3, #1
 80152a0:	2030      	movs	r0, #48	@ 0x30
 80152a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80152a6:	4422      	add	r2, r4
 80152a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80152ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80152b0:	3302      	adds	r3, #2
 80152b2:	e7c7      	b.n	8015244 <_printf_common+0x58>
 80152b4:	2301      	movs	r3, #1
 80152b6:	4622      	mov	r2, r4
 80152b8:	4641      	mov	r1, r8
 80152ba:	4638      	mov	r0, r7
 80152bc:	47c8      	blx	r9
 80152be:	3001      	adds	r0, #1
 80152c0:	d0e6      	beq.n	8015290 <_printf_common+0xa4>
 80152c2:	3601      	adds	r6, #1
 80152c4:	e7d9      	b.n	801527a <_printf_common+0x8e>
	...

080152c8 <_printf_i>:
 80152c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152cc:	7e0f      	ldrb	r7, [r1, #24]
 80152ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80152d0:	2f78      	cmp	r7, #120	@ 0x78
 80152d2:	4691      	mov	r9, r2
 80152d4:	4680      	mov	r8, r0
 80152d6:	460c      	mov	r4, r1
 80152d8:	469a      	mov	sl, r3
 80152da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80152de:	d807      	bhi.n	80152f0 <_printf_i+0x28>
 80152e0:	2f62      	cmp	r7, #98	@ 0x62
 80152e2:	d80a      	bhi.n	80152fa <_printf_i+0x32>
 80152e4:	2f00      	cmp	r7, #0
 80152e6:	f000 80d2 	beq.w	801548e <_printf_i+0x1c6>
 80152ea:	2f58      	cmp	r7, #88	@ 0x58
 80152ec:	f000 80b9 	beq.w	8015462 <_printf_i+0x19a>
 80152f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80152f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80152f8:	e03a      	b.n	8015370 <_printf_i+0xa8>
 80152fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80152fe:	2b15      	cmp	r3, #21
 8015300:	d8f6      	bhi.n	80152f0 <_printf_i+0x28>
 8015302:	a101      	add	r1, pc, #4	@ (adr r1, 8015308 <_printf_i+0x40>)
 8015304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015308:	08015361 	.word	0x08015361
 801530c:	08015375 	.word	0x08015375
 8015310:	080152f1 	.word	0x080152f1
 8015314:	080152f1 	.word	0x080152f1
 8015318:	080152f1 	.word	0x080152f1
 801531c:	080152f1 	.word	0x080152f1
 8015320:	08015375 	.word	0x08015375
 8015324:	080152f1 	.word	0x080152f1
 8015328:	080152f1 	.word	0x080152f1
 801532c:	080152f1 	.word	0x080152f1
 8015330:	080152f1 	.word	0x080152f1
 8015334:	08015475 	.word	0x08015475
 8015338:	0801539f 	.word	0x0801539f
 801533c:	0801542f 	.word	0x0801542f
 8015340:	080152f1 	.word	0x080152f1
 8015344:	080152f1 	.word	0x080152f1
 8015348:	08015497 	.word	0x08015497
 801534c:	080152f1 	.word	0x080152f1
 8015350:	0801539f 	.word	0x0801539f
 8015354:	080152f1 	.word	0x080152f1
 8015358:	080152f1 	.word	0x080152f1
 801535c:	08015437 	.word	0x08015437
 8015360:	6833      	ldr	r3, [r6, #0]
 8015362:	1d1a      	adds	r2, r3, #4
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	6032      	str	r2, [r6, #0]
 8015368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801536c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015370:	2301      	movs	r3, #1
 8015372:	e09d      	b.n	80154b0 <_printf_i+0x1e8>
 8015374:	6833      	ldr	r3, [r6, #0]
 8015376:	6820      	ldr	r0, [r4, #0]
 8015378:	1d19      	adds	r1, r3, #4
 801537a:	6031      	str	r1, [r6, #0]
 801537c:	0606      	lsls	r6, r0, #24
 801537e:	d501      	bpl.n	8015384 <_printf_i+0xbc>
 8015380:	681d      	ldr	r5, [r3, #0]
 8015382:	e003      	b.n	801538c <_printf_i+0xc4>
 8015384:	0645      	lsls	r5, r0, #25
 8015386:	d5fb      	bpl.n	8015380 <_printf_i+0xb8>
 8015388:	f9b3 5000 	ldrsh.w	r5, [r3]
 801538c:	2d00      	cmp	r5, #0
 801538e:	da03      	bge.n	8015398 <_printf_i+0xd0>
 8015390:	232d      	movs	r3, #45	@ 0x2d
 8015392:	426d      	negs	r5, r5
 8015394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015398:	4859      	ldr	r0, [pc, #356]	@ (8015500 <_printf_i+0x238>)
 801539a:	230a      	movs	r3, #10
 801539c:	e011      	b.n	80153c2 <_printf_i+0xfa>
 801539e:	6821      	ldr	r1, [r4, #0]
 80153a0:	6833      	ldr	r3, [r6, #0]
 80153a2:	0608      	lsls	r0, r1, #24
 80153a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80153a8:	d402      	bmi.n	80153b0 <_printf_i+0xe8>
 80153aa:	0649      	lsls	r1, r1, #25
 80153ac:	bf48      	it	mi
 80153ae:	b2ad      	uxthmi	r5, r5
 80153b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80153b2:	4853      	ldr	r0, [pc, #332]	@ (8015500 <_printf_i+0x238>)
 80153b4:	6033      	str	r3, [r6, #0]
 80153b6:	bf14      	ite	ne
 80153b8:	230a      	movne	r3, #10
 80153ba:	2308      	moveq	r3, #8
 80153bc:	2100      	movs	r1, #0
 80153be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80153c2:	6866      	ldr	r6, [r4, #4]
 80153c4:	60a6      	str	r6, [r4, #8]
 80153c6:	2e00      	cmp	r6, #0
 80153c8:	bfa2      	ittt	ge
 80153ca:	6821      	ldrge	r1, [r4, #0]
 80153cc:	f021 0104 	bicge.w	r1, r1, #4
 80153d0:	6021      	strge	r1, [r4, #0]
 80153d2:	b90d      	cbnz	r5, 80153d8 <_printf_i+0x110>
 80153d4:	2e00      	cmp	r6, #0
 80153d6:	d04b      	beq.n	8015470 <_printf_i+0x1a8>
 80153d8:	4616      	mov	r6, r2
 80153da:	fbb5 f1f3 	udiv	r1, r5, r3
 80153de:	fb03 5711 	mls	r7, r3, r1, r5
 80153e2:	5dc7      	ldrb	r7, [r0, r7]
 80153e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80153e8:	462f      	mov	r7, r5
 80153ea:	42bb      	cmp	r3, r7
 80153ec:	460d      	mov	r5, r1
 80153ee:	d9f4      	bls.n	80153da <_printf_i+0x112>
 80153f0:	2b08      	cmp	r3, #8
 80153f2:	d10b      	bne.n	801540c <_printf_i+0x144>
 80153f4:	6823      	ldr	r3, [r4, #0]
 80153f6:	07df      	lsls	r7, r3, #31
 80153f8:	d508      	bpl.n	801540c <_printf_i+0x144>
 80153fa:	6923      	ldr	r3, [r4, #16]
 80153fc:	6861      	ldr	r1, [r4, #4]
 80153fe:	4299      	cmp	r1, r3
 8015400:	bfde      	ittt	le
 8015402:	2330      	movle	r3, #48	@ 0x30
 8015404:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015408:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801540c:	1b92      	subs	r2, r2, r6
 801540e:	6122      	str	r2, [r4, #16]
 8015410:	f8cd a000 	str.w	sl, [sp]
 8015414:	464b      	mov	r3, r9
 8015416:	aa03      	add	r2, sp, #12
 8015418:	4621      	mov	r1, r4
 801541a:	4640      	mov	r0, r8
 801541c:	f7ff fee6 	bl	80151ec <_printf_common>
 8015420:	3001      	adds	r0, #1
 8015422:	d14a      	bne.n	80154ba <_printf_i+0x1f2>
 8015424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015428:	b004      	add	sp, #16
 801542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801542e:	6823      	ldr	r3, [r4, #0]
 8015430:	f043 0320 	orr.w	r3, r3, #32
 8015434:	6023      	str	r3, [r4, #0]
 8015436:	4833      	ldr	r0, [pc, #204]	@ (8015504 <_printf_i+0x23c>)
 8015438:	2778      	movs	r7, #120	@ 0x78
 801543a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801543e:	6823      	ldr	r3, [r4, #0]
 8015440:	6831      	ldr	r1, [r6, #0]
 8015442:	061f      	lsls	r7, r3, #24
 8015444:	f851 5b04 	ldr.w	r5, [r1], #4
 8015448:	d402      	bmi.n	8015450 <_printf_i+0x188>
 801544a:	065f      	lsls	r7, r3, #25
 801544c:	bf48      	it	mi
 801544e:	b2ad      	uxthmi	r5, r5
 8015450:	6031      	str	r1, [r6, #0]
 8015452:	07d9      	lsls	r1, r3, #31
 8015454:	bf44      	itt	mi
 8015456:	f043 0320 	orrmi.w	r3, r3, #32
 801545a:	6023      	strmi	r3, [r4, #0]
 801545c:	b11d      	cbz	r5, 8015466 <_printf_i+0x19e>
 801545e:	2310      	movs	r3, #16
 8015460:	e7ac      	b.n	80153bc <_printf_i+0xf4>
 8015462:	4827      	ldr	r0, [pc, #156]	@ (8015500 <_printf_i+0x238>)
 8015464:	e7e9      	b.n	801543a <_printf_i+0x172>
 8015466:	6823      	ldr	r3, [r4, #0]
 8015468:	f023 0320 	bic.w	r3, r3, #32
 801546c:	6023      	str	r3, [r4, #0]
 801546e:	e7f6      	b.n	801545e <_printf_i+0x196>
 8015470:	4616      	mov	r6, r2
 8015472:	e7bd      	b.n	80153f0 <_printf_i+0x128>
 8015474:	6833      	ldr	r3, [r6, #0]
 8015476:	6825      	ldr	r5, [r4, #0]
 8015478:	6961      	ldr	r1, [r4, #20]
 801547a:	1d18      	adds	r0, r3, #4
 801547c:	6030      	str	r0, [r6, #0]
 801547e:	062e      	lsls	r6, r5, #24
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	d501      	bpl.n	8015488 <_printf_i+0x1c0>
 8015484:	6019      	str	r1, [r3, #0]
 8015486:	e002      	b.n	801548e <_printf_i+0x1c6>
 8015488:	0668      	lsls	r0, r5, #25
 801548a:	d5fb      	bpl.n	8015484 <_printf_i+0x1bc>
 801548c:	8019      	strh	r1, [r3, #0]
 801548e:	2300      	movs	r3, #0
 8015490:	6123      	str	r3, [r4, #16]
 8015492:	4616      	mov	r6, r2
 8015494:	e7bc      	b.n	8015410 <_printf_i+0x148>
 8015496:	6833      	ldr	r3, [r6, #0]
 8015498:	1d1a      	adds	r2, r3, #4
 801549a:	6032      	str	r2, [r6, #0]
 801549c:	681e      	ldr	r6, [r3, #0]
 801549e:	6862      	ldr	r2, [r4, #4]
 80154a0:	2100      	movs	r1, #0
 80154a2:	4630      	mov	r0, r6
 80154a4:	f7ea fe9c 	bl	80001e0 <memchr>
 80154a8:	b108      	cbz	r0, 80154ae <_printf_i+0x1e6>
 80154aa:	1b80      	subs	r0, r0, r6
 80154ac:	6060      	str	r0, [r4, #4]
 80154ae:	6863      	ldr	r3, [r4, #4]
 80154b0:	6123      	str	r3, [r4, #16]
 80154b2:	2300      	movs	r3, #0
 80154b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80154b8:	e7aa      	b.n	8015410 <_printf_i+0x148>
 80154ba:	6923      	ldr	r3, [r4, #16]
 80154bc:	4632      	mov	r2, r6
 80154be:	4649      	mov	r1, r9
 80154c0:	4640      	mov	r0, r8
 80154c2:	47d0      	blx	sl
 80154c4:	3001      	adds	r0, #1
 80154c6:	d0ad      	beq.n	8015424 <_printf_i+0x15c>
 80154c8:	6823      	ldr	r3, [r4, #0]
 80154ca:	079b      	lsls	r3, r3, #30
 80154cc:	d413      	bmi.n	80154f6 <_printf_i+0x22e>
 80154ce:	68e0      	ldr	r0, [r4, #12]
 80154d0:	9b03      	ldr	r3, [sp, #12]
 80154d2:	4298      	cmp	r0, r3
 80154d4:	bfb8      	it	lt
 80154d6:	4618      	movlt	r0, r3
 80154d8:	e7a6      	b.n	8015428 <_printf_i+0x160>
 80154da:	2301      	movs	r3, #1
 80154dc:	4632      	mov	r2, r6
 80154de:	4649      	mov	r1, r9
 80154e0:	4640      	mov	r0, r8
 80154e2:	47d0      	blx	sl
 80154e4:	3001      	adds	r0, #1
 80154e6:	d09d      	beq.n	8015424 <_printf_i+0x15c>
 80154e8:	3501      	adds	r5, #1
 80154ea:	68e3      	ldr	r3, [r4, #12]
 80154ec:	9903      	ldr	r1, [sp, #12]
 80154ee:	1a5b      	subs	r3, r3, r1
 80154f0:	42ab      	cmp	r3, r5
 80154f2:	dcf2      	bgt.n	80154da <_printf_i+0x212>
 80154f4:	e7eb      	b.n	80154ce <_printf_i+0x206>
 80154f6:	2500      	movs	r5, #0
 80154f8:	f104 0619 	add.w	r6, r4, #25
 80154fc:	e7f5      	b.n	80154ea <_printf_i+0x222>
 80154fe:	bf00      	nop
 8015500:	0802f06e 	.word	0x0802f06e
 8015504:	0802f07f 	.word	0x0802f07f

08015508 <_scanf_float>:
 8015508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801550c:	b087      	sub	sp, #28
 801550e:	4617      	mov	r7, r2
 8015510:	9303      	str	r3, [sp, #12]
 8015512:	688b      	ldr	r3, [r1, #8]
 8015514:	1e5a      	subs	r2, r3, #1
 8015516:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801551a:	bf81      	itttt	hi
 801551c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8015520:	eb03 0b05 	addhi.w	fp, r3, r5
 8015524:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8015528:	608b      	strhi	r3, [r1, #8]
 801552a:	680b      	ldr	r3, [r1, #0]
 801552c:	460a      	mov	r2, r1
 801552e:	f04f 0500 	mov.w	r5, #0
 8015532:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8015536:	f842 3b1c 	str.w	r3, [r2], #28
 801553a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801553e:	4680      	mov	r8, r0
 8015540:	460c      	mov	r4, r1
 8015542:	bf98      	it	ls
 8015544:	f04f 0b00 	movls.w	fp, #0
 8015548:	9201      	str	r2, [sp, #4]
 801554a:	4616      	mov	r6, r2
 801554c:	46aa      	mov	sl, r5
 801554e:	46a9      	mov	r9, r5
 8015550:	9502      	str	r5, [sp, #8]
 8015552:	68a2      	ldr	r2, [r4, #8]
 8015554:	b152      	cbz	r2, 801556c <_scanf_float+0x64>
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	781b      	ldrb	r3, [r3, #0]
 801555a:	2b4e      	cmp	r3, #78	@ 0x4e
 801555c:	d864      	bhi.n	8015628 <_scanf_float+0x120>
 801555e:	2b40      	cmp	r3, #64	@ 0x40
 8015560:	d83c      	bhi.n	80155dc <_scanf_float+0xd4>
 8015562:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8015566:	b2c8      	uxtb	r0, r1
 8015568:	280e      	cmp	r0, #14
 801556a:	d93a      	bls.n	80155e2 <_scanf_float+0xda>
 801556c:	f1b9 0f00 	cmp.w	r9, #0
 8015570:	d003      	beq.n	801557a <_scanf_float+0x72>
 8015572:	6823      	ldr	r3, [r4, #0]
 8015574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015578:	6023      	str	r3, [r4, #0]
 801557a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801557e:	f1ba 0f01 	cmp.w	sl, #1
 8015582:	f200 8117 	bhi.w	80157b4 <_scanf_float+0x2ac>
 8015586:	9b01      	ldr	r3, [sp, #4]
 8015588:	429e      	cmp	r6, r3
 801558a:	f200 8108 	bhi.w	801579e <_scanf_float+0x296>
 801558e:	2001      	movs	r0, #1
 8015590:	b007      	add	sp, #28
 8015592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015596:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801559a:	2a0d      	cmp	r2, #13
 801559c:	d8e6      	bhi.n	801556c <_scanf_float+0x64>
 801559e:	a101      	add	r1, pc, #4	@ (adr r1, 80155a4 <_scanf_float+0x9c>)
 80155a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80155a4:	080156eb 	.word	0x080156eb
 80155a8:	0801556d 	.word	0x0801556d
 80155ac:	0801556d 	.word	0x0801556d
 80155b0:	0801556d 	.word	0x0801556d
 80155b4:	0801574b 	.word	0x0801574b
 80155b8:	08015723 	.word	0x08015723
 80155bc:	0801556d 	.word	0x0801556d
 80155c0:	0801556d 	.word	0x0801556d
 80155c4:	080156f9 	.word	0x080156f9
 80155c8:	0801556d 	.word	0x0801556d
 80155cc:	0801556d 	.word	0x0801556d
 80155d0:	0801556d 	.word	0x0801556d
 80155d4:	0801556d 	.word	0x0801556d
 80155d8:	080156b1 	.word	0x080156b1
 80155dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80155e0:	e7db      	b.n	801559a <_scanf_float+0x92>
 80155e2:	290e      	cmp	r1, #14
 80155e4:	d8c2      	bhi.n	801556c <_scanf_float+0x64>
 80155e6:	a001      	add	r0, pc, #4	@ (adr r0, 80155ec <_scanf_float+0xe4>)
 80155e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80155ec:	080156a1 	.word	0x080156a1
 80155f0:	0801556d 	.word	0x0801556d
 80155f4:	080156a1 	.word	0x080156a1
 80155f8:	08015737 	.word	0x08015737
 80155fc:	0801556d 	.word	0x0801556d
 8015600:	08015649 	.word	0x08015649
 8015604:	08015687 	.word	0x08015687
 8015608:	08015687 	.word	0x08015687
 801560c:	08015687 	.word	0x08015687
 8015610:	08015687 	.word	0x08015687
 8015614:	08015687 	.word	0x08015687
 8015618:	08015687 	.word	0x08015687
 801561c:	08015687 	.word	0x08015687
 8015620:	08015687 	.word	0x08015687
 8015624:	08015687 	.word	0x08015687
 8015628:	2b6e      	cmp	r3, #110	@ 0x6e
 801562a:	d809      	bhi.n	8015640 <_scanf_float+0x138>
 801562c:	2b60      	cmp	r3, #96	@ 0x60
 801562e:	d8b2      	bhi.n	8015596 <_scanf_float+0x8e>
 8015630:	2b54      	cmp	r3, #84	@ 0x54
 8015632:	d07b      	beq.n	801572c <_scanf_float+0x224>
 8015634:	2b59      	cmp	r3, #89	@ 0x59
 8015636:	d199      	bne.n	801556c <_scanf_float+0x64>
 8015638:	2d07      	cmp	r5, #7
 801563a:	d197      	bne.n	801556c <_scanf_float+0x64>
 801563c:	2508      	movs	r5, #8
 801563e:	e02c      	b.n	801569a <_scanf_float+0x192>
 8015640:	2b74      	cmp	r3, #116	@ 0x74
 8015642:	d073      	beq.n	801572c <_scanf_float+0x224>
 8015644:	2b79      	cmp	r3, #121	@ 0x79
 8015646:	e7f6      	b.n	8015636 <_scanf_float+0x12e>
 8015648:	6821      	ldr	r1, [r4, #0]
 801564a:	05c8      	lsls	r0, r1, #23
 801564c:	d51b      	bpl.n	8015686 <_scanf_float+0x17e>
 801564e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8015652:	6021      	str	r1, [r4, #0]
 8015654:	f109 0901 	add.w	r9, r9, #1
 8015658:	f1bb 0f00 	cmp.w	fp, #0
 801565c:	d003      	beq.n	8015666 <_scanf_float+0x15e>
 801565e:	3201      	adds	r2, #1
 8015660:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8015664:	60a2      	str	r2, [r4, #8]
 8015666:	68a3      	ldr	r3, [r4, #8]
 8015668:	3b01      	subs	r3, #1
 801566a:	60a3      	str	r3, [r4, #8]
 801566c:	6923      	ldr	r3, [r4, #16]
 801566e:	3301      	adds	r3, #1
 8015670:	6123      	str	r3, [r4, #16]
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	3b01      	subs	r3, #1
 8015676:	2b00      	cmp	r3, #0
 8015678:	607b      	str	r3, [r7, #4]
 801567a:	f340 8087 	ble.w	801578c <_scanf_float+0x284>
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	3301      	adds	r3, #1
 8015682:	603b      	str	r3, [r7, #0]
 8015684:	e765      	b.n	8015552 <_scanf_float+0x4a>
 8015686:	eb1a 0105 	adds.w	r1, sl, r5
 801568a:	f47f af6f 	bne.w	801556c <_scanf_float+0x64>
 801568e:	6822      	ldr	r2, [r4, #0]
 8015690:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8015694:	6022      	str	r2, [r4, #0]
 8015696:	460d      	mov	r5, r1
 8015698:	468a      	mov	sl, r1
 801569a:	f806 3b01 	strb.w	r3, [r6], #1
 801569e:	e7e2      	b.n	8015666 <_scanf_float+0x15e>
 80156a0:	6822      	ldr	r2, [r4, #0]
 80156a2:	0610      	lsls	r0, r2, #24
 80156a4:	f57f af62 	bpl.w	801556c <_scanf_float+0x64>
 80156a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80156ac:	6022      	str	r2, [r4, #0]
 80156ae:	e7f4      	b.n	801569a <_scanf_float+0x192>
 80156b0:	f1ba 0f00 	cmp.w	sl, #0
 80156b4:	d10e      	bne.n	80156d4 <_scanf_float+0x1cc>
 80156b6:	f1b9 0f00 	cmp.w	r9, #0
 80156ba:	d10e      	bne.n	80156da <_scanf_float+0x1d2>
 80156bc:	6822      	ldr	r2, [r4, #0]
 80156be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80156c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80156c6:	d108      	bne.n	80156da <_scanf_float+0x1d2>
 80156c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80156cc:	6022      	str	r2, [r4, #0]
 80156ce:	f04f 0a01 	mov.w	sl, #1
 80156d2:	e7e2      	b.n	801569a <_scanf_float+0x192>
 80156d4:	f1ba 0f02 	cmp.w	sl, #2
 80156d8:	d055      	beq.n	8015786 <_scanf_float+0x27e>
 80156da:	2d01      	cmp	r5, #1
 80156dc:	d002      	beq.n	80156e4 <_scanf_float+0x1dc>
 80156de:	2d04      	cmp	r5, #4
 80156e0:	f47f af44 	bne.w	801556c <_scanf_float+0x64>
 80156e4:	3501      	adds	r5, #1
 80156e6:	b2ed      	uxtb	r5, r5
 80156e8:	e7d7      	b.n	801569a <_scanf_float+0x192>
 80156ea:	f1ba 0f01 	cmp.w	sl, #1
 80156ee:	f47f af3d 	bne.w	801556c <_scanf_float+0x64>
 80156f2:	f04f 0a02 	mov.w	sl, #2
 80156f6:	e7d0      	b.n	801569a <_scanf_float+0x192>
 80156f8:	b97d      	cbnz	r5, 801571a <_scanf_float+0x212>
 80156fa:	f1b9 0f00 	cmp.w	r9, #0
 80156fe:	f47f af38 	bne.w	8015572 <_scanf_float+0x6a>
 8015702:	6822      	ldr	r2, [r4, #0]
 8015704:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8015708:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801570c:	f040 8108 	bne.w	8015920 <_scanf_float+0x418>
 8015710:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015714:	6022      	str	r2, [r4, #0]
 8015716:	2501      	movs	r5, #1
 8015718:	e7bf      	b.n	801569a <_scanf_float+0x192>
 801571a:	2d03      	cmp	r5, #3
 801571c:	d0e2      	beq.n	80156e4 <_scanf_float+0x1dc>
 801571e:	2d05      	cmp	r5, #5
 8015720:	e7de      	b.n	80156e0 <_scanf_float+0x1d8>
 8015722:	2d02      	cmp	r5, #2
 8015724:	f47f af22 	bne.w	801556c <_scanf_float+0x64>
 8015728:	2503      	movs	r5, #3
 801572a:	e7b6      	b.n	801569a <_scanf_float+0x192>
 801572c:	2d06      	cmp	r5, #6
 801572e:	f47f af1d 	bne.w	801556c <_scanf_float+0x64>
 8015732:	2507      	movs	r5, #7
 8015734:	e7b1      	b.n	801569a <_scanf_float+0x192>
 8015736:	6822      	ldr	r2, [r4, #0]
 8015738:	0591      	lsls	r1, r2, #22
 801573a:	f57f af17 	bpl.w	801556c <_scanf_float+0x64>
 801573e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8015742:	6022      	str	r2, [r4, #0]
 8015744:	f8cd 9008 	str.w	r9, [sp, #8]
 8015748:	e7a7      	b.n	801569a <_scanf_float+0x192>
 801574a:	6822      	ldr	r2, [r4, #0]
 801574c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8015750:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015754:	d006      	beq.n	8015764 <_scanf_float+0x25c>
 8015756:	0550      	lsls	r0, r2, #21
 8015758:	f57f af08 	bpl.w	801556c <_scanf_float+0x64>
 801575c:	f1b9 0f00 	cmp.w	r9, #0
 8015760:	f000 80de 	beq.w	8015920 <_scanf_float+0x418>
 8015764:	0591      	lsls	r1, r2, #22
 8015766:	bf58      	it	pl
 8015768:	9902      	ldrpl	r1, [sp, #8]
 801576a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801576e:	bf58      	it	pl
 8015770:	eba9 0101 	subpl.w	r1, r9, r1
 8015774:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8015778:	bf58      	it	pl
 801577a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801577e:	6022      	str	r2, [r4, #0]
 8015780:	f04f 0900 	mov.w	r9, #0
 8015784:	e789      	b.n	801569a <_scanf_float+0x192>
 8015786:	f04f 0a03 	mov.w	sl, #3
 801578a:	e786      	b.n	801569a <_scanf_float+0x192>
 801578c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015790:	4639      	mov	r1, r7
 8015792:	4640      	mov	r0, r8
 8015794:	4798      	blx	r3
 8015796:	2800      	cmp	r0, #0
 8015798:	f43f aedb 	beq.w	8015552 <_scanf_float+0x4a>
 801579c:	e6e6      	b.n	801556c <_scanf_float+0x64>
 801579e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80157a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80157a6:	463a      	mov	r2, r7
 80157a8:	4640      	mov	r0, r8
 80157aa:	4798      	blx	r3
 80157ac:	6923      	ldr	r3, [r4, #16]
 80157ae:	3b01      	subs	r3, #1
 80157b0:	6123      	str	r3, [r4, #16]
 80157b2:	e6e8      	b.n	8015586 <_scanf_float+0x7e>
 80157b4:	1e6b      	subs	r3, r5, #1
 80157b6:	2b06      	cmp	r3, #6
 80157b8:	d824      	bhi.n	8015804 <_scanf_float+0x2fc>
 80157ba:	2d02      	cmp	r5, #2
 80157bc:	d836      	bhi.n	801582c <_scanf_float+0x324>
 80157be:	9b01      	ldr	r3, [sp, #4]
 80157c0:	429e      	cmp	r6, r3
 80157c2:	f67f aee4 	bls.w	801558e <_scanf_float+0x86>
 80157c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80157ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80157ce:	463a      	mov	r2, r7
 80157d0:	4640      	mov	r0, r8
 80157d2:	4798      	blx	r3
 80157d4:	6923      	ldr	r3, [r4, #16]
 80157d6:	3b01      	subs	r3, #1
 80157d8:	6123      	str	r3, [r4, #16]
 80157da:	e7f0      	b.n	80157be <_scanf_float+0x2b6>
 80157dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80157e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80157e4:	463a      	mov	r2, r7
 80157e6:	4640      	mov	r0, r8
 80157e8:	4798      	blx	r3
 80157ea:	6923      	ldr	r3, [r4, #16]
 80157ec:	3b01      	subs	r3, #1
 80157ee:	6123      	str	r3, [r4, #16]
 80157f0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80157f4:	fa5f fa8a 	uxtb.w	sl, sl
 80157f8:	f1ba 0f02 	cmp.w	sl, #2
 80157fc:	d1ee      	bne.n	80157dc <_scanf_float+0x2d4>
 80157fe:	3d03      	subs	r5, #3
 8015800:	b2ed      	uxtb	r5, r5
 8015802:	1b76      	subs	r6, r6, r5
 8015804:	6823      	ldr	r3, [r4, #0]
 8015806:	05da      	lsls	r2, r3, #23
 8015808:	d530      	bpl.n	801586c <_scanf_float+0x364>
 801580a:	055b      	lsls	r3, r3, #21
 801580c:	d511      	bpl.n	8015832 <_scanf_float+0x32a>
 801580e:	9b01      	ldr	r3, [sp, #4]
 8015810:	429e      	cmp	r6, r3
 8015812:	f67f aebc 	bls.w	801558e <_scanf_float+0x86>
 8015816:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801581a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801581e:	463a      	mov	r2, r7
 8015820:	4640      	mov	r0, r8
 8015822:	4798      	blx	r3
 8015824:	6923      	ldr	r3, [r4, #16]
 8015826:	3b01      	subs	r3, #1
 8015828:	6123      	str	r3, [r4, #16]
 801582a:	e7f0      	b.n	801580e <_scanf_float+0x306>
 801582c:	46aa      	mov	sl, r5
 801582e:	46b3      	mov	fp, r6
 8015830:	e7de      	b.n	80157f0 <_scanf_float+0x2e8>
 8015832:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015836:	6923      	ldr	r3, [r4, #16]
 8015838:	2965      	cmp	r1, #101	@ 0x65
 801583a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801583e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8015842:	6123      	str	r3, [r4, #16]
 8015844:	d00c      	beq.n	8015860 <_scanf_float+0x358>
 8015846:	2945      	cmp	r1, #69	@ 0x45
 8015848:	d00a      	beq.n	8015860 <_scanf_float+0x358>
 801584a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801584e:	463a      	mov	r2, r7
 8015850:	4640      	mov	r0, r8
 8015852:	4798      	blx	r3
 8015854:	6923      	ldr	r3, [r4, #16]
 8015856:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801585a:	3b01      	subs	r3, #1
 801585c:	1eb5      	subs	r5, r6, #2
 801585e:	6123      	str	r3, [r4, #16]
 8015860:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015864:	463a      	mov	r2, r7
 8015866:	4640      	mov	r0, r8
 8015868:	4798      	blx	r3
 801586a:	462e      	mov	r6, r5
 801586c:	6822      	ldr	r2, [r4, #0]
 801586e:	f012 0210 	ands.w	r2, r2, #16
 8015872:	d001      	beq.n	8015878 <_scanf_float+0x370>
 8015874:	2000      	movs	r0, #0
 8015876:	e68b      	b.n	8015590 <_scanf_float+0x88>
 8015878:	7032      	strb	r2, [r6, #0]
 801587a:	6823      	ldr	r3, [r4, #0]
 801587c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8015880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015884:	d11c      	bne.n	80158c0 <_scanf_float+0x3b8>
 8015886:	9b02      	ldr	r3, [sp, #8]
 8015888:	454b      	cmp	r3, r9
 801588a:	eba3 0209 	sub.w	r2, r3, r9
 801588e:	d123      	bne.n	80158d8 <_scanf_float+0x3d0>
 8015890:	9901      	ldr	r1, [sp, #4]
 8015892:	2200      	movs	r2, #0
 8015894:	4640      	mov	r0, r8
 8015896:	f002 fd87 	bl	80183a8 <_strtod_r>
 801589a:	9b03      	ldr	r3, [sp, #12]
 801589c:	6821      	ldr	r1, [r4, #0]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	f011 0f02 	tst.w	r1, #2
 80158a4:	ec57 6b10 	vmov	r6, r7, d0
 80158a8:	f103 0204 	add.w	r2, r3, #4
 80158ac:	d01f      	beq.n	80158ee <_scanf_float+0x3e6>
 80158ae:	9903      	ldr	r1, [sp, #12]
 80158b0:	600a      	str	r2, [r1, #0]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	e9c3 6700 	strd	r6, r7, [r3]
 80158b8:	68e3      	ldr	r3, [r4, #12]
 80158ba:	3301      	adds	r3, #1
 80158bc:	60e3      	str	r3, [r4, #12]
 80158be:	e7d9      	b.n	8015874 <_scanf_float+0x36c>
 80158c0:	9b04      	ldr	r3, [sp, #16]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d0e4      	beq.n	8015890 <_scanf_float+0x388>
 80158c6:	9905      	ldr	r1, [sp, #20]
 80158c8:	230a      	movs	r3, #10
 80158ca:	3101      	adds	r1, #1
 80158cc:	4640      	mov	r0, r8
 80158ce:	f002 fdeb 	bl	80184a8 <_strtol_r>
 80158d2:	9b04      	ldr	r3, [sp, #16]
 80158d4:	9e05      	ldr	r6, [sp, #20]
 80158d6:	1ac2      	subs	r2, r0, r3
 80158d8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80158dc:	429e      	cmp	r6, r3
 80158de:	bf28      	it	cs
 80158e0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80158e4:	4910      	ldr	r1, [pc, #64]	@ (8015928 <_scanf_float+0x420>)
 80158e6:	4630      	mov	r0, r6
 80158e8:	f000 f942 	bl	8015b70 <siprintf>
 80158ec:	e7d0      	b.n	8015890 <_scanf_float+0x388>
 80158ee:	f011 0f04 	tst.w	r1, #4
 80158f2:	9903      	ldr	r1, [sp, #12]
 80158f4:	600a      	str	r2, [r1, #0]
 80158f6:	d1dc      	bne.n	80158b2 <_scanf_float+0x3aa>
 80158f8:	681d      	ldr	r5, [r3, #0]
 80158fa:	4632      	mov	r2, r6
 80158fc:	463b      	mov	r3, r7
 80158fe:	4630      	mov	r0, r6
 8015900:	4639      	mov	r1, r7
 8015902:	f7eb f91b 	bl	8000b3c <__aeabi_dcmpun>
 8015906:	b128      	cbz	r0, 8015914 <_scanf_float+0x40c>
 8015908:	4808      	ldr	r0, [pc, #32]	@ (801592c <_scanf_float+0x424>)
 801590a:	f000 fb45 	bl	8015f98 <nanf>
 801590e:	ed85 0a00 	vstr	s0, [r5]
 8015912:	e7d1      	b.n	80158b8 <_scanf_float+0x3b0>
 8015914:	4630      	mov	r0, r6
 8015916:	4639      	mov	r1, r7
 8015918:	f7eb f96e 	bl	8000bf8 <__aeabi_d2f>
 801591c:	6028      	str	r0, [r5, #0]
 801591e:	e7cb      	b.n	80158b8 <_scanf_float+0x3b0>
 8015920:	f04f 0900 	mov.w	r9, #0
 8015924:	e629      	b.n	801557a <_scanf_float+0x72>
 8015926:	bf00      	nop
 8015928:	0802f090 	.word	0x0802f090
 801592c:	0802f425 	.word	0x0802f425

08015930 <std>:
 8015930:	2300      	movs	r3, #0
 8015932:	b510      	push	{r4, lr}
 8015934:	4604      	mov	r4, r0
 8015936:	e9c0 3300 	strd	r3, r3, [r0]
 801593a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801593e:	6083      	str	r3, [r0, #8]
 8015940:	8181      	strh	r1, [r0, #12]
 8015942:	6643      	str	r3, [r0, #100]	@ 0x64
 8015944:	81c2      	strh	r2, [r0, #14]
 8015946:	6183      	str	r3, [r0, #24]
 8015948:	4619      	mov	r1, r3
 801594a:	2208      	movs	r2, #8
 801594c:	305c      	adds	r0, #92	@ 0x5c
 801594e:	f000 fa3f 	bl	8015dd0 <memset>
 8015952:	4b0d      	ldr	r3, [pc, #52]	@ (8015988 <std+0x58>)
 8015954:	6263      	str	r3, [r4, #36]	@ 0x24
 8015956:	4b0d      	ldr	r3, [pc, #52]	@ (801598c <std+0x5c>)
 8015958:	62a3      	str	r3, [r4, #40]	@ 0x28
 801595a:	4b0d      	ldr	r3, [pc, #52]	@ (8015990 <std+0x60>)
 801595c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801595e:	4b0d      	ldr	r3, [pc, #52]	@ (8015994 <std+0x64>)
 8015960:	6323      	str	r3, [r4, #48]	@ 0x30
 8015962:	4b0d      	ldr	r3, [pc, #52]	@ (8015998 <std+0x68>)
 8015964:	6224      	str	r4, [r4, #32]
 8015966:	429c      	cmp	r4, r3
 8015968:	d006      	beq.n	8015978 <std+0x48>
 801596a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801596e:	4294      	cmp	r4, r2
 8015970:	d002      	beq.n	8015978 <std+0x48>
 8015972:	33d0      	adds	r3, #208	@ 0xd0
 8015974:	429c      	cmp	r4, r3
 8015976:	d105      	bne.n	8015984 <std+0x54>
 8015978:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015980:	f000 baf8 	b.w	8015f74 <__retarget_lock_init_recursive>
 8015984:	bd10      	pop	{r4, pc}
 8015986:	bf00      	nop
 8015988:	08015bb1 	.word	0x08015bb1
 801598c:	08015bd3 	.word	0x08015bd3
 8015990:	08015c0b 	.word	0x08015c0b
 8015994:	08015c2f 	.word	0x08015c2f
 8015998:	20024a80 	.word	0x20024a80

0801599c <stdio_exit_handler>:
 801599c:	4a02      	ldr	r2, [pc, #8]	@ (80159a8 <stdio_exit_handler+0xc>)
 801599e:	4903      	ldr	r1, [pc, #12]	@ (80159ac <stdio_exit_handler+0x10>)
 80159a0:	4803      	ldr	r0, [pc, #12]	@ (80159b0 <stdio_exit_handler+0x14>)
 80159a2:	f000 b869 	b.w	8015a78 <_fwalk_sglue>
 80159a6:	bf00      	nop
 80159a8:	20000134 	.word	0x20000134
 80159ac:	08018865 	.word	0x08018865
 80159b0:	20000144 	.word	0x20000144

080159b4 <cleanup_stdio>:
 80159b4:	6841      	ldr	r1, [r0, #4]
 80159b6:	4b0c      	ldr	r3, [pc, #48]	@ (80159e8 <cleanup_stdio+0x34>)
 80159b8:	4299      	cmp	r1, r3
 80159ba:	b510      	push	{r4, lr}
 80159bc:	4604      	mov	r4, r0
 80159be:	d001      	beq.n	80159c4 <cleanup_stdio+0x10>
 80159c0:	f002 ff50 	bl	8018864 <_fflush_r>
 80159c4:	68a1      	ldr	r1, [r4, #8]
 80159c6:	4b09      	ldr	r3, [pc, #36]	@ (80159ec <cleanup_stdio+0x38>)
 80159c8:	4299      	cmp	r1, r3
 80159ca:	d002      	beq.n	80159d2 <cleanup_stdio+0x1e>
 80159cc:	4620      	mov	r0, r4
 80159ce:	f002 ff49 	bl	8018864 <_fflush_r>
 80159d2:	68e1      	ldr	r1, [r4, #12]
 80159d4:	4b06      	ldr	r3, [pc, #24]	@ (80159f0 <cleanup_stdio+0x3c>)
 80159d6:	4299      	cmp	r1, r3
 80159d8:	d004      	beq.n	80159e4 <cleanup_stdio+0x30>
 80159da:	4620      	mov	r0, r4
 80159dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159e0:	f002 bf40 	b.w	8018864 <_fflush_r>
 80159e4:	bd10      	pop	{r4, pc}
 80159e6:	bf00      	nop
 80159e8:	20024a80 	.word	0x20024a80
 80159ec:	20024ae8 	.word	0x20024ae8
 80159f0:	20024b50 	.word	0x20024b50

080159f4 <global_stdio_init.part.0>:
 80159f4:	b510      	push	{r4, lr}
 80159f6:	4b0b      	ldr	r3, [pc, #44]	@ (8015a24 <global_stdio_init.part.0+0x30>)
 80159f8:	4c0b      	ldr	r4, [pc, #44]	@ (8015a28 <global_stdio_init.part.0+0x34>)
 80159fa:	4a0c      	ldr	r2, [pc, #48]	@ (8015a2c <global_stdio_init.part.0+0x38>)
 80159fc:	601a      	str	r2, [r3, #0]
 80159fe:	4620      	mov	r0, r4
 8015a00:	2200      	movs	r2, #0
 8015a02:	2104      	movs	r1, #4
 8015a04:	f7ff ff94 	bl	8015930 <std>
 8015a08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015a0c:	2201      	movs	r2, #1
 8015a0e:	2109      	movs	r1, #9
 8015a10:	f7ff ff8e 	bl	8015930 <std>
 8015a14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015a18:	2202      	movs	r2, #2
 8015a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a1e:	2112      	movs	r1, #18
 8015a20:	f7ff bf86 	b.w	8015930 <std>
 8015a24:	20024bb8 	.word	0x20024bb8
 8015a28:	20024a80 	.word	0x20024a80
 8015a2c:	0801599d 	.word	0x0801599d

08015a30 <__sfp_lock_acquire>:
 8015a30:	4801      	ldr	r0, [pc, #4]	@ (8015a38 <__sfp_lock_acquire+0x8>)
 8015a32:	f000 baa0 	b.w	8015f76 <__retarget_lock_acquire_recursive>
 8015a36:	bf00      	nop
 8015a38:	20024bc1 	.word	0x20024bc1

08015a3c <__sfp_lock_release>:
 8015a3c:	4801      	ldr	r0, [pc, #4]	@ (8015a44 <__sfp_lock_release+0x8>)
 8015a3e:	f000 ba9b 	b.w	8015f78 <__retarget_lock_release_recursive>
 8015a42:	bf00      	nop
 8015a44:	20024bc1 	.word	0x20024bc1

08015a48 <__sinit>:
 8015a48:	b510      	push	{r4, lr}
 8015a4a:	4604      	mov	r4, r0
 8015a4c:	f7ff fff0 	bl	8015a30 <__sfp_lock_acquire>
 8015a50:	6a23      	ldr	r3, [r4, #32]
 8015a52:	b11b      	cbz	r3, 8015a5c <__sinit+0x14>
 8015a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a58:	f7ff bff0 	b.w	8015a3c <__sfp_lock_release>
 8015a5c:	4b04      	ldr	r3, [pc, #16]	@ (8015a70 <__sinit+0x28>)
 8015a5e:	6223      	str	r3, [r4, #32]
 8015a60:	4b04      	ldr	r3, [pc, #16]	@ (8015a74 <__sinit+0x2c>)
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d1f5      	bne.n	8015a54 <__sinit+0xc>
 8015a68:	f7ff ffc4 	bl	80159f4 <global_stdio_init.part.0>
 8015a6c:	e7f2      	b.n	8015a54 <__sinit+0xc>
 8015a6e:	bf00      	nop
 8015a70:	080159b5 	.word	0x080159b5
 8015a74:	20024bb8 	.word	0x20024bb8

08015a78 <_fwalk_sglue>:
 8015a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a7c:	4607      	mov	r7, r0
 8015a7e:	4688      	mov	r8, r1
 8015a80:	4614      	mov	r4, r2
 8015a82:	2600      	movs	r6, #0
 8015a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a88:	f1b9 0901 	subs.w	r9, r9, #1
 8015a8c:	d505      	bpl.n	8015a9a <_fwalk_sglue+0x22>
 8015a8e:	6824      	ldr	r4, [r4, #0]
 8015a90:	2c00      	cmp	r4, #0
 8015a92:	d1f7      	bne.n	8015a84 <_fwalk_sglue+0xc>
 8015a94:	4630      	mov	r0, r6
 8015a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a9a:	89ab      	ldrh	r3, [r5, #12]
 8015a9c:	2b01      	cmp	r3, #1
 8015a9e:	d907      	bls.n	8015ab0 <_fwalk_sglue+0x38>
 8015aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015aa4:	3301      	adds	r3, #1
 8015aa6:	d003      	beq.n	8015ab0 <_fwalk_sglue+0x38>
 8015aa8:	4629      	mov	r1, r5
 8015aaa:	4638      	mov	r0, r7
 8015aac:	47c0      	blx	r8
 8015aae:	4306      	orrs	r6, r0
 8015ab0:	3568      	adds	r5, #104	@ 0x68
 8015ab2:	e7e9      	b.n	8015a88 <_fwalk_sglue+0x10>

08015ab4 <_puts_r>:
 8015ab4:	6a03      	ldr	r3, [r0, #32]
 8015ab6:	b570      	push	{r4, r5, r6, lr}
 8015ab8:	6884      	ldr	r4, [r0, #8]
 8015aba:	4605      	mov	r5, r0
 8015abc:	460e      	mov	r6, r1
 8015abe:	b90b      	cbnz	r3, 8015ac4 <_puts_r+0x10>
 8015ac0:	f7ff ffc2 	bl	8015a48 <__sinit>
 8015ac4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015ac6:	07db      	lsls	r3, r3, #31
 8015ac8:	d405      	bmi.n	8015ad6 <_puts_r+0x22>
 8015aca:	89a3      	ldrh	r3, [r4, #12]
 8015acc:	0598      	lsls	r0, r3, #22
 8015ace:	d402      	bmi.n	8015ad6 <_puts_r+0x22>
 8015ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015ad2:	f000 fa50 	bl	8015f76 <__retarget_lock_acquire_recursive>
 8015ad6:	89a3      	ldrh	r3, [r4, #12]
 8015ad8:	0719      	lsls	r1, r3, #28
 8015ada:	d502      	bpl.n	8015ae2 <_puts_r+0x2e>
 8015adc:	6923      	ldr	r3, [r4, #16]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d135      	bne.n	8015b4e <_puts_r+0x9a>
 8015ae2:	4621      	mov	r1, r4
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	f000 f91d 	bl	8015d24 <__swsetup_r>
 8015aea:	b380      	cbz	r0, 8015b4e <_puts_r+0x9a>
 8015aec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8015af0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015af2:	07da      	lsls	r2, r3, #31
 8015af4:	d405      	bmi.n	8015b02 <_puts_r+0x4e>
 8015af6:	89a3      	ldrh	r3, [r4, #12]
 8015af8:	059b      	lsls	r3, r3, #22
 8015afa:	d402      	bmi.n	8015b02 <_puts_r+0x4e>
 8015afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015afe:	f000 fa3b 	bl	8015f78 <__retarget_lock_release_recursive>
 8015b02:	4628      	mov	r0, r5
 8015b04:	bd70      	pop	{r4, r5, r6, pc}
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	da04      	bge.n	8015b14 <_puts_r+0x60>
 8015b0a:	69a2      	ldr	r2, [r4, #24]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	dc17      	bgt.n	8015b40 <_puts_r+0x8c>
 8015b10:	290a      	cmp	r1, #10
 8015b12:	d015      	beq.n	8015b40 <_puts_r+0x8c>
 8015b14:	6823      	ldr	r3, [r4, #0]
 8015b16:	1c5a      	adds	r2, r3, #1
 8015b18:	6022      	str	r2, [r4, #0]
 8015b1a:	7019      	strb	r1, [r3, #0]
 8015b1c:	68a3      	ldr	r3, [r4, #8]
 8015b1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015b22:	3b01      	subs	r3, #1
 8015b24:	60a3      	str	r3, [r4, #8]
 8015b26:	2900      	cmp	r1, #0
 8015b28:	d1ed      	bne.n	8015b06 <_puts_r+0x52>
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	da11      	bge.n	8015b52 <_puts_r+0x9e>
 8015b2e:	4622      	mov	r2, r4
 8015b30:	210a      	movs	r1, #10
 8015b32:	4628      	mov	r0, r5
 8015b34:	f000 f8b8 	bl	8015ca8 <__swbuf_r>
 8015b38:	3001      	adds	r0, #1
 8015b3a:	d0d7      	beq.n	8015aec <_puts_r+0x38>
 8015b3c:	250a      	movs	r5, #10
 8015b3e:	e7d7      	b.n	8015af0 <_puts_r+0x3c>
 8015b40:	4622      	mov	r2, r4
 8015b42:	4628      	mov	r0, r5
 8015b44:	f000 f8b0 	bl	8015ca8 <__swbuf_r>
 8015b48:	3001      	adds	r0, #1
 8015b4a:	d1e7      	bne.n	8015b1c <_puts_r+0x68>
 8015b4c:	e7ce      	b.n	8015aec <_puts_r+0x38>
 8015b4e:	3e01      	subs	r6, #1
 8015b50:	e7e4      	b.n	8015b1c <_puts_r+0x68>
 8015b52:	6823      	ldr	r3, [r4, #0]
 8015b54:	1c5a      	adds	r2, r3, #1
 8015b56:	6022      	str	r2, [r4, #0]
 8015b58:	220a      	movs	r2, #10
 8015b5a:	701a      	strb	r2, [r3, #0]
 8015b5c:	e7ee      	b.n	8015b3c <_puts_r+0x88>
	...

08015b60 <puts>:
 8015b60:	4b02      	ldr	r3, [pc, #8]	@ (8015b6c <puts+0xc>)
 8015b62:	4601      	mov	r1, r0
 8015b64:	6818      	ldr	r0, [r3, #0]
 8015b66:	f7ff bfa5 	b.w	8015ab4 <_puts_r>
 8015b6a:	bf00      	nop
 8015b6c:	20000140 	.word	0x20000140

08015b70 <siprintf>:
 8015b70:	b40e      	push	{r1, r2, r3}
 8015b72:	b500      	push	{lr}
 8015b74:	b09c      	sub	sp, #112	@ 0x70
 8015b76:	ab1d      	add	r3, sp, #116	@ 0x74
 8015b78:	9002      	str	r0, [sp, #8]
 8015b7a:	9006      	str	r0, [sp, #24]
 8015b7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015b80:	4809      	ldr	r0, [pc, #36]	@ (8015ba8 <siprintf+0x38>)
 8015b82:	9107      	str	r1, [sp, #28]
 8015b84:	9104      	str	r1, [sp, #16]
 8015b86:	4909      	ldr	r1, [pc, #36]	@ (8015bac <siprintf+0x3c>)
 8015b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b8c:	9105      	str	r1, [sp, #20]
 8015b8e:	6800      	ldr	r0, [r0, #0]
 8015b90:	9301      	str	r3, [sp, #4]
 8015b92:	a902      	add	r1, sp, #8
 8015b94:	f002 fce6 	bl	8018564 <_svfiprintf_r>
 8015b98:	9b02      	ldr	r3, [sp, #8]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	701a      	strb	r2, [r3, #0]
 8015b9e:	b01c      	add	sp, #112	@ 0x70
 8015ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ba4:	b003      	add	sp, #12
 8015ba6:	4770      	bx	lr
 8015ba8:	20000140 	.word	0x20000140
 8015bac:	ffff0208 	.word	0xffff0208

08015bb0 <__sread>:
 8015bb0:	b510      	push	{r4, lr}
 8015bb2:	460c      	mov	r4, r1
 8015bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bb8:	f000 f98e 	bl	8015ed8 <_read_r>
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	bfab      	itete	ge
 8015bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8015bc4:	181b      	addge	r3, r3, r0
 8015bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015bca:	bfac      	ite	ge
 8015bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015bce:	81a3      	strhlt	r3, [r4, #12]
 8015bd0:	bd10      	pop	{r4, pc}

08015bd2 <__swrite>:
 8015bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bd6:	461f      	mov	r7, r3
 8015bd8:	898b      	ldrh	r3, [r1, #12]
 8015bda:	05db      	lsls	r3, r3, #23
 8015bdc:	4605      	mov	r5, r0
 8015bde:	460c      	mov	r4, r1
 8015be0:	4616      	mov	r6, r2
 8015be2:	d505      	bpl.n	8015bf0 <__swrite+0x1e>
 8015be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015be8:	2302      	movs	r3, #2
 8015bea:	2200      	movs	r2, #0
 8015bec:	f000 f962 	bl	8015eb4 <_lseek_r>
 8015bf0:	89a3      	ldrh	r3, [r4, #12]
 8015bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015bfa:	81a3      	strh	r3, [r4, #12]
 8015bfc:	4632      	mov	r2, r6
 8015bfe:	463b      	mov	r3, r7
 8015c00:	4628      	mov	r0, r5
 8015c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c06:	f000 b979 	b.w	8015efc <_write_r>

08015c0a <__sseek>:
 8015c0a:	b510      	push	{r4, lr}
 8015c0c:	460c      	mov	r4, r1
 8015c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c12:	f000 f94f 	bl	8015eb4 <_lseek_r>
 8015c16:	1c43      	adds	r3, r0, #1
 8015c18:	89a3      	ldrh	r3, [r4, #12]
 8015c1a:	bf15      	itete	ne
 8015c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015c26:	81a3      	strheq	r3, [r4, #12]
 8015c28:	bf18      	it	ne
 8015c2a:	81a3      	strhne	r3, [r4, #12]
 8015c2c:	bd10      	pop	{r4, pc}

08015c2e <__sclose>:
 8015c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c32:	f000 b8d9 	b.w	8015de8 <_close_r>

08015c36 <_vsniprintf_r>:
 8015c36:	b530      	push	{r4, r5, lr}
 8015c38:	4614      	mov	r4, r2
 8015c3a:	2c00      	cmp	r4, #0
 8015c3c:	b09b      	sub	sp, #108	@ 0x6c
 8015c3e:	4605      	mov	r5, r0
 8015c40:	461a      	mov	r2, r3
 8015c42:	da05      	bge.n	8015c50 <_vsniprintf_r+0x1a>
 8015c44:	238b      	movs	r3, #139	@ 0x8b
 8015c46:	6003      	str	r3, [r0, #0]
 8015c48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015c4c:	b01b      	add	sp, #108	@ 0x6c
 8015c4e:	bd30      	pop	{r4, r5, pc}
 8015c50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015c54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015c58:	bf14      	ite	ne
 8015c5a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8015c5e:	4623      	moveq	r3, r4
 8015c60:	9302      	str	r3, [sp, #8]
 8015c62:	9305      	str	r3, [sp, #20]
 8015c64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015c68:	9100      	str	r1, [sp, #0]
 8015c6a:	9104      	str	r1, [sp, #16]
 8015c6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015c70:	4669      	mov	r1, sp
 8015c72:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015c74:	f002 fc76 	bl	8018564 <_svfiprintf_r>
 8015c78:	1c43      	adds	r3, r0, #1
 8015c7a:	bfbc      	itt	lt
 8015c7c:	238b      	movlt	r3, #139	@ 0x8b
 8015c7e:	602b      	strlt	r3, [r5, #0]
 8015c80:	2c00      	cmp	r4, #0
 8015c82:	d0e3      	beq.n	8015c4c <_vsniprintf_r+0x16>
 8015c84:	9b00      	ldr	r3, [sp, #0]
 8015c86:	2200      	movs	r2, #0
 8015c88:	701a      	strb	r2, [r3, #0]
 8015c8a:	e7df      	b.n	8015c4c <_vsniprintf_r+0x16>

08015c8c <vsniprintf>:
 8015c8c:	b507      	push	{r0, r1, r2, lr}
 8015c8e:	9300      	str	r3, [sp, #0]
 8015c90:	4613      	mov	r3, r2
 8015c92:	460a      	mov	r2, r1
 8015c94:	4601      	mov	r1, r0
 8015c96:	4803      	ldr	r0, [pc, #12]	@ (8015ca4 <vsniprintf+0x18>)
 8015c98:	6800      	ldr	r0, [r0, #0]
 8015c9a:	f7ff ffcc 	bl	8015c36 <_vsniprintf_r>
 8015c9e:	b003      	add	sp, #12
 8015ca0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ca4:	20000140 	.word	0x20000140

08015ca8 <__swbuf_r>:
 8015ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015caa:	460e      	mov	r6, r1
 8015cac:	4614      	mov	r4, r2
 8015cae:	4605      	mov	r5, r0
 8015cb0:	b118      	cbz	r0, 8015cba <__swbuf_r+0x12>
 8015cb2:	6a03      	ldr	r3, [r0, #32]
 8015cb4:	b90b      	cbnz	r3, 8015cba <__swbuf_r+0x12>
 8015cb6:	f7ff fec7 	bl	8015a48 <__sinit>
 8015cba:	69a3      	ldr	r3, [r4, #24]
 8015cbc:	60a3      	str	r3, [r4, #8]
 8015cbe:	89a3      	ldrh	r3, [r4, #12]
 8015cc0:	071a      	lsls	r2, r3, #28
 8015cc2:	d501      	bpl.n	8015cc8 <__swbuf_r+0x20>
 8015cc4:	6923      	ldr	r3, [r4, #16]
 8015cc6:	b943      	cbnz	r3, 8015cda <__swbuf_r+0x32>
 8015cc8:	4621      	mov	r1, r4
 8015cca:	4628      	mov	r0, r5
 8015ccc:	f000 f82a 	bl	8015d24 <__swsetup_r>
 8015cd0:	b118      	cbz	r0, 8015cda <__swbuf_r+0x32>
 8015cd2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015cd6:	4638      	mov	r0, r7
 8015cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cda:	6823      	ldr	r3, [r4, #0]
 8015cdc:	6922      	ldr	r2, [r4, #16]
 8015cde:	1a98      	subs	r0, r3, r2
 8015ce0:	6963      	ldr	r3, [r4, #20]
 8015ce2:	b2f6      	uxtb	r6, r6
 8015ce4:	4283      	cmp	r3, r0
 8015ce6:	4637      	mov	r7, r6
 8015ce8:	dc05      	bgt.n	8015cf6 <__swbuf_r+0x4e>
 8015cea:	4621      	mov	r1, r4
 8015cec:	4628      	mov	r0, r5
 8015cee:	f002 fdb9 	bl	8018864 <_fflush_r>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	d1ed      	bne.n	8015cd2 <__swbuf_r+0x2a>
 8015cf6:	68a3      	ldr	r3, [r4, #8]
 8015cf8:	3b01      	subs	r3, #1
 8015cfa:	60a3      	str	r3, [r4, #8]
 8015cfc:	6823      	ldr	r3, [r4, #0]
 8015cfe:	1c5a      	adds	r2, r3, #1
 8015d00:	6022      	str	r2, [r4, #0]
 8015d02:	701e      	strb	r6, [r3, #0]
 8015d04:	6962      	ldr	r2, [r4, #20]
 8015d06:	1c43      	adds	r3, r0, #1
 8015d08:	429a      	cmp	r2, r3
 8015d0a:	d004      	beq.n	8015d16 <__swbuf_r+0x6e>
 8015d0c:	89a3      	ldrh	r3, [r4, #12]
 8015d0e:	07db      	lsls	r3, r3, #31
 8015d10:	d5e1      	bpl.n	8015cd6 <__swbuf_r+0x2e>
 8015d12:	2e0a      	cmp	r6, #10
 8015d14:	d1df      	bne.n	8015cd6 <__swbuf_r+0x2e>
 8015d16:	4621      	mov	r1, r4
 8015d18:	4628      	mov	r0, r5
 8015d1a:	f002 fda3 	bl	8018864 <_fflush_r>
 8015d1e:	2800      	cmp	r0, #0
 8015d20:	d0d9      	beq.n	8015cd6 <__swbuf_r+0x2e>
 8015d22:	e7d6      	b.n	8015cd2 <__swbuf_r+0x2a>

08015d24 <__swsetup_r>:
 8015d24:	b538      	push	{r3, r4, r5, lr}
 8015d26:	4b29      	ldr	r3, [pc, #164]	@ (8015dcc <__swsetup_r+0xa8>)
 8015d28:	4605      	mov	r5, r0
 8015d2a:	6818      	ldr	r0, [r3, #0]
 8015d2c:	460c      	mov	r4, r1
 8015d2e:	b118      	cbz	r0, 8015d38 <__swsetup_r+0x14>
 8015d30:	6a03      	ldr	r3, [r0, #32]
 8015d32:	b90b      	cbnz	r3, 8015d38 <__swsetup_r+0x14>
 8015d34:	f7ff fe88 	bl	8015a48 <__sinit>
 8015d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d3c:	0719      	lsls	r1, r3, #28
 8015d3e:	d422      	bmi.n	8015d86 <__swsetup_r+0x62>
 8015d40:	06da      	lsls	r2, r3, #27
 8015d42:	d407      	bmi.n	8015d54 <__swsetup_r+0x30>
 8015d44:	2209      	movs	r2, #9
 8015d46:	602a      	str	r2, [r5, #0]
 8015d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d4c:	81a3      	strh	r3, [r4, #12]
 8015d4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d52:	e033      	b.n	8015dbc <__swsetup_r+0x98>
 8015d54:	0758      	lsls	r0, r3, #29
 8015d56:	d512      	bpl.n	8015d7e <__swsetup_r+0x5a>
 8015d58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015d5a:	b141      	cbz	r1, 8015d6e <__swsetup_r+0x4a>
 8015d5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015d60:	4299      	cmp	r1, r3
 8015d62:	d002      	beq.n	8015d6a <__swsetup_r+0x46>
 8015d64:	4628      	mov	r0, r5
 8015d66:	f000 ff6b 	bl	8016c40 <_free_r>
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8015d6e:	89a3      	ldrh	r3, [r4, #12]
 8015d70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015d74:	81a3      	strh	r3, [r4, #12]
 8015d76:	2300      	movs	r3, #0
 8015d78:	6063      	str	r3, [r4, #4]
 8015d7a:	6923      	ldr	r3, [r4, #16]
 8015d7c:	6023      	str	r3, [r4, #0]
 8015d7e:	89a3      	ldrh	r3, [r4, #12]
 8015d80:	f043 0308 	orr.w	r3, r3, #8
 8015d84:	81a3      	strh	r3, [r4, #12]
 8015d86:	6923      	ldr	r3, [r4, #16]
 8015d88:	b94b      	cbnz	r3, 8015d9e <__swsetup_r+0x7a>
 8015d8a:	89a3      	ldrh	r3, [r4, #12]
 8015d8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015d94:	d003      	beq.n	8015d9e <__swsetup_r+0x7a>
 8015d96:	4621      	mov	r1, r4
 8015d98:	4628      	mov	r0, r5
 8015d9a:	f002 fdb1 	bl	8018900 <__smakebuf_r>
 8015d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015da2:	f013 0201 	ands.w	r2, r3, #1
 8015da6:	d00a      	beq.n	8015dbe <__swsetup_r+0x9a>
 8015da8:	2200      	movs	r2, #0
 8015daa:	60a2      	str	r2, [r4, #8]
 8015dac:	6962      	ldr	r2, [r4, #20]
 8015dae:	4252      	negs	r2, r2
 8015db0:	61a2      	str	r2, [r4, #24]
 8015db2:	6922      	ldr	r2, [r4, #16]
 8015db4:	b942      	cbnz	r2, 8015dc8 <__swsetup_r+0xa4>
 8015db6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015dba:	d1c5      	bne.n	8015d48 <__swsetup_r+0x24>
 8015dbc:	bd38      	pop	{r3, r4, r5, pc}
 8015dbe:	0799      	lsls	r1, r3, #30
 8015dc0:	bf58      	it	pl
 8015dc2:	6962      	ldrpl	r2, [r4, #20]
 8015dc4:	60a2      	str	r2, [r4, #8]
 8015dc6:	e7f4      	b.n	8015db2 <__swsetup_r+0x8e>
 8015dc8:	2000      	movs	r0, #0
 8015dca:	e7f7      	b.n	8015dbc <__swsetup_r+0x98>
 8015dcc:	20000140 	.word	0x20000140

08015dd0 <memset>:
 8015dd0:	4402      	add	r2, r0
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	4293      	cmp	r3, r2
 8015dd6:	d100      	bne.n	8015dda <memset+0xa>
 8015dd8:	4770      	bx	lr
 8015dda:	f803 1b01 	strb.w	r1, [r3], #1
 8015dde:	e7f9      	b.n	8015dd4 <memset+0x4>

08015de0 <_localeconv_r>:
 8015de0:	4800      	ldr	r0, [pc, #0]	@ (8015de4 <_localeconv_r+0x4>)
 8015de2:	4770      	bx	lr
 8015de4:	20000280 	.word	0x20000280

08015de8 <_close_r>:
 8015de8:	b538      	push	{r3, r4, r5, lr}
 8015dea:	4d06      	ldr	r5, [pc, #24]	@ (8015e04 <_close_r+0x1c>)
 8015dec:	2300      	movs	r3, #0
 8015dee:	4604      	mov	r4, r0
 8015df0:	4608      	mov	r0, r1
 8015df2:	602b      	str	r3, [r5, #0]
 8015df4:	f7ed fd7e 	bl	80038f4 <_close>
 8015df8:	1c43      	adds	r3, r0, #1
 8015dfa:	d102      	bne.n	8015e02 <_close_r+0x1a>
 8015dfc:	682b      	ldr	r3, [r5, #0]
 8015dfe:	b103      	cbz	r3, 8015e02 <_close_r+0x1a>
 8015e00:	6023      	str	r3, [r4, #0]
 8015e02:	bd38      	pop	{r3, r4, r5, pc}
 8015e04:	20024bbc 	.word	0x20024bbc

08015e08 <_reclaim_reent>:
 8015e08:	4b29      	ldr	r3, [pc, #164]	@ (8015eb0 <_reclaim_reent+0xa8>)
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	4283      	cmp	r3, r0
 8015e0e:	b570      	push	{r4, r5, r6, lr}
 8015e10:	4604      	mov	r4, r0
 8015e12:	d04b      	beq.n	8015eac <_reclaim_reent+0xa4>
 8015e14:	69c3      	ldr	r3, [r0, #28]
 8015e16:	b1ab      	cbz	r3, 8015e44 <_reclaim_reent+0x3c>
 8015e18:	68db      	ldr	r3, [r3, #12]
 8015e1a:	b16b      	cbz	r3, 8015e38 <_reclaim_reent+0x30>
 8015e1c:	2500      	movs	r5, #0
 8015e1e:	69e3      	ldr	r3, [r4, #28]
 8015e20:	68db      	ldr	r3, [r3, #12]
 8015e22:	5959      	ldr	r1, [r3, r5]
 8015e24:	2900      	cmp	r1, #0
 8015e26:	d13b      	bne.n	8015ea0 <_reclaim_reent+0x98>
 8015e28:	3504      	adds	r5, #4
 8015e2a:	2d80      	cmp	r5, #128	@ 0x80
 8015e2c:	d1f7      	bne.n	8015e1e <_reclaim_reent+0x16>
 8015e2e:	69e3      	ldr	r3, [r4, #28]
 8015e30:	4620      	mov	r0, r4
 8015e32:	68d9      	ldr	r1, [r3, #12]
 8015e34:	f000 ff04 	bl	8016c40 <_free_r>
 8015e38:	69e3      	ldr	r3, [r4, #28]
 8015e3a:	6819      	ldr	r1, [r3, #0]
 8015e3c:	b111      	cbz	r1, 8015e44 <_reclaim_reent+0x3c>
 8015e3e:	4620      	mov	r0, r4
 8015e40:	f000 fefe 	bl	8016c40 <_free_r>
 8015e44:	6961      	ldr	r1, [r4, #20]
 8015e46:	b111      	cbz	r1, 8015e4e <_reclaim_reent+0x46>
 8015e48:	4620      	mov	r0, r4
 8015e4a:	f000 fef9 	bl	8016c40 <_free_r>
 8015e4e:	69e1      	ldr	r1, [r4, #28]
 8015e50:	b111      	cbz	r1, 8015e58 <_reclaim_reent+0x50>
 8015e52:	4620      	mov	r0, r4
 8015e54:	f000 fef4 	bl	8016c40 <_free_r>
 8015e58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015e5a:	b111      	cbz	r1, 8015e62 <_reclaim_reent+0x5a>
 8015e5c:	4620      	mov	r0, r4
 8015e5e:	f000 feef 	bl	8016c40 <_free_r>
 8015e62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015e64:	b111      	cbz	r1, 8015e6c <_reclaim_reent+0x64>
 8015e66:	4620      	mov	r0, r4
 8015e68:	f000 feea 	bl	8016c40 <_free_r>
 8015e6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015e6e:	b111      	cbz	r1, 8015e76 <_reclaim_reent+0x6e>
 8015e70:	4620      	mov	r0, r4
 8015e72:	f000 fee5 	bl	8016c40 <_free_r>
 8015e76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8015e78:	b111      	cbz	r1, 8015e80 <_reclaim_reent+0x78>
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	f000 fee0 	bl	8016c40 <_free_r>
 8015e80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8015e82:	b111      	cbz	r1, 8015e8a <_reclaim_reent+0x82>
 8015e84:	4620      	mov	r0, r4
 8015e86:	f000 fedb 	bl	8016c40 <_free_r>
 8015e8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015e8c:	b111      	cbz	r1, 8015e94 <_reclaim_reent+0x8c>
 8015e8e:	4620      	mov	r0, r4
 8015e90:	f000 fed6 	bl	8016c40 <_free_r>
 8015e94:	6a23      	ldr	r3, [r4, #32]
 8015e96:	b14b      	cbz	r3, 8015eac <_reclaim_reent+0xa4>
 8015e98:	4620      	mov	r0, r4
 8015e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e9e:	4718      	bx	r3
 8015ea0:	680e      	ldr	r6, [r1, #0]
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	f000 fecc 	bl	8016c40 <_free_r>
 8015ea8:	4631      	mov	r1, r6
 8015eaa:	e7bb      	b.n	8015e24 <_reclaim_reent+0x1c>
 8015eac:	bd70      	pop	{r4, r5, r6, pc}
 8015eae:	bf00      	nop
 8015eb0:	20000140 	.word	0x20000140

08015eb4 <_lseek_r>:
 8015eb4:	b538      	push	{r3, r4, r5, lr}
 8015eb6:	4d07      	ldr	r5, [pc, #28]	@ (8015ed4 <_lseek_r+0x20>)
 8015eb8:	4604      	mov	r4, r0
 8015eba:	4608      	mov	r0, r1
 8015ebc:	4611      	mov	r1, r2
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	602a      	str	r2, [r5, #0]
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	f7ed fd3d 	bl	8003942 <_lseek>
 8015ec8:	1c43      	adds	r3, r0, #1
 8015eca:	d102      	bne.n	8015ed2 <_lseek_r+0x1e>
 8015ecc:	682b      	ldr	r3, [r5, #0]
 8015ece:	b103      	cbz	r3, 8015ed2 <_lseek_r+0x1e>
 8015ed0:	6023      	str	r3, [r4, #0]
 8015ed2:	bd38      	pop	{r3, r4, r5, pc}
 8015ed4:	20024bbc 	.word	0x20024bbc

08015ed8 <_read_r>:
 8015ed8:	b538      	push	{r3, r4, r5, lr}
 8015eda:	4d07      	ldr	r5, [pc, #28]	@ (8015ef8 <_read_r+0x20>)
 8015edc:	4604      	mov	r4, r0
 8015ede:	4608      	mov	r0, r1
 8015ee0:	4611      	mov	r1, r2
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	602a      	str	r2, [r5, #0]
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	f7ed fccb 	bl	8003882 <_read>
 8015eec:	1c43      	adds	r3, r0, #1
 8015eee:	d102      	bne.n	8015ef6 <_read_r+0x1e>
 8015ef0:	682b      	ldr	r3, [r5, #0]
 8015ef2:	b103      	cbz	r3, 8015ef6 <_read_r+0x1e>
 8015ef4:	6023      	str	r3, [r4, #0]
 8015ef6:	bd38      	pop	{r3, r4, r5, pc}
 8015ef8:	20024bbc 	.word	0x20024bbc

08015efc <_write_r>:
 8015efc:	b538      	push	{r3, r4, r5, lr}
 8015efe:	4d07      	ldr	r5, [pc, #28]	@ (8015f1c <_write_r+0x20>)
 8015f00:	4604      	mov	r4, r0
 8015f02:	4608      	mov	r0, r1
 8015f04:	4611      	mov	r1, r2
 8015f06:	2200      	movs	r2, #0
 8015f08:	602a      	str	r2, [r5, #0]
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	f7ed fcd6 	bl	80038bc <_write>
 8015f10:	1c43      	adds	r3, r0, #1
 8015f12:	d102      	bne.n	8015f1a <_write_r+0x1e>
 8015f14:	682b      	ldr	r3, [r5, #0]
 8015f16:	b103      	cbz	r3, 8015f1a <_write_r+0x1e>
 8015f18:	6023      	str	r3, [r4, #0]
 8015f1a:	bd38      	pop	{r3, r4, r5, pc}
 8015f1c:	20024bbc 	.word	0x20024bbc

08015f20 <__errno>:
 8015f20:	4b01      	ldr	r3, [pc, #4]	@ (8015f28 <__errno+0x8>)
 8015f22:	6818      	ldr	r0, [r3, #0]
 8015f24:	4770      	bx	lr
 8015f26:	bf00      	nop
 8015f28:	20000140 	.word	0x20000140

08015f2c <__libc_init_array>:
 8015f2c:	b570      	push	{r4, r5, r6, lr}
 8015f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8015f64 <__libc_init_array+0x38>)
 8015f30:	4c0d      	ldr	r4, [pc, #52]	@ (8015f68 <__libc_init_array+0x3c>)
 8015f32:	1b64      	subs	r4, r4, r5
 8015f34:	10a4      	asrs	r4, r4, #2
 8015f36:	2600      	movs	r6, #0
 8015f38:	42a6      	cmp	r6, r4
 8015f3a:	d109      	bne.n	8015f50 <__libc_init_array+0x24>
 8015f3c:	4d0b      	ldr	r5, [pc, #44]	@ (8015f6c <__libc_init_array+0x40>)
 8015f3e:	4c0c      	ldr	r4, [pc, #48]	@ (8015f70 <__libc_init_array+0x44>)
 8015f40:	f005 fcc6 	bl	801b8d0 <_init>
 8015f44:	1b64      	subs	r4, r4, r5
 8015f46:	10a4      	asrs	r4, r4, #2
 8015f48:	2600      	movs	r6, #0
 8015f4a:	42a6      	cmp	r6, r4
 8015f4c:	d105      	bne.n	8015f5a <__libc_init_array+0x2e>
 8015f4e:	bd70      	pop	{r4, r5, r6, pc}
 8015f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f54:	4798      	blx	r3
 8015f56:	3601      	adds	r6, #1
 8015f58:	e7ee      	b.n	8015f38 <__libc_init_array+0xc>
 8015f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f5e:	4798      	blx	r3
 8015f60:	3601      	adds	r6, #1
 8015f62:	e7f2      	b.n	8015f4a <__libc_init_array+0x1e>
 8015f64:	0802f6e0 	.word	0x0802f6e0
 8015f68:	0802f6e0 	.word	0x0802f6e0
 8015f6c:	0802f6e0 	.word	0x0802f6e0
 8015f70:	0802f6e4 	.word	0x0802f6e4

08015f74 <__retarget_lock_init_recursive>:
 8015f74:	4770      	bx	lr

08015f76 <__retarget_lock_acquire_recursive>:
 8015f76:	4770      	bx	lr

08015f78 <__retarget_lock_release_recursive>:
 8015f78:	4770      	bx	lr

08015f7a <memcpy>:
 8015f7a:	440a      	add	r2, r1
 8015f7c:	4291      	cmp	r1, r2
 8015f7e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015f82:	d100      	bne.n	8015f86 <memcpy+0xc>
 8015f84:	4770      	bx	lr
 8015f86:	b510      	push	{r4, lr}
 8015f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f90:	4291      	cmp	r1, r2
 8015f92:	d1f9      	bne.n	8015f88 <memcpy+0xe>
 8015f94:	bd10      	pop	{r4, pc}
	...

08015f98 <nanf>:
 8015f98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015fa0 <nanf+0x8>
 8015f9c:	4770      	bx	lr
 8015f9e:	bf00      	nop
 8015fa0:	7fc00000 	.word	0x7fc00000

08015fa4 <quorem>:
 8015fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa8:	6903      	ldr	r3, [r0, #16]
 8015faa:	690c      	ldr	r4, [r1, #16]
 8015fac:	42a3      	cmp	r3, r4
 8015fae:	4607      	mov	r7, r0
 8015fb0:	db7e      	blt.n	80160b0 <quorem+0x10c>
 8015fb2:	3c01      	subs	r4, #1
 8015fb4:	f101 0814 	add.w	r8, r1, #20
 8015fb8:	00a3      	lsls	r3, r4, #2
 8015fba:	f100 0514 	add.w	r5, r0, #20
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015fc4:	9301      	str	r3, [sp, #4]
 8015fc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015fca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015fce:	3301      	adds	r3, #1
 8015fd0:	429a      	cmp	r2, r3
 8015fd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015fd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8015fda:	d32e      	bcc.n	801603a <quorem+0x96>
 8015fdc:	f04f 0a00 	mov.w	sl, #0
 8015fe0:	46c4      	mov	ip, r8
 8015fe2:	46ae      	mov	lr, r5
 8015fe4:	46d3      	mov	fp, sl
 8015fe6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015fea:	b298      	uxth	r0, r3
 8015fec:	fb06 a000 	mla	r0, r6, r0, sl
 8015ff0:	0c02      	lsrs	r2, r0, #16
 8015ff2:	0c1b      	lsrs	r3, r3, #16
 8015ff4:	fb06 2303 	mla	r3, r6, r3, r2
 8015ff8:	f8de 2000 	ldr.w	r2, [lr]
 8015ffc:	b280      	uxth	r0, r0
 8015ffe:	b292      	uxth	r2, r2
 8016000:	1a12      	subs	r2, r2, r0
 8016002:	445a      	add	r2, fp
 8016004:	f8de 0000 	ldr.w	r0, [lr]
 8016008:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801600c:	b29b      	uxth	r3, r3
 801600e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8016012:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016016:	b292      	uxth	r2, r2
 8016018:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801601c:	45e1      	cmp	r9, ip
 801601e:	f84e 2b04 	str.w	r2, [lr], #4
 8016022:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016026:	d2de      	bcs.n	8015fe6 <quorem+0x42>
 8016028:	9b00      	ldr	r3, [sp, #0]
 801602a:	58eb      	ldr	r3, [r5, r3]
 801602c:	b92b      	cbnz	r3, 801603a <quorem+0x96>
 801602e:	9b01      	ldr	r3, [sp, #4]
 8016030:	3b04      	subs	r3, #4
 8016032:	429d      	cmp	r5, r3
 8016034:	461a      	mov	r2, r3
 8016036:	d32f      	bcc.n	8016098 <quorem+0xf4>
 8016038:	613c      	str	r4, [r7, #16]
 801603a:	4638      	mov	r0, r7
 801603c:	f001 f9c4 	bl	80173c8 <__mcmp>
 8016040:	2800      	cmp	r0, #0
 8016042:	db25      	blt.n	8016090 <quorem+0xec>
 8016044:	4629      	mov	r1, r5
 8016046:	2000      	movs	r0, #0
 8016048:	f858 2b04 	ldr.w	r2, [r8], #4
 801604c:	f8d1 c000 	ldr.w	ip, [r1]
 8016050:	fa1f fe82 	uxth.w	lr, r2
 8016054:	fa1f f38c 	uxth.w	r3, ip
 8016058:	eba3 030e 	sub.w	r3, r3, lr
 801605c:	4403      	add	r3, r0
 801605e:	0c12      	lsrs	r2, r2, #16
 8016060:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016064:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8016068:	b29b      	uxth	r3, r3
 801606a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801606e:	45c1      	cmp	r9, r8
 8016070:	f841 3b04 	str.w	r3, [r1], #4
 8016074:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016078:	d2e6      	bcs.n	8016048 <quorem+0xa4>
 801607a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801607e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016082:	b922      	cbnz	r2, 801608e <quorem+0xea>
 8016084:	3b04      	subs	r3, #4
 8016086:	429d      	cmp	r5, r3
 8016088:	461a      	mov	r2, r3
 801608a:	d30b      	bcc.n	80160a4 <quorem+0x100>
 801608c:	613c      	str	r4, [r7, #16]
 801608e:	3601      	adds	r6, #1
 8016090:	4630      	mov	r0, r6
 8016092:	b003      	add	sp, #12
 8016094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016098:	6812      	ldr	r2, [r2, #0]
 801609a:	3b04      	subs	r3, #4
 801609c:	2a00      	cmp	r2, #0
 801609e:	d1cb      	bne.n	8016038 <quorem+0x94>
 80160a0:	3c01      	subs	r4, #1
 80160a2:	e7c6      	b.n	8016032 <quorem+0x8e>
 80160a4:	6812      	ldr	r2, [r2, #0]
 80160a6:	3b04      	subs	r3, #4
 80160a8:	2a00      	cmp	r2, #0
 80160aa:	d1ef      	bne.n	801608c <quorem+0xe8>
 80160ac:	3c01      	subs	r4, #1
 80160ae:	e7ea      	b.n	8016086 <quorem+0xe2>
 80160b0:	2000      	movs	r0, #0
 80160b2:	e7ee      	b.n	8016092 <quorem+0xee>
 80160b4:	0000      	movs	r0, r0
	...

080160b8 <_dtoa_r>:
 80160b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160bc:	69c7      	ldr	r7, [r0, #28]
 80160be:	b099      	sub	sp, #100	@ 0x64
 80160c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80160c4:	ec55 4b10 	vmov	r4, r5, d0
 80160c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80160ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80160cc:	4683      	mov	fp, r0
 80160ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80160d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80160d2:	b97f      	cbnz	r7, 80160f4 <_dtoa_r+0x3c>
 80160d4:	2010      	movs	r0, #16
 80160d6:	f000 fdfd 	bl	8016cd4 <malloc>
 80160da:	4602      	mov	r2, r0
 80160dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80160e0:	b920      	cbnz	r0, 80160ec <_dtoa_r+0x34>
 80160e2:	4ba7      	ldr	r3, [pc, #668]	@ (8016380 <_dtoa_r+0x2c8>)
 80160e4:	21ef      	movs	r1, #239	@ 0xef
 80160e6:	48a7      	ldr	r0, [pc, #668]	@ (8016384 <_dtoa_r+0x2cc>)
 80160e8:	f002 fcae 	bl	8018a48 <__assert_func>
 80160ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80160f0:	6007      	str	r7, [r0, #0]
 80160f2:	60c7      	str	r7, [r0, #12]
 80160f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80160f8:	6819      	ldr	r1, [r3, #0]
 80160fa:	b159      	cbz	r1, 8016114 <_dtoa_r+0x5c>
 80160fc:	685a      	ldr	r2, [r3, #4]
 80160fe:	604a      	str	r2, [r1, #4]
 8016100:	2301      	movs	r3, #1
 8016102:	4093      	lsls	r3, r2
 8016104:	608b      	str	r3, [r1, #8]
 8016106:	4658      	mov	r0, fp
 8016108:	f000 feda 	bl	8016ec0 <_Bfree>
 801610c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016110:	2200      	movs	r2, #0
 8016112:	601a      	str	r2, [r3, #0]
 8016114:	1e2b      	subs	r3, r5, #0
 8016116:	bfb9      	ittee	lt
 8016118:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801611c:	9303      	strlt	r3, [sp, #12]
 801611e:	2300      	movge	r3, #0
 8016120:	6033      	strge	r3, [r6, #0]
 8016122:	9f03      	ldr	r7, [sp, #12]
 8016124:	4b98      	ldr	r3, [pc, #608]	@ (8016388 <_dtoa_r+0x2d0>)
 8016126:	bfbc      	itt	lt
 8016128:	2201      	movlt	r2, #1
 801612a:	6032      	strlt	r2, [r6, #0]
 801612c:	43bb      	bics	r3, r7
 801612e:	d112      	bne.n	8016156 <_dtoa_r+0x9e>
 8016130:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016132:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016136:	6013      	str	r3, [r2, #0]
 8016138:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801613c:	4323      	orrs	r3, r4
 801613e:	f000 854d 	beq.w	8016bdc <_dtoa_r+0xb24>
 8016142:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016144:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801639c <_dtoa_r+0x2e4>
 8016148:	2b00      	cmp	r3, #0
 801614a:	f000 854f 	beq.w	8016bec <_dtoa_r+0xb34>
 801614e:	f10a 0303 	add.w	r3, sl, #3
 8016152:	f000 bd49 	b.w	8016be8 <_dtoa_r+0xb30>
 8016156:	ed9d 7b02 	vldr	d7, [sp, #8]
 801615a:	2200      	movs	r2, #0
 801615c:	ec51 0b17 	vmov	r0, r1, d7
 8016160:	2300      	movs	r3, #0
 8016162:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8016166:	f7ea fcb7 	bl	8000ad8 <__aeabi_dcmpeq>
 801616a:	4680      	mov	r8, r0
 801616c:	b158      	cbz	r0, 8016186 <_dtoa_r+0xce>
 801616e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016170:	2301      	movs	r3, #1
 8016172:	6013      	str	r3, [r2, #0]
 8016174:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016176:	b113      	cbz	r3, 801617e <_dtoa_r+0xc6>
 8016178:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801617a:	4b84      	ldr	r3, [pc, #528]	@ (801638c <_dtoa_r+0x2d4>)
 801617c:	6013      	str	r3, [r2, #0]
 801617e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80163a0 <_dtoa_r+0x2e8>
 8016182:	f000 bd33 	b.w	8016bec <_dtoa_r+0xb34>
 8016186:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801618a:	aa16      	add	r2, sp, #88	@ 0x58
 801618c:	a917      	add	r1, sp, #92	@ 0x5c
 801618e:	4658      	mov	r0, fp
 8016190:	f001 fa3a 	bl	8017608 <__d2b>
 8016194:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8016198:	4681      	mov	r9, r0
 801619a:	2e00      	cmp	r6, #0
 801619c:	d077      	beq.n	801628e <_dtoa_r+0x1d6>
 801619e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80161a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80161a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80161a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80161ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80161b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80161b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80161b8:	4619      	mov	r1, r3
 80161ba:	2200      	movs	r2, #0
 80161bc:	4b74      	ldr	r3, [pc, #464]	@ (8016390 <_dtoa_r+0x2d8>)
 80161be:	f7ea f86b 	bl	8000298 <__aeabi_dsub>
 80161c2:	a369      	add	r3, pc, #420	@ (adr r3, 8016368 <_dtoa_r+0x2b0>)
 80161c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c8:	f7ea fa1e 	bl	8000608 <__aeabi_dmul>
 80161cc:	a368      	add	r3, pc, #416	@ (adr r3, 8016370 <_dtoa_r+0x2b8>)
 80161ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d2:	f7ea f863 	bl	800029c <__adddf3>
 80161d6:	4604      	mov	r4, r0
 80161d8:	4630      	mov	r0, r6
 80161da:	460d      	mov	r5, r1
 80161dc:	f7ea f9aa 	bl	8000534 <__aeabi_i2d>
 80161e0:	a365      	add	r3, pc, #404	@ (adr r3, 8016378 <_dtoa_r+0x2c0>)
 80161e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e6:	f7ea fa0f 	bl	8000608 <__aeabi_dmul>
 80161ea:	4602      	mov	r2, r0
 80161ec:	460b      	mov	r3, r1
 80161ee:	4620      	mov	r0, r4
 80161f0:	4629      	mov	r1, r5
 80161f2:	f7ea f853 	bl	800029c <__adddf3>
 80161f6:	4604      	mov	r4, r0
 80161f8:	460d      	mov	r5, r1
 80161fa:	f7ea fcb5 	bl	8000b68 <__aeabi_d2iz>
 80161fe:	2200      	movs	r2, #0
 8016200:	4607      	mov	r7, r0
 8016202:	2300      	movs	r3, #0
 8016204:	4620      	mov	r0, r4
 8016206:	4629      	mov	r1, r5
 8016208:	f7ea fc70 	bl	8000aec <__aeabi_dcmplt>
 801620c:	b140      	cbz	r0, 8016220 <_dtoa_r+0x168>
 801620e:	4638      	mov	r0, r7
 8016210:	f7ea f990 	bl	8000534 <__aeabi_i2d>
 8016214:	4622      	mov	r2, r4
 8016216:	462b      	mov	r3, r5
 8016218:	f7ea fc5e 	bl	8000ad8 <__aeabi_dcmpeq>
 801621c:	b900      	cbnz	r0, 8016220 <_dtoa_r+0x168>
 801621e:	3f01      	subs	r7, #1
 8016220:	2f16      	cmp	r7, #22
 8016222:	d851      	bhi.n	80162c8 <_dtoa_r+0x210>
 8016224:	4b5b      	ldr	r3, [pc, #364]	@ (8016394 <_dtoa_r+0x2dc>)
 8016226:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801622e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016232:	f7ea fc5b 	bl	8000aec <__aeabi_dcmplt>
 8016236:	2800      	cmp	r0, #0
 8016238:	d048      	beq.n	80162cc <_dtoa_r+0x214>
 801623a:	3f01      	subs	r7, #1
 801623c:	2300      	movs	r3, #0
 801623e:	9312      	str	r3, [sp, #72]	@ 0x48
 8016240:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016242:	1b9b      	subs	r3, r3, r6
 8016244:	1e5a      	subs	r2, r3, #1
 8016246:	bf44      	itt	mi
 8016248:	f1c3 0801 	rsbmi	r8, r3, #1
 801624c:	2300      	movmi	r3, #0
 801624e:	9208      	str	r2, [sp, #32]
 8016250:	bf54      	ite	pl
 8016252:	f04f 0800 	movpl.w	r8, #0
 8016256:	9308      	strmi	r3, [sp, #32]
 8016258:	2f00      	cmp	r7, #0
 801625a:	db39      	blt.n	80162d0 <_dtoa_r+0x218>
 801625c:	9b08      	ldr	r3, [sp, #32]
 801625e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8016260:	443b      	add	r3, r7
 8016262:	9308      	str	r3, [sp, #32]
 8016264:	2300      	movs	r3, #0
 8016266:	930a      	str	r3, [sp, #40]	@ 0x28
 8016268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801626a:	2b09      	cmp	r3, #9
 801626c:	d864      	bhi.n	8016338 <_dtoa_r+0x280>
 801626e:	2b05      	cmp	r3, #5
 8016270:	bfc4      	itt	gt
 8016272:	3b04      	subgt	r3, #4
 8016274:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8016276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016278:	f1a3 0302 	sub.w	r3, r3, #2
 801627c:	bfcc      	ite	gt
 801627e:	2400      	movgt	r4, #0
 8016280:	2401      	movle	r4, #1
 8016282:	2b03      	cmp	r3, #3
 8016284:	d863      	bhi.n	801634e <_dtoa_r+0x296>
 8016286:	e8df f003 	tbb	[pc, r3]
 801628a:	372a      	.short	0x372a
 801628c:	5535      	.short	0x5535
 801628e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8016292:	441e      	add	r6, r3
 8016294:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8016298:	2b20      	cmp	r3, #32
 801629a:	bfc1      	itttt	gt
 801629c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80162a0:	409f      	lslgt	r7, r3
 80162a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80162a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80162aa:	bfd6      	itet	le
 80162ac:	f1c3 0320 	rsble	r3, r3, #32
 80162b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80162b4:	fa04 f003 	lslle.w	r0, r4, r3
 80162b8:	f7ea f92c 	bl	8000514 <__aeabi_ui2d>
 80162bc:	2201      	movs	r2, #1
 80162be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80162c2:	3e01      	subs	r6, #1
 80162c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80162c6:	e777      	b.n	80161b8 <_dtoa_r+0x100>
 80162c8:	2301      	movs	r3, #1
 80162ca:	e7b8      	b.n	801623e <_dtoa_r+0x186>
 80162cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80162ce:	e7b7      	b.n	8016240 <_dtoa_r+0x188>
 80162d0:	427b      	negs	r3, r7
 80162d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80162d4:	2300      	movs	r3, #0
 80162d6:	eba8 0807 	sub.w	r8, r8, r7
 80162da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80162dc:	e7c4      	b.n	8016268 <_dtoa_r+0x1b0>
 80162de:	2300      	movs	r3, #0
 80162e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80162e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	dc35      	bgt.n	8016354 <_dtoa_r+0x29c>
 80162e8:	2301      	movs	r3, #1
 80162ea:	9300      	str	r3, [sp, #0]
 80162ec:	9307      	str	r3, [sp, #28]
 80162ee:	461a      	mov	r2, r3
 80162f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80162f2:	e00b      	b.n	801630c <_dtoa_r+0x254>
 80162f4:	2301      	movs	r3, #1
 80162f6:	e7f3      	b.n	80162e0 <_dtoa_r+0x228>
 80162f8:	2300      	movs	r3, #0
 80162fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80162fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162fe:	18fb      	adds	r3, r7, r3
 8016300:	9300      	str	r3, [sp, #0]
 8016302:	3301      	adds	r3, #1
 8016304:	2b01      	cmp	r3, #1
 8016306:	9307      	str	r3, [sp, #28]
 8016308:	bfb8      	it	lt
 801630a:	2301      	movlt	r3, #1
 801630c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8016310:	2100      	movs	r1, #0
 8016312:	2204      	movs	r2, #4
 8016314:	f102 0514 	add.w	r5, r2, #20
 8016318:	429d      	cmp	r5, r3
 801631a:	d91f      	bls.n	801635c <_dtoa_r+0x2a4>
 801631c:	6041      	str	r1, [r0, #4]
 801631e:	4658      	mov	r0, fp
 8016320:	f000 fd8e 	bl	8016e40 <_Balloc>
 8016324:	4682      	mov	sl, r0
 8016326:	2800      	cmp	r0, #0
 8016328:	d13c      	bne.n	80163a4 <_dtoa_r+0x2ec>
 801632a:	4b1b      	ldr	r3, [pc, #108]	@ (8016398 <_dtoa_r+0x2e0>)
 801632c:	4602      	mov	r2, r0
 801632e:	f240 11af 	movw	r1, #431	@ 0x1af
 8016332:	e6d8      	b.n	80160e6 <_dtoa_r+0x2e>
 8016334:	2301      	movs	r3, #1
 8016336:	e7e0      	b.n	80162fa <_dtoa_r+0x242>
 8016338:	2401      	movs	r4, #1
 801633a:	2300      	movs	r3, #0
 801633c:	9309      	str	r3, [sp, #36]	@ 0x24
 801633e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016340:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016344:	9300      	str	r3, [sp, #0]
 8016346:	9307      	str	r3, [sp, #28]
 8016348:	2200      	movs	r2, #0
 801634a:	2312      	movs	r3, #18
 801634c:	e7d0      	b.n	80162f0 <_dtoa_r+0x238>
 801634e:	2301      	movs	r3, #1
 8016350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016352:	e7f5      	b.n	8016340 <_dtoa_r+0x288>
 8016354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016356:	9300      	str	r3, [sp, #0]
 8016358:	9307      	str	r3, [sp, #28]
 801635a:	e7d7      	b.n	801630c <_dtoa_r+0x254>
 801635c:	3101      	adds	r1, #1
 801635e:	0052      	lsls	r2, r2, #1
 8016360:	e7d8      	b.n	8016314 <_dtoa_r+0x25c>
 8016362:	bf00      	nop
 8016364:	f3af 8000 	nop.w
 8016368:	636f4361 	.word	0x636f4361
 801636c:	3fd287a7 	.word	0x3fd287a7
 8016370:	8b60c8b3 	.word	0x8b60c8b3
 8016374:	3fc68a28 	.word	0x3fc68a28
 8016378:	509f79fb 	.word	0x509f79fb
 801637c:	3fd34413 	.word	0x3fd34413
 8016380:	0802f0a2 	.word	0x0802f0a2
 8016384:	0802f0b9 	.word	0x0802f0b9
 8016388:	7ff00000 	.word	0x7ff00000
 801638c:	0802f06d 	.word	0x0802f06d
 8016390:	3ff80000 	.word	0x3ff80000
 8016394:	0802f1b0 	.word	0x0802f1b0
 8016398:	0802f111 	.word	0x0802f111
 801639c:	0802f09e 	.word	0x0802f09e
 80163a0:	0802f06c 	.word	0x0802f06c
 80163a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80163a8:	6018      	str	r0, [r3, #0]
 80163aa:	9b07      	ldr	r3, [sp, #28]
 80163ac:	2b0e      	cmp	r3, #14
 80163ae:	f200 80a4 	bhi.w	80164fa <_dtoa_r+0x442>
 80163b2:	2c00      	cmp	r4, #0
 80163b4:	f000 80a1 	beq.w	80164fa <_dtoa_r+0x442>
 80163b8:	2f00      	cmp	r7, #0
 80163ba:	dd33      	ble.n	8016424 <_dtoa_r+0x36c>
 80163bc:	4bad      	ldr	r3, [pc, #692]	@ (8016674 <_dtoa_r+0x5bc>)
 80163be:	f007 020f 	and.w	r2, r7, #15
 80163c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80163c6:	ed93 7b00 	vldr	d7, [r3]
 80163ca:	05f8      	lsls	r0, r7, #23
 80163cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80163d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80163d4:	d516      	bpl.n	8016404 <_dtoa_r+0x34c>
 80163d6:	4ba8      	ldr	r3, [pc, #672]	@ (8016678 <_dtoa_r+0x5c0>)
 80163d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80163dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80163e0:	f7ea fa3c 	bl	800085c <__aeabi_ddiv>
 80163e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80163e8:	f004 040f 	and.w	r4, r4, #15
 80163ec:	2603      	movs	r6, #3
 80163ee:	4da2      	ldr	r5, [pc, #648]	@ (8016678 <_dtoa_r+0x5c0>)
 80163f0:	b954      	cbnz	r4, 8016408 <_dtoa_r+0x350>
 80163f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80163fa:	f7ea fa2f 	bl	800085c <__aeabi_ddiv>
 80163fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016402:	e028      	b.n	8016456 <_dtoa_r+0x39e>
 8016404:	2602      	movs	r6, #2
 8016406:	e7f2      	b.n	80163ee <_dtoa_r+0x336>
 8016408:	07e1      	lsls	r1, r4, #31
 801640a:	d508      	bpl.n	801641e <_dtoa_r+0x366>
 801640c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016410:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016414:	f7ea f8f8 	bl	8000608 <__aeabi_dmul>
 8016418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801641c:	3601      	adds	r6, #1
 801641e:	1064      	asrs	r4, r4, #1
 8016420:	3508      	adds	r5, #8
 8016422:	e7e5      	b.n	80163f0 <_dtoa_r+0x338>
 8016424:	f000 80d2 	beq.w	80165cc <_dtoa_r+0x514>
 8016428:	427c      	negs	r4, r7
 801642a:	4b92      	ldr	r3, [pc, #584]	@ (8016674 <_dtoa_r+0x5bc>)
 801642c:	4d92      	ldr	r5, [pc, #584]	@ (8016678 <_dtoa_r+0x5c0>)
 801642e:	f004 020f 	and.w	r2, r4, #15
 8016432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801643e:	f7ea f8e3 	bl	8000608 <__aeabi_dmul>
 8016442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016446:	1124      	asrs	r4, r4, #4
 8016448:	2300      	movs	r3, #0
 801644a:	2602      	movs	r6, #2
 801644c:	2c00      	cmp	r4, #0
 801644e:	f040 80b2 	bne.w	80165b6 <_dtoa_r+0x4fe>
 8016452:	2b00      	cmp	r3, #0
 8016454:	d1d3      	bne.n	80163fe <_dtoa_r+0x346>
 8016456:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016458:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801645c:	2b00      	cmp	r3, #0
 801645e:	f000 80b7 	beq.w	80165d0 <_dtoa_r+0x518>
 8016462:	4b86      	ldr	r3, [pc, #536]	@ (801667c <_dtoa_r+0x5c4>)
 8016464:	2200      	movs	r2, #0
 8016466:	4620      	mov	r0, r4
 8016468:	4629      	mov	r1, r5
 801646a:	f7ea fb3f 	bl	8000aec <__aeabi_dcmplt>
 801646e:	2800      	cmp	r0, #0
 8016470:	f000 80ae 	beq.w	80165d0 <_dtoa_r+0x518>
 8016474:	9b07      	ldr	r3, [sp, #28]
 8016476:	2b00      	cmp	r3, #0
 8016478:	f000 80aa 	beq.w	80165d0 <_dtoa_r+0x518>
 801647c:	9b00      	ldr	r3, [sp, #0]
 801647e:	2b00      	cmp	r3, #0
 8016480:	dd37      	ble.n	80164f2 <_dtoa_r+0x43a>
 8016482:	1e7b      	subs	r3, r7, #1
 8016484:	9304      	str	r3, [sp, #16]
 8016486:	4620      	mov	r0, r4
 8016488:	4b7d      	ldr	r3, [pc, #500]	@ (8016680 <_dtoa_r+0x5c8>)
 801648a:	2200      	movs	r2, #0
 801648c:	4629      	mov	r1, r5
 801648e:	f7ea f8bb 	bl	8000608 <__aeabi_dmul>
 8016492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016496:	9c00      	ldr	r4, [sp, #0]
 8016498:	3601      	adds	r6, #1
 801649a:	4630      	mov	r0, r6
 801649c:	f7ea f84a 	bl	8000534 <__aeabi_i2d>
 80164a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80164a4:	f7ea f8b0 	bl	8000608 <__aeabi_dmul>
 80164a8:	4b76      	ldr	r3, [pc, #472]	@ (8016684 <_dtoa_r+0x5cc>)
 80164aa:	2200      	movs	r2, #0
 80164ac:	f7e9 fef6 	bl	800029c <__adddf3>
 80164b0:	4605      	mov	r5, r0
 80164b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80164b6:	2c00      	cmp	r4, #0
 80164b8:	f040 808d 	bne.w	80165d6 <_dtoa_r+0x51e>
 80164bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80164c0:	4b71      	ldr	r3, [pc, #452]	@ (8016688 <_dtoa_r+0x5d0>)
 80164c2:	2200      	movs	r2, #0
 80164c4:	f7e9 fee8 	bl	8000298 <__aeabi_dsub>
 80164c8:	4602      	mov	r2, r0
 80164ca:	460b      	mov	r3, r1
 80164cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80164d0:	462a      	mov	r2, r5
 80164d2:	4633      	mov	r3, r6
 80164d4:	f7ea fb28 	bl	8000b28 <__aeabi_dcmpgt>
 80164d8:	2800      	cmp	r0, #0
 80164da:	f040 828b 	bne.w	80169f4 <_dtoa_r+0x93c>
 80164de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80164e2:	462a      	mov	r2, r5
 80164e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80164e8:	f7ea fb00 	bl	8000aec <__aeabi_dcmplt>
 80164ec:	2800      	cmp	r0, #0
 80164ee:	f040 8128 	bne.w	8016742 <_dtoa_r+0x68a>
 80164f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80164f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80164fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	f2c0 815a 	blt.w	80167b6 <_dtoa_r+0x6fe>
 8016502:	2f0e      	cmp	r7, #14
 8016504:	f300 8157 	bgt.w	80167b6 <_dtoa_r+0x6fe>
 8016508:	4b5a      	ldr	r3, [pc, #360]	@ (8016674 <_dtoa_r+0x5bc>)
 801650a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801650e:	ed93 7b00 	vldr	d7, [r3]
 8016512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016514:	2b00      	cmp	r3, #0
 8016516:	ed8d 7b00 	vstr	d7, [sp]
 801651a:	da03      	bge.n	8016524 <_dtoa_r+0x46c>
 801651c:	9b07      	ldr	r3, [sp, #28]
 801651e:	2b00      	cmp	r3, #0
 8016520:	f340 8101 	ble.w	8016726 <_dtoa_r+0x66e>
 8016524:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016528:	4656      	mov	r6, sl
 801652a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801652e:	4620      	mov	r0, r4
 8016530:	4629      	mov	r1, r5
 8016532:	f7ea f993 	bl	800085c <__aeabi_ddiv>
 8016536:	f7ea fb17 	bl	8000b68 <__aeabi_d2iz>
 801653a:	4680      	mov	r8, r0
 801653c:	f7e9 fffa 	bl	8000534 <__aeabi_i2d>
 8016540:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016544:	f7ea f860 	bl	8000608 <__aeabi_dmul>
 8016548:	4602      	mov	r2, r0
 801654a:	460b      	mov	r3, r1
 801654c:	4620      	mov	r0, r4
 801654e:	4629      	mov	r1, r5
 8016550:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8016554:	f7e9 fea0 	bl	8000298 <__aeabi_dsub>
 8016558:	f806 4b01 	strb.w	r4, [r6], #1
 801655c:	9d07      	ldr	r5, [sp, #28]
 801655e:	eba6 040a 	sub.w	r4, r6, sl
 8016562:	42a5      	cmp	r5, r4
 8016564:	4602      	mov	r2, r0
 8016566:	460b      	mov	r3, r1
 8016568:	f040 8117 	bne.w	801679a <_dtoa_r+0x6e2>
 801656c:	f7e9 fe96 	bl	800029c <__adddf3>
 8016570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016574:	4604      	mov	r4, r0
 8016576:	460d      	mov	r5, r1
 8016578:	f7ea fad6 	bl	8000b28 <__aeabi_dcmpgt>
 801657c:	2800      	cmp	r0, #0
 801657e:	f040 80f9 	bne.w	8016774 <_dtoa_r+0x6bc>
 8016582:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016586:	4620      	mov	r0, r4
 8016588:	4629      	mov	r1, r5
 801658a:	f7ea faa5 	bl	8000ad8 <__aeabi_dcmpeq>
 801658e:	b118      	cbz	r0, 8016598 <_dtoa_r+0x4e0>
 8016590:	f018 0f01 	tst.w	r8, #1
 8016594:	f040 80ee 	bne.w	8016774 <_dtoa_r+0x6bc>
 8016598:	4649      	mov	r1, r9
 801659a:	4658      	mov	r0, fp
 801659c:	f000 fc90 	bl	8016ec0 <_Bfree>
 80165a0:	2300      	movs	r3, #0
 80165a2:	7033      	strb	r3, [r6, #0]
 80165a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80165a6:	3701      	adds	r7, #1
 80165a8:	601f      	str	r7, [r3, #0]
 80165aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	f000 831d 	beq.w	8016bec <_dtoa_r+0xb34>
 80165b2:	601e      	str	r6, [r3, #0]
 80165b4:	e31a      	b.n	8016bec <_dtoa_r+0xb34>
 80165b6:	07e2      	lsls	r2, r4, #31
 80165b8:	d505      	bpl.n	80165c6 <_dtoa_r+0x50e>
 80165ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80165be:	f7ea f823 	bl	8000608 <__aeabi_dmul>
 80165c2:	3601      	adds	r6, #1
 80165c4:	2301      	movs	r3, #1
 80165c6:	1064      	asrs	r4, r4, #1
 80165c8:	3508      	adds	r5, #8
 80165ca:	e73f      	b.n	801644c <_dtoa_r+0x394>
 80165cc:	2602      	movs	r6, #2
 80165ce:	e742      	b.n	8016456 <_dtoa_r+0x39e>
 80165d0:	9c07      	ldr	r4, [sp, #28]
 80165d2:	9704      	str	r7, [sp, #16]
 80165d4:	e761      	b.n	801649a <_dtoa_r+0x3e2>
 80165d6:	4b27      	ldr	r3, [pc, #156]	@ (8016674 <_dtoa_r+0x5bc>)
 80165d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80165da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80165de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80165e2:	4454      	add	r4, sl
 80165e4:	2900      	cmp	r1, #0
 80165e6:	d053      	beq.n	8016690 <_dtoa_r+0x5d8>
 80165e8:	4928      	ldr	r1, [pc, #160]	@ (801668c <_dtoa_r+0x5d4>)
 80165ea:	2000      	movs	r0, #0
 80165ec:	f7ea f936 	bl	800085c <__aeabi_ddiv>
 80165f0:	4633      	mov	r3, r6
 80165f2:	462a      	mov	r2, r5
 80165f4:	f7e9 fe50 	bl	8000298 <__aeabi_dsub>
 80165f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80165fc:	4656      	mov	r6, sl
 80165fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016602:	f7ea fab1 	bl	8000b68 <__aeabi_d2iz>
 8016606:	4605      	mov	r5, r0
 8016608:	f7e9 ff94 	bl	8000534 <__aeabi_i2d>
 801660c:	4602      	mov	r2, r0
 801660e:	460b      	mov	r3, r1
 8016610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016614:	f7e9 fe40 	bl	8000298 <__aeabi_dsub>
 8016618:	3530      	adds	r5, #48	@ 0x30
 801661a:	4602      	mov	r2, r0
 801661c:	460b      	mov	r3, r1
 801661e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016622:	f806 5b01 	strb.w	r5, [r6], #1
 8016626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801662a:	f7ea fa5f 	bl	8000aec <__aeabi_dcmplt>
 801662e:	2800      	cmp	r0, #0
 8016630:	d171      	bne.n	8016716 <_dtoa_r+0x65e>
 8016632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016636:	4911      	ldr	r1, [pc, #68]	@ (801667c <_dtoa_r+0x5c4>)
 8016638:	2000      	movs	r0, #0
 801663a:	f7e9 fe2d 	bl	8000298 <__aeabi_dsub>
 801663e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8016642:	f7ea fa53 	bl	8000aec <__aeabi_dcmplt>
 8016646:	2800      	cmp	r0, #0
 8016648:	f040 8095 	bne.w	8016776 <_dtoa_r+0x6be>
 801664c:	42a6      	cmp	r6, r4
 801664e:	f43f af50 	beq.w	80164f2 <_dtoa_r+0x43a>
 8016652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8016656:	4b0a      	ldr	r3, [pc, #40]	@ (8016680 <_dtoa_r+0x5c8>)
 8016658:	2200      	movs	r2, #0
 801665a:	f7e9 ffd5 	bl	8000608 <__aeabi_dmul>
 801665e:	4b08      	ldr	r3, [pc, #32]	@ (8016680 <_dtoa_r+0x5c8>)
 8016660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8016664:	2200      	movs	r2, #0
 8016666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801666a:	f7e9 ffcd 	bl	8000608 <__aeabi_dmul>
 801666e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016672:	e7c4      	b.n	80165fe <_dtoa_r+0x546>
 8016674:	0802f1b0 	.word	0x0802f1b0
 8016678:	0802f188 	.word	0x0802f188
 801667c:	3ff00000 	.word	0x3ff00000
 8016680:	40240000 	.word	0x40240000
 8016684:	401c0000 	.word	0x401c0000
 8016688:	40140000 	.word	0x40140000
 801668c:	3fe00000 	.word	0x3fe00000
 8016690:	4631      	mov	r1, r6
 8016692:	4628      	mov	r0, r5
 8016694:	f7e9 ffb8 	bl	8000608 <__aeabi_dmul>
 8016698:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801669c:	9415      	str	r4, [sp, #84]	@ 0x54
 801669e:	4656      	mov	r6, sl
 80166a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80166a4:	f7ea fa60 	bl	8000b68 <__aeabi_d2iz>
 80166a8:	4605      	mov	r5, r0
 80166aa:	f7e9 ff43 	bl	8000534 <__aeabi_i2d>
 80166ae:	4602      	mov	r2, r0
 80166b0:	460b      	mov	r3, r1
 80166b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80166b6:	f7e9 fdef 	bl	8000298 <__aeabi_dsub>
 80166ba:	3530      	adds	r5, #48	@ 0x30
 80166bc:	f806 5b01 	strb.w	r5, [r6], #1
 80166c0:	4602      	mov	r2, r0
 80166c2:	460b      	mov	r3, r1
 80166c4:	42a6      	cmp	r6, r4
 80166c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80166ca:	f04f 0200 	mov.w	r2, #0
 80166ce:	d124      	bne.n	801671a <_dtoa_r+0x662>
 80166d0:	4bac      	ldr	r3, [pc, #688]	@ (8016984 <_dtoa_r+0x8cc>)
 80166d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80166d6:	f7e9 fde1 	bl	800029c <__adddf3>
 80166da:	4602      	mov	r2, r0
 80166dc:	460b      	mov	r3, r1
 80166de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80166e2:	f7ea fa21 	bl	8000b28 <__aeabi_dcmpgt>
 80166e6:	2800      	cmp	r0, #0
 80166e8:	d145      	bne.n	8016776 <_dtoa_r+0x6be>
 80166ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80166ee:	49a5      	ldr	r1, [pc, #660]	@ (8016984 <_dtoa_r+0x8cc>)
 80166f0:	2000      	movs	r0, #0
 80166f2:	f7e9 fdd1 	bl	8000298 <__aeabi_dsub>
 80166f6:	4602      	mov	r2, r0
 80166f8:	460b      	mov	r3, r1
 80166fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80166fe:	f7ea f9f5 	bl	8000aec <__aeabi_dcmplt>
 8016702:	2800      	cmp	r0, #0
 8016704:	f43f aef5 	beq.w	80164f2 <_dtoa_r+0x43a>
 8016708:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801670a:	1e73      	subs	r3, r6, #1
 801670c:	9315      	str	r3, [sp, #84]	@ 0x54
 801670e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016712:	2b30      	cmp	r3, #48	@ 0x30
 8016714:	d0f8      	beq.n	8016708 <_dtoa_r+0x650>
 8016716:	9f04      	ldr	r7, [sp, #16]
 8016718:	e73e      	b.n	8016598 <_dtoa_r+0x4e0>
 801671a:	4b9b      	ldr	r3, [pc, #620]	@ (8016988 <_dtoa_r+0x8d0>)
 801671c:	f7e9 ff74 	bl	8000608 <__aeabi_dmul>
 8016720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016724:	e7bc      	b.n	80166a0 <_dtoa_r+0x5e8>
 8016726:	d10c      	bne.n	8016742 <_dtoa_r+0x68a>
 8016728:	4b98      	ldr	r3, [pc, #608]	@ (801698c <_dtoa_r+0x8d4>)
 801672a:	2200      	movs	r2, #0
 801672c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016730:	f7e9 ff6a 	bl	8000608 <__aeabi_dmul>
 8016734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016738:	f7ea f9ec 	bl	8000b14 <__aeabi_dcmpge>
 801673c:	2800      	cmp	r0, #0
 801673e:	f000 8157 	beq.w	80169f0 <_dtoa_r+0x938>
 8016742:	2400      	movs	r4, #0
 8016744:	4625      	mov	r5, r4
 8016746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016748:	43db      	mvns	r3, r3
 801674a:	9304      	str	r3, [sp, #16]
 801674c:	4656      	mov	r6, sl
 801674e:	2700      	movs	r7, #0
 8016750:	4621      	mov	r1, r4
 8016752:	4658      	mov	r0, fp
 8016754:	f000 fbb4 	bl	8016ec0 <_Bfree>
 8016758:	2d00      	cmp	r5, #0
 801675a:	d0dc      	beq.n	8016716 <_dtoa_r+0x65e>
 801675c:	b12f      	cbz	r7, 801676a <_dtoa_r+0x6b2>
 801675e:	42af      	cmp	r7, r5
 8016760:	d003      	beq.n	801676a <_dtoa_r+0x6b2>
 8016762:	4639      	mov	r1, r7
 8016764:	4658      	mov	r0, fp
 8016766:	f000 fbab 	bl	8016ec0 <_Bfree>
 801676a:	4629      	mov	r1, r5
 801676c:	4658      	mov	r0, fp
 801676e:	f000 fba7 	bl	8016ec0 <_Bfree>
 8016772:	e7d0      	b.n	8016716 <_dtoa_r+0x65e>
 8016774:	9704      	str	r7, [sp, #16]
 8016776:	4633      	mov	r3, r6
 8016778:	461e      	mov	r6, r3
 801677a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801677e:	2a39      	cmp	r2, #57	@ 0x39
 8016780:	d107      	bne.n	8016792 <_dtoa_r+0x6da>
 8016782:	459a      	cmp	sl, r3
 8016784:	d1f8      	bne.n	8016778 <_dtoa_r+0x6c0>
 8016786:	9a04      	ldr	r2, [sp, #16]
 8016788:	3201      	adds	r2, #1
 801678a:	9204      	str	r2, [sp, #16]
 801678c:	2230      	movs	r2, #48	@ 0x30
 801678e:	f88a 2000 	strb.w	r2, [sl]
 8016792:	781a      	ldrb	r2, [r3, #0]
 8016794:	3201      	adds	r2, #1
 8016796:	701a      	strb	r2, [r3, #0]
 8016798:	e7bd      	b.n	8016716 <_dtoa_r+0x65e>
 801679a:	4b7b      	ldr	r3, [pc, #492]	@ (8016988 <_dtoa_r+0x8d0>)
 801679c:	2200      	movs	r2, #0
 801679e:	f7e9 ff33 	bl	8000608 <__aeabi_dmul>
 80167a2:	2200      	movs	r2, #0
 80167a4:	2300      	movs	r3, #0
 80167a6:	4604      	mov	r4, r0
 80167a8:	460d      	mov	r5, r1
 80167aa:	f7ea f995 	bl	8000ad8 <__aeabi_dcmpeq>
 80167ae:	2800      	cmp	r0, #0
 80167b0:	f43f aebb 	beq.w	801652a <_dtoa_r+0x472>
 80167b4:	e6f0      	b.n	8016598 <_dtoa_r+0x4e0>
 80167b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80167b8:	2a00      	cmp	r2, #0
 80167ba:	f000 80db 	beq.w	8016974 <_dtoa_r+0x8bc>
 80167be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80167c0:	2a01      	cmp	r2, #1
 80167c2:	f300 80bf 	bgt.w	8016944 <_dtoa_r+0x88c>
 80167c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80167c8:	2a00      	cmp	r2, #0
 80167ca:	f000 80b7 	beq.w	801693c <_dtoa_r+0x884>
 80167ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80167d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80167d4:	4646      	mov	r6, r8
 80167d6:	9a08      	ldr	r2, [sp, #32]
 80167d8:	2101      	movs	r1, #1
 80167da:	441a      	add	r2, r3
 80167dc:	4658      	mov	r0, fp
 80167de:	4498      	add	r8, r3
 80167e0:	9208      	str	r2, [sp, #32]
 80167e2:	f000 fc6b 	bl	80170bc <__i2b>
 80167e6:	4605      	mov	r5, r0
 80167e8:	b15e      	cbz	r6, 8016802 <_dtoa_r+0x74a>
 80167ea:	9b08      	ldr	r3, [sp, #32]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	dd08      	ble.n	8016802 <_dtoa_r+0x74a>
 80167f0:	42b3      	cmp	r3, r6
 80167f2:	9a08      	ldr	r2, [sp, #32]
 80167f4:	bfa8      	it	ge
 80167f6:	4633      	movge	r3, r6
 80167f8:	eba8 0803 	sub.w	r8, r8, r3
 80167fc:	1af6      	subs	r6, r6, r3
 80167fe:	1ad3      	subs	r3, r2, r3
 8016800:	9308      	str	r3, [sp, #32]
 8016802:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016804:	b1f3      	cbz	r3, 8016844 <_dtoa_r+0x78c>
 8016806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016808:	2b00      	cmp	r3, #0
 801680a:	f000 80b7 	beq.w	801697c <_dtoa_r+0x8c4>
 801680e:	b18c      	cbz	r4, 8016834 <_dtoa_r+0x77c>
 8016810:	4629      	mov	r1, r5
 8016812:	4622      	mov	r2, r4
 8016814:	4658      	mov	r0, fp
 8016816:	f000 fd11 	bl	801723c <__pow5mult>
 801681a:	464a      	mov	r2, r9
 801681c:	4601      	mov	r1, r0
 801681e:	4605      	mov	r5, r0
 8016820:	4658      	mov	r0, fp
 8016822:	f000 fc61 	bl	80170e8 <__multiply>
 8016826:	4649      	mov	r1, r9
 8016828:	9004      	str	r0, [sp, #16]
 801682a:	4658      	mov	r0, fp
 801682c:	f000 fb48 	bl	8016ec0 <_Bfree>
 8016830:	9b04      	ldr	r3, [sp, #16]
 8016832:	4699      	mov	r9, r3
 8016834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016836:	1b1a      	subs	r2, r3, r4
 8016838:	d004      	beq.n	8016844 <_dtoa_r+0x78c>
 801683a:	4649      	mov	r1, r9
 801683c:	4658      	mov	r0, fp
 801683e:	f000 fcfd 	bl	801723c <__pow5mult>
 8016842:	4681      	mov	r9, r0
 8016844:	2101      	movs	r1, #1
 8016846:	4658      	mov	r0, fp
 8016848:	f000 fc38 	bl	80170bc <__i2b>
 801684c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801684e:	4604      	mov	r4, r0
 8016850:	2b00      	cmp	r3, #0
 8016852:	f000 81cf 	beq.w	8016bf4 <_dtoa_r+0xb3c>
 8016856:	461a      	mov	r2, r3
 8016858:	4601      	mov	r1, r0
 801685a:	4658      	mov	r0, fp
 801685c:	f000 fcee 	bl	801723c <__pow5mult>
 8016860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016862:	2b01      	cmp	r3, #1
 8016864:	4604      	mov	r4, r0
 8016866:	f300 8095 	bgt.w	8016994 <_dtoa_r+0x8dc>
 801686a:	9b02      	ldr	r3, [sp, #8]
 801686c:	2b00      	cmp	r3, #0
 801686e:	f040 8087 	bne.w	8016980 <_dtoa_r+0x8c8>
 8016872:	9b03      	ldr	r3, [sp, #12]
 8016874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016878:	2b00      	cmp	r3, #0
 801687a:	f040 8089 	bne.w	8016990 <_dtoa_r+0x8d8>
 801687e:	9b03      	ldr	r3, [sp, #12]
 8016880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016884:	0d1b      	lsrs	r3, r3, #20
 8016886:	051b      	lsls	r3, r3, #20
 8016888:	b12b      	cbz	r3, 8016896 <_dtoa_r+0x7de>
 801688a:	9b08      	ldr	r3, [sp, #32]
 801688c:	3301      	adds	r3, #1
 801688e:	9308      	str	r3, [sp, #32]
 8016890:	f108 0801 	add.w	r8, r8, #1
 8016894:	2301      	movs	r3, #1
 8016896:	930a      	str	r3, [sp, #40]	@ 0x28
 8016898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801689a:	2b00      	cmp	r3, #0
 801689c:	f000 81b0 	beq.w	8016c00 <_dtoa_r+0xb48>
 80168a0:	6923      	ldr	r3, [r4, #16]
 80168a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80168a6:	6918      	ldr	r0, [r3, #16]
 80168a8:	f000 fbbc 	bl	8017024 <__hi0bits>
 80168ac:	f1c0 0020 	rsb	r0, r0, #32
 80168b0:	9b08      	ldr	r3, [sp, #32]
 80168b2:	4418      	add	r0, r3
 80168b4:	f010 001f 	ands.w	r0, r0, #31
 80168b8:	d077      	beq.n	80169aa <_dtoa_r+0x8f2>
 80168ba:	f1c0 0320 	rsb	r3, r0, #32
 80168be:	2b04      	cmp	r3, #4
 80168c0:	dd6b      	ble.n	801699a <_dtoa_r+0x8e2>
 80168c2:	9b08      	ldr	r3, [sp, #32]
 80168c4:	f1c0 001c 	rsb	r0, r0, #28
 80168c8:	4403      	add	r3, r0
 80168ca:	4480      	add	r8, r0
 80168cc:	4406      	add	r6, r0
 80168ce:	9308      	str	r3, [sp, #32]
 80168d0:	f1b8 0f00 	cmp.w	r8, #0
 80168d4:	dd05      	ble.n	80168e2 <_dtoa_r+0x82a>
 80168d6:	4649      	mov	r1, r9
 80168d8:	4642      	mov	r2, r8
 80168da:	4658      	mov	r0, fp
 80168dc:	f000 fd08 	bl	80172f0 <__lshift>
 80168e0:	4681      	mov	r9, r0
 80168e2:	9b08      	ldr	r3, [sp, #32]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	dd05      	ble.n	80168f4 <_dtoa_r+0x83c>
 80168e8:	4621      	mov	r1, r4
 80168ea:	461a      	mov	r2, r3
 80168ec:	4658      	mov	r0, fp
 80168ee:	f000 fcff 	bl	80172f0 <__lshift>
 80168f2:	4604      	mov	r4, r0
 80168f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d059      	beq.n	80169ae <_dtoa_r+0x8f6>
 80168fa:	4621      	mov	r1, r4
 80168fc:	4648      	mov	r0, r9
 80168fe:	f000 fd63 	bl	80173c8 <__mcmp>
 8016902:	2800      	cmp	r0, #0
 8016904:	da53      	bge.n	80169ae <_dtoa_r+0x8f6>
 8016906:	1e7b      	subs	r3, r7, #1
 8016908:	9304      	str	r3, [sp, #16]
 801690a:	4649      	mov	r1, r9
 801690c:	2300      	movs	r3, #0
 801690e:	220a      	movs	r2, #10
 8016910:	4658      	mov	r0, fp
 8016912:	f000 faf7 	bl	8016f04 <__multadd>
 8016916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016918:	4681      	mov	r9, r0
 801691a:	2b00      	cmp	r3, #0
 801691c:	f000 8172 	beq.w	8016c04 <_dtoa_r+0xb4c>
 8016920:	2300      	movs	r3, #0
 8016922:	4629      	mov	r1, r5
 8016924:	220a      	movs	r2, #10
 8016926:	4658      	mov	r0, fp
 8016928:	f000 faec 	bl	8016f04 <__multadd>
 801692c:	9b00      	ldr	r3, [sp, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	4605      	mov	r5, r0
 8016932:	dc67      	bgt.n	8016a04 <_dtoa_r+0x94c>
 8016934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016936:	2b02      	cmp	r3, #2
 8016938:	dc41      	bgt.n	80169be <_dtoa_r+0x906>
 801693a:	e063      	b.n	8016a04 <_dtoa_r+0x94c>
 801693c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801693e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8016942:	e746      	b.n	80167d2 <_dtoa_r+0x71a>
 8016944:	9b07      	ldr	r3, [sp, #28]
 8016946:	1e5c      	subs	r4, r3, #1
 8016948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801694a:	42a3      	cmp	r3, r4
 801694c:	bfbf      	itttt	lt
 801694e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016950:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8016952:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8016954:	1ae3      	sublt	r3, r4, r3
 8016956:	bfb4      	ite	lt
 8016958:	18d2      	addlt	r2, r2, r3
 801695a:	1b1c      	subge	r4, r3, r4
 801695c:	9b07      	ldr	r3, [sp, #28]
 801695e:	bfbc      	itt	lt
 8016960:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8016962:	2400      	movlt	r4, #0
 8016964:	2b00      	cmp	r3, #0
 8016966:	bfb5      	itete	lt
 8016968:	eba8 0603 	sublt.w	r6, r8, r3
 801696c:	9b07      	ldrge	r3, [sp, #28]
 801696e:	2300      	movlt	r3, #0
 8016970:	4646      	movge	r6, r8
 8016972:	e730      	b.n	80167d6 <_dtoa_r+0x71e>
 8016974:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016976:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8016978:	4646      	mov	r6, r8
 801697a:	e735      	b.n	80167e8 <_dtoa_r+0x730>
 801697c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801697e:	e75c      	b.n	801683a <_dtoa_r+0x782>
 8016980:	2300      	movs	r3, #0
 8016982:	e788      	b.n	8016896 <_dtoa_r+0x7de>
 8016984:	3fe00000 	.word	0x3fe00000
 8016988:	40240000 	.word	0x40240000
 801698c:	40140000 	.word	0x40140000
 8016990:	9b02      	ldr	r3, [sp, #8]
 8016992:	e780      	b.n	8016896 <_dtoa_r+0x7de>
 8016994:	2300      	movs	r3, #0
 8016996:	930a      	str	r3, [sp, #40]	@ 0x28
 8016998:	e782      	b.n	80168a0 <_dtoa_r+0x7e8>
 801699a:	d099      	beq.n	80168d0 <_dtoa_r+0x818>
 801699c:	9a08      	ldr	r2, [sp, #32]
 801699e:	331c      	adds	r3, #28
 80169a0:	441a      	add	r2, r3
 80169a2:	4498      	add	r8, r3
 80169a4:	441e      	add	r6, r3
 80169a6:	9208      	str	r2, [sp, #32]
 80169a8:	e792      	b.n	80168d0 <_dtoa_r+0x818>
 80169aa:	4603      	mov	r3, r0
 80169ac:	e7f6      	b.n	801699c <_dtoa_r+0x8e4>
 80169ae:	9b07      	ldr	r3, [sp, #28]
 80169b0:	9704      	str	r7, [sp, #16]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	dc20      	bgt.n	80169f8 <_dtoa_r+0x940>
 80169b6:	9300      	str	r3, [sp, #0]
 80169b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169ba:	2b02      	cmp	r3, #2
 80169bc:	dd1e      	ble.n	80169fc <_dtoa_r+0x944>
 80169be:	9b00      	ldr	r3, [sp, #0]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	f47f aec0 	bne.w	8016746 <_dtoa_r+0x68e>
 80169c6:	4621      	mov	r1, r4
 80169c8:	2205      	movs	r2, #5
 80169ca:	4658      	mov	r0, fp
 80169cc:	f000 fa9a 	bl	8016f04 <__multadd>
 80169d0:	4601      	mov	r1, r0
 80169d2:	4604      	mov	r4, r0
 80169d4:	4648      	mov	r0, r9
 80169d6:	f000 fcf7 	bl	80173c8 <__mcmp>
 80169da:	2800      	cmp	r0, #0
 80169dc:	f77f aeb3 	ble.w	8016746 <_dtoa_r+0x68e>
 80169e0:	4656      	mov	r6, sl
 80169e2:	2331      	movs	r3, #49	@ 0x31
 80169e4:	f806 3b01 	strb.w	r3, [r6], #1
 80169e8:	9b04      	ldr	r3, [sp, #16]
 80169ea:	3301      	adds	r3, #1
 80169ec:	9304      	str	r3, [sp, #16]
 80169ee:	e6ae      	b.n	801674e <_dtoa_r+0x696>
 80169f0:	9c07      	ldr	r4, [sp, #28]
 80169f2:	9704      	str	r7, [sp, #16]
 80169f4:	4625      	mov	r5, r4
 80169f6:	e7f3      	b.n	80169e0 <_dtoa_r+0x928>
 80169f8:	9b07      	ldr	r3, [sp, #28]
 80169fa:	9300      	str	r3, [sp, #0]
 80169fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	f000 8104 	beq.w	8016c0c <_dtoa_r+0xb54>
 8016a04:	2e00      	cmp	r6, #0
 8016a06:	dd05      	ble.n	8016a14 <_dtoa_r+0x95c>
 8016a08:	4629      	mov	r1, r5
 8016a0a:	4632      	mov	r2, r6
 8016a0c:	4658      	mov	r0, fp
 8016a0e:	f000 fc6f 	bl	80172f0 <__lshift>
 8016a12:	4605      	mov	r5, r0
 8016a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d05a      	beq.n	8016ad0 <_dtoa_r+0xa18>
 8016a1a:	6869      	ldr	r1, [r5, #4]
 8016a1c:	4658      	mov	r0, fp
 8016a1e:	f000 fa0f 	bl	8016e40 <_Balloc>
 8016a22:	4606      	mov	r6, r0
 8016a24:	b928      	cbnz	r0, 8016a32 <_dtoa_r+0x97a>
 8016a26:	4b84      	ldr	r3, [pc, #528]	@ (8016c38 <_dtoa_r+0xb80>)
 8016a28:	4602      	mov	r2, r0
 8016a2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016a2e:	f7ff bb5a 	b.w	80160e6 <_dtoa_r+0x2e>
 8016a32:	692a      	ldr	r2, [r5, #16]
 8016a34:	3202      	adds	r2, #2
 8016a36:	0092      	lsls	r2, r2, #2
 8016a38:	f105 010c 	add.w	r1, r5, #12
 8016a3c:	300c      	adds	r0, #12
 8016a3e:	f7ff fa9c 	bl	8015f7a <memcpy>
 8016a42:	2201      	movs	r2, #1
 8016a44:	4631      	mov	r1, r6
 8016a46:	4658      	mov	r0, fp
 8016a48:	f000 fc52 	bl	80172f0 <__lshift>
 8016a4c:	f10a 0301 	add.w	r3, sl, #1
 8016a50:	9307      	str	r3, [sp, #28]
 8016a52:	9b00      	ldr	r3, [sp, #0]
 8016a54:	4453      	add	r3, sl
 8016a56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016a58:	9b02      	ldr	r3, [sp, #8]
 8016a5a:	f003 0301 	and.w	r3, r3, #1
 8016a5e:	462f      	mov	r7, r5
 8016a60:	930a      	str	r3, [sp, #40]	@ 0x28
 8016a62:	4605      	mov	r5, r0
 8016a64:	9b07      	ldr	r3, [sp, #28]
 8016a66:	4621      	mov	r1, r4
 8016a68:	3b01      	subs	r3, #1
 8016a6a:	4648      	mov	r0, r9
 8016a6c:	9300      	str	r3, [sp, #0]
 8016a6e:	f7ff fa99 	bl	8015fa4 <quorem>
 8016a72:	4639      	mov	r1, r7
 8016a74:	9002      	str	r0, [sp, #8]
 8016a76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016a7a:	4648      	mov	r0, r9
 8016a7c:	f000 fca4 	bl	80173c8 <__mcmp>
 8016a80:	462a      	mov	r2, r5
 8016a82:	9008      	str	r0, [sp, #32]
 8016a84:	4621      	mov	r1, r4
 8016a86:	4658      	mov	r0, fp
 8016a88:	f000 fcba 	bl	8017400 <__mdiff>
 8016a8c:	68c2      	ldr	r2, [r0, #12]
 8016a8e:	4606      	mov	r6, r0
 8016a90:	bb02      	cbnz	r2, 8016ad4 <_dtoa_r+0xa1c>
 8016a92:	4601      	mov	r1, r0
 8016a94:	4648      	mov	r0, r9
 8016a96:	f000 fc97 	bl	80173c8 <__mcmp>
 8016a9a:	4602      	mov	r2, r0
 8016a9c:	4631      	mov	r1, r6
 8016a9e:	4658      	mov	r0, fp
 8016aa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8016aa2:	f000 fa0d 	bl	8016ec0 <_Bfree>
 8016aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016aa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016aaa:	9e07      	ldr	r6, [sp, #28]
 8016aac:	ea43 0102 	orr.w	r1, r3, r2
 8016ab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ab2:	4319      	orrs	r1, r3
 8016ab4:	d110      	bne.n	8016ad8 <_dtoa_r+0xa20>
 8016ab6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016aba:	d029      	beq.n	8016b10 <_dtoa_r+0xa58>
 8016abc:	9b08      	ldr	r3, [sp, #32]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	dd02      	ble.n	8016ac8 <_dtoa_r+0xa10>
 8016ac2:	9b02      	ldr	r3, [sp, #8]
 8016ac4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8016ac8:	9b00      	ldr	r3, [sp, #0]
 8016aca:	f883 8000 	strb.w	r8, [r3]
 8016ace:	e63f      	b.n	8016750 <_dtoa_r+0x698>
 8016ad0:	4628      	mov	r0, r5
 8016ad2:	e7bb      	b.n	8016a4c <_dtoa_r+0x994>
 8016ad4:	2201      	movs	r2, #1
 8016ad6:	e7e1      	b.n	8016a9c <_dtoa_r+0x9e4>
 8016ad8:	9b08      	ldr	r3, [sp, #32]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	db04      	blt.n	8016ae8 <_dtoa_r+0xa30>
 8016ade:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016ae0:	430b      	orrs	r3, r1
 8016ae2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016ae4:	430b      	orrs	r3, r1
 8016ae6:	d120      	bne.n	8016b2a <_dtoa_r+0xa72>
 8016ae8:	2a00      	cmp	r2, #0
 8016aea:	dded      	ble.n	8016ac8 <_dtoa_r+0xa10>
 8016aec:	4649      	mov	r1, r9
 8016aee:	2201      	movs	r2, #1
 8016af0:	4658      	mov	r0, fp
 8016af2:	f000 fbfd 	bl	80172f0 <__lshift>
 8016af6:	4621      	mov	r1, r4
 8016af8:	4681      	mov	r9, r0
 8016afa:	f000 fc65 	bl	80173c8 <__mcmp>
 8016afe:	2800      	cmp	r0, #0
 8016b00:	dc03      	bgt.n	8016b0a <_dtoa_r+0xa52>
 8016b02:	d1e1      	bne.n	8016ac8 <_dtoa_r+0xa10>
 8016b04:	f018 0f01 	tst.w	r8, #1
 8016b08:	d0de      	beq.n	8016ac8 <_dtoa_r+0xa10>
 8016b0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016b0e:	d1d8      	bne.n	8016ac2 <_dtoa_r+0xa0a>
 8016b10:	9a00      	ldr	r2, [sp, #0]
 8016b12:	2339      	movs	r3, #57	@ 0x39
 8016b14:	7013      	strb	r3, [r2, #0]
 8016b16:	4633      	mov	r3, r6
 8016b18:	461e      	mov	r6, r3
 8016b1a:	3b01      	subs	r3, #1
 8016b1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016b20:	2a39      	cmp	r2, #57	@ 0x39
 8016b22:	d052      	beq.n	8016bca <_dtoa_r+0xb12>
 8016b24:	3201      	adds	r2, #1
 8016b26:	701a      	strb	r2, [r3, #0]
 8016b28:	e612      	b.n	8016750 <_dtoa_r+0x698>
 8016b2a:	2a00      	cmp	r2, #0
 8016b2c:	dd07      	ble.n	8016b3e <_dtoa_r+0xa86>
 8016b2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016b32:	d0ed      	beq.n	8016b10 <_dtoa_r+0xa58>
 8016b34:	9a00      	ldr	r2, [sp, #0]
 8016b36:	f108 0301 	add.w	r3, r8, #1
 8016b3a:	7013      	strb	r3, [r2, #0]
 8016b3c:	e608      	b.n	8016750 <_dtoa_r+0x698>
 8016b3e:	9b07      	ldr	r3, [sp, #28]
 8016b40:	9a07      	ldr	r2, [sp, #28]
 8016b42:	f803 8c01 	strb.w	r8, [r3, #-1]
 8016b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016b48:	4293      	cmp	r3, r2
 8016b4a:	d028      	beq.n	8016b9e <_dtoa_r+0xae6>
 8016b4c:	4649      	mov	r1, r9
 8016b4e:	2300      	movs	r3, #0
 8016b50:	220a      	movs	r2, #10
 8016b52:	4658      	mov	r0, fp
 8016b54:	f000 f9d6 	bl	8016f04 <__multadd>
 8016b58:	42af      	cmp	r7, r5
 8016b5a:	4681      	mov	r9, r0
 8016b5c:	f04f 0300 	mov.w	r3, #0
 8016b60:	f04f 020a 	mov.w	r2, #10
 8016b64:	4639      	mov	r1, r7
 8016b66:	4658      	mov	r0, fp
 8016b68:	d107      	bne.n	8016b7a <_dtoa_r+0xac2>
 8016b6a:	f000 f9cb 	bl	8016f04 <__multadd>
 8016b6e:	4607      	mov	r7, r0
 8016b70:	4605      	mov	r5, r0
 8016b72:	9b07      	ldr	r3, [sp, #28]
 8016b74:	3301      	adds	r3, #1
 8016b76:	9307      	str	r3, [sp, #28]
 8016b78:	e774      	b.n	8016a64 <_dtoa_r+0x9ac>
 8016b7a:	f000 f9c3 	bl	8016f04 <__multadd>
 8016b7e:	4629      	mov	r1, r5
 8016b80:	4607      	mov	r7, r0
 8016b82:	2300      	movs	r3, #0
 8016b84:	220a      	movs	r2, #10
 8016b86:	4658      	mov	r0, fp
 8016b88:	f000 f9bc 	bl	8016f04 <__multadd>
 8016b8c:	4605      	mov	r5, r0
 8016b8e:	e7f0      	b.n	8016b72 <_dtoa_r+0xaba>
 8016b90:	9b00      	ldr	r3, [sp, #0]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	bfcc      	ite	gt
 8016b96:	461e      	movgt	r6, r3
 8016b98:	2601      	movle	r6, #1
 8016b9a:	4456      	add	r6, sl
 8016b9c:	2700      	movs	r7, #0
 8016b9e:	4649      	mov	r1, r9
 8016ba0:	2201      	movs	r2, #1
 8016ba2:	4658      	mov	r0, fp
 8016ba4:	f000 fba4 	bl	80172f0 <__lshift>
 8016ba8:	4621      	mov	r1, r4
 8016baa:	4681      	mov	r9, r0
 8016bac:	f000 fc0c 	bl	80173c8 <__mcmp>
 8016bb0:	2800      	cmp	r0, #0
 8016bb2:	dcb0      	bgt.n	8016b16 <_dtoa_r+0xa5e>
 8016bb4:	d102      	bne.n	8016bbc <_dtoa_r+0xb04>
 8016bb6:	f018 0f01 	tst.w	r8, #1
 8016bba:	d1ac      	bne.n	8016b16 <_dtoa_r+0xa5e>
 8016bbc:	4633      	mov	r3, r6
 8016bbe:	461e      	mov	r6, r3
 8016bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016bc4:	2a30      	cmp	r2, #48	@ 0x30
 8016bc6:	d0fa      	beq.n	8016bbe <_dtoa_r+0xb06>
 8016bc8:	e5c2      	b.n	8016750 <_dtoa_r+0x698>
 8016bca:	459a      	cmp	sl, r3
 8016bcc:	d1a4      	bne.n	8016b18 <_dtoa_r+0xa60>
 8016bce:	9b04      	ldr	r3, [sp, #16]
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	9304      	str	r3, [sp, #16]
 8016bd4:	2331      	movs	r3, #49	@ 0x31
 8016bd6:	f88a 3000 	strb.w	r3, [sl]
 8016bda:	e5b9      	b.n	8016750 <_dtoa_r+0x698>
 8016bdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016bde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8016c3c <_dtoa_r+0xb84>
 8016be2:	b11b      	cbz	r3, 8016bec <_dtoa_r+0xb34>
 8016be4:	f10a 0308 	add.w	r3, sl, #8
 8016be8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016bea:	6013      	str	r3, [r2, #0]
 8016bec:	4650      	mov	r0, sl
 8016bee:	b019      	add	sp, #100	@ 0x64
 8016bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016bf6:	2b01      	cmp	r3, #1
 8016bf8:	f77f ae37 	ble.w	801686a <_dtoa_r+0x7b2>
 8016bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016bfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8016c00:	2001      	movs	r0, #1
 8016c02:	e655      	b.n	80168b0 <_dtoa_r+0x7f8>
 8016c04:	9b00      	ldr	r3, [sp, #0]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	f77f aed6 	ble.w	80169b8 <_dtoa_r+0x900>
 8016c0c:	4656      	mov	r6, sl
 8016c0e:	4621      	mov	r1, r4
 8016c10:	4648      	mov	r0, r9
 8016c12:	f7ff f9c7 	bl	8015fa4 <quorem>
 8016c16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016c1a:	f806 8b01 	strb.w	r8, [r6], #1
 8016c1e:	9b00      	ldr	r3, [sp, #0]
 8016c20:	eba6 020a 	sub.w	r2, r6, sl
 8016c24:	4293      	cmp	r3, r2
 8016c26:	ddb3      	ble.n	8016b90 <_dtoa_r+0xad8>
 8016c28:	4649      	mov	r1, r9
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	220a      	movs	r2, #10
 8016c2e:	4658      	mov	r0, fp
 8016c30:	f000 f968 	bl	8016f04 <__multadd>
 8016c34:	4681      	mov	r9, r0
 8016c36:	e7ea      	b.n	8016c0e <_dtoa_r+0xb56>
 8016c38:	0802f111 	.word	0x0802f111
 8016c3c:	0802f095 	.word	0x0802f095

08016c40 <_free_r>:
 8016c40:	b538      	push	{r3, r4, r5, lr}
 8016c42:	4605      	mov	r5, r0
 8016c44:	2900      	cmp	r1, #0
 8016c46:	d041      	beq.n	8016ccc <_free_r+0x8c>
 8016c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c4c:	1f0c      	subs	r4, r1, #4
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	bfb8      	it	lt
 8016c52:	18e4      	addlt	r4, r4, r3
 8016c54:	f000 f8e8 	bl	8016e28 <__malloc_lock>
 8016c58:	4a1d      	ldr	r2, [pc, #116]	@ (8016cd0 <_free_r+0x90>)
 8016c5a:	6813      	ldr	r3, [r2, #0]
 8016c5c:	b933      	cbnz	r3, 8016c6c <_free_r+0x2c>
 8016c5e:	6063      	str	r3, [r4, #4]
 8016c60:	6014      	str	r4, [r2, #0]
 8016c62:	4628      	mov	r0, r5
 8016c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c68:	f000 b8e4 	b.w	8016e34 <__malloc_unlock>
 8016c6c:	42a3      	cmp	r3, r4
 8016c6e:	d908      	bls.n	8016c82 <_free_r+0x42>
 8016c70:	6820      	ldr	r0, [r4, #0]
 8016c72:	1821      	adds	r1, r4, r0
 8016c74:	428b      	cmp	r3, r1
 8016c76:	bf01      	itttt	eq
 8016c78:	6819      	ldreq	r1, [r3, #0]
 8016c7a:	685b      	ldreq	r3, [r3, #4]
 8016c7c:	1809      	addeq	r1, r1, r0
 8016c7e:	6021      	streq	r1, [r4, #0]
 8016c80:	e7ed      	b.n	8016c5e <_free_r+0x1e>
 8016c82:	461a      	mov	r2, r3
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	b10b      	cbz	r3, 8016c8c <_free_r+0x4c>
 8016c88:	42a3      	cmp	r3, r4
 8016c8a:	d9fa      	bls.n	8016c82 <_free_r+0x42>
 8016c8c:	6811      	ldr	r1, [r2, #0]
 8016c8e:	1850      	adds	r0, r2, r1
 8016c90:	42a0      	cmp	r0, r4
 8016c92:	d10b      	bne.n	8016cac <_free_r+0x6c>
 8016c94:	6820      	ldr	r0, [r4, #0]
 8016c96:	4401      	add	r1, r0
 8016c98:	1850      	adds	r0, r2, r1
 8016c9a:	4283      	cmp	r3, r0
 8016c9c:	6011      	str	r1, [r2, #0]
 8016c9e:	d1e0      	bne.n	8016c62 <_free_r+0x22>
 8016ca0:	6818      	ldr	r0, [r3, #0]
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	6053      	str	r3, [r2, #4]
 8016ca6:	4408      	add	r0, r1
 8016ca8:	6010      	str	r0, [r2, #0]
 8016caa:	e7da      	b.n	8016c62 <_free_r+0x22>
 8016cac:	d902      	bls.n	8016cb4 <_free_r+0x74>
 8016cae:	230c      	movs	r3, #12
 8016cb0:	602b      	str	r3, [r5, #0]
 8016cb2:	e7d6      	b.n	8016c62 <_free_r+0x22>
 8016cb4:	6820      	ldr	r0, [r4, #0]
 8016cb6:	1821      	adds	r1, r4, r0
 8016cb8:	428b      	cmp	r3, r1
 8016cba:	bf04      	itt	eq
 8016cbc:	6819      	ldreq	r1, [r3, #0]
 8016cbe:	685b      	ldreq	r3, [r3, #4]
 8016cc0:	6063      	str	r3, [r4, #4]
 8016cc2:	bf04      	itt	eq
 8016cc4:	1809      	addeq	r1, r1, r0
 8016cc6:	6021      	streq	r1, [r4, #0]
 8016cc8:	6054      	str	r4, [r2, #4]
 8016cca:	e7ca      	b.n	8016c62 <_free_r+0x22>
 8016ccc:	bd38      	pop	{r3, r4, r5, pc}
 8016cce:	bf00      	nop
 8016cd0:	20024bc8 	.word	0x20024bc8

08016cd4 <malloc>:
 8016cd4:	4b02      	ldr	r3, [pc, #8]	@ (8016ce0 <malloc+0xc>)
 8016cd6:	4601      	mov	r1, r0
 8016cd8:	6818      	ldr	r0, [r3, #0]
 8016cda:	f000 b825 	b.w	8016d28 <_malloc_r>
 8016cde:	bf00      	nop
 8016ce0:	20000140 	.word	0x20000140

08016ce4 <sbrk_aligned>:
 8016ce4:	b570      	push	{r4, r5, r6, lr}
 8016ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8016d24 <sbrk_aligned+0x40>)
 8016ce8:	460c      	mov	r4, r1
 8016cea:	6831      	ldr	r1, [r6, #0]
 8016cec:	4605      	mov	r5, r0
 8016cee:	b911      	cbnz	r1, 8016cf6 <sbrk_aligned+0x12>
 8016cf0:	f001 fe90 	bl	8018a14 <_sbrk_r>
 8016cf4:	6030      	str	r0, [r6, #0]
 8016cf6:	4621      	mov	r1, r4
 8016cf8:	4628      	mov	r0, r5
 8016cfa:	f001 fe8b 	bl	8018a14 <_sbrk_r>
 8016cfe:	1c43      	adds	r3, r0, #1
 8016d00:	d103      	bne.n	8016d0a <sbrk_aligned+0x26>
 8016d02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016d06:	4620      	mov	r0, r4
 8016d08:	bd70      	pop	{r4, r5, r6, pc}
 8016d0a:	1cc4      	adds	r4, r0, #3
 8016d0c:	f024 0403 	bic.w	r4, r4, #3
 8016d10:	42a0      	cmp	r0, r4
 8016d12:	d0f8      	beq.n	8016d06 <sbrk_aligned+0x22>
 8016d14:	1a21      	subs	r1, r4, r0
 8016d16:	4628      	mov	r0, r5
 8016d18:	f001 fe7c 	bl	8018a14 <_sbrk_r>
 8016d1c:	3001      	adds	r0, #1
 8016d1e:	d1f2      	bne.n	8016d06 <sbrk_aligned+0x22>
 8016d20:	e7ef      	b.n	8016d02 <sbrk_aligned+0x1e>
 8016d22:	bf00      	nop
 8016d24:	20024bc4 	.word	0x20024bc4

08016d28 <_malloc_r>:
 8016d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d2c:	1ccd      	adds	r5, r1, #3
 8016d2e:	f025 0503 	bic.w	r5, r5, #3
 8016d32:	3508      	adds	r5, #8
 8016d34:	2d0c      	cmp	r5, #12
 8016d36:	bf38      	it	cc
 8016d38:	250c      	movcc	r5, #12
 8016d3a:	2d00      	cmp	r5, #0
 8016d3c:	4606      	mov	r6, r0
 8016d3e:	db01      	blt.n	8016d44 <_malloc_r+0x1c>
 8016d40:	42a9      	cmp	r1, r5
 8016d42:	d904      	bls.n	8016d4e <_malloc_r+0x26>
 8016d44:	230c      	movs	r3, #12
 8016d46:	6033      	str	r3, [r6, #0]
 8016d48:	2000      	movs	r0, #0
 8016d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016e24 <_malloc_r+0xfc>
 8016d52:	f000 f869 	bl	8016e28 <__malloc_lock>
 8016d56:	f8d8 3000 	ldr.w	r3, [r8]
 8016d5a:	461c      	mov	r4, r3
 8016d5c:	bb44      	cbnz	r4, 8016db0 <_malloc_r+0x88>
 8016d5e:	4629      	mov	r1, r5
 8016d60:	4630      	mov	r0, r6
 8016d62:	f7ff ffbf 	bl	8016ce4 <sbrk_aligned>
 8016d66:	1c43      	adds	r3, r0, #1
 8016d68:	4604      	mov	r4, r0
 8016d6a:	d158      	bne.n	8016e1e <_malloc_r+0xf6>
 8016d6c:	f8d8 4000 	ldr.w	r4, [r8]
 8016d70:	4627      	mov	r7, r4
 8016d72:	2f00      	cmp	r7, #0
 8016d74:	d143      	bne.n	8016dfe <_malloc_r+0xd6>
 8016d76:	2c00      	cmp	r4, #0
 8016d78:	d04b      	beq.n	8016e12 <_malloc_r+0xea>
 8016d7a:	6823      	ldr	r3, [r4, #0]
 8016d7c:	4639      	mov	r1, r7
 8016d7e:	4630      	mov	r0, r6
 8016d80:	eb04 0903 	add.w	r9, r4, r3
 8016d84:	f001 fe46 	bl	8018a14 <_sbrk_r>
 8016d88:	4581      	cmp	r9, r0
 8016d8a:	d142      	bne.n	8016e12 <_malloc_r+0xea>
 8016d8c:	6821      	ldr	r1, [r4, #0]
 8016d8e:	1a6d      	subs	r5, r5, r1
 8016d90:	4629      	mov	r1, r5
 8016d92:	4630      	mov	r0, r6
 8016d94:	f7ff ffa6 	bl	8016ce4 <sbrk_aligned>
 8016d98:	3001      	adds	r0, #1
 8016d9a:	d03a      	beq.n	8016e12 <_malloc_r+0xea>
 8016d9c:	6823      	ldr	r3, [r4, #0]
 8016d9e:	442b      	add	r3, r5
 8016da0:	6023      	str	r3, [r4, #0]
 8016da2:	f8d8 3000 	ldr.w	r3, [r8]
 8016da6:	685a      	ldr	r2, [r3, #4]
 8016da8:	bb62      	cbnz	r2, 8016e04 <_malloc_r+0xdc>
 8016daa:	f8c8 7000 	str.w	r7, [r8]
 8016dae:	e00f      	b.n	8016dd0 <_malloc_r+0xa8>
 8016db0:	6822      	ldr	r2, [r4, #0]
 8016db2:	1b52      	subs	r2, r2, r5
 8016db4:	d420      	bmi.n	8016df8 <_malloc_r+0xd0>
 8016db6:	2a0b      	cmp	r2, #11
 8016db8:	d917      	bls.n	8016dea <_malloc_r+0xc2>
 8016dba:	1961      	adds	r1, r4, r5
 8016dbc:	42a3      	cmp	r3, r4
 8016dbe:	6025      	str	r5, [r4, #0]
 8016dc0:	bf18      	it	ne
 8016dc2:	6059      	strne	r1, [r3, #4]
 8016dc4:	6863      	ldr	r3, [r4, #4]
 8016dc6:	bf08      	it	eq
 8016dc8:	f8c8 1000 	streq.w	r1, [r8]
 8016dcc:	5162      	str	r2, [r4, r5]
 8016dce:	604b      	str	r3, [r1, #4]
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	f000 f82f 	bl	8016e34 <__malloc_unlock>
 8016dd6:	f104 000b 	add.w	r0, r4, #11
 8016dda:	1d23      	adds	r3, r4, #4
 8016ddc:	f020 0007 	bic.w	r0, r0, #7
 8016de0:	1ac2      	subs	r2, r0, r3
 8016de2:	bf1c      	itt	ne
 8016de4:	1a1b      	subne	r3, r3, r0
 8016de6:	50a3      	strne	r3, [r4, r2]
 8016de8:	e7af      	b.n	8016d4a <_malloc_r+0x22>
 8016dea:	6862      	ldr	r2, [r4, #4]
 8016dec:	42a3      	cmp	r3, r4
 8016dee:	bf0c      	ite	eq
 8016df0:	f8c8 2000 	streq.w	r2, [r8]
 8016df4:	605a      	strne	r2, [r3, #4]
 8016df6:	e7eb      	b.n	8016dd0 <_malloc_r+0xa8>
 8016df8:	4623      	mov	r3, r4
 8016dfa:	6864      	ldr	r4, [r4, #4]
 8016dfc:	e7ae      	b.n	8016d5c <_malloc_r+0x34>
 8016dfe:	463c      	mov	r4, r7
 8016e00:	687f      	ldr	r7, [r7, #4]
 8016e02:	e7b6      	b.n	8016d72 <_malloc_r+0x4a>
 8016e04:	461a      	mov	r2, r3
 8016e06:	685b      	ldr	r3, [r3, #4]
 8016e08:	42a3      	cmp	r3, r4
 8016e0a:	d1fb      	bne.n	8016e04 <_malloc_r+0xdc>
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	6053      	str	r3, [r2, #4]
 8016e10:	e7de      	b.n	8016dd0 <_malloc_r+0xa8>
 8016e12:	230c      	movs	r3, #12
 8016e14:	6033      	str	r3, [r6, #0]
 8016e16:	4630      	mov	r0, r6
 8016e18:	f000 f80c 	bl	8016e34 <__malloc_unlock>
 8016e1c:	e794      	b.n	8016d48 <_malloc_r+0x20>
 8016e1e:	6005      	str	r5, [r0, #0]
 8016e20:	e7d6      	b.n	8016dd0 <_malloc_r+0xa8>
 8016e22:	bf00      	nop
 8016e24:	20024bc8 	.word	0x20024bc8

08016e28 <__malloc_lock>:
 8016e28:	4801      	ldr	r0, [pc, #4]	@ (8016e30 <__malloc_lock+0x8>)
 8016e2a:	f7ff b8a4 	b.w	8015f76 <__retarget_lock_acquire_recursive>
 8016e2e:	bf00      	nop
 8016e30:	20024bc0 	.word	0x20024bc0

08016e34 <__malloc_unlock>:
 8016e34:	4801      	ldr	r0, [pc, #4]	@ (8016e3c <__malloc_unlock+0x8>)
 8016e36:	f7ff b89f 	b.w	8015f78 <__retarget_lock_release_recursive>
 8016e3a:	bf00      	nop
 8016e3c:	20024bc0 	.word	0x20024bc0

08016e40 <_Balloc>:
 8016e40:	b570      	push	{r4, r5, r6, lr}
 8016e42:	69c6      	ldr	r6, [r0, #28]
 8016e44:	4604      	mov	r4, r0
 8016e46:	460d      	mov	r5, r1
 8016e48:	b976      	cbnz	r6, 8016e68 <_Balloc+0x28>
 8016e4a:	2010      	movs	r0, #16
 8016e4c:	f7ff ff42 	bl	8016cd4 <malloc>
 8016e50:	4602      	mov	r2, r0
 8016e52:	61e0      	str	r0, [r4, #28]
 8016e54:	b920      	cbnz	r0, 8016e60 <_Balloc+0x20>
 8016e56:	4b18      	ldr	r3, [pc, #96]	@ (8016eb8 <_Balloc+0x78>)
 8016e58:	4818      	ldr	r0, [pc, #96]	@ (8016ebc <_Balloc+0x7c>)
 8016e5a:	216b      	movs	r1, #107	@ 0x6b
 8016e5c:	f001 fdf4 	bl	8018a48 <__assert_func>
 8016e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016e64:	6006      	str	r6, [r0, #0]
 8016e66:	60c6      	str	r6, [r0, #12]
 8016e68:	69e6      	ldr	r6, [r4, #28]
 8016e6a:	68f3      	ldr	r3, [r6, #12]
 8016e6c:	b183      	cbz	r3, 8016e90 <_Balloc+0x50>
 8016e6e:	69e3      	ldr	r3, [r4, #28]
 8016e70:	68db      	ldr	r3, [r3, #12]
 8016e72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016e76:	b9b8      	cbnz	r0, 8016ea8 <_Balloc+0x68>
 8016e78:	2101      	movs	r1, #1
 8016e7a:	fa01 f605 	lsl.w	r6, r1, r5
 8016e7e:	1d72      	adds	r2, r6, #5
 8016e80:	0092      	lsls	r2, r2, #2
 8016e82:	4620      	mov	r0, r4
 8016e84:	f001 fdfe 	bl	8018a84 <_calloc_r>
 8016e88:	b160      	cbz	r0, 8016ea4 <_Balloc+0x64>
 8016e8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016e8e:	e00e      	b.n	8016eae <_Balloc+0x6e>
 8016e90:	2221      	movs	r2, #33	@ 0x21
 8016e92:	2104      	movs	r1, #4
 8016e94:	4620      	mov	r0, r4
 8016e96:	f001 fdf5 	bl	8018a84 <_calloc_r>
 8016e9a:	69e3      	ldr	r3, [r4, #28]
 8016e9c:	60f0      	str	r0, [r6, #12]
 8016e9e:	68db      	ldr	r3, [r3, #12]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d1e4      	bne.n	8016e6e <_Balloc+0x2e>
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	bd70      	pop	{r4, r5, r6, pc}
 8016ea8:	6802      	ldr	r2, [r0, #0]
 8016eaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016eae:	2300      	movs	r3, #0
 8016eb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016eb4:	e7f7      	b.n	8016ea6 <_Balloc+0x66>
 8016eb6:	bf00      	nop
 8016eb8:	0802f0a2 	.word	0x0802f0a2
 8016ebc:	0802f122 	.word	0x0802f122

08016ec0 <_Bfree>:
 8016ec0:	b570      	push	{r4, r5, r6, lr}
 8016ec2:	69c6      	ldr	r6, [r0, #28]
 8016ec4:	4605      	mov	r5, r0
 8016ec6:	460c      	mov	r4, r1
 8016ec8:	b976      	cbnz	r6, 8016ee8 <_Bfree+0x28>
 8016eca:	2010      	movs	r0, #16
 8016ecc:	f7ff ff02 	bl	8016cd4 <malloc>
 8016ed0:	4602      	mov	r2, r0
 8016ed2:	61e8      	str	r0, [r5, #28]
 8016ed4:	b920      	cbnz	r0, 8016ee0 <_Bfree+0x20>
 8016ed6:	4b09      	ldr	r3, [pc, #36]	@ (8016efc <_Bfree+0x3c>)
 8016ed8:	4809      	ldr	r0, [pc, #36]	@ (8016f00 <_Bfree+0x40>)
 8016eda:	218f      	movs	r1, #143	@ 0x8f
 8016edc:	f001 fdb4 	bl	8018a48 <__assert_func>
 8016ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016ee4:	6006      	str	r6, [r0, #0]
 8016ee6:	60c6      	str	r6, [r0, #12]
 8016ee8:	b13c      	cbz	r4, 8016efa <_Bfree+0x3a>
 8016eea:	69eb      	ldr	r3, [r5, #28]
 8016eec:	6862      	ldr	r2, [r4, #4]
 8016eee:	68db      	ldr	r3, [r3, #12]
 8016ef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016ef4:	6021      	str	r1, [r4, #0]
 8016ef6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016efa:	bd70      	pop	{r4, r5, r6, pc}
 8016efc:	0802f0a2 	.word	0x0802f0a2
 8016f00:	0802f122 	.word	0x0802f122

08016f04 <__multadd>:
 8016f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f08:	690d      	ldr	r5, [r1, #16]
 8016f0a:	4607      	mov	r7, r0
 8016f0c:	460c      	mov	r4, r1
 8016f0e:	461e      	mov	r6, r3
 8016f10:	f101 0c14 	add.w	ip, r1, #20
 8016f14:	2000      	movs	r0, #0
 8016f16:	f8dc 3000 	ldr.w	r3, [ip]
 8016f1a:	b299      	uxth	r1, r3
 8016f1c:	fb02 6101 	mla	r1, r2, r1, r6
 8016f20:	0c1e      	lsrs	r6, r3, #16
 8016f22:	0c0b      	lsrs	r3, r1, #16
 8016f24:	fb02 3306 	mla	r3, r2, r6, r3
 8016f28:	b289      	uxth	r1, r1
 8016f2a:	3001      	adds	r0, #1
 8016f2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016f30:	4285      	cmp	r5, r0
 8016f32:	f84c 1b04 	str.w	r1, [ip], #4
 8016f36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016f3a:	dcec      	bgt.n	8016f16 <__multadd+0x12>
 8016f3c:	b30e      	cbz	r6, 8016f82 <__multadd+0x7e>
 8016f3e:	68a3      	ldr	r3, [r4, #8]
 8016f40:	42ab      	cmp	r3, r5
 8016f42:	dc19      	bgt.n	8016f78 <__multadd+0x74>
 8016f44:	6861      	ldr	r1, [r4, #4]
 8016f46:	4638      	mov	r0, r7
 8016f48:	3101      	adds	r1, #1
 8016f4a:	f7ff ff79 	bl	8016e40 <_Balloc>
 8016f4e:	4680      	mov	r8, r0
 8016f50:	b928      	cbnz	r0, 8016f5e <__multadd+0x5a>
 8016f52:	4602      	mov	r2, r0
 8016f54:	4b0c      	ldr	r3, [pc, #48]	@ (8016f88 <__multadd+0x84>)
 8016f56:	480d      	ldr	r0, [pc, #52]	@ (8016f8c <__multadd+0x88>)
 8016f58:	21ba      	movs	r1, #186	@ 0xba
 8016f5a:	f001 fd75 	bl	8018a48 <__assert_func>
 8016f5e:	6922      	ldr	r2, [r4, #16]
 8016f60:	3202      	adds	r2, #2
 8016f62:	f104 010c 	add.w	r1, r4, #12
 8016f66:	0092      	lsls	r2, r2, #2
 8016f68:	300c      	adds	r0, #12
 8016f6a:	f7ff f806 	bl	8015f7a <memcpy>
 8016f6e:	4621      	mov	r1, r4
 8016f70:	4638      	mov	r0, r7
 8016f72:	f7ff ffa5 	bl	8016ec0 <_Bfree>
 8016f76:	4644      	mov	r4, r8
 8016f78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016f7c:	3501      	adds	r5, #1
 8016f7e:	615e      	str	r6, [r3, #20]
 8016f80:	6125      	str	r5, [r4, #16]
 8016f82:	4620      	mov	r0, r4
 8016f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f88:	0802f111 	.word	0x0802f111
 8016f8c:	0802f122 	.word	0x0802f122

08016f90 <__s2b>:
 8016f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f94:	460c      	mov	r4, r1
 8016f96:	4615      	mov	r5, r2
 8016f98:	461f      	mov	r7, r3
 8016f9a:	2209      	movs	r2, #9
 8016f9c:	3308      	adds	r3, #8
 8016f9e:	4606      	mov	r6, r0
 8016fa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8016fa4:	2100      	movs	r1, #0
 8016fa6:	2201      	movs	r2, #1
 8016fa8:	429a      	cmp	r2, r3
 8016faa:	db09      	blt.n	8016fc0 <__s2b+0x30>
 8016fac:	4630      	mov	r0, r6
 8016fae:	f7ff ff47 	bl	8016e40 <_Balloc>
 8016fb2:	b940      	cbnz	r0, 8016fc6 <__s2b+0x36>
 8016fb4:	4602      	mov	r2, r0
 8016fb6:	4b19      	ldr	r3, [pc, #100]	@ (801701c <__s2b+0x8c>)
 8016fb8:	4819      	ldr	r0, [pc, #100]	@ (8017020 <__s2b+0x90>)
 8016fba:	21d3      	movs	r1, #211	@ 0xd3
 8016fbc:	f001 fd44 	bl	8018a48 <__assert_func>
 8016fc0:	0052      	lsls	r2, r2, #1
 8016fc2:	3101      	adds	r1, #1
 8016fc4:	e7f0      	b.n	8016fa8 <__s2b+0x18>
 8016fc6:	9b08      	ldr	r3, [sp, #32]
 8016fc8:	6143      	str	r3, [r0, #20]
 8016fca:	2d09      	cmp	r5, #9
 8016fcc:	f04f 0301 	mov.w	r3, #1
 8016fd0:	6103      	str	r3, [r0, #16]
 8016fd2:	dd16      	ble.n	8017002 <__s2b+0x72>
 8016fd4:	f104 0909 	add.w	r9, r4, #9
 8016fd8:	46c8      	mov	r8, r9
 8016fda:	442c      	add	r4, r5
 8016fdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016fe0:	4601      	mov	r1, r0
 8016fe2:	3b30      	subs	r3, #48	@ 0x30
 8016fe4:	220a      	movs	r2, #10
 8016fe6:	4630      	mov	r0, r6
 8016fe8:	f7ff ff8c 	bl	8016f04 <__multadd>
 8016fec:	45a0      	cmp	r8, r4
 8016fee:	d1f5      	bne.n	8016fdc <__s2b+0x4c>
 8016ff0:	f1a5 0408 	sub.w	r4, r5, #8
 8016ff4:	444c      	add	r4, r9
 8016ff6:	1b2d      	subs	r5, r5, r4
 8016ff8:	1963      	adds	r3, r4, r5
 8016ffa:	42bb      	cmp	r3, r7
 8016ffc:	db04      	blt.n	8017008 <__s2b+0x78>
 8016ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017002:	340a      	adds	r4, #10
 8017004:	2509      	movs	r5, #9
 8017006:	e7f6      	b.n	8016ff6 <__s2b+0x66>
 8017008:	f814 3b01 	ldrb.w	r3, [r4], #1
 801700c:	4601      	mov	r1, r0
 801700e:	3b30      	subs	r3, #48	@ 0x30
 8017010:	220a      	movs	r2, #10
 8017012:	4630      	mov	r0, r6
 8017014:	f7ff ff76 	bl	8016f04 <__multadd>
 8017018:	e7ee      	b.n	8016ff8 <__s2b+0x68>
 801701a:	bf00      	nop
 801701c:	0802f111 	.word	0x0802f111
 8017020:	0802f122 	.word	0x0802f122

08017024 <__hi0bits>:
 8017024:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017028:	4603      	mov	r3, r0
 801702a:	bf36      	itet	cc
 801702c:	0403      	lslcc	r3, r0, #16
 801702e:	2000      	movcs	r0, #0
 8017030:	2010      	movcc	r0, #16
 8017032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017036:	bf3c      	itt	cc
 8017038:	021b      	lslcc	r3, r3, #8
 801703a:	3008      	addcc	r0, #8
 801703c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017040:	bf3c      	itt	cc
 8017042:	011b      	lslcc	r3, r3, #4
 8017044:	3004      	addcc	r0, #4
 8017046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801704a:	bf3c      	itt	cc
 801704c:	009b      	lslcc	r3, r3, #2
 801704e:	3002      	addcc	r0, #2
 8017050:	2b00      	cmp	r3, #0
 8017052:	db05      	blt.n	8017060 <__hi0bits+0x3c>
 8017054:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017058:	f100 0001 	add.w	r0, r0, #1
 801705c:	bf08      	it	eq
 801705e:	2020      	moveq	r0, #32
 8017060:	4770      	bx	lr

08017062 <__lo0bits>:
 8017062:	6803      	ldr	r3, [r0, #0]
 8017064:	4602      	mov	r2, r0
 8017066:	f013 0007 	ands.w	r0, r3, #7
 801706a:	d00b      	beq.n	8017084 <__lo0bits+0x22>
 801706c:	07d9      	lsls	r1, r3, #31
 801706e:	d421      	bmi.n	80170b4 <__lo0bits+0x52>
 8017070:	0798      	lsls	r0, r3, #30
 8017072:	bf49      	itett	mi
 8017074:	085b      	lsrmi	r3, r3, #1
 8017076:	089b      	lsrpl	r3, r3, #2
 8017078:	2001      	movmi	r0, #1
 801707a:	6013      	strmi	r3, [r2, #0]
 801707c:	bf5c      	itt	pl
 801707e:	6013      	strpl	r3, [r2, #0]
 8017080:	2002      	movpl	r0, #2
 8017082:	4770      	bx	lr
 8017084:	b299      	uxth	r1, r3
 8017086:	b909      	cbnz	r1, 801708c <__lo0bits+0x2a>
 8017088:	0c1b      	lsrs	r3, r3, #16
 801708a:	2010      	movs	r0, #16
 801708c:	b2d9      	uxtb	r1, r3
 801708e:	b909      	cbnz	r1, 8017094 <__lo0bits+0x32>
 8017090:	3008      	adds	r0, #8
 8017092:	0a1b      	lsrs	r3, r3, #8
 8017094:	0719      	lsls	r1, r3, #28
 8017096:	bf04      	itt	eq
 8017098:	091b      	lsreq	r3, r3, #4
 801709a:	3004      	addeq	r0, #4
 801709c:	0799      	lsls	r1, r3, #30
 801709e:	bf04      	itt	eq
 80170a0:	089b      	lsreq	r3, r3, #2
 80170a2:	3002      	addeq	r0, #2
 80170a4:	07d9      	lsls	r1, r3, #31
 80170a6:	d403      	bmi.n	80170b0 <__lo0bits+0x4e>
 80170a8:	085b      	lsrs	r3, r3, #1
 80170aa:	f100 0001 	add.w	r0, r0, #1
 80170ae:	d003      	beq.n	80170b8 <__lo0bits+0x56>
 80170b0:	6013      	str	r3, [r2, #0]
 80170b2:	4770      	bx	lr
 80170b4:	2000      	movs	r0, #0
 80170b6:	4770      	bx	lr
 80170b8:	2020      	movs	r0, #32
 80170ba:	4770      	bx	lr

080170bc <__i2b>:
 80170bc:	b510      	push	{r4, lr}
 80170be:	460c      	mov	r4, r1
 80170c0:	2101      	movs	r1, #1
 80170c2:	f7ff febd 	bl	8016e40 <_Balloc>
 80170c6:	4602      	mov	r2, r0
 80170c8:	b928      	cbnz	r0, 80170d6 <__i2b+0x1a>
 80170ca:	4b05      	ldr	r3, [pc, #20]	@ (80170e0 <__i2b+0x24>)
 80170cc:	4805      	ldr	r0, [pc, #20]	@ (80170e4 <__i2b+0x28>)
 80170ce:	f240 1145 	movw	r1, #325	@ 0x145
 80170d2:	f001 fcb9 	bl	8018a48 <__assert_func>
 80170d6:	2301      	movs	r3, #1
 80170d8:	6144      	str	r4, [r0, #20]
 80170da:	6103      	str	r3, [r0, #16]
 80170dc:	bd10      	pop	{r4, pc}
 80170de:	bf00      	nop
 80170e0:	0802f111 	.word	0x0802f111
 80170e4:	0802f122 	.word	0x0802f122

080170e8 <__multiply>:
 80170e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170ec:	4614      	mov	r4, r2
 80170ee:	690a      	ldr	r2, [r1, #16]
 80170f0:	6923      	ldr	r3, [r4, #16]
 80170f2:	429a      	cmp	r2, r3
 80170f4:	bfa8      	it	ge
 80170f6:	4623      	movge	r3, r4
 80170f8:	460f      	mov	r7, r1
 80170fa:	bfa4      	itt	ge
 80170fc:	460c      	movge	r4, r1
 80170fe:	461f      	movge	r7, r3
 8017100:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017104:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017108:	68a3      	ldr	r3, [r4, #8]
 801710a:	6861      	ldr	r1, [r4, #4]
 801710c:	eb0a 0609 	add.w	r6, sl, r9
 8017110:	42b3      	cmp	r3, r6
 8017112:	b085      	sub	sp, #20
 8017114:	bfb8      	it	lt
 8017116:	3101      	addlt	r1, #1
 8017118:	f7ff fe92 	bl	8016e40 <_Balloc>
 801711c:	b930      	cbnz	r0, 801712c <__multiply+0x44>
 801711e:	4602      	mov	r2, r0
 8017120:	4b44      	ldr	r3, [pc, #272]	@ (8017234 <__multiply+0x14c>)
 8017122:	4845      	ldr	r0, [pc, #276]	@ (8017238 <__multiply+0x150>)
 8017124:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017128:	f001 fc8e 	bl	8018a48 <__assert_func>
 801712c:	f100 0514 	add.w	r5, r0, #20
 8017130:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017134:	462b      	mov	r3, r5
 8017136:	2200      	movs	r2, #0
 8017138:	4543      	cmp	r3, r8
 801713a:	d321      	bcc.n	8017180 <__multiply+0x98>
 801713c:	f107 0114 	add.w	r1, r7, #20
 8017140:	f104 0214 	add.w	r2, r4, #20
 8017144:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017148:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801714c:	9302      	str	r3, [sp, #8]
 801714e:	1b13      	subs	r3, r2, r4
 8017150:	3b15      	subs	r3, #21
 8017152:	f023 0303 	bic.w	r3, r3, #3
 8017156:	3304      	adds	r3, #4
 8017158:	f104 0715 	add.w	r7, r4, #21
 801715c:	42ba      	cmp	r2, r7
 801715e:	bf38      	it	cc
 8017160:	2304      	movcc	r3, #4
 8017162:	9301      	str	r3, [sp, #4]
 8017164:	9b02      	ldr	r3, [sp, #8]
 8017166:	9103      	str	r1, [sp, #12]
 8017168:	428b      	cmp	r3, r1
 801716a:	d80c      	bhi.n	8017186 <__multiply+0x9e>
 801716c:	2e00      	cmp	r6, #0
 801716e:	dd03      	ble.n	8017178 <__multiply+0x90>
 8017170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017174:	2b00      	cmp	r3, #0
 8017176:	d05b      	beq.n	8017230 <__multiply+0x148>
 8017178:	6106      	str	r6, [r0, #16]
 801717a:	b005      	add	sp, #20
 801717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017180:	f843 2b04 	str.w	r2, [r3], #4
 8017184:	e7d8      	b.n	8017138 <__multiply+0x50>
 8017186:	f8b1 a000 	ldrh.w	sl, [r1]
 801718a:	f1ba 0f00 	cmp.w	sl, #0
 801718e:	d024      	beq.n	80171da <__multiply+0xf2>
 8017190:	f104 0e14 	add.w	lr, r4, #20
 8017194:	46a9      	mov	r9, r5
 8017196:	f04f 0c00 	mov.w	ip, #0
 801719a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801719e:	f8d9 3000 	ldr.w	r3, [r9]
 80171a2:	fa1f fb87 	uxth.w	fp, r7
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80171ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80171b0:	f8d9 7000 	ldr.w	r7, [r9]
 80171b4:	4463      	add	r3, ip
 80171b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80171ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80171be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80171c8:	4572      	cmp	r2, lr
 80171ca:	f849 3b04 	str.w	r3, [r9], #4
 80171ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80171d2:	d8e2      	bhi.n	801719a <__multiply+0xb2>
 80171d4:	9b01      	ldr	r3, [sp, #4]
 80171d6:	f845 c003 	str.w	ip, [r5, r3]
 80171da:	9b03      	ldr	r3, [sp, #12]
 80171dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80171e0:	3104      	adds	r1, #4
 80171e2:	f1b9 0f00 	cmp.w	r9, #0
 80171e6:	d021      	beq.n	801722c <__multiply+0x144>
 80171e8:	682b      	ldr	r3, [r5, #0]
 80171ea:	f104 0c14 	add.w	ip, r4, #20
 80171ee:	46ae      	mov	lr, r5
 80171f0:	f04f 0a00 	mov.w	sl, #0
 80171f4:	f8bc b000 	ldrh.w	fp, [ip]
 80171f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80171fc:	fb09 770b 	mla	r7, r9, fp, r7
 8017200:	4457      	add	r7, sl
 8017202:	b29b      	uxth	r3, r3
 8017204:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017208:	f84e 3b04 	str.w	r3, [lr], #4
 801720c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017210:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017214:	f8be 3000 	ldrh.w	r3, [lr]
 8017218:	fb09 330a 	mla	r3, r9, sl, r3
 801721c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017220:	4562      	cmp	r2, ip
 8017222:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017226:	d8e5      	bhi.n	80171f4 <__multiply+0x10c>
 8017228:	9f01      	ldr	r7, [sp, #4]
 801722a:	51eb      	str	r3, [r5, r7]
 801722c:	3504      	adds	r5, #4
 801722e:	e799      	b.n	8017164 <__multiply+0x7c>
 8017230:	3e01      	subs	r6, #1
 8017232:	e79b      	b.n	801716c <__multiply+0x84>
 8017234:	0802f111 	.word	0x0802f111
 8017238:	0802f122 	.word	0x0802f122

0801723c <__pow5mult>:
 801723c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017240:	4615      	mov	r5, r2
 8017242:	f012 0203 	ands.w	r2, r2, #3
 8017246:	4607      	mov	r7, r0
 8017248:	460e      	mov	r6, r1
 801724a:	d007      	beq.n	801725c <__pow5mult+0x20>
 801724c:	4c25      	ldr	r4, [pc, #148]	@ (80172e4 <__pow5mult+0xa8>)
 801724e:	3a01      	subs	r2, #1
 8017250:	2300      	movs	r3, #0
 8017252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017256:	f7ff fe55 	bl	8016f04 <__multadd>
 801725a:	4606      	mov	r6, r0
 801725c:	10ad      	asrs	r5, r5, #2
 801725e:	d03d      	beq.n	80172dc <__pow5mult+0xa0>
 8017260:	69fc      	ldr	r4, [r7, #28]
 8017262:	b97c      	cbnz	r4, 8017284 <__pow5mult+0x48>
 8017264:	2010      	movs	r0, #16
 8017266:	f7ff fd35 	bl	8016cd4 <malloc>
 801726a:	4602      	mov	r2, r0
 801726c:	61f8      	str	r0, [r7, #28]
 801726e:	b928      	cbnz	r0, 801727c <__pow5mult+0x40>
 8017270:	4b1d      	ldr	r3, [pc, #116]	@ (80172e8 <__pow5mult+0xac>)
 8017272:	481e      	ldr	r0, [pc, #120]	@ (80172ec <__pow5mult+0xb0>)
 8017274:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017278:	f001 fbe6 	bl	8018a48 <__assert_func>
 801727c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017280:	6004      	str	r4, [r0, #0]
 8017282:	60c4      	str	r4, [r0, #12]
 8017284:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801728c:	b94c      	cbnz	r4, 80172a2 <__pow5mult+0x66>
 801728e:	f240 2171 	movw	r1, #625	@ 0x271
 8017292:	4638      	mov	r0, r7
 8017294:	f7ff ff12 	bl	80170bc <__i2b>
 8017298:	2300      	movs	r3, #0
 801729a:	f8c8 0008 	str.w	r0, [r8, #8]
 801729e:	4604      	mov	r4, r0
 80172a0:	6003      	str	r3, [r0, #0]
 80172a2:	f04f 0900 	mov.w	r9, #0
 80172a6:	07eb      	lsls	r3, r5, #31
 80172a8:	d50a      	bpl.n	80172c0 <__pow5mult+0x84>
 80172aa:	4631      	mov	r1, r6
 80172ac:	4622      	mov	r2, r4
 80172ae:	4638      	mov	r0, r7
 80172b0:	f7ff ff1a 	bl	80170e8 <__multiply>
 80172b4:	4631      	mov	r1, r6
 80172b6:	4680      	mov	r8, r0
 80172b8:	4638      	mov	r0, r7
 80172ba:	f7ff fe01 	bl	8016ec0 <_Bfree>
 80172be:	4646      	mov	r6, r8
 80172c0:	106d      	asrs	r5, r5, #1
 80172c2:	d00b      	beq.n	80172dc <__pow5mult+0xa0>
 80172c4:	6820      	ldr	r0, [r4, #0]
 80172c6:	b938      	cbnz	r0, 80172d8 <__pow5mult+0x9c>
 80172c8:	4622      	mov	r2, r4
 80172ca:	4621      	mov	r1, r4
 80172cc:	4638      	mov	r0, r7
 80172ce:	f7ff ff0b 	bl	80170e8 <__multiply>
 80172d2:	6020      	str	r0, [r4, #0]
 80172d4:	f8c0 9000 	str.w	r9, [r0]
 80172d8:	4604      	mov	r4, r0
 80172da:	e7e4      	b.n	80172a6 <__pow5mult+0x6a>
 80172dc:	4630      	mov	r0, r6
 80172de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172e2:	bf00      	nop
 80172e4:	0802f17c 	.word	0x0802f17c
 80172e8:	0802f0a2 	.word	0x0802f0a2
 80172ec:	0802f122 	.word	0x0802f122

080172f0 <__lshift>:
 80172f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172f4:	460c      	mov	r4, r1
 80172f6:	6849      	ldr	r1, [r1, #4]
 80172f8:	6923      	ldr	r3, [r4, #16]
 80172fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80172fe:	68a3      	ldr	r3, [r4, #8]
 8017300:	4607      	mov	r7, r0
 8017302:	4691      	mov	r9, r2
 8017304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017308:	f108 0601 	add.w	r6, r8, #1
 801730c:	42b3      	cmp	r3, r6
 801730e:	db0b      	blt.n	8017328 <__lshift+0x38>
 8017310:	4638      	mov	r0, r7
 8017312:	f7ff fd95 	bl	8016e40 <_Balloc>
 8017316:	4605      	mov	r5, r0
 8017318:	b948      	cbnz	r0, 801732e <__lshift+0x3e>
 801731a:	4602      	mov	r2, r0
 801731c:	4b28      	ldr	r3, [pc, #160]	@ (80173c0 <__lshift+0xd0>)
 801731e:	4829      	ldr	r0, [pc, #164]	@ (80173c4 <__lshift+0xd4>)
 8017320:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017324:	f001 fb90 	bl	8018a48 <__assert_func>
 8017328:	3101      	adds	r1, #1
 801732a:	005b      	lsls	r3, r3, #1
 801732c:	e7ee      	b.n	801730c <__lshift+0x1c>
 801732e:	2300      	movs	r3, #0
 8017330:	f100 0114 	add.w	r1, r0, #20
 8017334:	f100 0210 	add.w	r2, r0, #16
 8017338:	4618      	mov	r0, r3
 801733a:	4553      	cmp	r3, sl
 801733c:	db33      	blt.n	80173a6 <__lshift+0xb6>
 801733e:	6920      	ldr	r0, [r4, #16]
 8017340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017344:	f104 0314 	add.w	r3, r4, #20
 8017348:	f019 091f 	ands.w	r9, r9, #31
 801734c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017354:	d02b      	beq.n	80173ae <__lshift+0xbe>
 8017356:	f1c9 0e20 	rsb	lr, r9, #32
 801735a:	468a      	mov	sl, r1
 801735c:	2200      	movs	r2, #0
 801735e:	6818      	ldr	r0, [r3, #0]
 8017360:	fa00 f009 	lsl.w	r0, r0, r9
 8017364:	4310      	orrs	r0, r2
 8017366:	f84a 0b04 	str.w	r0, [sl], #4
 801736a:	f853 2b04 	ldr.w	r2, [r3], #4
 801736e:	459c      	cmp	ip, r3
 8017370:	fa22 f20e 	lsr.w	r2, r2, lr
 8017374:	d8f3      	bhi.n	801735e <__lshift+0x6e>
 8017376:	ebac 0304 	sub.w	r3, ip, r4
 801737a:	3b15      	subs	r3, #21
 801737c:	f023 0303 	bic.w	r3, r3, #3
 8017380:	3304      	adds	r3, #4
 8017382:	f104 0015 	add.w	r0, r4, #21
 8017386:	4584      	cmp	ip, r0
 8017388:	bf38      	it	cc
 801738a:	2304      	movcc	r3, #4
 801738c:	50ca      	str	r2, [r1, r3]
 801738e:	b10a      	cbz	r2, 8017394 <__lshift+0xa4>
 8017390:	f108 0602 	add.w	r6, r8, #2
 8017394:	3e01      	subs	r6, #1
 8017396:	4638      	mov	r0, r7
 8017398:	612e      	str	r6, [r5, #16]
 801739a:	4621      	mov	r1, r4
 801739c:	f7ff fd90 	bl	8016ec0 <_Bfree>
 80173a0:	4628      	mov	r0, r5
 80173a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80173aa:	3301      	adds	r3, #1
 80173ac:	e7c5      	b.n	801733a <__lshift+0x4a>
 80173ae:	3904      	subs	r1, #4
 80173b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80173b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80173b8:	459c      	cmp	ip, r3
 80173ba:	d8f9      	bhi.n	80173b0 <__lshift+0xc0>
 80173bc:	e7ea      	b.n	8017394 <__lshift+0xa4>
 80173be:	bf00      	nop
 80173c0:	0802f111 	.word	0x0802f111
 80173c4:	0802f122 	.word	0x0802f122

080173c8 <__mcmp>:
 80173c8:	690a      	ldr	r2, [r1, #16]
 80173ca:	4603      	mov	r3, r0
 80173cc:	6900      	ldr	r0, [r0, #16]
 80173ce:	1a80      	subs	r0, r0, r2
 80173d0:	b530      	push	{r4, r5, lr}
 80173d2:	d10e      	bne.n	80173f2 <__mcmp+0x2a>
 80173d4:	3314      	adds	r3, #20
 80173d6:	3114      	adds	r1, #20
 80173d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80173dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80173e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80173e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80173e8:	4295      	cmp	r5, r2
 80173ea:	d003      	beq.n	80173f4 <__mcmp+0x2c>
 80173ec:	d205      	bcs.n	80173fa <__mcmp+0x32>
 80173ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80173f2:	bd30      	pop	{r4, r5, pc}
 80173f4:	42a3      	cmp	r3, r4
 80173f6:	d3f3      	bcc.n	80173e0 <__mcmp+0x18>
 80173f8:	e7fb      	b.n	80173f2 <__mcmp+0x2a>
 80173fa:	2001      	movs	r0, #1
 80173fc:	e7f9      	b.n	80173f2 <__mcmp+0x2a>
	...

08017400 <__mdiff>:
 8017400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017404:	4689      	mov	r9, r1
 8017406:	4606      	mov	r6, r0
 8017408:	4611      	mov	r1, r2
 801740a:	4648      	mov	r0, r9
 801740c:	4614      	mov	r4, r2
 801740e:	f7ff ffdb 	bl	80173c8 <__mcmp>
 8017412:	1e05      	subs	r5, r0, #0
 8017414:	d112      	bne.n	801743c <__mdiff+0x3c>
 8017416:	4629      	mov	r1, r5
 8017418:	4630      	mov	r0, r6
 801741a:	f7ff fd11 	bl	8016e40 <_Balloc>
 801741e:	4602      	mov	r2, r0
 8017420:	b928      	cbnz	r0, 801742e <__mdiff+0x2e>
 8017422:	4b3f      	ldr	r3, [pc, #252]	@ (8017520 <__mdiff+0x120>)
 8017424:	f240 2137 	movw	r1, #567	@ 0x237
 8017428:	483e      	ldr	r0, [pc, #248]	@ (8017524 <__mdiff+0x124>)
 801742a:	f001 fb0d 	bl	8018a48 <__assert_func>
 801742e:	2301      	movs	r3, #1
 8017430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017434:	4610      	mov	r0, r2
 8017436:	b003      	add	sp, #12
 8017438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801743c:	bfbc      	itt	lt
 801743e:	464b      	movlt	r3, r9
 8017440:	46a1      	movlt	r9, r4
 8017442:	4630      	mov	r0, r6
 8017444:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017448:	bfba      	itte	lt
 801744a:	461c      	movlt	r4, r3
 801744c:	2501      	movlt	r5, #1
 801744e:	2500      	movge	r5, #0
 8017450:	f7ff fcf6 	bl	8016e40 <_Balloc>
 8017454:	4602      	mov	r2, r0
 8017456:	b918      	cbnz	r0, 8017460 <__mdiff+0x60>
 8017458:	4b31      	ldr	r3, [pc, #196]	@ (8017520 <__mdiff+0x120>)
 801745a:	f240 2145 	movw	r1, #581	@ 0x245
 801745e:	e7e3      	b.n	8017428 <__mdiff+0x28>
 8017460:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017464:	6926      	ldr	r6, [r4, #16]
 8017466:	60c5      	str	r5, [r0, #12]
 8017468:	f109 0310 	add.w	r3, r9, #16
 801746c:	f109 0514 	add.w	r5, r9, #20
 8017470:	f104 0e14 	add.w	lr, r4, #20
 8017474:	f100 0b14 	add.w	fp, r0, #20
 8017478:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801747c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017480:	9301      	str	r3, [sp, #4]
 8017482:	46d9      	mov	r9, fp
 8017484:	f04f 0c00 	mov.w	ip, #0
 8017488:	9b01      	ldr	r3, [sp, #4]
 801748a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801748e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017492:	9301      	str	r3, [sp, #4]
 8017494:	fa1f f38a 	uxth.w	r3, sl
 8017498:	4619      	mov	r1, r3
 801749a:	b283      	uxth	r3, r0
 801749c:	1acb      	subs	r3, r1, r3
 801749e:	0c00      	lsrs	r0, r0, #16
 80174a0:	4463      	add	r3, ip
 80174a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80174a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80174aa:	b29b      	uxth	r3, r3
 80174ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80174b0:	4576      	cmp	r6, lr
 80174b2:	f849 3b04 	str.w	r3, [r9], #4
 80174b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80174ba:	d8e5      	bhi.n	8017488 <__mdiff+0x88>
 80174bc:	1b33      	subs	r3, r6, r4
 80174be:	3b15      	subs	r3, #21
 80174c0:	f023 0303 	bic.w	r3, r3, #3
 80174c4:	3415      	adds	r4, #21
 80174c6:	3304      	adds	r3, #4
 80174c8:	42a6      	cmp	r6, r4
 80174ca:	bf38      	it	cc
 80174cc:	2304      	movcc	r3, #4
 80174ce:	441d      	add	r5, r3
 80174d0:	445b      	add	r3, fp
 80174d2:	461e      	mov	r6, r3
 80174d4:	462c      	mov	r4, r5
 80174d6:	4544      	cmp	r4, r8
 80174d8:	d30e      	bcc.n	80174f8 <__mdiff+0xf8>
 80174da:	f108 0103 	add.w	r1, r8, #3
 80174de:	1b49      	subs	r1, r1, r5
 80174e0:	f021 0103 	bic.w	r1, r1, #3
 80174e4:	3d03      	subs	r5, #3
 80174e6:	45a8      	cmp	r8, r5
 80174e8:	bf38      	it	cc
 80174ea:	2100      	movcc	r1, #0
 80174ec:	440b      	add	r3, r1
 80174ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80174f2:	b191      	cbz	r1, 801751a <__mdiff+0x11a>
 80174f4:	6117      	str	r7, [r2, #16]
 80174f6:	e79d      	b.n	8017434 <__mdiff+0x34>
 80174f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80174fc:	46e6      	mov	lr, ip
 80174fe:	0c08      	lsrs	r0, r1, #16
 8017500:	fa1c fc81 	uxtah	ip, ip, r1
 8017504:	4471      	add	r1, lr
 8017506:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801750a:	b289      	uxth	r1, r1
 801750c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017510:	f846 1b04 	str.w	r1, [r6], #4
 8017514:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017518:	e7dd      	b.n	80174d6 <__mdiff+0xd6>
 801751a:	3f01      	subs	r7, #1
 801751c:	e7e7      	b.n	80174ee <__mdiff+0xee>
 801751e:	bf00      	nop
 8017520:	0802f111 	.word	0x0802f111
 8017524:	0802f122 	.word	0x0802f122

08017528 <__ulp>:
 8017528:	b082      	sub	sp, #8
 801752a:	ed8d 0b00 	vstr	d0, [sp]
 801752e:	9a01      	ldr	r2, [sp, #4]
 8017530:	4b0f      	ldr	r3, [pc, #60]	@ (8017570 <__ulp+0x48>)
 8017532:	4013      	ands	r3, r2
 8017534:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017538:	2b00      	cmp	r3, #0
 801753a:	dc08      	bgt.n	801754e <__ulp+0x26>
 801753c:	425b      	negs	r3, r3
 801753e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017542:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017546:	da04      	bge.n	8017552 <__ulp+0x2a>
 8017548:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801754c:	4113      	asrs	r3, r2
 801754e:	2200      	movs	r2, #0
 8017550:	e008      	b.n	8017564 <__ulp+0x3c>
 8017552:	f1a2 0314 	sub.w	r3, r2, #20
 8017556:	2b1e      	cmp	r3, #30
 8017558:	bfda      	itte	le
 801755a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801755e:	40da      	lsrle	r2, r3
 8017560:	2201      	movgt	r2, #1
 8017562:	2300      	movs	r3, #0
 8017564:	4619      	mov	r1, r3
 8017566:	4610      	mov	r0, r2
 8017568:	ec41 0b10 	vmov	d0, r0, r1
 801756c:	b002      	add	sp, #8
 801756e:	4770      	bx	lr
 8017570:	7ff00000 	.word	0x7ff00000

08017574 <__b2d>:
 8017574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017578:	6906      	ldr	r6, [r0, #16]
 801757a:	f100 0814 	add.w	r8, r0, #20
 801757e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017582:	1f37      	subs	r7, r6, #4
 8017584:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017588:	4610      	mov	r0, r2
 801758a:	f7ff fd4b 	bl	8017024 <__hi0bits>
 801758e:	f1c0 0320 	rsb	r3, r0, #32
 8017592:	280a      	cmp	r0, #10
 8017594:	600b      	str	r3, [r1, #0]
 8017596:	491b      	ldr	r1, [pc, #108]	@ (8017604 <__b2d+0x90>)
 8017598:	dc15      	bgt.n	80175c6 <__b2d+0x52>
 801759a:	f1c0 0c0b 	rsb	ip, r0, #11
 801759e:	fa22 f30c 	lsr.w	r3, r2, ip
 80175a2:	45b8      	cmp	r8, r7
 80175a4:	ea43 0501 	orr.w	r5, r3, r1
 80175a8:	bf34      	ite	cc
 80175aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80175ae:	2300      	movcs	r3, #0
 80175b0:	3015      	adds	r0, #21
 80175b2:	fa02 f000 	lsl.w	r0, r2, r0
 80175b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80175ba:	4303      	orrs	r3, r0
 80175bc:	461c      	mov	r4, r3
 80175be:	ec45 4b10 	vmov	d0, r4, r5
 80175c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175c6:	45b8      	cmp	r8, r7
 80175c8:	bf3a      	itte	cc
 80175ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80175ce:	f1a6 0708 	subcc.w	r7, r6, #8
 80175d2:	2300      	movcs	r3, #0
 80175d4:	380b      	subs	r0, #11
 80175d6:	d012      	beq.n	80175fe <__b2d+0x8a>
 80175d8:	f1c0 0120 	rsb	r1, r0, #32
 80175dc:	fa23 f401 	lsr.w	r4, r3, r1
 80175e0:	4082      	lsls	r2, r0
 80175e2:	4322      	orrs	r2, r4
 80175e4:	4547      	cmp	r7, r8
 80175e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80175ea:	bf8c      	ite	hi
 80175ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80175f0:	2200      	movls	r2, #0
 80175f2:	4083      	lsls	r3, r0
 80175f4:	40ca      	lsrs	r2, r1
 80175f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80175fa:	4313      	orrs	r3, r2
 80175fc:	e7de      	b.n	80175bc <__b2d+0x48>
 80175fe:	ea42 0501 	orr.w	r5, r2, r1
 8017602:	e7db      	b.n	80175bc <__b2d+0x48>
 8017604:	3ff00000 	.word	0x3ff00000

08017608 <__d2b>:
 8017608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801760c:	460f      	mov	r7, r1
 801760e:	2101      	movs	r1, #1
 8017610:	ec59 8b10 	vmov	r8, r9, d0
 8017614:	4616      	mov	r6, r2
 8017616:	f7ff fc13 	bl	8016e40 <_Balloc>
 801761a:	4604      	mov	r4, r0
 801761c:	b930      	cbnz	r0, 801762c <__d2b+0x24>
 801761e:	4602      	mov	r2, r0
 8017620:	4b23      	ldr	r3, [pc, #140]	@ (80176b0 <__d2b+0xa8>)
 8017622:	4824      	ldr	r0, [pc, #144]	@ (80176b4 <__d2b+0xac>)
 8017624:	f240 310f 	movw	r1, #783	@ 0x30f
 8017628:	f001 fa0e 	bl	8018a48 <__assert_func>
 801762c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017634:	b10d      	cbz	r5, 801763a <__d2b+0x32>
 8017636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801763a:	9301      	str	r3, [sp, #4]
 801763c:	f1b8 0300 	subs.w	r3, r8, #0
 8017640:	d023      	beq.n	801768a <__d2b+0x82>
 8017642:	4668      	mov	r0, sp
 8017644:	9300      	str	r3, [sp, #0]
 8017646:	f7ff fd0c 	bl	8017062 <__lo0bits>
 801764a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801764e:	b1d0      	cbz	r0, 8017686 <__d2b+0x7e>
 8017650:	f1c0 0320 	rsb	r3, r0, #32
 8017654:	fa02 f303 	lsl.w	r3, r2, r3
 8017658:	430b      	orrs	r3, r1
 801765a:	40c2      	lsrs	r2, r0
 801765c:	6163      	str	r3, [r4, #20]
 801765e:	9201      	str	r2, [sp, #4]
 8017660:	9b01      	ldr	r3, [sp, #4]
 8017662:	61a3      	str	r3, [r4, #24]
 8017664:	2b00      	cmp	r3, #0
 8017666:	bf0c      	ite	eq
 8017668:	2201      	moveq	r2, #1
 801766a:	2202      	movne	r2, #2
 801766c:	6122      	str	r2, [r4, #16]
 801766e:	b1a5      	cbz	r5, 801769a <__d2b+0x92>
 8017670:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017674:	4405      	add	r5, r0
 8017676:	603d      	str	r5, [r7, #0]
 8017678:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801767c:	6030      	str	r0, [r6, #0]
 801767e:	4620      	mov	r0, r4
 8017680:	b003      	add	sp, #12
 8017682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017686:	6161      	str	r1, [r4, #20]
 8017688:	e7ea      	b.n	8017660 <__d2b+0x58>
 801768a:	a801      	add	r0, sp, #4
 801768c:	f7ff fce9 	bl	8017062 <__lo0bits>
 8017690:	9b01      	ldr	r3, [sp, #4]
 8017692:	6163      	str	r3, [r4, #20]
 8017694:	3020      	adds	r0, #32
 8017696:	2201      	movs	r2, #1
 8017698:	e7e8      	b.n	801766c <__d2b+0x64>
 801769a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801769e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80176a2:	6038      	str	r0, [r7, #0]
 80176a4:	6918      	ldr	r0, [r3, #16]
 80176a6:	f7ff fcbd 	bl	8017024 <__hi0bits>
 80176aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80176ae:	e7e5      	b.n	801767c <__d2b+0x74>
 80176b0:	0802f111 	.word	0x0802f111
 80176b4:	0802f122 	.word	0x0802f122

080176b8 <__ratio>:
 80176b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176bc:	b085      	sub	sp, #20
 80176be:	e9cd 1000 	strd	r1, r0, [sp]
 80176c2:	a902      	add	r1, sp, #8
 80176c4:	f7ff ff56 	bl	8017574 <__b2d>
 80176c8:	9800      	ldr	r0, [sp, #0]
 80176ca:	a903      	add	r1, sp, #12
 80176cc:	ec55 4b10 	vmov	r4, r5, d0
 80176d0:	f7ff ff50 	bl	8017574 <__b2d>
 80176d4:	9b01      	ldr	r3, [sp, #4]
 80176d6:	6919      	ldr	r1, [r3, #16]
 80176d8:	9b00      	ldr	r3, [sp, #0]
 80176da:	691b      	ldr	r3, [r3, #16]
 80176dc:	1ac9      	subs	r1, r1, r3
 80176de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80176e2:	1a9b      	subs	r3, r3, r2
 80176e4:	ec5b ab10 	vmov	sl, fp, d0
 80176e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	bfce      	itee	gt
 80176f0:	462a      	movgt	r2, r5
 80176f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80176f6:	465a      	movle	r2, fp
 80176f8:	462f      	mov	r7, r5
 80176fa:	46d9      	mov	r9, fp
 80176fc:	bfcc      	ite	gt
 80176fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017702:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8017706:	464b      	mov	r3, r9
 8017708:	4652      	mov	r2, sl
 801770a:	4620      	mov	r0, r4
 801770c:	4639      	mov	r1, r7
 801770e:	f7e9 f8a5 	bl	800085c <__aeabi_ddiv>
 8017712:	ec41 0b10 	vmov	d0, r0, r1
 8017716:	b005      	add	sp, #20
 8017718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801771c <__copybits>:
 801771c:	3901      	subs	r1, #1
 801771e:	b570      	push	{r4, r5, r6, lr}
 8017720:	1149      	asrs	r1, r1, #5
 8017722:	6914      	ldr	r4, [r2, #16]
 8017724:	3101      	adds	r1, #1
 8017726:	f102 0314 	add.w	r3, r2, #20
 801772a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801772e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017732:	1f05      	subs	r5, r0, #4
 8017734:	42a3      	cmp	r3, r4
 8017736:	d30c      	bcc.n	8017752 <__copybits+0x36>
 8017738:	1aa3      	subs	r3, r4, r2
 801773a:	3b11      	subs	r3, #17
 801773c:	f023 0303 	bic.w	r3, r3, #3
 8017740:	3211      	adds	r2, #17
 8017742:	42a2      	cmp	r2, r4
 8017744:	bf88      	it	hi
 8017746:	2300      	movhi	r3, #0
 8017748:	4418      	add	r0, r3
 801774a:	2300      	movs	r3, #0
 801774c:	4288      	cmp	r0, r1
 801774e:	d305      	bcc.n	801775c <__copybits+0x40>
 8017750:	bd70      	pop	{r4, r5, r6, pc}
 8017752:	f853 6b04 	ldr.w	r6, [r3], #4
 8017756:	f845 6f04 	str.w	r6, [r5, #4]!
 801775a:	e7eb      	b.n	8017734 <__copybits+0x18>
 801775c:	f840 3b04 	str.w	r3, [r0], #4
 8017760:	e7f4      	b.n	801774c <__copybits+0x30>

08017762 <__any_on>:
 8017762:	f100 0214 	add.w	r2, r0, #20
 8017766:	6900      	ldr	r0, [r0, #16]
 8017768:	114b      	asrs	r3, r1, #5
 801776a:	4298      	cmp	r0, r3
 801776c:	b510      	push	{r4, lr}
 801776e:	db11      	blt.n	8017794 <__any_on+0x32>
 8017770:	dd0a      	ble.n	8017788 <__any_on+0x26>
 8017772:	f011 011f 	ands.w	r1, r1, #31
 8017776:	d007      	beq.n	8017788 <__any_on+0x26>
 8017778:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801777c:	fa24 f001 	lsr.w	r0, r4, r1
 8017780:	fa00 f101 	lsl.w	r1, r0, r1
 8017784:	428c      	cmp	r4, r1
 8017786:	d10b      	bne.n	80177a0 <__any_on+0x3e>
 8017788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801778c:	4293      	cmp	r3, r2
 801778e:	d803      	bhi.n	8017798 <__any_on+0x36>
 8017790:	2000      	movs	r0, #0
 8017792:	bd10      	pop	{r4, pc}
 8017794:	4603      	mov	r3, r0
 8017796:	e7f7      	b.n	8017788 <__any_on+0x26>
 8017798:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801779c:	2900      	cmp	r1, #0
 801779e:	d0f5      	beq.n	801778c <__any_on+0x2a>
 80177a0:	2001      	movs	r0, #1
 80177a2:	e7f6      	b.n	8017792 <__any_on+0x30>

080177a4 <sulp>:
 80177a4:	b570      	push	{r4, r5, r6, lr}
 80177a6:	4604      	mov	r4, r0
 80177a8:	460d      	mov	r5, r1
 80177aa:	ec45 4b10 	vmov	d0, r4, r5
 80177ae:	4616      	mov	r6, r2
 80177b0:	f7ff feba 	bl	8017528 <__ulp>
 80177b4:	ec51 0b10 	vmov	r0, r1, d0
 80177b8:	b17e      	cbz	r6, 80177da <sulp+0x36>
 80177ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80177be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	dd09      	ble.n	80177da <sulp+0x36>
 80177c6:	051b      	lsls	r3, r3, #20
 80177c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80177cc:	2400      	movs	r4, #0
 80177ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80177d2:	4622      	mov	r2, r4
 80177d4:	462b      	mov	r3, r5
 80177d6:	f7e8 ff17 	bl	8000608 <__aeabi_dmul>
 80177da:	ec41 0b10 	vmov	d0, r0, r1
 80177de:	bd70      	pop	{r4, r5, r6, pc}

080177e0 <_strtod_l>:
 80177e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e4:	b09f      	sub	sp, #124	@ 0x7c
 80177e6:	460c      	mov	r4, r1
 80177e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80177ea:	2200      	movs	r2, #0
 80177ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80177ee:	9005      	str	r0, [sp, #20]
 80177f0:	f04f 0a00 	mov.w	sl, #0
 80177f4:	f04f 0b00 	mov.w	fp, #0
 80177f8:	460a      	mov	r2, r1
 80177fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80177fc:	7811      	ldrb	r1, [r2, #0]
 80177fe:	292b      	cmp	r1, #43	@ 0x2b
 8017800:	d04a      	beq.n	8017898 <_strtod_l+0xb8>
 8017802:	d838      	bhi.n	8017876 <_strtod_l+0x96>
 8017804:	290d      	cmp	r1, #13
 8017806:	d832      	bhi.n	801786e <_strtod_l+0x8e>
 8017808:	2908      	cmp	r1, #8
 801780a:	d832      	bhi.n	8017872 <_strtod_l+0x92>
 801780c:	2900      	cmp	r1, #0
 801780e:	d03b      	beq.n	8017888 <_strtod_l+0xa8>
 8017810:	2200      	movs	r2, #0
 8017812:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017814:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8017816:	782a      	ldrb	r2, [r5, #0]
 8017818:	2a30      	cmp	r2, #48	@ 0x30
 801781a:	f040 80b3 	bne.w	8017984 <_strtod_l+0x1a4>
 801781e:	786a      	ldrb	r2, [r5, #1]
 8017820:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017824:	2a58      	cmp	r2, #88	@ 0x58
 8017826:	d16e      	bne.n	8017906 <_strtod_l+0x126>
 8017828:	9302      	str	r3, [sp, #8]
 801782a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801782c:	9301      	str	r3, [sp, #4]
 801782e:	ab1a      	add	r3, sp, #104	@ 0x68
 8017830:	9300      	str	r3, [sp, #0]
 8017832:	4a8e      	ldr	r2, [pc, #568]	@ (8017a6c <_strtod_l+0x28c>)
 8017834:	9805      	ldr	r0, [sp, #20]
 8017836:	ab1b      	add	r3, sp, #108	@ 0x6c
 8017838:	a919      	add	r1, sp, #100	@ 0x64
 801783a:	f001 f99f 	bl	8018b7c <__gethex>
 801783e:	f010 060f 	ands.w	r6, r0, #15
 8017842:	4604      	mov	r4, r0
 8017844:	d005      	beq.n	8017852 <_strtod_l+0x72>
 8017846:	2e06      	cmp	r6, #6
 8017848:	d128      	bne.n	801789c <_strtod_l+0xbc>
 801784a:	3501      	adds	r5, #1
 801784c:	2300      	movs	r3, #0
 801784e:	9519      	str	r5, [sp, #100]	@ 0x64
 8017850:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017852:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017854:	2b00      	cmp	r3, #0
 8017856:	f040 858e 	bne.w	8018376 <_strtod_l+0xb96>
 801785a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801785c:	b1cb      	cbz	r3, 8017892 <_strtod_l+0xb2>
 801785e:	4652      	mov	r2, sl
 8017860:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8017864:	ec43 2b10 	vmov	d0, r2, r3
 8017868:	b01f      	add	sp, #124	@ 0x7c
 801786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801786e:	2920      	cmp	r1, #32
 8017870:	d1ce      	bne.n	8017810 <_strtod_l+0x30>
 8017872:	3201      	adds	r2, #1
 8017874:	e7c1      	b.n	80177fa <_strtod_l+0x1a>
 8017876:	292d      	cmp	r1, #45	@ 0x2d
 8017878:	d1ca      	bne.n	8017810 <_strtod_l+0x30>
 801787a:	2101      	movs	r1, #1
 801787c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801787e:	1c51      	adds	r1, r2, #1
 8017880:	9119      	str	r1, [sp, #100]	@ 0x64
 8017882:	7852      	ldrb	r2, [r2, #1]
 8017884:	2a00      	cmp	r2, #0
 8017886:	d1c5      	bne.n	8017814 <_strtod_l+0x34>
 8017888:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801788a:	9419      	str	r4, [sp, #100]	@ 0x64
 801788c:	2b00      	cmp	r3, #0
 801788e:	f040 8570 	bne.w	8018372 <_strtod_l+0xb92>
 8017892:	4652      	mov	r2, sl
 8017894:	465b      	mov	r3, fp
 8017896:	e7e5      	b.n	8017864 <_strtod_l+0x84>
 8017898:	2100      	movs	r1, #0
 801789a:	e7ef      	b.n	801787c <_strtod_l+0x9c>
 801789c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801789e:	b13a      	cbz	r2, 80178b0 <_strtod_l+0xd0>
 80178a0:	2135      	movs	r1, #53	@ 0x35
 80178a2:	a81c      	add	r0, sp, #112	@ 0x70
 80178a4:	f7ff ff3a 	bl	801771c <__copybits>
 80178a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80178aa:	9805      	ldr	r0, [sp, #20]
 80178ac:	f7ff fb08 	bl	8016ec0 <_Bfree>
 80178b0:	3e01      	subs	r6, #1
 80178b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80178b4:	2e04      	cmp	r6, #4
 80178b6:	d806      	bhi.n	80178c6 <_strtod_l+0xe6>
 80178b8:	e8df f006 	tbb	[pc, r6]
 80178bc:	201d0314 	.word	0x201d0314
 80178c0:	14          	.byte	0x14
 80178c1:	00          	.byte	0x00
 80178c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80178c6:	05e1      	lsls	r1, r4, #23
 80178c8:	bf48      	it	mi
 80178ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80178ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80178d2:	0d1b      	lsrs	r3, r3, #20
 80178d4:	051b      	lsls	r3, r3, #20
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d1bb      	bne.n	8017852 <_strtod_l+0x72>
 80178da:	f7fe fb21 	bl	8015f20 <__errno>
 80178de:	2322      	movs	r3, #34	@ 0x22
 80178e0:	6003      	str	r3, [r0, #0]
 80178e2:	e7b6      	b.n	8017852 <_strtod_l+0x72>
 80178e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80178e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80178ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80178f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80178f4:	e7e7      	b.n	80178c6 <_strtod_l+0xe6>
 80178f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8017a74 <_strtod_l+0x294>
 80178fa:	e7e4      	b.n	80178c6 <_strtod_l+0xe6>
 80178fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8017900:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8017904:	e7df      	b.n	80178c6 <_strtod_l+0xe6>
 8017906:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017908:	1c5a      	adds	r2, r3, #1
 801790a:	9219      	str	r2, [sp, #100]	@ 0x64
 801790c:	785b      	ldrb	r3, [r3, #1]
 801790e:	2b30      	cmp	r3, #48	@ 0x30
 8017910:	d0f9      	beq.n	8017906 <_strtod_l+0x126>
 8017912:	2b00      	cmp	r3, #0
 8017914:	d09d      	beq.n	8017852 <_strtod_l+0x72>
 8017916:	2301      	movs	r3, #1
 8017918:	9309      	str	r3, [sp, #36]	@ 0x24
 801791a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801791c:	930c      	str	r3, [sp, #48]	@ 0x30
 801791e:	2300      	movs	r3, #0
 8017920:	9308      	str	r3, [sp, #32]
 8017922:	930a      	str	r3, [sp, #40]	@ 0x28
 8017924:	461f      	mov	r7, r3
 8017926:	220a      	movs	r2, #10
 8017928:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801792a:	7805      	ldrb	r5, [r0, #0]
 801792c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8017930:	b2d9      	uxtb	r1, r3
 8017932:	2909      	cmp	r1, #9
 8017934:	d928      	bls.n	8017988 <_strtod_l+0x1a8>
 8017936:	494e      	ldr	r1, [pc, #312]	@ (8017a70 <_strtod_l+0x290>)
 8017938:	2201      	movs	r2, #1
 801793a:	f001 f837 	bl	80189ac <strncmp>
 801793e:	2800      	cmp	r0, #0
 8017940:	d032      	beq.n	80179a8 <_strtod_l+0x1c8>
 8017942:	2000      	movs	r0, #0
 8017944:	462a      	mov	r2, r5
 8017946:	4681      	mov	r9, r0
 8017948:	463d      	mov	r5, r7
 801794a:	4603      	mov	r3, r0
 801794c:	2a65      	cmp	r2, #101	@ 0x65
 801794e:	d001      	beq.n	8017954 <_strtod_l+0x174>
 8017950:	2a45      	cmp	r2, #69	@ 0x45
 8017952:	d114      	bne.n	801797e <_strtod_l+0x19e>
 8017954:	b91d      	cbnz	r5, 801795e <_strtod_l+0x17e>
 8017956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017958:	4302      	orrs	r2, r0
 801795a:	d095      	beq.n	8017888 <_strtod_l+0xa8>
 801795c:	2500      	movs	r5, #0
 801795e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8017960:	1c62      	adds	r2, r4, #1
 8017962:	9219      	str	r2, [sp, #100]	@ 0x64
 8017964:	7862      	ldrb	r2, [r4, #1]
 8017966:	2a2b      	cmp	r2, #43	@ 0x2b
 8017968:	d077      	beq.n	8017a5a <_strtod_l+0x27a>
 801796a:	2a2d      	cmp	r2, #45	@ 0x2d
 801796c:	d07b      	beq.n	8017a66 <_strtod_l+0x286>
 801796e:	f04f 0c00 	mov.w	ip, #0
 8017972:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8017976:	2909      	cmp	r1, #9
 8017978:	f240 8082 	bls.w	8017a80 <_strtod_l+0x2a0>
 801797c:	9419      	str	r4, [sp, #100]	@ 0x64
 801797e:	f04f 0800 	mov.w	r8, #0
 8017982:	e0a2      	b.n	8017aca <_strtod_l+0x2ea>
 8017984:	2300      	movs	r3, #0
 8017986:	e7c7      	b.n	8017918 <_strtod_l+0x138>
 8017988:	2f08      	cmp	r7, #8
 801798a:	bfd5      	itete	le
 801798c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801798e:	9908      	ldrgt	r1, [sp, #32]
 8017990:	fb02 3301 	mlale	r3, r2, r1, r3
 8017994:	fb02 3301 	mlagt	r3, r2, r1, r3
 8017998:	f100 0001 	add.w	r0, r0, #1
 801799c:	bfd4      	ite	le
 801799e:	930a      	strle	r3, [sp, #40]	@ 0x28
 80179a0:	9308      	strgt	r3, [sp, #32]
 80179a2:	3701      	adds	r7, #1
 80179a4:	9019      	str	r0, [sp, #100]	@ 0x64
 80179a6:	e7bf      	b.n	8017928 <_strtod_l+0x148>
 80179a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80179aa:	1c5a      	adds	r2, r3, #1
 80179ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80179ae:	785a      	ldrb	r2, [r3, #1]
 80179b0:	b37f      	cbz	r7, 8017a12 <_strtod_l+0x232>
 80179b2:	4681      	mov	r9, r0
 80179b4:	463d      	mov	r5, r7
 80179b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80179ba:	2b09      	cmp	r3, #9
 80179bc:	d912      	bls.n	80179e4 <_strtod_l+0x204>
 80179be:	2301      	movs	r3, #1
 80179c0:	e7c4      	b.n	801794c <_strtod_l+0x16c>
 80179c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80179c4:	1c5a      	adds	r2, r3, #1
 80179c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80179c8:	785a      	ldrb	r2, [r3, #1]
 80179ca:	3001      	adds	r0, #1
 80179cc:	2a30      	cmp	r2, #48	@ 0x30
 80179ce:	d0f8      	beq.n	80179c2 <_strtod_l+0x1e2>
 80179d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80179d4:	2b08      	cmp	r3, #8
 80179d6:	f200 84d3 	bhi.w	8018380 <_strtod_l+0xba0>
 80179da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80179dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80179de:	4681      	mov	r9, r0
 80179e0:	2000      	movs	r0, #0
 80179e2:	4605      	mov	r5, r0
 80179e4:	3a30      	subs	r2, #48	@ 0x30
 80179e6:	f100 0301 	add.w	r3, r0, #1
 80179ea:	d02a      	beq.n	8017a42 <_strtod_l+0x262>
 80179ec:	4499      	add	r9, r3
 80179ee:	eb00 0c05 	add.w	ip, r0, r5
 80179f2:	462b      	mov	r3, r5
 80179f4:	210a      	movs	r1, #10
 80179f6:	4563      	cmp	r3, ip
 80179f8:	d10d      	bne.n	8017a16 <_strtod_l+0x236>
 80179fa:	1c69      	adds	r1, r5, #1
 80179fc:	4401      	add	r1, r0
 80179fe:	4428      	add	r0, r5
 8017a00:	2808      	cmp	r0, #8
 8017a02:	dc16      	bgt.n	8017a32 <_strtod_l+0x252>
 8017a04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017a06:	230a      	movs	r3, #10
 8017a08:	fb03 2300 	mla	r3, r3, r0, r2
 8017a0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8017a0e:	2300      	movs	r3, #0
 8017a10:	e018      	b.n	8017a44 <_strtod_l+0x264>
 8017a12:	4638      	mov	r0, r7
 8017a14:	e7da      	b.n	80179cc <_strtod_l+0x1ec>
 8017a16:	2b08      	cmp	r3, #8
 8017a18:	f103 0301 	add.w	r3, r3, #1
 8017a1c:	dc03      	bgt.n	8017a26 <_strtod_l+0x246>
 8017a1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017a20:	434e      	muls	r6, r1
 8017a22:	960a      	str	r6, [sp, #40]	@ 0x28
 8017a24:	e7e7      	b.n	80179f6 <_strtod_l+0x216>
 8017a26:	2b10      	cmp	r3, #16
 8017a28:	bfde      	ittt	le
 8017a2a:	9e08      	ldrle	r6, [sp, #32]
 8017a2c:	434e      	mulle	r6, r1
 8017a2e:	9608      	strle	r6, [sp, #32]
 8017a30:	e7e1      	b.n	80179f6 <_strtod_l+0x216>
 8017a32:	280f      	cmp	r0, #15
 8017a34:	dceb      	bgt.n	8017a0e <_strtod_l+0x22e>
 8017a36:	9808      	ldr	r0, [sp, #32]
 8017a38:	230a      	movs	r3, #10
 8017a3a:	fb03 2300 	mla	r3, r3, r0, r2
 8017a3e:	9308      	str	r3, [sp, #32]
 8017a40:	e7e5      	b.n	8017a0e <_strtod_l+0x22e>
 8017a42:	4629      	mov	r1, r5
 8017a44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017a46:	1c50      	adds	r0, r2, #1
 8017a48:	9019      	str	r0, [sp, #100]	@ 0x64
 8017a4a:	7852      	ldrb	r2, [r2, #1]
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	460d      	mov	r5, r1
 8017a50:	e7b1      	b.n	80179b6 <_strtod_l+0x1d6>
 8017a52:	f04f 0900 	mov.w	r9, #0
 8017a56:	2301      	movs	r3, #1
 8017a58:	e77d      	b.n	8017956 <_strtod_l+0x176>
 8017a5a:	f04f 0c00 	mov.w	ip, #0
 8017a5e:	1ca2      	adds	r2, r4, #2
 8017a60:	9219      	str	r2, [sp, #100]	@ 0x64
 8017a62:	78a2      	ldrb	r2, [r4, #2]
 8017a64:	e785      	b.n	8017972 <_strtod_l+0x192>
 8017a66:	f04f 0c01 	mov.w	ip, #1
 8017a6a:	e7f8      	b.n	8017a5e <_strtod_l+0x27e>
 8017a6c:	0802f290 	.word	0x0802f290
 8017a70:	0802f278 	.word	0x0802f278
 8017a74:	7ff00000 	.word	0x7ff00000
 8017a78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017a7a:	1c51      	adds	r1, r2, #1
 8017a7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8017a7e:	7852      	ldrb	r2, [r2, #1]
 8017a80:	2a30      	cmp	r2, #48	@ 0x30
 8017a82:	d0f9      	beq.n	8017a78 <_strtod_l+0x298>
 8017a84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8017a88:	2908      	cmp	r1, #8
 8017a8a:	f63f af78 	bhi.w	801797e <_strtod_l+0x19e>
 8017a8e:	3a30      	subs	r2, #48	@ 0x30
 8017a90:	920e      	str	r2, [sp, #56]	@ 0x38
 8017a92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017a94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8017a96:	f04f 080a 	mov.w	r8, #10
 8017a9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017a9c:	1c56      	adds	r6, r2, #1
 8017a9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8017aa0:	7852      	ldrb	r2, [r2, #1]
 8017aa2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017aa6:	f1be 0f09 	cmp.w	lr, #9
 8017aaa:	d939      	bls.n	8017b20 <_strtod_l+0x340>
 8017aac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017aae:	1a76      	subs	r6, r6, r1
 8017ab0:	2e08      	cmp	r6, #8
 8017ab2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8017ab6:	dc03      	bgt.n	8017ac0 <_strtod_l+0x2e0>
 8017ab8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017aba:	4588      	cmp	r8, r1
 8017abc:	bfa8      	it	ge
 8017abe:	4688      	movge	r8, r1
 8017ac0:	f1bc 0f00 	cmp.w	ip, #0
 8017ac4:	d001      	beq.n	8017aca <_strtod_l+0x2ea>
 8017ac6:	f1c8 0800 	rsb	r8, r8, #0
 8017aca:	2d00      	cmp	r5, #0
 8017acc:	d14e      	bne.n	8017b6c <_strtod_l+0x38c>
 8017ace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017ad0:	4308      	orrs	r0, r1
 8017ad2:	f47f aebe 	bne.w	8017852 <_strtod_l+0x72>
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	f47f aed6 	bne.w	8017888 <_strtod_l+0xa8>
 8017adc:	2a69      	cmp	r2, #105	@ 0x69
 8017ade:	d028      	beq.n	8017b32 <_strtod_l+0x352>
 8017ae0:	dc25      	bgt.n	8017b2e <_strtod_l+0x34e>
 8017ae2:	2a49      	cmp	r2, #73	@ 0x49
 8017ae4:	d025      	beq.n	8017b32 <_strtod_l+0x352>
 8017ae6:	2a4e      	cmp	r2, #78	@ 0x4e
 8017ae8:	f47f aece 	bne.w	8017888 <_strtod_l+0xa8>
 8017aec:	499b      	ldr	r1, [pc, #620]	@ (8017d5c <_strtod_l+0x57c>)
 8017aee:	a819      	add	r0, sp, #100	@ 0x64
 8017af0:	f001 fa66 	bl	8018fc0 <__match>
 8017af4:	2800      	cmp	r0, #0
 8017af6:	f43f aec7 	beq.w	8017888 <_strtod_l+0xa8>
 8017afa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017afc:	781b      	ldrb	r3, [r3, #0]
 8017afe:	2b28      	cmp	r3, #40	@ 0x28
 8017b00:	d12e      	bne.n	8017b60 <_strtod_l+0x380>
 8017b02:	4997      	ldr	r1, [pc, #604]	@ (8017d60 <_strtod_l+0x580>)
 8017b04:	aa1c      	add	r2, sp, #112	@ 0x70
 8017b06:	a819      	add	r0, sp, #100	@ 0x64
 8017b08:	f001 fa6e 	bl	8018fe8 <__hexnan>
 8017b0c:	2805      	cmp	r0, #5
 8017b0e:	d127      	bne.n	8017b60 <_strtod_l+0x380>
 8017b10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017b12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8017b16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017b1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8017b1e:	e698      	b.n	8017852 <_strtod_l+0x72>
 8017b20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017b22:	fb08 2101 	mla	r1, r8, r1, r2
 8017b26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8017b2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8017b2c:	e7b5      	b.n	8017a9a <_strtod_l+0x2ba>
 8017b2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8017b30:	e7da      	b.n	8017ae8 <_strtod_l+0x308>
 8017b32:	498c      	ldr	r1, [pc, #560]	@ (8017d64 <_strtod_l+0x584>)
 8017b34:	a819      	add	r0, sp, #100	@ 0x64
 8017b36:	f001 fa43 	bl	8018fc0 <__match>
 8017b3a:	2800      	cmp	r0, #0
 8017b3c:	f43f aea4 	beq.w	8017888 <_strtod_l+0xa8>
 8017b40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017b42:	4989      	ldr	r1, [pc, #548]	@ (8017d68 <_strtod_l+0x588>)
 8017b44:	3b01      	subs	r3, #1
 8017b46:	a819      	add	r0, sp, #100	@ 0x64
 8017b48:	9319      	str	r3, [sp, #100]	@ 0x64
 8017b4a:	f001 fa39 	bl	8018fc0 <__match>
 8017b4e:	b910      	cbnz	r0, 8017b56 <_strtod_l+0x376>
 8017b50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017b52:	3301      	adds	r3, #1
 8017b54:	9319      	str	r3, [sp, #100]	@ 0x64
 8017b56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8017d78 <_strtod_l+0x598>
 8017b5a:	f04f 0a00 	mov.w	sl, #0
 8017b5e:	e678      	b.n	8017852 <_strtod_l+0x72>
 8017b60:	4882      	ldr	r0, [pc, #520]	@ (8017d6c <_strtod_l+0x58c>)
 8017b62:	f000 ff69 	bl	8018a38 <nan>
 8017b66:	ec5b ab10 	vmov	sl, fp, d0
 8017b6a:	e672      	b.n	8017852 <_strtod_l+0x72>
 8017b6c:	eba8 0309 	sub.w	r3, r8, r9
 8017b70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b74:	2f00      	cmp	r7, #0
 8017b76:	bf08      	it	eq
 8017b78:	462f      	moveq	r7, r5
 8017b7a:	2d10      	cmp	r5, #16
 8017b7c:	462c      	mov	r4, r5
 8017b7e:	bfa8      	it	ge
 8017b80:	2410      	movge	r4, #16
 8017b82:	f7e8 fcc7 	bl	8000514 <__aeabi_ui2d>
 8017b86:	2d09      	cmp	r5, #9
 8017b88:	4682      	mov	sl, r0
 8017b8a:	468b      	mov	fp, r1
 8017b8c:	dc13      	bgt.n	8017bb6 <_strtod_l+0x3d6>
 8017b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	f43f ae5e 	beq.w	8017852 <_strtod_l+0x72>
 8017b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b98:	dd78      	ble.n	8017c8c <_strtod_l+0x4ac>
 8017b9a:	2b16      	cmp	r3, #22
 8017b9c:	dc5f      	bgt.n	8017c5e <_strtod_l+0x47e>
 8017b9e:	4974      	ldr	r1, [pc, #464]	@ (8017d70 <_strtod_l+0x590>)
 8017ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017ba8:	4652      	mov	r2, sl
 8017baa:	465b      	mov	r3, fp
 8017bac:	f7e8 fd2c 	bl	8000608 <__aeabi_dmul>
 8017bb0:	4682      	mov	sl, r0
 8017bb2:	468b      	mov	fp, r1
 8017bb4:	e64d      	b.n	8017852 <_strtod_l+0x72>
 8017bb6:	4b6e      	ldr	r3, [pc, #440]	@ (8017d70 <_strtod_l+0x590>)
 8017bb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017bbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8017bc0:	f7e8 fd22 	bl	8000608 <__aeabi_dmul>
 8017bc4:	4682      	mov	sl, r0
 8017bc6:	9808      	ldr	r0, [sp, #32]
 8017bc8:	468b      	mov	fp, r1
 8017bca:	f7e8 fca3 	bl	8000514 <__aeabi_ui2d>
 8017bce:	4602      	mov	r2, r0
 8017bd0:	460b      	mov	r3, r1
 8017bd2:	4650      	mov	r0, sl
 8017bd4:	4659      	mov	r1, fp
 8017bd6:	f7e8 fb61 	bl	800029c <__adddf3>
 8017bda:	2d0f      	cmp	r5, #15
 8017bdc:	4682      	mov	sl, r0
 8017bde:	468b      	mov	fp, r1
 8017be0:	ddd5      	ble.n	8017b8e <_strtod_l+0x3ae>
 8017be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017be4:	1b2c      	subs	r4, r5, r4
 8017be6:	441c      	add	r4, r3
 8017be8:	2c00      	cmp	r4, #0
 8017bea:	f340 8096 	ble.w	8017d1a <_strtod_l+0x53a>
 8017bee:	f014 030f 	ands.w	r3, r4, #15
 8017bf2:	d00a      	beq.n	8017c0a <_strtod_l+0x42a>
 8017bf4:	495e      	ldr	r1, [pc, #376]	@ (8017d70 <_strtod_l+0x590>)
 8017bf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017bfa:	4652      	mov	r2, sl
 8017bfc:	465b      	mov	r3, fp
 8017bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c02:	f7e8 fd01 	bl	8000608 <__aeabi_dmul>
 8017c06:	4682      	mov	sl, r0
 8017c08:	468b      	mov	fp, r1
 8017c0a:	f034 040f 	bics.w	r4, r4, #15
 8017c0e:	d073      	beq.n	8017cf8 <_strtod_l+0x518>
 8017c10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8017c14:	dd48      	ble.n	8017ca8 <_strtod_l+0x4c8>
 8017c16:	2400      	movs	r4, #0
 8017c18:	46a0      	mov	r8, r4
 8017c1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8017c1c:	46a1      	mov	r9, r4
 8017c1e:	9a05      	ldr	r2, [sp, #20]
 8017c20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8017d78 <_strtod_l+0x598>
 8017c24:	2322      	movs	r3, #34	@ 0x22
 8017c26:	6013      	str	r3, [r2, #0]
 8017c28:	f04f 0a00 	mov.w	sl, #0
 8017c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	f43f ae0f 	beq.w	8017852 <_strtod_l+0x72>
 8017c34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017c36:	9805      	ldr	r0, [sp, #20]
 8017c38:	f7ff f942 	bl	8016ec0 <_Bfree>
 8017c3c:	9805      	ldr	r0, [sp, #20]
 8017c3e:	4649      	mov	r1, r9
 8017c40:	f7ff f93e 	bl	8016ec0 <_Bfree>
 8017c44:	9805      	ldr	r0, [sp, #20]
 8017c46:	4641      	mov	r1, r8
 8017c48:	f7ff f93a 	bl	8016ec0 <_Bfree>
 8017c4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017c4e:	9805      	ldr	r0, [sp, #20]
 8017c50:	f7ff f936 	bl	8016ec0 <_Bfree>
 8017c54:	9805      	ldr	r0, [sp, #20]
 8017c56:	4621      	mov	r1, r4
 8017c58:	f7ff f932 	bl	8016ec0 <_Bfree>
 8017c5c:	e5f9      	b.n	8017852 <_strtod_l+0x72>
 8017c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017c60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8017c64:	4293      	cmp	r3, r2
 8017c66:	dbbc      	blt.n	8017be2 <_strtod_l+0x402>
 8017c68:	4c41      	ldr	r4, [pc, #260]	@ (8017d70 <_strtod_l+0x590>)
 8017c6a:	f1c5 050f 	rsb	r5, r5, #15
 8017c6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017c72:	4652      	mov	r2, sl
 8017c74:	465b      	mov	r3, fp
 8017c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c7a:	f7e8 fcc5 	bl	8000608 <__aeabi_dmul>
 8017c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c80:	1b5d      	subs	r5, r3, r5
 8017c82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017c86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017c8a:	e78f      	b.n	8017bac <_strtod_l+0x3cc>
 8017c8c:	3316      	adds	r3, #22
 8017c8e:	dba8      	blt.n	8017be2 <_strtod_l+0x402>
 8017c90:	4b37      	ldr	r3, [pc, #220]	@ (8017d70 <_strtod_l+0x590>)
 8017c92:	eba9 0808 	sub.w	r8, r9, r8
 8017c96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8017c9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8017c9e:	4650      	mov	r0, sl
 8017ca0:	4659      	mov	r1, fp
 8017ca2:	f7e8 fddb 	bl	800085c <__aeabi_ddiv>
 8017ca6:	e783      	b.n	8017bb0 <_strtod_l+0x3d0>
 8017ca8:	4b32      	ldr	r3, [pc, #200]	@ (8017d74 <_strtod_l+0x594>)
 8017caa:	9308      	str	r3, [sp, #32]
 8017cac:	2300      	movs	r3, #0
 8017cae:	1124      	asrs	r4, r4, #4
 8017cb0:	4650      	mov	r0, sl
 8017cb2:	4659      	mov	r1, fp
 8017cb4:	461e      	mov	r6, r3
 8017cb6:	2c01      	cmp	r4, #1
 8017cb8:	dc21      	bgt.n	8017cfe <_strtod_l+0x51e>
 8017cba:	b10b      	cbz	r3, 8017cc0 <_strtod_l+0x4e0>
 8017cbc:	4682      	mov	sl, r0
 8017cbe:	468b      	mov	fp, r1
 8017cc0:	492c      	ldr	r1, [pc, #176]	@ (8017d74 <_strtod_l+0x594>)
 8017cc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8017cc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8017cca:	4652      	mov	r2, sl
 8017ccc:	465b      	mov	r3, fp
 8017cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017cd2:	f7e8 fc99 	bl	8000608 <__aeabi_dmul>
 8017cd6:	4b28      	ldr	r3, [pc, #160]	@ (8017d78 <_strtod_l+0x598>)
 8017cd8:	460a      	mov	r2, r1
 8017cda:	400b      	ands	r3, r1
 8017cdc:	4927      	ldr	r1, [pc, #156]	@ (8017d7c <_strtod_l+0x59c>)
 8017cde:	428b      	cmp	r3, r1
 8017ce0:	4682      	mov	sl, r0
 8017ce2:	d898      	bhi.n	8017c16 <_strtod_l+0x436>
 8017ce4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8017ce8:	428b      	cmp	r3, r1
 8017cea:	bf86      	itte	hi
 8017cec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8017d80 <_strtod_l+0x5a0>
 8017cf0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8017cf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	9308      	str	r3, [sp, #32]
 8017cfc:	e07a      	b.n	8017df4 <_strtod_l+0x614>
 8017cfe:	07e2      	lsls	r2, r4, #31
 8017d00:	d505      	bpl.n	8017d0e <_strtod_l+0x52e>
 8017d02:	9b08      	ldr	r3, [sp, #32]
 8017d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d08:	f7e8 fc7e 	bl	8000608 <__aeabi_dmul>
 8017d0c:	2301      	movs	r3, #1
 8017d0e:	9a08      	ldr	r2, [sp, #32]
 8017d10:	3208      	adds	r2, #8
 8017d12:	3601      	adds	r6, #1
 8017d14:	1064      	asrs	r4, r4, #1
 8017d16:	9208      	str	r2, [sp, #32]
 8017d18:	e7cd      	b.n	8017cb6 <_strtod_l+0x4d6>
 8017d1a:	d0ed      	beq.n	8017cf8 <_strtod_l+0x518>
 8017d1c:	4264      	negs	r4, r4
 8017d1e:	f014 020f 	ands.w	r2, r4, #15
 8017d22:	d00a      	beq.n	8017d3a <_strtod_l+0x55a>
 8017d24:	4b12      	ldr	r3, [pc, #72]	@ (8017d70 <_strtod_l+0x590>)
 8017d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017d2a:	4650      	mov	r0, sl
 8017d2c:	4659      	mov	r1, fp
 8017d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d32:	f7e8 fd93 	bl	800085c <__aeabi_ddiv>
 8017d36:	4682      	mov	sl, r0
 8017d38:	468b      	mov	fp, r1
 8017d3a:	1124      	asrs	r4, r4, #4
 8017d3c:	d0dc      	beq.n	8017cf8 <_strtod_l+0x518>
 8017d3e:	2c1f      	cmp	r4, #31
 8017d40:	dd20      	ble.n	8017d84 <_strtod_l+0x5a4>
 8017d42:	2400      	movs	r4, #0
 8017d44:	46a0      	mov	r8, r4
 8017d46:	940a      	str	r4, [sp, #40]	@ 0x28
 8017d48:	46a1      	mov	r9, r4
 8017d4a:	9a05      	ldr	r2, [sp, #20]
 8017d4c:	2322      	movs	r3, #34	@ 0x22
 8017d4e:	f04f 0a00 	mov.w	sl, #0
 8017d52:	f04f 0b00 	mov.w	fp, #0
 8017d56:	6013      	str	r3, [r2, #0]
 8017d58:	e768      	b.n	8017c2c <_strtod_l+0x44c>
 8017d5a:	bf00      	nop
 8017d5c:	0802f069 	.word	0x0802f069
 8017d60:	0802f27c 	.word	0x0802f27c
 8017d64:	0802f061 	.word	0x0802f061
 8017d68:	0802f098 	.word	0x0802f098
 8017d6c:	0802f425 	.word	0x0802f425
 8017d70:	0802f1b0 	.word	0x0802f1b0
 8017d74:	0802f188 	.word	0x0802f188
 8017d78:	7ff00000 	.word	0x7ff00000
 8017d7c:	7ca00000 	.word	0x7ca00000
 8017d80:	7fefffff 	.word	0x7fefffff
 8017d84:	f014 0310 	ands.w	r3, r4, #16
 8017d88:	bf18      	it	ne
 8017d8a:	236a      	movne	r3, #106	@ 0x6a
 8017d8c:	4ea9      	ldr	r6, [pc, #676]	@ (8018034 <_strtod_l+0x854>)
 8017d8e:	9308      	str	r3, [sp, #32]
 8017d90:	4650      	mov	r0, sl
 8017d92:	4659      	mov	r1, fp
 8017d94:	2300      	movs	r3, #0
 8017d96:	07e2      	lsls	r2, r4, #31
 8017d98:	d504      	bpl.n	8017da4 <_strtod_l+0x5c4>
 8017d9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017d9e:	f7e8 fc33 	bl	8000608 <__aeabi_dmul>
 8017da2:	2301      	movs	r3, #1
 8017da4:	1064      	asrs	r4, r4, #1
 8017da6:	f106 0608 	add.w	r6, r6, #8
 8017daa:	d1f4      	bne.n	8017d96 <_strtod_l+0x5b6>
 8017dac:	b10b      	cbz	r3, 8017db2 <_strtod_l+0x5d2>
 8017dae:	4682      	mov	sl, r0
 8017db0:	468b      	mov	fp, r1
 8017db2:	9b08      	ldr	r3, [sp, #32]
 8017db4:	b1b3      	cbz	r3, 8017de4 <_strtod_l+0x604>
 8017db6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017dba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	4659      	mov	r1, fp
 8017dc2:	dd0f      	ble.n	8017de4 <_strtod_l+0x604>
 8017dc4:	2b1f      	cmp	r3, #31
 8017dc6:	dd55      	ble.n	8017e74 <_strtod_l+0x694>
 8017dc8:	2b34      	cmp	r3, #52	@ 0x34
 8017dca:	bfde      	ittt	le
 8017dcc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8017dd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8017dd4:	4093      	lslle	r3, r2
 8017dd6:	f04f 0a00 	mov.w	sl, #0
 8017dda:	bfcc      	ite	gt
 8017ddc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8017de0:	ea03 0b01 	andle.w	fp, r3, r1
 8017de4:	2200      	movs	r2, #0
 8017de6:	2300      	movs	r3, #0
 8017de8:	4650      	mov	r0, sl
 8017dea:	4659      	mov	r1, fp
 8017dec:	f7e8 fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8017df0:	2800      	cmp	r0, #0
 8017df2:	d1a6      	bne.n	8017d42 <_strtod_l+0x562>
 8017df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017df6:	9300      	str	r3, [sp, #0]
 8017df8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017dfa:	9805      	ldr	r0, [sp, #20]
 8017dfc:	462b      	mov	r3, r5
 8017dfe:	463a      	mov	r2, r7
 8017e00:	f7ff f8c6 	bl	8016f90 <__s2b>
 8017e04:	900a      	str	r0, [sp, #40]	@ 0x28
 8017e06:	2800      	cmp	r0, #0
 8017e08:	f43f af05 	beq.w	8017c16 <_strtod_l+0x436>
 8017e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e0e:	2a00      	cmp	r2, #0
 8017e10:	eba9 0308 	sub.w	r3, r9, r8
 8017e14:	bfa8      	it	ge
 8017e16:	2300      	movge	r3, #0
 8017e18:	9312      	str	r3, [sp, #72]	@ 0x48
 8017e1a:	2400      	movs	r4, #0
 8017e1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017e20:	9316      	str	r3, [sp, #88]	@ 0x58
 8017e22:	46a0      	mov	r8, r4
 8017e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017e26:	9805      	ldr	r0, [sp, #20]
 8017e28:	6859      	ldr	r1, [r3, #4]
 8017e2a:	f7ff f809 	bl	8016e40 <_Balloc>
 8017e2e:	4681      	mov	r9, r0
 8017e30:	2800      	cmp	r0, #0
 8017e32:	f43f aef4 	beq.w	8017c1e <_strtod_l+0x43e>
 8017e36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017e38:	691a      	ldr	r2, [r3, #16]
 8017e3a:	3202      	adds	r2, #2
 8017e3c:	f103 010c 	add.w	r1, r3, #12
 8017e40:	0092      	lsls	r2, r2, #2
 8017e42:	300c      	adds	r0, #12
 8017e44:	f7fe f899 	bl	8015f7a <memcpy>
 8017e48:	ec4b ab10 	vmov	d0, sl, fp
 8017e4c:	9805      	ldr	r0, [sp, #20]
 8017e4e:	aa1c      	add	r2, sp, #112	@ 0x70
 8017e50:	a91b      	add	r1, sp, #108	@ 0x6c
 8017e52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8017e56:	f7ff fbd7 	bl	8017608 <__d2b>
 8017e5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8017e5c:	2800      	cmp	r0, #0
 8017e5e:	f43f aede 	beq.w	8017c1e <_strtod_l+0x43e>
 8017e62:	9805      	ldr	r0, [sp, #20]
 8017e64:	2101      	movs	r1, #1
 8017e66:	f7ff f929 	bl	80170bc <__i2b>
 8017e6a:	4680      	mov	r8, r0
 8017e6c:	b948      	cbnz	r0, 8017e82 <_strtod_l+0x6a2>
 8017e6e:	f04f 0800 	mov.w	r8, #0
 8017e72:	e6d4      	b.n	8017c1e <_strtod_l+0x43e>
 8017e74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017e78:	fa02 f303 	lsl.w	r3, r2, r3
 8017e7c:	ea03 0a0a 	and.w	sl, r3, sl
 8017e80:	e7b0      	b.n	8017de4 <_strtod_l+0x604>
 8017e82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8017e84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017e86:	2d00      	cmp	r5, #0
 8017e88:	bfab      	itete	ge
 8017e8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8017e8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8017e8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8017e90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8017e92:	bfac      	ite	ge
 8017e94:	18ef      	addge	r7, r5, r3
 8017e96:	1b5e      	sublt	r6, r3, r5
 8017e98:	9b08      	ldr	r3, [sp, #32]
 8017e9a:	1aed      	subs	r5, r5, r3
 8017e9c:	4415      	add	r5, r2
 8017e9e:	4b66      	ldr	r3, [pc, #408]	@ (8018038 <_strtod_l+0x858>)
 8017ea0:	3d01      	subs	r5, #1
 8017ea2:	429d      	cmp	r5, r3
 8017ea4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8017ea8:	da50      	bge.n	8017f4c <_strtod_l+0x76c>
 8017eaa:	1b5b      	subs	r3, r3, r5
 8017eac:	2b1f      	cmp	r3, #31
 8017eae:	eba2 0203 	sub.w	r2, r2, r3
 8017eb2:	f04f 0101 	mov.w	r1, #1
 8017eb6:	dc3d      	bgt.n	8017f34 <_strtod_l+0x754>
 8017eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8017ebc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	9310      	str	r3, [sp, #64]	@ 0x40
 8017ec2:	18bd      	adds	r5, r7, r2
 8017ec4:	9b08      	ldr	r3, [sp, #32]
 8017ec6:	42af      	cmp	r7, r5
 8017ec8:	4416      	add	r6, r2
 8017eca:	441e      	add	r6, r3
 8017ecc:	463b      	mov	r3, r7
 8017ece:	bfa8      	it	ge
 8017ed0:	462b      	movge	r3, r5
 8017ed2:	42b3      	cmp	r3, r6
 8017ed4:	bfa8      	it	ge
 8017ed6:	4633      	movge	r3, r6
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	bfc2      	ittt	gt
 8017edc:	1aed      	subgt	r5, r5, r3
 8017ede:	1af6      	subgt	r6, r6, r3
 8017ee0:	1aff      	subgt	r7, r7, r3
 8017ee2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	dd16      	ble.n	8017f16 <_strtod_l+0x736>
 8017ee8:	4641      	mov	r1, r8
 8017eea:	9805      	ldr	r0, [sp, #20]
 8017eec:	461a      	mov	r2, r3
 8017eee:	f7ff f9a5 	bl	801723c <__pow5mult>
 8017ef2:	4680      	mov	r8, r0
 8017ef4:	2800      	cmp	r0, #0
 8017ef6:	d0ba      	beq.n	8017e6e <_strtod_l+0x68e>
 8017ef8:	4601      	mov	r1, r0
 8017efa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017efc:	9805      	ldr	r0, [sp, #20]
 8017efe:	f7ff f8f3 	bl	80170e8 <__multiply>
 8017f02:	900e      	str	r0, [sp, #56]	@ 0x38
 8017f04:	2800      	cmp	r0, #0
 8017f06:	f43f ae8a 	beq.w	8017c1e <_strtod_l+0x43e>
 8017f0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017f0c:	9805      	ldr	r0, [sp, #20]
 8017f0e:	f7fe ffd7 	bl	8016ec0 <_Bfree>
 8017f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f14:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f16:	2d00      	cmp	r5, #0
 8017f18:	dc1d      	bgt.n	8017f56 <_strtod_l+0x776>
 8017f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	dd23      	ble.n	8017f68 <_strtod_l+0x788>
 8017f20:	4649      	mov	r1, r9
 8017f22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8017f24:	9805      	ldr	r0, [sp, #20]
 8017f26:	f7ff f989 	bl	801723c <__pow5mult>
 8017f2a:	4681      	mov	r9, r0
 8017f2c:	b9e0      	cbnz	r0, 8017f68 <_strtod_l+0x788>
 8017f2e:	f04f 0900 	mov.w	r9, #0
 8017f32:	e674      	b.n	8017c1e <_strtod_l+0x43e>
 8017f34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8017f38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8017f3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8017f40:	35e2      	adds	r5, #226	@ 0xe2
 8017f42:	fa01 f305 	lsl.w	r3, r1, r5
 8017f46:	9310      	str	r3, [sp, #64]	@ 0x40
 8017f48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017f4a:	e7ba      	b.n	8017ec2 <_strtod_l+0x6e2>
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8017f50:	2301      	movs	r3, #1
 8017f52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017f54:	e7b5      	b.n	8017ec2 <_strtod_l+0x6e2>
 8017f56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017f58:	9805      	ldr	r0, [sp, #20]
 8017f5a:	462a      	mov	r2, r5
 8017f5c:	f7ff f9c8 	bl	80172f0 <__lshift>
 8017f60:	901a      	str	r0, [sp, #104]	@ 0x68
 8017f62:	2800      	cmp	r0, #0
 8017f64:	d1d9      	bne.n	8017f1a <_strtod_l+0x73a>
 8017f66:	e65a      	b.n	8017c1e <_strtod_l+0x43e>
 8017f68:	2e00      	cmp	r6, #0
 8017f6a:	dd07      	ble.n	8017f7c <_strtod_l+0x79c>
 8017f6c:	4649      	mov	r1, r9
 8017f6e:	9805      	ldr	r0, [sp, #20]
 8017f70:	4632      	mov	r2, r6
 8017f72:	f7ff f9bd 	bl	80172f0 <__lshift>
 8017f76:	4681      	mov	r9, r0
 8017f78:	2800      	cmp	r0, #0
 8017f7a:	d0d8      	beq.n	8017f2e <_strtod_l+0x74e>
 8017f7c:	2f00      	cmp	r7, #0
 8017f7e:	dd08      	ble.n	8017f92 <_strtod_l+0x7b2>
 8017f80:	4641      	mov	r1, r8
 8017f82:	9805      	ldr	r0, [sp, #20]
 8017f84:	463a      	mov	r2, r7
 8017f86:	f7ff f9b3 	bl	80172f0 <__lshift>
 8017f8a:	4680      	mov	r8, r0
 8017f8c:	2800      	cmp	r0, #0
 8017f8e:	f43f ae46 	beq.w	8017c1e <_strtod_l+0x43e>
 8017f92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017f94:	9805      	ldr	r0, [sp, #20]
 8017f96:	464a      	mov	r2, r9
 8017f98:	f7ff fa32 	bl	8017400 <__mdiff>
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	2800      	cmp	r0, #0
 8017fa0:	f43f ae3d 	beq.w	8017c1e <_strtod_l+0x43e>
 8017fa4:	68c3      	ldr	r3, [r0, #12]
 8017fa6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017fa8:	2300      	movs	r3, #0
 8017faa:	60c3      	str	r3, [r0, #12]
 8017fac:	4641      	mov	r1, r8
 8017fae:	f7ff fa0b 	bl	80173c8 <__mcmp>
 8017fb2:	2800      	cmp	r0, #0
 8017fb4:	da46      	bge.n	8018044 <_strtod_l+0x864>
 8017fb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017fb8:	ea53 030a 	orrs.w	r3, r3, sl
 8017fbc:	d16c      	bne.n	8018098 <_strtod_l+0x8b8>
 8017fbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d168      	bne.n	8018098 <_strtod_l+0x8b8>
 8017fc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017fca:	0d1b      	lsrs	r3, r3, #20
 8017fcc:	051b      	lsls	r3, r3, #20
 8017fce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017fd2:	d961      	bls.n	8018098 <_strtod_l+0x8b8>
 8017fd4:	6963      	ldr	r3, [r4, #20]
 8017fd6:	b913      	cbnz	r3, 8017fde <_strtod_l+0x7fe>
 8017fd8:	6923      	ldr	r3, [r4, #16]
 8017fda:	2b01      	cmp	r3, #1
 8017fdc:	dd5c      	ble.n	8018098 <_strtod_l+0x8b8>
 8017fde:	4621      	mov	r1, r4
 8017fe0:	2201      	movs	r2, #1
 8017fe2:	9805      	ldr	r0, [sp, #20]
 8017fe4:	f7ff f984 	bl	80172f0 <__lshift>
 8017fe8:	4641      	mov	r1, r8
 8017fea:	4604      	mov	r4, r0
 8017fec:	f7ff f9ec 	bl	80173c8 <__mcmp>
 8017ff0:	2800      	cmp	r0, #0
 8017ff2:	dd51      	ble.n	8018098 <_strtod_l+0x8b8>
 8017ff4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017ff8:	9a08      	ldr	r2, [sp, #32]
 8017ffa:	0d1b      	lsrs	r3, r3, #20
 8017ffc:	051b      	lsls	r3, r3, #20
 8017ffe:	2a00      	cmp	r2, #0
 8018000:	d06b      	beq.n	80180da <_strtod_l+0x8fa>
 8018002:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018006:	d868      	bhi.n	80180da <_strtod_l+0x8fa>
 8018008:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801800c:	f67f ae9d 	bls.w	8017d4a <_strtod_l+0x56a>
 8018010:	4b0a      	ldr	r3, [pc, #40]	@ (801803c <_strtod_l+0x85c>)
 8018012:	4650      	mov	r0, sl
 8018014:	4659      	mov	r1, fp
 8018016:	2200      	movs	r2, #0
 8018018:	f7e8 faf6 	bl	8000608 <__aeabi_dmul>
 801801c:	4b08      	ldr	r3, [pc, #32]	@ (8018040 <_strtod_l+0x860>)
 801801e:	400b      	ands	r3, r1
 8018020:	4682      	mov	sl, r0
 8018022:	468b      	mov	fp, r1
 8018024:	2b00      	cmp	r3, #0
 8018026:	f47f ae05 	bne.w	8017c34 <_strtod_l+0x454>
 801802a:	9a05      	ldr	r2, [sp, #20]
 801802c:	2322      	movs	r3, #34	@ 0x22
 801802e:	6013      	str	r3, [r2, #0]
 8018030:	e600      	b.n	8017c34 <_strtod_l+0x454>
 8018032:	bf00      	nop
 8018034:	0802f2a8 	.word	0x0802f2a8
 8018038:	fffffc02 	.word	0xfffffc02
 801803c:	39500000 	.word	0x39500000
 8018040:	7ff00000 	.word	0x7ff00000
 8018044:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8018048:	d165      	bne.n	8018116 <_strtod_l+0x936>
 801804a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801804c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018050:	b35a      	cbz	r2, 80180aa <_strtod_l+0x8ca>
 8018052:	4a9f      	ldr	r2, [pc, #636]	@ (80182d0 <_strtod_l+0xaf0>)
 8018054:	4293      	cmp	r3, r2
 8018056:	d12b      	bne.n	80180b0 <_strtod_l+0x8d0>
 8018058:	9b08      	ldr	r3, [sp, #32]
 801805a:	4651      	mov	r1, sl
 801805c:	b303      	cbz	r3, 80180a0 <_strtod_l+0x8c0>
 801805e:	4b9d      	ldr	r3, [pc, #628]	@ (80182d4 <_strtod_l+0xaf4>)
 8018060:	465a      	mov	r2, fp
 8018062:	4013      	ands	r3, r2
 8018064:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801806c:	d81b      	bhi.n	80180a6 <_strtod_l+0x8c6>
 801806e:	0d1b      	lsrs	r3, r3, #20
 8018070:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018074:	fa02 f303 	lsl.w	r3, r2, r3
 8018078:	4299      	cmp	r1, r3
 801807a:	d119      	bne.n	80180b0 <_strtod_l+0x8d0>
 801807c:	4b96      	ldr	r3, [pc, #600]	@ (80182d8 <_strtod_l+0xaf8>)
 801807e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018080:	429a      	cmp	r2, r3
 8018082:	d102      	bne.n	801808a <_strtod_l+0x8aa>
 8018084:	3101      	adds	r1, #1
 8018086:	f43f adca 	beq.w	8017c1e <_strtod_l+0x43e>
 801808a:	4b92      	ldr	r3, [pc, #584]	@ (80182d4 <_strtod_l+0xaf4>)
 801808c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801808e:	401a      	ands	r2, r3
 8018090:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8018094:	f04f 0a00 	mov.w	sl, #0
 8018098:	9b08      	ldr	r3, [sp, #32]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d1b8      	bne.n	8018010 <_strtod_l+0x830>
 801809e:	e5c9      	b.n	8017c34 <_strtod_l+0x454>
 80180a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80180a4:	e7e8      	b.n	8018078 <_strtod_l+0x898>
 80180a6:	4613      	mov	r3, r2
 80180a8:	e7e6      	b.n	8018078 <_strtod_l+0x898>
 80180aa:	ea53 030a 	orrs.w	r3, r3, sl
 80180ae:	d0a1      	beq.n	8017ff4 <_strtod_l+0x814>
 80180b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80180b2:	b1db      	cbz	r3, 80180ec <_strtod_l+0x90c>
 80180b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80180b6:	4213      	tst	r3, r2
 80180b8:	d0ee      	beq.n	8018098 <_strtod_l+0x8b8>
 80180ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80180bc:	9a08      	ldr	r2, [sp, #32]
 80180be:	4650      	mov	r0, sl
 80180c0:	4659      	mov	r1, fp
 80180c2:	b1bb      	cbz	r3, 80180f4 <_strtod_l+0x914>
 80180c4:	f7ff fb6e 	bl	80177a4 <sulp>
 80180c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80180cc:	ec53 2b10 	vmov	r2, r3, d0
 80180d0:	f7e8 f8e4 	bl	800029c <__adddf3>
 80180d4:	4682      	mov	sl, r0
 80180d6:	468b      	mov	fp, r1
 80180d8:	e7de      	b.n	8018098 <_strtod_l+0x8b8>
 80180da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80180de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80180e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80180e6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80180ea:	e7d5      	b.n	8018098 <_strtod_l+0x8b8>
 80180ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80180ee:	ea13 0f0a 	tst.w	r3, sl
 80180f2:	e7e1      	b.n	80180b8 <_strtod_l+0x8d8>
 80180f4:	f7ff fb56 	bl	80177a4 <sulp>
 80180f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80180fc:	ec53 2b10 	vmov	r2, r3, d0
 8018100:	f7e8 f8ca 	bl	8000298 <__aeabi_dsub>
 8018104:	2200      	movs	r2, #0
 8018106:	2300      	movs	r3, #0
 8018108:	4682      	mov	sl, r0
 801810a:	468b      	mov	fp, r1
 801810c:	f7e8 fce4 	bl	8000ad8 <__aeabi_dcmpeq>
 8018110:	2800      	cmp	r0, #0
 8018112:	d0c1      	beq.n	8018098 <_strtod_l+0x8b8>
 8018114:	e619      	b.n	8017d4a <_strtod_l+0x56a>
 8018116:	4641      	mov	r1, r8
 8018118:	4620      	mov	r0, r4
 801811a:	f7ff facd 	bl	80176b8 <__ratio>
 801811e:	ec57 6b10 	vmov	r6, r7, d0
 8018122:	2200      	movs	r2, #0
 8018124:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018128:	4630      	mov	r0, r6
 801812a:	4639      	mov	r1, r7
 801812c:	f7e8 fce8 	bl	8000b00 <__aeabi_dcmple>
 8018130:	2800      	cmp	r0, #0
 8018132:	d06f      	beq.n	8018214 <_strtod_l+0xa34>
 8018134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018136:	2b00      	cmp	r3, #0
 8018138:	d17a      	bne.n	8018230 <_strtod_l+0xa50>
 801813a:	f1ba 0f00 	cmp.w	sl, #0
 801813e:	d158      	bne.n	80181f2 <_strtod_l+0xa12>
 8018140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018146:	2b00      	cmp	r3, #0
 8018148:	d15a      	bne.n	8018200 <_strtod_l+0xa20>
 801814a:	4b64      	ldr	r3, [pc, #400]	@ (80182dc <_strtod_l+0xafc>)
 801814c:	2200      	movs	r2, #0
 801814e:	4630      	mov	r0, r6
 8018150:	4639      	mov	r1, r7
 8018152:	f7e8 fccb 	bl	8000aec <__aeabi_dcmplt>
 8018156:	2800      	cmp	r0, #0
 8018158:	d159      	bne.n	801820e <_strtod_l+0xa2e>
 801815a:	4630      	mov	r0, r6
 801815c:	4639      	mov	r1, r7
 801815e:	4b60      	ldr	r3, [pc, #384]	@ (80182e0 <_strtod_l+0xb00>)
 8018160:	2200      	movs	r2, #0
 8018162:	f7e8 fa51 	bl	8000608 <__aeabi_dmul>
 8018166:	4606      	mov	r6, r0
 8018168:	460f      	mov	r7, r1
 801816a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801816e:	9606      	str	r6, [sp, #24]
 8018170:	9307      	str	r3, [sp, #28]
 8018172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018176:	4d57      	ldr	r5, [pc, #348]	@ (80182d4 <_strtod_l+0xaf4>)
 8018178:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801817c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801817e:	401d      	ands	r5, r3
 8018180:	4b58      	ldr	r3, [pc, #352]	@ (80182e4 <_strtod_l+0xb04>)
 8018182:	429d      	cmp	r5, r3
 8018184:	f040 80b2 	bne.w	80182ec <_strtod_l+0xb0c>
 8018188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801818a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801818e:	ec4b ab10 	vmov	d0, sl, fp
 8018192:	f7ff f9c9 	bl	8017528 <__ulp>
 8018196:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801819a:	ec51 0b10 	vmov	r0, r1, d0
 801819e:	f7e8 fa33 	bl	8000608 <__aeabi_dmul>
 80181a2:	4652      	mov	r2, sl
 80181a4:	465b      	mov	r3, fp
 80181a6:	f7e8 f879 	bl	800029c <__adddf3>
 80181aa:	460b      	mov	r3, r1
 80181ac:	4949      	ldr	r1, [pc, #292]	@ (80182d4 <_strtod_l+0xaf4>)
 80181ae:	4a4e      	ldr	r2, [pc, #312]	@ (80182e8 <_strtod_l+0xb08>)
 80181b0:	4019      	ands	r1, r3
 80181b2:	4291      	cmp	r1, r2
 80181b4:	4682      	mov	sl, r0
 80181b6:	d942      	bls.n	801823e <_strtod_l+0xa5e>
 80181b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80181ba:	4b47      	ldr	r3, [pc, #284]	@ (80182d8 <_strtod_l+0xaf8>)
 80181bc:	429a      	cmp	r2, r3
 80181be:	d103      	bne.n	80181c8 <_strtod_l+0x9e8>
 80181c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80181c2:	3301      	adds	r3, #1
 80181c4:	f43f ad2b 	beq.w	8017c1e <_strtod_l+0x43e>
 80181c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80182d8 <_strtod_l+0xaf8>
 80181cc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80181d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80181d2:	9805      	ldr	r0, [sp, #20]
 80181d4:	f7fe fe74 	bl	8016ec0 <_Bfree>
 80181d8:	9805      	ldr	r0, [sp, #20]
 80181da:	4649      	mov	r1, r9
 80181dc:	f7fe fe70 	bl	8016ec0 <_Bfree>
 80181e0:	9805      	ldr	r0, [sp, #20]
 80181e2:	4641      	mov	r1, r8
 80181e4:	f7fe fe6c 	bl	8016ec0 <_Bfree>
 80181e8:	9805      	ldr	r0, [sp, #20]
 80181ea:	4621      	mov	r1, r4
 80181ec:	f7fe fe68 	bl	8016ec0 <_Bfree>
 80181f0:	e618      	b.n	8017e24 <_strtod_l+0x644>
 80181f2:	f1ba 0f01 	cmp.w	sl, #1
 80181f6:	d103      	bne.n	8018200 <_strtod_l+0xa20>
 80181f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	f43f ada5 	beq.w	8017d4a <_strtod_l+0x56a>
 8018200:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80182b0 <_strtod_l+0xad0>
 8018204:	4f35      	ldr	r7, [pc, #212]	@ (80182dc <_strtod_l+0xafc>)
 8018206:	ed8d 7b06 	vstr	d7, [sp, #24]
 801820a:	2600      	movs	r6, #0
 801820c:	e7b1      	b.n	8018172 <_strtod_l+0x992>
 801820e:	4f34      	ldr	r7, [pc, #208]	@ (80182e0 <_strtod_l+0xb00>)
 8018210:	2600      	movs	r6, #0
 8018212:	e7aa      	b.n	801816a <_strtod_l+0x98a>
 8018214:	4b32      	ldr	r3, [pc, #200]	@ (80182e0 <_strtod_l+0xb00>)
 8018216:	4630      	mov	r0, r6
 8018218:	4639      	mov	r1, r7
 801821a:	2200      	movs	r2, #0
 801821c:	f7e8 f9f4 	bl	8000608 <__aeabi_dmul>
 8018220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018222:	4606      	mov	r6, r0
 8018224:	460f      	mov	r7, r1
 8018226:	2b00      	cmp	r3, #0
 8018228:	d09f      	beq.n	801816a <_strtod_l+0x98a>
 801822a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801822e:	e7a0      	b.n	8018172 <_strtod_l+0x992>
 8018230:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80182b8 <_strtod_l+0xad8>
 8018234:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018238:	ec57 6b17 	vmov	r6, r7, d7
 801823c:	e799      	b.n	8018172 <_strtod_l+0x992>
 801823e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8018242:	9b08      	ldr	r3, [sp, #32]
 8018244:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8018248:	2b00      	cmp	r3, #0
 801824a:	d1c1      	bne.n	80181d0 <_strtod_l+0x9f0>
 801824c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018250:	0d1b      	lsrs	r3, r3, #20
 8018252:	051b      	lsls	r3, r3, #20
 8018254:	429d      	cmp	r5, r3
 8018256:	d1bb      	bne.n	80181d0 <_strtod_l+0x9f0>
 8018258:	4630      	mov	r0, r6
 801825a:	4639      	mov	r1, r7
 801825c:	f7e8 fd34 	bl	8000cc8 <__aeabi_d2lz>
 8018260:	f7e8 f9a4 	bl	80005ac <__aeabi_l2d>
 8018264:	4602      	mov	r2, r0
 8018266:	460b      	mov	r3, r1
 8018268:	4630      	mov	r0, r6
 801826a:	4639      	mov	r1, r7
 801826c:	f7e8 f814 	bl	8000298 <__aeabi_dsub>
 8018270:	460b      	mov	r3, r1
 8018272:	4602      	mov	r2, r0
 8018274:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8018278:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801827c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801827e:	ea46 060a 	orr.w	r6, r6, sl
 8018282:	431e      	orrs	r6, r3
 8018284:	d06f      	beq.n	8018366 <_strtod_l+0xb86>
 8018286:	a30e      	add	r3, pc, #56	@ (adr r3, 80182c0 <_strtod_l+0xae0>)
 8018288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801828c:	f7e8 fc2e 	bl	8000aec <__aeabi_dcmplt>
 8018290:	2800      	cmp	r0, #0
 8018292:	f47f accf 	bne.w	8017c34 <_strtod_l+0x454>
 8018296:	a30c      	add	r3, pc, #48	@ (adr r3, 80182c8 <_strtod_l+0xae8>)
 8018298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801829c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80182a0:	f7e8 fc42 	bl	8000b28 <__aeabi_dcmpgt>
 80182a4:	2800      	cmp	r0, #0
 80182a6:	d093      	beq.n	80181d0 <_strtod_l+0x9f0>
 80182a8:	e4c4      	b.n	8017c34 <_strtod_l+0x454>
 80182aa:	bf00      	nop
 80182ac:	f3af 8000 	nop.w
 80182b0:	00000000 	.word	0x00000000
 80182b4:	bff00000 	.word	0xbff00000
 80182b8:	00000000 	.word	0x00000000
 80182bc:	3ff00000 	.word	0x3ff00000
 80182c0:	94a03595 	.word	0x94a03595
 80182c4:	3fdfffff 	.word	0x3fdfffff
 80182c8:	35afe535 	.word	0x35afe535
 80182cc:	3fe00000 	.word	0x3fe00000
 80182d0:	000fffff 	.word	0x000fffff
 80182d4:	7ff00000 	.word	0x7ff00000
 80182d8:	7fefffff 	.word	0x7fefffff
 80182dc:	3ff00000 	.word	0x3ff00000
 80182e0:	3fe00000 	.word	0x3fe00000
 80182e4:	7fe00000 	.word	0x7fe00000
 80182e8:	7c9fffff 	.word	0x7c9fffff
 80182ec:	9b08      	ldr	r3, [sp, #32]
 80182ee:	b323      	cbz	r3, 801833a <_strtod_l+0xb5a>
 80182f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80182f4:	d821      	bhi.n	801833a <_strtod_l+0xb5a>
 80182f6:	a328      	add	r3, pc, #160	@ (adr r3, 8018398 <_strtod_l+0xbb8>)
 80182f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182fc:	4630      	mov	r0, r6
 80182fe:	4639      	mov	r1, r7
 8018300:	f7e8 fbfe 	bl	8000b00 <__aeabi_dcmple>
 8018304:	b1a0      	cbz	r0, 8018330 <_strtod_l+0xb50>
 8018306:	4639      	mov	r1, r7
 8018308:	4630      	mov	r0, r6
 801830a:	f7e8 fc55 	bl	8000bb8 <__aeabi_d2uiz>
 801830e:	2801      	cmp	r0, #1
 8018310:	bf38      	it	cc
 8018312:	2001      	movcc	r0, #1
 8018314:	f7e8 f8fe 	bl	8000514 <__aeabi_ui2d>
 8018318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801831a:	4606      	mov	r6, r0
 801831c:	460f      	mov	r7, r1
 801831e:	b9fb      	cbnz	r3, 8018360 <_strtod_l+0xb80>
 8018320:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018324:	9014      	str	r0, [sp, #80]	@ 0x50
 8018326:	9315      	str	r3, [sp, #84]	@ 0x54
 8018328:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801832c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018330:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018332:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8018336:	1b5b      	subs	r3, r3, r5
 8018338:	9311      	str	r3, [sp, #68]	@ 0x44
 801833a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801833e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8018342:	f7ff f8f1 	bl	8017528 <__ulp>
 8018346:	4650      	mov	r0, sl
 8018348:	ec53 2b10 	vmov	r2, r3, d0
 801834c:	4659      	mov	r1, fp
 801834e:	f7e8 f95b 	bl	8000608 <__aeabi_dmul>
 8018352:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8018356:	f7e7 ffa1 	bl	800029c <__adddf3>
 801835a:	4682      	mov	sl, r0
 801835c:	468b      	mov	fp, r1
 801835e:	e770      	b.n	8018242 <_strtod_l+0xa62>
 8018360:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8018364:	e7e0      	b.n	8018328 <_strtod_l+0xb48>
 8018366:	a30e      	add	r3, pc, #56	@ (adr r3, 80183a0 <_strtod_l+0xbc0>)
 8018368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801836c:	f7e8 fbbe 	bl	8000aec <__aeabi_dcmplt>
 8018370:	e798      	b.n	80182a4 <_strtod_l+0xac4>
 8018372:	2300      	movs	r3, #0
 8018374:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018376:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8018378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801837a:	6013      	str	r3, [r2, #0]
 801837c:	f7ff ba6d 	b.w	801785a <_strtod_l+0x7a>
 8018380:	2a65      	cmp	r2, #101	@ 0x65
 8018382:	f43f ab66 	beq.w	8017a52 <_strtod_l+0x272>
 8018386:	2a45      	cmp	r2, #69	@ 0x45
 8018388:	f43f ab63 	beq.w	8017a52 <_strtod_l+0x272>
 801838c:	2301      	movs	r3, #1
 801838e:	f7ff bb9e 	b.w	8017ace <_strtod_l+0x2ee>
 8018392:	bf00      	nop
 8018394:	f3af 8000 	nop.w
 8018398:	ffc00000 	.word	0xffc00000
 801839c:	41dfffff 	.word	0x41dfffff
 80183a0:	94a03595 	.word	0x94a03595
 80183a4:	3fcfffff 	.word	0x3fcfffff

080183a8 <_strtod_r>:
 80183a8:	4b01      	ldr	r3, [pc, #4]	@ (80183b0 <_strtod_r+0x8>)
 80183aa:	f7ff ba19 	b.w	80177e0 <_strtod_l>
 80183ae:	bf00      	nop
 80183b0:	20000190 	.word	0x20000190

080183b4 <_strtol_l.constprop.0>:
 80183b4:	2b24      	cmp	r3, #36	@ 0x24
 80183b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183ba:	4686      	mov	lr, r0
 80183bc:	4690      	mov	r8, r2
 80183be:	d801      	bhi.n	80183c4 <_strtol_l.constprop.0+0x10>
 80183c0:	2b01      	cmp	r3, #1
 80183c2:	d106      	bne.n	80183d2 <_strtol_l.constprop.0+0x1e>
 80183c4:	f7fd fdac 	bl	8015f20 <__errno>
 80183c8:	2316      	movs	r3, #22
 80183ca:	6003      	str	r3, [r0, #0]
 80183cc:	2000      	movs	r0, #0
 80183ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183d2:	4834      	ldr	r0, [pc, #208]	@ (80184a4 <_strtol_l.constprop.0+0xf0>)
 80183d4:	460d      	mov	r5, r1
 80183d6:	462a      	mov	r2, r5
 80183d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80183dc:	5d06      	ldrb	r6, [r0, r4]
 80183de:	f016 0608 	ands.w	r6, r6, #8
 80183e2:	d1f8      	bne.n	80183d6 <_strtol_l.constprop.0+0x22>
 80183e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80183e6:	d12d      	bne.n	8018444 <_strtol_l.constprop.0+0x90>
 80183e8:	782c      	ldrb	r4, [r5, #0]
 80183ea:	2601      	movs	r6, #1
 80183ec:	1c95      	adds	r5, r2, #2
 80183ee:	f033 0210 	bics.w	r2, r3, #16
 80183f2:	d109      	bne.n	8018408 <_strtol_l.constprop.0+0x54>
 80183f4:	2c30      	cmp	r4, #48	@ 0x30
 80183f6:	d12a      	bne.n	801844e <_strtol_l.constprop.0+0x9a>
 80183f8:	782a      	ldrb	r2, [r5, #0]
 80183fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80183fe:	2a58      	cmp	r2, #88	@ 0x58
 8018400:	d125      	bne.n	801844e <_strtol_l.constprop.0+0x9a>
 8018402:	786c      	ldrb	r4, [r5, #1]
 8018404:	2310      	movs	r3, #16
 8018406:	3502      	adds	r5, #2
 8018408:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801840c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8018410:	2200      	movs	r2, #0
 8018412:	fbbc f9f3 	udiv	r9, ip, r3
 8018416:	4610      	mov	r0, r2
 8018418:	fb03 ca19 	mls	sl, r3, r9, ip
 801841c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018420:	2f09      	cmp	r7, #9
 8018422:	d81b      	bhi.n	801845c <_strtol_l.constprop.0+0xa8>
 8018424:	463c      	mov	r4, r7
 8018426:	42a3      	cmp	r3, r4
 8018428:	dd27      	ble.n	801847a <_strtol_l.constprop.0+0xc6>
 801842a:	1c57      	adds	r7, r2, #1
 801842c:	d007      	beq.n	801843e <_strtol_l.constprop.0+0x8a>
 801842e:	4581      	cmp	r9, r0
 8018430:	d320      	bcc.n	8018474 <_strtol_l.constprop.0+0xc0>
 8018432:	d101      	bne.n	8018438 <_strtol_l.constprop.0+0x84>
 8018434:	45a2      	cmp	sl, r4
 8018436:	db1d      	blt.n	8018474 <_strtol_l.constprop.0+0xc0>
 8018438:	fb00 4003 	mla	r0, r0, r3, r4
 801843c:	2201      	movs	r2, #1
 801843e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018442:	e7eb      	b.n	801841c <_strtol_l.constprop.0+0x68>
 8018444:	2c2b      	cmp	r4, #43	@ 0x2b
 8018446:	bf04      	itt	eq
 8018448:	782c      	ldrbeq	r4, [r5, #0]
 801844a:	1c95      	addeq	r5, r2, #2
 801844c:	e7cf      	b.n	80183ee <_strtol_l.constprop.0+0x3a>
 801844e:	2b00      	cmp	r3, #0
 8018450:	d1da      	bne.n	8018408 <_strtol_l.constprop.0+0x54>
 8018452:	2c30      	cmp	r4, #48	@ 0x30
 8018454:	bf0c      	ite	eq
 8018456:	2308      	moveq	r3, #8
 8018458:	230a      	movne	r3, #10
 801845a:	e7d5      	b.n	8018408 <_strtol_l.constprop.0+0x54>
 801845c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018460:	2f19      	cmp	r7, #25
 8018462:	d801      	bhi.n	8018468 <_strtol_l.constprop.0+0xb4>
 8018464:	3c37      	subs	r4, #55	@ 0x37
 8018466:	e7de      	b.n	8018426 <_strtol_l.constprop.0+0x72>
 8018468:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801846c:	2f19      	cmp	r7, #25
 801846e:	d804      	bhi.n	801847a <_strtol_l.constprop.0+0xc6>
 8018470:	3c57      	subs	r4, #87	@ 0x57
 8018472:	e7d8      	b.n	8018426 <_strtol_l.constprop.0+0x72>
 8018474:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018478:	e7e1      	b.n	801843e <_strtol_l.constprop.0+0x8a>
 801847a:	1c53      	adds	r3, r2, #1
 801847c:	d108      	bne.n	8018490 <_strtol_l.constprop.0+0xdc>
 801847e:	2322      	movs	r3, #34	@ 0x22
 8018480:	f8ce 3000 	str.w	r3, [lr]
 8018484:	4660      	mov	r0, ip
 8018486:	f1b8 0f00 	cmp.w	r8, #0
 801848a:	d0a0      	beq.n	80183ce <_strtol_l.constprop.0+0x1a>
 801848c:	1e69      	subs	r1, r5, #1
 801848e:	e006      	b.n	801849e <_strtol_l.constprop.0+0xea>
 8018490:	b106      	cbz	r6, 8018494 <_strtol_l.constprop.0+0xe0>
 8018492:	4240      	negs	r0, r0
 8018494:	f1b8 0f00 	cmp.w	r8, #0
 8018498:	d099      	beq.n	80183ce <_strtol_l.constprop.0+0x1a>
 801849a:	2a00      	cmp	r2, #0
 801849c:	d1f6      	bne.n	801848c <_strtol_l.constprop.0+0xd8>
 801849e:	f8c8 1000 	str.w	r1, [r8]
 80184a2:	e794      	b.n	80183ce <_strtol_l.constprop.0+0x1a>
 80184a4:	0802f2d1 	.word	0x0802f2d1

080184a8 <_strtol_r>:
 80184a8:	f7ff bf84 	b.w	80183b4 <_strtol_l.constprop.0>

080184ac <__ssputs_r>:
 80184ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184b0:	688e      	ldr	r6, [r1, #8]
 80184b2:	461f      	mov	r7, r3
 80184b4:	42be      	cmp	r6, r7
 80184b6:	680b      	ldr	r3, [r1, #0]
 80184b8:	4682      	mov	sl, r0
 80184ba:	460c      	mov	r4, r1
 80184bc:	4690      	mov	r8, r2
 80184be:	d82d      	bhi.n	801851c <__ssputs_r+0x70>
 80184c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80184c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80184c8:	d026      	beq.n	8018518 <__ssputs_r+0x6c>
 80184ca:	6965      	ldr	r5, [r4, #20]
 80184cc:	6909      	ldr	r1, [r1, #16]
 80184ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80184d2:	eba3 0901 	sub.w	r9, r3, r1
 80184d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80184da:	1c7b      	adds	r3, r7, #1
 80184dc:	444b      	add	r3, r9
 80184de:	106d      	asrs	r5, r5, #1
 80184e0:	429d      	cmp	r5, r3
 80184e2:	bf38      	it	cc
 80184e4:	461d      	movcc	r5, r3
 80184e6:	0553      	lsls	r3, r2, #21
 80184e8:	d527      	bpl.n	801853a <__ssputs_r+0x8e>
 80184ea:	4629      	mov	r1, r5
 80184ec:	f7fe fc1c 	bl	8016d28 <_malloc_r>
 80184f0:	4606      	mov	r6, r0
 80184f2:	b360      	cbz	r0, 801854e <__ssputs_r+0xa2>
 80184f4:	6921      	ldr	r1, [r4, #16]
 80184f6:	464a      	mov	r2, r9
 80184f8:	f7fd fd3f 	bl	8015f7a <memcpy>
 80184fc:	89a3      	ldrh	r3, [r4, #12]
 80184fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018506:	81a3      	strh	r3, [r4, #12]
 8018508:	6126      	str	r6, [r4, #16]
 801850a:	6165      	str	r5, [r4, #20]
 801850c:	444e      	add	r6, r9
 801850e:	eba5 0509 	sub.w	r5, r5, r9
 8018512:	6026      	str	r6, [r4, #0]
 8018514:	60a5      	str	r5, [r4, #8]
 8018516:	463e      	mov	r6, r7
 8018518:	42be      	cmp	r6, r7
 801851a:	d900      	bls.n	801851e <__ssputs_r+0x72>
 801851c:	463e      	mov	r6, r7
 801851e:	6820      	ldr	r0, [r4, #0]
 8018520:	4632      	mov	r2, r6
 8018522:	4641      	mov	r1, r8
 8018524:	f000 fa28 	bl	8018978 <memmove>
 8018528:	68a3      	ldr	r3, [r4, #8]
 801852a:	1b9b      	subs	r3, r3, r6
 801852c:	60a3      	str	r3, [r4, #8]
 801852e:	6823      	ldr	r3, [r4, #0]
 8018530:	4433      	add	r3, r6
 8018532:	6023      	str	r3, [r4, #0]
 8018534:	2000      	movs	r0, #0
 8018536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801853a:	462a      	mov	r2, r5
 801853c:	f000 fe01 	bl	8019142 <_realloc_r>
 8018540:	4606      	mov	r6, r0
 8018542:	2800      	cmp	r0, #0
 8018544:	d1e0      	bne.n	8018508 <__ssputs_r+0x5c>
 8018546:	6921      	ldr	r1, [r4, #16]
 8018548:	4650      	mov	r0, sl
 801854a:	f7fe fb79 	bl	8016c40 <_free_r>
 801854e:	230c      	movs	r3, #12
 8018550:	f8ca 3000 	str.w	r3, [sl]
 8018554:	89a3      	ldrh	r3, [r4, #12]
 8018556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801855a:	81a3      	strh	r3, [r4, #12]
 801855c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018560:	e7e9      	b.n	8018536 <__ssputs_r+0x8a>
	...

08018564 <_svfiprintf_r>:
 8018564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018568:	4698      	mov	r8, r3
 801856a:	898b      	ldrh	r3, [r1, #12]
 801856c:	061b      	lsls	r3, r3, #24
 801856e:	b09d      	sub	sp, #116	@ 0x74
 8018570:	4607      	mov	r7, r0
 8018572:	460d      	mov	r5, r1
 8018574:	4614      	mov	r4, r2
 8018576:	d510      	bpl.n	801859a <_svfiprintf_r+0x36>
 8018578:	690b      	ldr	r3, [r1, #16]
 801857a:	b973      	cbnz	r3, 801859a <_svfiprintf_r+0x36>
 801857c:	2140      	movs	r1, #64	@ 0x40
 801857e:	f7fe fbd3 	bl	8016d28 <_malloc_r>
 8018582:	6028      	str	r0, [r5, #0]
 8018584:	6128      	str	r0, [r5, #16]
 8018586:	b930      	cbnz	r0, 8018596 <_svfiprintf_r+0x32>
 8018588:	230c      	movs	r3, #12
 801858a:	603b      	str	r3, [r7, #0]
 801858c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018590:	b01d      	add	sp, #116	@ 0x74
 8018592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018596:	2340      	movs	r3, #64	@ 0x40
 8018598:	616b      	str	r3, [r5, #20]
 801859a:	2300      	movs	r3, #0
 801859c:	9309      	str	r3, [sp, #36]	@ 0x24
 801859e:	2320      	movs	r3, #32
 80185a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80185a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80185a8:	2330      	movs	r3, #48	@ 0x30
 80185aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018748 <_svfiprintf_r+0x1e4>
 80185ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80185b2:	f04f 0901 	mov.w	r9, #1
 80185b6:	4623      	mov	r3, r4
 80185b8:	469a      	mov	sl, r3
 80185ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185be:	b10a      	cbz	r2, 80185c4 <_svfiprintf_r+0x60>
 80185c0:	2a25      	cmp	r2, #37	@ 0x25
 80185c2:	d1f9      	bne.n	80185b8 <_svfiprintf_r+0x54>
 80185c4:	ebba 0b04 	subs.w	fp, sl, r4
 80185c8:	d00b      	beq.n	80185e2 <_svfiprintf_r+0x7e>
 80185ca:	465b      	mov	r3, fp
 80185cc:	4622      	mov	r2, r4
 80185ce:	4629      	mov	r1, r5
 80185d0:	4638      	mov	r0, r7
 80185d2:	f7ff ff6b 	bl	80184ac <__ssputs_r>
 80185d6:	3001      	adds	r0, #1
 80185d8:	f000 80a7 	beq.w	801872a <_svfiprintf_r+0x1c6>
 80185dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80185de:	445a      	add	r2, fp
 80185e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80185e2:	f89a 3000 	ldrb.w	r3, [sl]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	f000 809f 	beq.w	801872a <_svfiprintf_r+0x1c6>
 80185ec:	2300      	movs	r3, #0
 80185ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80185f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80185f6:	f10a 0a01 	add.w	sl, sl, #1
 80185fa:	9304      	str	r3, [sp, #16]
 80185fc:	9307      	str	r3, [sp, #28]
 80185fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018602:	931a      	str	r3, [sp, #104]	@ 0x68
 8018604:	4654      	mov	r4, sl
 8018606:	2205      	movs	r2, #5
 8018608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801860c:	484e      	ldr	r0, [pc, #312]	@ (8018748 <_svfiprintf_r+0x1e4>)
 801860e:	f7e7 fde7 	bl	80001e0 <memchr>
 8018612:	9a04      	ldr	r2, [sp, #16]
 8018614:	b9d8      	cbnz	r0, 801864e <_svfiprintf_r+0xea>
 8018616:	06d0      	lsls	r0, r2, #27
 8018618:	bf44      	itt	mi
 801861a:	2320      	movmi	r3, #32
 801861c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018620:	0711      	lsls	r1, r2, #28
 8018622:	bf44      	itt	mi
 8018624:	232b      	movmi	r3, #43	@ 0x2b
 8018626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801862a:	f89a 3000 	ldrb.w	r3, [sl]
 801862e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018630:	d015      	beq.n	801865e <_svfiprintf_r+0xfa>
 8018632:	9a07      	ldr	r2, [sp, #28]
 8018634:	4654      	mov	r4, sl
 8018636:	2000      	movs	r0, #0
 8018638:	f04f 0c0a 	mov.w	ip, #10
 801863c:	4621      	mov	r1, r4
 801863e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018642:	3b30      	subs	r3, #48	@ 0x30
 8018644:	2b09      	cmp	r3, #9
 8018646:	d94b      	bls.n	80186e0 <_svfiprintf_r+0x17c>
 8018648:	b1b0      	cbz	r0, 8018678 <_svfiprintf_r+0x114>
 801864a:	9207      	str	r2, [sp, #28]
 801864c:	e014      	b.n	8018678 <_svfiprintf_r+0x114>
 801864e:	eba0 0308 	sub.w	r3, r0, r8
 8018652:	fa09 f303 	lsl.w	r3, r9, r3
 8018656:	4313      	orrs	r3, r2
 8018658:	9304      	str	r3, [sp, #16]
 801865a:	46a2      	mov	sl, r4
 801865c:	e7d2      	b.n	8018604 <_svfiprintf_r+0xa0>
 801865e:	9b03      	ldr	r3, [sp, #12]
 8018660:	1d19      	adds	r1, r3, #4
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	9103      	str	r1, [sp, #12]
 8018666:	2b00      	cmp	r3, #0
 8018668:	bfbb      	ittet	lt
 801866a:	425b      	neglt	r3, r3
 801866c:	f042 0202 	orrlt.w	r2, r2, #2
 8018670:	9307      	strge	r3, [sp, #28]
 8018672:	9307      	strlt	r3, [sp, #28]
 8018674:	bfb8      	it	lt
 8018676:	9204      	strlt	r2, [sp, #16]
 8018678:	7823      	ldrb	r3, [r4, #0]
 801867a:	2b2e      	cmp	r3, #46	@ 0x2e
 801867c:	d10a      	bne.n	8018694 <_svfiprintf_r+0x130>
 801867e:	7863      	ldrb	r3, [r4, #1]
 8018680:	2b2a      	cmp	r3, #42	@ 0x2a
 8018682:	d132      	bne.n	80186ea <_svfiprintf_r+0x186>
 8018684:	9b03      	ldr	r3, [sp, #12]
 8018686:	1d1a      	adds	r2, r3, #4
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	9203      	str	r2, [sp, #12]
 801868c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018690:	3402      	adds	r4, #2
 8018692:	9305      	str	r3, [sp, #20]
 8018694:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018758 <_svfiprintf_r+0x1f4>
 8018698:	7821      	ldrb	r1, [r4, #0]
 801869a:	2203      	movs	r2, #3
 801869c:	4650      	mov	r0, sl
 801869e:	f7e7 fd9f 	bl	80001e0 <memchr>
 80186a2:	b138      	cbz	r0, 80186b4 <_svfiprintf_r+0x150>
 80186a4:	9b04      	ldr	r3, [sp, #16]
 80186a6:	eba0 000a 	sub.w	r0, r0, sl
 80186aa:	2240      	movs	r2, #64	@ 0x40
 80186ac:	4082      	lsls	r2, r0
 80186ae:	4313      	orrs	r3, r2
 80186b0:	3401      	adds	r4, #1
 80186b2:	9304      	str	r3, [sp, #16]
 80186b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186b8:	4824      	ldr	r0, [pc, #144]	@ (801874c <_svfiprintf_r+0x1e8>)
 80186ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80186be:	2206      	movs	r2, #6
 80186c0:	f7e7 fd8e 	bl	80001e0 <memchr>
 80186c4:	2800      	cmp	r0, #0
 80186c6:	d036      	beq.n	8018736 <_svfiprintf_r+0x1d2>
 80186c8:	4b21      	ldr	r3, [pc, #132]	@ (8018750 <_svfiprintf_r+0x1ec>)
 80186ca:	bb1b      	cbnz	r3, 8018714 <_svfiprintf_r+0x1b0>
 80186cc:	9b03      	ldr	r3, [sp, #12]
 80186ce:	3307      	adds	r3, #7
 80186d0:	f023 0307 	bic.w	r3, r3, #7
 80186d4:	3308      	adds	r3, #8
 80186d6:	9303      	str	r3, [sp, #12]
 80186d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186da:	4433      	add	r3, r6
 80186dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80186de:	e76a      	b.n	80185b6 <_svfiprintf_r+0x52>
 80186e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80186e4:	460c      	mov	r4, r1
 80186e6:	2001      	movs	r0, #1
 80186e8:	e7a8      	b.n	801863c <_svfiprintf_r+0xd8>
 80186ea:	2300      	movs	r3, #0
 80186ec:	3401      	adds	r4, #1
 80186ee:	9305      	str	r3, [sp, #20]
 80186f0:	4619      	mov	r1, r3
 80186f2:	f04f 0c0a 	mov.w	ip, #10
 80186f6:	4620      	mov	r0, r4
 80186f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186fc:	3a30      	subs	r2, #48	@ 0x30
 80186fe:	2a09      	cmp	r2, #9
 8018700:	d903      	bls.n	801870a <_svfiprintf_r+0x1a6>
 8018702:	2b00      	cmp	r3, #0
 8018704:	d0c6      	beq.n	8018694 <_svfiprintf_r+0x130>
 8018706:	9105      	str	r1, [sp, #20]
 8018708:	e7c4      	b.n	8018694 <_svfiprintf_r+0x130>
 801870a:	fb0c 2101 	mla	r1, ip, r1, r2
 801870e:	4604      	mov	r4, r0
 8018710:	2301      	movs	r3, #1
 8018712:	e7f0      	b.n	80186f6 <_svfiprintf_r+0x192>
 8018714:	ab03      	add	r3, sp, #12
 8018716:	9300      	str	r3, [sp, #0]
 8018718:	462a      	mov	r2, r5
 801871a:	4b0e      	ldr	r3, [pc, #56]	@ (8018754 <_svfiprintf_r+0x1f0>)
 801871c:	a904      	add	r1, sp, #16
 801871e:	4638      	mov	r0, r7
 8018720:	f7fc fb3a 	bl	8014d98 <_printf_float>
 8018724:	1c42      	adds	r2, r0, #1
 8018726:	4606      	mov	r6, r0
 8018728:	d1d6      	bne.n	80186d8 <_svfiprintf_r+0x174>
 801872a:	89ab      	ldrh	r3, [r5, #12]
 801872c:	065b      	lsls	r3, r3, #25
 801872e:	f53f af2d 	bmi.w	801858c <_svfiprintf_r+0x28>
 8018732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018734:	e72c      	b.n	8018590 <_svfiprintf_r+0x2c>
 8018736:	ab03      	add	r3, sp, #12
 8018738:	9300      	str	r3, [sp, #0]
 801873a:	462a      	mov	r2, r5
 801873c:	4b05      	ldr	r3, [pc, #20]	@ (8018754 <_svfiprintf_r+0x1f0>)
 801873e:	a904      	add	r1, sp, #16
 8018740:	4638      	mov	r0, r7
 8018742:	f7fc fdc1 	bl	80152c8 <_printf_i>
 8018746:	e7ed      	b.n	8018724 <_svfiprintf_r+0x1c0>
 8018748:	0802f3d1 	.word	0x0802f3d1
 801874c:	0802f3db 	.word	0x0802f3db
 8018750:	08014d99 	.word	0x08014d99
 8018754:	080184ad 	.word	0x080184ad
 8018758:	0802f3d7 	.word	0x0802f3d7

0801875c <__sflush_r>:
 801875c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018764:	0716      	lsls	r6, r2, #28
 8018766:	4605      	mov	r5, r0
 8018768:	460c      	mov	r4, r1
 801876a:	d454      	bmi.n	8018816 <__sflush_r+0xba>
 801876c:	684b      	ldr	r3, [r1, #4]
 801876e:	2b00      	cmp	r3, #0
 8018770:	dc02      	bgt.n	8018778 <__sflush_r+0x1c>
 8018772:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018774:	2b00      	cmp	r3, #0
 8018776:	dd48      	ble.n	801880a <__sflush_r+0xae>
 8018778:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801877a:	2e00      	cmp	r6, #0
 801877c:	d045      	beq.n	801880a <__sflush_r+0xae>
 801877e:	2300      	movs	r3, #0
 8018780:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018784:	682f      	ldr	r7, [r5, #0]
 8018786:	6a21      	ldr	r1, [r4, #32]
 8018788:	602b      	str	r3, [r5, #0]
 801878a:	d030      	beq.n	80187ee <__sflush_r+0x92>
 801878c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801878e:	89a3      	ldrh	r3, [r4, #12]
 8018790:	0759      	lsls	r1, r3, #29
 8018792:	d505      	bpl.n	80187a0 <__sflush_r+0x44>
 8018794:	6863      	ldr	r3, [r4, #4]
 8018796:	1ad2      	subs	r2, r2, r3
 8018798:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801879a:	b10b      	cbz	r3, 80187a0 <__sflush_r+0x44>
 801879c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801879e:	1ad2      	subs	r2, r2, r3
 80187a0:	2300      	movs	r3, #0
 80187a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80187a4:	6a21      	ldr	r1, [r4, #32]
 80187a6:	4628      	mov	r0, r5
 80187a8:	47b0      	blx	r6
 80187aa:	1c43      	adds	r3, r0, #1
 80187ac:	89a3      	ldrh	r3, [r4, #12]
 80187ae:	d106      	bne.n	80187be <__sflush_r+0x62>
 80187b0:	6829      	ldr	r1, [r5, #0]
 80187b2:	291d      	cmp	r1, #29
 80187b4:	d82b      	bhi.n	801880e <__sflush_r+0xb2>
 80187b6:	4a2a      	ldr	r2, [pc, #168]	@ (8018860 <__sflush_r+0x104>)
 80187b8:	410a      	asrs	r2, r1
 80187ba:	07d6      	lsls	r6, r2, #31
 80187bc:	d427      	bmi.n	801880e <__sflush_r+0xb2>
 80187be:	2200      	movs	r2, #0
 80187c0:	6062      	str	r2, [r4, #4]
 80187c2:	04d9      	lsls	r1, r3, #19
 80187c4:	6922      	ldr	r2, [r4, #16]
 80187c6:	6022      	str	r2, [r4, #0]
 80187c8:	d504      	bpl.n	80187d4 <__sflush_r+0x78>
 80187ca:	1c42      	adds	r2, r0, #1
 80187cc:	d101      	bne.n	80187d2 <__sflush_r+0x76>
 80187ce:	682b      	ldr	r3, [r5, #0]
 80187d0:	b903      	cbnz	r3, 80187d4 <__sflush_r+0x78>
 80187d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80187d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80187d6:	602f      	str	r7, [r5, #0]
 80187d8:	b1b9      	cbz	r1, 801880a <__sflush_r+0xae>
 80187da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80187de:	4299      	cmp	r1, r3
 80187e0:	d002      	beq.n	80187e8 <__sflush_r+0x8c>
 80187e2:	4628      	mov	r0, r5
 80187e4:	f7fe fa2c 	bl	8016c40 <_free_r>
 80187e8:	2300      	movs	r3, #0
 80187ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80187ec:	e00d      	b.n	801880a <__sflush_r+0xae>
 80187ee:	2301      	movs	r3, #1
 80187f0:	4628      	mov	r0, r5
 80187f2:	47b0      	blx	r6
 80187f4:	4602      	mov	r2, r0
 80187f6:	1c50      	adds	r0, r2, #1
 80187f8:	d1c9      	bne.n	801878e <__sflush_r+0x32>
 80187fa:	682b      	ldr	r3, [r5, #0]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d0c6      	beq.n	801878e <__sflush_r+0x32>
 8018800:	2b1d      	cmp	r3, #29
 8018802:	d001      	beq.n	8018808 <__sflush_r+0xac>
 8018804:	2b16      	cmp	r3, #22
 8018806:	d11e      	bne.n	8018846 <__sflush_r+0xea>
 8018808:	602f      	str	r7, [r5, #0]
 801880a:	2000      	movs	r0, #0
 801880c:	e022      	b.n	8018854 <__sflush_r+0xf8>
 801880e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018812:	b21b      	sxth	r3, r3
 8018814:	e01b      	b.n	801884e <__sflush_r+0xf2>
 8018816:	690f      	ldr	r7, [r1, #16]
 8018818:	2f00      	cmp	r7, #0
 801881a:	d0f6      	beq.n	801880a <__sflush_r+0xae>
 801881c:	0793      	lsls	r3, r2, #30
 801881e:	680e      	ldr	r6, [r1, #0]
 8018820:	bf08      	it	eq
 8018822:	694b      	ldreq	r3, [r1, #20]
 8018824:	600f      	str	r7, [r1, #0]
 8018826:	bf18      	it	ne
 8018828:	2300      	movne	r3, #0
 801882a:	eba6 0807 	sub.w	r8, r6, r7
 801882e:	608b      	str	r3, [r1, #8]
 8018830:	f1b8 0f00 	cmp.w	r8, #0
 8018834:	dde9      	ble.n	801880a <__sflush_r+0xae>
 8018836:	6a21      	ldr	r1, [r4, #32]
 8018838:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801883a:	4643      	mov	r3, r8
 801883c:	463a      	mov	r2, r7
 801883e:	4628      	mov	r0, r5
 8018840:	47b0      	blx	r6
 8018842:	2800      	cmp	r0, #0
 8018844:	dc08      	bgt.n	8018858 <__sflush_r+0xfc>
 8018846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801884a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801884e:	81a3      	strh	r3, [r4, #12]
 8018850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018858:	4407      	add	r7, r0
 801885a:	eba8 0800 	sub.w	r8, r8, r0
 801885e:	e7e7      	b.n	8018830 <__sflush_r+0xd4>
 8018860:	dfbffffe 	.word	0xdfbffffe

08018864 <_fflush_r>:
 8018864:	b538      	push	{r3, r4, r5, lr}
 8018866:	690b      	ldr	r3, [r1, #16]
 8018868:	4605      	mov	r5, r0
 801886a:	460c      	mov	r4, r1
 801886c:	b913      	cbnz	r3, 8018874 <_fflush_r+0x10>
 801886e:	2500      	movs	r5, #0
 8018870:	4628      	mov	r0, r5
 8018872:	bd38      	pop	{r3, r4, r5, pc}
 8018874:	b118      	cbz	r0, 801887e <_fflush_r+0x1a>
 8018876:	6a03      	ldr	r3, [r0, #32]
 8018878:	b90b      	cbnz	r3, 801887e <_fflush_r+0x1a>
 801887a:	f7fd f8e5 	bl	8015a48 <__sinit>
 801887e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d0f3      	beq.n	801886e <_fflush_r+0xa>
 8018886:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018888:	07d0      	lsls	r0, r2, #31
 801888a:	d404      	bmi.n	8018896 <_fflush_r+0x32>
 801888c:	0599      	lsls	r1, r3, #22
 801888e:	d402      	bmi.n	8018896 <_fflush_r+0x32>
 8018890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018892:	f7fd fb70 	bl	8015f76 <__retarget_lock_acquire_recursive>
 8018896:	4628      	mov	r0, r5
 8018898:	4621      	mov	r1, r4
 801889a:	f7ff ff5f 	bl	801875c <__sflush_r>
 801889e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80188a0:	07da      	lsls	r2, r3, #31
 80188a2:	4605      	mov	r5, r0
 80188a4:	d4e4      	bmi.n	8018870 <_fflush_r+0xc>
 80188a6:	89a3      	ldrh	r3, [r4, #12]
 80188a8:	059b      	lsls	r3, r3, #22
 80188aa:	d4e1      	bmi.n	8018870 <_fflush_r+0xc>
 80188ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80188ae:	f7fd fb63 	bl	8015f78 <__retarget_lock_release_recursive>
 80188b2:	e7dd      	b.n	8018870 <_fflush_r+0xc>

080188b4 <__swhatbuf_r>:
 80188b4:	b570      	push	{r4, r5, r6, lr}
 80188b6:	460c      	mov	r4, r1
 80188b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188bc:	2900      	cmp	r1, #0
 80188be:	b096      	sub	sp, #88	@ 0x58
 80188c0:	4615      	mov	r5, r2
 80188c2:	461e      	mov	r6, r3
 80188c4:	da0d      	bge.n	80188e2 <__swhatbuf_r+0x2e>
 80188c6:	89a3      	ldrh	r3, [r4, #12]
 80188c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80188cc:	f04f 0100 	mov.w	r1, #0
 80188d0:	bf14      	ite	ne
 80188d2:	2340      	movne	r3, #64	@ 0x40
 80188d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80188d8:	2000      	movs	r0, #0
 80188da:	6031      	str	r1, [r6, #0]
 80188dc:	602b      	str	r3, [r5, #0]
 80188de:	b016      	add	sp, #88	@ 0x58
 80188e0:	bd70      	pop	{r4, r5, r6, pc}
 80188e2:	466a      	mov	r2, sp
 80188e4:	f000 f874 	bl	80189d0 <_fstat_r>
 80188e8:	2800      	cmp	r0, #0
 80188ea:	dbec      	blt.n	80188c6 <__swhatbuf_r+0x12>
 80188ec:	9901      	ldr	r1, [sp, #4]
 80188ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80188f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80188f6:	4259      	negs	r1, r3
 80188f8:	4159      	adcs	r1, r3
 80188fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80188fe:	e7eb      	b.n	80188d8 <__swhatbuf_r+0x24>

08018900 <__smakebuf_r>:
 8018900:	898b      	ldrh	r3, [r1, #12]
 8018902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018904:	079d      	lsls	r5, r3, #30
 8018906:	4606      	mov	r6, r0
 8018908:	460c      	mov	r4, r1
 801890a:	d507      	bpl.n	801891c <__smakebuf_r+0x1c>
 801890c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018910:	6023      	str	r3, [r4, #0]
 8018912:	6123      	str	r3, [r4, #16]
 8018914:	2301      	movs	r3, #1
 8018916:	6163      	str	r3, [r4, #20]
 8018918:	b003      	add	sp, #12
 801891a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801891c:	ab01      	add	r3, sp, #4
 801891e:	466a      	mov	r2, sp
 8018920:	f7ff ffc8 	bl	80188b4 <__swhatbuf_r>
 8018924:	9f00      	ldr	r7, [sp, #0]
 8018926:	4605      	mov	r5, r0
 8018928:	4639      	mov	r1, r7
 801892a:	4630      	mov	r0, r6
 801892c:	f7fe f9fc 	bl	8016d28 <_malloc_r>
 8018930:	b948      	cbnz	r0, 8018946 <__smakebuf_r+0x46>
 8018932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018936:	059a      	lsls	r2, r3, #22
 8018938:	d4ee      	bmi.n	8018918 <__smakebuf_r+0x18>
 801893a:	f023 0303 	bic.w	r3, r3, #3
 801893e:	f043 0302 	orr.w	r3, r3, #2
 8018942:	81a3      	strh	r3, [r4, #12]
 8018944:	e7e2      	b.n	801890c <__smakebuf_r+0xc>
 8018946:	89a3      	ldrh	r3, [r4, #12]
 8018948:	6020      	str	r0, [r4, #0]
 801894a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801894e:	81a3      	strh	r3, [r4, #12]
 8018950:	9b01      	ldr	r3, [sp, #4]
 8018952:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018956:	b15b      	cbz	r3, 8018970 <__smakebuf_r+0x70>
 8018958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801895c:	4630      	mov	r0, r6
 801895e:	f000 f849 	bl	80189f4 <_isatty_r>
 8018962:	b128      	cbz	r0, 8018970 <__smakebuf_r+0x70>
 8018964:	89a3      	ldrh	r3, [r4, #12]
 8018966:	f023 0303 	bic.w	r3, r3, #3
 801896a:	f043 0301 	orr.w	r3, r3, #1
 801896e:	81a3      	strh	r3, [r4, #12]
 8018970:	89a3      	ldrh	r3, [r4, #12]
 8018972:	431d      	orrs	r5, r3
 8018974:	81a5      	strh	r5, [r4, #12]
 8018976:	e7cf      	b.n	8018918 <__smakebuf_r+0x18>

08018978 <memmove>:
 8018978:	4288      	cmp	r0, r1
 801897a:	b510      	push	{r4, lr}
 801897c:	eb01 0402 	add.w	r4, r1, r2
 8018980:	d902      	bls.n	8018988 <memmove+0x10>
 8018982:	4284      	cmp	r4, r0
 8018984:	4623      	mov	r3, r4
 8018986:	d807      	bhi.n	8018998 <memmove+0x20>
 8018988:	1e43      	subs	r3, r0, #1
 801898a:	42a1      	cmp	r1, r4
 801898c:	d008      	beq.n	80189a0 <memmove+0x28>
 801898e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018996:	e7f8      	b.n	801898a <memmove+0x12>
 8018998:	4402      	add	r2, r0
 801899a:	4601      	mov	r1, r0
 801899c:	428a      	cmp	r2, r1
 801899e:	d100      	bne.n	80189a2 <memmove+0x2a>
 80189a0:	bd10      	pop	{r4, pc}
 80189a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80189a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80189aa:	e7f7      	b.n	801899c <memmove+0x24>

080189ac <strncmp>:
 80189ac:	b510      	push	{r4, lr}
 80189ae:	b16a      	cbz	r2, 80189cc <strncmp+0x20>
 80189b0:	3901      	subs	r1, #1
 80189b2:	1884      	adds	r4, r0, r2
 80189b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80189b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80189bc:	429a      	cmp	r2, r3
 80189be:	d103      	bne.n	80189c8 <strncmp+0x1c>
 80189c0:	42a0      	cmp	r0, r4
 80189c2:	d001      	beq.n	80189c8 <strncmp+0x1c>
 80189c4:	2a00      	cmp	r2, #0
 80189c6:	d1f5      	bne.n	80189b4 <strncmp+0x8>
 80189c8:	1ad0      	subs	r0, r2, r3
 80189ca:	bd10      	pop	{r4, pc}
 80189cc:	4610      	mov	r0, r2
 80189ce:	e7fc      	b.n	80189ca <strncmp+0x1e>

080189d0 <_fstat_r>:
 80189d0:	b538      	push	{r3, r4, r5, lr}
 80189d2:	4d07      	ldr	r5, [pc, #28]	@ (80189f0 <_fstat_r+0x20>)
 80189d4:	2300      	movs	r3, #0
 80189d6:	4604      	mov	r4, r0
 80189d8:	4608      	mov	r0, r1
 80189da:	4611      	mov	r1, r2
 80189dc:	602b      	str	r3, [r5, #0]
 80189de:	f7ea ff95 	bl	800390c <_fstat>
 80189e2:	1c43      	adds	r3, r0, #1
 80189e4:	d102      	bne.n	80189ec <_fstat_r+0x1c>
 80189e6:	682b      	ldr	r3, [r5, #0]
 80189e8:	b103      	cbz	r3, 80189ec <_fstat_r+0x1c>
 80189ea:	6023      	str	r3, [r4, #0]
 80189ec:	bd38      	pop	{r3, r4, r5, pc}
 80189ee:	bf00      	nop
 80189f0:	20024bbc 	.word	0x20024bbc

080189f4 <_isatty_r>:
 80189f4:	b538      	push	{r3, r4, r5, lr}
 80189f6:	4d06      	ldr	r5, [pc, #24]	@ (8018a10 <_isatty_r+0x1c>)
 80189f8:	2300      	movs	r3, #0
 80189fa:	4604      	mov	r4, r0
 80189fc:	4608      	mov	r0, r1
 80189fe:	602b      	str	r3, [r5, #0]
 8018a00:	f7ea ff94 	bl	800392c <_isatty>
 8018a04:	1c43      	adds	r3, r0, #1
 8018a06:	d102      	bne.n	8018a0e <_isatty_r+0x1a>
 8018a08:	682b      	ldr	r3, [r5, #0]
 8018a0a:	b103      	cbz	r3, 8018a0e <_isatty_r+0x1a>
 8018a0c:	6023      	str	r3, [r4, #0]
 8018a0e:	bd38      	pop	{r3, r4, r5, pc}
 8018a10:	20024bbc 	.word	0x20024bbc

08018a14 <_sbrk_r>:
 8018a14:	b538      	push	{r3, r4, r5, lr}
 8018a16:	4d06      	ldr	r5, [pc, #24]	@ (8018a30 <_sbrk_r+0x1c>)
 8018a18:	2300      	movs	r3, #0
 8018a1a:	4604      	mov	r4, r0
 8018a1c:	4608      	mov	r0, r1
 8018a1e:	602b      	str	r3, [r5, #0]
 8018a20:	f7ea ff9c 	bl	800395c <_sbrk>
 8018a24:	1c43      	adds	r3, r0, #1
 8018a26:	d102      	bne.n	8018a2e <_sbrk_r+0x1a>
 8018a28:	682b      	ldr	r3, [r5, #0]
 8018a2a:	b103      	cbz	r3, 8018a2e <_sbrk_r+0x1a>
 8018a2c:	6023      	str	r3, [r4, #0]
 8018a2e:	bd38      	pop	{r3, r4, r5, pc}
 8018a30:	20024bbc 	.word	0x20024bbc
 8018a34:	00000000 	.word	0x00000000

08018a38 <nan>:
 8018a38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018a40 <nan+0x8>
 8018a3c:	4770      	bx	lr
 8018a3e:	bf00      	nop
 8018a40:	00000000 	.word	0x00000000
 8018a44:	7ff80000 	.word	0x7ff80000

08018a48 <__assert_func>:
 8018a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018a4a:	4614      	mov	r4, r2
 8018a4c:	461a      	mov	r2, r3
 8018a4e:	4b09      	ldr	r3, [pc, #36]	@ (8018a74 <__assert_func+0x2c>)
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	4605      	mov	r5, r0
 8018a54:	68d8      	ldr	r0, [r3, #12]
 8018a56:	b954      	cbnz	r4, 8018a6e <__assert_func+0x26>
 8018a58:	4b07      	ldr	r3, [pc, #28]	@ (8018a78 <__assert_func+0x30>)
 8018a5a:	461c      	mov	r4, r3
 8018a5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018a60:	9100      	str	r1, [sp, #0]
 8018a62:	462b      	mov	r3, r5
 8018a64:	4905      	ldr	r1, [pc, #20]	@ (8018a7c <__assert_func+0x34>)
 8018a66:	f000 fba7 	bl	80191b8 <fiprintf>
 8018a6a:	f000 fbb7 	bl	80191dc <abort>
 8018a6e:	4b04      	ldr	r3, [pc, #16]	@ (8018a80 <__assert_func+0x38>)
 8018a70:	e7f4      	b.n	8018a5c <__assert_func+0x14>
 8018a72:	bf00      	nop
 8018a74:	20000140 	.word	0x20000140
 8018a78:	0802f425 	.word	0x0802f425
 8018a7c:	0802f3f7 	.word	0x0802f3f7
 8018a80:	0802f3ea 	.word	0x0802f3ea

08018a84 <_calloc_r>:
 8018a84:	b570      	push	{r4, r5, r6, lr}
 8018a86:	fba1 5402 	umull	r5, r4, r1, r2
 8018a8a:	b93c      	cbnz	r4, 8018a9c <_calloc_r+0x18>
 8018a8c:	4629      	mov	r1, r5
 8018a8e:	f7fe f94b 	bl	8016d28 <_malloc_r>
 8018a92:	4606      	mov	r6, r0
 8018a94:	b928      	cbnz	r0, 8018aa2 <_calloc_r+0x1e>
 8018a96:	2600      	movs	r6, #0
 8018a98:	4630      	mov	r0, r6
 8018a9a:	bd70      	pop	{r4, r5, r6, pc}
 8018a9c:	220c      	movs	r2, #12
 8018a9e:	6002      	str	r2, [r0, #0]
 8018aa0:	e7f9      	b.n	8018a96 <_calloc_r+0x12>
 8018aa2:	462a      	mov	r2, r5
 8018aa4:	4621      	mov	r1, r4
 8018aa6:	f7fd f993 	bl	8015dd0 <memset>
 8018aaa:	e7f5      	b.n	8018a98 <_calloc_r+0x14>

08018aac <rshift>:
 8018aac:	6903      	ldr	r3, [r0, #16]
 8018aae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018ab2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ab6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018aba:	f100 0414 	add.w	r4, r0, #20
 8018abe:	dd45      	ble.n	8018b4c <rshift+0xa0>
 8018ac0:	f011 011f 	ands.w	r1, r1, #31
 8018ac4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018ac8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018acc:	d10c      	bne.n	8018ae8 <rshift+0x3c>
 8018ace:	f100 0710 	add.w	r7, r0, #16
 8018ad2:	4629      	mov	r1, r5
 8018ad4:	42b1      	cmp	r1, r6
 8018ad6:	d334      	bcc.n	8018b42 <rshift+0x96>
 8018ad8:	1a9b      	subs	r3, r3, r2
 8018ada:	009b      	lsls	r3, r3, #2
 8018adc:	1eea      	subs	r2, r5, #3
 8018ade:	4296      	cmp	r6, r2
 8018ae0:	bf38      	it	cc
 8018ae2:	2300      	movcc	r3, #0
 8018ae4:	4423      	add	r3, r4
 8018ae6:	e015      	b.n	8018b14 <rshift+0x68>
 8018ae8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018aec:	f1c1 0820 	rsb	r8, r1, #32
 8018af0:	40cf      	lsrs	r7, r1
 8018af2:	f105 0e04 	add.w	lr, r5, #4
 8018af6:	46a1      	mov	r9, r4
 8018af8:	4576      	cmp	r6, lr
 8018afa:	46f4      	mov	ip, lr
 8018afc:	d815      	bhi.n	8018b2a <rshift+0x7e>
 8018afe:	1a9a      	subs	r2, r3, r2
 8018b00:	0092      	lsls	r2, r2, #2
 8018b02:	3a04      	subs	r2, #4
 8018b04:	3501      	adds	r5, #1
 8018b06:	42ae      	cmp	r6, r5
 8018b08:	bf38      	it	cc
 8018b0a:	2200      	movcc	r2, #0
 8018b0c:	18a3      	adds	r3, r4, r2
 8018b0e:	50a7      	str	r7, [r4, r2]
 8018b10:	b107      	cbz	r7, 8018b14 <rshift+0x68>
 8018b12:	3304      	adds	r3, #4
 8018b14:	1b1a      	subs	r2, r3, r4
 8018b16:	42a3      	cmp	r3, r4
 8018b18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018b1c:	bf08      	it	eq
 8018b1e:	2300      	moveq	r3, #0
 8018b20:	6102      	str	r2, [r0, #16]
 8018b22:	bf08      	it	eq
 8018b24:	6143      	streq	r3, [r0, #20]
 8018b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b2a:	f8dc c000 	ldr.w	ip, [ip]
 8018b2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8018b32:	ea4c 0707 	orr.w	r7, ip, r7
 8018b36:	f849 7b04 	str.w	r7, [r9], #4
 8018b3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018b3e:	40cf      	lsrs	r7, r1
 8018b40:	e7da      	b.n	8018af8 <rshift+0x4c>
 8018b42:	f851 cb04 	ldr.w	ip, [r1], #4
 8018b46:	f847 cf04 	str.w	ip, [r7, #4]!
 8018b4a:	e7c3      	b.n	8018ad4 <rshift+0x28>
 8018b4c:	4623      	mov	r3, r4
 8018b4e:	e7e1      	b.n	8018b14 <rshift+0x68>

08018b50 <__hexdig_fun>:
 8018b50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8018b54:	2b09      	cmp	r3, #9
 8018b56:	d802      	bhi.n	8018b5e <__hexdig_fun+0xe>
 8018b58:	3820      	subs	r0, #32
 8018b5a:	b2c0      	uxtb	r0, r0
 8018b5c:	4770      	bx	lr
 8018b5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8018b62:	2b05      	cmp	r3, #5
 8018b64:	d801      	bhi.n	8018b6a <__hexdig_fun+0x1a>
 8018b66:	3847      	subs	r0, #71	@ 0x47
 8018b68:	e7f7      	b.n	8018b5a <__hexdig_fun+0xa>
 8018b6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8018b6e:	2b05      	cmp	r3, #5
 8018b70:	d801      	bhi.n	8018b76 <__hexdig_fun+0x26>
 8018b72:	3827      	subs	r0, #39	@ 0x27
 8018b74:	e7f1      	b.n	8018b5a <__hexdig_fun+0xa>
 8018b76:	2000      	movs	r0, #0
 8018b78:	4770      	bx	lr
	...

08018b7c <__gethex>:
 8018b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b80:	b085      	sub	sp, #20
 8018b82:	468a      	mov	sl, r1
 8018b84:	9302      	str	r3, [sp, #8]
 8018b86:	680b      	ldr	r3, [r1, #0]
 8018b88:	9001      	str	r0, [sp, #4]
 8018b8a:	4690      	mov	r8, r2
 8018b8c:	1c9c      	adds	r4, r3, #2
 8018b8e:	46a1      	mov	r9, r4
 8018b90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8018b94:	2830      	cmp	r0, #48	@ 0x30
 8018b96:	d0fa      	beq.n	8018b8e <__gethex+0x12>
 8018b98:	eba9 0303 	sub.w	r3, r9, r3
 8018b9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8018ba0:	f7ff ffd6 	bl	8018b50 <__hexdig_fun>
 8018ba4:	4605      	mov	r5, r0
 8018ba6:	2800      	cmp	r0, #0
 8018ba8:	d168      	bne.n	8018c7c <__gethex+0x100>
 8018baa:	49a0      	ldr	r1, [pc, #640]	@ (8018e2c <__gethex+0x2b0>)
 8018bac:	2201      	movs	r2, #1
 8018bae:	4648      	mov	r0, r9
 8018bb0:	f7ff fefc 	bl	80189ac <strncmp>
 8018bb4:	4607      	mov	r7, r0
 8018bb6:	2800      	cmp	r0, #0
 8018bb8:	d167      	bne.n	8018c8a <__gethex+0x10e>
 8018bba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8018bbe:	4626      	mov	r6, r4
 8018bc0:	f7ff ffc6 	bl	8018b50 <__hexdig_fun>
 8018bc4:	2800      	cmp	r0, #0
 8018bc6:	d062      	beq.n	8018c8e <__gethex+0x112>
 8018bc8:	4623      	mov	r3, r4
 8018bca:	7818      	ldrb	r0, [r3, #0]
 8018bcc:	2830      	cmp	r0, #48	@ 0x30
 8018bce:	4699      	mov	r9, r3
 8018bd0:	f103 0301 	add.w	r3, r3, #1
 8018bd4:	d0f9      	beq.n	8018bca <__gethex+0x4e>
 8018bd6:	f7ff ffbb 	bl	8018b50 <__hexdig_fun>
 8018bda:	fab0 f580 	clz	r5, r0
 8018bde:	096d      	lsrs	r5, r5, #5
 8018be0:	f04f 0b01 	mov.w	fp, #1
 8018be4:	464a      	mov	r2, r9
 8018be6:	4616      	mov	r6, r2
 8018be8:	3201      	adds	r2, #1
 8018bea:	7830      	ldrb	r0, [r6, #0]
 8018bec:	f7ff ffb0 	bl	8018b50 <__hexdig_fun>
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	d1f8      	bne.n	8018be6 <__gethex+0x6a>
 8018bf4:	498d      	ldr	r1, [pc, #564]	@ (8018e2c <__gethex+0x2b0>)
 8018bf6:	2201      	movs	r2, #1
 8018bf8:	4630      	mov	r0, r6
 8018bfa:	f7ff fed7 	bl	80189ac <strncmp>
 8018bfe:	2800      	cmp	r0, #0
 8018c00:	d13f      	bne.n	8018c82 <__gethex+0x106>
 8018c02:	b944      	cbnz	r4, 8018c16 <__gethex+0x9a>
 8018c04:	1c74      	adds	r4, r6, #1
 8018c06:	4622      	mov	r2, r4
 8018c08:	4616      	mov	r6, r2
 8018c0a:	3201      	adds	r2, #1
 8018c0c:	7830      	ldrb	r0, [r6, #0]
 8018c0e:	f7ff ff9f 	bl	8018b50 <__hexdig_fun>
 8018c12:	2800      	cmp	r0, #0
 8018c14:	d1f8      	bne.n	8018c08 <__gethex+0x8c>
 8018c16:	1ba4      	subs	r4, r4, r6
 8018c18:	00a7      	lsls	r7, r4, #2
 8018c1a:	7833      	ldrb	r3, [r6, #0]
 8018c1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8018c20:	2b50      	cmp	r3, #80	@ 0x50
 8018c22:	d13e      	bne.n	8018ca2 <__gethex+0x126>
 8018c24:	7873      	ldrb	r3, [r6, #1]
 8018c26:	2b2b      	cmp	r3, #43	@ 0x2b
 8018c28:	d033      	beq.n	8018c92 <__gethex+0x116>
 8018c2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8018c2c:	d034      	beq.n	8018c98 <__gethex+0x11c>
 8018c2e:	1c71      	adds	r1, r6, #1
 8018c30:	2400      	movs	r4, #0
 8018c32:	7808      	ldrb	r0, [r1, #0]
 8018c34:	f7ff ff8c 	bl	8018b50 <__hexdig_fun>
 8018c38:	1e43      	subs	r3, r0, #1
 8018c3a:	b2db      	uxtb	r3, r3
 8018c3c:	2b18      	cmp	r3, #24
 8018c3e:	d830      	bhi.n	8018ca2 <__gethex+0x126>
 8018c40:	f1a0 0210 	sub.w	r2, r0, #16
 8018c44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018c48:	f7ff ff82 	bl	8018b50 <__hexdig_fun>
 8018c4c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8018c50:	fa5f fc8c 	uxtb.w	ip, ip
 8018c54:	f1bc 0f18 	cmp.w	ip, #24
 8018c58:	f04f 030a 	mov.w	r3, #10
 8018c5c:	d91e      	bls.n	8018c9c <__gethex+0x120>
 8018c5e:	b104      	cbz	r4, 8018c62 <__gethex+0xe6>
 8018c60:	4252      	negs	r2, r2
 8018c62:	4417      	add	r7, r2
 8018c64:	f8ca 1000 	str.w	r1, [sl]
 8018c68:	b1ed      	cbz	r5, 8018ca6 <__gethex+0x12a>
 8018c6a:	f1bb 0f00 	cmp.w	fp, #0
 8018c6e:	bf0c      	ite	eq
 8018c70:	2506      	moveq	r5, #6
 8018c72:	2500      	movne	r5, #0
 8018c74:	4628      	mov	r0, r5
 8018c76:	b005      	add	sp, #20
 8018c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c7c:	2500      	movs	r5, #0
 8018c7e:	462c      	mov	r4, r5
 8018c80:	e7b0      	b.n	8018be4 <__gethex+0x68>
 8018c82:	2c00      	cmp	r4, #0
 8018c84:	d1c7      	bne.n	8018c16 <__gethex+0x9a>
 8018c86:	4627      	mov	r7, r4
 8018c88:	e7c7      	b.n	8018c1a <__gethex+0x9e>
 8018c8a:	464e      	mov	r6, r9
 8018c8c:	462f      	mov	r7, r5
 8018c8e:	2501      	movs	r5, #1
 8018c90:	e7c3      	b.n	8018c1a <__gethex+0x9e>
 8018c92:	2400      	movs	r4, #0
 8018c94:	1cb1      	adds	r1, r6, #2
 8018c96:	e7cc      	b.n	8018c32 <__gethex+0xb6>
 8018c98:	2401      	movs	r4, #1
 8018c9a:	e7fb      	b.n	8018c94 <__gethex+0x118>
 8018c9c:	fb03 0002 	mla	r0, r3, r2, r0
 8018ca0:	e7ce      	b.n	8018c40 <__gethex+0xc4>
 8018ca2:	4631      	mov	r1, r6
 8018ca4:	e7de      	b.n	8018c64 <__gethex+0xe8>
 8018ca6:	eba6 0309 	sub.w	r3, r6, r9
 8018caa:	3b01      	subs	r3, #1
 8018cac:	4629      	mov	r1, r5
 8018cae:	2b07      	cmp	r3, #7
 8018cb0:	dc0a      	bgt.n	8018cc8 <__gethex+0x14c>
 8018cb2:	9801      	ldr	r0, [sp, #4]
 8018cb4:	f7fe f8c4 	bl	8016e40 <_Balloc>
 8018cb8:	4604      	mov	r4, r0
 8018cba:	b940      	cbnz	r0, 8018cce <__gethex+0x152>
 8018cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8018e30 <__gethex+0x2b4>)
 8018cbe:	4602      	mov	r2, r0
 8018cc0:	21e4      	movs	r1, #228	@ 0xe4
 8018cc2:	485c      	ldr	r0, [pc, #368]	@ (8018e34 <__gethex+0x2b8>)
 8018cc4:	f7ff fec0 	bl	8018a48 <__assert_func>
 8018cc8:	3101      	adds	r1, #1
 8018cca:	105b      	asrs	r3, r3, #1
 8018ccc:	e7ef      	b.n	8018cae <__gethex+0x132>
 8018cce:	f100 0a14 	add.w	sl, r0, #20
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	4655      	mov	r5, sl
 8018cd6:	469b      	mov	fp, r3
 8018cd8:	45b1      	cmp	r9, r6
 8018cda:	d337      	bcc.n	8018d4c <__gethex+0x1d0>
 8018cdc:	f845 bb04 	str.w	fp, [r5], #4
 8018ce0:	eba5 050a 	sub.w	r5, r5, sl
 8018ce4:	10ad      	asrs	r5, r5, #2
 8018ce6:	6125      	str	r5, [r4, #16]
 8018ce8:	4658      	mov	r0, fp
 8018cea:	f7fe f99b 	bl	8017024 <__hi0bits>
 8018cee:	016d      	lsls	r5, r5, #5
 8018cf0:	f8d8 6000 	ldr.w	r6, [r8]
 8018cf4:	1a2d      	subs	r5, r5, r0
 8018cf6:	42b5      	cmp	r5, r6
 8018cf8:	dd54      	ble.n	8018da4 <__gethex+0x228>
 8018cfa:	1bad      	subs	r5, r5, r6
 8018cfc:	4629      	mov	r1, r5
 8018cfe:	4620      	mov	r0, r4
 8018d00:	f7fe fd2f 	bl	8017762 <__any_on>
 8018d04:	4681      	mov	r9, r0
 8018d06:	b178      	cbz	r0, 8018d28 <__gethex+0x1ac>
 8018d08:	1e6b      	subs	r3, r5, #1
 8018d0a:	1159      	asrs	r1, r3, #5
 8018d0c:	f003 021f 	and.w	r2, r3, #31
 8018d10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018d14:	f04f 0901 	mov.w	r9, #1
 8018d18:	fa09 f202 	lsl.w	r2, r9, r2
 8018d1c:	420a      	tst	r2, r1
 8018d1e:	d003      	beq.n	8018d28 <__gethex+0x1ac>
 8018d20:	454b      	cmp	r3, r9
 8018d22:	dc36      	bgt.n	8018d92 <__gethex+0x216>
 8018d24:	f04f 0902 	mov.w	r9, #2
 8018d28:	4629      	mov	r1, r5
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	f7ff febe 	bl	8018aac <rshift>
 8018d30:	442f      	add	r7, r5
 8018d32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018d36:	42bb      	cmp	r3, r7
 8018d38:	da42      	bge.n	8018dc0 <__gethex+0x244>
 8018d3a:	9801      	ldr	r0, [sp, #4]
 8018d3c:	4621      	mov	r1, r4
 8018d3e:	f7fe f8bf 	bl	8016ec0 <_Bfree>
 8018d42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018d44:	2300      	movs	r3, #0
 8018d46:	6013      	str	r3, [r2, #0]
 8018d48:	25a3      	movs	r5, #163	@ 0xa3
 8018d4a:	e793      	b.n	8018c74 <__gethex+0xf8>
 8018d4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018d50:	2a2e      	cmp	r2, #46	@ 0x2e
 8018d52:	d012      	beq.n	8018d7a <__gethex+0x1fe>
 8018d54:	2b20      	cmp	r3, #32
 8018d56:	d104      	bne.n	8018d62 <__gethex+0x1e6>
 8018d58:	f845 bb04 	str.w	fp, [r5], #4
 8018d5c:	f04f 0b00 	mov.w	fp, #0
 8018d60:	465b      	mov	r3, fp
 8018d62:	7830      	ldrb	r0, [r6, #0]
 8018d64:	9303      	str	r3, [sp, #12]
 8018d66:	f7ff fef3 	bl	8018b50 <__hexdig_fun>
 8018d6a:	9b03      	ldr	r3, [sp, #12]
 8018d6c:	f000 000f 	and.w	r0, r0, #15
 8018d70:	4098      	lsls	r0, r3
 8018d72:	ea4b 0b00 	orr.w	fp, fp, r0
 8018d76:	3304      	adds	r3, #4
 8018d78:	e7ae      	b.n	8018cd8 <__gethex+0x15c>
 8018d7a:	45b1      	cmp	r9, r6
 8018d7c:	d8ea      	bhi.n	8018d54 <__gethex+0x1d8>
 8018d7e:	492b      	ldr	r1, [pc, #172]	@ (8018e2c <__gethex+0x2b0>)
 8018d80:	9303      	str	r3, [sp, #12]
 8018d82:	2201      	movs	r2, #1
 8018d84:	4630      	mov	r0, r6
 8018d86:	f7ff fe11 	bl	80189ac <strncmp>
 8018d8a:	9b03      	ldr	r3, [sp, #12]
 8018d8c:	2800      	cmp	r0, #0
 8018d8e:	d1e1      	bne.n	8018d54 <__gethex+0x1d8>
 8018d90:	e7a2      	b.n	8018cd8 <__gethex+0x15c>
 8018d92:	1ea9      	subs	r1, r5, #2
 8018d94:	4620      	mov	r0, r4
 8018d96:	f7fe fce4 	bl	8017762 <__any_on>
 8018d9a:	2800      	cmp	r0, #0
 8018d9c:	d0c2      	beq.n	8018d24 <__gethex+0x1a8>
 8018d9e:	f04f 0903 	mov.w	r9, #3
 8018da2:	e7c1      	b.n	8018d28 <__gethex+0x1ac>
 8018da4:	da09      	bge.n	8018dba <__gethex+0x23e>
 8018da6:	1b75      	subs	r5, r6, r5
 8018da8:	4621      	mov	r1, r4
 8018daa:	9801      	ldr	r0, [sp, #4]
 8018dac:	462a      	mov	r2, r5
 8018dae:	f7fe fa9f 	bl	80172f0 <__lshift>
 8018db2:	1b7f      	subs	r7, r7, r5
 8018db4:	4604      	mov	r4, r0
 8018db6:	f100 0a14 	add.w	sl, r0, #20
 8018dba:	f04f 0900 	mov.w	r9, #0
 8018dbe:	e7b8      	b.n	8018d32 <__gethex+0x1b6>
 8018dc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018dc4:	42bd      	cmp	r5, r7
 8018dc6:	dd6f      	ble.n	8018ea8 <__gethex+0x32c>
 8018dc8:	1bed      	subs	r5, r5, r7
 8018dca:	42ae      	cmp	r6, r5
 8018dcc:	dc34      	bgt.n	8018e38 <__gethex+0x2bc>
 8018dce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018dd2:	2b02      	cmp	r3, #2
 8018dd4:	d022      	beq.n	8018e1c <__gethex+0x2a0>
 8018dd6:	2b03      	cmp	r3, #3
 8018dd8:	d024      	beq.n	8018e24 <__gethex+0x2a8>
 8018dda:	2b01      	cmp	r3, #1
 8018ddc:	d115      	bne.n	8018e0a <__gethex+0x28e>
 8018dde:	42ae      	cmp	r6, r5
 8018de0:	d113      	bne.n	8018e0a <__gethex+0x28e>
 8018de2:	2e01      	cmp	r6, #1
 8018de4:	d10b      	bne.n	8018dfe <__gethex+0x282>
 8018de6:	9a02      	ldr	r2, [sp, #8]
 8018de8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018dec:	6013      	str	r3, [r2, #0]
 8018dee:	2301      	movs	r3, #1
 8018df0:	6123      	str	r3, [r4, #16]
 8018df2:	f8ca 3000 	str.w	r3, [sl]
 8018df6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018df8:	2562      	movs	r5, #98	@ 0x62
 8018dfa:	601c      	str	r4, [r3, #0]
 8018dfc:	e73a      	b.n	8018c74 <__gethex+0xf8>
 8018dfe:	1e71      	subs	r1, r6, #1
 8018e00:	4620      	mov	r0, r4
 8018e02:	f7fe fcae 	bl	8017762 <__any_on>
 8018e06:	2800      	cmp	r0, #0
 8018e08:	d1ed      	bne.n	8018de6 <__gethex+0x26a>
 8018e0a:	9801      	ldr	r0, [sp, #4]
 8018e0c:	4621      	mov	r1, r4
 8018e0e:	f7fe f857 	bl	8016ec0 <_Bfree>
 8018e12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018e14:	2300      	movs	r3, #0
 8018e16:	6013      	str	r3, [r2, #0]
 8018e18:	2550      	movs	r5, #80	@ 0x50
 8018e1a:	e72b      	b.n	8018c74 <__gethex+0xf8>
 8018e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d1f3      	bne.n	8018e0a <__gethex+0x28e>
 8018e22:	e7e0      	b.n	8018de6 <__gethex+0x26a>
 8018e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d1dd      	bne.n	8018de6 <__gethex+0x26a>
 8018e2a:	e7ee      	b.n	8018e0a <__gethex+0x28e>
 8018e2c:	0802f278 	.word	0x0802f278
 8018e30:	0802f111 	.word	0x0802f111
 8018e34:	0802f426 	.word	0x0802f426
 8018e38:	1e6f      	subs	r7, r5, #1
 8018e3a:	f1b9 0f00 	cmp.w	r9, #0
 8018e3e:	d130      	bne.n	8018ea2 <__gethex+0x326>
 8018e40:	b127      	cbz	r7, 8018e4c <__gethex+0x2d0>
 8018e42:	4639      	mov	r1, r7
 8018e44:	4620      	mov	r0, r4
 8018e46:	f7fe fc8c 	bl	8017762 <__any_on>
 8018e4a:	4681      	mov	r9, r0
 8018e4c:	117a      	asrs	r2, r7, #5
 8018e4e:	2301      	movs	r3, #1
 8018e50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018e54:	f007 071f 	and.w	r7, r7, #31
 8018e58:	40bb      	lsls	r3, r7
 8018e5a:	4213      	tst	r3, r2
 8018e5c:	4629      	mov	r1, r5
 8018e5e:	4620      	mov	r0, r4
 8018e60:	bf18      	it	ne
 8018e62:	f049 0902 	orrne.w	r9, r9, #2
 8018e66:	f7ff fe21 	bl	8018aac <rshift>
 8018e6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8018e6e:	1b76      	subs	r6, r6, r5
 8018e70:	2502      	movs	r5, #2
 8018e72:	f1b9 0f00 	cmp.w	r9, #0
 8018e76:	d047      	beq.n	8018f08 <__gethex+0x38c>
 8018e78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018e7c:	2b02      	cmp	r3, #2
 8018e7e:	d015      	beq.n	8018eac <__gethex+0x330>
 8018e80:	2b03      	cmp	r3, #3
 8018e82:	d017      	beq.n	8018eb4 <__gethex+0x338>
 8018e84:	2b01      	cmp	r3, #1
 8018e86:	d109      	bne.n	8018e9c <__gethex+0x320>
 8018e88:	f019 0f02 	tst.w	r9, #2
 8018e8c:	d006      	beq.n	8018e9c <__gethex+0x320>
 8018e8e:	f8da 3000 	ldr.w	r3, [sl]
 8018e92:	ea49 0903 	orr.w	r9, r9, r3
 8018e96:	f019 0f01 	tst.w	r9, #1
 8018e9a:	d10e      	bne.n	8018eba <__gethex+0x33e>
 8018e9c:	f045 0510 	orr.w	r5, r5, #16
 8018ea0:	e032      	b.n	8018f08 <__gethex+0x38c>
 8018ea2:	f04f 0901 	mov.w	r9, #1
 8018ea6:	e7d1      	b.n	8018e4c <__gethex+0x2d0>
 8018ea8:	2501      	movs	r5, #1
 8018eaa:	e7e2      	b.n	8018e72 <__gethex+0x2f6>
 8018eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018eae:	f1c3 0301 	rsb	r3, r3, #1
 8018eb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d0f0      	beq.n	8018e9c <__gethex+0x320>
 8018eba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018ebe:	f104 0314 	add.w	r3, r4, #20
 8018ec2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018ec6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018eca:	f04f 0c00 	mov.w	ip, #0
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ed4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018ed8:	d01b      	beq.n	8018f12 <__gethex+0x396>
 8018eda:	3201      	adds	r2, #1
 8018edc:	6002      	str	r2, [r0, #0]
 8018ede:	2d02      	cmp	r5, #2
 8018ee0:	f104 0314 	add.w	r3, r4, #20
 8018ee4:	d13c      	bne.n	8018f60 <__gethex+0x3e4>
 8018ee6:	f8d8 2000 	ldr.w	r2, [r8]
 8018eea:	3a01      	subs	r2, #1
 8018eec:	42b2      	cmp	r2, r6
 8018eee:	d109      	bne.n	8018f04 <__gethex+0x388>
 8018ef0:	1171      	asrs	r1, r6, #5
 8018ef2:	2201      	movs	r2, #1
 8018ef4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018ef8:	f006 061f 	and.w	r6, r6, #31
 8018efc:	fa02 f606 	lsl.w	r6, r2, r6
 8018f00:	421e      	tst	r6, r3
 8018f02:	d13a      	bne.n	8018f7a <__gethex+0x3fe>
 8018f04:	f045 0520 	orr.w	r5, r5, #32
 8018f08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f0a:	601c      	str	r4, [r3, #0]
 8018f0c:	9b02      	ldr	r3, [sp, #8]
 8018f0e:	601f      	str	r7, [r3, #0]
 8018f10:	e6b0      	b.n	8018c74 <__gethex+0xf8>
 8018f12:	4299      	cmp	r1, r3
 8018f14:	f843 cc04 	str.w	ip, [r3, #-4]
 8018f18:	d8d9      	bhi.n	8018ece <__gethex+0x352>
 8018f1a:	68a3      	ldr	r3, [r4, #8]
 8018f1c:	459b      	cmp	fp, r3
 8018f1e:	db17      	blt.n	8018f50 <__gethex+0x3d4>
 8018f20:	6861      	ldr	r1, [r4, #4]
 8018f22:	9801      	ldr	r0, [sp, #4]
 8018f24:	3101      	adds	r1, #1
 8018f26:	f7fd ff8b 	bl	8016e40 <_Balloc>
 8018f2a:	4681      	mov	r9, r0
 8018f2c:	b918      	cbnz	r0, 8018f36 <__gethex+0x3ba>
 8018f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8018f98 <__gethex+0x41c>)
 8018f30:	4602      	mov	r2, r0
 8018f32:	2184      	movs	r1, #132	@ 0x84
 8018f34:	e6c5      	b.n	8018cc2 <__gethex+0x146>
 8018f36:	6922      	ldr	r2, [r4, #16]
 8018f38:	3202      	adds	r2, #2
 8018f3a:	f104 010c 	add.w	r1, r4, #12
 8018f3e:	0092      	lsls	r2, r2, #2
 8018f40:	300c      	adds	r0, #12
 8018f42:	f7fd f81a 	bl	8015f7a <memcpy>
 8018f46:	4621      	mov	r1, r4
 8018f48:	9801      	ldr	r0, [sp, #4]
 8018f4a:	f7fd ffb9 	bl	8016ec0 <_Bfree>
 8018f4e:	464c      	mov	r4, r9
 8018f50:	6923      	ldr	r3, [r4, #16]
 8018f52:	1c5a      	adds	r2, r3, #1
 8018f54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018f58:	6122      	str	r2, [r4, #16]
 8018f5a:	2201      	movs	r2, #1
 8018f5c:	615a      	str	r2, [r3, #20]
 8018f5e:	e7be      	b.n	8018ede <__gethex+0x362>
 8018f60:	6922      	ldr	r2, [r4, #16]
 8018f62:	455a      	cmp	r2, fp
 8018f64:	dd0b      	ble.n	8018f7e <__gethex+0x402>
 8018f66:	2101      	movs	r1, #1
 8018f68:	4620      	mov	r0, r4
 8018f6a:	f7ff fd9f 	bl	8018aac <rshift>
 8018f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018f72:	3701      	adds	r7, #1
 8018f74:	42bb      	cmp	r3, r7
 8018f76:	f6ff aee0 	blt.w	8018d3a <__gethex+0x1be>
 8018f7a:	2501      	movs	r5, #1
 8018f7c:	e7c2      	b.n	8018f04 <__gethex+0x388>
 8018f7e:	f016 061f 	ands.w	r6, r6, #31
 8018f82:	d0fa      	beq.n	8018f7a <__gethex+0x3fe>
 8018f84:	4453      	add	r3, sl
 8018f86:	f1c6 0620 	rsb	r6, r6, #32
 8018f8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018f8e:	f7fe f849 	bl	8017024 <__hi0bits>
 8018f92:	42b0      	cmp	r0, r6
 8018f94:	dbe7      	blt.n	8018f66 <__gethex+0x3ea>
 8018f96:	e7f0      	b.n	8018f7a <__gethex+0x3fe>
 8018f98:	0802f111 	.word	0x0802f111

08018f9c <L_shift>:
 8018f9c:	f1c2 0208 	rsb	r2, r2, #8
 8018fa0:	0092      	lsls	r2, r2, #2
 8018fa2:	b570      	push	{r4, r5, r6, lr}
 8018fa4:	f1c2 0620 	rsb	r6, r2, #32
 8018fa8:	6843      	ldr	r3, [r0, #4]
 8018faa:	6804      	ldr	r4, [r0, #0]
 8018fac:	fa03 f506 	lsl.w	r5, r3, r6
 8018fb0:	432c      	orrs	r4, r5
 8018fb2:	40d3      	lsrs	r3, r2
 8018fb4:	6004      	str	r4, [r0, #0]
 8018fb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8018fba:	4288      	cmp	r0, r1
 8018fbc:	d3f4      	bcc.n	8018fa8 <L_shift+0xc>
 8018fbe:	bd70      	pop	{r4, r5, r6, pc}

08018fc0 <__match>:
 8018fc0:	b530      	push	{r4, r5, lr}
 8018fc2:	6803      	ldr	r3, [r0, #0]
 8018fc4:	3301      	adds	r3, #1
 8018fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018fca:	b914      	cbnz	r4, 8018fd2 <__match+0x12>
 8018fcc:	6003      	str	r3, [r0, #0]
 8018fce:	2001      	movs	r0, #1
 8018fd0:	bd30      	pop	{r4, r5, pc}
 8018fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018fd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8018fda:	2d19      	cmp	r5, #25
 8018fdc:	bf98      	it	ls
 8018fde:	3220      	addls	r2, #32
 8018fe0:	42a2      	cmp	r2, r4
 8018fe2:	d0f0      	beq.n	8018fc6 <__match+0x6>
 8018fe4:	2000      	movs	r0, #0
 8018fe6:	e7f3      	b.n	8018fd0 <__match+0x10>

08018fe8 <__hexnan>:
 8018fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fec:	680b      	ldr	r3, [r1, #0]
 8018fee:	6801      	ldr	r1, [r0, #0]
 8018ff0:	115e      	asrs	r6, r3, #5
 8018ff2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018ff6:	f013 031f 	ands.w	r3, r3, #31
 8018ffa:	b087      	sub	sp, #28
 8018ffc:	bf18      	it	ne
 8018ffe:	3604      	addne	r6, #4
 8019000:	2500      	movs	r5, #0
 8019002:	1f37      	subs	r7, r6, #4
 8019004:	4682      	mov	sl, r0
 8019006:	4690      	mov	r8, r2
 8019008:	9301      	str	r3, [sp, #4]
 801900a:	f846 5c04 	str.w	r5, [r6, #-4]
 801900e:	46b9      	mov	r9, r7
 8019010:	463c      	mov	r4, r7
 8019012:	9502      	str	r5, [sp, #8]
 8019014:	46ab      	mov	fp, r5
 8019016:	784a      	ldrb	r2, [r1, #1]
 8019018:	1c4b      	adds	r3, r1, #1
 801901a:	9303      	str	r3, [sp, #12]
 801901c:	b342      	cbz	r2, 8019070 <__hexnan+0x88>
 801901e:	4610      	mov	r0, r2
 8019020:	9105      	str	r1, [sp, #20]
 8019022:	9204      	str	r2, [sp, #16]
 8019024:	f7ff fd94 	bl	8018b50 <__hexdig_fun>
 8019028:	2800      	cmp	r0, #0
 801902a:	d151      	bne.n	80190d0 <__hexnan+0xe8>
 801902c:	9a04      	ldr	r2, [sp, #16]
 801902e:	9905      	ldr	r1, [sp, #20]
 8019030:	2a20      	cmp	r2, #32
 8019032:	d818      	bhi.n	8019066 <__hexnan+0x7e>
 8019034:	9b02      	ldr	r3, [sp, #8]
 8019036:	459b      	cmp	fp, r3
 8019038:	dd13      	ble.n	8019062 <__hexnan+0x7a>
 801903a:	454c      	cmp	r4, r9
 801903c:	d206      	bcs.n	801904c <__hexnan+0x64>
 801903e:	2d07      	cmp	r5, #7
 8019040:	dc04      	bgt.n	801904c <__hexnan+0x64>
 8019042:	462a      	mov	r2, r5
 8019044:	4649      	mov	r1, r9
 8019046:	4620      	mov	r0, r4
 8019048:	f7ff ffa8 	bl	8018f9c <L_shift>
 801904c:	4544      	cmp	r4, r8
 801904e:	d952      	bls.n	80190f6 <__hexnan+0x10e>
 8019050:	2300      	movs	r3, #0
 8019052:	f1a4 0904 	sub.w	r9, r4, #4
 8019056:	f844 3c04 	str.w	r3, [r4, #-4]
 801905a:	f8cd b008 	str.w	fp, [sp, #8]
 801905e:	464c      	mov	r4, r9
 8019060:	461d      	mov	r5, r3
 8019062:	9903      	ldr	r1, [sp, #12]
 8019064:	e7d7      	b.n	8019016 <__hexnan+0x2e>
 8019066:	2a29      	cmp	r2, #41	@ 0x29
 8019068:	d157      	bne.n	801911a <__hexnan+0x132>
 801906a:	3102      	adds	r1, #2
 801906c:	f8ca 1000 	str.w	r1, [sl]
 8019070:	f1bb 0f00 	cmp.w	fp, #0
 8019074:	d051      	beq.n	801911a <__hexnan+0x132>
 8019076:	454c      	cmp	r4, r9
 8019078:	d206      	bcs.n	8019088 <__hexnan+0xa0>
 801907a:	2d07      	cmp	r5, #7
 801907c:	dc04      	bgt.n	8019088 <__hexnan+0xa0>
 801907e:	462a      	mov	r2, r5
 8019080:	4649      	mov	r1, r9
 8019082:	4620      	mov	r0, r4
 8019084:	f7ff ff8a 	bl	8018f9c <L_shift>
 8019088:	4544      	cmp	r4, r8
 801908a:	d936      	bls.n	80190fa <__hexnan+0x112>
 801908c:	f1a8 0204 	sub.w	r2, r8, #4
 8019090:	4623      	mov	r3, r4
 8019092:	f853 1b04 	ldr.w	r1, [r3], #4
 8019096:	f842 1f04 	str.w	r1, [r2, #4]!
 801909a:	429f      	cmp	r7, r3
 801909c:	d2f9      	bcs.n	8019092 <__hexnan+0xaa>
 801909e:	1b3b      	subs	r3, r7, r4
 80190a0:	f023 0303 	bic.w	r3, r3, #3
 80190a4:	3304      	adds	r3, #4
 80190a6:	3401      	adds	r4, #1
 80190a8:	3e03      	subs	r6, #3
 80190aa:	42b4      	cmp	r4, r6
 80190ac:	bf88      	it	hi
 80190ae:	2304      	movhi	r3, #4
 80190b0:	4443      	add	r3, r8
 80190b2:	2200      	movs	r2, #0
 80190b4:	f843 2b04 	str.w	r2, [r3], #4
 80190b8:	429f      	cmp	r7, r3
 80190ba:	d2fb      	bcs.n	80190b4 <__hexnan+0xcc>
 80190bc:	683b      	ldr	r3, [r7, #0]
 80190be:	b91b      	cbnz	r3, 80190c8 <__hexnan+0xe0>
 80190c0:	4547      	cmp	r7, r8
 80190c2:	d128      	bne.n	8019116 <__hexnan+0x12e>
 80190c4:	2301      	movs	r3, #1
 80190c6:	603b      	str	r3, [r7, #0]
 80190c8:	2005      	movs	r0, #5
 80190ca:	b007      	add	sp, #28
 80190cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190d0:	3501      	adds	r5, #1
 80190d2:	2d08      	cmp	r5, #8
 80190d4:	f10b 0b01 	add.w	fp, fp, #1
 80190d8:	dd06      	ble.n	80190e8 <__hexnan+0x100>
 80190da:	4544      	cmp	r4, r8
 80190dc:	d9c1      	bls.n	8019062 <__hexnan+0x7a>
 80190de:	2300      	movs	r3, #0
 80190e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80190e4:	2501      	movs	r5, #1
 80190e6:	3c04      	subs	r4, #4
 80190e8:	6822      	ldr	r2, [r4, #0]
 80190ea:	f000 000f 	and.w	r0, r0, #15
 80190ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80190f2:	6020      	str	r0, [r4, #0]
 80190f4:	e7b5      	b.n	8019062 <__hexnan+0x7a>
 80190f6:	2508      	movs	r5, #8
 80190f8:	e7b3      	b.n	8019062 <__hexnan+0x7a>
 80190fa:	9b01      	ldr	r3, [sp, #4]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d0dd      	beq.n	80190bc <__hexnan+0xd4>
 8019100:	f1c3 0320 	rsb	r3, r3, #32
 8019104:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019108:	40da      	lsrs	r2, r3
 801910a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801910e:	4013      	ands	r3, r2
 8019110:	f846 3c04 	str.w	r3, [r6, #-4]
 8019114:	e7d2      	b.n	80190bc <__hexnan+0xd4>
 8019116:	3f04      	subs	r7, #4
 8019118:	e7d0      	b.n	80190bc <__hexnan+0xd4>
 801911a:	2004      	movs	r0, #4
 801911c:	e7d5      	b.n	80190ca <__hexnan+0xe2>

0801911e <__ascii_mbtowc>:
 801911e:	b082      	sub	sp, #8
 8019120:	b901      	cbnz	r1, 8019124 <__ascii_mbtowc+0x6>
 8019122:	a901      	add	r1, sp, #4
 8019124:	b142      	cbz	r2, 8019138 <__ascii_mbtowc+0x1a>
 8019126:	b14b      	cbz	r3, 801913c <__ascii_mbtowc+0x1e>
 8019128:	7813      	ldrb	r3, [r2, #0]
 801912a:	600b      	str	r3, [r1, #0]
 801912c:	7812      	ldrb	r2, [r2, #0]
 801912e:	1e10      	subs	r0, r2, #0
 8019130:	bf18      	it	ne
 8019132:	2001      	movne	r0, #1
 8019134:	b002      	add	sp, #8
 8019136:	4770      	bx	lr
 8019138:	4610      	mov	r0, r2
 801913a:	e7fb      	b.n	8019134 <__ascii_mbtowc+0x16>
 801913c:	f06f 0001 	mvn.w	r0, #1
 8019140:	e7f8      	b.n	8019134 <__ascii_mbtowc+0x16>

08019142 <_realloc_r>:
 8019142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019146:	4680      	mov	r8, r0
 8019148:	4615      	mov	r5, r2
 801914a:	460c      	mov	r4, r1
 801914c:	b921      	cbnz	r1, 8019158 <_realloc_r+0x16>
 801914e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019152:	4611      	mov	r1, r2
 8019154:	f7fd bde8 	b.w	8016d28 <_malloc_r>
 8019158:	b92a      	cbnz	r2, 8019166 <_realloc_r+0x24>
 801915a:	f7fd fd71 	bl	8016c40 <_free_r>
 801915e:	2400      	movs	r4, #0
 8019160:	4620      	mov	r0, r4
 8019162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019166:	f000 f840 	bl	80191ea <_malloc_usable_size_r>
 801916a:	4285      	cmp	r5, r0
 801916c:	4606      	mov	r6, r0
 801916e:	d802      	bhi.n	8019176 <_realloc_r+0x34>
 8019170:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019174:	d8f4      	bhi.n	8019160 <_realloc_r+0x1e>
 8019176:	4629      	mov	r1, r5
 8019178:	4640      	mov	r0, r8
 801917a:	f7fd fdd5 	bl	8016d28 <_malloc_r>
 801917e:	4607      	mov	r7, r0
 8019180:	2800      	cmp	r0, #0
 8019182:	d0ec      	beq.n	801915e <_realloc_r+0x1c>
 8019184:	42b5      	cmp	r5, r6
 8019186:	462a      	mov	r2, r5
 8019188:	4621      	mov	r1, r4
 801918a:	bf28      	it	cs
 801918c:	4632      	movcs	r2, r6
 801918e:	f7fc fef4 	bl	8015f7a <memcpy>
 8019192:	4621      	mov	r1, r4
 8019194:	4640      	mov	r0, r8
 8019196:	f7fd fd53 	bl	8016c40 <_free_r>
 801919a:	463c      	mov	r4, r7
 801919c:	e7e0      	b.n	8019160 <_realloc_r+0x1e>

0801919e <__ascii_wctomb>:
 801919e:	4603      	mov	r3, r0
 80191a0:	4608      	mov	r0, r1
 80191a2:	b141      	cbz	r1, 80191b6 <__ascii_wctomb+0x18>
 80191a4:	2aff      	cmp	r2, #255	@ 0xff
 80191a6:	d904      	bls.n	80191b2 <__ascii_wctomb+0x14>
 80191a8:	228a      	movs	r2, #138	@ 0x8a
 80191aa:	601a      	str	r2, [r3, #0]
 80191ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80191b0:	4770      	bx	lr
 80191b2:	700a      	strb	r2, [r1, #0]
 80191b4:	2001      	movs	r0, #1
 80191b6:	4770      	bx	lr

080191b8 <fiprintf>:
 80191b8:	b40e      	push	{r1, r2, r3}
 80191ba:	b503      	push	{r0, r1, lr}
 80191bc:	4601      	mov	r1, r0
 80191be:	ab03      	add	r3, sp, #12
 80191c0:	4805      	ldr	r0, [pc, #20]	@ (80191d8 <fiprintf+0x20>)
 80191c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80191c6:	6800      	ldr	r0, [r0, #0]
 80191c8:	9301      	str	r3, [sp, #4]
 80191ca:	f000 f83f 	bl	801924c <_vfiprintf_r>
 80191ce:	b002      	add	sp, #8
 80191d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80191d4:	b003      	add	sp, #12
 80191d6:	4770      	bx	lr
 80191d8:	20000140 	.word	0x20000140

080191dc <abort>:
 80191dc:	b508      	push	{r3, lr}
 80191de:	2006      	movs	r0, #6
 80191e0:	f000 f974 	bl	80194cc <raise>
 80191e4:	2001      	movs	r0, #1
 80191e6:	f7ea fb41 	bl	800386c <_exit>

080191ea <_malloc_usable_size_r>:
 80191ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80191ee:	1f18      	subs	r0, r3, #4
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	bfbc      	itt	lt
 80191f4:	580b      	ldrlt	r3, [r1, r0]
 80191f6:	18c0      	addlt	r0, r0, r3
 80191f8:	4770      	bx	lr

080191fa <__sfputc_r>:
 80191fa:	6893      	ldr	r3, [r2, #8]
 80191fc:	3b01      	subs	r3, #1
 80191fe:	2b00      	cmp	r3, #0
 8019200:	b410      	push	{r4}
 8019202:	6093      	str	r3, [r2, #8]
 8019204:	da08      	bge.n	8019218 <__sfputc_r+0x1e>
 8019206:	6994      	ldr	r4, [r2, #24]
 8019208:	42a3      	cmp	r3, r4
 801920a:	db01      	blt.n	8019210 <__sfputc_r+0x16>
 801920c:	290a      	cmp	r1, #10
 801920e:	d103      	bne.n	8019218 <__sfputc_r+0x1e>
 8019210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019214:	f7fc bd48 	b.w	8015ca8 <__swbuf_r>
 8019218:	6813      	ldr	r3, [r2, #0]
 801921a:	1c58      	adds	r0, r3, #1
 801921c:	6010      	str	r0, [r2, #0]
 801921e:	7019      	strb	r1, [r3, #0]
 8019220:	4608      	mov	r0, r1
 8019222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019226:	4770      	bx	lr

08019228 <__sfputs_r>:
 8019228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801922a:	4606      	mov	r6, r0
 801922c:	460f      	mov	r7, r1
 801922e:	4614      	mov	r4, r2
 8019230:	18d5      	adds	r5, r2, r3
 8019232:	42ac      	cmp	r4, r5
 8019234:	d101      	bne.n	801923a <__sfputs_r+0x12>
 8019236:	2000      	movs	r0, #0
 8019238:	e007      	b.n	801924a <__sfputs_r+0x22>
 801923a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801923e:	463a      	mov	r2, r7
 8019240:	4630      	mov	r0, r6
 8019242:	f7ff ffda 	bl	80191fa <__sfputc_r>
 8019246:	1c43      	adds	r3, r0, #1
 8019248:	d1f3      	bne.n	8019232 <__sfputs_r+0xa>
 801924a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801924c <_vfiprintf_r>:
 801924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019250:	460d      	mov	r5, r1
 8019252:	b09d      	sub	sp, #116	@ 0x74
 8019254:	4614      	mov	r4, r2
 8019256:	4698      	mov	r8, r3
 8019258:	4606      	mov	r6, r0
 801925a:	b118      	cbz	r0, 8019264 <_vfiprintf_r+0x18>
 801925c:	6a03      	ldr	r3, [r0, #32]
 801925e:	b90b      	cbnz	r3, 8019264 <_vfiprintf_r+0x18>
 8019260:	f7fc fbf2 	bl	8015a48 <__sinit>
 8019264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019266:	07d9      	lsls	r1, r3, #31
 8019268:	d405      	bmi.n	8019276 <_vfiprintf_r+0x2a>
 801926a:	89ab      	ldrh	r3, [r5, #12]
 801926c:	059a      	lsls	r2, r3, #22
 801926e:	d402      	bmi.n	8019276 <_vfiprintf_r+0x2a>
 8019270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019272:	f7fc fe80 	bl	8015f76 <__retarget_lock_acquire_recursive>
 8019276:	89ab      	ldrh	r3, [r5, #12]
 8019278:	071b      	lsls	r3, r3, #28
 801927a:	d501      	bpl.n	8019280 <_vfiprintf_r+0x34>
 801927c:	692b      	ldr	r3, [r5, #16]
 801927e:	b99b      	cbnz	r3, 80192a8 <_vfiprintf_r+0x5c>
 8019280:	4629      	mov	r1, r5
 8019282:	4630      	mov	r0, r6
 8019284:	f7fc fd4e 	bl	8015d24 <__swsetup_r>
 8019288:	b170      	cbz	r0, 80192a8 <_vfiprintf_r+0x5c>
 801928a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801928c:	07dc      	lsls	r4, r3, #31
 801928e:	d504      	bpl.n	801929a <_vfiprintf_r+0x4e>
 8019290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019294:	b01d      	add	sp, #116	@ 0x74
 8019296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801929a:	89ab      	ldrh	r3, [r5, #12]
 801929c:	0598      	lsls	r0, r3, #22
 801929e:	d4f7      	bmi.n	8019290 <_vfiprintf_r+0x44>
 80192a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80192a2:	f7fc fe69 	bl	8015f78 <__retarget_lock_release_recursive>
 80192a6:	e7f3      	b.n	8019290 <_vfiprintf_r+0x44>
 80192a8:	2300      	movs	r3, #0
 80192aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80192ac:	2320      	movs	r3, #32
 80192ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80192b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80192b6:	2330      	movs	r3, #48	@ 0x30
 80192b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019468 <_vfiprintf_r+0x21c>
 80192bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80192c0:	f04f 0901 	mov.w	r9, #1
 80192c4:	4623      	mov	r3, r4
 80192c6:	469a      	mov	sl, r3
 80192c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192cc:	b10a      	cbz	r2, 80192d2 <_vfiprintf_r+0x86>
 80192ce:	2a25      	cmp	r2, #37	@ 0x25
 80192d0:	d1f9      	bne.n	80192c6 <_vfiprintf_r+0x7a>
 80192d2:	ebba 0b04 	subs.w	fp, sl, r4
 80192d6:	d00b      	beq.n	80192f0 <_vfiprintf_r+0xa4>
 80192d8:	465b      	mov	r3, fp
 80192da:	4622      	mov	r2, r4
 80192dc:	4629      	mov	r1, r5
 80192de:	4630      	mov	r0, r6
 80192e0:	f7ff ffa2 	bl	8019228 <__sfputs_r>
 80192e4:	3001      	adds	r0, #1
 80192e6:	f000 80a7 	beq.w	8019438 <_vfiprintf_r+0x1ec>
 80192ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80192ec:	445a      	add	r2, fp
 80192ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80192f0:	f89a 3000 	ldrb.w	r3, [sl]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	f000 809f 	beq.w	8019438 <_vfiprintf_r+0x1ec>
 80192fa:	2300      	movs	r3, #0
 80192fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019304:	f10a 0a01 	add.w	sl, sl, #1
 8019308:	9304      	str	r3, [sp, #16]
 801930a:	9307      	str	r3, [sp, #28]
 801930c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019310:	931a      	str	r3, [sp, #104]	@ 0x68
 8019312:	4654      	mov	r4, sl
 8019314:	2205      	movs	r2, #5
 8019316:	f814 1b01 	ldrb.w	r1, [r4], #1
 801931a:	4853      	ldr	r0, [pc, #332]	@ (8019468 <_vfiprintf_r+0x21c>)
 801931c:	f7e6 ff60 	bl	80001e0 <memchr>
 8019320:	9a04      	ldr	r2, [sp, #16]
 8019322:	b9d8      	cbnz	r0, 801935c <_vfiprintf_r+0x110>
 8019324:	06d1      	lsls	r1, r2, #27
 8019326:	bf44      	itt	mi
 8019328:	2320      	movmi	r3, #32
 801932a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801932e:	0713      	lsls	r3, r2, #28
 8019330:	bf44      	itt	mi
 8019332:	232b      	movmi	r3, #43	@ 0x2b
 8019334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019338:	f89a 3000 	ldrb.w	r3, [sl]
 801933c:	2b2a      	cmp	r3, #42	@ 0x2a
 801933e:	d015      	beq.n	801936c <_vfiprintf_r+0x120>
 8019340:	9a07      	ldr	r2, [sp, #28]
 8019342:	4654      	mov	r4, sl
 8019344:	2000      	movs	r0, #0
 8019346:	f04f 0c0a 	mov.w	ip, #10
 801934a:	4621      	mov	r1, r4
 801934c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019350:	3b30      	subs	r3, #48	@ 0x30
 8019352:	2b09      	cmp	r3, #9
 8019354:	d94b      	bls.n	80193ee <_vfiprintf_r+0x1a2>
 8019356:	b1b0      	cbz	r0, 8019386 <_vfiprintf_r+0x13a>
 8019358:	9207      	str	r2, [sp, #28]
 801935a:	e014      	b.n	8019386 <_vfiprintf_r+0x13a>
 801935c:	eba0 0308 	sub.w	r3, r0, r8
 8019360:	fa09 f303 	lsl.w	r3, r9, r3
 8019364:	4313      	orrs	r3, r2
 8019366:	9304      	str	r3, [sp, #16]
 8019368:	46a2      	mov	sl, r4
 801936a:	e7d2      	b.n	8019312 <_vfiprintf_r+0xc6>
 801936c:	9b03      	ldr	r3, [sp, #12]
 801936e:	1d19      	adds	r1, r3, #4
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	9103      	str	r1, [sp, #12]
 8019374:	2b00      	cmp	r3, #0
 8019376:	bfbb      	ittet	lt
 8019378:	425b      	neglt	r3, r3
 801937a:	f042 0202 	orrlt.w	r2, r2, #2
 801937e:	9307      	strge	r3, [sp, #28]
 8019380:	9307      	strlt	r3, [sp, #28]
 8019382:	bfb8      	it	lt
 8019384:	9204      	strlt	r2, [sp, #16]
 8019386:	7823      	ldrb	r3, [r4, #0]
 8019388:	2b2e      	cmp	r3, #46	@ 0x2e
 801938a:	d10a      	bne.n	80193a2 <_vfiprintf_r+0x156>
 801938c:	7863      	ldrb	r3, [r4, #1]
 801938e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019390:	d132      	bne.n	80193f8 <_vfiprintf_r+0x1ac>
 8019392:	9b03      	ldr	r3, [sp, #12]
 8019394:	1d1a      	adds	r2, r3, #4
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	9203      	str	r2, [sp, #12]
 801939a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801939e:	3402      	adds	r4, #2
 80193a0:	9305      	str	r3, [sp, #20]
 80193a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019478 <_vfiprintf_r+0x22c>
 80193a6:	7821      	ldrb	r1, [r4, #0]
 80193a8:	2203      	movs	r2, #3
 80193aa:	4650      	mov	r0, sl
 80193ac:	f7e6 ff18 	bl	80001e0 <memchr>
 80193b0:	b138      	cbz	r0, 80193c2 <_vfiprintf_r+0x176>
 80193b2:	9b04      	ldr	r3, [sp, #16]
 80193b4:	eba0 000a 	sub.w	r0, r0, sl
 80193b8:	2240      	movs	r2, #64	@ 0x40
 80193ba:	4082      	lsls	r2, r0
 80193bc:	4313      	orrs	r3, r2
 80193be:	3401      	adds	r4, #1
 80193c0:	9304      	str	r3, [sp, #16]
 80193c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193c6:	4829      	ldr	r0, [pc, #164]	@ (801946c <_vfiprintf_r+0x220>)
 80193c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80193cc:	2206      	movs	r2, #6
 80193ce:	f7e6 ff07 	bl	80001e0 <memchr>
 80193d2:	2800      	cmp	r0, #0
 80193d4:	d03f      	beq.n	8019456 <_vfiprintf_r+0x20a>
 80193d6:	4b26      	ldr	r3, [pc, #152]	@ (8019470 <_vfiprintf_r+0x224>)
 80193d8:	bb1b      	cbnz	r3, 8019422 <_vfiprintf_r+0x1d6>
 80193da:	9b03      	ldr	r3, [sp, #12]
 80193dc:	3307      	adds	r3, #7
 80193de:	f023 0307 	bic.w	r3, r3, #7
 80193e2:	3308      	adds	r3, #8
 80193e4:	9303      	str	r3, [sp, #12]
 80193e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80193e8:	443b      	add	r3, r7
 80193ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80193ec:	e76a      	b.n	80192c4 <_vfiprintf_r+0x78>
 80193ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80193f2:	460c      	mov	r4, r1
 80193f4:	2001      	movs	r0, #1
 80193f6:	e7a8      	b.n	801934a <_vfiprintf_r+0xfe>
 80193f8:	2300      	movs	r3, #0
 80193fa:	3401      	adds	r4, #1
 80193fc:	9305      	str	r3, [sp, #20]
 80193fe:	4619      	mov	r1, r3
 8019400:	f04f 0c0a 	mov.w	ip, #10
 8019404:	4620      	mov	r0, r4
 8019406:	f810 2b01 	ldrb.w	r2, [r0], #1
 801940a:	3a30      	subs	r2, #48	@ 0x30
 801940c:	2a09      	cmp	r2, #9
 801940e:	d903      	bls.n	8019418 <_vfiprintf_r+0x1cc>
 8019410:	2b00      	cmp	r3, #0
 8019412:	d0c6      	beq.n	80193a2 <_vfiprintf_r+0x156>
 8019414:	9105      	str	r1, [sp, #20]
 8019416:	e7c4      	b.n	80193a2 <_vfiprintf_r+0x156>
 8019418:	fb0c 2101 	mla	r1, ip, r1, r2
 801941c:	4604      	mov	r4, r0
 801941e:	2301      	movs	r3, #1
 8019420:	e7f0      	b.n	8019404 <_vfiprintf_r+0x1b8>
 8019422:	ab03      	add	r3, sp, #12
 8019424:	9300      	str	r3, [sp, #0]
 8019426:	462a      	mov	r2, r5
 8019428:	4b12      	ldr	r3, [pc, #72]	@ (8019474 <_vfiprintf_r+0x228>)
 801942a:	a904      	add	r1, sp, #16
 801942c:	4630      	mov	r0, r6
 801942e:	f7fb fcb3 	bl	8014d98 <_printf_float>
 8019432:	4607      	mov	r7, r0
 8019434:	1c78      	adds	r0, r7, #1
 8019436:	d1d6      	bne.n	80193e6 <_vfiprintf_r+0x19a>
 8019438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801943a:	07d9      	lsls	r1, r3, #31
 801943c:	d405      	bmi.n	801944a <_vfiprintf_r+0x1fe>
 801943e:	89ab      	ldrh	r3, [r5, #12]
 8019440:	059a      	lsls	r2, r3, #22
 8019442:	d402      	bmi.n	801944a <_vfiprintf_r+0x1fe>
 8019444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019446:	f7fc fd97 	bl	8015f78 <__retarget_lock_release_recursive>
 801944a:	89ab      	ldrh	r3, [r5, #12]
 801944c:	065b      	lsls	r3, r3, #25
 801944e:	f53f af1f 	bmi.w	8019290 <_vfiprintf_r+0x44>
 8019452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019454:	e71e      	b.n	8019294 <_vfiprintf_r+0x48>
 8019456:	ab03      	add	r3, sp, #12
 8019458:	9300      	str	r3, [sp, #0]
 801945a:	462a      	mov	r2, r5
 801945c:	4b05      	ldr	r3, [pc, #20]	@ (8019474 <_vfiprintf_r+0x228>)
 801945e:	a904      	add	r1, sp, #16
 8019460:	4630      	mov	r0, r6
 8019462:	f7fb ff31 	bl	80152c8 <_printf_i>
 8019466:	e7e4      	b.n	8019432 <_vfiprintf_r+0x1e6>
 8019468:	0802f3d1 	.word	0x0802f3d1
 801946c:	0802f3db 	.word	0x0802f3db
 8019470:	08014d99 	.word	0x08014d99
 8019474:	08019229 	.word	0x08019229
 8019478:	0802f3d7 	.word	0x0802f3d7

0801947c <_raise_r>:
 801947c:	291f      	cmp	r1, #31
 801947e:	b538      	push	{r3, r4, r5, lr}
 8019480:	4605      	mov	r5, r0
 8019482:	460c      	mov	r4, r1
 8019484:	d904      	bls.n	8019490 <_raise_r+0x14>
 8019486:	2316      	movs	r3, #22
 8019488:	6003      	str	r3, [r0, #0]
 801948a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801948e:	bd38      	pop	{r3, r4, r5, pc}
 8019490:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019492:	b112      	cbz	r2, 801949a <_raise_r+0x1e>
 8019494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019498:	b94b      	cbnz	r3, 80194ae <_raise_r+0x32>
 801949a:	4628      	mov	r0, r5
 801949c:	f000 f830 	bl	8019500 <_getpid_r>
 80194a0:	4622      	mov	r2, r4
 80194a2:	4601      	mov	r1, r0
 80194a4:	4628      	mov	r0, r5
 80194a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194aa:	f000 b817 	b.w	80194dc <_kill_r>
 80194ae:	2b01      	cmp	r3, #1
 80194b0:	d00a      	beq.n	80194c8 <_raise_r+0x4c>
 80194b2:	1c59      	adds	r1, r3, #1
 80194b4:	d103      	bne.n	80194be <_raise_r+0x42>
 80194b6:	2316      	movs	r3, #22
 80194b8:	6003      	str	r3, [r0, #0]
 80194ba:	2001      	movs	r0, #1
 80194bc:	e7e7      	b.n	801948e <_raise_r+0x12>
 80194be:	2100      	movs	r1, #0
 80194c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80194c4:	4620      	mov	r0, r4
 80194c6:	4798      	blx	r3
 80194c8:	2000      	movs	r0, #0
 80194ca:	e7e0      	b.n	801948e <_raise_r+0x12>

080194cc <raise>:
 80194cc:	4b02      	ldr	r3, [pc, #8]	@ (80194d8 <raise+0xc>)
 80194ce:	4601      	mov	r1, r0
 80194d0:	6818      	ldr	r0, [r3, #0]
 80194d2:	f7ff bfd3 	b.w	801947c <_raise_r>
 80194d6:	bf00      	nop
 80194d8:	20000140 	.word	0x20000140

080194dc <_kill_r>:
 80194dc:	b538      	push	{r3, r4, r5, lr}
 80194de:	4d07      	ldr	r5, [pc, #28]	@ (80194fc <_kill_r+0x20>)
 80194e0:	2300      	movs	r3, #0
 80194e2:	4604      	mov	r4, r0
 80194e4:	4608      	mov	r0, r1
 80194e6:	4611      	mov	r1, r2
 80194e8:	602b      	str	r3, [r5, #0]
 80194ea:	f7ea f9af 	bl	800384c <_kill>
 80194ee:	1c43      	adds	r3, r0, #1
 80194f0:	d102      	bne.n	80194f8 <_kill_r+0x1c>
 80194f2:	682b      	ldr	r3, [r5, #0]
 80194f4:	b103      	cbz	r3, 80194f8 <_kill_r+0x1c>
 80194f6:	6023      	str	r3, [r4, #0]
 80194f8:	bd38      	pop	{r3, r4, r5, pc}
 80194fa:	bf00      	nop
 80194fc:	20024bbc 	.word	0x20024bbc

08019500 <_getpid_r>:
 8019500:	f7ea b99c 	b.w	800383c <_getpid>

08019504 <pow>:
 8019504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019506:	ed2d 8b02 	vpush	{d8}
 801950a:	eeb0 8a40 	vmov.f32	s16, s0
 801950e:	eef0 8a60 	vmov.f32	s17, s1
 8019512:	ec55 4b11 	vmov	r4, r5, d1
 8019516:	f000 fd87 	bl	801a028 <__ieee754_pow>
 801951a:	4622      	mov	r2, r4
 801951c:	462b      	mov	r3, r5
 801951e:	4620      	mov	r0, r4
 8019520:	4629      	mov	r1, r5
 8019522:	ec57 6b10 	vmov	r6, r7, d0
 8019526:	f7e7 fb09 	bl	8000b3c <__aeabi_dcmpun>
 801952a:	2800      	cmp	r0, #0
 801952c:	d13b      	bne.n	80195a6 <pow+0xa2>
 801952e:	ec51 0b18 	vmov	r0, r1, d8
 8019532:	2200      	movs	r2, #0
 8019534:	2300      	movs	r3, #0
 8019536:	f7e7 facf 	bl	8000ad8 <__aeabi_dcmpeq>
 801953a:	b1b8      	cbz	r0, 801956c <pow+0x68>
 801953c:	2200      	movs	r2, #0
 801953e:	2300      	movs	r3, #0
 8019540:	4620      	mov	r0, r4
 8019542:	4629      	mov	r1, r5
 8019544:	f7e7 fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 8019548:	2800      	cmp	r0, #0
 801954a:	d146      	bne.n	80195da <pow+0xd6>
 801954c:	ec45 4b10 	vmov	d0, r4, r5
 8019550:	f000 fafc 	bl	8019b4c <finite>
 8019554:	b338      	cbz	r0, 80195a6 <pow+0xa2>
 8019556:	2200      	movs	r2, #0
 8019558:	2300      	movs	r3, #0
 801955a:	4620      	mov	r0, r4
 801955c:	4629      	mov	r1, r5
 801955e:	f7e7 fac5 	bl	8000aec <__aeabi_dcmplt>
 8019562:	b300      	cbz	r0, 80195a6 <pow+0xa2>
 8019564:	f7fc fcdc 	bl	8015f20 <__errno>
 8019568:	2322      	movs	r3, #34	@ 0x22
 801956a:	e01b      	b.n	80195a4 <pow+0xa0>
 801956c:	ec47 6b10 	vmov	d0, r6, r7
 8019570:	f000 faec 	bl	8019b4c <finite>
 8019574:	b9e0      	cbnz	r0, 80195b0 <pow+0xac>
 8019576:	eeb0 0a48 	vmov.f32	s0, s16
 801957a:	eef0 0a68 	vmov.f32	s1, s17
 801957e:	f000 fae5 	bl	8019b4c <finite>
 8019582:	b1a8      	cbz	r0, 80195b0 <pow+0xac>
 8019584:	ec45 4b10 	vmov	d0, r4, r5
 8019588:	f000 fae0 	bl	8019b4c <finite>
 801958c:	b180      	cbz	r0, 80195b0 <pow+0xac>
 801958e:	4632      	mov	r2, r6
 8019590:	463b      	mov	r3, r7
 8019592:	4630      	mov	r0, r6
 8019594:	4639      	mov	r1, r7
 8019596:	f7e7 fad1 	bl	8000b3c <__aeabi_dcmpun>
 801959a:	2800      	cmp	r0, #0
 801959c:	d0e2      	beq.n	8019564 <pow+0x60>
 801959e:	f7fc fcbf 	bl	8015f20 <__errno>
 80195a2:	2321      	movs	r3, #33	@ 0x21
 80195a4:	6003      	str	r3, [r0, #0]
 80195a6:	ecbd 8b02 	vpop	{d8}
 80195aa:	ec47 6b10 	vmov	d0, r6, r7
 80195ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195b0:	2200      	movs	r2, #0
 80195b2:	2300      	movs	r3, #0
 80195b4:	4630      	mov	r0, r6
 80195b6:	4639      	mov	r1, r7
 80195b8:	f7e7 fa8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80195bc:	2800      	cmp	r0, #0
 80195be:	d0f2      	beq.n	80195a6 <pow+0xa2>
 80195c0:	eeb0 0a48 	vmov.f32	s0, s16
 80195c4:	eef0 0a68 	vmov.f32	s1, s17
 80195c8:	f000 fac0 	bl	8019b4c <finite>
 80195cc:	2800      	cmp	r0, #0
 80195ce:	d0ea      	beq.n	80195a6 <pow+0xa2>
 80195d0:	ec45 4b10 	vmov	d0, r4, r5
 80195d4:	f000 faba 	bl	8019b4c <finite>
 80195d8:	e7c3      	b.n	8019562 <pow+0x5e>
 80195da:	4f01      	ldr	r7, [pc, #4]	@ (80195e0 <pow+0xdc>)
 80195dc:	2600      	movs	r6, #0
 80195de:	e7e2      	b.n	80195a6 <pow+0xa2>
 80195e0:	3ff00000 	.word	0x3ff00000

080195e4 <sqrt>:
 80195e4:	b538      	push	{r3, r4, r5, lr}
 80195e6:	ed2d 8b02 	vpush	{d8}
 80195ea:	ec55 4b10 	vmov	r4, r5, d0
 80195ee:	f000 fab9 	bl	8019b64 <__ieee754_sqrt>
 80195f2:	4622      	mov	r2, r4
 80195f4:	462b      	mov	r3, r5
 80195f6:	4620      	mov	r0, r4
 80195f8:	4629      	mov	r1, r5
 80195fa:	eeb0 8a40 	vmov.f32	s16, s0
 80195fe:	eef0 8a60 	vmov.f32	s17, s1
 8019602:	f7e7 fa9b 	bl	8000b3c <__aeabi_dcmpun>
 8019606:	b990      	cbnz	r0, 801962e <sqrt+0x4a>
 8019608:	2200      	movs	r2, #0
 801960a:	2300      	movs	r3, #0
 801960c:	4620      	mov	r0, r4
 801960e:	4629      	mov	r1, r5
 8019610:	f7e7 fa6c 	bl	8000aec <__aeabi_dcmplt>
 8019614:	b158      	cbz	r0, 801962e <sqrt+0x4a>
 8019616:	f7fc fc83 	bl	8015f20 <__errno>
 801961a:	2321      	movs	r3, #33	@ 0x21
 801961c:	6003      	str	r3, [r0, #0]
 801961e:	2200      	movs	r2, #0
 8019620:	2300      	movs	r3, #0
 8019622:	4610      	mov	r0, r2
 8019624:	4619      	mov	r1, r3
 8019626:	f7e7 f919 	bl	800085c <__aeabi_ddiv>
 801962a:	ec41 0b18 	vmov	d8, r0, r1
 801962e:	eeb0 0a48 	vmov.f32	s0, s16
 8019632:	eef0 0a68 	vmov.f32	s1, s17
 8019636:	ecbd 8b02 	vpop	{d8}
 801963a:	bd38      	pop	{r3, r4, r5, pc}
 801963c:	0000      	movs	r0, r0
	...

08019640 <atan>:
 8019640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019644:	ec55 4b10 	vmov	r4, r5, d0
 8019648:	4bbf      	ldr	r3, [pc, #764]	@ (8019948 <atan+0x308>)
 801964a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801964e:	429e      	cmp	r6, r3
 8019650:	46ab      	mov	fp, r5
 8019652:	d918      	bls.n	8019686 <atan+0x46>
 8019654:	4bbd      	ldr	r3, [pc, #756]	@ (801994c <atan+0x30c>)
 8019656:	429e      	cmp	r6, r3
 8019658:	d801      	bhi.n	801965e <atan+0x1e>
 801965a:	d109      	bne.n	8019670 <atan+0x30>
 801965c:	b144      	cbz	r4, 8019670 <atan+0x30>
 801965e:	4622      	mov	r2, r4
 8019660:	462b      	mov	r3, r5
 8019662:	4620      	mov	r0, r4
 8019664:	4629      	mov	r1, r5
 8019666:	f7e6 fe19 	bl	800029c <__adddf3>
 801966a:	4604      	mov	r4, r0
 801966c:	460d      	mov	r5, r1
 801966e:	e006      	b.n	801967e <atan+0x3e>
 8019670:	f1bb 0f00 	cmp.w	fp, #0
 8019674:	f340 812b 	ble.w	80198ce <atan+0x28e>
 8019678:	a597      	add	r5, pc, #604	@ (adr r5, 80198d8 <atan+0x298>)
 801967a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801967e:	ec45 4b10 	vmov	d0, r4, r5
 8019682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019686:	4bb2      	ldr	r3, [pc, #712]	@ (8019950 <atan+0x310>)
 8019688:	429e      	cmp	r6, r3
 801968a:	d813      	bhi.n	80196b4 <atan+0x74>
 801968c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8019690:	429e      	cmp	r6, r3
 8019692:	d80c      	bhi.n	80196ae <atan+0x6e>
 8019694:	a392      	add	r3, pc, #584	@ (adr r3, 80198e0 <atan+0x2a0>)
 8019696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801969a:	4620      	mov	r0, r4
 801969c:	4629      	mov	r1, r5
 801969e:	f7e6 fdfd 	bl	800029c <__adddf3>
 80196a2:	4bac      	ldr	r3, [pc, #688]	@ (8019954 <atan+0x314>)
 80196a4:	2200      	movs	r2, #0
 80196a6:	f7e7 fa3f 	bl	8000b28 <__aeabi_dcmpgt>
 80196aa:	2800      	cmp	r0, #0
 80196ac:	d1e7      	bne.n	801967e <atan+0x3e>
 80196ae:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80196b2:	e029      	b.n	8019708 <atan+0xc8>
 80196b4:	f000 f9b0 	bl	8019a18 <fabs>
 80196b8:	4ba7      	ldr	r3, [pc, #668]	@ (8019958 <atan+0x318>)
 80196ba:	429e      	cmp	r6, r3
 80196bc:	ec55 4b10 	vmov	r4, r5, d0
 80196c0:	f200 80bc 	bhi.w	801983c <atan+0x1fc>
 80196c4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80196c8:	429e      	cmp	r6, r3
 80196ca:	f200 809e 	bhi.w	801980a <atan+0x1ca>
 80196ce:	4622      	mov	r2, r4
 80196d0:	462b      	mov	r3, r5
 80196d2:	4620      	mov	r0, r4
 80196d4:	4629      	mov	r1, r5
 80196d6:	f7e6 fde1 	bl	800029c <__adddf3>
 80196da:	4b9e      	ldr	r3, [pc, #632]	@ (8019954 <atan+0x314>)
 80196dc:	2200      	movs	r2, #0
 80196de:	f7e6 fddb 	bl	8000298 <__aeabi_dsub>
 80196e2:	2200      	movs	r2, #0
 80196e4:	4606      	mov	r6, r0
 80196e6:	460f      	mov	r7, r1
 80196e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80196ec:	4620      	mov	r0, r4
 80196ee:	4629      	mov	r1, r5
 80196f0:	f7e6 fdd4 	bl	800029c <__adddf3>
 80196f4:	4602      	mov	r2, r0
 80196f6:	460b      	mov	r3, r1
 80196f8:	4630      	mov	r0, r6
 80196fa:	4639      	mov	r1, r7
 80196fc:	f7e7 f8ae 	bl	800085c <__aeabi_ddiv>
 8019700:	f04f 0a00 	mov.w	sl, #0
 8019704:	4604      	mov	r4, r0
 8019706:	460d      	mov	r5, r1
 8019708:	4622      	mov	r2, r4
 801970a:	462b      	mov	r3, r5
 801970c:	4620      	mov	r0, r4
 801970e:	4629      	mov	r1, r5
 8019710:	f7e6 ff7a 	bl	8000608 <__aeabi_dmul>
 8019714:	4602      	mov	r2, r0
 8019716:	460b      	mov	r3, r1
 8019718:	4680      	mov	r8, r0
 801971a:	4689      	mov	r9, r1
 801971c:	f7e6 ff74 	bl	8000608 <__aeabi_dmul>
 8019720:	a371      	add	r3, pc, #452	@ (adr r3, 80198e8 <atan+0x2a8>)
 8019722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019726:	4606      	mov	r6, r0
 8019728:	460f      	mov	r7, r1
 801972a:	f7e6 ff6d 	bl	8000608 <__aeabi_dmul>
 801972e:	a370      	add	r3, pc, #448	@ (adr r3, 80198f0 <atan+0x2b0>)
 8019730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019734:	f7e6 fdb2 	bl	800029c <__adddf3>
 8019738:	4632      	mov	r2, r6
 801973a:	463b      	mov	r3, r7
 801973c:	f7e6 ff64 	bl	8000608 <__aeabi_dmul>
 8019740:	a36d      	add	r3, pc, #436	@ (adr r3, 80198f8 <atan+0x2b8>)
 8019742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019746:	f7e6 fda9 	bl	800029c <__adddf3>
 801974a:	4632      	mov	r2, r6
 801974c:	463b      	mov	r3, r7
 801974e:	f7e6 ff5b 	bl	8000608 <__aeabi_dmul>
 8019752:	a36b      	add	r3, pc, #428	@ (adr r3, 8019900 <atan+0x2c0>)
 8019754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019758:	f7e6 fda0 	bl	800029c <__adddf3>
 801975c:	4632      	mov	r2, r6
 801975e:	463b      	mov	r3, r7
 8019760:	f7e6 ff52 	bl	8000608 <__aeabi_dmul>
 8019764:	a368      	add	r3, pc, #416	@ (adr r3, 8019908 <atan+0x2c8>)
 8019766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801976a:	f7e6 fd97 	bl	800029c <__adddf3>
 801976e:	4632      	mov	r2, r6
 8019770:	463b      	mov	r3, r7
 8019772:	f7e6 ff49 	bl	8000608 <__aeabi_dmul>
 8019776:	a366      	add	r3, pc, #408	@ (adr r3, 8019910 <atan+0x2d0>)
 8019778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801977c:	f7e6 fd8e 	bl	800029c <__adddf3>
 8019780:	4642      	mov	r2, r8
 8019782:	464b      	mov	r3, r9
 8019784:	f7e6 ff40 	bl	8000608 <__aeabi_dmul>
 8019788:	a363      	add	r3, pc, #396	@ (adr r3, 8019918 <atan+0x2d8>)
 801978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801978e:	4680      	mov	r8, r0
 8019790:	4689      	mov	r9, r1
 8019792:	4630      	mov	r0, r6
 8019794:	4639      	mov	r1, r7
 8019796:	f7e6 ff37 	bl	8000608 <__aeabi_dmul>
 801979a:	a361      	add	r3, pc, #388	@ (adr r3, 8019920 <atan+0x2e0>)
 801979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197a0:	f7e6 fd7a 	bl	8000298 <__aeabi_dsub>
 80197a4:	4632      	mov	r2, r6
 80197a6:	463b      	mov	r3, r7
 80197a8:	f7e6 ff2e 	bl	8000608 <__aeabi_dmul>
 80197ac:	a35e      	add	r3, pc, #376	@ (adr r3, 8019928 <atan+0x2e8>)
 80197ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197b2:	f7e6 fd71 	bl	8000298 <__aeabi_dsub>
 80197b6:	4632      	mov	r2, r6
 80197b8:	463b      	mov	r3, r7
 80197ba:	f7e6 ff25 	bl	8000608 <__aeabi_dmul>
 80197be:	a35c      	add	r3, pc, #368	@ (adr r3, 8019930 <atan+0x2f0>)
 80197c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c4:	f7e6 fd68 	bl	8000298 <__aeabi_dsub>
 80197c8:	4632      	mov	r2, r6
 80197ca:	463b      	mov	r3, r7
 80197cc:	f7e6 ff1c 	bl	8000608 <__aeabi_dmul>
 80197d0:	a359      	add	r3, pc, #356	@ (adr r3, 8019938 <atan+0x2f8>)
 80197d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197d6:	f7e6 fd5f 	bl	8000298 <__aeabi_dsub>
 80197da:	4632      	mov	r2, r6
 80197dc:	463b      	mov	r3, r7
 80197de:	f7e6 ff13 	bl	8000608 <__aeabi_dmul>
 80197e2:	4602      	mov	r2, r0
 80197e4:	460b      	mov	r3, r1
 80197e6:	4640      	mov	r0, r8
 80197e8:	4649      	mov	r1, r9
 80197ea:	f7e6 fd57 	bl	800029c <__adddf3>
 80197ee:	4622      	mov	r2, r4
 80197f0:	462b      	mov	r3, r5
 80197f2:	f7e6 ff09 	bl	8000608 <__aeabi_dmul>
 80197f6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80197fa:	4602      	mov	r2, r0
 80197fc:	460b      	mov	r3, r1
 80197fe:	d148      	bne.n	8019892 <atan+0x252>
 8019800:	4620      	mov	r0, r4
 8019802:	4629      	mov	r1, r5
 8019804:	f7e6 fd48 	bl	8000298 <__aeabi_dsub>
 8019808:	e72f      	b.n	801966a <atan+0x2a>
 801980a:	4b52      	ldr	r3, [pc, #328]	@ (8019954 <atan+0x314>)
 801980c:	2200      	movs	r2, #0
 801980e:	4620      	mov	r0, r4
 8019810:	4629      	mov	r1, r5
 8019812:	f7e6 fd41 	bl	8000298 <__aeabi_dsub>
 8019816:	4b4f      	ldr	r3, [pc, #316]	@ (8019954 <atan+0x314>)
 8019818:	4606      	mov	r6, r0
 801981a:	460f      	mov	r7, r1
 801981c:	2200      	movs	r2, #0
 801981e:	4620      	mov	r0, r4
 8019820:	4629      	mov	r1, r5
 8019822:	f7e6 fd3b 	bl	800029c <__adddf3>
 8019826:	4602      	mov	r2, r0
 8019828:	460b      	mov	r3, r1
 801982a:	4630      	mov	r0, r6
 801982c:	4639      	mov	r1, r7
 801982e:	f7e7 f815 	bl	800085c <__aeabi_ddiv>
 8019832:	f04f 0a01 	mov.w	sl, #1
 8019836:	4604      	mov	r4, r0
 8019838:	460d      	mov	r5, r1
 801983a:	e765      	b.n	8019708 <atan+0xc8>
 801983c:	4b47      	ldr	r3, [pc, #284]	@ (801995c <atan+0x31c>)
 801983e:	429e      	cmp	r6, r3
 8019840:	d21c      	bcs.n	801987c <atan+0x23c>
 8019842:	4b47      	ldr	r3, [pc, #284]	@ (8019960 <atan+0x320>)
 8019844:	2200      	movs	r2, #0
 8019846:	4620      	mov	r0, r4
 8019848:	4629      	mov	r1, r5
 801984a:	f7e6 fd25 	bl	8000298 <__aeabi_dsub>
 801984e:	4b44      	ldr	r3, [pc, #272]	@ (8019960 <atan+0x320>)
 8019850:	4606      	mov	r6, r0
 8019852:	460f      	mov	r7, r1
 8019854:	2200      	movs	r2, #0
 8019856:	4620      	mov	r0, r4
 8019858:	4629      	mov	r1, r5
 801985a:	f7e6 fed5 	bl	8000608 <__aeabi_dmul>
 801985e:	4b3d      	ldr	r3, [pc, #244]	@ (8019954 <atan+0x314>)
 8019860:	2200      	movs	r2, #0
 8019862:	f7e6 fd1b 	bl	800029c <__adddf3>
 8019866:	4602      	mov	r2, r0
 8019868:	460b      	mov	r3, r1
 801986a:	4630      	mov	r0, r6
 801986c:	4639      	mov	r1, r7
 801986e:	f7e6 fff5 	bl	800085c <__aeabi_ddiv>
 8019872:	f04f 0a02 	mov.w	sl, #2
 8019876:	4604      	mov	r4, r0
 8019878:	460d      	mov	r5, r1
 801987a:	e745      	b.n	8019708 <atan+0xc8>
 801987c:	4622      	mov	r2, r4
 801987e:	462b      	mov	r3, r5
 8019880:	4938      	ldr	r1, [pc, #224]	@ (8019964 <atan+0x324>)
 8019882:	2000      	movs	r0, #0
 8019884:	f7e6 ffea 	bl	800085c <__aeabi_ddiv>
 8019888:	f04f 0a03 	mov.w	sl, #3
 801988c:	4604      	mov	r4, r0
 801988e:	460d      	mov	r5, r1
 8019890:	e73a      	b.n	8019708 <atan+0xc8>
 8019892:	4b35      	ldr	r3, [pc, #212]	@ (8019968 <atan+0x328>)
 8019894:	4e35      	ldr	r6, [pc, #212]	@ (801996c <atan+0x32c>)
 8019896:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801989e:	f7e6 fcfb 	bl	8000298 <__aeabi_dsub>
 80198a2:	4622      	mov	r2, r4
 80198a4:	462b      	mov	r3, r5
 80198a6:	f7e6 fcf7 	bl	8000298 <__aeabi_dsub>
 80198aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80198ae:	4602      	mov	r2, r0
 80198b0:	460b      	mov	r3, r1
 80198b2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80198b6:	f7e6 fcef 	bl	8000298 <__aeabi_dsub>
 80198ba:	f1bb 0f00 	cmp.w	fp, #0
 80198be:	4604      	mov	r4, r0
 80198c0:	460d      	mov	r5, r1
 80198c2:	f6bf aedc 	bge.w	801967e <atan+0x3e>
 80198c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80198ca:	461d      	mov	r5, r3
 80198cc:	e6d7      	b.n	801967e <atan+0x3e>
 80198ce:	a51c      	add	r5, pc, #112	@ (adr r5, 8019940 <atan+0x300>)
 80198d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80198d4:	e6d3      	b.n	801967e <atan+0x3e>
 80198d6:	bf00      	nop
 80198d8:	54442d18 	.word	0x54442d18
 80198dc:	3ff921fb 	.word	0x3ff921fb
 80198e0:	8800759c 	.word	0x8800759c
 80198e4:	7e37e43c 	.word	0x7e37e43c
 80198e8:	e322da11 	.word	0xe322da11
 80198ec:	3f90ad3a 	.word	0x3f90ad3a
 80198f0:	24760deb 	.word	0x24760deb
 80198f4:	3fa97b4b 	.word	0x3fa97b4b
 80198f8:	a0d03d51 	.word	0xa0d03d51
 80198fc:	3fb10d66 	.word	0x3fb10d66
 8019900:	c54c206e 	.word	0xc54c206e
 8019904:	3fb745cd 	.word	0x3fb745cd
 8019908:	920083ff 	.word	0x920083ff
 801990c:	3fc24924 	.word	0x3fc24924
 8019910:	5555550d 	.word	0x5555550d
 8019914:	3fd55555 	.word	0x3fd55555
 8019918:	2c6a6c2f 	.word	0x2c6a6c2f
 801991c:	bfa2b444 	.word	0xbfa2b444
 8019920:	52defd9a 	.word	0x52defd9a
 8019924:	3fadde2d 	.word	0x3fadde2d
 8019928:	af749a6d 	.word	0xaf749a6d
 801992c:	3fb3b0f2 	.word	0x3fb3b0f2
 8019930:	fe231671 	.word	0xfe231671
 8019934:	3fbc71c6 	.word	0x3fbc71c6
 8019938:	9998ebc4 	.word	0x9998ebc4
 801993c:	3fc99999 	.word	0x3fc99999
 8019940:	54442d18 	.word	0x54442d18
 8019944:	bff921fb 	.word	0xbff921fb
 8019948:	440fffff 	.word	0x440fffff
 801994c:	7ff00000 	.word	0x7ff00000
 8019950:	3fdbffff 	.word	0x3fdbffff
 8019954:	3ff00000 	.word	0x3ff00000
 8019958:	3ff2ffff 	.word	0x3ff2ffff
 801995c:	40038000 	.word	0x40038000
 8019960:	3ff80000 	.word	0x3ff80000
 8019964:	bff00000 	.word	0xbff00000
 8019968:	0802f488 	.word	0x0802f488
 801996c:	0802f4a8 	.word	0x0802f4a8

08019970 <cos>:
 8019970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019972:	ec53 2b10 	vmov	r2, r3, d0
 8019976:	4826      	ldr	r0, [pc, #152]	@ (8019a10 <cos+0xa0>)
 8019978:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801997c:	4281      	cmp	r1, r0
 801997e:	d806      	bhi.n	801998e <cos+0x1e>
 8019980:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8019a08 <cos+0x98>
 8019984:	b005      	add	sp, #20
 8019986:	f85d eb04 	ldr.w	lr, [sp], #4
 801998a:	f000 b9c9 	b.w	8019d20 <__kernel_cos>
 801998e:	4821      	ldr	r0, [pc, #132]	@ (8019a14 <cos+0xa4>)
 8019990:	4281      	cmp	r1, r0
 8019992:	d908      	bls.n	80199a6 <cos+0x36>
 8019994:	4610      	mov	r0, r2
 8019996:	4619      	mov	r1, r3
 8019998:	f7e6 fc7e 	bl	8000298 <__aeabi_dsub>
 801999c:	ec41 0b10 	vmov	d0, r0, r1
 80199a0:	b005      	add	sp, #20
 80199a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80199a6:	4668      	mov	r0, sp
 80199a8:	f001 f882 	bl	801aab0 <__ieee754_rem_pio2>
 80199ac:	f000 0003 	and.w	r0, r0, #3
 80199b0:	2801      	cmp	r0, #1
 80199b2:	d00b      	beq.n	80199cc <cos+0x5c>
 80199b4:	2802      	cmp	r0, #2
 80199b6:	d015      	beq.n	80199e4 <cos+0x74>
 80199b8:	b9d8      	cbnz	r0, 80199f2 <cos+0x82>
 80199ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80199be:	ed9d 0b00 	vldr	d0, [sp]
 80199c2:	f000 f9ad 	bl	8019d20 <__kernel_cos>
 80199c6:	ec51 0b10 	vmov	r0, r1, d0
 80199ca:	e7e7      	b.n	801999c <cos+0x2c>
 80199cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80199d0:	ed9d 0b00 	vldr	d0, [sp]
 80199d4:	f000 fa6c 	bl	8019eb0 <__kernel_sin>
 80199d8:	ec53 2b10 	vmov	r2, r3, d0
 80199dc:	4610      	mov	r0, r2
 80199de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80199e2:	e7db      	b.n	801999c <cos+0x2c>
 80199e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80199e8:	ed9d 0b00 	vldr	d0, [sp]
 80199ec:	f000 f998 	bl	8019d20 <__kernel_cos>
 80199f0:	e7f2      	b.n	80199d8 <cos+0x68>
 80199f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80199f6:	ed9d 0b00 	vldr	d0, [sp]
 80199fa:	2001      	movs	r0, #1
 80199fc:	f000 fa58 	bl	8019eb0 <__kernel_sin>
 8019a00:	e7e1      	b.n	80199c6 <cos+0x56>
 8019a02:	bf00      	nop
 8019a04:	f3af 8000 	nop.w
	...
 8019a10:	3fe921fb 	.word	0x3fe921fb
 8019a14:	7fefffff 	.word	0x7fefffff

08019a18 <fabs>:
 8019a18:	ec51 0b10 	vmov	r0, r1, d0
 8019a1c:	4602      	mov	r2, r0
 8019a1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019a22:	ec43 2b10 	vmov	d0, r2, r3
 8019a26:	4770      	bx	lr

08019a28 <sin>:
 8019a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019a2a:	ec53 2b10 	vmov	r2, r3, d0
 8019a2e:	4826      	ldr	r0, [pc, #152]	@ (8019ac8 <sin+0xa0>)
 8019a30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019a34:	4281      	cmp	r1, r0
 8019a36:	d807      	bhi.n	8019a48 <sin+0x20>
 8019a38:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8019ac0 <sin+0x98>
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	b005      	add	sp, #20
 8019a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a44:	f000 ba34 	b.w	8019eb0 <__kernel_sin>
 8019a48:	4820      	ldr	r0, [pc, #128]	@ (8019acc <sin+0xa4>)
 8019a4a:	4281      	cmp	r1, r0
 8019a4c:	d908      	bls.n	8019a60 <sin+0x38>
 8019a4e:	4610      	mov	r0, r2
 8019a50:	4619      	mov	r1, r3
 8019a52:	f7e6 fc21 	bl	8000298 <__aeabi_dsub>
 8019a56:	ec41 0b10 	vmov	d0, r0, r1
 8019a5a:	b005      	add	sp, #20
 8019a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a60:	4668      	mov	r0, sp
 8019a62:	f001 f825 	bl	801aab0 <__ieee754_rem_pio2>
 8019a66:	f000 0003 	and.w	r0, r0, #3
 8019a6a:	2801      	cmp	r0, #1
 8019a6c:	d00c      	beq.n	8019a88 <sin+0x60>
 8019a6e:	2802      	cmp	r0, #2
 8019a70:	d011      	beq.n	8019a96 <sin+0x6e>
 8019a72:	b9e8      	cbnz	r0, 8019ab0 <sin+0x88>
 8019a74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a78:	ed9d 0b00 	vldr	d0, [sp]
 8019a7c:	2001      	movs	r0, #1
 8019a7e:	f000 fa17 	bl	8019eb0 <__kernel_sin>
 8019a82:	ec51 0b10 	vmov	r0, r1, d0
 8019a86:	e7e6      	b.n	8019a56 <sin+0x2e>
 8019a88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a8c:	ed9d 0b00 	vldr	d0, [sp]
 8019a90:	f000 f946 	bl	8019d20 <__kernel_cos>
 8019a94:	e7f5      	b.n	8019a82 <sin+0x5a>
 8019a96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a9a:	ed9d 0b00 	vldr	d0, [sp]
 8019a9e:	2001      	movs	r0, #1
 8019aa0:	f000 fa06 	bl	8019eb0 <__kernel_sin>
 8019aa4:	ec53 2b10 	vmov	r2, r3, d0
 8019aa8:	4610      	mov	r0, r2
 8019aaa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8019aae:	e7d2      	b.n	8019a56 <sin+0x2e>
 8019ab0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ab4:	ed9d 0b00 	vldr	d0, [sp]
 8019ab8:	f000 f932 	bl	8019d20 <__kernel_cos>
 8019abc:	e7f2      	b.n	8019aa4 <sin+0x7c>
 8019abe:	bf00      	nop
	...
 8019ac8:	3fe921fb 	.word	0x3fe921fb
 8019acc:	7fefffff 	.word	0x7fefffff

08019ad0 <fmodf>:
 8019ad0:	b508      	push	{r3, lr}
 8019ad2:	ed2d 8b02 	vpush	{d8}
 8019ad6:	eef0 8a40 	vmov.f32	s17, s0
 8019ada:	eeb0 8a60 	vmov.f32	s16, s1
 8019ade:	f001 f9e3 	bl	801aea8 <__ieee754_fmodf>
 8019ae2:	eef4 8a48 	vcmp.f32	s17, s16
 8019ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aea:	d60c      	bvs.n	8019b06 <fmodf+0x36>
 8019aec:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8019b0c <fmodf+0x3c>
 8019af0:	eeb4 8a68 	vcmp.f32	s16, s17
 8019af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019af8:	d105      	bne.n	8019b06 <fmodf+0x36>
 8019afa:	f7fc fa11 	bl	8015f20 <__errno>
 8019afe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019b02:	2321      	movs	r3, #33	@ 0x21
 8019b04:	6003      	str	r3, [r0, #0]
 8019b06:	ecbd 8b02 	vpop	{d8}
 8019b0a:	bd08      	pop	{r3, pc}
 8019b0c:	00000000 	.word	0x00000000

08019b10 <sqrtf>:
 8019b10:	b508      	push	{r3, lr}
 8019b12:	ed2d 8b02 	vpush	{d8}
 8019b16:	eeb0 8a40 	vmov.f32	s16, s0
 8019b1a:	f000 f8fd 	bl	8019d18 <__ieee754_sqrtf>
 8019b1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b26:	d60c      	bvs.n	8019b42 <sqrtf+0x32>
 8019b28:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8019b48 <sqrtf+0x38>
 8019b2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b34:	d505      	bpl.n	8019b42 <sqrtf+0x32>
 8019b36:	f7fc f9f3 	bl	8015f20 <__errno>
 8019b3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019b3e:	2321      	movs	r3, #33	@ 0x21
 8019b40:	6003      	str	r3, [r0, #0]
 8019b42:	ecbd 8b02 	vpop	{d8}
 8019b46:	bd08      	pop	{r3, pc}
 8019b48:	00000000 	.word	0x00000000

08019b4c <finite>:
 8019b4c:	b082      	sub	sp, #8
 8019b4e:	ed8d 0b00 	vstr	d0, [sp]
 8019b52:	9801      	ldr	r0, [sp, #4]
 8019b54:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8019b58:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8019b5c:	0fc0      	lsrs	r0, r0, #31
 8019b5e:	b002      	add	sp, #8
 8019b60:	4770      	bx	lr
	...

08019b64 <__ieee754_sqrt>:
 8019b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b68:	4a68      	ldr	r2, [pc, #416]	@ (8019d0c <__ieee754_sqrt+0x1a8>)
 8019b6a:	ec55 4b10 	vmov	r4, r5, d0
 8019b6e:	43aa      	bics	r2, r5
 8019b70:	462b      	mov	r3, r5
 8019b72:	4621      	mov	r1, r4
 8019b74:	d110      	bne.n	8019b98 <__ieee754_sqrt+0x34>
 8019b76:	4622      	mov	r2, r4
 8019b78:	4620      	mov	r0, r4
 8019b7a:	4629      	mov	r1, r5
 8019b7c:	f7e6 fd44 	bl	8000608 <__aeabi_dmul>
 8019b80:	4602      	mov	r2, r0
 8019b82:	460b      	mov	r3, r1
 8019b84:	4620      	mov	r0, r4
 8019b86:	4629      	mov	r1, r5
 8019b88:	f7e6 fb88 	bl	800029c <__adddf3>
 8019b8c:	4604      	mov	r4, r0
 8019b8e:	460d      	mov	r5, r1
 8019b90:	ec45 4b10 	vmov	d0, r4, r5
 8019b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b98:	2d00      	cmp	r5, #0
 8019b9a:	dc0e      	bgt.n	8019bba <__ieee754_sqrt+0x56>
 8019b9c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8019ba0:	4322      	orrs	r2, r4
 8019ba2:	d0f5      	beq.n	8019b90 <__ieee754_sqrt+0x2c>
 8019ba4:	b19d      	cbz	r5, 8019bce <__ieee754_sqrt+0x6a>
 8019ba6:	4622      	mov	r2, r4
 8019ba8:	4620      	mov	r0, r4
 8019baa:	4629      	mov	r1, r5
 8019bac:	f7e6 fb74 	bl	8000298 <__aeabi_dsub>
 8019bb0:	4602      	mov	r2, r0
 8019bb2:	460b      	mov	r3, r1
 8019bb4:	f7e6 fe52 	bl	800085c <__aeabi_ddiv>
 8019bb8:	e7e8      	b.n	8019b8c <__ieee754_sqrt+0x28>
 8019bba:	152a      	asrs	r2, r5, #20
 8019bbc:	d115      	bne.n	8019bea <__ieee754_sqrt+0x86>
 8019bbe:	2000      	movs	r0, #0
 8019bc0:	e009      	b.n	8019bd6 <__ieee754_sqrt+0x72>
 8019bc2:	0acb      	lsrs	r3, r1, #11
 8019bc4:	3a15      	subs	r2, #21
 8019bc6:	0549      	lsls	r1, r1, #21
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d0fa      	beq.n	8019bc2 <__ieee754_sqrt+0x5e>
 8019bcc:	e7f7      	b.n	8019bbe <__ieee754_sqrt+0x5a>
 8019bce:	462a      	mov	r2, r5
 8019bd0:	e7fa      	b.n	8019bc8 <__ieee754_sqrt+0x64>
 8019bd2:	005b      	lsls	r3, r3, #1
 8019bd4:	3001      	adds	r0, #1
 8019bd6:	02dc      	lsls	r4, r3, #11
 8019bd8:	d5fb      	bpl.n	8019bd2 <__ieee754_sqrt+0x6e>
 8019bda:	1e44      	subs	r4, r0, #1
 8019bdc:	1b12      	subs	r2, r2, r4
 8019bde:	f1c0 0420 	rsb	r4, r0, #32
 8019be2:	fa21 f404 	lsr.w	r4, r1, r4
 8019be6:	4323      	orrs	r3, r4
 8019be8:	4081      	lsls	r1, r0
 8019bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019bee:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8019bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019bf6:	07d2      	lsls	r2, r2, #31
 8019bf8:	bf5c      	itt	pl
 8019bfa:	005b      	lslpl	r3, r3, #1
 8019bfc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8019c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019c04:	bf58      	it	pl
 8019c06:	0049      	lslpl	r1, r1, #1
 8019c08:	2600      	movs	r6, #0
 8019c0a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8019c0e:	106d      	asrs	r5, r5, #1
 8019c10:	0049      	lsls	r1, r1, #1
 8019c12:	2016      	movs	r0, #22
 8019c14:	4632      	mov	r2, r6
 8019c16:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8019c1a:	1917      	adds	r7, r2, r4
 8019c1c:	429f      	cmp	r7, r3
 8019c1e:	bfde      	ittt	le
 8019c20:	193a      	addle	r2, r7, r4
 8019c22:	1bdb      	suble	r3, r3, r7
 8019c24:	1936      	addle	r6, r6, r4
 8019c26:	0fcf      	lsrs	r7, r1, #31
 8019c28:	3801      	subs	r0, #1
 8019c2a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019c2e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019c32:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019c36:	d1f0      	bne.n	8019c1a <__ieee754_sqrt+0xb6>
 8019c38:	4604      	mov	r4, r0
 8019c3a:	2720      	movs	r7, #32
 8019c3c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8019c40:	429a      	cmp	r2, r3
 8019c42:	eb00 0e0c 	add.w	lr, r0, ip
 8019c46:	db02      	blt.n	8019c4e <__ieee754_sqrt+0xea>
 8019c48:	d113      	bne.n	8019c72 <__ieee754_sqrt+0x10e>
 8019c4a:	458e      	cmp	lr, r1
 8019c4c:	d811      	bhi.n	8019c72 <__ieee754_sqrt+0x10e>
 8019c4e:	f1be 0f00 	cmp.w	lr, #0
 8019c52:	eb0e 000c 	add.w	r0, lr, ip
 8019c56:	da42      	bge.n	8019cde <__ieee754_sqrt+0x17a>
 8019c58:	2800      	cmp	r0, #0
 8019c5a:	db40      	blt.n	8019cde <__ieee754_sqrt+0x17a>
 8019c5c:	f102 0801 	add.w	r8, r2, #1
 8019c60:	1a9b      	subs	r3, r3, r2
 8019c62:	458e      	cmp	lr, r1
 8019c64:	bf88      	it	hi
 8019c66:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8019c6a:	eba1 010e 	sub.w	r1, r1, lr
 8019c6e:	4464      	add	r4, ip
 8019c70:	4642      	mov	r2, r8
 8019c72:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8019c76:	3f01      	subs	r7, #1
 8019c78:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8019c7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019c80:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8019c84:	d1dc      	bne.n	8019c40 <__ieee754_sqrt+0xdc>
 8019c86:	4319      	orrs	r1, r3
 8019c88:	d01b      	beq.n	8019cc2 <__ieee754_sqrt+0x15e>
 8019c8a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8019d10 <__ieee754_sqrt+0x1ac>
 8019c8e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8019d14 <__ieee754_sqrt+0x1b0>
 8019c92:	e9da 0100 	ldrd	r0, r1, [sl]
 8019c96:	e9db 2300 	ldrd	r2, r3, [fp]
 8019c9a:	f7e6 fafd 	bl	8000298 <__aeabi_dsub>
 8019c9e:	e9da 8900 	ldrd	r8, r9, [sl]
 8019ca2:	4602      	mov	r2, r0
 8019ca4:	460b      	mov	r3, r1
 8019ca6:	4640      	mov	r0, r8
 8019ca8:	4649      	mov	r1, r9
 8019caa:	f7e6 ff29 	bl	8000b00 <__aeabi_dcmple>
 8019cae:	b140      	cbz	r0, 8019cc2 <__ieee754_sqrt+0x15e>
 8019cb0:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8019cb4:	e9da 0100 	ldrd	r0, r1, [sl]
 8019cb8:	e9db 2300 	ldrd	r2, r3, [fp]
 8019cbc:	d111      	bne.n	8019ce2 <__ieee754_sqrt+0x17e>
 8019cbe:	3601      	adds	r6, #1
 8019cc0:	463c      	mov	r4, r7
 8019cc2:	1072      	asrs	r2, r6, #1
 8019cc4:	0863      	lsrs	r3, r4, #1
 8019cc6:	07f1      	lsls	r1, r6, #31
 8019cc8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8019ccc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8019cd0:	bf48      	it	mi
 8019cd2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8019cd6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8019cda:	4618      	mov	r0, r3
 8019cdc:	e756      	b.n	8019b8c <__ieee754_sqrt+0x28>
 8019cde:	4690      	mov	r8, r2
 8019ce0:	e7be      	b.n	8019c60 <__ieee754_sqrt+0xfc>
 8019ce2:	f7e6 fadb 	bl	800029c <__adddf3>
 8019ce6:	e9da 8900 	ldrd	r8, r9, [sl]
 8019cea:	4602      	mov	r2, r0
 8019cec:	460b      	mov	r3, r1
 8019cee:	4640      	mov	r0, r8
 8019cf0:	4649      	mov	r1, r9
 8019cf2:	f7e6 fefb 	bl	8000aec <__aeabi_dcmplt>
 8019cf6:	b120      	cbz	r0, 8019d02 <__ieee754_sqrt+0x19e>
 8019cf8:	1ca0      	adds	r0, r4, #2
 8019cfa:	bf08      	it	eq
 8019cfc:	3601      	addeq	r6, #1
 8019cfe:	3402      	adds	r4, #2
 8019d00:	e7df      	b.n	8019cc2 <__ieee754_sqrt+0x15e>
 8019d02:	1c63      	adds	r3, r4, #1
 8019d04:	f023 0401 	bic.w	r4, r3, #1
 8019d08:	e7db      	b.n	8019cc2 <__ieee754_sqrt+0x15e>
 8019d0a:	bf00      	nop
 8019d0c:	7ff00000 	.word	0x7ff00000
 8019d10:	20000308 	.word	0x20000308
 8019d14:	20000300 	.word	0x20000300

08019d18 <__ieee754_sqrtf>:
 8019d18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019d1c:	4770      	bx	lr
	...

08019d20 <__kernel_cos>:
 8019d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d24:	ec57 6b10 	vmov	r6, r7, d0
 8019d28:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8019d2c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8019d30:	ed8d 1b00 	vstr	d1, [sp]
 8019d34:	d206      	bcs.n	8019d44 <__kernel_cos+0x24>
 8019d36:	4630      	mov	r0, r6
 8019d38:	4639      	mov	r1, r7
 8019d3a:	f7e6 ff15 	bl	8000b68 <__aeabi_d2iz>
 8019d3e:	2800      	cmp	r0, #0
 8019d40:	f000 8088 	beq.w	8019e54 <__kernel_cos+0x134>
 8019d44:	4632      	mov	r2, r6
 8019d46:	463b      	mov	r3, r7
 8019d48:	4630      	mov	r0, r6
 8019d4a:	4639      	mov	r1, r7
 8019d4c:	f7e6 fc5c 	bl	8000608 <__aeabi_dmul>
 8019d50:	4b51      	ldr	r3, [pc, #324]	@ (8019e98 <__kernel_cos+0x178>)
 8019d52:	2200      	movs	r2, #0
 8019d54:	4604      	mov	r4, r0
 8019d56:	460d      	mov	r5, r1
 8019d58:	f7e6 fc56 	bl	8000608 <__aeabi_dmul>
 8019d5c:	a340      	add	r3, pc, #256	@ (adr r3, 8019e60 <__kernel_cos+0x140>)
 8019d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d62:	4682      	mov	sl, r0
 8019d64:	468b      	mov	fp, r1
 8019d66:	4620      	mov	r0, r4
 8019d68:	4629      	mov	r1, r5
 8019d6a:	f7e6 fc4d 	bl	8000608 <__aeabi_dmul>
 8019d6e:	a33e      	add	r3, pc, #248	@ (adr r3, 8019e68 <__kernel_cos+0x148>)
 8019d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d74:	f7e6 fa92 	bl	800029c <__adddf3>
 8019d78:	4622      	mov	r2, r4
 8019d7a:	462b      	mov	r3, r5
 8019d7c:	f7e6 fc44 	bl	8000608 <__aeabi_dmul>
 8019d80:	a33b      	add	r3, pc, #236	@ (adr r3, 8019e70 <__kernel_cos+0x150>)
 8019d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d86:	f7e6 fa87 	bl	8000298 <__aeabi_dsub>
 8019d8a:	4622      	mov	r2, r4
 8019d8c:	462b      	mov	r3, r5
 8019d8e:	f7e6 fc3b 	bl	8000608 <__aeabi_dmul>
 8019d92:	a339      	add	r3, pc, #228	@ (adr r3, 8019e78 <__kernel_cos+0x158>)
 8019d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d98:	f7e6 fa80 	bl	800029c <__adddf3>
 8019d9c:	4622      	mov	r2, r4
 8019d9e:	462b      	mov	r3, r5
 8019da0:	f7e6 fc32 	bl	8000608 <__aeabi_dmul>
 8019da4:	a336      	add	r3, pc, #216	@ (adr r3, 8019e80 <__kernel_cos+0x160>)
 8019da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019daa:	f7e6 fa75 	bl	8000298 <__aeabi_dsub>
 8019dae:	4622      	mov	r2, r4
 8019db0:	462b      	mov	r3, r5
 8019db2:	f7e6 fc29 	bl	8000608 <__aeabi_dmul>
 8019db6:	a334      	add	r3, pc, #208	@ (adr r3, 8019e88 <__kernel_cos+0x168>)
 8019db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dbc:	f7e6 fa6e 	bl	800029c <__adddf3>
 8019dc0:	4622      	mov	r2, r4
 8019dc2:	462b      	mov	r3, r5
 8019dc4:	f7e6 fc20 	bl	8000608 <__aeabi_dmul>
 8019dc8:	4622      	mov	r2, r4
 8019dca:	462b      	mov	r3, r5
 8019dcc:	f7e6 fc1c 	bl	8000608 <__aeabi_dmul>
 8019dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019dd4:	4604      	mov	r4, r0
 8019dd6:	460d      	mov	r5, r1
 8019dd8:	4630      	mov	r0, r6
 8019dda:	4639      	mov	r1, r7
 8019ddc:	f7e6 fc14 	bl	8000608 <__aeabi_dmul>
 8019de0:	460b      	mov	r3, r1
 8019de2:	4602      	mov	r2, r0
 8019de4:	4629      	mov	r1, r5
 8019de6:	4620      	mov	r0, r4
 8019de8:	f7e6 fa56 	bl	8000298 <__aeabi_dsub>
 8019dec:	4b2b      	ldr	r3, [pc, #172]	@ (8019e9c <__kernel_cos+0x17c>)
 8019dee:	4598      	cmp	r8, r3
 8019df0:	4606      	mov	r6, r0
 8019df2:	460f      	mov	r7, r1
 8019df4:	d810      	bhi.n	8019e18 <__kernel_cos+0xf8>
 8019df6:	4602      	mov	r2, r0
 8019df8:	460b      	mov	r3, r1
 8019dfa:	4650      	mov	r0, sl
 8019dfc:	4659      	mov	r1, fp
 8019dfe:	f7e6 fa4b 	bl	8000298 <__aeabi_dsub>
 8019e02:	460b      	mov	r3, r1
 8019e04:	4926      	ldr	r1, [pc, #152]	@ (8019ea0 <__kernel_cos+0x180>)
 8019e06:	4602      	mov	r2, r0
 8019e08:	2000      	movs	r0, #0
 8019e0a:	f7e6 fa45 	bl	8000298 <__aeabi_dsub>
 8019e0e:	ec41 0b10 	vmov	d0, r0, r1
 8019e12:	b003      	add	sp, #12
 8019e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e18:	4b22      	ldr	r3, [pc, #136]	@ (8019ea4 <__kernel_cos+0x184>)
 8019e1a:	4921      	ldr	r1, [pc, #132]	@ (8019ea0 <__kernel_cos+0x180>)
 8019e1c:	4598      	cmp	r8, r3
 8019e1e:	bf8c      	ite	hi
 8019e20:	4d21      	ldrhi	r5, [pc, #132]	@ (8019ea8 <__kernel_cos+0x188>)
 8019e22:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8019e26:	2400      	movs	r4, #0
 8019e28:	4622      	mov	r2, r4
 8019e2a:	462b      	mov	r3, r5
 8019e2c:	2000      	movs	r0, #0
 8019e2e:	f7e6 fa33 	bl	8000298 <__aeabi_dsub>
 8019e32:	4622      	mov	r2, r4
 8019e34:	4680      	mov	r8, r0
 8019e36:	4689      	mov	r9, r1
 8019e38:	462b      	mov	r3, r5
 8019e3a:	4650      	mov	r0, sl
 8019e3c:	4659      	mov	r1, fp
 8019e3e:	f7e6 fa2b 	bl	8000298 <__aeabi_dsub>
 8019e42:	4632      	mov	r2, r6
 8019e44:	463b      	mov	r3, r7
 8019e46:	f7e6 fa27 	bl	8000298 <__aeabi_dsub>
 8019e4a:	4602      	mov	r2, r0
 8019e4c:	460b      	mov	r3, r1
 8019e4e:	4640      	mov	r0, r8
 8019e50:	4649      	mov	r1, r9
 8019e52:	e7da      	b.n	8019e0a <__kernel_cos+0xea>
 8019e54:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8019e90 <__kernel_cos+0x170>
 8019e58:	e7db      	b.n	8019e12 <__kernel_cos+0xf2>
 8019e5a:	bf00      	nop
 8019e5c:	f3af 8000 	nop.w
 8019e60:	be8838d4 	.word	0xbe8838d4
 8019e64:	bda8fae9 	.word	0xbda8fae9
 8019e68:	bdb4b1c4 	.word	0xbdb4b1c4
 8019e6c:	3e21ee9e 	.word	0x3e21ee9e
 8019e70:	809c52ad 	.word	0x809c52ad
 8019e74:	3e927e4f 	.word	0x3e927e4f
 8019e78:	19cb1590 	.word	0x19cb1590
 8019e7c:	3efa01a0 	.word	0x3efa01a0
 8019e80:	16c15177 	.word	0x16c15177
 8019e84:	3f56c16c 	.word	0x3f56c16c
 8019e88:	5555554c 	.word	0x5555554c
 8019e8c:	3fa55555 	.word	0x3fa55555
 8019e90:	00000000 	.word	0x00000000
 8019e94:	3ff00000 	.word	0x3ff00000
 8019e98:	3fe00000 	.word	0x3fe00000
 8019e9c:	3fd33332 	.word	0x3fd33332
 8019ea0:	3ff00000 	.word	0x3ff00000
 8019ea4:	3fe90000 	.word	0x3fe90000
 8019ea8:	3fd20000 	.word	0x3fd20000
 8019eac:	00000000 	.word	0x00000000

08019eb0 <__kernel_sin>:
 8019eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eb4:	ec55 4b10 	vmov	r4, r5, d0
 8019eb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8019ebc:	b085      	sub	sp, #20
 8019ebe:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8019ec2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8019ec6:	4680      	mov	r8, r0
 8019ec8:	d205      	bcs.n	8019ed6 <__kernel_sin+0x26>
 8019eca:	4620      	mov	r0, r4
 8019ecc:	4629      	mov	r1, r5
 8019ece:	f7e6 fe4b 	bl	8000b68 <__aeabi_d2iz>
 8019ed2:	2800      	cmp	r0, #0
 8019ed4:	d052      	beq.n	8019f7c <__kernel_sin+0xcc>
 8019ed6:	4622      	mov	r2, r4
 8019ed8:	462b      	mov	r3, r5
 8019eda:	4620      	mov	r0, r4
 8019edc:	4629      	mov	r1, r5
 8019ede:	f7e6 fb93 	bl	8000608 <__aeabi_dmul>
 8019ee2:	4682      	mov	sl, r0
 8019ee4:	468b      	mov	fp, r1
 8019ee6:	4602      	mov	r2, r0
 8019ee8:	460b      	mov	r3, r1
 8019eea:	4620      	mov	r0, r4
 8019eec:	4629      	mov	r1, r5
 8019eee:	f7e6 fb8b 	bl	8000608 <__aeabi_dmul>
 8019ef2:	a342      	add	r3, pc, #264	@ (adr r3, 8019ffc <__kernel_sin+0x14c>)
 8019ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8019efc:	4650      	mov	r0, sl
 8019efe:	4659      	mov	r1, fp
 8019f00:	f7e6 fb82 	bl	8000608 <__aeabi_dmul>
 8019f04:	a33f      	add	r3, pc, #252	@ (adr r3, 801a004 <__kernel_sin+0x154>)
 8019f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f0a:	f7e6 f9c5 	bl	8000298 <__aeabi_dsub>
 8019f0e:	4652      	mov	r2, sl
 8019f10:	465b      	mov	r3, fp
 8019f12:	f7e6 fb79 	bl	8000608 <__aeabi_dmul>
 8019f16:	a33d      	add	r3, pc, #244	@ (adr r3, 801a00c <__kernel_sin+0x15c>)
 8019f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f1c:	f7e6 f9be 	bl	800029c <__adddf3>
 8019f20:	4652      	mov	r2, sl
 8019f22:	465b      	mov	r3, fp
 8019f24:	f7e6 fb70 	bl	8000608 <__aeabi_dmul>
 8019f28:	a33a      	add	r3, pc, #232	@ (adr r3, 801a014 <__kernel_sin+0x164>)
 8019f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f2e:	f7e6 f9b3 	bl	8000298 <__aeabi_dsub>
 8019f32:	4652      	mov	r2, sl
 8019f34:	465b      	mov	r3, fp
 8019f36:	f7e6 fb67 	bl	8000608 <__aeabi_dmul>
 8019f3a:	a338      	add	r3, pc, #224	@ (adr r3, 801a01c <__kernel_sin+0x16c>)
 8019f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f40:	f7e6 f9ac 	bl	800029c <__adddf3>
 8019f44:	4606      	mov	r6, r0
 8019f46:	460f      	mov	r7, r1
 8019f48:	f1b8 0f00 	cmp.w	r8, #0
 8019f4c:	d11b      	bne.n	8019f86 <__kernel_sin+0xd6>
 8019f4e:	4602      	mov	r2, r0
 8019f50:	460b      	mov	r3, r1
 8019f52:	4650      	mov	r0, sl
 8019f54:	4659      	mov	r1, fp
 8019f56:	f7e6 fb57 	bl	8000608 <__aeabi_dmul>
 8019f5a:	a325      	add	r3, pc, #148	@ (adr r3, 8019ff0 <__kernel_sin+0x140>)
 8019f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f60:	f7e6 f99a 	bl	8000298 <__aeabi_dsub>
 8019f64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019f68:	f7e6 fb4e 	bl	8000608 <__aeabi_dmul>
 8019f6c:	4602      	mov	r2, r0
 8019f6e:	460b      	mov	r3, r1
 8019f70:	4620      	mov	r0, r4
 8019f72:	4629      	mov	r1, r5
 8019f74:	f7e6 f992 	bl	800029c <__adddf3>
 8019f78:	4604      	mov	r4, r0
 8019f7a:	460d      	mov	r5, r1
 8019f7c:	ec45 4b10 	vmov	d0, r4, r5
 8019f80:	b005      	add	sp, #20
 8019f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8019ff8 <__kernel_sin+0x148>)
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	f7e6 fb3b 	bl	8000608 <__aeabi_dmul>
 8019f92:	4632      	mov	r2, r6
 8019f94:	4680      	mov	r8, r0
 8019f96:	4689      	mov	r9, r1
 8019f98:	463b      	mov	r3, r7
 8019f9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019f9e:	f7e6 fb33 	bl	8000608 <__aeabi_dmul>
 8019fa2:	4602      	mov	r2, r0
 8019fa4:	460b      	mov	r3, r1
 8019fa6:	4640      	mov	r0, r8
 8019fa8:	4649      	mov	r1, r9
 8019faa:	f7e6 f975 	bl	8000298 <__aeabi_dsub>
 8019fae:	4652      	mov	r2, sl
 8019fb0:	465b      	mov	r3, fp
 8019fb2:	f7e6 fb29 	bl	8000608 <__aeabi_dmul>
 8019fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019fba:	f7e6 f96d 	bl	8000298 <__aeabi_dsub>
 8019fbe:	a30c      	add	r3, pc, #48	@ (adr r3, 8019ff0 <__kernel_sin+0x140>)
 8019fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fc4:	4606      	mov	r6, r0
 8019fc6:	460f      	mov	r7, r1
 8019fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019fcc:	f7e6 fb1c 	bl	8000608 <__aeabi_dmul>
 8019fd0:	4602      	mov	r2, r0
 8019fd2:	460b      	mov	r3, r1
 8019fd4:	4630      	mov	r0, r6
 8019fd6:	4639      	mov	r1, r7
 8019fd8:	f7e6 f960 	bl	800029c <__adddf3>
 8019fdc:	4602      	mov	r2, r0
 8019fde:	460b      	mov	r3, r1
 8019fe0:	4620      	mov	r0, r4
 8019fe2:	4629      	mov	r1, r5
 8019fe4:	f7e6 f958 	bl	8000298 <__aeabi_dsub>
 8019fe8:	e7c6      	b.n	8019f78 <__kernel_sin+0xc8>
 8019fea:	bf00      	nop
 8019fec:	f3af 8000 	nop.w
 8019ff0:	55555549 	.word	0x55555549
 8019ff4:	3fc55555 	.word	0x3fc55555
 8019ff8:	3fe00000 	.word	0x3fe00000
 8019ffc:	5acfd57c 	.word	0x5acfd57c
 801a000:	3de5d93a 	.word	0x3de5d93a
 801a004:	8a2b9ceb 	.word	0x8a2b9ceb
 801a008:	3e5ae5e6 	.word	0x3e5ae5e6
 801a00c:	57b1fe7d 	.word	0x57b1fe7d
 801a010:	3ec71de3 	.word	0x3ec71de3
 801a014:	19c161d5 	.word	0x19c161d5
 801a018:	3f2a01a0 	.word	0x3f2a01a0
 801a01c:	1110f8a6 	.word	0x1110f8a6
 801a020:	3f811111 	.word	0x3f811111
 801a024:	00000000 	.word	0x00000000

0801a028 <__ieee754_pow>:
 801a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a02c:	b091      	sub	sp, #68	@ 0x44
 801a02e:	ed8d 1b00 	vstr	d1, [sp]
 801a032:	e9dd 1900 	ldrd	r1, r9, [sp]
 801a036:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801a03a:	ea5a 0001 	orrs.w	r0, sl, r1
 801a03e:	ec57 6b10 	vmov	r6, r7, d0
 801a042:	d113      	bne.n	801a06c <__ieee754_pow+0x44>
 801a044:	19b3      	adds	r3, r6, r6
 801a046:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801a04a:	4152      	adcs	r2, r2
 801a04c:	4298      	cmp	r0, r3
 801a04e:	4b98      	ldr	r3, [pc, #608]	@ (801a2b0 <__ieee754_pow+0x288>)
 801a050:	4193      	sbcs	r3, r2
 801a052:	f080 84ea 	bcs.w	801aa2a <__ieee754_pow+0xa02>
 801a056:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a05a:	4630      	mov	r0, r6
 801a05c:	4639      	mov	r1, r7
 801a05e:	f7e6 f91d 	bl	800029c <__adddf3>
 801a062:	ec41 0b10 	vmov	d0, r0, r1
 801a066:	b011      	add	sp, #68	@ 0x44
 801a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a06c:	4a91      	ldr	r2, [pc, #580]	@ (801a2b4 <__ieee754_pow+0x28c>)
 801a06e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801a072:	4590      	cmp	r8, r2
 801a074:	463d      	mov	r5, r7
 801a076:	4633      	mov	r3, r6
 801a078:	d806      	bhi.n	801a088 <__ieee754_pow+0x60>
 801a07a:	d101      	bne.n	801a080 <__ieee754_pow+0x58>
 801a07c:	2e00      	cmp	r6, #0
 801a07e:	d1ea      	bne.n	801a056 <__ieee754_pow+0x2e>
 801a080:	4592      	cmp	sl, r2
 801a082:	d801      	bhi.n	801a088 <__ieee754_pow+0x60>
 801a084:	d10e      	bne.n	801a0a4 <__ieee754_pow+0x7c>
 801a086:	b169      	cbz	r1, 801a0a4 <__ieee754_pow+0x7c>
 801a088:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801a08c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801a090:	431d      	orrs	r5, r3
 801a092:	d1e0      	bne.n	801a056 <__ieee754_pow+0x2e>
 801a094:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a098:	18db      	adds	r3, r3, r3
 801a09a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801a09e:	4152      	adcs	r2, r2
 801a0a0:	429d      	cmp	r5, r3
 801a0a2:	e7d4      	b.n	801a04e <__ieee754_pow+0x26>
 801a0a4:	2d00      	cmp	r5, #0
 801a0a6:	46c3      	mov	fp, r8
 801a0a8:	da3a      	bge.n	801a120 <__ieee754_pow+0xf8>
 801a0aa:	4a83      	ldr	r2, [pc, #524]	@ (801a2b8 <__ieee754_pow+0x290>)
 801a0ac:	4592      	cmp	sl, r2
 801a0ae:	d84d      	bhi.n	801a14c <__ieee754_pow+0x124>
 801a0b0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801a0b4:	4592      	cmp	sl, r2
 801a0b6:	f240 84c7 	bls.w	801aa48 <__ieee754_pow+0xa20>
 801a0ba:	ea4f 522a 	mov.w	r2, sl, asr #20
 801a0be:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801a0c2:	2a14      	cmp	r2, #20
 801a0c4:	dd0f      	ble.n	801a0e6 <__ieee754_pow+0xbe>
 801a0c6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801a0ca:	fa21 f402 	lsr.w	r4, r1, r2
 801a0ce:	fa04 f202 	lsl.w	r2, r4, r2
 801a0d2:	428a      	cmp	r2, r1
 801a0d4:	f040 84b8 	bne.w	801aa48 <__ieee754_pow+0xa20>
 801a0d8:	f004 0401 	and.w	r4, r4, #1
 801a0dc:	f1c4 0402 	rsb	r4, r4, #2
 801a0e0:	2900      	cmp	r1, #0
 801a0e2:	d158      	bne.n	801a196 <__ieee754_pow+0x16e>
 801a0e4:	e00e      	b.n	801a104 <__ieee754_pow+0xdc>
 801a0e6:	2900      	cmp	r1, #0
 801a0e8:	d154      	bne.n	801a194 <__ieee754_pow+0x16c>
 801a0ea:	f1c2 0214 	rsb	r2, r2, #20
 801a0ee:	fa4a f402 	asr.w	r4, sl, r2
 801a0f2:	fa04 f202 	lsl.w	r2, r4, r2
 801a0f6:	4552      	cmp	r2, sl
 801a0f8:	f040 84a3 	bne.w	801aa42 <__ieee754_pow+0xa1a>
 801a0fc:	f004 0401 	and.w	r4, r4, #1
 801a100:	f1c4 0402 	rsb	r4, r4, #2
 801a104:	4a6d      	ldr	r2, [pc, #436]	@ (801a2bc <__ieee754_pow+0x294>)
 801a106:	4592      	cmp	sl, r2
 801a108:	d12e      	bne.n	801a168 <__ieee754_pow+0x140>
 801a10a:	f1b9 0f00 	cmp.w	r9, #0
 801a10e:	f280 8494 	bge.w	801aa3a <__ieee754_pow+0xa12>
 801a112:	496a      	ldr	r1, [pc, #424]	@ (801a2bc <__ieee754_pow+0x294>)
 801a114:	4632      	mov	r2, r6
 801a116:	463b      	mov	r3, r7
 801a118:	2000      	movs	r0, #0
 801a11a:	f7e6 fb9f 	bl	800085c <__aeabi_ddiv>
 801a11e:	e7a0      	b.n	801a062 <__ieee754_pow+0x3a>
 801a120:	2400      	movs	r4, #0
 801a122:	bbc1      	cbnz	r1, 801a196 <__ieee754_pow+0x16e>
 801a124:	4a63      	ldr	r2, [pc, #396]	@ (801a2b4 <__ieee754_pow+0x28c>)
 801a126:	4592      	cmp	sl, r2
 801a128:	d1ec      	bne.n	801a104 <__ieee754_pow+0xdc>
 801a12a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801a12e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801a132:	431a      	orrs	r2, r3
 801a134:	f000 8479 	beq.w	801aa2a <__ieee754_pow+0xa02>
 801a138:	4b61      	ldr	r3, [pc, #388]	@ (801a2c0 <__ieee754_pow+0x298>)
 801a13a:	4598      	cmp	r8, r3
 801a13c:	d908      	bls.n	801a150 <__ieee754_pow+0x128>
 801a13e:	f1b9 0f00 	cmp.w	r9, #0
 801a142:	f2c0 8476 	blt.w	801aa32 <__ieee754_pow+0xa0a>
 801a146:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a14a:	e78a      	b.n	801a062 <__ieee754_pow+0x3a>
 801a14c:	2402      	movs	r4, #2
 801a14e:	e7e8      	b.n	801a122 <__ieee754_pow+0xfa>
 801a150:	f1b9 0f00 	cmp.w	r9, #0
 801a154:	f04f 0000 	mov.w	r0, #0
 801a158:	f04f 0100 	mov.w	r1, #0
 801a15c:	da81      	bge.n	801a062 <__ieee754_pow+0x3a>
 801a15e:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a162:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801a166:	e77c      	b.n	801a062 <__ieee754_pow+0x3a>
 801a168:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801a16c:	d106      	bne.n	801a17c <__ieee754_pow+0x154>
 801a16e:	4632      	mov	r2, r6
 801a170:	463b      	mov	r3, r7
 801a172:	4630      	mov	r0, r6
 801a174:	4639      	mov	r1, r7
 801a176:	f7e6 fa47 	bl	8000608 <__aeabi_dmul>
 801a17a:	e772      	b.n	801a062 <__ieee754_pow+0x3a>
 801a17c:	4a51      	ldr	r2, [pc, #324]	@ (801a2c4 <__ieee754_pow+0x29c>)
 801a17e:	4591      	cmp	r9, r2
 801a180:	d109      	bne.n	801a196 <__ieee754_pow+0x16e>
 801a182:	2d00      	cmp	r5, #0
 801a184:	db07      	blt.n	801a196 <__ieee754_pow+0x16e>
 801a186:	ec47 6b10 	vmov	d0, r6, r7
 801a18a:	b011      	add	sp, #68	@ 0x44
 801a18c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a190:	f7ff bce8 	b.w	8019b64 <__ieee754_sqrt>
 801a194:	2400      	movs	r4, #0
 801a196:	ec47 6b10 	vmov	d0, r6, r7
 801a19a:	9302      	str	r3, [sp, #8]
 801a19c:	f7ff fc3c 	bl	8019a18 <fabs>
 801a1a0:	9b02      	ldr	r3, [sp, #8]
 801a1a2:	ec51 0b10 	vmov	r0, r1, d0
 801a1a6:	bb53      	cbnz	r3, 801a1fe <__ieee754_pow+0x1d6>
 801a1a8:	4b44      	ldr	r3, [pc, #272]	@ (801a2bc <__ieee754_pow+0x294>)
 801a1aa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801a1ae:	429a      	cmp	r2, r3
 801a1b0:	d002      	beq.n	801a1b8 <__ieee754_pow+0x190>
 801a1b2:	f1b8 0f00 	cmp.w	r8, #0
 801a1b6:	d122      	bne.n	801a1fe <__ieee754_pow+0x1d6>
 801a1b8:	f1b9 0f00 	cmp.w	r9, #0
 801a1bc:	da05      	bge.n	801a1ca <__ieee754_pow+0x1a2>
 801a1be:	4602      	mov	r2, r0
 801a1c0:	460b      	mov	r3, r1
 801a1c2:	2000      	movs	r0, #0
 801a1c4:	493d      	ldr	r1, [pc, #244]	@ (801a2bc <__ieee754_pow+0x294>)
 801a1c6:	f7e6 fb49 	bl	800085c <__aeabi_ddiv>
 801a1ca:	2d00      	cmp	r5, #0
 801a1cc:	f6bf af49 	bge.w	801a062 <__ieee754_pow+0x3a>
 801a1d0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801a1d4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801a1d8:	ea58 0804 	orrs.w	r8, r8, r4
 801a1dc:	d108      	bne.n	801a1f0 <__ieee754_pow+0x1c8>
 801a1de:	4602      	mov	r2, r0
 801a1e0:	460b      	mov	r3, r1
 801a1e2:	4610      	mov	r0, r2
 801a1e4:	4619      	mov	r1, r3
 801a1e6:	f7e6 f857 	bl	8000298 <__aeabi_dsub>
 801a1ea:	4602      	mov	r2, r0
 801a1ec:	460b      	mov	r3, r1
 801a1ee:	e794      	b.n	801a11a <__ieee754_pow+0xf2>
 801a1f0:	2c01      	cmp	r4, #1
 801a1f2:	f47f af36 	bne.w	801a062 <__ieee754_pow+0x3a>
 801a1f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a1fa:	4619      	mov	r1, r3
 801a1fc:	e731      	b.n	801a062 <__ieee754_pow+0x3a>
 801a1fe:	0feb      	lsrs	r3, r5, #31
 801a200:	3b01      	subs	r3, #1
 801a202:	ea53 0204 	orrs.w	r2, r3, r4
 801a206:	d102      	bne.n	801a20e <__ieee754_pow+0x1e6>
 801a208:	4632      	mov	r2, r6
 801a20a:	463b      	mov	r3, r7
 801a20c:	e7e9      	b.n	801a1e2 <__ieee754_pow+0x1ba>
 801a20e:	3c01      	subs	r4, #1
 801a210:	431c      	orrs	r4, r3
 801a212:	d016      	beq.n	801a242 <__ieee754_pow+0x21a>
 801a214:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801a2a0 <__ieee754_pow+0x278>
 801a218:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801a21c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a220:	f240 8112 	bls.w	801a448 <__ieee754_pow+0x420>
 801a224:	4b28      	ldr	r3, [pc, #160]	@ (801a2c8 <__ieee754_pow+0x2a0>)
 801a226:	459a      	cmp	sl, r3
 801a228:	4b25      	ldr	r3, [pc, #148]	@ (801a2c0 <__ieee754_pow+0x298>)
 801a22a:	d916      	bls.n	801a25a <__ieee754_pow+0x232>
 801a22c:	4598      	cmp	r8, r3
 801a22e:	d80b      	bhi.n	801a248 <__ieee754_pow+0x220>
 801a230:	f1b9 0f00 	cmp.w	r9, #0
 801a234:	da0b      	bge.n	801a24e <__ieee754_pow+0x226>
 801a236:	2000      	movs	r0, #0
 801a238:	b011      	add	sp, #68	@ 0x44
 801a23a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a23e:	f000 bf6b 	b.w	801b118 <__math_oflow>
 801a242:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801a2a8 <__ieee754_pow+0x280>
 801a246:	e7e7      	b.n	801a218 <__ieee754_pow+0x1f0>
 801a248:	f1b9 0f00 	cmp.w	r9, #0
 801a24c:	dcf3      	bgt.n	801a236 <__ieee754_pow+0x20e>
 801a24e:	2000      	movs	r0, #0
 801a250:	b011      	add	sp, #68	@ 0x44
 801a252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a256:	f000 bf57 	b.w	801b108 <__math_uflow>
 801a25a:	4598      	cmp	r8, r3
 801a25c:	d20c      	bcs.n	801a278 <__ieee754_pow+0x250>
 801a25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a262:	2200      	movs	r2, #0
 801a264:	2300      	movs	r3, #0
 801a266:	f7e6 fc41 	bl	8000aec <__aeabi_dcmplt>
 801a26a:	3800      	subs	r0, #0
 801a26c:	bf18      	it	ne
 801a26e:	2001      	movne	r0, #1
 801a270:	f1b9 0f00 	cmp.w	r9, #0
 801a274:	daec      	bge.n	801a250 <__ieee754_pow+0x228>
 801a276:	e7df      	b.n	801a238 <__ieee754_pow+0x210>
 801a278:	4b10      	ldr	r3, [pc, #64]	@ (801a2bc <__ieee754_pow+0x294>)
 801a27a:	4598      	cmp	r8, r3
 801a27c:	f04f 0200 	mov.w	r2, #0
 801a280:	d924      	bls.n	801a2cc <__ieee754_pow+0x2a4>
 801a282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a286:	2300      	movs	r3, #0
 801a288:	f7e6 fc30 	bl	8000aec <__aeabi_dcmplt>
 801a28c:	3800      	subs	r0, #0
 801a28e:	bf18      	it	ne
 801a290:	2001      	movne	r0, #1
 801a292:	f1b9 0f00 	cmp.w	r9, #0
 801a296:	dccf      	bgt.n	801a238 <__ieee754_pow+0x210>
 801a298:	e7da      	b.n	801a250 <__ieee754_pow+0x228>
 801a29a:	bf00      	nop
 801a29c:	f3af 8000 	nop.w
 801a2a0:	00000000 	.word	0x00000000
 801a2a4:	3ff00000 	.word	0x3ff00000
 801a2a8:	00000000 	.word	0x00000000
 801a2ac:	bff00000 	.word	0xbff00000
 801a2b0:	fff00000 	.word	0xfff00000
 801a2b4:	7ff00000 	.word	0x7ff00000
 801a2b8:	433fffff 	.word	0x433fffff
 801a2bc:	3ff00000 	.word	0x3ff00000
 801a2c0:	3fefffff 	.word	0x3fefffff
 801a2c4:	3fe00000 	.word	0x3fe00000
 801a2c8:	43f00000 	.word	0x43f00000
 801a2cc:	4b5a      	ldr	r3, [pc, #360]	@ (801a438 <__ieee754_pow+0x410>)
 801a2ce:	f7e5 ffe3 	bl	8000298 <__aeabi_dsub>
 801a2d2:	a351      	add	r3, pc, #324	@ (adr r3, 801a418 <__ieee754_pow+0x3f0>)
 801a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d8:	4604      	mov	r4, r0
 801a2da:	460d      	mov	r5, r1
 801a2dc:	f7e6 f994 	bl	8000608 <__aeabi_dmul>
 801a2e0:	a34f      	add	r3, pc, #316	@ (adr r3, 801a420 <__ieee754_pow+0x3f8>)
 801a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e6:	4606      	mov	r6, r0
 801a2e8:	460f      	mov	r7, r1
 801a2ea:	4620      	mov	r0, r4
 801a2ec:	4629      	mov	r1, r5
 801a2ee:	f7e6 f98b 	bl	8000608 <__aeabi_dmul>
 801a2f2:	4b52      	ldr	r3, [pc, #328]	@ (801a43c <__ieee754_pow+0x414>)
 801a2f4:	4682      	mov	sl, r0
 801a2f6:	468b      	mov	fp, r1
 801a2f8:	2200      	movs	r2, #0
 801a2fa:	4620      	mov	r0, r4
 801a2fc:	4629      	mov	r1, r5
 801a2fe:	f7e6 f983 	bl	8000608 <__aeabi_dmul>
 801a302:	4602      	mov	r2, r0
 801a304:	460b      	mov	r3, r1
 801a306:	a148      	add	r1, pc, #288	@ (adr r1, 801a428 <__ieee754_pow+0x400>)
 801a308:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a30c:	f7e5 ffc4 	bl	8000298 <__aeabi_dsub>
 801a310:	4622      	mov	r2, r4
 801a312:	462b      	mov	r3, r5
 801a314:	f7e6 f978 	bl	8000608 <__aeabi_dmul>
 801a318:	4602      	mov	r2, r0
 801a31a:	460b      	mov	r3, r1
 801a31c:	2000      	movs	r0, #0
 801a31e:	4948      	ldr	r1, [pc, #288]	@ (801a440 <__ieee754_pow+0x418>)
 801a320:	f7e5 ffba 	bl	8000298 <__aeabi_dsub>
 801a324:	4622      	mov	r2, r4
 801a326:	4680      	mov	r8, r0
 801a328:	4689      	mov	r9, r1
 801a32a:	462b      	mov	r3, r5
 801a32c:	4620      	mov	r0, r4
 801a32e:	4629      	mov	r1, r5
 801a330:	f7e6 f96a 	bl	8000608 <__aeabi_dmul>
 801a334:	4602      	mov	r2, r0
 801a336:	460b      	mov	r3, r1
 801a338:	4640      	mov	r0, r8
 801a33a:	4649      	mov	r1, r9
 801a33c:	f7e6 f964 	bl	8000608 <__aeabi_dmul>
 801a340:	a33b      	add	r3, pc, #236	@ (adr r3, 801a430 <__ieee754_pow+0x408>)
 801a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a346:	f7e6 f95f 	bl	8000608 <__aeabi_dmul>
 801a34a:	4602      	mov	r2, r0
 801a34c:	460b      	mov	r3, r1
 801a34e:	4650      	mov	r0, sl
 801a350:	4659      	mov	r1, fp
 801a352:	f7e5 ffa1 	bl	8000298 <__aeabi_dsub>
 801a356:	4602      	mov	r2, r0
 801a358:	460b      	mov	r3, r1
 801a35a:	4680      	mov	r8, r0
 801a35c:	4689      	mov	r9, r1
 801a35e:	4630      	mov	r0, r6
 801a360:	4639      	mov	r1, r7
 801a362:	f7e5 ff9b 	bl	800029c <__adddf3>
 801a366:	2400      	movs	r4, #0
 801a368:	4632      	mov	r2, r6
 801a36a:	463b      	mov	r3, r7
 801a36c:	4620      	mov	r0, r4
 801a36e:	460d      	mov	r5, r1
 801a370:	f7e5 ff92 	bl	8000298 <__aeabi_dsub>
 801a374:	4602      	mov	r2, r0
 801a376:	460b      	mov	r3, r1
 801a378:	4640      	mov	r0, r8
 801a37a:	4649      	mov	r1, r9
 801a37c:	f7e5 ff8c 	bl	8000298 <__aeabi_dsub>
 801a380:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a384:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a388:	2300      	movs	r3, #0
 801a38a:	9304      	str	r3, [sp, #16]
 801a38c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801a390:	4606      	mov	r6, r0
 801a392:	460f      	mov	r7, r1
 801a394:	4652      	mov	r2, sl
 801a396:	465b      	mov	r3, fp
 801a398:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a39c:	f7e5 ff7c 	bl	8000298 <__aeabi_dsub>
 801a3a0:	4622      	mov	r2, r4
 801a3a2:	462b      	mov	r3, r5
 801a3a4:	f7e6 f930 	bl	8000608 <__aeabi_dmul>
 801a3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a3ac:	4680      	mov	r8, r0
 801a3ae:	4689      	mov	r9, r1
 801a3b0:	4630      	mov	r0, r6
 801a3b2:	4639      	mov	r1, r7
 801a3b4:	f7e6 f928 	bl	8000608 <__aeabi_dmul>
 801a3b8:	4602      	mov	r2, r0
 801a3ba:	460b      	mov	r3, r1
 801a3bc:	4640      	mov	r0, r8
 801a3be:	4649      	mov	r1, r9
 801a3c0:	f7e5 ff6c 	bl	800029c <__adddf3>
 801a3c4:	4652      	mov	r2, sl
 801a3c6:	465b      	mov	r3, fp
 801a3c8:	4606      	mov	r6, r0
 801a3ca:	460f      	mov	r7, r1
 801a3cc:	4620      	mov	r0, r4
 801a3ce:	4629      	mov	r1, r5
 801a3d0:	f7e6 f91a 	bl	8000608 <__aeabi_dmul>
 801a3d4:	460b      	mov	r3, r1
 801a3d6:	4602      	mov	r2, r0
 801a3d8:	4680      	mov	r8, r0
 801a3da:	4689      	mov	r9, r1
 801a3dc:	4630      	mov	r0, r6
 801a3de:	4639      	mov	r1, r7
 801a3e0:	f7e5 ff5c 	bl	800029c <__adddf3>
 801a3e4:	4b17      	ldr	r3, [pc, #92]	@ (801a444 <__ieee754_pow+0x41c>)
 801a3e6:	4299      	cmp	r1, r3
 801a3e8:	4604      	mov	r4, r0
 801a3ea:	460d      	mov	r5, r1
 801a3ec:	468a      	mov	sl, r1
 801a3ee:	468b      	mov	fp, r1
 801a3f0:	f340 82ef 	ble.w	801a9d2 <__ieee754_pow+0x9aa>
 801a3f4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801a3f8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801a3fc:	4303      	orrs	r3, r0
 801a3fe:	f000 81e8 	beq.w	801a7d2 <__ieee754_pow+0x7aa>
 801a402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a406:	2200      	movs	r2, #0
 801a408:	2300      	movs	r3, #0
 801a40a:	f7e6 fb6f 	bl	8000aec <__aeabi_dcmplt>
 801a40e:	3800      	subs	r0, #0
 801a410:	bf18      	it	ne
 801a412:	2001      	movne	r0, #1
 801a414:	e710      	b.n	801a238 <__ieee754_pow+0x210>
 801a416:	bf00      	nop
 801a418:	60000000 	.word	0x60000000
 801a41c:	3ff71547 	.word	0x3ff71547
 801a420:	f85ddf44 	.word	0xf85ddf44
 801a424:	3e54ae0b 	.word	0x3e54ae0b
 801a428:	55555555 	.word	0x55555555
 801a42c:	3fd55555 	.word	0x3fd55555
 801a430:	652b82fe 	.word	0x652b82fe
 801a434:	3ff71547 	.word	0x3ff71547
 801a438:	3ff00000 	.word	0x3ff00000
 801a43c:	3fd00000 	.word	0x3fd00000
 801a440:	3fe00000 	.word	0x3fe00000
 801a444:	408fffff 	.word	0x408fffff
 801a448:	4bd5      	ldr	r3, [pc, #852]	@ (801a7a0 <__ieee754_pow+0x778>)
 801a44a:	402b      	ands	r3, r5
 801a44c:	2200      	movs	r2, #0
 801a44e:	b92b      	cbnz	r3, 801a45c <__ieee754_pow+0x434>
 801a450:	4bd4      	ldr	r3, [pc, #848]	@ (801a7a4 <__ieee754_pow+0x77c>)
 801a452:	f7e6 f8d9 	bl	8000608 <__aeabi_dmul>
 801a456:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801a45a:	468b      	mov	fp, r1
 801a45c:	ea4f 532b 	mov.w	r3, fp, asr #20
 801a460:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a464:	4413      	add	r3, r2
 801a466:	930a      	str	r3, [sp, #40]	@ 0x28
 801a468:	4bcf      	ldr	r3, [pc, #828]	@ (801a7a8 <__ieee754_pow+0x780>)
 801a46a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801a46e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801a472:	459b      	cmp	fp, r3
 801a474:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801a478:	dd08      	ble.n	801a48c <__ieee754_pow+0x464>
 801a47a:	4bcc      	ldr	r3, [pc, #816]	@ (801a7ac <__ieee754_pow+0x784>)
 801a47c:	459b      	cmp	fp, r3
 801a47e:	f340 81a5 	ble.w	801a7cc <__ieee754_pow+0x7a4>
 801a482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a484:	3301      	adds	r3, #1
 801a486:	930a      	str	r3, [sp, #40]	@ 0x28
 801a488:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801a48c:	f04f 0a00 	mov.w	sl, #0
 801a490:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801a494:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a496:	4bc6      	ldr	r3, [pc, #792]	@ (801a7b0 <__ieee754_pow+0x788>)
 801a498:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a49c:	ed93 7b00 	vldr	d7, [r3]
 801a4a0:	4629      	mov	r1, r5
 801a4a2:	ec53 2b17 	vmov	r2, r3, d7
 801a4a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a4aa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a4ae:	f7e5 fef3 	bl	8000298 <__aeabi_dsub>
 801a4b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a4b6:	4606      	mov	r6, r0
 801a4b8:	460f      	mov	r7, r1
 801a4ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a4be:	f7e5 feed 	bl	800029c <__adddf3>
 801a4c2:	4602      	mov	r2, r0
 801a4c4:	460b      	mov	r3, r1
 801a4c6:	2000      	movs	r0, #0
 801a4c8:	49ba      	ldr	r1, [pc, #744]	@ (801a7b4 <__ieee754_pow+0x78c>)
 801a4ca:	f7e6 f9c7 	bl	800085c <__aeabi_ddiv>
 801a4ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801a4d2:	4602      	mov	r2, r0
 801a4d4:	460b      	mov	r3, r1
 801a4d6:	4630      	mov	r0, r6
 801a4d8:	4639      	mov	r1, r7
 801a4da:	f7e6 f895 	bl	8000608 <__aeabi_dmul>
 801a4de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a4e2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801a4e6:	106d      	asrs	r5, r5, #1
 801a4e8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801a4ec:	f04f 0b00 	mov.w	fp, #0
 801a4f0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801a4f4:	4661      	mov	r1, ip
 801a4f6:	2200      	movs	r2, #0
 801a4f8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801a4fc:	4658      	mov	r0, fp
 801a4fe:	46e1      	mov	r9, ip
 801a500:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801a504:	4614      	mov	r4, r2
 801a506:	461d      	mov	r5, r3
 801a508:	f7e6 f87e 	bl	8000608 <__aeabi_dmul>
 801a50c:	4602      	mov	r2, r0
 801a50e:	460b      	mov	r3, r1
 801a510:	4630      	mov	r0, r6
 801a512:	4639      	mov	r1, r7
 801a514:	f7e5 fec0 	bl	8000298 <__aeabi_dsub>
 801a518:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a51c:	4606      	mov	r6, r0
 801a51e:	460f      	mov	r7, r1
 801a520:	4620      	mov	r0, r4
 801a522:	4629      	mov	r1, r5
 801a524:	f7e5 feb8 	bl	8000298 <__aeabi_dsub>
 801a528:	4602      	mov	r2, r0
 801a52a:	460b      	mov	r3, r1
 801a52c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a530:	f7e5 feb2 	bl	8000298 <__aeabi_dsub>
 801a534:	465a      	mov	r2, fp
 801a536:	464b      	mov	r3, r9
 801a538:	f7e6 f866 	bl	8000608 <__aeabi_dmul>
 801a53c:	4602      	mov	r2, r0
 801a53e:	460b      	mov	r3, r1
 801a540:	4630      	mov	r0, r6
 801a542:	4639      	mov	r1, r7
 801a544:	f7e5 fea8 	bl	8000298 <__aeabi_dsub>
 801a548:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a54c:	f7e6 f85c 	bl	8000608 <__aeabi_dmul>
 801a550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a554:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a558:	4610      	mov	r0, r2
 801a55a:	4619      	mov	r1, r3
 801a55c:	f7e6 f854 	bl	8000608 <__aeabi_dmul>
 801a560:	a37d      	add	r3, pc, #500	@ (adr r3, 801a758 <__ieee754_pow+0x730>)
 801a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a566:	4604      	mov	r4, r0
 801a568:	460d      	mov	r5, r1
 801a56a:	f7e6 f84d 	bl	8000608 <__aeabi_dmul>
 801a56e:	a37c      	add	r3, pc, #496	@ (adr r3, 801a760 <__ieee754_pow+0x738>)
 801a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a574:	f7e5 fe92 	bl	800029c <__adddf3>
 801a578:	4622      	mov	r2, r4
 801a57a:	462b      	mov	r3, r5
 801a57c:	f7e6 f844 	bl	8000608 <__aeabi_dmul>
 801a580:	a379      	add	r3, pc, #484	@ (adr r3, 801a768 <__ieee754_pow+0x740>)
 801a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a586:	f7e5 fe89 	bl	800029c <__adddf3>
 801a58a:	4622      	mov	r2, r4
 801a58c:	462b      	mov	r3, r5
 801a58e:	f7e6 f83b 	bl	8000608 <__aeabi_dmul>
 801a592:	a377      	add	r3, pc, #476	@ (adr r3, 801a770 <__ieee754_pow+0x748>)
 801a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a598:	f7e5 fe80 	bl	800029c <__adddf3>
 801a59c:	4622      	mov	r2, r4
 801a59e:	462b      	mov	r3, r5
 801a5a0:	f7e6 f832 	bl	8000608 <__aeabi_dmul>
 801a5a4:	a374      	add	r3, pc, #464	@ (adr r3, 801a778 <__ieee754_pow+0x750>)
 801a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5aa:	f7e5 fe77 	bl	800029c <__adddf3>
 801a5ae:	4622      	mov	r2, r4
 801a5b0:	462b      	mov	r3, r5
 801a5b2:	f7e6 f829 	bl	8000608 <__aeabi_dmul>
 801a5b6:	a372      	add	r3, pc, #456	@ (adr r3, 801a780 <__ieee754_pow+0x758>)
 801a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5bc:	f7e5 fe6e 	bl	800029c <__adddf3>
 801a5c0:	4622      	mov	r2, r4
 801a5c2:	4606      	mov	r6, r0
 801a5c4:	460f      	mov	r7, r1
 801a5c6:	462b      	mov	r3, r5
 801a5c8:	4620      	mov	r0, r4
 801a5ca:	4629      	mov	r1, r5
 801a5cc:	f7e6 f81c 	bl	8000608 <__aeabi_dmul>
 801a5d0:	4602      	mov	r2, r0
 801a5d2:	460b      	mov	r3, r1
 801a5d4:	4630      	mov	r0, r6
 801a5d6:	4639      	mov	r1, r7
 801a5d8:	f7e6 f816 	bl	8000608 <__aeabi_dmul>
 801a5dc:	465a      	mov	r2, fp
 801a5de:	4604      	mov	r4, r0
 801a5e0:	460d      	mov	r5, r1
 801a5e2:	464b      	mov	r3, r9
 801a5e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a5e8:	f7e5 fe58 	bl	800029c <__adddf3>
 801a5ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a5f0:	f7e6 f80a 	bl	8000608 <__aeabi_dmul>
 801a5f4:	4622      	mov	r2, r4
 801a5f6:	462b      	mov	r3, r5
 801a5f8:	f7e5 fe50 	bl	800029c <__adddf3>
 801a5fc:	465a      	mov	r2, fp
 801a5fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a602:	464b      	mov	r3, r9
 801a604:	4658      	mov	r0, fp
 801a606:	4649      	mov	r1, r9
 801a608:	f7e5 fffe 	bl	8000608 <__aeabi_dmul>
 801a60c:	4b6a      	ldr	r3, [pc, #424]	@ (801a7b8 <__ieee754_pow+0x790>)
 801a60e:	2200      	movs	r2, #0
 801a610:	4606      	mov	r6, r0
 801a612:	460f      	mov	r7, r1
 801a614:	f7e5 fe42 	bl	800029c <__adddf3>
 801a618:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a61c:	f7e5 fe3e 	bl	800029c <__adddf3>
 801a620:	46d8      	mov	r8, fp
 801a622:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801a626:	460d      	mov	r5, r1
 801a628:	465a      	mov	r2, fp
 801a62a:	460b      	mov	r3, r1
 801a62c:	4640      	mov	r0, r8
 801a62e:	4649      	mov	r1, r9
 801a630:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801a634:	f7e5 ffe8 	bl	8000608 <__aeabi_dmul>
 801a638:	465c      	mov	r4, fp
 801a63a:	4680      	mov	r8, r0
 801a63c:	4689      	mov	r9, r1
 801a63e:	4b5e      	ldr	r3, [pc, #376]	@ (801a7b8 <__ieee754_pow+0x790>)
 801a640:	2200      	movs	r2, #0
 801a642:	4620      	mov	r0, r4
 801a644:	4629      	mov	r1, r5
 801a646:	f7e5 fe27 	bl	8000298 <__aeabi_dsub>
 801a64a:	4632      	mov	r2, r6
 801a64c:	463b      	mov	r3, r7
 801a64e:	f7e5 fe23 	bl	8000298 <__aeabi_dsub>
 801a652:	4602      	mov	r2, r0
 801a654:	460b      	mov	r3, r1
 801a656:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a65a:	f7e5 fe1d 	bl	8000298 <__aeabi_dsub>
 801a65e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a662:	f7e5 ffd1 	bl	8000608 <__aeabi_dmul>
 801a666:	4622      	mov	r2, r4
 801a668:	4606      	mov	r6, r0
 801a66a:	460f      	mov	r7, r1
 801a66c:	462b      	mov	r3, r5
 801a66e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a672:	f7e5 ffc9 	bl	8000608 <__aeabi_dmul>
 801a676:	4602      	mov	r2, r0
 801a678:	460b      	mov	r3, r1
 801a67a:	4630      	mov	r0, r6
 801a67c:	4639      	mov	r1, r7
 801a67e:	f7e5 fe0d 	bl	800029c <__adddf3>
 801a682:	4606      	mov	r6, r0
 801a684:	460f      	mov	r7, r1
 801a686:	4602      	mov	r2, r0
 801a688:	460b      	mov	r3, r1
 801a68a:	4640      	mov	r0, r8
 801a68c:	4649      	mov	r1, r9
 801a68e:	f7e5 fe05 	bl	800029c <__adddf3>
 801a692:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801a696:	a33c      	add	r3, pc, #240	@ (adr r3, 801a788 <__ieee754_pow+0x760>)
 801a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69c:	4658      	mov	r0, fp
 801a69e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801a6a2:	460d      	mov	r5, r1
 801a6a4:	f7e5 ffb0 	bl	8000608 <__aeabi_dmul>
 801a6a8:	465c      	mov	r4, fp
 801a6aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a6ae:	4642      	mov	r2, r8
 801a6b0:	464b      	mov	r3, r9
 801a6b2:	4620      	mov	r0, r4
 801a6b4:	4629      	mov	r1, r5
 801a6b6:	f7e5 fdef 	bl	8000298 <__aeabi_dsub>
 801a6ba:	4602      	mov	r2, r0
 801a6bc:	460b      	mov	r3, r1
 801a6be:	4630      	mov	r0, r6
 801a6c0:	4639      	mov	r1, r7
 801a6c2:	f7e5 fde9 	bl	8000298 <__aeabi_dsub>
 801a6c6:	a332      	add	r3, pc, #200	@ (adr r3, 801a790 <__ieee754_pow+0x768>)
 801a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6cc:	f7e5 ff9c 	bl	8000608 <__aeabi_dmul>
 801a6d0:	a331      	add	r3, pc, #196	@ (adr r3, 801a798 <__ieee754_pow+0x770>)
 801a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6d6:	4606      	mov	r6, r0
 801a6d8:	460f      	mov	r7, r1
 801a6da:	4620      	mov	r0, r4
 801a6dc:	4629      	mov	r1, r5
 801a6de:	f7e5 ff93 	bl	8000608 <__aeabi_dmul>
 801a6e2:	4602      	mov	r2, r0
 801a6e4:	460b      	mov	r3, r1
 801a6e6:	4630      	mov	r0, r6
 801a6e8:	4639      	mov	r1, r7
 801a6ea:	f7e5 fdd7 	bl	800029c <__adddf3>
 801a6ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a6f0:	4b32      	ldr	r3, [pc, #200]	@ (801a7bc <__ieee754_pow+0x794>)
 801a6f2:	4413      	add	r3, r2
 801a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6f8:	f7e5 fdd0 	bl	800029c <__adddf3>
 801a6fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a700:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a702:	f7e5 ff17 	bl	8000534 <__aeabi_i2d>
 801a706:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a708:	4b2d      	ldr	r3, [pc, #180]	@ (801a7c0 <__ieee754_pow+0x798>)
 801a70a:	4413      	add	r3, r2
 801a70c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a710:	4606      	mov	r6, r0
 801a712:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a716:	460f      	mov	r7, r1
 801a718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a71c:	f7e5 fdbe 	bl	800029c <__adddf3>
 801a720:	4642      	mov	r2, r8
 801a722:	464b      	mov	r3, r9
 801a724:	f7e5 fdba 	bl	800029c <__adddf3>
 801a728:	4632      	mov	r2, r6
 801a72a:	463b      	mov	r3, r7
 801a72c:	f7e5 fdb6 	bl	800029c <__adddf3>
 801a730:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801a734:	4632      	mov	r2, r6
 801a736:	463b      	mov	r3, r7
 801a738:	4658      	mov	r0, fp
 801a73a:	460d      	mov	r5, r1
 801a73c:	f7e5 fdac 	bl	8000298 <__aeabi_dsub>
 801a740:	4642      	mov	r2, r8
 801a742:	464b      	mov	r3, r9
 801a744:	f7e5 fda8 	bl	8000298 <__aeabi_dsub>
 801a748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a74c:	f7e5 fda4 	bl	8000298 <__aeabi_dsub>
 801a750:	465c      	mov	r4, fp
 801a752:	4602      	mov	r2, r0
 801a754:	e036      	b.n	801a7c4 <__ieee754_pow+0x79c>
 801a756:	bf00      	nop
 801a758:	4a454eef 	.word	0x4a454eef
 801a75c:	3fca7e28 	.word	0x3fca7e28
 801a760:	93c9db65 	.word	0x93c9db65
 801a764:	3fcd864a 	.word	0x3fcd864a
 801a768:	a91d4101 	.word	0xa91d4101
 801a76c:	3fd17460 	.word	0x3fd17460
 801a770:	518f264d 	.word	0x518f264d
 801a774:	3fd55555 	.word	0x3fd55555
 801a778:	db6fabff 	.word	0xdb6fabff
 801a77c:	3fdb6db6 	.word	0x3fdb6db6
 801a780:	33333303 	.word	0x33333303
 801a784:	3fe33333 	.word	0x3fe33333
 801a788:	e0000000 	.word	0xe0000000
 801a78c:	3feec709 	.word	0x3feec709
 801a790:	dc3a03fd 	.word	0xdc3a03fd
 801a794:	3feec709 	.word	0x3feec709
 801a798:	145b01f5 	.word	0x145b01f5
 801a79c:	be3e2fe0 	.word	0xbe3e2fe0
 801a7a0:	7ff00000 	.word	0x7ff00000
 801a7a4:	43400000 	.word	0x43400000
 801a7a8:	0003988e 	.word	0x0003988e
 801a7ac:	000bb679 	.word	0x000bb679
 801a7b0:	0802f4e8 	.word	0x0802f4e8
 801a7b4:	3ff00000 	.word	0x3ff00000
 801a7b8:	40080000 	.word	0x40080000
 801a7bc:	0802f4c8 	.word	0x0802f4c8
 801a7c0:	0802f4d8 	.word	0x0802f4d8
 801a7c4:	460b      	mov	r3, r1
 801a7c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a7ca:	e5d7      	b.n	801a37c <__ieee754_pow+0x354>
 801a7cc:	f04f 0a01 	mov.w	sl, #1
 801a7d0:	e65e      	b.n	801a490 <__ieee754_pow+0x468>
 801a7d2:	a3b4      	add	r3, pc, #720	@ (adr r3, 801aaa4 <__ieee754_pow+0xa7c>)
 801a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7d8:	4630      	mov	r0, r6
 801a7da:	4639      	mov	r1, r7
 801a7dc:	f7e5 fd5e 	bl	800029c <__adddf3>
 801a7e0:	4642      	mov	r2, r8
 801a7e2:	e9cd 0100 	strd	r0, r1, [sp]
 801a7e6:	464b      	mov	r3, r9
 801a7e8:	4620      	mov	r0, r4
 801a7ea:	4629      	mov	r1, r5
 801a7ec:	f7e5 fd54 	bl	8000298 <__aeabi_dsub>
 801a7f0:	4602      	mov	r2, r0
 801a7f2:	460b      	mov	r3, r1
 801a7f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a7f8:	f7e6 f996 	bl	8000b28 <__aeabi_dcmpgt>
 801a7fc:	2800      	cmp	r0, #0
 801a7fe:	f47f ae00 	bne.w	801a402 <__ieee754_pow+0x3da>
 801a802:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801a806:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801a80a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801a80e:	fa43 fa0a 	asr.w	sl, r3, sl
 801a812:	44da      	add	sl, fp
 801a814:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801a818:	489d      	ldr	r0, [pc, #628]	@ (801aa90 <__ieee754_pow+0xa68>)
 801a81a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801a81e:	4108      	asrs	r0, r1
 801a820:	ea00 030a 	and.w	r3, r0, sl
 801a824:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a828:	f1c1 0114 	rsb	r1, r1, #20
 801a82c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801a830:	fa4a fa01 	asr.w	sl, sl, r1
 801a834:	f1bb 0f00 	cmp.w	fp, #0
 801a838:	4640      	mov	r0, r8
 801a83a:	4649      	mov	r1, r9
 801a83c:	f04f 0200 	mov.w	r2, #0
 801a840:	bfb8      	it	lt
 801a842:	f1ca 0a00 	rsblt	sl, sl, #0
 801a846:	f7e5 fd27 	bl	8000298 <__aeabi_dsub>
 801a84a:	4680      	mov	r8, r0
 801a84c:	4689      	mov	r9, r1
 801a84e:	4632      	mov	r2, r6
 801a850:	463b      	mov	r3, r7
 801a852:	4640      	mov	r0, r8
 801a854:	4649      	mov	r1, r9
 801a856:	f7e5 fd21 	bl	800029c <__adddf3>
 801a85a:	2400      	movs	r4, #0
 801a85c:	a37c      	add	r3, pc, #496	@ (adr r3, 801aa50 <__ieee754_pow+0xa28>)
 801a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a862:	4620      	mov	r0, r4
 801a864:	460d      	mov	r5, r1
 801a866:	f7e5 fecf 	bl	8000608 <__aeabi_dmul>
 801a86a:	4642      	mov	r2, r8
 801a86c:	e9cd 0100 	strd	r0, r1, [sp]
 801a870:	464b      	mov	r3, r9
 801a872:	4620      	mov	r0, r4
 801a874:	4629      	mov	r1, r5
 801a876:	f7e5 fd0f 	bl	8000298 <__aeabi_dsub>
 801a87a:	4602      	mov	r2, r0
 801a87c:	460b      	mov	r3, r1
 801a87e:	4630      	mov	r0, r6
 801a880:	4639      	mov	r1, r7
 801a882:	f7e5 fd09 	bl	8000298 <__aeabi_dsub>
 801a886:	a374      	add	r3, pc, #464	@ (adr r3, 801aa58 <__ieee754_pow+0xa30>)
 801a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a88c:	f7e5 febc 	bl	8000608 <__aeabi_dmul>
 801a890:	a373      	add	r3, pc, #460	@ (adr r3, 801aa60 <__ieee754_pow+0xa38>)
 801a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a896:	4680      	mov	r8, r0
 801a898:	4689      	mov	r9, r1
 801a89a:	4620      	mov	r0, r4
 801a89c:	4629      	mov	r1, r5
 801a89e:	f7e5 feb3 	bl	8000608 <__aeabi_dmul>
 801a8a2:	4602      	mov	r2, r0
 801a8a4:	460b      	mov	r3, r1
 801a8a6:	4640      	mov	r0, r8
 801a8a8:	4649      	mov	r1, r9
 801a8aa:	f7e5 fcf7 	bl	800029c <__adddf3>
 801a8ae:	4604      	mov	r4, r0
 801a8b0:	460d      	mov	r5, r1
 801a8b2:	4602      	mov	r2, r0
 801a8b4:	460b      	mov	r3, r1
 801a8b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a8ba:	f7e5 fcef 	bl	800029c <__adddf3>
 801a8be:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a8c2:	4680      	mov	r8, r0
 801a8c4:	4689      	mov	r9, r1
 801a8c6:	f7e5 fce7 	bl	8000298 <__aeabi_dsub>
 801a8ca:	4602      	mov	r2, r0
 801a8cc:	460b      	mov	r3, r1
 801a8ce:	4620      	mov	r0, r4
 801a8d0:	4629      	mov	r1, r5
 801a8d2:	f7e5 fce1 	bl	8000298 <__aeabi_dsub>
 801a8d6:	4642      	mov	r2, r8
 801a8d8:	4606      	mov	r6, r0
 801a8da:	460f      	mov	r7, r1
 801a8dc:	464b      	mov	r3, r9
 801a8de:	4640      	mov	r0, r8
 801a8e0:	4649      	mov	r1, r9
 801a8e2:	f7e5 fe91 	bl	8000608 <__aeabi_dmul>
 801a8e6:	a360      	add	r3, pc, #384	@ (adr r3, 801aa68 <__ieee754_pow+0xa40>)
 801a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ec:	4604      	mov	r4, r0
 801a8ee:	460d      	mov	r5, r1
 801a8f0:	f7e5 fe8a 	bl	8000608 <__aeabi_dmul>
 801a8f4:	a35e      	add	r3, pc, #376	@ (adr r3, 801aa70 <__ieee754_pow+0xa48>)
 801a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8fa:	f7e5 fccd 	bl	8000298 <__aeabi_dsub>
 801a8fe:	4622      	mov	r2, r4
 801a900:	462b      	mov	r3, r5
 801a902:	f7e5 fe81 	bl	8000608 <__aeabi_dmul>
 801a906:	a35c      	add	r3, pc, #368	@ (adr r3, 801aa78 <__ieee754_pow+0xa50>)
 801a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a90c:	f7e5 fcc6 	bl	800029c <__adddf3>
 801a910:	4622      	mov	r2, r4
 801a912:	462b      	mov	r3, r5
 801a914:	f7e5 fe78 	bl	8000608 <__aeabi_dmul>
 801a918:	a359      	add	r3, pc, #356	@ (adr r3, 801aa80 <__ieee754_pow+0xa58>)
 801a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a91e:	f7e5 fcbb 	bl	8000298 <__aeabi_dsub>
 801a922:	4622      	mov	r2, r4
 801a924:	462b      	mov	r3, r5
 801a926:	f7e5 fe6f 	bl	8000608 <__aeabi_dmul>
 801a92a:	a357      	add	r3, pc, #348	@ (adr r3, 801aa88 <__ieee754_pow+0xa60>)
 801a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a930:	f7e5 fcb4 	bl	800029c <__adddf3>
 801a934:	4622      	mov	r2, r4
 801a936:	462b      	mov	r3, r5
 801a938:	f7e5 fe66 	bl	8000608 <__aeabi_dmul>
 801a93c:	4602      	mov	r2, r0
 801a93e:	460b      	mov	r3, r1
 801a940:	4640      	mov	r0, r8
 801a942:	4649      	mov	r1, r9
 801a944:	f7e5 fca8 	bl	8000298 <__aeabi_dsub>
 801a948:	4604      	mov	r4, r0
 801a94a:	460d      	mov	r5, r1
 801a94c:	4602      	mov	r2, r0
 801a94e:	460b      	mov	r3, r1
 801a950:	4640      	mov	r0, r8
 801a952:	4649      	mov	r1, r9
 801a954:	f7e5 fe58 	bl	8000608 <__aeabi_dmul>
 801a958:	2200      	movs	r2, #0
 801a95a:	e9cd 0100 	strd	r0, r1, [sp]
 801a95e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a962:	4620      	mov	r0, r4
 801a964:	4629      	mov	r1, r5
 801a966:	f7e5 fc97 	bl	8000298 <__aeabi_dsub>
 801a96a:	4602      	mov	r2, r0
 801a96c:	460b      	mov	r3, r1
 801a96e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a972:	f7e5 ff73 	bl	800085c <__aeabi_ddiv>
 801a976:	4632      	mov	r2, r6
 801a978:	4604      	mov	r4, r0
 801a97a:	460d      	mov	r5, r1
 801a97c:	463b      	mov	r3, r7
 801a97e:	4640      	mov	r0, r8
 801a980:	4649      	mov	r1, r9
 801a982:	f7e5 fe41 	bl	8000608 <__aeabi_dmul>
 801a986:	4632      	mov	r2, r6
 801a988:	463b      	mov	r3, r7
 801a98a:	f7e5 fc87 	bl	800029c <__adddf3>
 801a98e:	4602      	mov	r2, r0
 801a990:	460b      	mov	r3, r1
 801a992:	4620      	mov	r0, r4
 801a994:	4629      	mov	r1, r5
 801a996:	f7e5 fc7f 	bl	8000298 <__aeabi_dsub>
 801a99a:	4642      	mov	r2, r8
 801a99c:	464b      	mov	r3, r9
 801a99e:	f7e5 fc7b 	bl	8000298 <__aeabi_dsub>
 801a9a2:	460b      	mov	r3, r1
 801a9a4:	4602      	mov	r2, r0
 801a9a6:	493b      	ldr	r1, [pc, #236]	@ (801aa94 <__ieee754_pow+0xa6c>)
 801a9a8:	2000      	movs	r0, #0
 801a9aa:	f7e5 fc75 	bl	8000298 <__aeabi_dsub>
 801a9ae:	ec41 0b10 	vmov	d0, r0, r1
 801a9b2:	ee10 3a90 	vmov	r3, s1
 801a9b6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a9ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a9be:	da30      	bge.n	801aa22 <__ieee754_pow+0x9fa>
 801a9c0:	4650      	mov	r0, sl
 801a9c2:	f000 faf5 	bl	801afb0 <scalbn>
 801a9c6:	ec51 0b10 	vmov	r0, r1, d0
 801a9ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a9ce:	f7ff bbd2 	b.w	801a176 <__ieee754_pow+0x14e>
 801a9d2:	4c31      	ldr	r4, [pc, #196]	@ (801aa98 <__ieee754_pow+0xa70>)
 801a9d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a9d8:	42a3      	cmp	r3, r4
 801a9da:	d91a      	bls.n	801aa12 <__ieee754_pow+0x9ea>
 801a9dc:	4b2f      	ldr	r3, [pc, #188]	@ (801aa9c <__ieee754_pow+0xa74>)
 801a9de:	440b      	add	r3, r1
 801a9e0:	4303      	orrs	r3, r0
 801a9e2:	d009      	beq.n	801a9f8 <__ieee754_pow+0x9d0>
 801a9e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a9e8:	2200      	movs	r2, #0
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	f7e6 f87e 	bl	8000aec <__aeabi_dcmplt>
 801a9f0:	3800      	subs	r0, #0
 801a9f2:	bf18      	it	ne
 801a9f4:	2001      	movne	r0, #1
 801a9f6:	e42b      	b.n	801a250 <__ieee754_pow+0x228>
 801a9f8:	4642      	mov	r2, r8
 801a9fa:	464b      	mov	r3, r9
 801a9fc:	f7e5 fc4c 	bl	8000298 <__aeabi_dsub>
 801aa00:	4632      	mov	r2, r6
 801aa02:	463b      	mov	r3, r7
 801aa04:	f7e6 f886 	bl	8000b14 <__aeabi_dcmpge>
 801aa08:	2800      	cmp	r0, #0
 801aa0a:	d1eb      	bne.n	801a9e4 <__ieee754_pow+0x9bc>
 801aa0c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801aaac <__ieee754_pow+0xa84>
 801aa10:	e6f7      	b.n	801a802 <__ieee754_pow+0x7da>
 801aa12:	469a      	mov	sl, r3
 801aa14:	4b22      	ldr	r3, [pc, #136]	@ (801aaa0 <__ieee754_pow+0xa78>)
 801aa16:	459a      	cmp	sl, r3
 801aa18:	f63f aef3 	bhi.w	801a802 <__ieee754_pow+0x7da>
 801aa1c:	f8dd a010 	ldr.w	sl, [sp, #16]
 801aa20:	e715      	b.n	801a84e <__ieee754_pow+0x826>
 801aa22:	ec51 0b10 	vmov	r0, r1, d0
 801aa26:	4619      	mov	r1, r3
 801aa28:	e7cf      	b.n	801a9ca <__ieee754_pow+0x9a2>
 801aa2a:	491a      	ldr	r1, [pc, #104]	@ (801aa94 <__ieee754_pow+0xa6c>)
 801aa2c:	2000      	movs	r0, #0
 801aa2e:	f7ff bb18 	b.w	801a062 <__ieee754_pow+0x3a>
 801aa32:	2000      	movs	r0, #0
 801aa34:	2100      	movs	r1, #0
 801aa36:	f7ff bb14 	b.w	801a062 <__ieee754_pow+0x3a>
 801aa3a:	4630      	mov	r0, r6
 801aa3c:	4639      	mov	r1, r7
 801aa3e:	f7ff bb10 	b.w	801a062 <__ieee754_pow+0x3a>
 801aa42:	460c      	mov	r4, r1
 801aa44:	f7ff bb5e 	b.w	801a104 <__ieee754_pow+0xdc>
 801aa48:	2400      	movs	r4, #0
 801aa4a:	f7ff bb49 	b.w	801a0e0 <__ieee754_pow+0xb8>
 801aa4e:	bf00      	nop
 801aa50:	00000000 	.word	0x00000000
 801aa54:	3fe62e43 	.word	0x3fe62e43
 801aa58:	fefa39ef 	.word	0xfefa39ef
 801aa5c:	3fe62e42 	.word	0x3fe62e42
 801aa60:	0ca86c39 	.word	0x0ca86c39
 801aa64:	be205c61 	.word	0xbe205c61
 801aa68:	72bea4d0 	.word	0x72bea4d0
 801aa6c:	3e663769 	.word	0x3e663769
 801aa70:	c5d26bf1 	.word	0xc5d26bf1
 801aa74:	3ebbbd41 	.word	0x3ebbbd41
 801aa78:	af25de2c 	.word	0xaf25de2c
 801aa7c:	3f11566a 	.word	0x3f11566a
 801aa80:	16bebd93 	.word	0x16bebd93
 801aa84:	3f66c16c 	.word	0x3f66c16c
 801aa88:	5555553e 	.word	0x5555553e
 801aa8c:	3fc55555 	.word	0x3fc55555
 801aa90:	fff00000 	.word	0xfff00000
 801aa94:	3ff00000 	.word	0x3ff00000
 801aa98:	4090cbff 	.word	0x4090cbff
 801aa9c:	3f6f3400 	.word	0x3f6f3400
 801aaa0:	3fe00000 	.word	0x3fe00000
 801aaa4:	652b82fe 	.word	0x652b82fe
 801aaa8:	3c971547 	.word	0x3c971547
 801aaac:	4090cc00 	.word	0x4090cc00

0801aab0 <__ieee754_rem_pio2>:
 801aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aab4:	ec57 6b10 	vmov	r6, r7, d0
 801aab8:	4bc5      	ldr	r3, [pc, #788]	@ (801add0 <__ieee754_rem_pio2+0x320>)
 801aaba:	b08d      	sub	sp, #52	@ 0x34
 801aabc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801aac0:	4598      	cmp	r8, r3
 801aac2:	4604      	mov	r4, r0
 801aac4:	9704      	str	r7, [sp, #16]
 801aac6:	d807      	bhi.n	801aad8 <__ieee754_rem_pio2+0x28>
 801aac8:	2200      	movs	r2, #0
 801aaca:	2300      	movs	r3, #0
 801aacc:	ed80 0b00 	vstr	d0, [r0]
 801aad0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801aad4:	2500      	movs	r5, #0
 801aad6:	e028      	b.n	801ab2a <__ieee754_rem_pio2+0x7a>
 801aad8:	4bbe      	ldr	r3, [pc, #760]	@ (801add4 <__ieee754_rem_pio2+0x324>)
 801aada:	4598      	cmp	r8, r3
 801aadc:	d878      	bhi.n	801abd0 <__ieee754_rem_pio2+0x120>
 801aade:	9b04      	ldr	r3, [sp, #16]
 801aae0:	4dbd      	ldr	r5, [pc, #756]	@ (801add8 <__ieee754_rem_pio2+0x328>)
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	4630      	mov	r0, r6
 801aae6:	a3ac      	add	r3, pc, #688	@ (adr r3, 801ad98 <__ieee754_rem_pio2+0x2e8>)
 801aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaec:	4639      	mov	r1, r7
 801aaee:	dd38      	ble.n	801ab62 <__ieee754_rem_pio2+0xb2>
 801aaf0:	f7e5 fbd2 	bl	8000298 <__aeabi_dsub>
 801aaf4:	45a8      	cmp	r8, r5
 801aaf6:	4606      	mov	r6, r0
 801aaf8:	460f      	mov	r7, r1
 801aafa:	d01a      	beq.n	801ab32 <__ieee754_rem_pio2+0x82>
 801aafc:	a3a8      	add	r3, pc, #672	@ (adr r3, 801ada0 <__ieee754_rem_pio2+0x2f0>)
 801aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab02:	f7e5 fbc9 	bl	8000298 <__aeabi_dsub>
 801ab06:	4602      	mov	r2, r0
 801ab08:	460b      	mov	r3, r1
 801ab0a:	4680      	mov	r8, r0
 801ab0c:	4689      	mov	r9, r1
 801ab0e:	4630      	mov	r0, r6
 801ab10:	4639      	mov	r1, r7
 801ab12:	f7e5 fbc1 	bl	8000298 <__aeabi_dsub>
 801ab16:	a3a2      	add	r3, pc, #648	@ (adr r3, 801ada0 <__ieee754_rem_pio2+0x2f0>)
 801ab18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab1c:	f7e5 fbbc 	bl	8000298 <__aeabi_dsub>
 801ab20:	e9c4 8900 	strd	r8, r9, [r4]
 801ab24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ab28:	2501      	movs	r5, #1
 801ab2a:	4628      	mov	r0, r5
 801ab2c:	b00d      	add	sp, #52	@ 0x34
 801ab2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab32:	a39d      	add	r3, pc, #628	@ (adr r3, 801ada8 <__ieee754_rem_pio2+0x2f8>)
 801ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab38:	f7e5 fbae 	bl	8000298 <__aeabi_dsub>
 801ab3c:	a39c      	add	r3, pc, #624	@ (adr r3, 801adb0 <__ieee754_rem_pio2+0x300>)
 801ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab42:	4606      	mov	r6, r0
 801ab44:	460f      	mov	r7, r1
 801ab46:	f7e5 fba7 	bl	8000298 <__aeabi_dsub>
 801ab4a:	4602      	mov	r2, r0
 801ab4c:	460b      	mov	r3, r1
 801ab4e:	4680      	mov	r8, r0
 801ab50:	4689      	mov	r9, r1
 801ab52:	4630      	mov	r0, r6
 801ab54:	4639      	mov	r1, r7
 801ab56:	f7e5 fb9f 	bl	8000298 <__aeabi_dsub>
 801ab5a:	a395      	add	r3, pc, #596	@ (adr r3, 801adb0 <__ieee754_rem_pio2+0x300>)
 801ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab60:	e7dc      	b.n	801ab1c <__ieee754_rem_pio2+0x6c>
 801ab62:	f7e5 fb9b 	bl	800029c <__adddf3>
 801ab66:	45a8      	cmp	r8, r5
 801ab68:	4606      	mov	r6, r0
 801ab6a:	460f      	mov	r7, r1
 801ab6c:	d018      	beq.n	801aba0 <__ieee754_rem_pio2+0xf0>
 801ab6e:	a38c      	add	r3, pc, #560	@ (adr r3, 801ada0 <__ieee754_rem_pio2+0x2f0>)
 801ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab74:	f7e5 fb92 	bl	800029c <__adddf3>
 801ab78:	4602      	mov	r2, r0
 801ab7a:	460b      	mov	r3, r1
 801ab7c:	4680      	mov	r8, r0
 801ab7e:	4689      	mov	r9, r1
 801ab80:	4630      	mov	r0, r6
 801ab82:	4639      	mov	r1, r7
 801ab84:	f7e5 fb88 	bl	8000298 <__aeabi_dsub>
 801ab88:	a385      	add	r3, pc, #532	@ (adr r3, 801ada0 <__ieee754_rem_pio2+0x2f0>)
 801ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab8e:	f7e5 fb85 	bl	800029c <__adddf3>
 801ab92:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801ab96:	e9c4 8900 	strd	r8, r9, [r4]
 801ab9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ab9e:	e7c4      	b.n	801ab2a <__ieee754_rem_pio2+0x7a>
 801aba0:	a381      	add	r3, pc, #516	@ (adr r3, 801ada8 <__ieee754_rem_pio2+0x2f8>)
 801aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba6:	f7e5 fb79 	bl	800029c <__adddf3>
 801abaa:	a381      	add	r3, pc, #516	@ (adr r3, 801adb0 <__ieee754_rem_pio2+0x300>)
 801abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abb0:	4606      	mov	r6, r0
 801abb2:	460f      	mov	r7, r1
 801abb4:	f7e5 fb72 	bl	800029c <__adddf3>
 801abb8:	4602      	mov	r2, r0
 801abba:	460b      	mov	r3, r1
 801abbc:	4680      	mov	r8, r0
 801abbe:	4689      	mov	r9, r1
 801abc0:	4630      	mov	r0, r6
 801abc2:	4639      	mov	r1, r7
 801abc4:	f7e5 fb68 	bl	8000298 <__aeabi_dsub>
 801abc8:	a379      	add	r3, pc, #484	@ (adr r3, 801adb0 <__ieee754_rem_pio2+0x300>)
 801abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abce:	e7de      	b.n	801ab8e <__ieee754_rem_pio2+0xde>
 801abd0:	4b82      	ldr	r3, [pc, #520]	@ (801addc <__ieee754_rem_pio2+0x32c>)
 801abd2:	4598      	cmp	r8, r3
 801abd4:	f200 80d1 	bhi.w	801ad7a <__ieee754_rem_pio2+0x2ca>
 801abd8:	f7fe ff1e 	bl	8019a18 <fabs>
 801abdc:	ec57 6b10 	vmov	r6, r7, d0
 801abe0:	a375      	add	r3, pc, #468	@ (adr r3, 801adb8 <__ieee754_rem_pio2+0x308>)
 801abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abe6:	4630      	mov	r0, r6
 801abe8:	4639      	mov	r1, r7
 801abea:	f7e5 fd0d 	bl	8000608 <__aeabi_dmul>
 801abee:	4b7c      	ldr	r3, [pc, #496]	@ (801ade0 <__ieee754_rem_pio2+0x330>)
 801abf0:	2200      	movs	r2, #0
 801abf2:	f7e5 fb53 	bl	800029c <__adddf3>
 801abf6:	f7e5 ffb7 	bl	8000b68 <__aeabi_d2iz>
 801abfa:	4605      	mov	r5, r0
 801abfc:	f7e5 fc9a 	bl	8000534 <__aeabi_i2d>
 801ac00:	4602      	mov	r2, r0
 801ac02:	460b      	mov	r3, r1
 801ac04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ac08:	a363      	add	r3, pc, #396	@ (adr r3, 801ad98 <__ieee754_rem_pio2+0x2e8>)
 801ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0e:	f7e5 fcfb 	bl	8000608 <__aeabi_dmul>
 801ac12:	4602      	mov	r2, r0
 801ac14:	460b      	mov	r3, r1
 801ac16:	4630      	mov	r0, r6
 801ac18:	4639      	mov	r1, r7
 801ac1a:	f7e5 fb3d 	bl	8000298 <__aeabi_dsub>
 801ac1e:	a360      	add	r3, pc, #384	@ (adr r3, 801ada0 <__ieee754_rem_pio2+0x2f0>)
 801ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac24:	4682      	mov	sl, r0
 801ac26:	468b      	mov	fp, r1
 801ac28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ac2c:	f7e5 fcec 	bl	8000608 <__aeabi_dmul>
 801ac30:	2d1f      	cmp	r5, #31
 801ac32:	4606      	mov	r6, r0
 801ac34:	460f      	mov	r7, r1
 801ac36:	dc0c      	bgt.n	801ac52 <__ieee754_rem_pio2+0x1a2>
 801ac38:	4b6a      	ldr	r3, [pc, #424]	@ (801ade4 <__ieee754_rem_pio2+0x334>)
 801ac3a:	1e6a      	subs	r2, r5, #1
 801ac3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac40:	4543      	cmp	r3, r8
 801ac42:	d006      	beq.n	801ac52 <__ieee754_rem_pio2+0x1a2>
 801ac44:	4632      	mov	r2, r6
 801ac46:	463b      	mov	r3, r7
 801ac48:	4650      	mov	r0, sl
 801ac4a:	4659      	mov	r1, fp
 801ac4c:	f7e5 fb24 	bl	8000298 <__aeabi_dsub>
 801ac50:	e00e      	b.n	801ac70 <__ieee754_rem_pio2+0x1c0>
 801ac52:	463b      	mov	r3, r7
 801ac54:	4632      	mov	r2, r6
 801ac56:	4650      	mov	r0, sl
 801ac58:	4659      	mov	r1, fp
 801ac5a:	f7e5 fb1d 	bl	8000298 <__aeabi_dsub>
 801ac5e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ac62:	9305      	str	r3, [sp, #20]
 801ac64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ac68:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801ac6c:	2b10      	cmp	r3, #16
 801ac6e:	dc02      	bgt.n	801ac76 <__ieee754_rem_pio2+0x1c6>
 801ac70:	e9c4 0100 	strd	r0, r1, [r4]
 801ac74:	e039      	b.n	801acea <__ieee754_rem_pio2+0x23a>
 801ac76:	a34c      	add	r3, pc, #304	@ (adr r3, 801ada8 <__ieee754_rem_pio2+0x2f8>)
 801ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ac80:	f7e5 fcc2 	bl	8000608 <__aeabi_dmul>
 801ac84:	4606      	mov	r6, r0
 801ac86:	460f      	mov	r7, r1
 801ac88:	4602      	mov	r2, r0
 801ac8a:	460b      	mov	r3, r1
 801ac8c:	4650      	mov	r0, sl
 801ac8e:	4659      	mov	r1, fp
 801ac90:	f7e5 fb02 	bl	8000298 <__aeabi_dsub>
 801ac94:	4602      	mov	r2, r0
 801ac96:	460b      	mov	r3, r1
 801ac98:	4680      	mov	r8, r0
 801ac9a:	4689      	mov	r9, r1
 801ac9c:	4650      	mov	r0, sl
 801ac9e:	4659      	mov	r1, fp
 801aca0:	f7e5 fafa 	bl	8000298 <__aeabi_dsub>
 801aca4:	4632      	mov	r2, r6
 801aca6:	463b      	mov	r3, r7
 801aca8:	f7e5 faf6 	bl	8000298 <__aeabi_dsub>
 801acac:	a340      	add	r3, pc, #256	@ (adr r3, 801adb0 <__ieee754_rem_pio2+0x300>)
 801acae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acb2:	4606      	mov	r6, r0
 801acb4:	460f      	mov	r7, r1
 801acb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801acba:	f7e5 fca5 	bl	8000608 <__aeabi_dmul>
 801acbe:	4632      	mov	r2, r6
 801acc0:	463b      	mov	r3, r7
 801acc2:	f7e5 fae9 	bl	8000298 <__aeabi_dsub>
 801acc6:	4602      	mov	r2, r0
 801acc8:	460b      	mov	r3, r1
 801acca:	4606      	mov	r6, r0
 801accc:	460f      	mov	r7, r1
 801acce:	4640      	mov	r0, r8
 801acd0:	4649      	mov	r1, r9
 801acd2:	f7e5 fae1 	bl	8000298 <__aeabi_dsub>
 801acd6:	9a05      	ldr	r2, [sp, #20]
 801acd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801acdc:	1ad3      	subs	r3, r2, r3
 801acde:	2b31      	cmp	r3, #49	@ 0x31
 801ace0:	dc20      	bgt.n	801ad24 <__ieee754_rem_pio2+0x274>
 801ace2:	e9c4 0100 	strd	r0, r1, [r4]
 801ace6:	46c2      	mov	sl, r8
 801ace8:	46cb      	mov	fp, r9
 801acea:	e9d4 8900 	ldrd	r8, r9, [r4]
 801acee:	4650      	mov	r0, sl
 801acf0:	4642      	mov	r2, r8
 801acf2:	464b      	mov	r3, r9
 801acf4:	4659      	mov	r1, fp
 801acf6:	f7e5 facf 	bl	8000298 <__aeabi_dsub>
 801acfa:	463b      	mov	r3, r7
 801acfc:	4632      	mov	r2, r6
 801acfe:	f7e5 facb 	bl	8000298 <__aeabi_dsub>
 801ad02:	9b04      	ldr	r3, [sp, #16]
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ad0a:	f6bf af0e 	bge.w	801ab2a <__ieee754_rem_pio2+0x7a>
 801ad0e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801ad12:	6063      	str	r3, [r4, #4]
 801ad14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ad18:	f8c4 8000 	str.w	r8, [r4]
 801ad1c:	60a0      	str	r0, [r4, #8]
 801ad1e:	60e3      	str	r3, [r4, #12]
 801ad20:	426d      	negs	r5, r5
 801ad22:	e702      	b.n	801ab2a <__ieee754_rem_pio2+0x7a>
 801ad24:	a326      	add	r3, pc, #152	@ (adr r3, 801adc0 <__ieee754_rem_pio2+0x310>)
 801ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ad2e:	f7e5 fc6b 	bl	8000608 <__aeabi_dmul>
 801ad32:	4606      	mov	r6, r0
 801ad34:	460f      	mov	r7, r1
 801ad36:	4602      	mov	r2, r0
 801ad38:	460b      	mov	r3, r1
 801ad3a:	4640      	mov	r0, r8
 801ad3c:	4649      	mov	r1, r9
 801ad3e:	f7e5 faab 	bl	8000298 <__aeabi_dsub>
 801ad42:	4602      	mov	r2, r0
 801ad44:	460b      	mov	r3, r1
 801ad46:	4682      	mov	sl, r0
 801ad48:	468b      	mov	fp, r1
 801ad4a:	4640      	mov	r0, r8
 801ad4c:	4649      	mov	r1, r9
 801ad4e:	f7e5 faa3 	bl	8000298 <__aeabi_dsub>
 801ad52:	4632      	mov	r2, r6
 801ad54:	463b      	mov	r3, r7
 801ad56:	f7e5 fa9f 	bl	8000298 <__aeabi_dsub>
 801ad5a:	a31b      	add	r3, pc, #108	@ (adr r3, 801adc8 <__ieee754_rem_pio2+0x318>)
 801ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad60:	4606      	mov	r6, r0
 801ad62:	460f      	mov	r7, r1
 801ad64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ad68:	f7e5 fc4e 	bl	8000608 <__aeabi_dmul>
 801ad6c:	4632      	mov	r2, r6
 801ad6e:	463b      	mov	r3, r7
 801ad70:	f7e5 fa92 	bl	8000298 <__aeabi_dsub>
 801ad74:	4606      	mov	r6, r0
 801ad76:	460f      	mov	r7, r1
 801ad78:	e764      	b.n	801ac44 <__ieee754_rem_pio2+0x194>
 801ad7a:	4b1b      	ldr	r3, [pc, #108]	@ (801ade8 <__ieee754_rem_pio2+0x338>)
 801ad7c:	4598      	cmp	r8, r3
 801ad7e:	d935      	bls.n	801adec <__ieee754_rem_pio2+0x33c>
 801ad80:	4632      	mov	r2, r6
 801ad82:	463b      	mov	r3, r7
 801ad84:	4630      	mov	r0, r6
 801ad86:	4639      	mov	r1, r7
 801ad88:	f7e5 fa86 	bl	8000298 <__aeabi_dsub>
 801ad8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ad90:	e9c4 0100 	strd	r0, r1, [r4]
 801ad94:	e69e      	b.n	801aad4 <__ieee754_rem_pio2+0x24>
 801ad96:	bf00      	nop
 801ad98:	54400000 	.word	0x54400000
 801ad9c:	3ff921fb 	.word	0x3ff921fb
 801ada0:	1a626331 	.word	0x1a626331
 801ada4:	3dd0b461 	.word	0x3dd0b461
 801ada8:	1a600000 	.word	0x1a600000
 801adac:	3dd0b461 	.word	0x3dd0b461
 801adb0:	2e037073 	.word	0x2e037073
 801adb4:	3ba3198a 	.word	0x3ba3198a
 801adb8:	6dc9c883 	.word	0x6dc9c883
 801adbc:	3fe45f30 	.word	0x3fe45f30
 801adc0:	2e000000 	.word	0x2e000000
 801adc4:	3ba3198a 	.word	0x3ba3198a
 801adc8:	252049c1 	.word	0x252049c1
 801adcc:	397b839a 	.word	0x397b839a
 801add0:	3fe921fb 	.word	0x3fe921fb
 801add4:	4002d97b 	.word	0x4002d97b
 801add8:	3ff921fb 	.word	0x3ff921fb
 801addc:	413921fb 	.word	0x413921fb
 801ade0:	3fe00000 	.word	0x3fe00000
 801ade4:	0802f4f8 	.word	0x0802f4f8
 801ade8:	7fefffff 	.word	0x7fefffff
 801adec:	ea4f 5528 	mov.w	r5, r8, asr #20
 801adf0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801adf4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801adf8:	4630      	mov	r0, r6
 801adfa:	460f      	mov	r7, r1
 801adfc:	f7e5 feb4 	bl	8000b68 <__aeabi_d2iz>
 801ae00:	f7e5 fb98 	bl	8000534 <__aeabi_i2d>
 801ae04:	4602      	mov	r2, r0
 801ae06:	460b      	mov	r3, r1
 801ae08:	4630      	mov	r0, r6
 801ae0a:	4639      	mov	r1, r7
 801ae0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ae10:	f7e5 fa42 	bl	8000298 <__aeabi_dsub>
 801ae14:	4b22      	ldr	r3, [pc, #136]	@ (801aea0 <__ieee754_rem_pio2+0x3f0>)
 801ae16:	2200      	movs	r2, #0
 801ae18:	f7e5 fbf6 	bl	8000608 <__aeabi_dmul>
 801ae1c:	460f      	mov	r7, r1
 801ae1e:	4606      	mov	r6, r0
 801ae20:	f7e5 fea2 	bl	8000b68 <__aeabi_d2iz>
 801ae24:	f7e5 fb86 	bl	8000534 <__aeabi_i2d>
 801ae28:	4602      	mov	r2, r0
 801ae2a:	460b      	mov	r3, r1
 801ae2c:	4630      	mov	r0, r6
 801ae2e:	4639      	mov	r1, r7
 801ae30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ae34:	f7e5 fa30 	bl	8000298 <__aeabi_dsub>
 801ae38:	4b19      	ldr	r3, [pc, #100]	@ (801aea0 <__ieee754_rem_pio2+0x3f0>)
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	f7e5 fbe4 	bl	8000608 <__aeabi_dmul>
 801ae40:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801ae44:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801ae48:	f04f 0803 	mov.w	r8, #3
 801ae4c:	2600      	movs	r6, #0
 801ae4e:	2700      	movs	r7, #0
 801ae50:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801ae54:	4632      	mov	r2, r6
 801ae56:	463b      	mov	r3, r7
 801ae58:	46c2      	mov	sl, r8
 801ae5a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801ae5e:	f7e5 fe3b 	bl	8000ad8 <__aeabi_dcmpeq>
 801ae62:	2800      	cmp	r0, #0
 801ae64:	d1f4      	bne.n	801ae50 <__ieee754_rem_pio2+0x3a0>
 801ae66:	4b0f      	ldr	r3, [pc, #60]	@ (801aea4 <__ieee754_rem_pio2+0x3f4>)
 801ae68:	9301      	str	r3, [sp, #4]
 801ae6a:	2302      	movs	r3, #2
 801ae6c:	9300      	str	r3, [sp, #0]
 801ae6e:	462a      	mov	r2, r5
 801ae70:	4653      	mov	r3, sl
 801ae72:	4621      	mov	r1, r4
 801ae74:	a806      	add	r0, sp, #24
 801ae76:	f000 f957 	bl	801b128 <__kernel_rem_pio2>
 801ae7a:	9b04      	ldr	r3, [sp, #16]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	4605      	mov	r5, r0
 801ae80:	f6bf ae53 	bge.w	801ab2a <__ieee754_rem_pio2+0x7a>
 801ae84:	e9d4 2100 	ldrd	r2, r1, [r4]
 801ae88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ae8c:	e9c4 2300 	strd	r2, r3, [r4]
 801ae90:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801ae94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ae98:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801ae9c:	e740      	b.n	801ad20 <__ieee754_rem_pio2+0x270>
 801ae9e:	bf00      	nop
 801aea0:	41700000 	.word	0x41700000
 801aea4:	0802f578 	.word	0x0802f578

0801aea8 <__ieee754_fmodf>:
 801aea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aeaa:	ee10 5a90 	vmov	r5, s1
 801aeae:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 801aeb2:	1e43      	subs	r3, r0, #1
 801aeb4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801aeb8:	d206      	bcs.n	801aec8 <__ieee754_fmodf+0x20>
 801aeba:	ee10 3a10 	vmov	r3, s0
 801aebe:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 801aec2:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 801aec6:	d304      	bcc.n	801aed2 <__ieee754_fmodf+0x2a>
 801aec8:	ee60 0a20 	vmul.f32	s1, s0, s1
 801aecc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801aed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aed2:	4286      	cmp	r6, r0
 801aed4:	dbfc      	blt.n	801aed0 <__ieee754_fmodf+0x28>
 801aed6:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 801aeda:	d105      	bne.n	801aee8 <__ieee754_fmodf+0x40>
 801aedc:	4b32      	ldr	r3, [pc, #200]	@ (801afa8 <__ieee754_fmodf+0x100>)
 801aede:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 801aee2:	ed93 0a00 	vldr	s0, [r3]
 801aee6:	e7f3      	b.n	801aed0 <__ieee754_fmodf+0x28>
 801aee8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801aeec:	d140      	bne.n	801af70 <__ieee754_fmodf+0xc8>
 801aeee:	0232      	lsls	r2, r6, #8
 801aef0:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 801aef4:	2a00      	cmp	r2, #0
 801aef6:	dc38      	bgt.n	801af6a <__ieee754_fmodf+0xc2>
 801aef8:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 801aefc:	d13e      	bne.n	801af7c <__ieee754_fmodf+0xd4>
 801aefe:	0207      	lsls	r7, r0, #8
 801af00:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 801af04:	2f00      	cmp	r7, #0
 801af06:	da36      	bge.n	801af76 <__ieee754_fmodf+0xce>
 801af08:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 801af0c:	bfb9      	ittee	lt
 801af0e:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 801af12:	1a5b      	sublt	r3, r3, r1
 801af14:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 801af18:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 801af1c:	bfb8      	it	lt
 801af1e:	fa06 f303 	lsllt.w	r3, r6, r3
 801af22:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801af26:	bfb5      	itete	lt
 801af28:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 801af2c:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 801af30:	1aad      	sublt	r5, r5, r2
 801af32:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 801af36:	bfb8      	it	lt
 801af38:	40a8      	lsllt	r0, r5
 801af3a:	1a89      	subs	r1, r1, r2
 801af3c:	1a1d      	subs	r5, r3, r0
 801af3e:	bb01      	cbnz	r1, 801af82 <__ieee754_fmodf+0xda>
 801af40:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 801af44:	bf38      	it	cc
 801af46:	462b      	movcc	r3, r5
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d0c7      	beq.n	801aedc <__ieee754_fmodf+0x34>
 801af4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801af50:	db1f      	blt.n	801af92 <__ieee754_fmodf+0xea>
 801af52:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801af56:	db1f      	blt.n	801af98 <__ieee754_fmodf+0xf0>
 801af58:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 801af5c:	327f      	adds	r2, #127	@ 0x7f
 801af5e:	4323      	orrs	r3, r4
 801af60:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801af64:	ee00 3a10 	vmov	s0, r3
 801af68:	e7b2      	b.n	801aed0 <__ieee754_fmodf+0x28>
 801af6a:	3901      	subs	r1, #1
 801af6c:	0052      	lsls	r2, r2, #1
 801af6e:	e7c1      	b.n	801aef4 <__ieee754_fmodf+0x4c>
 801af70:	15f1      	asrs	r1, r6, #23
 801af72:	397f      	subs	r1, #127	@ 0x7f
 801af74:	e7c0      	b.n	801aef8 <__ieee754_fmodf+0x50>
 801af76:	3a01      	subs	r2, #1
 801af78:	007f      	lsls	r7, r7, #1
 801af7a:	e7c3      	b.n	801af04 <__ieee754_fmodf+0x5c>
 801af7c:	15c2      	asrs	r2, r0, #23
 801af7e:	3a7f      	subs	r2, #127	@ 0x7f
 801af80:	e7c2      	b.n	801af08 <__ieee754_fmodf+0x60>
 801af82:	2d00      	cmp	r5, #0
 801af84:	da02      	bge.n	801af8c <__ieee754_fmodf+0xe4>
 801af86:	005b      	lsls	r3, r3, #1
 801af88:	3901      	subs	r1, #1
 801af8a:	e7d7      	b.n	801af3c <__ieee754_fmodf+0x94>
 801af8c:	d0a6      	beq.n	801aedc <__ieee754_fmodf+0x34>
 801af8e:	006b      	lsls	r3, r5, #1
 801af90:	e7fa      	b.n	801af88 <__ieee754_fmodf+0xe0>
 801af92:	005b      	lsls	r3, r3, #1
 801af94:	3a01      	subs	r2, #1
 801af96:	e7d9      	b.n	801af4c <__ieee754_fmodf+0xa4>
 801af98:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 801af9c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801afa0:	3282      	adds	r2, #130	@ 0x82
 801afa2:	4113      	asrs	r3, r2
 801afa4:	4323      	orrs	r3, r4
 801afa6:	e7dd      	b.n	801af64 <__ieee754_fmodf+0xbc>
 801afa8:	0802f680 	.word	0x0802f680
 801afac:	00000000 	.word	0x00000000

0801afb0 <scalbn>:
 801afb0:	b570      	push	{r4, r5, r6, lr}
 801afb2:	ec55 4b10 	vmov	r4, r5, d0
 801afb6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801afba:	4606      	mov	r6, r0
 801afbc:	462b      	mov	r3, r5
 801afbe:	b991      	cbnz	r1, 801afe6 <scalbn+0x36>
 801afc0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801afc4:	4323      	orrs	r3, r4
 801afc6:	d03d      	beq.n	801b044 <scalbn+0x94>
 801afc8:	4b35      	ldr	r3, [pc, #212]	@ (801b0a0 <scalbn+0xf0>)
 801afca:	4620      	mov	r0, r4
 801afcc:	4629      	mov	r1, r5
 801afce:	2200      	movs	r2, #0
 801afd0:	f7e5 fb1a 	bl	8000608 <__aeabi_dmul>
 801afd4:	4b33      	ldr	r3, [pc, #204]	@ (801b0a4 <scalbn+0xf4>)
 801afd6:	429e      	cmp	r6, r3
 801afd8:	4604      	mov	r4, r0
 801afda:	460d      	mov	r5, r1
 801afdc:	da0f      	bge.n	801affe <scalbn+0x4e>
 801afde:	a328      	add	r3, pc, #160	@ (adr r3, 801b080 <scalbn+0xd0>)
 801afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afe4:	e01e      	b.n	801b024 <scalbn+0x74>
 801afe6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801afea:	4291      	cmp	r1, r2
 801afec:	d10b      	bne.n	801b006 <scalbn+0x56>
 801afee:	4622      	mov	r2, r4
 801aff0:	4620      	mov	r0, r4
 801aff2:	4629      	mov	r1, r5
 801aff4:	f7e5 f952 	bl	800029c <__adddf3>
 801aff8:	4604      	mov	r4, r0
 801affa:	460d      	mov	r5, r1
 801affc:	e022      	b.n	801b044 <scalbn+0x94>
 801affe:	460b      	mov	r3, r1
 801b000:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b004:	3936      	subs	r1, #54	@ 0x36
 801b006:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801b00a:	4296      	cmp	r6, r2
 801b00c:	dd0d      	ble.n	801b02a <scalbn+0x7a>
 801b00e:	2d00      	cmp	r5, #0
 801b010:	a11d      	add	r1, pc, #116	@ (adr r1, 801b088 <scalbn+0xd8>)
 801b012:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b016:	da02      	bge.n	801b01e <scalbn+0x6e>
 801b018:	a11d      	add	r1, pc, #116	@ (adr r1, 801b090 <scalbn+0xe0>)
 801b01a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b01e:	a31a      	add	r3, pc, #104	@ (adr r3, 801b088 <scalbn+0xd8>)
 801b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b024:	f7e5 faf0 	bl	8000608 <__aeabi_dmul>
 801b028:	e7e6      	b.n	801aff8 <scalbn+0x48>
 801b02a:	1872      	adds	r2, r6, r1
 801b02c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801b030:	428a      	cmp	r2, r1
 801b032:	dcec      	bgt.n	801b00e <scalbn+0x5e>
 801b034:	2a00      	cmp	r2, #0
 801b036:	dd08      	ble.n	801b04a <scalbn+0x9a>
 801b038:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801b03c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801b040:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b044:	ec45 4b10 	vmov	d0, r4, r5
 801b048:	bd70      	pop	{r4, r5, r6, pc}
 801b04a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801b04e:	da08      	bge.n	801b062 <scalbn+0xb2>
 801b050:	2d00      	cmp	r5, #0
 801b052:	a10b      	add	r1, pc, #44	@ (adr r1, 801b080 <scalbn+0xd0>)
 801b054:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b058:	dac1      	bge.n	801afde <scalbn+0x2e>
 801b05a:	a10f      	add	r1, pc, #60	@ (adr r1, 801b098 <scalbn+0xe8>)
 801b05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b060:	e7bd      	b.n	801afde <scalbn+0x2e>
 801b062:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801b066:	3236      	adds	r2, #54	@ 0x36
 801b068:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801b06c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b070:	4620      	mov	r0, r4
 801b072:	4b0d      	ldr	r3, [pc, #52]	@ (801b0a8 <scalbn+0xf8>)
 801b074:	4629      	mov	r1, r5
 801b076:	2200      	movs	r2, #0
 801b078:	e7d4      	b.n	801b024 <scalbn+0x74>
 801b07a:	bf00      	nop
 801b07c:	f3af 8000 	nop.w
 801b080:	c2f8f359 	.word	0xc2f8f359
 801b084:	01a56e1f 	.word	0x01a56e1f
 801b088:	8800759c 	.word	0x8800759c
 801b08c:	7e37e43c 	.word	0x7e37e43c
 801b090:	8800759c 	.word	0x8800759c
 801b094:	fe37e43c 	.word	0xfe37e43c
 801b098:	c2f8f359 	.word	0xc2f8f359
 801b09c:	81a56e1f 	.word	0x81a56e1f
 801b0a0:	43500000 	.word	0x43500000
 801b0a4:	ffff3cb0 	.word	0xffff3cb0
 801b0a8:	3c900000 	.word	0x3c900000

0801b0ac <with_errno>:
 801b0ac:	b510      	push	{r4, lr}
 801b0ae:	ed2d 8b02 	vpush	{d8}
 801b0b2:	eeb0 8a40 	vmov.f32	s16, s0
 801b0b6:	eef0 8a60 	vmov.f32	s17, s1
 801b0ba:	4604      	mov	r4, r0
 801b0bc:	f7fa ff30 	bl	8015f20 <__errno>
 801b0c0:	eeb0 0a48 	vmov.f32	s0, s16
 801b0c4:	eef0 0a68 	vmov.f32	s1, s17
 801b0c8:	ecbd 8b02 	vpop	{d8}
 801b0cc:	6004      	str	r4, [r0, #0]
 801b0ce:	bd10      	pop	{r4, pc}

0801b0d0 <xflow>:
 801b0d0:	4603      	mov	r3, r0
 801b0d2:	b507      	push	{r0, r1, r2, lr}
 801b0d4:	ec51 0b10 	vmov	r0, r1, d0
 801b0d8:	b183      	cbz	r3, 801b0fc <xflow+0x2c>
 801b0da:	4602      	mov	r2, r0
 801b0dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b0e0:	e9cd 2300 	strd	r2, r3, [sp]
 801b0e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b0e8:	f7e5 fa8e 	bl	8000608 <__aeabi_dmul>
 801b0ec:	ec41 0b10 	vmov	d0, r0, r1
 801b0f0:	2022      	movs	r0, #34	@ 0x22
 801b0f2:	b003      	add	sp, #12
 801b0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b0f8:	f7ff bfd8 	b.w	801b0ac <with_errno>
 801b0fc:	4602      	mov	r2, r0
 801b0fe:	460b      	mov	r3, r1
 801b100:	e7ee      	b.n	801b0e0 <xflow+0x10>
 801b102:	0000      	movs	r0, r0
 801b104:	0000      	movs	r0, r0
	...

0801b108 <__math_uflow>:
 801b108:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b110 <__math_uflow+0x8>
 801b10c:	f7ff bfe0 	b.w	801b0d0 <xflow>
 801b110:	00000000 	.word	0x00000000
 801b114:	10000000 	.word	0x10000000

0801b118 <__math_oflow>:
 801b118:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b120 <__math_oflow+0x8>
 801b11c:	f7ff bfd8 	b.w	801b0d0 <xflow>
 801b120:	00000000 	.word	0x00000000
 801b124:	70000000 	.word	0x70000000

0801b128 <__kernel_rem_pio2>:
 801b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b12c:	ed2d 8b02 	vpush	{d8}
 801b130:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801b134:	f112 0f14 	cmn.w	r2, #20
 801b138:	9306      	str	r3, [sp, #24]
 801b13a:	9104      	str	r1, [sp, #16]
 801b13c:	4bbe      	ldr	r3, [pc, #760]	@ (801b438 <__kernel_rem_pio2+0x310>)
 801b13e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801b140:	9008      	str	r0, [sp, #32]
 801b142:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b146:	9300      	str	r3, [sp, #0]
 801b148:	9b06      	ldr	r3, [sp, #24]
 801b14a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801b14e:	bfa8      	it	ge
 801b150:	1ed4      	subge	r4, r2, #3
 801b152:	9305      	str	r3, [sp, #20]
 801b154:	bfb2      	itee	lt
 801b156:	2400      	movlt	r4, #0
 801b158:	2318      	movge	r3, #24
 801b15a:	fb94 f4f3 	sdivge	r4, r4, r3
 801b15e:	f06f 0317 	mvn.w	r3, #23
 801b162:	fb04 3303 	mla	r3, r4, r3, r3
 801b166:	eb03 0b02 	add.w	fp, r3, r2
 801b16a:	9b00      	ldr	r3, [sp, #0]
 801b16c:	9a05      	ldr	r2, [sp, #20]
 801b16e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801b428 <__kernel_rem_pio2+0x300>
 801b172:	eb03 0802 	add.w	r8, r3, r2
 801b176:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801b178:	1aa7      	subs	r7, r4, r2
 801b17a:	ae20      	add	r6, sp, #128	@ 0x80
 801b17c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b180:	2500      	movs	r5, #0
 801b182:	4545      	cmp	r5, r8
 801b184:	dd13      	ble.n	801b1ae <__kernel_rem_pio2+0x86>
 801b186:	9b06      	ldr	r3, [sp, #24]
 801b188:	aa20      	add	r2, sp, #128	@ 0x80
 801b18a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b18e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801b192:	f04f 0800 	mov.w	r8, #0
 801b196:	9b00      	ldr	r3, [sp, #0]
 801b198:	4598      	cmp	r8, r3
 801b19a:	dc31      	bgt.n	801b200 <__kernel_rem_pio2+0xd8>
 801b19c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801b428 <__kernel_rem_pio2+0x300>
 801b1a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b1a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b1a8:	462f      	mov	r7, r5
 801b1aa:	2600      	movs	r6, #0
 801b1ac:	e01b      	b.n	801b1e6 <__kernel_rem_pio2+0xbe>
 801b1ae:	42ef      	cmn	r7, r5
 801b1b0:	d407      	bmi.n	801b1c2 <__kernel_rem_pio2+0x9a>
 801b1b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b1b6:	f7e5 f9bd 	bl	8000534 <__aeabi_i2d>
 801b1ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b1be:	3501      	adds	r5, #1
 801b1c0:	e7df      	b.n	801b182 <__kernel_rem_pio2+0x5a>
 801b1c2:	ec51 0b18 	vmov	r0, r1, d8
 801b1c6:	e7f8      	b.n	801b1ba <__kernel_rem_pio2+0x92>
 801b1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b1cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b1d0:	f7e5 fa1a 	bl	8000608 <__aeabi_dmul>
 801b1d4:	4602      	mov	r2, r0
 801b1d6:	460b      	mov	r3, r1
 801b1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b1dc:	f7e5 f85e 	bl	800029c <__adddf3>
 801b1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b1e4:	3601      	adds	r6, #1
 801b1e6:	9b05      	ldr	r3, [sp, #20]
 801b1e8:	429e      	cmp	r6, r3
 801b1ea:	f1a7 0708 	sub.w	r7, r7, #8
 801b1ee:	ddeb      	ble.n	801b1c8 <__kernel_rem_pio2+0xa0>
 801b1f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b1f4:	f108 0801 	add.w	r8, r8, #1
 801b1f8:	ecaa 7b02 	vstmia	sl!, {d7}
 801b1fc:	3508      	adds	r5, #8
 801b1fe:	e7ca      	b.n	801b196 <__kernel_rem_pio2+0x6e>
 801b200:	9b00      	ldr	r3, [sp, #0]
 801b202:	f8dd 8000 	ldr.w	r8, [sp]
 801b206:	aa0c      	add	r2, sp, #48	@ 0x30
 801b208:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b20c:	930a      	str	r3, [sp, #40]	@ 0x28
 801b20e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801b210:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b214:	9309      	str	r3, [sp, #36]	@ 0x24
 801b216:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801b21a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b21c:	ab98      	add	r3, sp, #608	@ 0x260
 801b21e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b222:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801b226:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b22a:	ac0c      	add	r4, sp, #48	@ 0x30
 801b22c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801b22e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801b232:	46a1      	mov	r9, r4
 801b234:	46c2      	mov	sl, r8
 801b236:	f1ba 0f00 	cmp.w	sl, #0
 801b23a:	f1a5 0508 	sub.w	r5, r5, #8
 801b23e:	dc77      	bgt.n	801b330 <__kernel_rem_pio2+0x208>
 801b240:	4658      	mov	r0, fp
 801b242:	ed9d 0b02 	vldr	d0, [sp, #8]
 801b246:	f7ff feb3 	bl	801afb0 <scalbn>
 801b24a:	ec57 6b10 	vmov	r6, r7, d0
 801b24e:	2200      	movs	r2, #0
 801b250:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801b254:	4630      	mov	r0, r6
 801b256:	4639      	mov	r1, r7
 801b258:	f7e5 f9d6 	bl	8000608 <__aeabi_dmul>
 801b25c:	ec41 0b10 	vmov	d0, r0, r1
 801b260:	f000 faba 	bl	801b7d8 <floor>
 801b264:	4b75      	ldr	r3, [pc, #468]	@ (801b43c <__kernel_rem_pio2+0x314>)
 801b266:	ec51 0b10 	vmov	r0, r1, d0
 801b26a:	2200      	movs	r2, #0
 801b26c:	f7e5 f9cc 	bl	8000608 <__aeabi_dmul>
 801b270:	4602      	mov	r2, r0
 801b272:	460b      	mov	r3, r1
 801b274:	4630      	mov	r0, r6
 801b276:	4639      	mov	r1, r7
 801b278:	f7e5 f80e 	bl	8000298 <__aeabi_dsub>
 801b27c:	460f      	mov	r7, r1
 801b27e:	4606      	mov	r6, r0
 801b280:	f7e5 fc72 	bl	8000b68 <__aeabi_d2iz>
 801b284:	9002      	str	r0, [sp, #8]
 801b286:	f7e5 f955 	bl	8000534 <__aeabi_i2d>
 801b28a:	4602      	mov	r2, r0
 801b28c:	460b      	mov	r3, r1
 801b28e:	4630      	mov	r0, r6
 801b290:	4639      	mov	r1, r7
 801b292:	f7e5 f801 	bl	8000298 <__aeabi_dsub>
 801b296:	f1bb 0f00 	cmp.w	fp, #0
 801b29a:	4606      	mov	r6, r0
 801b29c:	460f      	mov	r7, r1
 801b29e:	dd6c      	ble.n	801b37a <__kernel_rem_pio2+0x252>
 801b2a0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801b2a4:	ab0c      	add	r3, sp, #48	@ 0x30
 801b2a6:	9d02      	ldr	r5, [sp, #8]
 801b2a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b2ac:	f1cb 0018 	rsb	r0, fp, #24
 801b2b0:	fa43 f200 	asr.w	r2, r3, r0
 801b2b4:	4415      	add	r5, r2
 801b2b6:	4082      	lsls	r2, r0
 801b2b8:	1a9b      	subs	r3, r3, r2
 801b2ba:	aa0c      	add	r2, sp, #48	@ 0x30
 801b2bc:	9502      	str	r5, [sp, #8]
 801b2be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b2c2:	f1cb 0217 	rsb	r2, fp, #23
 801b2c6:	fa43 f902 	asr.w	r9, r3, r2
 801b2ca:	f1b9 0f00 	cmp.w	r9, #0
 801b2ce:	dd64      	ble.n	801b39a <__kernel_rem_pio2+0x272>
 801b2d0:	9b02      	ldr	r3, [sp, #8]
 801b2d2:	2200      	movs	r2, #0
 801b2d4:	3301      	adds	r3, #1
 801b2d6:	9302      	str	r3, [sp, #8]
 801b2d8:	4615      	mov	r5, r2
 801b2da:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801b2de:	4590      	cmp	r8, r2
 801b2e0:	f300 80b8 	bgt.w	801b454 <__kernel_rem_pio2+0x32c>
 801b2e4:	f1bb 0f00 	cmp.w	fp, #0
 801b2e8:	dd07      	ble.n	801b2fa <__kernel_rem_pio2+0x1d2>
 801b2ea:	f1bb 0f01 	cmp.w	fp, #1
 801b2ee:	f000 80bf 	beq.w	801b470 <__kernel_rem_pio2+0x348>
 801b2f2:	f1bb 0f02 	cmp.w	fp, #2
 801b2f6:	f000 80c6 	beq.w	801b486 <__kernel_rem_pio2+0x35e>
 801b2fa:	f1b9 0f02 	cmp.w	r9, #2
 801b2fe:	d14c      	bne.n	801b39a <__kernel_rem_pio2+0x272>
 801b300:	4632      	mov	r2, r6
 801b302:	463b      	mov	r3, r7
 801b304:	494e      	ldr	r1, [pc, #312]	@ (801b440 <__kernel_rem_pio2+0x318>)
 801b306:	2000      	movs	r0, #0
 801b308:	f7e4 ffc6 	bl	8000298 <__aeabi_dsub>
 801b30c:	4606      	mov	r6, r0
 801b30e:	460f      	mov	r7, r1
 801b310:	2d00      	cmp	r5, #0
 801b312:	d042      	beq.n	801b39a <__kernel_rem_pio2+0x272>
 801b314:	4658      	mov	r0, fp
 801b316:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801b430 <__kernel_rem_pio2+0x308>
 801b31a:	f7ff fe49 	bl	801afb0 <scalbn>
 801b31e:	4630      	mov	r0, r6
 801b320:	4639      	mov	r1, r7
 801b322:	ec53 2b10 	vmov	r2, r3, d0
 801b326:	f7e4 ffb7 	bl	8000298 <__aeabi_dsub>
 801b32a:	4606      	mov	r6, r0
 801b32c:	460f      	mov	r7, r1
 801b32e:	e034      	b.n	801b39a <__kernel_rem_pio2+0x272>
 801b330:	4b44      	ldr	r3, [pc, #272]	@ (801b444 <__kernel_rem_pio2+0x31c>)
 801b332:	2200      	movs	r2, #0
 801b334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b338:	f7e5 f966 	bl	8000608 <__aeabi_dmul>
 801b33c:	f7e5 fc14 	bl	8000b68 <__aeabi_d2iz>
 801b340:	f7e5 f8f8 	bl	8000534 <__aeabi_i2d>
 801b344:	4b40      	ldr	r3, [pc, #256]	@ (801b448 <__kernel_rem_pio2+0x320>)
 801b346:	2200      	movs	r2, #0
 801b348:	4606      	mov	r6, r0
 801b34a:	460f      	mov	r7, r1
 801b34c:	f7e5 f95c 	bl	8000608 <__aeabi_dmul>
 801b350:	4602      	mov	r2, r0
 801b352:	460b      	mov	r3, r1
 801b354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b358:	f7e4 ff9e 	bl	8000298 <__aeabi_dsub>
 801b35c:	f7e5 fc04 	bl	8000b68 <__aeabi_d2iz>
 801b360:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b364:	f849 0b04 	str.w	r0, [r9], #4
 801b368:	4639      	mov	r1, r7
 801b36a:	4630      	mov	r0, r6
 801b36c:	f7e4 ff96 	bl	800029c <__adddf3>
 801b370:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801b374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b378:	e75d      	b.n	801b236 <__kernel_rem_pio2+0x10e>
 801b37a:	d107      	bne.n	801b38c <__kernel_rem_pio2+0x264>
 801b37c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801b380:	aa0c      	add	r2, sp, #48	@ 0x30
 801b382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b386:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801b38a:	e79e      	b.n	801b2ca <__kernel_rem_pio2+0x1a2>
 801b38c:	4b2f      	ldr	r3, [pc, #188]	@ (801b44c <__kernel_rem_pio2+0x324>)
 801b38e:	2200      	movs	r2, #0
 801b390:	f7e5 fbc0 	bl	8000b14 <__aeabi_dcmpge>
 801b394:	2800      	cmp	r0, #0
 801b396:	d143      	bne.n	801b420 <__kernel_rem_pio2+0x2f8>
 801b398:	4681      	mov	r9, r0
 801b39a:	2200      	movs	r2, #0
 801b39c:	2300      	movs	r3, #0
 801b39e:	4630      	mov	r0, r6
 801b3a0:	4639      	mov	r1, r7
 801b3a2:	f7e5 fb99 	bl	8000ad8 <__aeabi_dcmpeq>
 801b3a6:	2800      	cmp	r0, #0
 801b3a8:	f000 80bf 	beq.w	801b52a <__kernel_rem_pio2+0x402>
 801b3ac:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801b3b0:	2200      	movs	r2, #0
 801b3b2:	9900      	ldr	r1, [sp, #0]
 801b3b4:	428b      	cmp	r3, r1
 801b3b6:	da6e      	bge.n	801b496 <__kernel_rem_pio2+0x36e>
 801b3b8:	2a00      	cmp	r2, #0
 801b3ba:	f000 8089 	beq.w	801b4d0 <__kernel_rem_pio2+0x3a8>
 801b3be:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801b3c2:	ab0c      	add	r3, sp, #48	@ 0x30
 801b3c4:	f1ab 0b18 	sub.w	fp, fp, #24
 801b3c8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d0f6      	beq.n	801b3be <__kernel_rem_pio2+0x296>
 801b3d0:	4658      	mov	r0, fp
 801b3d2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801b430 <__kernel_rem_pio2+0x308>
 801b3d6:	f7ff fdeb 	bl	801afb0 <scalbn>
 801b3da:	f108 0301 	add.w	r3, r8, #1
 801b3de:	00da      	lsls	r2, r3, #3
 801b3e0:	9205      	str	r2, [sp, #20]
 801b3e2:	ec55 4b10 	vmov	r4, r5, d0
 801b3e6:	aa70      	add	r2, sp, #448	@ 0x1c0
 801b3e8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801b444 <__kernel_rem_pio2+0x31c>
 801b3ec:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801b3f0:	4646      	mov	r6, r8
 801b3f2:	f04f 0a00 	mov.w	sl, #0
 801b3f6:	2e00      	cmp	r6, #0
 801b3f8:	f280 80cf 	bge.w	801b59a <__kernel_rem_pio2+0x472>
 801b3fc:	4644      	mov	r4, r8
 801b3fe:	2c00      	cmp	r4, #0
 801b400:	f2c0 80fd 	blt.w	801b5fe <__kernel_rem_pio2+0x4d6>
 801b404:	4b12      	ldr	r3, [pc, #72]	@ (801b450 <__kernel_rem_pio2+0x328>)
 801b406:	461f      	mov	r7, r3
 801b408:	ab70      	add	r3, sp, #448	@ 0x1c0
 801b40a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b40e:	9306      	str	r3, [sp, #24]
 801b410:	f04f 0a00 	mov.w	sl, #0
 801b414:	f04f 0b00 	mov.w	fp, #0
 801b418:	2600      	movs	r6, #0
 801b41a:	eba8 0504 	sub.w	r5, r8, r4
 801b41e:	e0e2      	b.n	801b5e6 <__kernel_rem_pio2+0x4be>
 801b420:	f04f 0902 	mov.w	r9, #2
 801b424:	e754      	b.n	801b2d0 <__kernel_rem_pio2+0x1a8>
 801b426:	bf00      	nop
	...
 801b434:	3ff00000 	.word	0x3ff00000
 801b438:	0802f6c8 	.word	0x0802f6c8
 801b43c:	40200000 	.word	0x40200000
 801b440:	3ff00000 	.word	0x3ff00000
 801b444:	3e700000 	.word	0x3e700000
 801b448:	41700000 	.word	0x41700000
 801b44c:	3fe00000 	.word	0x3fe00000
 801b450:	0802f688 	.word	0x0802f688
 801b454:	f854 3b04 	ldr.w	r3, [r4], #4
 801b458:	b945      	cbnz	r5, 801b46c <__kernel_rem_pio2+0x344>
 801b45a:	b123      	cbz	r3, 801b466 <__kernel_rem_pio2+0x33e>
 801b45c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801b460:	f844 3c04 	str.w	r3, [r4, #-4]
 801b464:	2301      	movs	r3, #1
 801b466:	3201      	adds	r2, #1
 801b468:	461d      	mov	r5, r3
 801b46a:	e738      	b.n	801b2de <__kernel_rem_pio2+0x1b6>
 801b46c:	1acb      	subs	r3, r1, r3
 801b46e:	e7f7      	b.n	801b460 <__kernel_rem_pio2+0x338>
 801b470:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801b474:	ab0c      	add	r3, sp, #48	@ 0x30
 801b476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b47a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b47e:	a90c      	add	r1, sp, #48	@ 0x30
 801b480:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b484:	e739      	b.n	801b2fa <__kernel_rem_pio2+0x1d2>
 801b486:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801b48a:	ab0c      	add	r3, sp, #48	@ 0x30
 801b48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b490:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b494:	e7f3      	b.n	801b47e <__kernel_rem_pio2+0x356>
 801b496:	a90c      	add	r1, sp, #48	@ 0x30
 801b498:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b49c:	3b01      	subs	r3, #1
 801b49e:	430a      	orrs	r2, r1
 801b4a0:	e787      	b.n	801b3b2 <__kernel_rem_pio2+0x28a>
 801b4a2:	3401      	adds	r4, #1
 801b4a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b4a8:	2a00      	cmp	r2, #0
 801b4aa:	d0fa      	beq.n	801b4a2 <__kernel_rem_pio2+0x37a>
 801b4ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b4ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801b4b2:	eb0d 0503 	add.w	r5, sp, r3
 801b4b6:	9b06      	ldr	r3, [sp, #24]
 801b4b8:	aa20      	add	r2, sp, #128	@ 0x80
 801b4ba:	4443      	add	r3, r8
 801b4bc:	f108 0701 	add.w	r7, r8, #1
 801b4c0:	3d98      	subs	r5, #152	@ 0x98
 801b4c2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801b4c6:	4444      	add	r4, r8
 801b4c8:	42bc      	cmp	r4, r7
 801b4ca:	da04      	bge.n	801b4d6 <__kernel_rem_pio2+0x3ae>
 801b4cc:	46a0      	mov	r8, r4
 801b4ce:	e6a2      	b.n	801b216 <__kernel_rem_pio2+0xee>
 801b4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b4d2:	2401      	movs	r4, #1
 801b4d4:	e7e6      	b.n	801b4a4 <__kernel_rem_pio2+0x37c>
 801b4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b4d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801b4dc:	f7e5 f82a 	bl	8000534 <__aeabi_i2d>
 801b4e0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801b7a8 <__kernel_rem_pio2+0x680>
 801b4e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b4e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b4ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b4f0:	46b2      	mov	sl, r6
 801b4f2:	f04f 0800 	mov.w	r8, #0
 801b4f6:	9b05      	ldr	r3, [sp, #20]
 801b4f8:	4598      	cmp	r8, r3
 801b4fa:	dd05      	ble.n	801b508 <__kernel_rem_pio2+0x3e0>
 801b4fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b500:	3701      	adds	r7, #1
 801b502:	eca5 7b02 	vstmia	r5!, {d7}
 801b506:	e7df      	b.n	801b4c8 <__kernel_rem_pio2+0x3a0>
 801b508:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801b50c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b510:	f7e5 f87a 	bl	8000608 <__aeabi_dmul>
 801b514:	4602      	mov	r2, r0
 801b516:	460b      	mov	r3, r1
 801b518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b51c:	f7e4 febe 	bl	800029c <__adddf3>
 801b520:	f108 0801 	add.w	r8, r8, #1
 801b524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b528:	e7e5      	b.n	801b4f6 <__kernel_rem_pio2+0x3ce>
 801b52a:	f1cb 0000 	rsb	r0, fp, #0
 801b52e:	ec47 6b10 	vmov	d0, r6, r7
 801b532:	f7ff fd3d 	bl	801afb0 <scalbn>
 801b536:	ec55 4b10 	vmov	r4, r5, d0
 801b53a:	4b9d      	ldr	r3, [pc, #628]	@ (801b7b0 <__kernel_rem_pio2+0x688>)
 801b53c:	2200      	movs	r2, #0
 801b53e:	4620      	mov	r0, r4
 801b540:	4629      	mov	r1, r5
 801b542:	f7e5 fae7 	bl	8000b14 <__aeabi_dcmpge>
 801b546:	b300      	cbz	r0, 801b58a <__kernel_rem_pio2+0x462>
 801b548:	4b9a      	ldr	r3, [pc, #616]	@ (801b7b4 <__kernel_rem_pio2+0x68c>)
 801b54a:	2200      	movs	r2, #0
 801b54c:	4620      	mov	r0, r4
 801b54e:	4629      	mov	r1, r5
 801b550:	f7e5 f85a 	bl	8000608 <__aeabi_dmul>
 801b554:	f7e5 fb08 	bl	8000b68 <__aeabi_d2iz>
 801b558:	4606      	mov	r6, r0
 801b55a:	f7e4 ffeb 	bl	8000534 <__aeabi_i2d>
 801b55e:	4b94      	ldr	r3, [pc, #592]	@ (801b7b0 <__kernel_rem_pio2+0x688>)
 801b560:	2200      	movs	r2, #0
 801b562:	f7e5 f851 	bl	8000608 <__aeabi_dmul>
 801b566:	460b      	mov	r3, r1
 801b568:	4602      	mov	r2, r0
 801b56a:	4629      	mov	r1, r5
 801b56c:	4620      	mov	r0, r4
 801b56e:	f7e4 fe93 	bl	8000298 <__aeabi_dsub>
 801b572:	f7e5 faf9 	bl	8000b68 <__aeabi_d2iz>
 801b576:	ab0c      	add	r3, sp, #48	@ 0x30
 801b578:	f10b 0b18 	add.w	fp, fp, #24
 801b57c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801b580:	f108 0801 	add.w	r8, r8, #1
 801b584:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801b588:	e722      	b.n	801b3d0 <__kernel_rem_pio2+0x2a8>
 801b58a:	4620      	mov	r0, r4
 801b58c:	4629      	mov	r1, r5
 801b58e:	f7e5 faeb 	bl	8000b68 <__aeabi_d2iz>
 801b592:	ab0c      	add	r3, sp, #48	@ 0x30
 801b594:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801b598:	e71a      	b.n	801b3d0 <__kernel_rem_pio2+0x2a8>
 801b59a:	ab0c      	add	r3, sp, #48	@ 0x30
 801b59c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801b5a0:	f7e4 ffc8 	bl	8000534 <__aeabi_i2d>
 801b5a4:	4622      	mov	r2, r4
 801b5a6:	462b      	mov	r3, r5
 801b5a8:	f7e5 f82e 	bl	8000608 <__aeabi_dmul>
 801b5ac:	4652      	mov	r2, sl
 801b5ae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801b5b2:	465b      	mov	r3, fp
 801b5b4:	4620      	mov	r0, r4
 801b5b6:	4629      	mov	r1, r5
 801b5b8:	f7e5 f826 	bl	8000608 <__aeabi_dmul>
 801b5bc:	3e01      	subs	r6, #1
 801b5be:	4604      	mov	r4, r0
 801b5c0:	460d      	mov	r5, r1
 801b5c2:	e718      	b.n	801b3f6 <__kernel_rem_pio2+0x2ce>
 801b5c4:	9906      	ldr	r1, [sp, #24]
 801b5c6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801b5ca:	9106      	str	r1, [sp, #24]
 801b5cc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801b5d0:	f7e5 f81a 	bl	8000608 <__aeabi_dmul>
 801b5d4:	4602      	mov	r2, r0
 801b5d6:	460b      	mov	r3, r1
 801b5d8:	4650      	mov	r0, sl
 801b5da:	4659      	mov	r1, fp
 801b5dc:	f7e4 fe5e 	bl	800029c <__adddf3>
 801b5e0:	3601      	adds	r6, #1
 801b5e2:	4682      	mov	sl, r0
 801b5e4:	468b      	mov	fp, r1
 801b5e6:	9b00      	ldr	r3, [sp, #0]
 801b5e8:	429e      	cmp	r6, r3
 801b5ea:	dc01      	bgt.n	801b5f0 <__kernel_rem_pio2+0x4c8>
 801b5ec:	42b5      	cmp	r5, r6
 801b5ee:	dae9      	bge.n	801b5c4 <__kernel_rem_pio2+0x49c>
 801b5f0:	ab48      	add	r3, sp, #288	@ 0x120
 801b5f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801b5f6:	e9c5 ab00 	strd	sl, fp, [r5]
 801b5fa:	3c01      	subs	r4, #1
 801b5fc:	e6ff      	b.n	801b3fe <__kernel_rem_pio2+0x2d6>
 801b5fe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801b600:	2b02      	cmp	r3, #2
 801b602:	dc0b      	bgt.n	801b61c <__kernel_rem_pio2+0x4f4>
 801b604:	2b00      	cmp	r3, #0
 801b606:	dc39      	bgt.n	801b67c <__kernel_rem_pio2+0x554>
 801b608:	d05d      	beq.n	801b6c6 <__kernel_rem_pio2+0x59e>
 801b60a:	9b02      	ldr	r3, [sp, #8]
 801b60c:	f003 0007 	and.w	r0, r3, #7
 801b610:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801b614:	ecbd 8b02 	vpop	{d8}
 801b618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b61c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801b61e:	2b03      	cmp	r3, #3
 801b620:	d1f3      	bne.n	801b60a <__kernel_rem_pio2+0x4e2>
 801b622:	9b05      	ldr	r3, [sp, #20]
 801b624:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801b628:	eb0d 0403 	add.w	r4, sp, r3
 801b62c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801b630:	4625      	mov	r5, r4
 801b632:	46c2      	mov	sl, r8
 801b634:	f1ba 0f00 	cmp.w	sl, #0
 801b638:	f1a5 0508 	sub.w	r5, r5, #8
 801b63c:	dc6b      	bgt.n	801b716 <__kernel_rem_pio2+0x5ee>
 801b63e:	4645      	mov	r5, r8
 801b640:	2d01      	cmp	r5, #1
 801b642:	f1a4 0408 	sub.w	r4, r4, #8
 801b646:	f300 8087 	bgt.w	801b758 <__kernel_rem_pio2+0x630>
 801b64a:	9c05      	ldr	r4, [sp, #20]
 801b64c:	ab48      	add	r3, sp, #288	@ 0x120
 801b64e:	441c      	add	r4, r3
 801b650:	2000      	movs	r0, #0
 801b652:	2100      	movs	r1, #0
 801b654:	f1b8 0f01 	cmp.w	r8, #1
 801b658:	f300 809c 	bgt.w	801b794 <__kernel_rem_pio2+0x66c>
 801b65c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801b660:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801b664:	f1b9 0f00 	cmp.w	r9, #0
 801b668:	f040 80a6 	bne.w	801b7b8 <__kernel_rem_pio2+0x690>
 801b66c:	9b04      	ldr	r3, [sp, #16]
 801b66e:	e9c3 7800 	strd	r7, r8, [r3]
 801b672:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801b676:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b67a:	e7c6      	b.n	801b60a <__kernel_rem_pio2+0x4e2>
 801b67c:	9d05      	ldr	r5, [sp, #20]
 801b67e:	ab48      	add	r3, sp, #288	@ 0x120
 801b680:	441d      	add	r5, r3
 801b682:	4644      	mov	r4, r8
 801b684:	2000      	movs	r0, #0
 801b686:	2100      	movs	r1, #0
 801b688:	2c00      	cmp	r4, #0
 801b68a:	da35      	bge.n	801b6f8 <__kernel_rem_pio2+0x5d0>
 801b68c:	f1b9 0f00 	cmp.w	r9, #0
 801b690:	d038      	beq.n	801b704 <__kernel_rem_pio2+0x5dc>
 801b692:	4602      	mov	r2, r0
 801b694:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b698:	9c04      	ldr	r4, [sp, #16]
 801b69a:	e9c4 2300 	strd	r2, r3, [r4]
 801b69e:	4602      	mov	r2, r0
 801b6a0:	460b      	mov	r3, r1
 801b6a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801b6a6:	f7e4 fdf7 	bl	8000298 <__aeabi_dsub>
 801b6aa:	ad4a      	add	r5, sp, #296	@ 0x128
 801b6ac:	2401      	movs	r4, #1
 801b6ae:	45a0      	cmp	r8, r4
 801b6b0:	da2b      	bge.n	801b70a <__kernel_rem_pio2+0x5e2>
 801b6b2:	f1b9 0f00 	cmp.w	r9, #0
 801b6b6:	d002      	beq.n	801b6be <__kernel_rem_pio2+0x596>
 801b6b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b6bc:	4619      	mov	r1, r3
 801b6be:	9b04      	ldr	r3, [sp, #16]
 801b6c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b6c4:	e7a1      	b.n	801b60a <__kernel_rem_pio2+0x4e2>
 801b6c6:	9c05      	ldr	r4, [sp, #20]
 801b6c8:	ab48      	add	r3, sp, #288	@ 0x120
 801b6ca:	441c      	add	r4, r3
 801b6cc:	2000      	movs	r0, #0
 801b6ce:	2100      	movs	r1, #0
 801b6d0:	f1b8 0f00 	cmp.w	r8, #0
 801b6d4:	da09      	bge.n	801b6ea <__kernel_rem_pio2+0x5c2>
 801b6d6:	f1b9 0f00 	cmp.w	r9, #0
 801b6da:	d002      	beq.n	801b6e2 <__kernel_rem_pio2+0x5ba>
 801b6dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b6e0:	4619      	mov	r1, r3
 801b6e2:	9b04      	ldr	r3, [sp, #16]
 801b6e4:	e9c3 0100 	strd	r0, r1, [r3]
 801b6e8:	e78f      	b.n	801b60a <__kernel_rem_pio2+0x4e2>
 801b6ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b6ee:	f7e4 fdd5 	bl	800029c <__adddf3>
 801b6f2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801b6f6:	e7eb      	b.n	801b6d0 <__kernel_rem_pio2+0x5a8>
 801b6f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801b6fc:	f7e4 fdce 	bl	800029c <__adddf3>
 801b700:	3c01      	subs	r4, #1
 801b702:	e7c1      	b.n	801b688 <__kernel_rem_pio2+0x560>
 801b704:	4602      	mov	r2, r0
 801b706:	460b      	mov	r3, r1
 801b708:	e7c6      	b.n	801b698 <__kernel_rem_pio2+0x570>
 801b70a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801b70e:	f7e4 fdc5 	bl	800029c <__adddf3>
 801b712:	3401      	adds	r4, #1
 801b714:	e7cb      	b.n	801b6ae <__kernel_rem_pio2+0x586>
 801b716:	ed95 7b00 	vldr	d7, [r5]
 801b71a:	ed8d 7b00 	vstr	d7, [sp]
 801b71e:	ed95 7b02 	vldr	d7, [r5, #8]
 801b722:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b726:	ec53 2b17 	vmov	r2, r3, d7
 801b72a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b72e:	f7e4 fdb5 	bl	800029c <__adddf3>
 801b732:	4602      	mov	r2, r0
 801b734:	460b      	mov	r3, r1
 801b736:	4606      	mov	r6, r0
 801b738:	460f      	mov	r7, r1
 801b73a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b73e:	f7e4 fdab 	bl	8000298 <__aeabi_dsub>
 801b742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b746:	f7e4 fda9 	bl	800029c <__adddf3>
 801b74a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801b74e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801b752:	e9c5 6700 	strd	r6, r7, [r5]
 801b756:	e76d      	b.n	801b634 <__kernel_rem_pio2+0x50c>
 801b758:	ed94 7b00 	vldr	d7, [r4]
 801b75c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801b760:	ec51 0b17 	vmov	r0, r1, d7
 801b764:	4652      	mov	r2, sl
 801b766:	465b      	mov	r3, fp
 801b768:	ed8d 7b00 	vstr	d7, [sp]
 801b76c:	f7e4 fd96 	bl	800029c <__adddf3>
 801b770:	4602      	mov	r2, r0
 801b772:	460b      	mov	r3, r1
 801b774:	4606      	mov	r6, r0
 801b776:	460f      	mov	r7, r1
 801b778:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b77c:	f7e4 fd8c 	bl	8000298 <__aeabi_dsub>
 801b780:	4652      	mov	r2, sl
 801b782:	465b      	mov	r3, fp
 801b784:	f7e4 fd8a 	bl	800029c <__adddf3>
 801b788:	3d01      	subs	r5, #1
 801b78a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801b78e:	e9c4 6700 	strd	r6, r7, [r4]
 801b792:	e755      	b.n	801b640 <__kernel_rem_pio2+0x518>
 801b794:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b798:	f7e4 fd80 	bl	800029c <__adddf3>
 801b79c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801b7a0:	e758      	b.n	801b654 <__kernel_rem_pio2+0x52c>
 801b7a2:	bf00      	nop
 801b7a4:	f3af 8000 	nop.w
	...
 801b7b0:	41700000 	.word	0x41700000
 801b7b4:	3e700000 	.word	0x3e700000
 801b7b8:	9b04      	ldr	r3, [sp, #16]
 801b7ba:	9a04      	ldr	r2, [sp, #16]
 801b7bc:	601f      	str	r7, [r3, #0]
 801b7be:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801b7c2:	605c      	str	r4, [r3, #4]
 801b7c4:	609d      	str	r5, [r3, #8]
 801b7c6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801b7ca:	60d3      	str	r3, [r2, #12]
 801b7cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b7d0:	6110      	str	r0, [r2, #16]
 801b7d2:	6153      	str	r3, [r2, #20]
 801b7d4:	e719      	b.n	801b60a <__kernel_rem_pio2+0x4e2>
 801b7d6:	bf00      	nop

0801b7d8 <floor>:
 801b7d8:	ec51 0b10 	vmov	r0, r1, d0
 801b7dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7e4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801b7e8:	2e13      	cmp	r6, #19
 801b7ea:	460c      	mov	r4, r1
 801b7ec:	4605      	mov	r5, r0
 801b7ee:	4680      	mov	r8, r0
 801b7f0:	dc34      	bgt.n	801b85c <floor+0x84>
 801b7f2:	2e00      	cmp	r6, #0
 801b7f4:	da17      	bge.n	801b826 <floor+0x4e>
 801b7f6:	a332      	add	r3, pc, #200	@ (adr r3, 801b8c0 <floor+0xe8>)
 801b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7fc:	f7e4 fd4e 	bl	800029c <__adddf3>
 801b800:	2200      	movs	r2, #0
 801b802:	2300      	movs	r3, #0
 801b804:	f7e5 f990 	bl	8000b28 <__aeabi_dcmpgt>
 801b808:	b150      	cbz	r0, 801b820 <floor+0x48>
 801b80a:	2c00      	cmp	r4, #0
 801b80c:	da55      	bge.n	801b8ba <floor+0xe2>
 801b80e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801b812:	432c      	orrs	r4, r5
 801b814:	2500      	movs	r5, #0
 801b816:	42ac      	cmp	r4, r5
 801b818:	4c2b      	ldr	r4, [pc, #172]	@ (801b8c8 <floor+0xf0>)
 801b81a:	bf08      	it	eq
 801b81c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801b820:	4621      	mov	r1, r4
 801b822:	4628      	mov	r0, r5
 801b824:	e023      	b.n	801b86e <floor+0x96>
 801b826:	4f29      	ldr	r7, [pc, #164]	@ (801b8cc <floor+0xf4>)
 801b828:	4137      	asrs	r7, r6
 801b82a:	ea01 0307 	and.w	r3, r1, r7
 801b82e:	4303      	orrs	r3, r0
 801b830:	d01d      	beq.n	801b86e <floor+0x96>
 801b832:	a323      	add	r3, pc, #140	@ (adr r3, 801b8c0 <floor+0xe8>)
 801b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b838:	f7e4 fd30 	bl	800029c <__adddf3>
 801b83c:	2200      	movs	r2, #0
 801b83e:	2300      	movs	r3, #0
 801b840:	f7e5 f972 	bl	8000b28 <__aeabi_dcmpgt>
 801b844:	2800      	cmp	r0, #0
 801b846:	d0eb      	beq.n	801b820 <floor+0x48>
 801b848:	2c00      	cmp	r4, #0
 801b84a:	bfbe      	ittt	lt
 801b84c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801b850:	4133      	asrlt	r3, r6
 801b852:	18e4      	addlt	r4, r4, r3
 801b854:	ea24 0407 	bic.w	r4, r4, r7
 801b858:	2500      	movs	r5, #0
 801b85a:	e7e1      	b.n	801b820 <floor+0x48>
 801b85c:	2e33      	cmp	r6, #51	@ 0x33
 801b85e:	dd0a      	ble.n	801b876 <floor+0x9e>
 801b860:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801b864:	d103      	bne.n	801b86e <floor+0x96>
 801b866:	4602      	mov	r2, r0
 801b868:	460b      	mov	r3, r1
 801b86a:	f7e4 fd17 	bl	800029c <__adddf3>
 801b86e:	ec41 0b10 	vmov	d0, r0, r1
 801b872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b876:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801b87a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b87e:	40df      	lsrs	r7, r3
 801b880:	4207      	tst	r7, r0
 801b882:	d0f4      	beq.n	801b86e <floor+0x96>
 801b884:	a30e      	add	r3, pc, #56	@ (adr r3, 801b8c0 <floor+0xe8>)
 801b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b88a:	f7e4 fd07 	bl	800029c <__adddf3>
 801b88e:	2200      	movs	r2, #0
 801b890:	2300      	movs	r3, #0
 801b892:	f7e5 f949 	bl	8000b28 <__aeabi_dcmpgt>
 801b896:	2800      	cmp	r0, #0
 801b898:	d0c2      	beq.n	801b820 <floor+0x48>
 801b89a:	2c00      	cmp	r4, #0
 801b89c:	da0a      	bge.n	801b8b4 <floor+0xdc>
 801b89e:	2e14      	cmp	r6, #20
 801b8a0:	d101      	bne.n	801b8a6 <floor+0xce>
 801b8a2:	3401      	adds	r4, #1
 801b8a4:	e006      	b.n	801b8b4 <floor+0xdc>
 801b8a6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801b8aa:	2301      	movs	r3, #1
 801b8ac:	40b3      	lsls	r3, r6
 801b8ae:	441d      	add	r5, r3
 801b8b0:	4545      	cmp	r5, r8
 801b8b2:	d3f6      	bcc.n	801b8a2 <floor+0xca>
 801b8b4:	ea25 0507 	bic.w	r5, r5, r7
 801b8b8:	e7b2      	b.n	801b820 <floor+0x48>
 801b8ba:	2500      	movs	r5, #0
 801b8bc:	462c      	mov	r4, r5
 801b8be:	e7af      	b.n	801b820 <floor+0x48>
 801b8c0:	8800759c 	.word	0x8800759c
 801b8c4:	7e37e43c 	.word	0x7e37e43c
 801b8c8:	bff00000 	.word	0xbff00000
 801b8cc:	000fffff 	.word	0x000fffff

0801b8d0 <_init>:
 801b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8d2:	bf00      	nop
 801b8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b8d6:	bc08      	pop	{r3}
 801b8d8:	469e      	mov	lr, r3
 801b8da:	4770      	bx	lr

0801b8dc <_fini>:
 801b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8de:	bf00      	nop
 801b8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b8e2:	bc08      	pop	{r3}
 801b8e4:	469e      	mov	lr, r3
 801b8e6:	4770      	bx	lr
